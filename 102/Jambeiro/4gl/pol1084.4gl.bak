#-------------------------------------------------------------------#
# PROGRAMA: pol1084                                                 #
# OBJETIVO: MRP POR DEMANDA DE PEDIOS                               #
# CLIENTE.: JAMBEIRO                                                #
# DATA....: 15/02/2011                                              #
# POR.....: IVO BI                                                  #
# DATA   ALTERAÇÃO                                                  #
#
#-------------------------------------------------------------------#

DATABASE logix

GLOBALS

  DEFINE p_cod_empresa        LIKE empresa.cod_empresa,
       	 p_den_empresa        LIKE empresa.den_empresa,
       	 p_user               LIKE usuario.nom_usuario,
         p_index              SMALLINT,
         s_index              SMALLINT,
         p_ind                SMALLINT,
         s_ind                SMALLINT,
         p_msg                CHAR(300),
       	 p_nom_arquivo        CHAR(100),
       	 p_count              SMALLINT,
         p_rowid              SMALLINT,
       	 p_houve_erro         SMALLINT,
         p_ies_impressao      CHAR(01),
         g_ies_ambiente       CHAR(01),
       	 p_retorno            SMALLINT,
         p_nom_tela           CHAR(200),
       	 p_status             SMALLINT,
       	 p_caminho            CHAR(100),
       	 comando              CHAR(80),
         p_versao             CHAR(18),
         sql_stmt             CHAR(500),
         where_clause         CHAR(500),
         p_ies_cons           SMALLINT,
         p_query              CHAR(750)

   DEFINE p_txt_aux           CHAR(30),
          p_dat_liberac       DATE,
          p_dat_abertura      DATE

   DEFINE p_parametros        LIKE par_pcp.parametros,
          p_cod_lin_prod      LIKE item.cod_lin_prod, 
          p_cod_lin_recei     LIKE item.cod_lin_recei,       
          p_cod_seg_merc      LIKE item.cod_seg_merc,        
          p_cod_cla_uso       LIKE item.cod_cla_uso,
          p_num_ordem         LIKE ordens.num_ordem,
          p_num_neces         LIKE ordens.num_neces,
          p_dat_entrega       LIKE ordens.dat_entrega,
          p_qtd_planej        LIKE ordens.qtd_planej, 
          p_ies_situa         LIKE ordens.ies_situa,
          p_cod_item          LIKE item.cod_item,
          p_cod_item_pai      LIKE item.cod_item,
          p_prz_entrega       LIKE ped_dem.prz_entrega,
          p_cod_local_estoq   LIKE item.cod_local_estoq,
          p_num_lote          LIKE estoque_lote.num_lote,
          p_qtd_dias_horizon  LIKE horizonte.qtd_dias_horizon,
          p_cod_cent_trab     LIKE ord_compon.cod_cent_trab,
          p_ies_tip_item      LIKE item.ies_tip_item
                   
   
   DEFINE p_ordens            RECORD LIKE ordens.*,
          p_necessidades      RECORD LIKE necessidades.*,
          p_ord_compon        RECORD LIKE ord_compon.*,
          p_ord_oper          RECORD LIKE ord_oper.*,
          p_item_man          RECORD LIKE item_man.*

   DEFINE p_ped_dem           RECORD 
          cod_empresa         CHAR(2),          
          num_projeto         CHAR(08),         
          num_pedido          DECIMAL(6,0),     
          num_seq             DECIMAL(3,0),     
          cod_item_pai        CHAR(15),         
          num_op_pai          INTEGER,          
          prz_entrega         DATE,             
          qtd_saldo           DECIMAL(10,3)     
   END RECORD
   
   DEFINE p_tela              RECORD
          dat_ini             DATE,
          dat_fim             DATE,
          ies_dem             CHAR(01)
   END RECORD

   DEFINE pr_men               ARRAY[1] OF RECORD    
          mensagem             CHAR(60)
   END RECORD
   
END GLOBALS
          
MAIN
   CALL log0180_conecta_usuario()
   LET p_versao = "pol1084-10.02.11"
   WHENEVER ERROR CONTINUE
   SET ISOLATION TO DIRTY READ
   SET LOCK MODE TO WAIT 15
   DEFER INTERRUPT

   CALL log001_acessa_usuario("ESPEC999","")
      RETURNING p_status, p_cod_empresa, p_user

   IF p_status = 0 THEN
      CALL pol1084_controle()
   END IF
END MAIN
   
#-------------------------#
FUNCTION pol1084_controle()
#-------------------------#
   
   CALL log006_exibe_teclas("01",p_versao)
   INITIALIZE p_nom_tela TO NULL 
   CALL log130_procura_caminho("pol1084") RETURNING p_nom_tela
   LET p_nom_tela = p_nom_tela CLIPPED 
   OPEN WINDOW w_pol1084 AT 2,2 WITH FORM p_nom_tela
      ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST)

   DISPLAY p_cod_empresa TO cod_empresa
   
   IF NOT pol1084_cria_tab_tmp() THEN
      RETURN FALSE
   END IF
   
   MENU "OPCAO"
      COMMAND "Informar"   "Informar parametros para o processamento"
         IF pol1084_entrada_dados() THEN
            LET p_ies_cons = TRUE
            NEXT OPTION "Processar"
         ELSE
            LET p_ies_cons = FALSE
            ERROR 'Operação cancelada !!!'
         END IF
      COMMAND "Processar"  "Processa a geração das ordens de produção"
         IF p_ies_cons THEN
            CALL pol1084_processar() RETURNING p_status
            IF p_status THEN
               ERROR 'Operação efetuada com sucesso !!!'
               LET pr_men[1].mensagem = 'OPERAÇÃO EFETUADA COM SUCESSO!'
            ELSE
               ERROR 'Operação cancelada !!!'
               LET pr_men[1].mensagem = 'OPERAÇÃO CANCELADA!'
            END IF
            CALL pol1084_exib_mensagem()
            LET p_ies_cons = FALSE
            NEXT OPTION 'Fim'
         ELSE
            ERROR 'Informe os parâmetros previamente !!!'
            NEXT OPTION 'Informar'
         END IF
      COMMAND KEY ("O") "sObre" "Exibe a versão do programa"
         CALL pol1084_sobre()
      COMMAND KEY ("!")
         PROMPT "Digite o comando : " FOR comando
         RUN comando
         PROMPT "\nTecle ENTER para continuar" FOR CHAR comando
      COMMAND "Fim" "Retorna ao Menu Anterior"
         EXIT MENU
   END MENU

   CLOSE WINDOW w_pol1084

END FUNCTION
 
#-----------------------#
 FUNCTION pol1084_sobre()
#-----------------------#

   LET p_msg = p_versao CLIPPED,"\n","\n",
               " LOGIX 10.02 ","\n","\n",
               " Home page: www.aceex.com.br ","\n","\n",
               " (0xx11) 4991-6667 ","\n","\n"

   CALL log0030_mensagem(p_msg,'excla')
                  
END FUNCTION

#----------------------------#
FUNCTION pol1084_limpa_tela()
#----------------------------#

   CLEAR FORM
   DISPLAY p_cod_empresa TO cod_empresa
   INITIALIZE p_tela TO NULL
   LET p_tela.ies_dem = 'N'

END FUNCTION

#------------------------------#
FUNCTION pol1084_cria_tab_tmp()
#------------------------------#

   CREATE TEMP TABLE ops_tmp_5000 (
      num_op INTEGER
   );

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Criando','ops_tmp_5000')
      RETURN FALSE
   END IF
   
   CREATE TEMP TABLE neces_tmp_5000 (
      num_neces INTEGER
   );

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Criando','neces_tmp_5000')
      RETURN FALSE
   END IF
   
   RETURN TRUE
   
END FUNCTION

#-------------------------------#
 FUNCTION pol1084_entrada_dados()
#-------------------------------#
 
   CALL pol1084_limpa_tela()
   LET INT_FLAG = FALSE
   
   INPUT BY NAME p_tela.* WITHOUT DEFAULTS

   AFTER INPUT
     IF INT_FLAG THEN
        CALL pol1084_limpa_tela()
        RETURN FALSE
     ELSE
        IF p_tela.dat_ini IS NULL THEN
           ERROR "Data inicial deve ser preenchida."
           NEXT FIELD dat_ini
        END IF
        IF p_tela.dat_fim IS NULL THEN
           ERROR "Data final deve ser preenchida."
           NEXT FIELD dat_fim
        END IF
        IF p_tela.dat_fim < p_tela.dat_ini THEN
           ERROR "Data final deve ser maior ou igual a inicial."
           NEXT FIELD dat_ini
        END IF
        IF p_tela.ies_dem IS NULL THEN
           ERROR "Este campo deve ser preenchido"
           NEXT FIELD ies_dem
        END IF
        IF p_tela.ies_dem <> "S" AND p_tela.ies_dem <> "N" THEN
           ERROR "Valor inválido para o campo"
           NEXT FIELD ies_dem
        END IF
     END IF

   END INPUT

   RETURN TRUE
   
END FUNCTION

#---------------------------#
FUNCTION pol1084_processar()
#---------------------------#

   IF NOT log004_confirm(16,32) THEN
      RETURN FALSE
   END IF
   
   SELECT parametros
     INTO p_parametros 
     FROM par_pcp
    WHERE cod_empresa = p_cod_empresa

   IF STATUS <> 0 THEN 
      CALL log003_err_sql("SELECT","PAR_PCP")
      RETURN FALSE
   END IF
   
   CALL pol1084_monta_select()

   IF NOT pol1084_proces_mrp() THEN
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION

#------------------------------#
FUNCTION pol1084_bloqueia_tab()
#------------------------------#

   LOCK TABLE ped_dem_5000 IN EXCLUSIVE MODE

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Bloqueando','ped_dem_5000')
      RETURN FALSE
   END IF

   LOCK TABLE ped_dem IN EXCLUSIVE MODE

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Bloqueando','ped_dem')
      RETURN FALSE
   END IF

   RETURN TRUE

END FUNCTION

#------------------------------#
FUNCTION pol1084_monta_select()
#------------------------------#
   
   INITIALIZE p_query TO NULL

   LET p_query = 
       " SELECT pedidos.cod_empresa, ",
       " pedidos.num_pedido, ",
       " ped_itens.num_sequencia, ",
       " ped_itens.cod_item, ",
       " ped_itens.prz_entrega, ",
       "(ped_itens.qtd_pecas_solic  - ",
       " ped_itens.qtd_pecas_atend  - ",
       " ped_itens.qtd_pecas_cancel - ",
       " ped_itens.qtd_pecas_romaneio) ",
       " FROM pedidos, ped_itens "

   IF p_parametros[210,210] = "S" THEN
     LET p_query = p_query CLIPPED, ", nat_operacao "
   END IF

   LET p_query = p_query CLIPPED," WHERE pedidos.cod_empresa = '",p_cod_empresa,"'"

   IF p_parametros[115,115] = "S" THEN
      LET p_query = p_query CLIPPED,
          " AND pedidos.ies_sit_pedido NOT IN ('S','P','9')"
   ELSE
      LET p_query = p_query CLIPPED,
          " AND pedidos.ies_sit_pedido NOT IN ('S','B','P','9')"
   END IF

   IF p_parametros[210,210] = "S" THEN
      LET p_query = p_query CLIPPED, 
          " AND nat_operacao.cod_nat_oper = pedidos.cod_nat_oper ",
          " AND nat_operacao.cod_movto_estoq IS NOT NULL"
   END IF

   LET p_query = p_query CLIPPED,
       " AND ped_itens.cod_empresa = '",p_cod_empresa,"'"
      

   IF p_parametros[200,200] = "I" THEN
      LET p_query = p_query CLIPPED,
          " AND pedidos.dat_emis_repres >= '",p_tela.dat_ini,"'",
          " AND pedidos.dat_emis_repres <= '",p_tela.dat_fim,"'"
   ELSE 
      LET p_query = p_query CLIPPED,
          " AND ped_itens.prz_entrega >= '",p_tela.dat_ini,"'",
          " AND ped_itens.prz_entrega <= '",p_tela.dat_fim,"'"
   END IF

   IF p_tela.ies_dem = "N" THEN
      LET p_query = p_query CLIPPED,
          " AND ped_itens.num_pedido = pedidos.num_pedido ",
          " AND EXISTS (SELECT cod_item FROM item_man ",
          " WHERE item_man.cod_empresa = '",p_cod_empresa,"'",
          " AND item_man.cod_item = ped_itens.cod_item) "
   ELSE 
      LET p_query = p_query CLIPPED,
          " AND ped_itens.num_pedido = pedidos.num_pedido",
          " AND EXISTS (SELECT cod_item FROM item_man",
          " WHERE item_man.cod_empresa = '",p_cod_empresa,"'",
          " AND item_man.cod_item = ped_itens.cod_item",
          " AND item_man.ies_planejamento = '1')"
   END IF

END FUNCTION

#------------------------#
FUNCTION pol1084_le_aen()
#------------------------#

   DEFINE p_projeto CHAR(10)
   
   SELECT cod_lin_prod,                          
          cod_lin_recei,                            
          cod_seg_merc,                             
          cod_cla_uso                               
     INTO p_cod_lin_prod,                           
          p_cod_lin_recei,                          
          p_cod_seg_merc,                           
          p_cod_cla_uso                             
     FROM item                                      
    WHERE cod_empresa = p_cod_empresa               
      AND cod_item    = p_cod_item                  
                                                 
   IF STATUS <> 0 THEN      
      LET p_projeto = NULL                        
      CALL log003_err_sql('Lendo','item:AEN')       
   ELSE                                                    
      LET p_projeto =                      
          p_cod_lin_prod  USING '&&',               
          p_cod_lin_recei USING '&&',               
          p_cod_seg_merc  USING '&&',               
          p_cod_cla_uso   USING '&&'                
   END IF
   
   RETURN(p_projeto)

END FUNCTION

#------------------------------#
FUNCTION pol1084_exib_mensagem()
#------------------------------#

   INPUT ARRAY pr_men 
      WITHOUT DEFAULTS FROM sr_men.*
      BEFORE INPUT
         EXIT INPUT
   END INPUT

END FUNCTION

#----------------------------#
FUNCTION pol1084_proces_mrp()
#----------------------------#


   DEFINE p_proces SMALLINT

   LET p_proces = FALSE

   LET pr_men[1].mensagem = 'LENDO CARTEIRA DE PEDIDOS!'
   CALL pol1084_exib_mensagem()
   
   #IF NOT pol1084_bloqueia_tab() THEN
   #   RETURN FALSE
   #END IF

   PREPARE var_select FROM p_query
   DECLARE cq_pedidos CURSOR WITH HOLD FOR var_select

   FOREACH cq_pedidos INTO 
           p_ped_dem.cod_empresa,
           p_ped_dem.num_pedido,
           p_ped_dem.num_seq,
           p_ped_dem.cod_item_pai,
           p_ped_dem.prz_entrega,
           p_ped_dem.qtd_saldo

      IF STATUS <> 0 THEN
         CALL log003_err_sql('Lendo','cq_pedidos')
         RETURN FALSE
      END IF

      LET pr_men[1].mensagem = 'PEDIDO:', p_ped_dem.num_pedido
      CALL pol1084_exib_mensagem()
      
      IF p_ped_dem.qtd_saldo <= 0 THEN
         CONTINUE FOREACH
      END IF
      
      CALL log085_transacao("BEGIN")
      
      LET pr_men[1].mensagem = 'LENDO PED_DEM_5000!'
      CALL pol1084_exib_mensagem()

      SELECT num_op_pai,
             cod_item_pai,
             prz_entrega
        INTO p_num_ordem,
             p_cod_item,
             p_prz_entrega
        FROM ped_dem_5000
       WHERE cod_empresa = p_cod_empresa
         AND num_pedido  = p_ped_dem.num_pedido
         AND num_seq     = p_ped_dem.num_seq
      
      IF STATUS <> 0 AND STATUS <> 100 THEN
         CALL log003_err_sql('Lendo','ped_dem_5000:op')
         CALL log085_transacao("ROLLBACK")
         RETURN FALSE
      END IF
      
      IF STATUS = 0 THEN

         LET pr_men[1].mensagem = 'LENDO TABELA ORDENS ', p_num_ordem
         CALL pol1084_exib_mensagem()

         SELECT dat_entrega,
                qtd_planej,
                ies_situa   
           INTO p_dat_entrega,
                p_qtd_planej, 
                p_ies_situa  
           FROM ordens
          WHERE cod_empresa = p_cod_empresa
            AND num_ordem   = p_num_ordem
         
         IF STATUS = 0 THEN
            IF p_ies_situa <> '3' AND p_ies_situa <> '9' THEN
               CALL log085_transacao("ROLLBACK")
               CONTINUE FOREACH
            END IF
            IF p_ies_situa <> '9' THEN
               IF p_dat_entrega = p_ped_dem.prz_entrega AND
                  p_qtd_planej  = p_ped_dem.qtd_saldo  THEN
                  CALL log085_transacao("ROLLBACK")
                  CONTINUE FOREACH
               END IF
            END IF            

            LET pr_men[1].mensagem = 'LOCALIZANDO/DELETANDO ORDENS DOS ITENS FILHOS!'
            CALL pol1084_exib_mensagem()

            IF NOT pol1084_del_ordens() THEN
               CALL log085_transacao("ROLLBACK")
               RETURN FALSE
            END IF
         ELSE
            IF STATUS <> 100 THEN
               CALL log003_err_sql('Lendo','ordens')
               CALL log085_transacao("ROLLBACK")
               RETURN FALSE
            END IF
         END IF

         LET pr_men[1].mensagem = 'DELETANDO REGISTRO DAS TABELAS PED_DEM/PED_DEM_5000!'
         CALL pol1084_exib_mensagem()

         IF NOT pol1084_del_ped_dem() THEN
            CALL log085_transacao("ROLLBACK")
            RETURN FALSE
         END IF
      END IF

      LET p_cod_item = p_ped_dem.cod_item_pai
      
      LET p_ped_dem.num_projeto = pol1084_le_aen()
      
      IF p_ped_dem.num_projeto IS NULL THEN
         CALL log085_transacao("ROLLBACK")
         RETURN FALSE
      END IF
      
      LET p_cod_item_pai = 0
      
      LET pr_men[1].mensagem = 'GERANDO OP PARA O ITEM DO PEDIDO!'
      CALL pol1084_exib_mensagem()

      IF NOT pol1084_gera_op() THEN
         CALL log085_transacao("ROLLBACK")
         RETURN FALSE
      END IF      
      
      LET p_ped_dem.num_op_pai = p_num_ordem
      
      LET pr_men[1].mensagem = 'ATUALIZANDO TABELAS PED_DEM/PED_DEM_5000!'
      CALL pol1084_exib_mensagem()

      IF NOT pol1084_ins_ped_dem() THEN
         CALL log085_transacao("ROLLBACK")
         RETURN FALSE
      END IF
      
      CALL log085_transacao("COMMIT")

      LET p_proces = TRUE
      
   END FOREACH
   
   IF NOT p_proces THEN
      LET p_msg = 'Não há dados a serem processados, \n',
                  'para os parâmetros informados!\n'
      CALL log0030_mensagem(p_msg,'excla')
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION
      
#----------------------------#
FUNCTION pol1084_del_ordens()
#----------------------------#

   IF NOT pol1074_ins_op() THEN
      RETURN FALSE
   END IF
   
   LET p_count = 1
      
   WHILE p_count > 0

      DECLARE cq_temp_op CURSOR FOR
       SELECT num_op FROM ops_tmp_5000
      
      FOREACH cq_temp_op INTO p_num_ordem
         
         IF STATUS <> 0 THEN
            CALL log003_err_sql('Lendo','cq_ops')  
            RETURN FALSE
         END IF
         
         DECLARE cq_le_neces CURSOR FOR
          SELECT num_neces 
            FROM necessidades
           WHERE cod_empresa = p_cod_empresa
             AND num_ordem   = p_num_ordem
         
         FOREACH cq_le_neces INTO p_num_neces

            IF STATUS <> 0 THEN
               CALL log003_err_sql('Lendo','cq_ops')  
               RETURN FALSE
            END IF
            
            IF NOT pol1084_ins_neces_tmp() THEN
               RETURN FALSE
            END IF
         
         END FOREACH

         IF NOT pol1084_del_tabs() THEN
            RETURN FALSE
         END IF
                  
      END FOREACH
      
      IF NOT pol1084_del_ops_tmp() THEN
         RETURN FALSE
      END IF
      
      LET p_count = 0
      
      DECLARE cq_neces_temp CURSOR FOR
       SELECT num_neces FROM neces_tmp_5000
      
      FOREACH cq_neces_temp INTO p_num_neces

         IF STATUS <> 0 THEN
            CALL log003_err_sql('Lendo','cq_neces_temp')  
            RETURN FALSE
         END IF
      
         SELECT num_ordem
           INTO p_num_ordem
           FROM ordens
          WHERE cod_empresa = p_cod_empresa
            AND num_neces   = p_num_neces

         IF STATUS = 0 THEN
            IF NOT pol1074_ins_op() THEN
               RETURN FALSE
            END IF
            LET p_count = 1
         ELSE
            IF STATUS <> 100 THEN
               CALL log003_err_sql('Lendo','cq_neces_temp')  
               RETURN FALSE
            END IF
         END IF
         
      END FOREACH

      IF NOT pol1084_del_neces_tmp() THEN
         RETURN FALSE
      END IF
      
   END WHILE
   
   RETURN TRUE

END FUNCTION

#------------------------------#
FUNCTION pol1084_del_neces_tmp()
#------------------------------#

   DELETE FROM neces_tmp_5000
   
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','neces_tmp_5000')  
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION

#------------------------------#
FUNCTION pol1084_del_ops_tmp()
#------------------------------#

   DELETE FROM ops_tmp_5000 
                  
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','ops_tmp_5000')  
      RETURN FALSE
   END IF
   
   RETURN TRUE
   
END FUNCTION

#------------------------------#
FUNCTION pol1084_ins_neces_tmp()
#------------------------------#

   INSERT INTO neces_tmp_5000 VALUES(p_num_neces)
   
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Inserindo','neces_tmp_5000')  
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION

#------------------------#
FUNCTION pol1074_ins_op()
#------------------------#

   INSERT INTO ops_tmp_5000 VALUES(p_num_ordem)

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Inserindo','ops_tmp_5000')  
      RETURN FALSE
   END IF
   
   RETURN TRUE
   
END FUNCTION

#--------------------------#
FUNCTION pol1084_del_tabs()
#--------------------------#
 
   DELETE FROM ordens 
    WHERE cod_empresa = p_cod_empresa
      AND num_ordem   = p_num_ordem
      
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','ordens')  
      RETURN FALSE
   END IF
   
   DELETE FROM ordens_complement
    WHERE cod_empresa = p_cod_empresa
      AND num_ordem   = p_num_ordem
      
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','ordens_complement')  
      RETURN FALSE
   END IF

   DELETE FROM ord_oper
    WHERE cod_empresa = p_cod_empresa
      AND num_ordem   = p_num_ordem
      
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','ord_oper')  
      RETURN FALSE
   END IF
   
   DELETE FROM necessidades 
    WHERE cod_empresa = p_cod_empresa
      AND num_ordem   = p_num_ordem
      
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','necessidades')  
      RETURN FALSE
   END IF

   DELETE FROM ord_compon 
    WHERE cod_empresa = p_cod_empresa
      AND num_ordem   = p_num_ordem
      
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','ord_compon')  
      RETURN FALSE
   END IF

   DELETE FROM man_oper_compl 
    WHERE empresa = p_cod_empresa
      AND ordem_producao = p_num_ordem
      
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','man_oper_compl')  
      RETURN FALSE
   END IF

   DELETE FROM man_op_componente_operacao 
    WHERE empresa = p_cod_empresa
      AND ordem_producao = p_num_ordem
      
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','man_op_componente_operacao')  
      RETURN FALSE
   END IF

   DELETE FROM ord_oper_txt 
    WHERE cod_empresa = p_cod_empresa
      AND num_ordem   = p_num_ordem
      
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','ord_oper_txt')  
      RETURN FALSE
   END IF
   
   RETURN TRUE
   
END FUNCTION
   
 
#-----------------------------#
FUNCTION pol1084_del_ped_dem()
#-----------------------------#

   LET p_ped_dem.num_projeto = pol1084_le_aen()
      
   IF p_ped_dem.num_projeto IS NULL THEN
      RETURN FALSE
   END IF

   DELETE FROM ped_dem
    WHERE cod_empresa = p_cod_empresa
      AND num_pedido  = p_ped_dem.num_projeto
      AND cod_item    = p_cod_item
      AND prz_entrega = p_prz_entrega

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','ped_dem')
      RETURN FALSE
   END IF

   DELETE FROM ped_dem_5000
    WHERE cod_empresa = p_cod_empresa
      AND num_pedido  = p_ped_dem.num_pedido
      AND num_seq     = p_ped_dem.num_seq
      
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Deletando','ped_dem_5000')
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION

#-----------------------------#
FUNCTION pol1084_ins_ped_dem()
#-----------------------------#

   INSERT INTO ped_dem_5000
    VALUES(p_ped_dem.*)
   
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Inserindo','ped_dem_5000')
      RETURN FALSE
   END IF

   SELECT cod_empresa
     FROM ped_dem
    WHERE cod_empresa = p_ped_dem.cod_empresa
      AND num_pedido  = p_ped_dem.num_projeto
      AND cod_item    = p_ped_dem.cod_item_pai
      AND prz_entrega = p_ped_dem.prz_entrega

   IF STATUS = 100 THEN
      INSERT INTO ped_dem
       VALUES(p_ped_dem.cod_empresa,
              p_ped_dem.num_projeto,
              p_ped_dem.cod_item_pai,
              p_ped_dem.prz_entrega,
              p_ped_dem.qtd_saldo)
   ELSE
      IF STATUS = 0 THEN
         UPDATE ped_dem
            SET qtd_saldo = p_ped_dem.qtd_saldo
          WHERE cod_empresa = p_ped_dem.cod_empresa
            AND num_pedido  = p_ped_dem.num_projeto
            AND cod_item    = p_ped_dem.cod_item_pai
            AND prz_entrega = p_ped_dem.prz_entrega
      ELSE
         CALL log003_err_sql('Lendo','ped_dem')
         RETURN FALSE
      END IF
   END IF
                  
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Atualizando','ped_dem')
      RETURN FALSE
   END IF

   RETURN TRUE

END FUNCTION

#-----------------------------#
 FUNCTION pol1084_le_item_man()
#-----------------------------#

   SELECT *
     INTO p_item_man.*
     FROM item_man
    WHERE cod_empresa = p_cod_empresa
      AND cod_item    = p_cod_item

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Lendo','item_man')
      RETURN FALSE
   END IF

   RETURN TRUE

END FUNCTION

#------------------------------#
FUNCTION pol1084_le_horizonte()
#------------------------------#

   SELECT qtd_dias_horizon
     INTO p_qtd_dias_horizon
     FROM horizonte
    WHERE cod_empresa = p_cod_empresa
      AND cod_horizon = p_item_man.cod_horizon

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Lendo','horizonte')
      RETURN FALSE
   END IF

   RETURN TRUE
   
END FUNCTION

#-------------------------#
FUNCTION pol1084_le_item()
#-------------------------#

   SELECT cod_local_estoq
     INTO p_cod_local_estoq
     FROM item
    WHERE cod_empresa = p_cod_empresa
      AND cod_item    = p_cod_item
   
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Lendo','item:local')
      RETURN FALSE
   END IF

   IF p_cod_local_estoq IS NULL THEN
      LET p_cod_local_estoq = ' ' 
   END IF
   
  RETURN TRUE
  
END FUNCTION
#------------------------#
FUNCTION pol1084_gera_op()
#------------------------#

   IF NOT pol1084_ins_ordem() THEN
      RETURN FALSE
   END IF

   IF NOT pol1084_ins_necessidades() THEN
      RETURN FALSE
   END IF

   IF NOT pol1084_ins_roteiro() THEN
      RETURN FALSE
   END IF
   
   
   RETURN TRUE

END FUNCTION

#---------------------------#
FUNCTION pol1084_ins_ordem()
#---------------------------#

   DEFINE p_op_compl RECORD LIKE ordens_complement.*
   
   IF NOT pol1084_prx_num_op() THEN
      RETURN FALSE
   END IF
   
   IF NOT pol1084_le_item_man() THEN
      RETURN FALSE
   END IF

   IF NOT pol1084_le_horizonte() THEN
      RETURN FALSE
   END IF

   IF NOT pol1084_le_item() THEN
      RETURN FALSE
   END IF
   
   LET p_num_lote = p_ped_dem.num_pedido 
   LET p_num_lote = p_num_lote CLIPPED, '/'
   LET p_txt_aux  = p_ped_dem.num_seq
   LET p_num_lote = p_num_lote CLIPPED, p_txt_aux
   LET p_dat_liberac = TODAY #p_ped_dem.prz_entrega - p_item_man.tmp_ressup
   LET p_dat_abertura = TODAY #p_dat_liberac - p_qtd_dias_horizon
      
   INITIALIZE p_ordens TO NULL

   LET p_ordens.cod_empresa        = p_cod_empresa
   LET p_ordens.num_ordem          = p_num_ordem
   LET p_ordens.num_neces          = 0
   LET p_ordens.num_versao         = 0
   LET p_ordens.cod_item           = p_cod_item
   LET p_ordens.cod_item_pai       = p_cod_item_pai
   LET p_ordens.dat_entrega        = p_ped_dem.prz_entrega
   LET p_ordens.dat_liberac        = p_dat_liberac
   LET p_ordens.dat_abert          = p_dat_abertura 
   LET p_ordens.qtd_planej         = p_ped_dem.qtd_saldo
   LET p_ordens.pct_refug          = 0
   LET p_ordens.qtd_boas           = 0
   LET p_ordens.qtd_refug          = 0
   LET p_ordens.qtd_sucata         = 0
   LET p_ordens.cod_local_prod     = p_ped_dem.num_projeto
   LET p_ordens.cod_local_estoq    = p_ped_dem.num_projeto
   LET p_ordens.num_docum          = p_ped_dem.num_projeto
   LET p_ordens.ies_lista_ordem    = p_item_man.ies_lista_ordem
   LET p_ordens.ies_lista_roteiro  = p_item_man.ies_lista_roteiro
   LET p_ordens.ies_origem         = '1'
   LET p_ordens.ies_situa          = '3'
   LET p_ordens.ies_abert_liber    = p_item_man.ies_abert_liber
   LET p_ordens.ies_baixa_comp     = p_item_man.ies_baixa_comp
   LET p_ordens.ies_apontamento    = p_item_man.ies_apontamento
   LET p_ordens.dat_atualiz        = TODAY
   LET p_ordens.num_lote           = p_num_lote
   LET p_ordens.cod_roteiro        = p_item_man.cod_roteiro
   LET p_ordens.num_altern_roteiro = p_item_man.num_altern_roteiro

   INSERT INTO ordens VALUES (p_ordens.*)

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Inserindo','Ordens')
      RETURN FALSE
   END IF

   INITIALIZE p_op_compl  TO NULL

   LET p_op_compl.cod_empresa    = p_ordens.cod_empresa
   LET p_op_compl.num_ordem      = p_ordens.num_ordem
   LET p_op_compl.cod_grade_1    = " "
   LET p_op_compl.cod_grade_2    = " "
   LET p_op_compl.cod_grade_3    = " "
   LET p_op_compl.cod_grade_4    = " "
   LET p_op_compl.cod_grade_5    = " "
   LET p_op_compl.num_lote       = p_ordens.num_lote
   LET p_op_compl.ies_tipo       = "N"
   LET p_op_compl.num_prioridade = 9999

   INSERT INTO ordens_complement VALUES (p_op_compl.*)

   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql('Inserindo','ordens_complement')
      RETURN  FALSE
   END IF

   RETURN TRUE
   
END FUNCTION

#----------------------------#
 FUNCTION pol1084_prx_num_op()
#----------------------------#

   SELECT prx_num_ordem
     INTO p_num_ordem
     FROM par_mrp
    WHERE cod_empresa = p_cod_empresa

   IF STATUS <> 0 AND STATUS <> 100 THEN
      CALL log003_err_sql('Lendo','par_mrp:num_op')
      RETURN FALSE
   END IF

   IF p_num_ordem IS NULL THEN
      LET p_num_ordem = 1
   END IF

   LET p_num_ordem = p_num_ordem + 1

   UPDATE par_mrp
      SET prx_num_ordem = p_num_ordem
    WHERE cod_empresa   = p_cod_empresa

   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql('Update','par_mrp:num_op')
      RETURN FALSE
   END IF
      
   RETURN TRUE

END FUNCTION

#-----------------------------#
FUNCTION pol1084_ins_roteiro()
#-----------------------------#

   DEFINE p_tem_roteiro   SMALLINT,
          p_seq_comp      DECIMAL(10,0)
          
   DEFINE lr_consumo_txt  RECORD LIKE consumo_txt.*

   DEFINE lr_man_estrut_oper  RECORD
   			  empresa             char(2),
			    item_componente     char(15),
			    ies_tip_item        char(01),
			    qtd_necess          decimal(14,7),
			    pct_refugo          decimal(6,3),
			    parametro_geral     char(20)
   END RECORD
   
   LET p_tem_roteiro = FALSE
   LET p_cod_cent_trab = NULL
   
   DECLARE cq_roteiro CURSOR FOR 
    SELECT a.num_seq_operac, 
           a.cod_operac, 
           a.cod_cent_trab, 
           a.cod_arranjo, 
           a.cod_cent_cust, 
           a.qtd_horas, 
           a.qtd_horas_setup, 
           b.num_processo, 
           b.ies_apontamento, 
           b.ies_impressao, 
           b.ies_oper_final, 
           b.pct_refug, 
           b.tmp_producao 
      FROM consumo a, consumo_compl b
     WHERE a.cod_empresa        = p_cod_empresa
       AND a.cod_item           = p_ordens.cod_item
       AND a.cod_roteiro        = p_ordens.cod_roteiro
       AND a.num_altern_roteiro = p_ordens.num_altern_roteiro
       AND b.cod_empresa        = a.cod_empresa 
       AND a.cod_item           = b.cod_item 
       AND b.num_processo       = a.parametro[1, 7] 
       AND ((b.dat_validade_ini IS NULL AND b.dat_validade_fim IS NULL)
         OR (b.dat_validade_ini IS NULL AND b.dat_validade_fim >= p_dat_liberac) 
         OR (b.dat_validade_fim IS NULL AND b.dat_validade_ini <= p_dat_liberac) 
         OR p_dat_liberac BETWEEN b.dat_validade_ini AND b.dat_validade_fim)

   FOREACH cq_roteiro INTO 
           p_ord_oper.num_seq_operac,
           p_ord_oper.cod_operac,
           p_ord_oper.cod_cent_trab,
           p_ord_oper.cod_arranjo,
           p_ord_oper.cod_cent_cust,
           p_ord_oper.qtd_horas,
           p_ord_oper.qtd_horas_setup,
           p_ord_oper.num_processo,
           p_ord_oper.ies_apontamento,
           p_ord_oper.ies_impressao,
           p_ord_oper.ies_oper_final,
           p_ord_oper.pct_refug,
           p_ord_oper.tmp_producao

      IF STATUS <> 0 THEN
         CALL log003_err_sql('Lendo','consumo')
         RETURN FALSE
      END IF
      
      LET p_tem_roteiro = TRUE
      
      IF p_cod_cent_trab IS NULL THEN
         LET p_cod_cent_trab = p_ord_oper.cod_cent_trab
      END IF
      
      LET p_ord_oper.cod_empresa   = p_cod_empresa
      LET p_ord_oper.num_ordem     = p_ordens.num_ordem
      LET p_ord_oper.cod_item      = p_ordens.cod_item
      LET p_ord_oper.dat_entrega   = p_ordens.dat_entrega
      LET p_ord_oper.dat_inicio    = p_ordens.dat_ini
      LET p_ord_oper.qtd_planejada = p_ordens.qtd_planej
      LET p_ord_oper.qtd_boas      = p_ordens.qtd_boas  
      LET p_ord_oper.qtd_refugo    = p_ordens.qtd_refug
      LET p_ord_oper.qtd_sucata    = p_ordens.qtd_sucata   
                                     
      INSERT INTO ord_oper
         VALUES(p_ord_oper.*)
                    
      IF STATUS <> 0 THEN
         CALL log003_err_sql('Inserindo','ord_oper')
         RETURN FALSE
      END IF
      
      SELECT empresa 
        FROM man_oper_compl
       WHERE empresa = p_cod_empresa
         AND ordem_producao = p_ord_oper.num_ordem
         AND operacao = p_ord_oper.cod_operac
         AND sequencia_operacao = p_ord_oper.num_seq_operac
      
      IF STATUS = 100 THEN        
         INSERT INTO man_oper_compl(
            empresa,
            ordem_producao,
            operacao,
            sequencia_operacao)
         VALUES (p_cod_empresa,
                 p_ord_oper.num_ordem,
                 p_ord_oper.cod_operac,
                 p_ord_oper.num_seq_operac)

         IF STATUS <> 0 THEN
            CALL log003_err_sql('Inserindo','man_oper_compl')
            RETURN FALSE
         END IF
      END IF

      DECLARE cq_cons_txt CURSOR FOR
       SELECT *
         FROM consumo_txt
        WHERE cod_empresa  = p_cod_empresa
          AND num_processo = p_ord_oper.num_processo

      FOREACH cq_cons_txt INTO lr_consumo_txt.*

         IF STATUS <> 0 THEN
            CALL log003_err_sql('Lendo','cq_cons_txt')
            RETURN FALSE
         END IF

         INSERT INTO ord_oper_txt 
            VALUES (p_cod_empresa,
                    p_ord_oper.num_ordem,
                    lr_consumo_txt.num_processo,
                    lr_consumo_txt.ies_tipo,
                    lr_consumo_txt.num_seq_linha,
                    lr_consumo_txt.tex_processo)
               
         IF STATUS <> 0 THEN
            CALL log003_err_sql('Inserindo','ord_oper_txt')
            RETURN FALSE
         END IF

      END FOREACH

      DECLARE cq_estr_oper CURSOR WITH HOLD FOR
       SELECT man_estrut_oper.empresa, 
              man_estrut_oper.item_componente, 
              item.ies_tip_item, 
              man_estrut_oper.qtd_necess, 
              man_estrut_oper.pct_refugo, 
              man_estrut_oper.parametro_geral 
         FROM man_estrut_oper, item 
        WHERE man_estrut_oper.empresa            = p_cod_empresa 
          AND man_estrut_oper.item               = p_ord_oper.cod_item
          AND man_estrut_oper.roteiro            = p_ordens.cod_roteiro       
          AND man_estrut_oper.num_altern_roteiro = p_ordens.num_altern_roteiro 
          AND man_estrut_oper.sequencia_operacao = p_ord_oper.num_seq_operac  
          AND man_estrut_oper.empresa            = item.cod_empresa 
          AND man_estrut_oper.item_componente    = item.cod_item 
          AND (man_estrut_oper.dat_valid_inicial IS NULL OR 
               man_estrut_oper.dat_valid_inicial <= p_ordens.dat_liberac) 
          AND (man_estrut_oper.dat_valid_final   IS NULL OR 
               man_estrut_oper.dat_valid_final   >= p_ordens.dat_liberac) 
        ORDER BY man_estrut_oper.parametro_geral[6, 10]

      FOREACH cq_estr_oper INTO lr_man_estrut_oper.*

         IF STATUS <> 0 THEN
            CALL log003_err_sql('Lendo','cq_estr_oper')
            RETURN FALSE
         END IF
             
         LET  p_seq_comp   =  0 
               
         SELECT MIN(num_seq) 
           INTO p_seq_comp
           FROM ord_compon  
          WHERE cod_empresa     = p_cod_empresa   
            AND num_ordem       = p_ordens.num_ordem 
            AND cod_item_compon = lr_man_estrut_oper.item_componente  
            AND ies_tip_item    = lr_man_estrut_oper.ies_tip_item
            AND qtd_necessaria  = lr_man_estrut_oper.qtd_necess 

         IF STATUS <> 0  THEN              
            CALL log003_err_sql("LEITURA", "ORD_COMPON:CQ_ESTR_OPER")
            RETURN FALSE
         END IF
         
         IF (p_seq_comp IS NULL) OR (p_seq_comp = 0) THEN 
             LET p_msg = 'Item: ',p_ord_oper.cod_item,'\n',
                         'Operação: ', p_ord_oper.cod_operac,'\n',
                         'Componente da operação: ',lr_man_estrut_oper.item_componente,'\n',
                         'Esse componente não é um componente do item\n',
                         'ou há divergência entre suas quantidades!'
             CALL log0030_mensagem(p_msg,'excla')
             RETURN FALSE                         
         END IF                           
                    
         INSERT INTO man_op_componente_operacao 
            VALUES (p_cod_empresa,
                    p_ordens.num_ordem,
                    p_ordens.cod_roteiro,
                    p_ordens.num_altern_roteiro,
                    p_ord_oper.num_seq_operac,
                    p_ord_oper.cod_item,
                    lr_man_estrut_oper.item_componente,
                    lr_man_estrut_oper.ies_tip_item,
                    p_ordens.dat_entrega,
                    lr_man_estrut_oper.qtd_necess,
                    p_ordens.cod_local_prod,
                    p_ord_oper.cod_cent_trab,
                    lr_man_estrut_oper.pct_refugo, 
                    p_seq_comp)
         
         IF sqlca.sqlcode = 0 OR log0030_err_sql_registro_duplicado() THEN
         ELSE
            CALL log003_err_sql("INCLUSAO", "MAN_OP_COMPONENTE_OPERACAO")
            RETURN FALSE
         END IF
               
      END FOREACH
      
   END FOREACH
   
   RETURN TRUE
   
END FUNCTION

#-------------------------------------#
FUNCTION pol1084_ins_necessidades()
#-------------------------------------#

   DEFINE p_cod_item_compon LIKE estrutura.cod_item_compon, 
          p_qtd_necessaria  LIKE estrutura.qtd_necessaria,  
          p_pct_refug       LIKE estrutura.pct_refug,
          p_tem_strut       SMALLINT

   INITIALIZE p_necessidades TO NULL     

   LET p_tem_strut = FALSE           
   
   DECLARE cq_neces CURSOR FOR
    SELECT cod_item_compon,
           qtd_necessaria,
           pct_refug
      FROM estrutura
     WHERE cod_empresa  = p_cod_empresa
       AND cod_item_pai = p_cod_item
       AND (dat_validade_ini IS NULL OR dat_validade_ini <= p_dat_liberac) 
       AND (dat_validade_fim IS NULL OR dat_validade_fim >= p_dat_liberac) 
     ORDER BY estrutura.parametros[6, 10]

   FOREACH cq_neces INTO 
           p_cod_item_compon, 
           p_qtd_necessaria,  
           p_pct_refug        
   
      IF STATUS <> 0 THEN
         CALL log003_err_sql('Lendo','estrutura')
         RETURN FALSE
      END IF
      
      LET p_tem_strut = TRUE
      
      IF NOT pol1084_prx_num_neces() THEN                                          
         RETURN FALSE                                                              
      END IF                                                                       
                                                                                   
      LET p_necessidades.cod_empresa      = p_ordens.cod_empresa                   
      LET p_necessidades.num_neces        = p_num_neces                        
      LET p_necessidades.num_versao       = p_ordens.num_versao                    
      LET p_necessidades.cod_item_pai     = p_ordens.cod_item                      
      LET p_necessidades.cod_item         = p_cod_item_compon                      
      LET p_necessidades.qtd_necessaria   = p_ordens.qtd_planej * p_qtd_necessaria 
      LET p_necessidades.num_ordem        = p_ordens.num_ordem                     
      LET p_necessidades.qtd_saida        = 0                                      
      LET p_necessidades.num_docum        = p_ordens.num_docum                     
      LET p_necessidades.dat_neces        = p_ordens.dat_entrega                   
      LET p_necessidades.ies_origem       = p_ordens.ies_origem                    
      LET p_necessidades.ies_situa        = p_ordens.ies_situa                     
      LET p_necessidades.num_neces_consol = 0                                      
                                                                                   
      INSERT INTO necessidades  VALUES (p_necessidades.*)                          
                                                                                   
      IF sqlca.sqlcode <> 0 THEN                                                   
         CALL log003_err_sql('Inserindo','Necessidades')                           
         RETURN FALSE                                                              
      END IF         

      SELECT ies_tip_item
        INTO p_ies_tip_item
        FROM item
       WHERE cod_empresa = p_cod_empresa
         AND cod_item    = p_cod_item_compon
         
      IF sqlca.sqlcode <> 0 THEN                                                   
         CALL log003_err_sql('Lendo','item:tipo')                           
         RETURN FALSE                                                              
      END IF         
        
      INSERT INTO ord_compon(
         cod_empresa,      
         num_ordem,        
         cod_item_pai,     
         cod_item_compon,  
         ies_tip_item,     
         dat_entrega,      
         qtd_necessaria,   
         cod_local_baixa,  
         cod_cent_trab,    
         pct_refug) VALUES(  
                     p_necessidades.cod_empresa,
                     p_necessidades.num_ordem,
                     p_necessidades.num_neces,
                     p_necessidades.cod_item,
                     p_ies_tip_item,
                     p_necessidades.dat_neces,
                     p_qtd_necessaria,
                     p_ordens.cod_local_prod,
                     p_cod_cent_trab,
                     p_pct_refug)
   
      IF sqlca.sqlcode <> 0 THEN                                                   
         CALL log003_err_sql('Inserindo','Necessidades')                           
         RETURN FALSE                                                              
      END IF         
      
   END FOREACH       

   IF NOT p_tem_strut THEN
      LET p_msg = 'Item ', p_cod_item CLIPPED, ' sem estrutura!'
      CALL log0030_mensagem(p_msg,'excla')
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION

#-------------------------------#
 FUNCTION pol1084_prx_num_neces()
#-------------------------------#

   SELECT prx_num_neces
     INTO p_num_neces
     FROM par_mrp
    WHERE cod_empresa = p_cod_empresa

   IF STATUS <> 0 AND STATUS <> 100 THEN
      CALL log003_err_sql('Lendo','par_mrp:num_neces')
      RETURN FALSE
   END IF

   IF p_num_neces IS NULL THEN
      LET p_num_neces = 1
   END IF
   
   LET p_num_neces = p_num_neces + 1
      
   UPDATE par_mrp
      SET prx_num_neces = p_num_neces
    WHERE cod_empresa   = p_cod_empresa

   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql('Update','par_mrp:num_neces')
      RETURN FALSE
   END IF
      
   RETURN TRUE

END FUNCTION
