#----------------------------------------------------------------------------------#
# SISTEMA.: Gerar nota fiscal											           #
#	PROGRAMA:	pol0989													           #
#	CLIENTE.:	Fame					                						   #
#	OBJETIVO:	gerar nota fiscal atraves de um arquvo texto contendo os intes     #
#	AUTOR...:	THIAGO															   #
#	DATA....:	11/05/2009														   #
#----------------------------------------------------------------------------------#

#Programa foi feito com funções independentes e variaveis locais pra facilitar 
#a compreenção para futuras mudanças e manutençoes.

DATABASE logix
GLOBALS
   DEFINE 
		   	p_cod_empresa   			LIKE empresa.cod_empresa,
		   	p_den_empresa					LIKE empresa.den_empresa,
		    p_user          			LIKE usuario.nom_usuario,
		    p_encontrou           CHAR(01),
		    p_num_seq             INTEGER,
				p_status        			SMALLINT,
				p_count               SMALLINT,
				p_versao        			CHAR(18),
				p_resposta						SMALLINT,
				comando         			CHAR(80),
				p_caminho					    CHAR(30),
				p_ies_impressao 			CHAR(001),
				g_ies_ambiente 		  	CHAR(001),
			    p_nom_arquivo				CHAR(100),
			    sql_stmt						CHAR(600),
			    where_clause				CHAR(300),
				p_nom_tela 						CHAR(200),
				p_retorno						  SMALLINT,
				p_ies_cons      			SMALLINT,
				p_cont							  SMALLINT,
				p_nom_help      			CHAR(200),
				p_natureza_operacao		INTEGER,
				p_entrada						  DECIMAL(06),
				p_tipo							  CHAR(03),
				p_houve_erro					SMALLINT,
				p_erro				     	  SMALLINT,
				p_data							  DATE,
				p_msg							    CHAR(600), 
				p_incide_ipi					CHAR(1),
				p_val_icm             decimal(17,2),  
				p_val_base_icm 	      decimal(17,2),
				p_print								SMALLINT				
END GLOBALS 																	

	DEFINE p_preco_s_trib	LIKE fat_nf_item.pre_unit,
				 p_preco_uni   	LIKE fat_nf_item.pre_unit,
				 p_preco_uni_nf	DECIMAL(10,2)

DEFINE 	p_arquivo  RECORD 
				cod_item				CHAR(20),
				sequencia				INTEGER,
				qtd_item 				DECIMAL(9,2),
				total_val_item 	DECIMAL(12,2),
				desc_val_item 	DECIMAL(12,2),
				acresc_val_item DECIMAL(12,2)
END RECORD

DEFINE p_param RECORD LIKE par_nf_912.*

DEFINE  p_wfat_item_fisc_ser RECORD LIKE wfat_item_fisc_ser.*,
				p_nf_item_fiscal_ser RECORD LIKE nf_item_fiscal_ser.*,
				p_wfat_item_ser			 RECORD LIKE wfat_item_ser.*,
				p_nf_item_ser				 RECORD LIKE nf_item_ser.*


  #Variáveis exclusivas para versão 10.02 (Ivo) ...
   DEFINE m_msg                CHAR(600),
          p_tip_item           CHAR(01),
          c_data               DATETIME YEAR TO SECOND,
          p_trans_nf           INTEGER,
          p_sem_tributo        SMALLINT,
          p_num_ctr_acesso     INTEGER,
          p_query              CHAR(600),
          p_ies_tributo        SMALLINT,
          p_cod_cliente        CHAR(15),
          p_tributo_benef      CHAR(20),
          p_grp_classif_fisc   CHAR(10),
          p_grp_fiscal_item    CHAR(10),
          p_grp_fisc_cliente   CHAR(10),
          p_trans_config       INTEGER,
          p_chave              CHAR(11),
          p_matriz             CHAR(22),
          p_regiao_fiscal      CHAR(10),
          p_pct_reduz_icm      DECIMAL(7,4),
          p_cod_uni_feder      CHAR(02),
          p_micro_empresa      CHAR(01),
          p_cod_status         CHAR(05),
          p_cod_cidade         LIKE clientes.cod_cidade,
          p_cod_lin_prod       LIKE item.cod_lin_prod,
          p_cod_lin_recei      LIKE item.cod_lin_recei,
          p_cod_seg_merc       LIKE item.cod_seg_merc,
          p_cod_cla_uso        LIKE item.cod_cla_uso,
          p_cod_cla_fisc       LIKE item.cod_cla_fisc,
          p_cod_familia        LIKE item.cod_familia, 
          p_gru_ctr_estoq      LIKE item.gru_ctr_estoq,           
          p_cod_unid_med       LIKE item.cod_unid_med,
          p_cod_nat_oper       LIKE wfat_mestre.cod_nat_oper,
          p_cod_cnd_pgto       LIKE wfat_mestre.cod_cnd_pgto,
          p_ies_tipo           LIKE estoque_operac.ies_tipo,
          p_cod_item           LIKE item.cod_item,
          p_seq_acesso         LIKE obf_ctr_acesso.sequencia_acesso,
          p_cod_fiscal         LIKE fat_nf_item_fisc.cod_fiscal,
          p_tot_peso           LIKE fat_nf_mestre.peso_bruto,
          p_val_base_trib      LIKE fat_nf_item_fisc.val_trib_merc,
          p_val_tribruto       LIKE fat_nf_item_fisc.val_trib_merc,
          p_cod_incide         LIKE obf_config_fiscal.incide, 
          p_incide_icm         LIKE obf_config_fiscal.incide, 
          p_aliquota           LIKE obf_config_fiscal.aliquota,
          p_val_ipi            LIKE fat_nf_item_fisc.val_trib_merc,
          p_val_icms           LIKE fat_nf_item_fisc.val_trib_merc,
          p_pct_red_bas_calc   LIKE fat_nf_item_fisc.pct_red_bas_calc,
          p_tip_docum          LIKE vdp_num_docum.tip_docum,
          p_tip_solic          LIKE vdp_num_docum.tip_solicitacao,
          p_ser                LIKE vdp_num_docum.serie_docum,
          p_ssr                LIKE vdp_num_docum.subserie_docum,
          p_esp                LIKE vdp_num_docum.especie_docum,
          p_val_bruto          LIKE fat_nf_mestre.val_nota_fiscal,
          p_val_liqui          LIKE fat_nf_mestre.val_nota_fiscal

   DEFINE p_val_icm_it         LIKE fit_itemes_fiscal.val_icm,
          p_pes_unit           LIKE item.pes_unit,
          p_fat_conver         LIKE item.fat_conver      

   DEFINE p_wfat_mestre        RECORD LIKE wfat_mestre.*,
          p_fiscal_par         RECORD LIKE fiscal_par.*,
          p_fat_mestre         RECORD LIKE fat_nf_mestre.*,
          p_fat_item           RECORD LIKE fat_nf_item.*,
          p_item_fisc          RECORD LIKE fat_nf_item_fisc.*,
          p_txt_hist           RECORD LIKE fat_nf_texto_hist.*,
          p_mest_fisc          RECORD LIKE fat_mestre_fiscal.*
 #... ----------------------------------------------------------------#
 


MAIN
	CALL log0180_conecta_usuario()
	WHENEVER ANY ERROR CONTINUE
	  SET ISOLATION TO DIRTY READ
	  SET LOCK MODE TO WAIT 300 
	DEFER INTERRUPT
	LET p_versao = "pol0989-10.01.00"
	INITIALIZE p_nom_help TO NULL  
	CALL log140_procura_caminho("pol0989.iem") RETURNING p_nom_help
	LET  p_nom_help = p_nom_help CLIPPED
	OPTIONS HELP FILE p_nom_help,
	  NEXT KEY control-f,
	  INSERT KEY control-i,
	  DELETE KEY control-e,
	  PREVIOUS KEY control-b
	CALL log001_acessa_usuario("ESPEC999","")
	  RETURNING p_status, p_cod_empresa, p_user
	IF p_status = 0  THEN
		IF pol0989_cria_tabelas() THEN 
	  	CALL pol0989_controle()
	  END IF 
	END IF
END MAIN 			

#---------------------------#
FUNCTION  pol0989_controle()#
#---------------------------#
DEFINE p_processa SMALLINT 
	CALL log006_exibe_teclas("01", p_versao)
	CALL log130_procura_caminho("pol0989") RETURNING comando
	OPEN WINDOW w_pol0989 AT 5,3 WITH FORM comando
	ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST)
	LET p_processa = FALSE 
	LET p_retorno = FALSE 
	LET p_resposta = FALSE 
	MENU "OPCAO"
		COMMAND "Informar"   "Informar parametros "
			HELP 0009
			MESSAGE ""
			IF log005_seguranca(p_user,"VDP","VDP2565","CO") THEN
				CALL pol0989_entrada_parametro() RETURNING p_retorno
				NEXT OPTION "Carregar"
			END IF
		COMMAND "Carregar"   "Carregar arquivo de dados"
			HELP 0009
			MESSAGE ""
			IF log005_seguranca(p_user,"VDP","VDP2565","CO") THEN
				 IF p_retorno THEN
				 		MESSAGE "Carregando arquivo..."
					 	IF  pol0989_carrega_arquivo() THEN
					 	 MESSAGE "Arquivo carregado com sucesso"
					 	 LET p_resposta = TRUE 
					 	 LET p_retorno = FALSE 
					 	 NEXT OPTION "Processar"
					 	ELSE
					 		ERROR "Erro ao carregar dados"
					 		LET p_retorno = FALSE 
					 		NEXT OPTION "Informar" 
					 	END IF 
				 ELSE
				 	ERROR "Favor informar parametros"
				 	LET p_retorno = FALSE 
				 	NEXT OPTION "Informar"
				 END IF
			END IF
		COMMAND "Processar"  "Processar dados"
			HELP 1053
			IF log005_seguranca(p_user,"VDP","VDP2565","CO") THEN
				IF p_resposta THEN
						MESSAGE "Processando..."
						CALL log085_transacao('BEGIN') 
					 	IF pol0989_processar() THEN
					 	 IF NOT pol0989_deleta_arquivo() THEN 
					 	 	#	CALL log0030_mensagem("Erro ao exlcuir o arquivo de importação" ,'excla')
					 	 END IF 
					 	 MESSAGE "Arquivo processado com sucesso! "
					 	 
					 	 CALL log085_transacao('COMMIT') 
					 	 LET p_resposta = FALSE
					 	 NEXT OPTION "Fim"
					 	ELSE
					 		ERROR "Erro ao Processar Dados"
					 		CALL log085_transacao('COMMIT') 
					 		LET p_resposta = FALSE 
					 		NEXT OPTION "Informar" 
					 	END IF 
				 ELSE
				 	ERROR "Arquivos não foram carregados!"
				 	NEXT OPTION "Informar"
				 END IF
			END IF
		COMMAND "Rel_cupom"  "Processar dados"
			CALL log120_procura_caminho("POL1011") RETURNING comando
		  LET comando = comando CLIPPED
		  RUN comando RETURNING p_status
		  CURRENT WINDOW IS w_pol0989
		COMMAND "Nfe"  "Processar dados"
			CALL log120_procura_caminho("VDP9202") RETURNING comando
		  LET comando = comando CLIPPED
		  RUN comando RETURNING p_status
		  CURRENT WINDOW IS w_pol0989
		COMMAND "Listar"  "Lista itens processados e mostra pendencias"
			IF log005_seguranca(p_user,"VDP","VDP2565","CO") THEN
				IF NOT pol0989_gera_relatorio() THEN 
					ERROR"Não a itens a serem exibidos." 
				END IF 				
			END IF 
    COMMAND KEY ("O") "sObre" "Exibe a versão do programa"
         CALL pol0989_sobre() 		
		COMMAND KEY ("!")
			PROMPT "Digite o comando : " FOR comando
			RUN comando
			PROMPT "\nTecle ENTER para continuar" FOR CHAR comando
		COMMAND "Fim" "Retorna ao Menu Anterior"
			HELP 008
			EXIT MENU
	END MENU
	CLOSE WINDOW w_pol0989
END FUNCTION 

#-----------------------#
FUNCTION pol0989_sobre()
#-----------------------#

   LET p_msg = p_versao CLIPPED,"\n","\n",
               " LOGIX 10.02 ","\n","\n",
               " Home page: www.aceex.com.br ","\n","\n",
               " (0xx11) 4991-6667 ","\n","\n"

   CALL log0030_mensagem(p_msg,'excla')
                  
END FUNCTION

#-------------------------------#
FUNCTION  pol0989_cria_tabelas()#
#-------------------------------#

   DROP TABLE tributo_tmp

   CREATE TABLE tributo_tmp (
      tributo_benef CHAR(11),
      trans_config  INTEGER
   );

		IF SQLCA.SQLCODE <> 0 THEN
			CALL log003_err_sql("Criando","tributo_tmp")
			RETURN FALSE
		END IF

   DROP TABLE chave_tmp
   CREATE TABLE chave_tmp (
      chave CHAR(11)
   );

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Criando','chave_tmp')
      RETURN FALSE
   END IF  

		DROP TABLE t_entrada
		
		CREATE  TABLE t_entrada
		(
			arquivo			CHAR(80)
		)
		IF SQLCA.SQLCODE <> 0 THEN
			CALL log003_err_sql("create","t_entrada")
			RETURN FALSE
		END IF
		
		DROP TABLE t_ctrl_trans
		
		CREATE  TABLE t_ctrl_trans
		(
			cod_empresa char(02) NOT NULL,
			num_nff decimal(6,0) NOT NULL,
			ser_nff char(02) NOT NULL,
			cod_item char(15 ) NOT NULL,
			num_sequencia DECIMAL(5,0) NOT NULL ,
			num_transac integer NOT NULL
		);
		IF SQLCA.SQLCODE <> 0 THEN
			CALL log003_err_sql("t_ctrl_trans","t_entrada")
			RETURN FALSE
		END IF
		
		DROP TABLE t_arquivo
		
		CREATE   TABLE t_arquivo (
			cod_item				CHAR(20),
			sequencia				INTEGER,
			qtd_item 				DECIMAL(9,2),
			total_val_item 	DECIMAL(12,2),
			desc_val_item 	DECIMAL(12,2),
			acresc_val_item DECIMAL(12,2)
			)

	IF SQLCA.SQLCODE <> 0 THEN
		CALL log003_err_sql("create","t_arquivo")
		RETURN FALSE
	ELSE
		RETURN TRUE 
	END IF 

END FUNCTION

#--------------------------------#
FUNCTION  pol0989_limpa_tabelas()#
#--------------------------------#
	
	DELETE FROM t_entrada
	
	IF SQLCA.SQLCODE <> 0 THEN
		CALL log003_err_sql("create","t_entrada")
	END IF
	
		DELETE FROM t_arquivo
	
	IF SQLCA.SQLCODE <> 0 THEN
		CALL log003_err_sql("delete","t_entrada")
	END IF 
END FUNCTION

#------------------------------------#
FUNCTION  pol0989_entrada_parametro()#
#------------------------------------#
	
	INITIALIZE p_data TO NULL 
	INITIALIZE p_param TO NULL
	INITIALIZE p_val_icm TO NULL 
	INITIALIZE p_val_base_icm TO NULL  
	CLEAR FORM
	DISPLAY p_cod_empresa TO cod_empresa
	
	CALL  pol0989_limpa_tabelas() 
	
	INPUT p_param.cod_param,p_data,p_val_base_icm,p_val_icm 
	WITHOUT DEFAULTS FROM data, cod_parametro,val_base_icm ,val_icm
		
		
		AFTER FIELD cod_parametro	
			IF p_param.cod_param IS NULL THEN 
				ERROR"Campo de preenchimento obrigatório!!!"
				NEXT FIELD cod_parametro
			ELSE 
				IF NOT pol0989_verIFica_parametro() THEN 
					ERROR "Codigo invalido!!!"
					NEXT FIELD cod_parametro
				ELSE
					NEXT FIELD val_base_icm
				END IF 
			END IF 
		
		
		AFTER FIELD data	
			IF p_data IS NULL THEN 
				ERROR"Campo de preenchimento obrigatório!!!"
				NEXT FIELD data
			ELSE
				IF NOT pol0989_valida_data() THEN 
					ERROR"A data atual e menor que a ultima já processada!!!"
					NEXT FIELD data
				ELSE
					NEXT FIELD cod_parametro
				END IF
			END IF 
		

			
			AFTER FIELD val_base_icm	
			IF p_val_base_icm IS NULL THEN 
				ERROR"Campo de preenchimento obrigatório!!!"
				NEXT FIELD val_base_icm
			ELSE
				NEXT FIELD val_icm
			END IF 
			
			AFTER FIELD val_icm	
			IF p_val_icm IS NULL THEN 
				ERROR"Campo de preenchimento obrigatório!!!"
				NEXT FIELD val_icm
			END IF 
			
		ON KEY (control-z)
		CALL pol0989_popup()
	
	END INPUT 
	
	IF INT_FLAG = 0 THEN
		RETURN TRUE
	ELSE
		LET INT_FLAG = 0
		RETURN FALSE
	END IF
END FUNCTION
#----------------------------#
FUNCTION pol0989_exibe_tela()#
#----------------------------#
DEFINE 	l_val_icm, l_val_nff		LIKE wfat_mestre_ser.val_tot_icm,
				l_num_nff								LIKE wfat_mestre_ser.num_nff
	
{	SELECT val_tot_icm, val_tot_base_icm, num_nff
	INTO l_val_icm, l_val_nff,l_num_nff
	FROM wfat_mestre_ser
	WHERE cod_empresa=p_cod_empresa
	AND num_nff= p_num_nff
	AND ser_nff= p_param.ser_nff
}
	SELECT val_trib_merc, bc_tributo_tot
	INTO  l_val_icm, l_val_nff
	FROM fat_mestre_fiscal
	WHERE cod_empresa       = p_cod_empresa
	  AND trans_nota_fiscal = p_trans_nf
	  AND tributo_benef     = 'ICMS'
	
	DISPLAY l_val_icm TO val_tot_icm
	DISPLAY l_val_nff TO val_tot_base
	DISPLAY p_num_nff TO num_nff

END FUNCTION
#------------------------------#
FUNCTION  pol0989_valida_data()#
#------------------------------#
DEFINE l_data		DATE
    		
		SELECT MAX(DATE(dat_hor_emissao))
		INTO l_data 
		FROM fat_nf_mestre
		WHERE empresa = p_cod_empresa
		  AND  serie_nota_fiscal  in (select  ser_nff
        FROM  par_nf_912
        WHERE cod_empresa = p_cod_empresa
        AND cod_param     = p_param.cod_param)

		
		IF p_data < l_data THEN
			RETURN FALSE
		ELSE 
			RETURN TRUE
		END IF

END FUNCTION
#-----------------------#
FUNCTION pol0989_popup()#
#-----------------------#
DEFINE p_codigo  CHAR(15)
      
	CASE
		WHEN INFIELD(cod_parametro)
			CALL log009_popup(8,10,"CODIGO DO PARAMETRO","par_nf_912",
						"cod_param","den_param","pol0988","S","") RETURNING p_codigo
			CALL log006_exibe_teclas("01 02 07", p_versao)
			CURRENT WINDOW IS w_pol0989
			IF p_codigo IS NOT NULL THEN
				LET p_param.cod_param = p_codigo CLIPPED
				DISPLAY p_codigo TO cod_parametro
			END IF
	END CASE 
END FUNCTION 

#-------------------------------------#
 FUNCTION pol0989_verIFica_parametro()#
#-------------------------------------#
	SELECT *
	INTO p_param.*
	FROM par_nf_912
	WHERE cod_empresa = p_cod_empresa
	AND cod_param = p_param.cod_param
   
   IF SQLCA.SQLCODE = 0 THEN
   		DISPLAY p_param.den_param	TO den_param
      RETURN TRUE
   ELSE 
      RETURN FALSE
   END IF 
      
END FUNCTION 
#---------------------------------#
FUNCTION pol0989_carrega_arquivo()#							
#---------------------------------#
DEFINE p_data_char		CHAR(10),
			 l_caminho			CHAR(100)
	
	SELECT den_empresa
	INTO p_den_empresa
	FROM empresa
	WHERE cod_empresa = p_cod_empresa
	
	LET p_print = FALSE
	
	CALL  pol0989_limpa_tabelas()  
		
	LET p_data_char = p_data
	CALL log150_procura_caminho("UNL") RETURNING p_caminho
	LET l_caminho = p_caminho CLIPPED,"PZ",p_data_char[1,2], 
	                                       p_data_char[4,5], p_data_char[9,10],".002"
		LOAD FROM l_caminho INSERT INTO t_entrada
	
	IF STATUS = -805 THEN
		LET p_msg = log0030_txt_err_sql("LOAD","t_entrada")," Arquivo: ", l_caminho
		LET p_msg = p_msg CLIPPED, " Não encontrado!"			#fazendo o load do aquivo 
		CALL log0030_mensagem(p_msg,"excla")							#carregando a tabela temporaria 
		RETURN FALSE															
	ELSE
		IF SQLCA.SQLCODE <> 0 THEN 
			CALL log003_err_sql("LOAD","t_entrada")
			RETURN FALSE
		END IF
	END IF
	RETURN TRUE 
END FUNCTION

#---------------------------#
FUNCTION pol0989_processar()#
#---------------------------#
	#IF NOT pol0989_valida_processamento() THEN
	#	RETURN FALSE
	#END IF 

  LET p_num_seq = 0
  
  LOCK TABLE vdp_num_docum IN EXCLUSIVE MODE

   IF STATUS <> 0 THEN
      CALL log0030_txt_err_sql('Bloqueando','excla')
      RETURN FALSE
   END IF

  SELECT  tip_docum,
          num_ultimo_docum,
          serie_docum,
          subserie_docum,
          especie_docum
     INTO p_tip_docum,
          p_num_nff,
          p_ser,
          p_ssr,
          p_esp
     FROM   vdp_num_docum
    WHERE empresa = p_cod_empresa
     AND  serie_docum  in (select  ser_nff
        FROM  par_nf_912
        WHERE cod_empresa = p_cod_empresa
        AND cod_param = p_param.cod_param)


	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("LENDO",'VDP_NUM_DOCUM')
		RETURN FALSE
	END IF  

	IF p_num_nff IS NULL THEN  
		LET p_num_nff = 0
	END IF 
	
  LET p_tot_peso = 0
    
  IF NOT pol0989_ins_mestre() THEN #versão 10.02
     RETURN FALSE
  END IF
	
	IF NOT pol0989_insere_item() THEN
		FINISH REPORT pol0989_imprime 
		CALL log0030_mensagem("Erro ao tentar Gerar Nota fiscal!!",'info')
		MESSAGE "Erro Gravado no Arquivo ",p_nom_arquivo," " ATTRIBUTE(REVERSE)
		RETURN FALSE
	END IF 
	
{	IF NOT pol0989_insere_mestre() THEN 
		RETURN FALSE
	END IF 
}

  IF NOT pol0989_mestre_fisc() THEN #versão 10.02
     RETURN FALSE
  END IF

  IF NOT pol0989_atu_fat_mestre() THEN #versão 10.02
     RETURN FALSE
  END IF
	
	IF NOT pol0989_insere_duplicata() THEN 
		RETURN FALSE
	END IF 
		
	IF NOT pol0989_valida_bases() THEN 
		RETURN FALSE	
	END IF 
	
	IF NOT pol0989_movimenta_estoque() THEN 
		RETURN FALSE 
	ELSE 
		CALL pol0989_exibe_tela()
	END IF 
	
  UPDATE vdp_num_docum SET num_ultimo_docum = p_num_nff
    WHERE empresa = p_cod_empresa

	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("Atualizando",'vdp_num_docum')
		RETURN FALSE
	END IF  
	
#	IF NOT pol0989_insere_docum() THEN 
#		RETURN FALSE
#	END IF 
	
	RETURN TRUE 

END FUNCTION 

#-------------------------------#
FUNCTION pol0989_insere_mestre()#
#-------------------------------#
DEFINE p_ncontr, p_contr,p_cons		LIKE fiscal_par.pct_icm_ncontrib

DEFINE  p_wfat_mestre_ser 	 RECORD LIKE wfat_mestre_ser.*,
				p_nf_mestre_ser		 	 RECORD LIKE nf_mestre_ser.*,
				p_nf_carga_ser			 RECORD LIKE nf_carga_ser.*,
				p_fat_nf_compl			 RECORD LIKE fat_nf_compl.*

	###################################
	#INSERIR NA TABELA WFAT_MESTRE_SER#
	###################################
	LET p_wfat_mestre_ser.cod_empresa 				= p_cod_empresa # NOT NULL 
	LET p_wfat_mestre_ser.nom_usuario 				= p_user # NOT NULL 
	LET p_wfat_mestre_ser.ser_nff 						=  p_param.ser_nff # NOT NULL 
	LET p_wfat_mestre_ser.num_nff 						= p_num_nff # NOT NULL 
	LET p_wfat_mestre_ser.cod_texto1 					= p_param.cod_texto
	LET p_wfat_mestre_ser.ies_impr_nff 				=	'N'  # NOT NULL 
	LET p_wfat_mestre_ser.dat_emissao 				= p_data # NOT NULL 
	LET p_wfat_mestre_ser.ies_origem 					= 'I' # NOT NULL 
	LET p_wfat_mestre_ser.cod_cliente 				=  p_param.cod_cliente # NOT NULL 
	LET p_wfat_mestre_ser.cod_transpor 				=  p_param.cod_transportador
	LET p_wfat_mestre_ser.cod_consig 					= NULL
	
	SELECT IES_ZONA_FRANCA
	INTO p_wfat_mestre_ser.ies_zona_franca 
	FROM CLIENTES
	WHERE COD_CLIENTE = p_param.cod_cliente
	IF SQLCA.SQLCODE <> 0 THEN
		CALL log0030_mensagem('Problema ao pesquisar o Cliente favor verificar se ainda existe','info')
		RETURN FALSE
	END IF 
	
	LET p_wfat_mestre_ser.pct_frete 					= 0 # NOT NULL 
	LET p_wfat_mestre_ser.ies_frete 					= 1 # NOT NULL 
	LET p_wfat_mestre_ser.cod_cnd_pgto 				=	 p_param.cod_cnd_pgto 
	
	SELECT a.cod_fiscal, IES_INCID_IPI, A.IES_INCID_ICM, PCT_ICM_CONTRIB,PCT_ICM_NCONTRIB,PCT_ICM_CONSUMO
	INTO p_wfat_mestre_ser.cod_fiscal,p_incide_ipi,
		 	 p_wfat_mestre_ser.ies_incid_icm,
		 	 p_contr,p_ncontr,p_cons	
	FROM FISCAL_PAR A, CLIENTES B, CIDADES C
	WHERE A.COD_EMPRESA = p_cod_empresa
	AND A.COD_NAT_OPER = P_PARAM.COD_NAT_OPER
	AND B.COD_CLIENTE =  P_PARAM.COD_CLIENTE
	AND B.COD_CIDADE = C.COD_CIDADE
	AND C.COD_UNI_FEDER = A.COD_UNI_FEDER
	
	CASE
		WHEN  p_wfat_mestre_ser.ies_incid_icm = '1'
			LET p_wfat_mestre_ser.pct_icm = p_contr
		WHEN  p_wfat_mestre_ser.ies_incid_icm  = '2'
			LET p_wfat_mestre_ser.pct_icm  = p_ncontr
		WHEN  p_wfat_mestre_ser.ies_incid_icm  = '3'
			LET p_wfat_mestre_ser.pct_icm  = p_cons
	END CASE
		
	IF p_incide_ipi = '2' then 
		LET p_wfat_mestre_ser.ies_incid_ipi 			=  'N' # NOT NULL
	ELSE
		LET p_wfat_mestre_ser.ies_incid_ipi 			=  'S' # NOT NULL	    	
	END IF 
	
	LET p_wfat_mestre_ser.pct_desc_base_icm 	= 0 # NOT NULL 
	LET p_wfat_mestre_ser.pct_comis 					= 0 # NOT NULL 
	LET p_wfat_mestre_ser.ies_finalidade 			= p_param.ies_finalidade # NOT NULL 
	LET p_wfat_mestre_ser.pct_desp_dist 			= 0 # NOT NULL 
	LET p_wfat_mestre_ser.pct_desp_finan 			= 0 # NOT NULL 
	
	SELECT SUM(PES_UNIT * QTD_ITEM) , 
	       sum(val_desc_adicional), 
	       sum(val_ipi), 
	       sum(val_liq_item),
	       sum(val_icm_ret)
	INTO p_wfat_mestre_ser.pes_tot_liquido,
				p_wfat_mestre_ser.val_desc_merc,
				p_wfat_mestre_ser.val_tot_ipi ,
				p_wfat_mestre_ser.val_tot_mercadoria,
				p_wfat_mestre_ser.val_tot_icm
	FROM WFAT_ITEM_SER
	WHERE COD_EMPRESA = p_cod_empresa
	AND NUM_NFF = p_num_nff
	
	LET p_wfat_mestre_ser.pes_tot_bruto 			=  p_wfat_mestre_ser.pes_tot_liquido # NOT NULL 
	LET p_wfat_mestre_ser.cod_embal_1 				= NULL
	LET p_wfat_mestre_ser.qtd_volumes1 				= 0 # NOT NULL 
	LET p_wfat_mestre_ser.cod_embal_2 				= NULL
	LET p_wfat_mestre_ser.qtd_volumes2 				= 0 # NOT NULL 
	LET p_wfat_mestre_ser.cod_embal_3 				= NULL
	LET p_wfat_mestre_ser.qtd_volumes3 				= 0 # NOT NULL 
	LET p_wfat_mestre_ser.cod_embal_4 				= NULL
	LET p_wfat_mestre_ser.qtd_volumes4 				= 0 # NOT NULL 
	LET p_wfat_mestre_ser.cod_embal_5 				= NULL
	LET p_wfat_mestre_ser.qtd_volumes5 				= 0 # NOT NULL 
	LET p_wfat_mestre_ser.cod_nat_oper 				= p_param.cod_nat_oper # NOT NULL 
	#LET p_wfat_mestre_ser.cod_fiscal 					= '0' # NOT NULL  #####
	LET p_wfat_mestre_ser.cod_origem 					= NULL
	LET p_wfat_mestre_ser.cod_tributacao 			= '0'
	LET p_wfat_mestre_ser.pct_desc_base_ipi		= 0 # NOT NULL 
	LET p_wfat_mestre_ser.pct_cred_icm 				= 0 # NOT NULL 
	LET p_wfat_mestre_ser.tax_red_pct_icm 		= 0 # NOT NULL 
	LET p_wfat_mestre_ser.pct_desc_ipi 				= 0 # NOT NULL 
	LET p_wfat_mestre_ser.cod_repres 					= NULL
	LET p_wfat_mestre_ser.cod_repres_adic 		= NULL
	LET p_wfat_mestre_ser.val_desc_cred_icm 	= 0 # NOT NULL 
	LET p_wfat_mestre_ser.val_frete_rod 			= 0 # NOT NULL 
	LET p_wfat_mestre_ser.val_seguro_rod 			= 0 # NOT NULL 
	LET p_wfat_mestre_ser.val_tot_base_ipi 		=  p_wfat_mestre_ser.val_tot_mercadoria  # NOT NULL 
	LET p_wfat_mestre_ser.val_tot_base_icm 		=  p_wfat_mestre_ser.val_tot_base_ipi + p_wfat_mestre_ser.val_tot_ipi  # NOT NULL 
	LET p_wfat_mestre_ser.val_tot_nff 				=  p_wfat_mestre_ser.val_tot_base_ipi + p_wfat_mestre_ser.val_tot_ipi # NOT NULL 
	LET p_wfat_mestre_ser.cod_sit_trib 				= 0 # NOT NULL 
	LET p_wfat_mestre_ser.cod_trib_estadual 	= 0 # NOT NULL 
	LET p_wfat_mestre_ser.cod_trib_federal 		= 0 # NOT NULL 
	LET p_wfat_mestre_ser.val_acr_fin_excl 		= 0
	LET p_wfat_mestre_ser.val_acr_fin 				= 0
	LET p_wfat_mestre_ser.cod_via_transporte 	= 1
	LET p_wfat_mestre_ser.val_tot_base_ret 		=  0 # NOT NULL 
	LET p_wfat_mestre_ser.val_tot_icm_ret 		=  0 # NOT NULL 
	LET p_wfat_mestre_ser.ies_proc_nff 				=  'S'# NOT NULL 
	LET p_wfat_mestre_ser.ies_mod_embarque 		= NULL	
	LET p_wfat_mestre_ser.cod_moeda 					= p_param.cod_moeda
	LET p_wfat_mestre_ser.pct_bonificacao 		= 0 
	LET p_wfat_mestre_ser.cod_local_embarque 	= NULL 
	LET p_wfat_mestre_ser.cod_entrega 				= NULL 
	LET p_wfat_mestre_ser.val_tot_bonif 			= 0 # NOT NULL 
	LET p_wfat_mestre_ser.val_frete_cli 			= 0 # NOT NULL 
	LET p_wfat_mestre_ser.val_seguro_cli 			= 0 # NOT NULL 
	LET p_wfat_mestre_ser.val_frete_ex 				= 0 # NOT NULL 
	LET p_wfat_mestre_ser.val_seguro_ex 			= 0 # NOT NULL 
	LET p_wfat_mestre_ser.cod_tip_carteira 		= p_param.cod_tip_carteira # NOT NULL 
	LET p_wfat_mestre_ser.ies_plano_vendas 		=  'N'# NOT NULL 
	
	INSERT INTO WFAT_MESTRE_SER VALUES (p_wfat_mestre_ser.*)
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("INSERT",'WFAT_MESTRE_SER')
		RETURN FALSE
	END IF  

	#################################
	#INSERIR NA TABELA NF_MESTRE_SER#
	#################################
	LET p_nf_mestre_ser.cod_empresa 				= p_wfat_mestre_ser.cod_empresa  # NOT NULL
	LET p_nf_mestre_ser.num_nff 						= p_wfat_mestre_ser.num_nff # NOT NULL
	LET p_nf_mestre_ser.dat_emissao 				=	p_wfat_mestre_ser.dat_emissao  # NOT NULL
	LET p_nf_mestre_ser.ies_situacao 				= 'N' # NOT NULL
	LET p_nf_mestre_ser.ser_nff 						=	p_wfat_mestre_ser.ser_nff  # NOT NULL
	LET p_nf_mestre_ser.ies_origem 					= p_wfat_mestre_ser.ies_origem  # NOT NULL
	LET p_nf_mestre_ser.cod_cliente 				= p_wfat_mestre_ser.cod_cliente # NOT NULL
	LET p_nf_mestre_ser.ies_zona_franca 		= p_wfat_mestre_ser.ies_zona_franca # NOT NULL
	LET p_nf_mestre_ser.cod_transpor 				= p_wfat_mestre_ser.cod_transpor
	LET p_nf_mestre_ser.cod_consig 					= p_wfat_mestre_ser.cod_consig
	LET p_nf_mestre_ser.pct_frete 					= p_wfat_mestre_ser.pct_frete  # NOT NULL
	LET p_nf_mestre_ser.ies_frete 					= p_wfat_mestre_ser.ies_frete # NOT NULL
	LET p_nf_mestre_ser.cod_cnd_pgto 				= p_wfat_mestre_ser.cod_cnd_pgto
	LET p_nf_mestre_ser.ies_incid_ipi 			= p_wfat_mestre_ser.ies_incid_ipi # NOT NULL
	LET p_nf_mestre_ser.ies_incid_icm 			= p_wfat_mestre_ser.ies_incid_icm # NOT NULL
	LET p_nf_mestre_ser.pct_icm 						= p_wfat_mestre_ser.pct_icm # NOT NULL
	LET p_nf_mestre_ser.pct_desc_base_icm 	= p_wfat_mestre_ser.pct_desc_base_icm   # NOT NULL
	LET p_nf_mestre_ser.pct_comis 					= p_wfat_mestre_ser.pct_comis # NOT NULL
	LET p_nf_mestre_ser.ies_finalidade 			= p_wfat_mestre_ser.ies_finalidade # NOT NULL
	LET p_nf_mestre_ser.pct_desp_dist 			= p_wfat_mestre_ser.pct_desp_dist  # NOT NULL
	LET p_nf_mestre_ser.pct_desp_finan 			= p_wfat_mestre_ser.pct_desp_finan # NOT NULL
	LET p_nf_mestre_ser.pes_tot_liquido 		= p_wfat_mestre_ser.pes_tot_liquido # NOT NULL
	LET p_nf_mestre_ser.pes_tot_bruto 			= p_wfat_mestre_ser.pes_tot_bruto # NOT NULL
	LET p_nf_mestre_ser.cod_nat_oper 				= p_wfat_mestre_ser.cod_nat_oper # NOT NULL
	LET p_nf_mestre_ser.cod_fiscal 					= p_wfat_mestre_ser.cod_fiscal # NOT NULL
	LET p_nf_mestre_ser.cod_origem 					= p_wfat_mestre_ser.cod_origem
	LET p_nf_mestre_ser.cod_tributacao 			= p_wfat_mestre_ser.cod_tributacao
	LET p_nf_mestre_ser.pct_desc_base_ipi 	= p_wfat_mestre_ser.pct_desc_base_ipi # NOT NULL
	LET p_nf_mestre_ser.pct_cred_icm 				= p_wfat_mestre_ser.pct_cred_icm # NOT NULL
	LET p_nf_mestre_ser.tax_red_pct_icm 		= p_wfat_mestre_ser.tax_red_pct_icm  # NOT NULL
	LET p_nf_mestre_ser.pct_desc_ipi 				= p_wfat_mestre_ser.pct_desc_ipi  # NOT NULL
	LET p_nf_mestre_ser.val_desc_merc 			= p_wfat_mestre_ser.val_desc_merc # NOT NULL
	LET p_nf_mestre_ser.cod_repres 					= p_wfat_mestre_ser.cod_repres
	LET p_nf_mestre_ser.cod_repres_adic 		= p_wfat_mestre_ser.cod_repres_adic
	LET p_nf_mestre_ser.num_lote_lc 				= 0
	LET p_nf_mestre_ser.cod_sit_trib 				= p_wfat_mestre_ser.cod_sit_trib # NOT NULL
	LET p_nf_mestre_ser.cod_trib_estadual 	= p_wfat_mestre_ser.cod_trib_estadual # NOT NULL
	LET p_nf_mestre_ser.cod_trib_federal 		= p_wfat_mestre_ser.cod_trib_federal # NOT NULL
	LET p_nf_mestre_ser.val_desc_cred_icm 	= p_wfat_mestre_ser.val_desc_cred_icm  # NOT NULL
	LET p_nf_mestre_ser.val_frete_rod 			= p_wfat_mestre_ser.val_frete_rod # NOT NULL
	LET p_nf_mestre_ser.val_seguro_rod 			= p_wfat_mestre_ser.val_seguro_rod # NOT NULL
	LET p_nf_mestre_ser.val_tot_base_ipi 		= p_wfat_mestre_ser.val_tot_base_ipi # NOT NULL
	LET p_nf_mestre_ser.val_tot_ipi 				= p_wfat_mestre_ser.val_tot_ipi # NOT NULL
	LET p_nf_mestre_ser.val_tot_base_icm 		= p_wfat_mestre_ser.val_tot_base_icm # NOT NULL
	LET p_nf_mestre_ser.val_tot_icm 				= p_wfat_mestre_ser.val_tot_icm # NOT NULL
	LET p_nf_mestre_ser.val_tot_mercadoria 	= p_wfat_mestre_ser.val_tot_mercadoria # NOT NULL
	LET p_nf_mestre_ser.val_tot_nff 				= p_wfat_mestre_ser.val_tot_nff # NOT NULL
	LET p_nf_mestre_ser.val_tot_base_ret 		= p_wfat_mestre_ser.val_tot_base_ret
	LET p_nf_mestre_ser.val_tot_icm_ret 		= p_wfat_mestre_ser.val_tot_icm_ret
	LET p_nf_mestre_ser.ies_mod_embarque 		= p_wfat_mestre_ser.ies_mod_embarque
	LET p_nf_mestre_ser.cod_moeda 					= p_wfat_mestre_ser.cod_moeda
	LET p_nf_mestre_ser.pct_bonificacao 		= p_wfat_mestre_ser.pct_bonIFicacao
	LET p_nf_mestre_ser.cod_local_embarque 	= p_wfat_mestre_ser.cod_local_embarque
	LET p_nf_mestre_ser.cod_entrega 				= p_wfat_mestre_ser.cod_entrega
	LET p_nf_mestre_ser.val_tot_bonif 			= p_wfat_mestre_ser.val_tot_bonif # NOT NULL
	LET p_nf_mestre_ser.val_frete_cli 			= p_wfat_mestre_ser.val_frete_cli # NOT NULL
	LET p_nf_mestre_ser.val_seguro_cli 			= p_wfat_mestre_ser.val_seguro_cli # NOT NULL
	LET p_nf_mestre_ser.val_frete_ex 				= p_wfat_mestre_ser.val_frete_ex # NOT NULL
	LET p_nf_mestre_ser.val_seguro_ex 			= p_wfat_mestre_ser.val_seguro_ex # NOT NULL
	LET p_nf_mestre_ser.cod_tip_carteira 		= p_wfat_mestre_ser.cod_tip_carteira # NOT NULL
	LET p_nf_mestre_ser.ies_plano_vendas 		= p_wfat_mestre_ser.ies_plano_vendas # NOT NULL
	LET p_nf_mestre_ser.ies_especie 				= "NF"
	
	INSERT INTO NF_MESTRE_SER VALUES(p_nf_mestre_ser.*)
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("INSERT",'WFAT_MESTRE_SER')
		RETURN FALSE
	END IF	
	
	################################
	#INSERIR NA TABELA NF_CARGA_SER#
	################################
	LET p_nf_carga_ser.cod_empresa 	= p_nf_mestre_ser.cod_empresa  # NOT NULL
	LET p_nf_carga_ser.num_nff 			= p_nf_mestre_ser.num_nff  # NOT NULL
	LET p_nf_carga_ser.ser_nff  		= p_nf_mestre_ser.num_nff 	 # NOT NULL
	LET p_nf_carga_ser.cod_embal  	= 0 # NOT NULL
	LET p_nf_carga_ser.qtd_volumes 	= 0 # NOT NULL
	
	INSERT INTO NF_CARGA_SER VALUES (p_nf_carga_ser.*)
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("INSERT",'NF_CARGA_SER')
		RETURN FALSE
	END IF 
	
	LET p_fat_nf_compl.empresa						= p_nf_mestre_ser.cod_empresa
	LET p_fat_nf_compl.nota_fiscal				= p_nf_mestre_ser.num_nff
	LET p_fat_nf_compl.serie_nota_fiscal	= p_nf_mestre_ser.ser_nff
	LET p_fat_nf_compl.campo							="ies_comissao"
	LET p_fat_nf_compl.par_existencia			= NULL
	LET p_fat_nf_compl.parametro_texto		= "N"
	LET p_fat_nf_compl.parametro_val			= NULL
	LET p_fat_nf_compl.parametro_qtd			= NULL
	LET p_fat_nf_compl.parametro_dat			= NULL
	
	INSERT INTO fat_nf_compl VALUES(p_fat_nf_compl.*)
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("INSERT",'fat_nf_compl')
		RETURN FALSE
	END IF 
	
	LET p_fat_nf_compl.empresa						= p_nf_mestre_ser.cod_empresa
	LET p_fat_nf_compl.nota_fiscal				= p_nf_mestre_ser.num_nff
	LET p_fat_nf_compl.serie_nota_fiscal	= p_nf_mestre_ser.ser_nff
	LET p_fat_nf_compl.campo							="Via Transporte"
	LET p_fat_nf_compl.par_existencia			= NULL
	LET p_fat_nf_compl.parametro_texto		= NULL 
	LET p_fat_nf_compl.parametro_val			= 1
	LET p_fat_nf_compl.parametro_qtd			= NULL
	LET p_fat_nf_compl.parametro_dat			= NULL
	
	
	INSERT INTO fat_nf_compl VALUES(p_fat_nf_compl.*)
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("INSERT",'fat_nf_compl')
		RETURN FALSE
	END IF 
	
	LET p_fat_nf_compl.empresa						= p_nf_mestre_ser.cod_empresa
	LET p_fat_nf_compl.nota_fiscal				= p_nf_mestre_ser.num_nff
	LET p_fat_nf_compl.serie_nota_fiscal	= p_nf_mestre_ser.ser_nff
	LET p_fat_nf_compl.campo							="VALOR ICMS RETENCAO"
	LET p_fat_nf_compl.par_existencia			= NULL
	LET p_fat_nf_compl.parametro_texto		= NULL 
	LET p_fat_nf_compl.parametro_val			= 0
	LET p_fat_nf_compl.parametro_qtd			= NULL
	LET p_fat_nf_compl.parametro_dat			= NULL
	
	INSERT INTO fat_nf_compl VALUES(p_fat_nf_compl.*)
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("INSERT",'fat_nf_compl')
		RETURN FALSE
	END IF 
	
	LET p_fat_nf_compl.empresa						= p_nf_mestre_ser.cod_empresa
	LET p_fat_nf_compl.nota_fiscal				= p_nf_mestre_ser.num_nff
	LET p_fat_nf_compl.serie_nota_fiscal	= p_nf_mestre_ser.ser_nff
	LET p_fat_nf_compl.campo							="BASE ICMS RETENCAO"
	LET p_fat_nf_compl.par_existencia			= NULL
	LET p_fat_nf_compl.parametro_texto		= NULL 
	LET p_fat_nf_compl.parametro_val			= 0
	LET p_fat_nf_compl.parametro_qtd			= NULL
	LET p_fat_nf_compl.parametro_dat			= NULL
	
	INSERT INTO fat_nf_compl VALUES(p_fat_nf_compl.*)
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("INSERT",'fat_nf_compl')
		RETURN FALSE
	ELSE 
		RETURN TRUE 
	END IF 
END FUNCTION 

#----------------------------------#
FUNCTION pol0989_insere_duplicata()#
#----------------------------------#

DEFINE p_nf_duplicata_ser 	RECORD LIKE nf_duplicata_ser.*,
			 p_wfat_duplic_ser		RECORD LIKE wfat_duplic_ser.*,
			 p_nf_movto_dupl_ser	RECORD LIKE nf_movto_dupl_ser.*
	
	####################################
	#INSERIR NA TABELA NF_DUPLICATA_SER#
	####################################
	LET p_nf_duplicata_ser.cod_empresa   	 = p_cod_empresa # NOT NULL
	LET p_nf_duplicata_ser.num_nff   			 = p_num_nff # NOT NULL
	LET p_nf_duplicata_ser.ser_nff   			 = p_ser # NOT NULL
	LET p_nf_duplicata_ser.num_duplicata   = p_num_nff # NOT NULL
	LET p_nf_duplicata_ser.dig_duplicata 	 = 1 # NOT NULL
	LET p_nf_duplicata_ser.pct_desc_financ = 0 # NOT NULL
	LET p_nf_duplicata_ser.val_duplic      = p_val_bruto
	LET p_nf_duplicata_ser.dat_vencto_cd   = NULL 
	LET p_nf_duplicata_ser.dat_vencto_sd   = p_data
	LET p_nf_duplicata_ser.cod_moeda 			 = p_param.cod_moeda
	
	#INSERT INTO NF_DUPLICATA_SER VALUES (p_nf_duplicata_ser.*)
	
	INSERT INTO fat_nf_duplicata
	 VALUES(p_nf_duplicata_ser.cod_empresa,
	        p_trans_nf,
	        p_nf_duplicata_ser.dig_duplicata,
	        p_nf_duplicata_ser.val_duplic,
	        p_nf_duplicata_ser.dat_vencto_cd,
	        p_nf_duplicata_ser.dat_vencto_sd,
	        p_nf_duplicata_ser.pct_desc_financ,
	        0, #val_bc_comissao
	        "", #portador
	        0, #agencia
	        " ", #dig_agencia
	        " ", #titulo_bancario
	        " ", #docum_cre
	        p_cod_empresa) #empresa_cre
	        
	 
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("INSERT","FAT_NF_DUPLICATA")
		RETURN FALSE 
	END IF 
	
	RETURN TRUE

{	
	###################################
	#INSERIR NA TABELA WFAT_DUPLIC_SER#
	###################################
	LET p_wfat_duplic_ser.cod_empresa   					= p_nf_duplicata_ser.cod_empresa # NOT NULL ,
	LET p_wfat_duplic_ser.num_nff   							= p_nf_duplicata_ser.num_nff # NOT NULL ,
	LET p_wfat_duplic_ser.serie_nota_fiscal   		= p_nf_duplicata_ser.ser_nff  # NOT NULL ,
	LET p_wfat_duplic_ser.num_duplicata   				= p_nf_duplicata_ser.num_duplicata  # NOT NULL ,
	LET p_wfat_duplic_ser.dig_duplicata 				  = p_nf_duplicata_ser.dig_duplicata # NOT NULL ,
	LET p_wfat_duplic_ser.pct_desc_financ   			= p_nf_duplicata_ser.pct_desc_financ  # NOT NULL ,
	LET p_wfat_duplic_ser.val_duplic  					 	= p_nf_duplicata_ser.val_duplic # NOT NULL ,
	LET p_wfat_duplic_ser.dat_vencto_sd 					= p_nf_duplicata_ser.dat_vencto_sd 		
	LET p_wfat_duplic_ser.dat_vencto_cd 					= p_nf_duplicata_ser.dat_vencto_cd
	LET p_wfat_duplic_ser.nom_usuario   					= p_user # NOT NULL ,
	
	INSERT INTO WFAT_DUPLIC_SER VALUES (P_wfat_duplic_ser.*)
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("INSERT","WFAT_DUPLIC_SER")
		RETURN FALSE 
	END IF 
	
	#####################################
	#INSERIR NA TABELA NF_MOVTO_DUPL_SER#
	#####################################
	LET p_nf_movto_dupl_ser.cod_empresa   = p_wfat_duplic_ser.cod_empresa #NOT NULL ,
	LET p_nf_movto_dupl_ser.num_nff   		= p_wfat_duplic_ser.num_nff #NOT NULL ,
	LET p_nf_movto_dupl_ser.ser_nff   		= p_wfat_duplic_ser.serie_nota_fiscal #NOT NULL ,
	LET p_nf_movto_dupl_ser.dat_operacao  = p_data #NOT NULL ,
	LET p_nf_movto_dupl_ser.ies_operacao  = 'I' #NOT NULL ,
	LET p_nf_movto_dupl_ser.num_lote 			= 0
	
	INSERT INTO NF_MOVTO_DUPL_SER VALUES (p_nf_movto_dupl_ser.*)
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("INSERT","NF_MOVTO_DUPL_SER")
		RETURN FALSE
	ELSE
		RETURN TRUE 
	END IF 
}

END FUNCTION

#--------------------------------#
FUNCTION pol0989_deleta_arquivo()#
#--------------------------------#
DEFINE p_data_char		CHAR(10),
			 l_caminho			CHAR(500),			#--->vai receber o comando para deletar em linux
			 w_caminho			CHAR(500),			#--->vai receber o comando para deletar em windows
			 w_bol,l_bol		SMALLINT				#--->vai receber o retorno do comando
			 
	LET p_data_char = p_data
	CALL log150_procura_caminho("UNL") RETURNING p_caminho
	LET l_caminho = "rm ", p_caminho CLIPPED,"PZ",p_data_char[1,2], p_data_char[4,5], p_data_char[9,10],".002"
	LET w_caminho = "del ", p_caminho CLIPPED,"PZ",p_data_char[1,2], p_data_char[4,5], p_data_char[9,10],".002"
			
	RUN l_caminho	 RETURNING l_bol
	RUN w_caminho	 RETURNING w_bol
	
	IF l_bol = TRUE  OR w_bol = TRUE  THEN 
		RETURN TRUE 
	ELSE
		RETURN FALSE 
	END IF 
	
END FUNCTION

#------------------------------#
FUNCTION pol0989_valida_bases()#		compara o icms obitido para ver se o usuario realmente valida o valor senão
#------------------------------#		ele cancela a operação(variação que pode ocorrer e de 0,25 centavos)
DEFINE l_val_tot_icm, l_val_tot_base_icm,l_limite 	LIKE wfat_mestre_ser.val_tot_icm,
			 l_msg CHAR(700)

	LET l_limite = 1/4                    # limite e de 0,25 centavos de diferença
	
	SELECT val_trib_merc, bc_tributo_tot
	INTO  l_val_tot_icm, l_val_tot_base_icm
	FROM fat_mestre_fiscal
	WHERE cod_empresa       = p_cod_empresa
	  AND trans_nota_fiscal = p_trans_nf
	  AND tributo_benef     = 'ICMS'

	IF ((p_val_icm - l_limite) >l_val_tot_icm) OR ((p_val_icm + l_limite) < l_val_tot_icm) THEN 
		LET l_msg = "O ICMS aprensentou divergencia nos valores maior que o informado.Valor do ICSM informado R$",p_val_icm USING "##,##&.&&",
								" Valor de ICMS obtido R$" ,l_val_tot_icm USING "##,##&.&&", " Valor base R$",p_val_base_icm USING "##,##&.&&",
								"Valor base obtido R$",l_val_tot_base_icm USING "##,##&.&&", ".Deseja continuar?"
		IF NOT log0040_confirm(18,35,l_msg) THEN
			RETURN FALSE
		END IF 
	END IF 
	
	RETURN TRUE 
END FUNCTION

#-----------------------------#
FUNCTION pol0989_insere_item()#
#-----------------------------#
DEFINE 	l_cont SMALLINT,
				p_ies_tip_incid_ipi CHAR(01),
				p_uf 						CHAR(02),
				l_seq						SMALLINT,
				p_exce					CHAR(04),
				l_index				  SMALLINT,
				p_msg						CHAR(120),
				l_tem						SMALLINT,
				p_cons, p_contr,p_ncontr		LIKE fiscal_par.pct_icm_ncontrib ,
				p_redu_icm, p_pct_desc_b_icm_c, p_pct_desc_b_icm_nc 	LIKE fiscal_par.pct_icm_ncontrib
				
DEFINE 	p_conver RECORD 
				cod_item	CHAR(20),
				qtd_item INTEGER ,
				total_val_item INTEGER,
				desc_val_item INTEGER,
				acresc_val_item INTEGER
END RECORD
				

{	SELECT MAX(NUM_NFF)+1 							#pega o ultimo numero da nota fiscal e adiciona aproxima
	INTO p_num_nff
	FROM FAT_NUMERO_SER
	WHERE COD_EMPRESA =p_cod_empresa
	AND SER_NFF =p_param.ser_nff
	LET p_erro = FALSE
	
	IF p_num_nff = 0 OR p_num_nff IS NULL THEN  
		LET p_num_nff = 1
	END IF 
	
	UPDATE FAT_NUMERO_SER								# atualiza a tabela com o o novo numero
	SET NUM_NFF = NUM_NFF + 1
	WHERE COD_EMPRESA =p_cod_empresa
	AND SER_NFF =p_param.ser_nff
	
	IF SQLCA.SQLCODE <> 0 THEN 
		CALL log003_err_sql("UPDATE",'FAT_NUMERO_SER')
		RETURN FALSE
	END IF  

}	
	
	#O bloco a seguir, irá gravar os registros enviados na tabela TEMP t_arquivo
	#----------------------------------------------------------------------------#
	
		LET l_cont = 1 
		
		DECLARE cq_convert	CURSOR FOR 
			SELECT 	ARQUIVO[1,20] cod_item,
							ARQUIVO[21,29] QTD_ITEM,
							ARQUIVO[31,44] TOTAL_VAL_ITEM,
							ARQUIVO[45,58] DESC_VAL_ITEM,
							ARQUIVO[59,72] ACRESC_VAL_ITEM
			FROM T_ENTRADA
		
		FOREACH cq_convert INTO p_conver.*  #tem erro
		
			IF p_conver.cod_item[13,15] <>'000' THEN  #Se o codigo da posição 13 a 15 for dIFerente de zero
					LET p_arquivo.cod_item	= p_conver.cod_item[13,20] #o codigo do item vai ser o codigo do logix
			ELSE
				 IF p_conver.cod_item[16,17] = '99' THEN	# Se for codigo 99 busco o item da posição 16 a 19
					  LET p_exce = p_conver.cod_item[16,19]						
				 ELSE  																						
					  LET p_exce = p_conver.cod_item[17,20]	# senão da 17à 20						
				 END IF 
				
				 LET p_encontrou = 'N'	
				
				 DECLARE cq_item2 CURSOR FOR 
					SELECT a.COD_ITEM
					FROM ITEM_VDP a , item b
					WHERE a.COD_ITEM[4,7] = p_exce
					AND a.cod_empresa = p_cod_empresa
					AND a.COD_ITEM = b.COD_ITEM
					AND a.cod_empresa = b.cod_empresa 
				 
				 FOREACH cq_item2 INTO p_arquivo.cod_item
						
					 
			      LET p_encontrou = 'S'
			  
					 EXIT FOREACH
				 END FOREACH

  			 IF  p_encontrou = 'N' THEN  					
			      LET p_msg = 'Item: ',p_exce CLIPPED, ' item não encontrado na ITEM_VDP'
			      CALL pol0989_imprime_erros(p_msg)
			      LET p_erro = TRUE 
	  		    CONTINUE FOREACH
		  	 END IF 
				
			END IF 
						    
			LET p_arquivo.sequencia 			= l_cont													#Converte os valores e coloca as virgulas
			LET p_arquivo.qtd_item 				= p_conver.qtd_item /100
			LET p_arquivo.total_val_item	= p_conver.total_val_item /100
			LET p_arquivo.desc_val_item		= p_conver.desc_val_item /100
			LET p_arquivo.acresc_val_item	= p_conver.acresc_val_item /100
			
			
			LET p_exce = p_conver.cod_item[17,20]
					 
			SELECT cod_excecao
			FROM par_excecoes
			WHERE cod_empresa = p_cod_empresa
			AND cod_excecao = p_exce
			
			IF SQLCA.SQLCODE = 0 THEN												#Se estiver cadastrado nas excessões 
					SELECT sequencia
					INTO l_seq 
					FROM t_arquivo
					WHERE cod_item = p_arquivo.cod_item	
					
					IF SQLCA.SQLCODE = 0 THEN																						#Se o item estiver cadastrado nas excessoes 
						UPDATE t_arquivo																									#e ja estiver na tabela temporatia ele vai
						SET total_val_item = total_val_item + p_arquivo.total_val_item,		# fazer um update na tabela a quantidade,
						qtd_item = 1,																											#continuara sendo 1 a sequencia vai ser
						desc_val_item = desc_val_item + p_arquivo.desc_val_item,					#a mesma mas os valores irão ser somados
						acresc_val_item = acresc_val_item	+ p_arquivo.acresc_val_item
						WHERE cod_item = p_arquivo.cod_item
						AND sequencia = l_seq
					ELSE
						LET p_arquivo.qtd_item = 1									#se o registro nao estiver contido na tabela temoraria
																												#ele vai alterar a quantidade para 1 e vai inserir o reg
						INSERT INTO t_arquivo VALUES (p_arquivo.*)
						
						IF SQLCA.SQLCODE <> 0 THEN 
							CALL log003_err_sql('insert', 't_arquivo')
						END IF 
						LET l_cont = l_cont + 1
					END IF
			ELSE
				 LET sql_stmt = " SELECT sequencia,CASE qtd_item WHEN  0 THEN round((total_val_item /1),7) ",
       									" ELSE round((total_val_item /qtd_item),7) END ",
												" FROM t_arquivo ",
												" WHERE cod_item = '", p_arquivo.cod_item,"'"
				PREPARE var_queri FROM sql_stmt   
				LET l_tem = FALSE															#L_TEM tem a função de controlar quANDo vai ser um upadate  
				DECLARE cq_igual CURSOR FOR 	var_queri				# ou um insert pois podemos ter variios itens com preços dIFerentes
					
					#SELECT sequencia, total_val_item /qtd_item 
					#INTO l_seq , p_preco_uni
					#FROM t_arquivo
					#WHERE cod_item = p_arquivo.cod_item
				FOREACH cq_igual INTO l_seq, p_preco_uni
				
					IF p_arquivo.qtd_item = 0 THEN
						LET p_arquivo.qtd_item = 1
					END IF
				
					IF SQLCA.SQLCODE = 0 AND  
					       p_preco_uni = (p_arquivo.total_val_item / p_arquivo.qtd_item) THEN 
						UPDATE t_arquivo
						SET total_val_item = total_val_item + p_arquivo.total_val_item,
						qtd_item = qtd_item + p_arquivo.qtd_item,
						desc_val_item = desc_val_item + p_arquivo.desc_val_item,
						acresc_val_item = acresc_val_item	+ p_arquivo.acresc_val_item
						WHERE cod_item = p_arquivo.cod_item
						AND sequencia = l_seq
						
						LET l_tem = TRUE	
						EXIT FOREACH
					END IF
					
				END FOREACH  
				
				IF NOT l_tem THEN 
					INSERT INTO t_arquivo VALUES (p_arquivo.*)
						IF SQLCA.SQLCODE <> 0 THEN 
							CALL log003_err_sql('insert', 't_arquivo')
						END IF 
						LET l_cont = l_cont + 1
				END IF 
			
			END IF 
			
		END FOREACH

	#tabela t_arquivo gravada
#-------------------------------------------------------#
		
	#################################
	#INSERIR NA TABELA WFAT_ITEM_SER#
	#################################
	 
	DECLARE cq_t_arquiv	SCROLL CURSOR FOR 
	SELECT * FROM t_arquivo ORDER BY sequencia

	FOREACH cq_t_arquiv INTO p_arquivo.*

		IF p_arquivo.total_val_item = 0 THEN
			LET p_msg = 'Item: ',p_arquivo.cod_item CLIPPED, ' sem valor total, item descartado'
			CALL pol0989_imprime_erros(p_msg)
##			LET p_erro = TRUE 
			CONTINUE FOREACH
		END IF
	
		LET p_wfat_item_ser.cod_empresa  					= p_cod_empresa 
		LET p_wfat_item_ser.num_nff  							= p_num_nff 
		LET p_wfat_item_ser.serie_nota_fiscal 		= p_param.ser_nff 
		LET p_wfat_item_ser.num_pedido  					= '0'
		LET p_wfat_item_ser.num_sequencia  				= p_arquivo.sequencia
		LET p_wfat_item_ser.dat_emis_pedido 			= p_data
		LET p_wfat_item_ser.cod_item 							= p_arquivo.cod_item
		
		SELECT cod_nat_oper_ref 
		INTO p_wfat_item_fisc_ser.cod_nat_oper
		FROM nat_oper_refer
		WHERE cod_empresa = p_cod_empresa
		AND cod_item  = p_arquivo.cod_item
		AND cod_nat_oper= p_param.cod_nat_oper
		
		IF sqlca.sqlcode <> 0 then
			LET p_wfat_item_fisc_ser.cod_nat_oper  			= p_param.cod_nat_oper # NOT NULL
		END IF

    #Para versão 10.02 (Ivo) ...
    LET p_cod_nat_oper = p_wfat_item_fisc_ser.cod_nat_oper
    LET p_cod_item     = p_wfat_item_ser.cod_item
    IF NOT pol0989_le_param_fisc() THEN 
       CONTINUE FOREACH
    END IF
    #... ---------#
		 
#----- O bloco a seguir, será subistituído, mais adiante, pela leitura 
#...   da tabela obf_config_fisc ...---------------------------------#		 
{	     
		SELECT COD_ORIGEM,                           #origem
		       COD_FISCAL,                           #classif_fisc
		       COD_TRIBUTACAO,                       #tributacao
		       IES_INCID_IPI,                        #incide
		       IES_INCID_ICM,                        #incide
					 PCT_ICM_CONTRIB,                      #aliquota ou aliq_icms_normal 
					 PCT_ICM_NCONTRIB,
					 PCT_ICM_CONSUMO,
					 PCT_DESC_B_ICM_C,                     #pct_desc_icms_nrml
					 PCT_DESC_B_ICM_NC
		  INTO p_wfat_item_fisc_ser.cod_origem,
		       p_wfat_item_fisc_ser.cod_fiscal,
		       p_wfat_item_fisc_ser.cod_tributacao,
			 	   p_wfat_item_fisc_ser.ies_incid_ipi,
			 	   p_wfat_item_fisc_ser.ies_incid_icm,
			     p_contr,
			     p_ncontr,
			     p_cons,
			     p_pct_desc_b_icm_c,
			     p_pct_desc_b_icm_nc
		FROM FISCAL_PAR A, CLIENTES B, CIDADES C
	 WHERE A.COD_EMPRESA   = p_cod_empresa
		 AND A.COD_NAT_OPER  = p_wfat_item_fisc_ser.cod_nat_oper 
		 AND b.COD_CLIENTE   =  p_param.cod_cliente
		 AND B.COD_CIDADE    = C.COD_CIDADE
		 AND C.COD_UNI_FEDER = A.COD_UNI_FEDER

		IF SQLCA.SQLCODE <> 0 THEN
			LET p_msg = log0030_txt_err_sql("SELECT","fiscal_par"),' Codigo Item:',p_arquivo.cod_item
			CALL pol0989_imprime_erros(p_msg)
			LET p_erro = TRUE 
			CONTINUE FOREACH
		END IF
		
		CASE 	
			WHEN p_wfat_item_fisc_ser.ies_incid_icm	='1' 
				LET p_wfat_item_fisc_ser.pct_icm = p_contr
				LET p_redu_icm = p_pct_desc_b_icm_c
			WHEN p_wfat_item_fisc_ser.ies_incid_icm ='2'
				LET p_wfat_item_fisc_ser.pct_icm = p_ncontr
				LET p_redu_icm = p_pct_desc_b_icm_nc
			WHEN p_wfat_item_fisc_ser.ies_incid_icm ='3'
				LET p_wfat_item_fisc_ser.pct_icm = p_cons
				LET p_redu_icm = p_pct_desc_b_icm_c
		END CASE }
		
#... -----------------------------------------------------------------------------#
					
		SELECT den_item, 
		       pes_unit, 
		       cod_cla_fisc, 
		       #pct_ipi, 
		       cod_unid_med, 
		       fat_conver
		  INTO p_wfat_item_ser.den_item , 
					p_wfat_item_ser.pes_unit ,
					p_wfat_item_ser.cod_cla_fisc,
					#p_wfat_item_ser.pct_ipi,
					p_wfat_item_ser.cod_unid_med,
					p_wfat_item_ser.fat_conver
 		 FROM item
		WHERE cod_empresa = p_cod_empresa
		  AND cod_item = p_arquivo.cod_item
		
		IF SQLCA.SQLCODE <> 0 THEN
		#	CALL log003_err_sql('select', 'item')
			LET p_msg = log0030_txt_err_sql("SELECT","item"),' Codigo Item:',p_arquivo.cod_item
			CALL pol0989_imprime_erros(p_msg)
			LET p_erro = TRUE 
			CONTINUE FOREACH
		END IF 
		
  	LET p_wfat_item_ser.qtd_item = p_arquivo.qtd_item 		
    LET p_cod_fiscal = p_wfat_item_ser.cod_cla_fisc
{	
		LET p_preco_s_trib = p_arquivo.total_val_item / (1+(p_wfat_item_ser.pct_ipi / 100))		
		LET p_preco_uni_nf = p_preco_s_trib / p_arquivo.qtd_item 			#preço unitario da nota com apenas dois digitos		
		LET p_wfat_item_ser.pre_unit_nf  					= p_preco_uni_nf # NOT NULL
		LET p_wfat_item_ser.val_desc_adicional  	= p_arquivo.desc_val_item # NOT NULL
		LET p_wfat_item_ser.val_liq_item  				= p_preco_s_trib # NOT NULL
		
		IF p_wfat_item_fisc_ser.ies_incid_ipi = '3' THEN 
			LET p_wfat_item_ser.ies_tributa_ipi = 'N'			
		ELSE
			LET p_wfat_item_ser.ies_tributa_ipi = 'S'			
		END IF 	
		
		LET p_wfat_item_ser.val_ipi =	p_preco_s_trib * (p_wfat_item_ser.pct_ipi / 100)
		
		IF p_redu_icm = 0 THEN 										#se tiver redução no icms 
			LET p_wfat_item_ser.val_icm_ret	= 
			    p_arquivo.total_val_item    *  (p_wfat_item_fisc_ser.pct_icm / 100)  # NOT NULL
		ELSE
			LET p_wfat_item_ser.val_icm_ret = 
			   (p_arquivo.total_val_item - (p_arquivo.total_val_item *
			   (p_redu_icm/100))) * (p_wfat_item_fisc_ser.pct_icm / 100)  # NOT NULL
		END IF 
}
		LET p_wfat_item_ser.num_om  = 0 
		LET p_wfat_item_ser.pre_unit_ped  				= 0 
		LET p_wfat_item_ser.ies_desp_dist  				= 'N' 
		LET p_wfat_item_ser.pct_desc_adic_mest  	= 0 
		LET p_wfat_item_ser.pct_desc_adic  				= 0 
		LET p_wfat_item_ser.nom_usuario  			    = p_user 
		LET p_wfat_item_ser.val_desc_adicional  	= p_arquivo.desc_val_item 

    IF NOT pol0989_ins_tributo() THEN # versão 10.02
       CONTINUE FOREACH
    END IF
		
    CALL pol0989_carrega_fat_item() # versão 10.02
	
		# INSERT INTO WFAT_ITEM_SER VALUES (p_wfat_item_ser.*)
    INSERT INTO fat_nf_item VALUES(p_fat_item.*)

		IF SQLCA.SQLCODE <> 0 THEN 
			LET p_msg = log0030_txt_err_sql("SELECT","fat_nf_item"),
			            ' Codigo Item:',p_arquivo.cod_item
			CALL pol0989_imprime_erros(p_msg)
			LET p_erro = TRUE 
			CONTINUE FOREACH
		END IF 

 #-----------------------------------------------------------#
 {		
		###############################
		#INSERIR NA TABELA NF_ITEM_SER#
		###############################
		LET p_nf_item_ser.cod_empresa  			= p_wfat_item_ser.cod_empresa  #NOT NULL			
		LET p_nf_item_ser.num_nff  					= p_wfat_item_ser.num_nff  #NOT NULL
		LET p_nf_item_ser.ser_nff  					= p_wfat_item_ser.serie_nota_fiscal  #NOT NULL
		LET p_nf_item_ser.num_pedido  			= p_wfat_item_ser.num_pedido #NOT NULL
		LET p_nf_item_ser.num_sequencia  		= p_wfat_item_ser.num_sequencia #NOT NULL
		LET p_nf_item_ser.cod_item 					= p_wfat_item_ser.cod_item
		LET p_nf_item_ser.ies_desp_dist  		= p_wfat_item_ser.ies_desp_dist #NOT NULL
		LET p_nf_item_ser.pes_unit  				= p_wfat_item_ser.pes_unit #NOT NULL
		LET p_nf_item_ser.qtd_item  				= p_wfat_item_ser.qtd_item #NOT NULL
		LET p_nf_item_ser.pre_unit_ped  		= p_wfat_item_ser.pre_unit_ped #NOT NULL
		LET p_nf_item_ser.pre_unit_nf  			= p_wfat_item_ser.pre_unit_nf #NOT NULL
		LET p_nf_item_ser.pct_desc_adic_mest= p_wfat_item_ser.pct_desc_adic_mest #NOT NULL
		LET p_nf_item_ser.pct_desc_adic  		= p_wfat_item_ser.pct_desc_adic #NOT NULL
		LET p_nf_item_ser.val_desc_adicional= p_wfat_item_ser.val_desc_adicional #NOT NULL
		LET p_nf_item_ser.val_liq_item  		= p_wfat_item_ser.val_liq_item #NOT NULL
		LET p_nf_item_ser.cod_cla_fisc 			= p_wfat_item_ser.cod_cla_fisc
		LET p_nf_item_ser.pct_ipi  					= p_wfat_item_ser.pct_ipi #NOT NULL
		LET p_nf_item_ser.val_ipi  					= p_wfat_item_ser.val_ipi #NOT NULL
		LET p_nf_item_ser.cod_unid_med 			= p_wfat_item_ser.cod_unid_med
		LET p_nf_item_ser.fat_conver  			= p_wfat_item_ser.fat_conver #NOT NULL
		LET p_nf_item_ser.ies_tributa_ipi  	= p_wfat_item_ser.ies_tributa_ipi #NOT NULL
		LET p_nf_item_ser.num_om  					= p_wfat_item_ser.num_om #NOT NULL 
		
		INSERT INTO NF_ITEM_SER  VALUES (p_nf_item_ser.*)
		IF SQLCA.SQLCODE <> 0 THEN 
		#	CALL log003_err_sql("INSERT","NF_ITEM_SER")
			LET p_msg = log0030_txt_err_sql("SELECT","NF_ITEM_SER"),' Codigo Item:',p_arquivo.cod_item
			CALL pol0989_imprime_erros(p_msg)
			LET p_erro = TRUE 
			CONTINUE FOREACH 
		END IF 
			
		######################################
		#INSERIR NA TABELA WFAT_ITEM_FISC_SER#
		######################################
		LET p_wfat_item_fisc_ser.cod_empresa  			= p_wfat_item_ser.cod_empresa # NOT NULL  		
		LET p_wfat_item_fisc_ser.num_nff  				 	= p_wfat_item_ser.num_nff  # NOT NULL
		LET p_wfat_item_fisc_ser.serie_nota_fiscal  = p_wfat_item_ser.serie_nota_fiscal # NOT NULL
		LET p_wfat_item_fisc_ser.num_pedido  				= p_wfat_item_ser.num_pedido # NOT NULL
		LET p_wfat_item_fisc_ser.num_sequencia  		= p_wfat_item_ser.num_sequencia # NOT NULL
		
		 
		
		#LET p_wfat_item_fisc_ser.ies_incid_ipi  		=   # NOT NULL
	  #	IF p_wfat_item_fisc_ser.pct_icm <> 0 THEN 
	  		#LET p_wfat_item_fisc_ser.ies_incid_icm  	= p_param.ies_finalidade
	  #	END IF 
	  
		#LET p_wfat_item_fisc_ser.ies_incid_icm  		= p_param.ies # NOT NULL
		#LET p_wfat_item_fisc_ser.pct_icm  				 	= p_nf_item_ser.pct_ipi # NOT NULL
		LET p_wfat_item_fisc_ser.pct_desc_base_icm  = p_redu_icm # NOT NULL
	
		SELECT COD_UNI_FEDER 
		INTO p_uf
		FROM CLIENTES A, CIDADES B
		WHERE A.COD_CIDADE = B.COD_CIDADE
		AND COD_CLIENTE = p_param.cod_cliente
		
	#	CALL log0030_mensagem(p_wfat_item_fisc_ser.cod_fiscal,'')
	#	IF p_uf <> "SP" THEN 
	#		LET p_wfat_item_fisc_ser.cod_fiscal  				= "6" + p_wfat_item_fisc_ser.cod_fiscal CLIPPED # NOT NULL
	#	ELSE
	#		LET p_wfat_item_fisc_ser.cod_fiscal  				= "5" + p_wfat_item_fisc_ser.cod_fiscal CLIPPED 
	#	END IF 
	#	CALL log0030_mensagem(p_wfat_item_fisc_ser.cod_fiscal,'')
#		LET p_wfat_item_fisc_ser.cod_origem 				= 0
		#LET p_wfat_item_fisc_ser.cod_tributacao 		=  '0' #???????????????????????
		LET p_wfat_item_fisc_ser.pct_desc_base_ipi  = 0 # NOT NULL
		LET p_wfat_item_fisc_ser.pct_cred_icm  			= 0 # NOT NULL
		LET p_wfat_item_fisc_ser.tax_red_pct_icm  	= 0 # NOT NULL
		LET p_wfat_item_fisc_ser.pct_desc_ipi  			= 0 # NOT NULL
		LET p_wfat_item_fisc_ser.cod_sit_trib  			= 0 # NOT NULL
		LET p_wfat_item_fisc_ser.cod_trib_estadual  = 0 # NOT NULL
		LET p_wfat_item_fisc_ser.cod_trib_federal  	= 0 # NOT NULL
		LET p_wfat_item_fisc_ser.val_desc_cred_icm 	= 0 # NOT NULL
		LET p_wfat_item_fisc_ser.val_base_ipi  			= p_wfat_item_ser.val_liq_item  # NOT NULL
		LET p_wfat_item_fisc_ser.val_ipi  				 	= p_nf_item_ser.val_ipi # NOT NULL
		
		IF p_redu_icm = 0 THEN 
			LET p_wfat_item_fisc_ser.val_base_icm  			= p_arquivo.total_val_item  # NOT NULL
		ELSE
			LET p_wfat_item_fisc_ser.val_base_icm  			= p_arquivo.total_val_item -(p_arquivo.total_val_item * (p_redu_icm/100))
		END IF
		
		LET p_wfat_item_fisc_ser.val_icm  				 	= p_wfat_item_ser.val_icm_ret # NOT NULL
		LET p_wfat_item_fisc_ser.val_base_ret 			= 0 
		LET p_wfat_item_fisc_ser.val_icm_ret 				= 0
		LET p_wfat_item_fisc_ser.val_frete  				= 0 # NOT NULL
		LET p_wfat_item_fisc_ser.val_seguro  				= 0 # NOT NULL
		LET p_wfat_item_fisc_ser.val_base_ipi_da  	= 0  # NOT NULL
		LET p_wfat_item_fisc_ser.val_ipi_desp_aces  = 0 # NOT NULL
		LET p_wfat_item_fisc_ser.nom_usuario  			= p_user # NOT NULL
		LET p_wfat_item_fisc_ser.ordem_montag  			= p_nf_item_ser.num_om  # NOT NULL
		
		INSERT INTO wfat_item_fisc_ser VALUES (p_wfat_item_fisc_ser.*)
		IF SQLCA.SQLCODE <> 0 THEN 
		#	CALL log003_err_sql("INSERT","wfat_item_fisc_ser")
			LET p_msg = log0030_txt_err_sql("SELECT","wfat_item_fisc_ser"),' Codigo Item:',p_arquivo.cod_item
			CALL pol0989_imprime_erros(p_msg)
			LET p_erro = TRUE 
			CONTINUE FOREACH  
		END IF 
		
		##################################
		#INSERIR NA TABELA NF_ITEM_FISCAL#
		##################################
		LET p_nf_item_fiscal_ser.cod_empresa  				= p_nf_item_ser.cod_empresa # NOT NULL
		LET p_nf_item_fiscal_ser.num_nff  						= p_wfat_item_fisc_ser.num_nff # NOT NULL
		LET p_nf_item_fiscal_ser.ser_nff  						= p_wfat_item_fisc_ser.serie_nota_fiscal # NOT NULL
		LET p_nf_item_fiscal_ser.num_pedido  					= p_wfat_item_fisc_ser.num_pedido # NOT NULL
		LET p_nf_item_fiscal_ser.num_sequencia  			= p_wfat_item_fisc_ser.num_sequencia # NOT NULL
		LET p_nf_item_fiscal_ser.cod_nat_oper 			  = p_wfat_item_fisc_ser.cod_nat_oper # NOT NULL
		LET p_nf_item_fiscal_ser.ies_incid_ipi  			= p_wfat_item_fisc_ser.ies_incid_ipi # NOT NULL
		LET p_nf_item_fiscal_ser.ies_incid_icm  			= p_wfat_item_fisc_ser.ies_incid_icm  # NOT NULL
		LET p_nf_item_fiscal_ser.pct_icm  						= p_wfat_item_fisc_ser.pct_icm # NOT NULL
		LET p_nf_item_fiscal_ser.pct_desc_base_icm  	= p_redu_icm # NOT NULL
		LET p_nf_item_fiscal_ser.cod_fiscal 				 	= p_wfat_item_fisc_ser.cod_fiscal # NOT NULL
		LET p_nf_item_fiscal_ser.cod_origem 					= p_wfat_item_fisc_ser.cod_origem 
		LET p_nf_item_fiscal_ser.cod_tributacao 			= p_wfat_item_fisc_ser.cod_tributacao
		LET p_nf_item_fiscal_ser.pct_desc_base_ipi  	= p_wfat_item_fisc_ser.pct_desc_base_ipi  # NOT NULL
		LET p_nf_item_fiscal_ser.pct_cred_icm  				= p_wfat_item_fisc_ser.pct_cred_icm # NOT NULL
		LET p_nf_item_fiscal_ser.tax_red_pct_icm  		= p_wfat_item_fisc_ser.tax_red_pct_icm # NOT NULL
		LET p_nf_item_fiscal_ser.pct_desc_ipi  				= p_wfat_item_fisc_ser.pct_desc_ipi  # NOT NULL
		LET p_nf_item_fiscal_ser.cod_sit_trib  				= p_wfat_item_fisc_ser.cod_sit_trib # NOT NULL
		LET p_nf_item_fiscal_ser.cod_trib_estadual  	= p_wfat_item_fisc_ser.cod_trib_estadual # NOT NULL
		LET p_nf_item_fiscal_ser.cod_trib_federal  		= p_wfat_item_fisc_ser.cod_trib_federal # NOT NULL
		LET p_nf_item_fiscal_ser.val_desc_cred_icm  	= p_wfat_item_fisc_ser.val_desc_cred_icm # NOT NULL
		LET p_nf_item_fiscal_ser.val_base_ipi  				= p_wfat_item_fisc_ser.val_base_ipi # NOT NULL
		LET p_nf_item_fiscal_ser.val_ipi  						= p_wfat_item_fisc_ser.val_ipi # NOT NULL
		LET p_nf_item_fiscal_ser.val_base_icm  				= p_wfat_item_fisc_ser.val_base_icm # NOT NULL
		LET p_nf_item_fiscal_ser.val_icm  						= p_wfat_item_fisc_ser.val_icm # NOT NULL
		LET p_nf_item_fiscal_ser.val_base_ret 				= p_wfat_item_fisc_ser.val_base_ret
		LET p_nf_item_fiscal_ser.val_icm_ret 					= p_wfat_item_fisc_ser.val_icm_ret
		LET p_nf_item_fiscal_ser.val_frete  					= p_wfat_item_fisc_ser.val_frete # NOT NULL
		LET p_nf_item_fiscal_ser.val_seguro  					= p_wfat_item_fisc_ser.val_seguro  # NOT NULL
		LET p_nf_item_fiscal_ser.val_base_ipi_da  		= p_wfat_item_fisc_ser.val_base_ipi_da # NOT NULL
		LET p_nf_item_fiscal_ser.val_ipi_desp_aces  	= p_wfat_item_fisc_ser.val_ipi_desp_aces # NOT NULL
		LET p_nf_item_fiscal_ser.ord_montag 				 	= p_wfat_item_fisc_ser.ordem_montag  # NOT NULL
		
		INSERT INTO nf_item_fiscal_ser VALUES (p_nf_item_fiscal_ser.*)
		IF SQLCA.SQLCODE <> 0 THEN 
			#CALL log003_err_sql("INSERT","nf_item_fiscal_ser")
			LET p_msg = log0030_txt_err_sql("SELECT","nf_item_fiscal_ser"),' Codigo Item:',p_arquivo.cod_item
			CALL pol0989_imprime_erros(p_msg)
			LET p_erro = TRUE 
			CONTINUE FOREACH  
		END IF }
		
	END FOREACH
	IF  p_erro THEN 
		RETURN FALSE
	ELSE
		RETURN TRUE
	END IF 
END FUNCTION 

#-------------------------------------#
FUNCTION pol0989_imprime_erros(p_erro)#			#prepara para imprimir erro
#-------------------------------------#
DEFINE p_erro			CHAR(250)
	
	
	IF NOT  p_print THEN 			
		CALL log150_procura_caminho('LST') RETURNING p_caminho
		LET p_caminho = p_caminho CLIPPED, 'pol0989.lst'
		LET p_nom_arquivo = p_caminho
		START REPORT pol0989_imprime TO p_nom_arquivo
		LET p_print = TRUE 
	END IF 
	
	OUTPUT TO REPORT pol0989_imprime(p_erro)
	
END FUNCTION 

#-----------------------------------#
FUNCTION pol0989_movimenta_estoque()#
#-----------------------------------#
DEFINE p_baixa RECORD 
			 cod_item				LIKE wfat_item_ser.cod_item,
			 qtd_item				LIKE wfat_item_ser.qtd_item,
			 num_sequencia	LIKE wfat_item_ser.num_sequencia
END RECORD 

DEFINE 	p_estoque RECORD
				qtd_saldo						LIKE estoque_lote.qtd_saldo,
				endereco						LIKE estoque_lote_ender.endereco,
				ies_ctr_estoque			LIKE item.ies_ctr_estoque,
				num_transac 				LIKE estoque_lote.num_transac,
				num_transac_ender		LIKE estoque_lote_ender.num_transac,
				cod_local						LIKE estoque_lote.cod_local,
				num_lote						LIKE estoque_lote.num_lote
END RECORD 

DEFINE p_estoque_trans 			RECORD LIKE estoque_trans.*,
			 p_estoque_trans_end  RECORD LIKE estoque_trans_end .*,
			 p_est_trans_area_lin	RECORD LIKE est_trans_area_lin.*,
			 p_nf_item_transac		RECORD LIKE nf_item_transac.*,
			 p_estoque_auditoria 	RECORD LIKE estoque_auditoria .*

DEFINE p_movito				LIKE estoque_lote.qtd_saldo,
			 p_movito_pen 	LIKE estoque_lote.qtd_saldo,
			 p_cod_movto		LIKE nat_operacao.cod_movto_estoq,
			 p_num_conta		LIKE estoque_operac_ct.num_conta_debito,
			 p_num_transac	LIKE estoque_lote.num_transac,
			 p_cod_exce			CHAR(04),
			 p_movito_trans	LIKE estoque_lote.qtd_saldo,
			 p_tip_reg			CHAR(1)
		
		DELETE FROM t_ctrl_trans

	  IF STATUS <> 0 THEN
	     CALL log003_err_sql('Deletando','t_ctrl_trans')
	     RETURN FALSE
	  END IF

	SELECT cod_movto_estoq 
	INTO p_cod_movto
	FROM nat_operacao  
	WHERE cod_nat_oper = p_param.cod_nat_oper     

	  IF STATUS <> 0 THEN
	     CALL log003_err_sql('Lendo','nat_operacao')
	     RETURN FALSE
	  END IF
	
	SELECT num_conta_debito
	INTO p_num_conta
	FROM estoque_operac_ct  
	WHERE cod_empresa = p_cod_empresa
	AND cod_operacao = p_cod_movto             

	  IF STATUS <> 0 THEN
	     CALL log003_err_sql('Lendo','estoque_operac_ct')
	     RETURN FALSE
	  END IF
	
	DECLARE cq_baixa_estoque CURSOR FOR
		SELECT item, qtd_item, seq_item_nf
		FROM fat_nf_item
		WHERE empresa = p_cod_empresa
		  AND trans_nota_fiscal = p_trans_nf
		ORDER BY seq_item_nf
	
	FOREACH cq_baixa_estoque INTO p_baixa.*
	
	  IF STATUS <> 0 THEN
	     CALL log003_err_sql('Lendo','cq_baixa_estoque')
	     RETURN FALSE
	  END IF
	  
		LET p_movito_pen = p_baixa.qtd_item
		
		DECLARE cq_baixa_item CURSOR FOR 
			SELECT a.qtd_saldo,b.endereco, c.ies_ctr_estoque, a.num_transac, 
						 b.num_transac,a.cod_local,a.num_lote
			FROM estoque_lote a, estoque_lote_ender b, item c
			WHERE a.cod_item =b.cod_item
			AND a.cod_item =c.cod_item
			AND a.cod_local = b.cod_local
			AND a.num_lote = b.num_lote
			AND a.cod_empresa = b.cod_empresa
			AND a.cod_empresa = c.cod_empresa
			AND a.ies_situa_qtd = b.ies_situa_qtd
			AND a.ies_situa_qtd = "L"
			AND a.qtd_saldo > 0
			AND c.ies_situacao <>"I"
			AND a.cod_item = p_baixa.cod_item
			AND a.cod_empresa = p_cod_empresa
			AND (a.cod_local = p_param.cod_local OR 	a.cod_local = p_param.cod_local1 )
			ORDER BY a.cod_item,a.cod_local,b.num_lote
			
		FOREACH cq_baixa_item INTO p_estoque.*
			
			LET p_cod_exce = p_baixa.cod_item[1,4]
			
			SELECT * FROM par_excecoes
			WHERE cod_empresa = p_cod_empresa
			AND cod_excecao = p_cod_exce
			
			IF SQLCA.SQLCODE = 0 THEN 
				EXIT FOREACH
			END IF 
			
			IF p_movito_pen = 0 THEN 
				EXIT FOREACH
			END IF 
			
			IF p_movito_pen > p_estoque.qtd_saldo THEN 
				LET p_movito = p_estoque.qtd_saldo
				LET p_movito_pen = p_movito_pen - p_estoque.qtd_saldo
			ELSE
				LET p_movito = p_movito_pen
				LET p_movito_pen = p_movito_pen - p_movito
			END IF 
			
			UPDATE estoque
			SET qtd_liberada = qtd_liberada - p_movito
			WHERE cod_empresa = p_cod_empresa
			AND cod_item = p_baixa.cod_item
			
			UPDATE estoque_lote
			SET qtd_saldo = qtd_saldo - p_movito
			WHERE cod_empresa = p_cod_empresa 
			AND num_transac 	= p_estoque.num_transac
			
			UPDATE estoque_lote_ender
			SET qtd_saldo = qtd_saldo - p_movito
			WHERE cod_empresa = p_cod_empresa 
			AND num_transac 	= p_estoque.num_transac_ender
			
			LET p_estoque_trans.cod_empresa  = p_cod_empresa #NOT NULL ,
			LET p_estoque_trans.num_transac  = 0 #NOT NULL ,
			LET p_estoque_trans.cod_item  = p_baixa.cod_item #NOT NULL ,
			LET p_estoque_trans.dat_movto =p_data #NOT NULL ,
			LET p_estoque_trans.dat_ref_moeda_fort =p_data 
			LET p_estoque_trans.cod_operacao  = p_cod_movto #NOT NULL ,
			LET p_estoque_trans.num_docum =p_num_nff USING "&&&&&&","-",p_param.ser_nff USING '&&'
			LET p_estoque_trans.num_seq = p_baixa.num_sequencia
			LET p_estoque_trans.ies_tip_movto  = "N" #NOT NULL ,
			LET p_estoque_trans.qtd_movto  = p_baixa.qtd_item - p_movito_pen #NOT NULL ,
			LET p_estoque_trans.cus_unit_movto_p  = 0 #NOT NULL ,
			LET p_estoque_trans.cus_tot_movto_p  = 0 #NOT NULL ,
			LET p_estoque_trans.cus_unit_movto_f  = 0 #NOT NULL ,
			LET p_estoque_trans.cus_tot_movto_f  = 0 #NOT NULL ,
			LET p_estoque_trans.num_conta = p_num_conta
			LET p_estoque_trans.num_secao_requis = ""
			LET p_estoque_trans.cod_local_est_orig = p_estoque.cod_local
			LET p_estoque_trans.cod_local_est_dest = ""
			LET p_estoque_trans.num_lote_orig = p_estoque.num_lote
			LET p_estoque_trans.num_lote_dest =""
			LET p_estoque_trans.ies_sit_est_orig ="L"
			LET p_estoque_trans.ies_sit_est_dest =""
			LET p_estoque_trans.cod_turno =NULL 
			LET p_estoque_trans.nom_usuario =p_user 
			LET p_estoque_trans.dat_proces = TODAY 
			LET p_estoque_trans.hor_operac = TIME 
			LET p_estoque_trans.num_prog ="POL0989"
			
			INSERT INTO estoque_trans  VALUES (p_estoque_trans.*)
			IF SQLCA.SQLCODE <> 0 THEN 
				CALL log003_err_sql("estoque_trans","insert")	
				RETURN FALSE 		
			END IF 
			LET p_num_transac = SQLCA.SQLERRD[2]
			
			LET p_estoque_trans_end.cod_empresa = p_cod_empresa
			LET p_estoque_trans_end.num_transac= p_num_transac
			LET p_estoque_trans_end.endereco=	p_estoque.endereco
			LET p_estoque_trans_end.num_volume=0
			LET p_estoque_trans_end.qtd_movto= p_estoque_trans.qtd_movto
			LET p_estoque_trans_end.cod_grade_1=" "
			LET p_estoque_trans_end.cod_grade_2=" "
			LET p_estoque_trans_end.cod_grade_3=" "
			LET p_estoque_trans_end.cod_grade_4=" "
			LET p_estoque_trans_end.cod_grade_5=" "
			LET p_estoque_trans_end.dat_hor_prod_ini='1900-01-01 00:00:00'
			LET p_estoque_trans_end.dat_hor_prod_fim='1900-01-01 00:00:00'
			LET p_estoque_trans_end.vlr_temperatura= 0
			LET p_estoque_trans_end.endereco_origem= p_estoque.endereco
			LET p_estoque_trans_end.num_ped_ven= 0
			LET p_estoque_trans_end.num_seq_ped_ven= p_baixa.num_sequencia
			LET p_estoque_trans_end.dat_hor_producao='1900-01-01 00:00:00'
			LET p_estoque_trans_end.dat_hor_validade='1900-01-01 00:00:00'
			LET p_estoque_trans_end.num_peca=" "
			LET p_estoque_trans_end.num_serie=" " 
			LET p_estoque_trans_end.comprimento= 0
			LET p_estoque_trans_end.largura= 0
			LET p_estoque_trans_end.altura= 0
			LET p_estoque_trans_end.diametro= 0
			LET p_estoque_trans_end.dat_hor_reserv_1='1900-01-01 00:00:00'
			LET p_estoque_trans_end.dat_hor_reserv_2='1900-01-01 00:00:00'
			LET p_estoque_trans_end.dat_hor_reserv_3='1900-01-01 00:00:00'
			LET p_estoque_trans_end.qtd_reserv_1= 0
			LET p_estoque_trans_end.qtd_reserv_2= 0
			LET p_estoque_trans_end.qtd_reserv_3= 0
			LET p_estoque_trans_end.num_reserv_1= 0
			LET p_estoque_trans_end.num_reserv_2= 0
			LET p_estoque_trans_end.num_reserv_3= 0
			LET p_estoque_trans_end.tex_reservado=" "
			LET p_estoque_trans_end.cus_unit_movto_p= 0
			LET p_estoque_trans_end.cus_unit_movto_f= 0
			LET p_estoque_trans_end.cus_tot_movto_p= 0
			LET p_estoque_trans_end.cus_tot_movto_f= 0
			LET p_estoque_trans_end.cod_item= p_estoque_trans.cod_item
			LET p_estoque_trans_end.dat_movto= TODAY
			LET p_estoque_trans_end.cod_operacao= p_cod_movto
			LET p_estoque_trans_end.ies_tip_movto= p_estoque_trans.ies_tip_movto
			LET p_estoque_trans_end.num_prog= p_estoque_trans.num_prog 
			
			INSERT INTO estoque_trans_end  VALUES (p_estoque_trans_end.*) 
			IF SQLCA.SQLCODE <> 0 THEN 
				CALL log003_err_sql("estoque_trans_end","insert")	
				RETURN FALSE 		
			END IF
			
			LET p_estoque_auditoria.cod_empresa = p_cod_empresa #NOT NULL ,
			LET p_estoque_auditoria.num_transac =p_num_transac #NOT NULL ,
			LET p_estoque_auditoria.nom_usuario =p_user #NOT NULL ,
			LET p_estoque_auditoria.dat_hor_proces = CURRENT  #NOT NULL ,
			LET p_estoque_auditoria.num_programa  = "POL0989"#NOT NULL ,
			
			INSERT INTO estoque_auditoria VALUES (p_estoque_auditoria.*) 
			IF SQLCA.SQLCODE <> 0 THEN 
				CALL log003_err_sql("estoque_auditoria","insert")	
				RETURN FALSE 		
			END IF
			
{			LET p_nf_item_transac.cod_empresa 	= p_cod_empresa
	    LET p_nf_item_transac.num_nff				= p_num_nff
	    LET p_nf_item_transac.num_pedido		= 0
	    LET p_nf_item_transac.num_sequencia	= p_baixa.num_sequencia
	    LET p_nf_item_transac.num_transac		= p_num_transac
	    
	    INSERT INTO nf_item_transac VALUES (p_nf_item_transac.*)
	    IF SQLCA.SQLCODE <> 0 THEN 
				CALL log003_err_sql("nf_item_transac","insert")	
				RETURN FALSE 		
			END IF
}
			
			SELECT cod_lin_prod, cod_lin_recei, cod_seg_merc, cod_cla_uso 
			INTO p_est_trans_area_lin.cod_area_negocio,
					 p_est_trans_area_lin.cod_lin_negocio,
					 p_est_trans_area_lin.cod_seg_merc,
					 p_est_trans_area_lin.cod_cla_uso
			FROM item 
			WHERE cod_empresa = p_cod_empresa
			AND cod_item = p_baixa.cod_item
			
			LET p_est_trans_area_lin.cod_empresa = p_cod_empresa
			LET p_est_trans_area_lin.num_transac = p_trans_nf

			
			INSERT INTO fat_aen_item_nf 	
			  VALUES (p_cod_empresa,
			          p_trans_nf,
			          p_baixa.num_sequencia,
			          p_est_trans_area_lin.cod_area_negocio,
					      p_est_trans_area_lin.cod_lin_negocio,
					      p_est_trans_area_lin.cod_seg_merc,
					      p_est_trans_area_lin.cod_cla_uso)
			
			IF SQLCA.SQLCODE <> 0 THEN 
				CALL log003_err_sql("Inserindo","fat_aen_item_nf")	
				RETURN FALSE 		
			END IF
			IF p_estoque_trans.cod_local_est_orig = p_param.cod_local1 THEN 
				INSERT INTO t_ctrl_trans VALUES 
				(p_cod_empresa,p_num_nff,p_param.ser_nff,p_baixa.cod_item,p_baixa.num_sequencia,p_num_transac)
			END IF
		
		END FOREACH
		
		LET p_movito_trans = p_baixa.qtd_item - p_movito_pen
		IF p_movito_trans = p_baixa.qtd_item THEN
			LET p_tip_reg = "T"
		ELSE
			LET p_tip_reg = "P"
		END IF 
		 
		INSERT INTO rel_item_nf_912	 
			VALUES (p_cod_empresa,p_num_nff,p_param.ser_nff,p_baixa.cod_item,p_baixa.num_sequencia,
			p_baixa.qtd_item,p_movito_pen, p_data,p_movito_trans,p_tip_reg )
		IF SQLCA.SQLCODE <> 0 THEN 
			CALL log003_err_sql("rel_item_nf_912","insert")	
			RETURN FALSE 		
		END IF
		
			DELETE FROM estoque_lote_ender
			WHERE cod_item = p_baixa.cod_item
			AND QTD_SALDO =0
			
			DELETE FROM estoque_lote
			WHERE cod_item = p_baixa.cod_item	
			AND QTD_SALDO =0
	END FOREACH
	
		INSERT INTO rel_item_nf_912
		SELECT a.cod_empresa,a.num_nff,a.ser_nff,
		a.cod_item,a.num_sequencia,b.qtd_movto,0,
		b.dat_movto,b.qtd_movto,'E'
		FROM t_ctrl_trans a, estoque_trans b
		WHERE  a.cod_empresa = p_cod_empresa
		AND a.num_nff = p_num_nff
		AND a.ser_nff =p_param.ser_nff
		AND b.cod_empresa = a.cod_empresa
		AND b.num_transac = a.num_transac
	
		INSERT INTO rel_item_nf_912																				#Insere os item que estão inativos.#
		SELECT A.COD_EMPRESA,A.NUM_NFF, A.SERIE_NOTA_FISCAL,A.COD_ITEM,
		A.NUM_SEQUENCIA, A.QTD_ITEM, A.QTD_ITEM,A.DAT_EMIS_PEDIDO,0,'I'
		FROM WFAT_ITEM_SER A, ITEM B
		WHERE  A.COD_EMPRESA = B.COD_EMPRESA
		AND A.COD_ITEM = B.COD_ITEM
		AND A.COD_EMPRESA = p_cod_empresa
		AND  NUM_NFF = p_num_nff
		AND SERIE_NOTA_FISCAL =p_param.ser_nff
		AND ies_situacao = "I"
	
	RETURN TRUE 
END FUNCTION

#-----------------------------#
REPORT pol0989_imprime(p_erro)#			#vai imprimir os erros apresentados no programa
#-----------------------------#
DEFINE p_erro			CHAR(250)
			

   OUTPUT LEFT   MARGIN   0
          TOP    MARGIN   0
          BOTTOM MARGIN   0
          PAGE   LENGTH  66
	 
   FORMAT
      PAGE HEADER
         PRINT COLUMN 001, p_den_empresa,
               COLUMN 099, "PAG.: ", PAGENO USING "####&"

         PRINT COLUMN 001, "pol0989  CARGA DE NOTAS FISCAIS",
               COLUMN 085, "DATA: ", TODAY USING "dd/mm/yyyy ", TIME
         
         PRINT COLUMN 001, "*-------------------------------------------------------------------------------------------------------------*"
       
         PRINT
         
         PRINT COLUMN 001, "            DESCRIÇÃO DO ERRO"
         PRINT COLUMN 001, "*-------------------------------------------------------------------------------------------------------------*"

      ON EVERY ROW
      	 PRINT COLUMN 001,p_erro CLIPPED
END REPORT

#---------------------------------#
 FUNCTION pol0989_gera_relatorio()#
#---------------------------------#
	DEFINE p_return SMALLINT

	CALL log006_exibe_teclas("01", p_versao)
	CALL log130_procura_caminho("pol09891") RETURNING comando
	OPEN WINDOW w_pol09891 AT 5,3 WITH FORM comando
	ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST)	
	CLEAR FORM
  DISPLAY p_cod_empresa TO cod_empresa	
	
	SELECT den_empresa INTO p_den_empresa
	FROM empresa
	WHERE cod_empresa = p_cod_empresa
	
	CONSTRUCT BY NAME where_clause 	ON	rel_item_nf_912.num_nff,
																			rel_item_nf_912.ser_nff,
																			rel_item_nf_912.dat_emis
	
																	
	IF log028_saida_relat(18,35) IS NOT NULL THEN
		MESSAGE " Processando a Extracao do Relatorio..." 	ATTRIBUTE(REVERSE)
		IF p_ies_impressao = "S" THEN
			IF g_ies_ambiente = "U" THEN
				START REPORT pol0989_relat TO PIPE p_nom_arquivo
			ELSE
				CALL log150_procura_caminho ('LST') RETURNING p_caminho
				LET p_caminho = p_caminho CLIPPED, 'pol0989.tmp'
				START REPORT pol0989_relat  TO p_caminho
			END IF
		ELSE
			START REPORT pol0989_relat TO p_nom_arquivo
		END IF
		IF NOT  pol0989_emite_relatorio()  THEN
			FINISH REPORT pol0989_relat
			LET p_return = FALSE
		ELSE 
			FINISH REPORT pol0989_relat
			LET p_return = TRUE 
		END IF
	END IF 
	
	CLOSE WINDOW w_pol09891 
	CURRENT WINDOW IS w_pol0989				

	IF p_return THEN 
		IF p_ies_impressao = "S" THEN
			MESSAGE "Relatorio Impresso na Impressora ", p_nom_arquivo 	ATTRIBUTE(REVERSE)
			IF g_ies_ambiente = "W" THEN
				LET comando = "lpdos.bat ", p_caminho CLIPPED, " ", p_nom_arquivo
				RUN comando
			END IF
		ELSE
			MESSAGE "Relatorio Gravado no Arquivo ",p_nom_arquivo," " ATTRIBUTE(REVERSE)
		END IF  
	END IF 
	
	RETURN p_return
		
END FUNCTION

#----------------------------------#
 FUNCTION pol0989_emite_relatorio()#
#----------------------------------#
DEFINE 	p_rel_item_nf_912 RECORD 
				cod_empresa 		CHAR(02),
				num_nff 				DECIMAL(6,0),
				ser_nff					CHAR(2),
				cod_item 				CHAR(15),
				num_sequencia 	DECIMAL(5,0),
				qtd_item 				DECIMAL(12,3),
				qtd_item_pen 		DECIMAL(12,3),
				dat_emis 				DATE,
				qtd_item_trans	DECIMAL(12,3),
				tip_reg					CHAR(1),
				den_item 				CHAR(25)
END RECORD 
DEFINE p_count					SMALLINT,
			 sql_stmt1				CHAR(800)
			 

	LET  p_count = 0

	LET sql_stmt1 =    " SELECT rel_item_nf_912.* , ",
										 " ' ' ",
										 " FROM rel_item_nf_912  ",
										 " WHERE ",where_clause CLIPPED,
										 " and cod_empresa = '",p_cod_empresa,"' ",
										 " and tip_reg<>'T' ",
										 " ORDER BY num_nff,tip_reg,num_sequencia"
										
	PREPARE var_quer1 FROM sql_stmt1   
	DECLARE cq_relatorio CURSOR FOR var_quer1
		FOREACH cq_relatorio INTO p_rel_item_nf_912.*
		
		SELECT den_item[1,25]
		INTO p_rel_item_nf_912.den_item
		FROM item 
		WHERE cod_empresa = p_cod_empresa
		AND cod_item = p_rel_item_nf_912.cod_item
		
		
		OUTPUT TO REPORT pol0989_relat(p_rel_item_nf_912.*)
		LET p_count = p_count + 1
	END FOREACH 
	
	IF p_count > 0 THEN 
		RETURN TRUE 
	ELSE
		RETURN FALSE
	END IF 
		
END FUNCTION 

#---------------------------#
 REPORT pol0989_relat(p_rel)#
#---------------------------#

	DEFINE 	p_rel RECORD 
					cod_empresa 		CHAR(02),
					num_nff 				DECIMAL(6,0),
					ser_nff					CHAR(2),
					cod_item 				CHAR(9),
					num_sequencia 	DECIMAL(5,0),
					qtd_item 				DECIMAL(12,3),
					qtd_item_pen 		DECIMAL(12,3),
					dat_emis 				DATE,
					qtd_item_trans	DECIMAL(12,3),
					tip_reg					CHAR(1),
					den_item 				CHAR(25)
	END RECORD
   
   OUTPUT LEFT   MARGIN 0
          TOP    MARGIN 0
          BOTTOM MARGIN 3
   
   FORMAT
          
      PAGE HEADER  								#----------CABEÇALHO DO RELATORIO-------------

         PRINT COLUMN 001, "--------------------------------------------------------------------------------"
         PRINT COLUMN 001, p_den_empresa,
               COLUMN 044, "DATA: ", TODAY USING "DD/MM/YY", ' - ', TIME,
               COLUMN 074, "PAG: ", PAGENO USING "#&"
         PRINT 
         PRINT COLUMN 001, "POL00903              RELATORIO DE ITENS PENDENTES "
         PRINT 	COLUMN 001, "--------------------------------------------------------------------------------"

      BEFORE GROUP OF p_rel.tip_reg			  	#------------GRUPO----------
				PRINT 	COLUMN 001,"NOTA FISCAL: ", p_rel.num_nff USING "######", " SERIE ",p_rel.ser_nff CLIPPED
						CASE 
							WHEN p_rel.tip_reg ="I"
								PRINT COLUMN 001,"ITENS PENDENTES - ITENS INATIVOS "	
							WHEN p_rel.tip_reg ="P"	
								PRINT COLUMN 001,"ITENS PENDENTES - FALTOU ESTOQUE "	
							WHEN p_rel.tip_reg ="E"	
								PRINT COLUMN 001,"ITENS PENDENTES - EMPRESTADO DO SEGUNDO LOCAL DE ESTOQUE "
						END CASE 
        PRINT 	COLUMN 001, "CODIGO",
          			COLUMN 011, "DESCRICAO",
          			COLUMN 037,"QTD.ITEM" ,
          			COLUMN 048,"QTD.TRANS.",
          			COLUMN 059,"QTD.PEND.",
          			COLUMN 070,"DATA" 
          			
         PRINT 	COLUMN 001, "---------",
          			COLUMN 011, "------------------------",
          			COLUMN 037,"----------" ,
          			COLUMN 048,"----------",
          			COLUMN 059,"----------" ,
          			COLUMN 070,"----------"
      AFTER GROUP OF p_rel.num_nff
      	PRINT 
      	PRINT 	COLUMN 001, "--------------------------------------------------------------------------------"
      ON EVERY ROW			#---ITENS DO  GRUPO---
            PRINT COLUMN 001, p_rel.cod_item[1,9] CLIPPED,
	          			COLUMN 011, p_rel.den_item CLIPPED,
	          			COLUMN 037, p_rel.qtd_item USING "##,##&.&&&",
	          			COLUMN 048, p_rel.qtd_item_trans USING "##,##&.&&&",
	          			COLUMN 059, p_rel.qtd_item_pen USING "##,##&.&&&",
	          			COLUMN 070, p_rel.dat_emis
	          			
	    ON LAST ROW
	    		PRINT
					PRINT COLUMN 025, "ULTIMA FOLHA."
         
END REPORT


#--------exclusivo 10,02 (IVo) --- daqui até o fim -----#


#-------------------------------#
FUNCTION pol0989_le_param_fisc()
#-------------------------------#
   
   LET m_msg = NULL
   LET p_sem_tributo = FALSE
   DELETE FROM tributo_tmp
   LET p_ies_tipo = 'S'                   #S-Saida
   LET p_cod_cliente = p_param.cod_cliente

   SELECT b.cod_uni_feder,
          b.cod_cidade   
     INTO p_cod_uni_feder,
          p_cod_cidade    
     FROM clientes a, cidades b
    WHERE a.cod_cliente = p_param.cod_cliente
      AND b.cod_cidade  = a.cod_cidade

   IF STATUS <> 0 THEN
      LET p_cod_status = STATUS
      LET p_msg = 'ERRO ', p_cod_status, 'LENDO TABELAS CLIENTES E CIDADES'
			CALL pol0989_imprime_erros(p_msg)
			LET p_erro = TRUE 
      RETURN FALSE
   END IF
   
   IF NOT pol0989_le_tip_item() THEN
      RETURN FALSE
   END IF
   
   SELECT COUNT(a.tributo_benef)                 #Verifica se tem tribustos 
     INTO p_count                                #cadastrados
     FROM obf_oper_fiscal a, obf_tributo_benef b
    WHERE a.empresa           = p_cod_empresa
      AND a.origem            = p_ies_tipo
      AND a.nat_oper_grp_desp = p_cod_nat_oper
      AND a.tip_Item          IN ('A',p_tip_item) 
      AND b.empresa           = a.empresa 
      AND b.tributo_benef     = a.tributo_benef 
      AND b.ativo             IN ('S','A') 

   IF STATUS <> 0 THEN
      LET p_cod_status = STATUS
      LET p_msg = 'ERRO ', p_cod_status, 'CHECANDO TABELAS OBF_OPER_FISCAL E OBF_TRIBUTO_BENEF'
			CALL pol0989_imprime_erros(p_msg)
			LET p_erro = TRUE 
      RETURN FALSE
   END IF
   
   IF p_count = 0 THEN
      LET p_msg = 'TRIBUTOS FISCAIS NAO ENCONTRADOS P/ NAT. OPER. = ',p_cod_nat_oper,
                  ' ITEM = ', p_cod_item
			CALL pol0989_imprime_erros(p_msg)
			LET p_erro = TRUE 
      RETURN FALSE      
   END IF
   
   LET m_msg = NULL
   
   DECLARE cq_tributos CURSOR FOR                  #Lê os tributos (ICMS/PIS/Etc
    SELECT DISTINCT
           a.tributo_benef
      FROM obf_oper_fiscal a, obf_tributo_benef b
     WHERE a.empresa           = p_cod_empresa
       AND a.origem            = p_ies_tipo
       AND a.nat_oper_grp_desp = p_cod_nat_oper
       AND a.tip_item          IN ('A',p_tip_item) 
       AND b.empresa           = a.empresa 
       AND b.tributo_benef     = a.tributo_benef 
       AND b.ativo             IN ('S','A') 

   FOREACH  cq_tributos INTO
            p_tributo_benef

      IF STATUS <> 0 THEN
         LET p_cod_status = STATUS
         LET p_msg = 'ERRO ', p_cod_status, 'LENDO TABELAS OBF_OPER_FISCAL E OBF_TRIBUTO_BENEF'
			   CALL pol0989_imprime_erros(p_msg)
			   LET p_erro = TRUE 
         RETURN FALSE
      END IF

      LET p_ies_tributo = FALSE
      
      DECLARE cq_acesso CURSOR FOR
       SELECT num_ctr_acesso,
              sequencia_acesso
         FROM obf_ctr_acesso
        WHERE empresa         = p_cod_empresa
          AND controle_acesso = p_tributo_benef
          AND origem          = p_ies_tipo
        ORDER BY num_ctr_acesso DESC
      
      FOREACH cq_acesso INTO p_num_ctr_acesso, p_seq_acesso
      
         LET p_seq_acesso = p_seq_acesso CLIPPED
         
         IF LENGTH(p_seq_acesso) = 0 THEN
            CONTINUE FOREACH
         END IF
         
         CALL pol0989_pega_chave()

         IF NOT pol0989_checa_tributo() THEN
            RETURN FALSE
         END IF
         
         IF p_ies_tributo THEN
            EXIT FOREACH
         END IF
         
      END FOREACH
      
      IF NOT p_ies_tributo THEN
         
         LET p_sem_tributo = TRUE
         EXIT FOREACH
         
      END IF

   END FOREACH
   
   IF p_sem_tributo THEN
      LET p_msg = 'NAO EXISTEM PARAMETROS FISCAIS P/ ',
                  'NAT OPER = ',p_cod_nat_oper,
                  'ITEM = ',p_cod_item
		  CALL pol0989_imprime_erros(p_msg)
 	    LET p_erro = TRUE 
      RETURN FALSE
   END IF
   
   RETURN TRUE
   
END FUNCTION

#----------------------------#
FUNCTION pol0989_le_tip_item()
#----------------------------#

   SELECT parametro_ind
    INTO p_tip_item                       #P-Produto S-Serviço
    FROM vdp_parametro_item 
   WHERE empresa   = p_cod_empresa
     AND item      = p_cod_item
     AND parametro = 'tipo_item'
  
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Lendo','vdp_parametro_item')
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION

#----------------------------#
FUNCTION pol0989_pega_chave()
#----------------------------#

   DEFINE m_ind       SMALLINT,
          p_letra     CHAR(01)
   
   DELETE FROM chave_tmp
   INITIALIZE p_chave TO NULL
   
   FOR m_ind = 2 TO LENGTH(p_seq_acesso)
       
       LET p_letra = p_seq_acesso[m_ind]
       
       IF p_letra = '|' THEN
          IF p_chave IS NOT NULL THEN
             INSERT INTO chave_tmp VALUES(p_chave)
             INITIALIZE p_chave TO NULL
          END IF
       ELSE
          LET p_chave = p_chave CLIPPED, p_letra
       END IF
   
   END FOR
      
END FUNCTION

#-------------------------------#
FUNCTION pol0989_checa_tributo()
#-------------------------------#

   DEFINE p_chave_ok SMALLINT
   
   LET p_chave_ok = FALSE
   LET p_matriz = 'SSSSSSSSSSSSSSSSSSSSSS'

   LET p_query = 
       "SELECT trans_config FROM obf_config_fiscal ",
       " WHERE empresa = '",p_cod_empresa,"' ",
       " AND origem  = '",p_ies_tipo,"' ",
       " AND tributo_benef = '",p_tributo_benef,"' "
       

   DECLARE cq_chave CURSOR FOR
    SELECT chave
      FROM chave_tmp
   
   FOREACH cq_chave INTO p_chave
   
      IF STATUS <> 0 THEN
         CALL log003_err_sql('Lendo','cq_chave')
         RETURN FALSE
      END IF
      
      LET p_chave_ok = TRUE
      
      CASE p_chave
      
      WHEN 'NAT_OPER' 
         LET p_query  = p_query CLIPPED, " AND nat_oper_grp_desp = '",p_cod_nat_oper,"' "
         LET p_matriz[1] = 'N'
      
      WHEN 'REGIAO' 
         IF NOT pol0989_le_obf_regiao() THEN
            RETURN FALSE
         END IF
         LET p_query  = p_query CLIPPED, " AND grp_fiscal_regiao = '",p_regiao_fiscal,"' "
         LET p_matriz[2] = 'N'

      WHEN 'ESTADO'
         LET p_query  = p_query CLIPPED, " AND estado = '",p_cod_uni_feder,"' "
         LET p_matriz[3] = 'N'

      WHEN 'MUNICIPIO' 
         LET p_query  = p_query CLIPPED, " AND municipio = '",p_cod_cidade,"' "
         LET p_matriz[4] = 'N'

      WHEN 'CARTEIRA' 
         LET p_query  = p_query CLIPPED, " AND carteira = '",p_param.cod_tip_carteira,"' "
         LET p_matriz[5] = 'N'

      WHEN 'FINALIDADE' 
         LET p_query  = p_query CLIPPED, " AND finalidade = '",p_param.ies_finalidade,"' "
         LET p_matriz[6] = 'N'

      WHEN 'FAMILIA_IT' 
         LET p_query  = p_query CLIPPED, " AND familia_item = '",p_cod_familia,"' "
         LET p_matriz[7] = 'N'

      WHEN 'GRP_ESTOQUE' 
         LET p_query  = p_query CLIPPED, " AND grupo_estoque = '",p_gru_ctr_estoq,"' "
         LET p_matriz[8] = 'N'

      WHEN 'GRP_CLASSIF' 
         IF NOT pol0989_le_obf_cl_fisc() THEN
            RETURN FALSE
         END IF
         LET p_query  = p_query CLIPPED, " AND grp_fiscal_classif = '",p_grp_classif_fisc,"' "
         LET p_matriz[9] = 'N'

      WHEN 'CLAS_FISC' 
         LET p_query  = p_query CLIPPED, " AND classif_fisc = '",p_cod_cla_fisc,"' "
         LET p_matriz[10] = 'N'

      WHEN 'LIN_PROD' 
         LET p_query  = p_query CLIPPED, " AND linha_produto = '",p_cod_lin_prod,"' "
         LET p_matriz[11] = 'N'

      WHEN 'LIN_REC' 
         LET p_query  = p_query CLIPPED, " AND linha_receita = '",p_cod_lin_recei,"' "
         LET p_matriz[12] = 'N'

      WHEN 'SEGTO_MERC' 
         LET p_query  = p_query CLIPPED, " AND segmto_mercado = '",p_cod_seg_merc,"' "
         LET p_matriz[13] = 'N'

      WHEN 'CLASSE_USO' 
         LET p_query  = p_query CLIPPED, " AND classe_uso = '",p_cod_cla_uso,"' "
         LET p_matriz[14] = 'N'

      WHEN 'UNID_MED' 
         LET p_query  = p_query CLIPPED, " AND unid_medida = '",p_cod_unid_med,"' "
         LET p_matriz[15] = 'N'

      WHEN 'GRP_ITEM' 
         IF NOT pol0989_le_obf_fisc_item() THEN
            RETURN FALSE
         END IF
         LET p_query  = p_query CLIPPED, " AND grupo_fiscal_item = '",p_grp_fiscal_item,"' "
         LET p_matriz[17] = 'N'

      WHEN 'ITEM' 
         LET p_query  = p_query CLIPPED, " AND item = '",p_cod_item,"' "
         LET p_matriz[18] = 'N'

      WHEN 'MICRO_EMPR' 
         LET p_query  = p_query CLIPPED, " AND micro_empresa = '",p_micro_empresa,"' "
         LET p_matriz[19] = 'N'

      WHEN 'GRP_CLIENTE' 
         IF NOT pol0989_le_obf_fisc_cli() THEN
            RETURN FALSE
         END IF
         LET p_query  = p_query CLIPPED, " AND grp_fiscal_cliente = '",p_grp_fisc_cliente,"' "
         LET p_matriz[20] = 'N'

      WHEN 'CLIENTE' 
         LET p_query  = p_query CLIPPED, " AND cliente = '",p_cod_cliente,"' "
         LET p_matriz[21] = 'N'

      WHEN 'X'
      WHEN 'BONIF'
      WHEN 'VIA_TRANSP'
      
      OTHERWISE 
         LET p_chave_ok = FALSE
  
   END CASE
   
   END FOREACH

   IF p_chave_ok THEN

      LET p_query  = p_query CLIPPED, 
          " AND (matriz = '",p_matriz,"' OR matriz IS NULL) "
   
      PREPARE var_query FROM p_query   
      DECLARE cq_obf_cfg CURSOR FOR var_query

      FOREACH cq_obf_cfg INTO p_trans_config

         IF STATUS <> 0 THEN 
            CALL log003_err_sql('Lendo','cq_obf_cfg')
            RETURN FALSE
         END IF
         
         INSERT INTO tributo_tmp
          VALUES(p_tributo_benef, p_trans_config)

         IF STATUS <> 0 THEN 
            CALL log003_err_sql('inserindo','tributo_tmp')
            RETURN FALSE
         END IF
          
         LET p_ies_tributo = TRUE
         
         EXIT FOREACH
      
   
      END FOREACH
   
   END IF
   
   RETURN TRUE

END FUNCTION

#-------------------------------#
FUNCTION pol0989_le_obf_regiao()
#-------------------------------#

   SELECT regiao_fiscal
     INTO p_regiao_fiscal
     FROM obf_regiao_fiscal
    WHERE empresa       = p_cod_empresa
      AND tributo_benef = p_tributo_benef
      AND municipio     = p_cod_cidade
   
   IF STATUS = 100 THEN
      SELECT regiao_fiscal
        INTO p_regiao_fiscal
        FROM obf_regiao_fiscal
       WHERE empresa       = p_cod_empresa
         AND tributo_benef = p_tributo_benef
         AND estado        = p_cod_uni_feder
      
      IF STATUS = 100 THEN
         LET p_regiao_fiscal = NULL
      END IF
   END IF
   
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Lendo', 'obf_regiao_fiscal')
      RETURN FALSE
   END IF
   
   RETURN TRUE
         
END FUNCTION

#-------------------------------#
FUNCTION pol0989_le_obf_cl_fisc()
#-------------------------------#

   SELECT grupo_classif_fisc
     INTO p_grp_classif_fisc
     FROM obf_grp_cl_fisc
    WHERE empresa       = p_cod_empresa
      AND tributo_benef = p_tributo_benef
      AND classif_fisc  = p_cod_cla_fisc
   
   IF STATUS = 100 THEN
      LET p_grp_classif_fisc = NULL
   ELSE
      IF STATUS <> 0 THEN
         CALL log003_err_sql('Lendo', 'obf_regiao_fiscal')
         RETURN FALSE
      END IF
   END IF
   
   RETURN TRUE
         
END FUNCTION

#---------------------------------#
FUNCTION pol0989_le_obf_fisc_item()
#---------------------------------#

   SELECT grupo_fiscal_item
     INTO p_grp_fiscal_item
     FROM obf_grp_fisc_item
    WHERE empresa       = p_cod_empresa
      AND tributo_benef = p_tributo_benef
      AND item          = p_cod_item
   
   IF STATUS = 100 THEN
      LET p_grp_fiscal_item = NULL
   ELSE
      IF STATUS <> 0 THEN
         CALL log003_err_sql('Lendo', 'obf_grp_fisc_item')
         RETURN FALSE
      END IF
   END IF
   
   RETURN TRUE
         
END FUNCTION

#---------------------------------#
FUNCTION pol0989_le_obf_fisc_cli()
#---------------------------------#

   SELECT grp_fiscal_cliente
     INTO p_grp_fisc_cliente
     FROM obf_grp_fisc_cli
    WHERE empresa       = p_cod_empresa
      AND tributo_benef = p_tributo_benef
      AND cliente       = p_cod_cliente
   
   IF STATUS = 100 THEN
      LET p_grp_fisc_cliente = NULL
   ELSE
      IF STATUS <> 0 THEN
         CALL log003_err_sql('Lendo', 'obf_grp_fisc_cli')
         RETURN FALSE
      END IF
   END IF
   
   RETURN TRUE
         
END FUNCTION

#-------------------------#
FUNCTION pol0989_le_item()
#-------------------------#

   SELECT cod_lin_prod,                                         
          cod_lin_recei,                                     
          cod_seg_merc,                                      
          cod_cla_uso,                                       
          cod_familia,                                       
          gru_ctr_estoq,                                     
          cod_cla_fisc,                                      
          cod_unid_med,
          pes_unit,
          fat_conver                                      
     INTO p_cod_lin_prod,                                    
          p_cod_lin_recei,                                   
          p_cod_seg_merc,                                    
          p_cod_cla_uso,                                     
          p_cod_familia,                                     
          p_gru_ctr_estoq,                                   
          p_cod_cla_fisc,                                    
          p_cod_unid_med,
          p_pes_unit,
          p_fat_conver                          
     FROM item                                               
    WHERE cod_empresa  = p_cod_empresa                       
      AND cod_item     = p_cod_item          

   IF STATUS <> 0 THEN
      ERROR 'Item; ',p_cod_item
      CALL log003_err_sql('Lendo','item')
      RETURN FALSE
   END IF

END FUNCTION


#-----------------------#
FUNCTION pol0989_le_me()
#-----------------------#

   SELECT tip_parametro
     INTO p_micro_empresa
     FROM vdp_cli_parametro
    WHERE cliente   = p_cod_cliente 
      AND parametro = 'microempresa'
         
   IF STATUS <> 0 THEN
      CALL log003_err_sql('Lendo','vdp_cli_parametro')
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION


#---------------------------------#
FUNCTION pol0989_carrega_fat_item()
#---------------------------------#

   MESSAGE 'Gravando fat_nf_item!'
   
   INITIALIZE p_fat_item TO NULL
   
   IF NOT pol0989_le_item() THEN
      RETURN FALSE
   END IF

   IF NOT pol0989_le_tip_item() THEN
      RETURN FALSE
   END IF
   
   LET p_num_seq = p_num_seq + 1
   
   LET p_fat_item.empresa              = p_cod_empresa             
   LET p_fat_item.trans_nota_fiscal    = p_trans_nf              
   LET p_fat_item.seq_item_nf          = p_wfat_item_ser.num_sequencia               
   LET p_fat_item.pedido               = p_wfat_item_ser.num_pedido                           
   LET p_fat_item.seq_item_pedido      = 0            
   LET p_fat_item.ord_montag           = p_wfat_item_ser.num_om                            
   LET p_fat_item.tip_item             = 'N'                          
   LET p_fat_item.item                 = p_wfat_item_ser.cod_item  
   LET p_fat_item.des_item             = p_wfat_item_ser.den_item  
   LET p_fat_item.unid_medida          = p_wfat_item_ser.cod_unid_med  
   LET p_fat_item.peso_unit            = p_wfat_item_ser.pes_unit  
   LET p_fat_item.qtd_item             = p_wfat_item_ser.qtd_item  
   LET p_fat_item.fator_conv           = p_wfat_item_ser.fat_conver  
   LET p_fat_item.tip_preco            = 'F'                          
   LET p_fat_item.natureza_operacao    = p_cod_nat_oper            
   LET p_fat_item.classif_fisc         = p_wfat_item_ser.cod_cla_fisc            
   LET p_fat_item.item_prod_servico    = p_tip_item        
   LET p_fat_item.preco_unit_bruto     = p_preco_uni_nf 
   LET p_fat_item.pre_uni_desc_incnd   = p_preco_uni_nf 
   LET p_fat_item.preco_unit_liquido   = p_preco_uni_nf 
   LET p_fat_item.pct_frete            = 0   
   LET p_fat_item.val_desc_item        = p_wfat_item_ser.val_desc_adicional  
   LET p_fat_item.val_desc_merc        = 0   
   LET p_fat_item.val_desc_contab      = 0   
   LET p_fat_item.val_desc_duplicata   = 0   
   LET p_fat_item.val_acresc_item      = 0   
   LET p_fat_item.val_acre_merc        = 0   
   LET p_fat_item.val_acresc_contab    = 0   
   LET p_fat_item.val_acre_duplicata   = 0     
   LET p_fat_item.val_fret_consig      = 0   
   LET p_fat_item.val_segr_consig      = 0   
   LET p_fat_item.val_frete_cliente    = 0   
   LET p_fat_item.val_seguro_cliente   = 0   
   LET p_fat_item.val_bruto_item       = p_arquivo.total_val_item  
   LET p_fat_item.val_brt_desc_incnd   = p_arquivo.total_val_item    
   LET p_fat_item.val_liquido_item     = p_val_base_trib    
   LET p_fat_item.val_merc_item        = p_arquivo.total_val_item    
   LET p_fat_item.val_duplicata_item   = p_arquivo.total_val_item   
   LET p_fat_item.val_contab_item      = p_arquivo.total_val_item    

   LET p_tot_peso = p_tot_peso + (p_wfat_item_ser.pes_unit * p_wfat_item_ser.qtd_item)

END FUNCTION

#-----------------------------#
FUNCTION pol0989_ins_tributo()
#-----------------------------#

   SELECT trans_config
     INTO p_trans_config
     FROM tributo_tmp
    WHERE tributo_benef = 'IPI'

   IF STATUS <> 0 THEN
      LET p_val_base_trib = p_arquivo.total_val_item 
   ELSE
      SELECT aliquota
        INTO p_aliquota
        FROM obf_config_fiscal
       WHERE cod_empresa  = p_cod_empresa
         AND trans_config = p_trans_config
         
      IF STATUS <> 0 THEN
         LET p_val_base_trib = p_arquivo.total_val_item 
    	ELSE
    		 LET p_val_base_trib = p_arquivo.total_val_item / (1+(aliquota / 100))	
      END IF
   END IF
   
	 LET p_preco_uni_nf = p_val_base_trib / p_arquivo.qtd_item 	
		
   DECLARE cq_trib_tmp CURSOR FOR
    SELECT tributo_benef,
           trans_config
      FROM tributo_tmp

   FOREACH cq_trib_tmp INTO p_tributo_benef, p_trans_config

      IF STATUS <> 0 THEN
         LET p_cod_status = STATUS
         LET p_msg = 'ERRO ', p_cod_status, 'LENDO TABELA TEMPORARIA TRIBUTO_TMP'
		     CALL pol0989_imprime_erros(p_msg)
			   LET p_erro = TRUE 
         RETURN FALSE
      END IF
      
      IF NOT pol0989_le_obf_config() THEN
         RETURN FALSE
      END IF

      LET p_val_base_trib = p_val_base_trib - (p_val_base_trib * (p_pct_reduz_icm/100))
      LET p_val_tribruto = p_val_base_trib * (p_aliquota / 100)

      IF NOT pol0989_ins_fisc() THEN
         RETURN FALSE
      END IF
     
   END FOREACH
   
   RETURN TRUE
   
END FUNCTION

#--------------------------#
FUNCTION pol0989_ins_fisc()
#--------------------------#

   LET p_item_fisc.empresa              = p_cod_empresa   
   LET p_item_fisc.trans_nota_fiscal    = p_trans_nf      
   LET p_item_fisc.seq_item_nf          = p_wfat_item_ser.num_sequencia           
   LET p_item_fisc.incide               = p_cod_incide        
   LET p_item_fisc.aliquota             = p_aliquota      
   LET p_item_fisc.tributo_benef        = p_tributo_benef 
   LET p_item_fisc.trans_config         = p_trans_config  
   LET p_item_fisc.bc_trib_mercadoria   = p_val_base_trib                   
   LET p_item_fisc.bc_tributo_frete     = 0                               
   LET p_item_fisc.bc_trib_calculado    = 0                            
   LET p_item_fisc.bc_tributo_tot       = p_val_base_trib                   
   LET p_item_fisc.val_trib_merc        = p_val_tribruto
   LET p_item_fisc.val_tributo_frete    = 0                               
   LET p_item_fisc.val_trib_calculado   = 0                            
   LET p_item_fisc.val_tributo_tot      = p_val_base_trib 
   LET p_item_fisc.cod_fiscal           = p_cod_fiscal
      
   INSERT INTO fat_nf_item_fisc
      VALUES(p_item_fisc.*)
      
   IF STATUS <> 0 THEN
      LET p_cod_status = STATUS
      LET p_msg = 'ERRO ', p_cod_status, 'INSERINDO TRIBUTOS DA TABELA FAT_NF_ITEM_FISC'
      CALL pol0989_imprime_erros(p_msg)
	    LET p_erro = TRUE 
      RETURN FALSE
   END IF

   RETURN TRUE

END FUNCTION


#-------------------------------#
FUNCTION pol0989_le_obf_config()
#-------------------------------#

   SELECT incide,                      
          aliquota, 
          acresc_desc,              
          aplicacao_val,               
          origem_produto,              
          hist_fiscal,                 
          sit_tributo,                 
          inscricao_estadual,          
          dipam_b,                     
          retencao_cre_vdp,            
          motivo_retencao,             
          val_unit,                    
          pre_uni_mercadoria,          
          pct_aplicacao_base,          
          pct_acre_bas_calc,  
          pct_red_bas_calc,         
          pct_diferido_base,           
          pct_diferido_val,            
          pct_acresc_val,              
          pct_reducao_val,             
          pct_margem_lucro,            
          pct_acre_marg_lucr,          
          pct_red_marg_lucro,          
          taxa_reducao_pct,            
          taxa_acresc_pct
     INTO p_cod_incide,                    
          p_aliquota,
          p_item_fisc.acresc_desc,               
          p_item_fisc.aplicacao_val,             
          p_item_fisc.origem_produto,            
          p_item_fisc.hist_fiscal,               
          p_item_fisc.sit_tributo,               
          p_item_fisc.inscricao_estadual,        
          p_item_fisc.dipam_b,                   
          p_item_fisc.retencao_cre_vdp,          
          p_item_fisc.motivo_retencao,           
          p_item_fisc.val_unit,                  
          p_item_fisc.pre_uni_mercadoria,        
          p_item_fisc.pct_aplicacao_base,        
          p_item_fisc.pct_acre_bas_calc, 
          p_item_fisc.pct_red_bas_calc,        
          p_item_fisc.pct_diferido_base,         
          p_item_fisc.pct_diferido_val,          
          p_item_fisc.pct_acresc_val,            
          p_item_fisc.pct_reducao_val,           
          p_item_fisc.pct_margem_lucro,          
          p_item_fisc.pct_acre_marg_lucr,        
          p_item_fisc.pct_red_marg_lucro,        
          p_item_fisc.taxa_reducao_pct,          
          p_item_fisc.taxa_acresc_pct            
     FROM obf_config_fiscal
    WHERE empresa      = p_cod_empresa
      AND trans_config = p_trans_config                             

   IF STATUS <> 0 THEN
      LET p_cod_status = STATUS
      LET p_msg = 'ERRO ', p_cod_status, 'LENDO TRIBUTOS DA TABELA OBF_CONFIG_FISCAL'
      CALL pol0989_imprime_erros(p_msg)
	    LET p_erro = TRUE 
      RETURN FALSE
   END IF

   LET p_pct_reduz_icm = p_item_fisc.pct_red_bas_calc
   
   IF p_pct_reduz_icm IS NULL THEN
      LET p_pct_reduz_icm = 0
   END IF

   IF p_aliquota IS NULL THEN
      LET p_aliquota = 0
   END IF       		     
   
   RETURN TRUE
   
END FUNCTION

#---------------------------#
FUNCTION pol0989_ins_mestre()
#---------------------------#

   MESSAGE 'Gravando fat_nf_mestre!'
   
   LET c_data = p_data #, CURRENT HOUR TO SECOND
   
   INITIALIZE p_fat_mestre TO NULL
   LET p_num_nff = p_num_nff + 1
   
   LET p_fat_mestre.empresa            =  p_cod_empresa            
   LET p_fat_mestre.trans_nota_fiscal  =  0                        
   LET p_fat_mestre.tip_nota_fiscal    =  p_tip_docum             
   LET p_fat_mestre.serie_nota_fiscal  =  p_ser                    
   LET p_fat_mestre.subserie_nf        =  p_ssr                    
   LET p_fat_mestre.espc_nota_fiscal   =  p_esp                    
   LET p_fat_mestre.nota_fiscal        =  p_num_nff              
   LET p_fat_mestre.status_nota_fiscal =  'S'                      
   LET p_fat_mestre.modelo_nota_fiscal =  '1'                      
   LET p_fat_mestre.origem_nota_fiscal =  'M'                      
   LET p_fat_mestre.tip_processamento  =  'A'                      
   LET p_fat_mestre.sit_nota_fiscal    =  'N'                      
   LET p_fat_mestre.cliente            =  p_param.cod_cliente            
   LET p_fat_mestre.remetent           =  ' '                      
   LET p_fat_mestre.zona_franca        =  'N'                      
   LET p_fat_mestre.natureza_operacao  =  p_param.cod_nat_oper           
   LET p_fat_mestre.finalidade         =  p_param.ies_finalidade         
   LET p_fat_mestre.cond_pagto         =  p_param.cod_cnd_pgto           
   LET p_fat_mestre.tip_carteira       =  p_param.cod_tip_carteira       
   LET p_fat_mestre.ind_despesa_financ =  1                        
   LET p_fat_mestre.moeda              =  p_param.cod_moeda                        
   LET p_fat_mestre.plano_venda        =  'N'                      
   LET p_fat_mestre.tip_frete          =  3 
   LET p_fat_mestre.via_transporte     =  1                      
   LET p_fat_mestre.peso_liquido       =  0                        
   LET p_fat_mestre.peso_bruto         =  0                        
   LET p_fat_mestre.peso_tara          =  0                        
   LET p_fat_mestre.num_prim_volume    =  0                        
   LET p_fat_mestre.volume_cubico      =  0                        
   LET p_fat_mestre.usu_incl_nf        =  p_user                   
   LET p_fat_mestre.dat_hor_emissao    =  c_data                  
   LET p_fat_mestre.sit_impressao      =  'N'                      
   LET p_fat_mestre.val_frete_rodov    =  0                        
   LET p_fat_mestre.val_seguro_rodov   =  0                        
   LET p_fat_mestre.val_fret_consig    =  0                        
   LET p_fat_mestre.val_segr_consig    =  0                        
   LET p_fat_mestre.val_frete_cliente  =  0                        
   LET p_fat_mestre.val_seguro_cliente =  0                        
   LET p_fat_mestre.val_desc_merc      =  0                        
   LET p_fat_mestre.val_desc_nf        =  0                        
   LET p_fat_mestre.val_desc_duplicata =  0                        
   LET p_fat_mestre.val_acre_merc      =  0                        
   LET p_fat_mestre.val_acre_nf        =  0                        
   LET p_fat_mestre.val_acre_duplicata =  0                        
   LET p_fat_mestre.val_mercadoria     =  0                        
   LET p_fat_mestre.val_duplicata      =  0                        
   LET p_fat_mestre.val_nota_fiscal    =  0                        
   LET p_fat_mestre.tip_venda          =  1                        
                                                                   
   INSERT INTO fat_nf_mestre VALUES (p_fat_mestre.*)
   
   IF STATUS <> 0 THEN
      CALL log003_err_sql('iNSERINDO','FAT_NF_MESTRE')
      RETURN FALSE
   END IF
   
   LET p_trans_nf = SQLCA.SQLERRD[2]
   
   RETURN TRUE
   
END FUNCTION


#-----------------------------#
FUNCTION pol0989_mestre_fisc()
#-----------------------------#

   MESSAGE 'Gravando fat_mestre_fiscal!'
   
   INITIALIZE p_mest_fisc TO NULL

   LET p_mest_fisc.empresa            = p_cod_empresa  
   LET p_mest_fisc.trans_nota_fiscal  = p_trans_nf

   DECLARE cq_sum CURSOR FOR
    SELECT tributo_benef,
           SUM(bc_trib_mercadoria),
           SUM(bc_tributo_tot),
           SUM(val_trib_merc),
           SUM(val_tributo_tot)
      FROM fat_nf_item_fisc
     WHERE empresa = p_cod_empresa
       AND trans_nota_fiscal = p_trans_nf
     GROUP BY tributo_benef

   FOREACH cq_sum INTO 
           p_mest_fisc.tributo_benef,
           p_mest_fisc.bc_trib_mercadoria,
           p_mest_fisc.bc_tributo_tot,
           p_mest_fisc.val_trib_merc,
           p_mest_fisc.val_tributo_tot
          
      IF STATUS <> 0 THEN
         CALL log003_err_sql('Lendo','fat_nf_item_fisc')
         RETURN FALSE
      END IF

      LET p_mest_fisc.bc_tributo_frete   = 0
      LET p_mest_fisc.bc_trib_calculado  = 0
      LET p_mest_fisc.val_tributo_frete  = 0
      LET p_mest_fisc.val_trib_calculado = 0

      INSERT INTO fat_mestre_fiscal
       VALUES(p_mest_fisc.*)
    
      IF STATUS <> 0 THEN
         LET p_cod_status = STATUS
         LET p_msg = 'ERRO ', p_cod_status, 'INSERINDO DADOS DA TABELA FAT_MESTRE_FISCAL'
         CALL pol0989_imprime_erros(p_msg)
	       LET p_erro = TRUE 
         RETURN FALSE
      END IF
   
   END FOREACH
    
   RETURN TRUE

END FUNCTION

#--------------------------------#
FUNCTION pol0989_atu_fat_mestre()
#--------------------------------#
          
   MESSAGE 'Atualizando fat_nf_mestre!'

	SELECT SUM(peso_unit * qtd_item), 
	       SUM(val_bruto_item),
	       SUM(val_liquido_item)
    INTO p_tot_peso,
         p_val_liqui,
         p_val_bruto
    FROM fat_nf_item
    WHERE empresa           = p_cod_empresa
      AND trans_nota_fiscal = p_trans_nf

   IF STATUS <> 0 THEN
      CALL log003_err_sql('Lendo','fat_nf_item:sum')
      RETURN FALSE
   END IF
    
   UPDATE fat_nf_mestre
      SET peso_bruto      = p_tot_peso,
          peso_liquido    = p_tot_peso,
          val_mercadoria  = p_val_liqui,
          val_duplicata   = p_val_bruto,
          val_nota_fiscal = p_val_bruto
    WHERE empresa = p_cod_empresa
      AND trans_nota_fiscal = p_trans_nf

   IF STATUS <> 0 THEN
      LET p_cod_status = STATUS
      LET p_msg = 'ERRO ', p_cod_status, 'INSERINDO DADOS DA TABELA FAT_MESTRE_FISCAL'
      CALL pol0989_imprime_erros(p_msg)
     LET p_erro = TRUE 
      RETURN FALSE
   END IF
    
   RETURN TRUE

END FUNCTION

