###PARSER-Não remover esta linha(Framework Logix)###
#-----------------------------------------------------------------#
# SISTEMA.: SUPPRIMENTOS                                          #
# PROGRAMA: SUP0552                                               #
# OBJETIVO: IMPORTACAO NFS/FRETES (ARQUIVO-TEXTO)                 #
# AUTOR...: ANDERSON QUANDT VENANCIO                              #
# DATA....: 29.08.2001                                            #
#-----------------------------------------------------------------#
DATABASE logix

GLOBALS

  DEFINE p_cod_empresa            LIKE empresa.cod_empresa,
         p_user                   LIKE usuario.nom_usuario,
         p_status                 SMALLINT,
         comando                  CHAR(80),
         comando2                 CHAR(200),
         p_cancel                 INTEGER,
         p_caminho                CHAR(100)

  DEFINE p_ies_impressao          CHAR(001),
         g_ies_ambiente           CHAR(001),
         p_nom_arquivo            CHAR(100),
         p_nom_arquivo_back       CHAR(100)

  DEFINE gr_par_sup               RECORD LIKE par_sup.*,
         gr_par_sup_compl         RECORD LIKE par_sup_compl.*,
         gr_par_estoque           RECORD LIKE par_estoque.*,
         gr_par_con               RECORD LIKE par_con.*,
         g_orig_uf_frt_nf_i       CHAR(01),
         g_ies_tip_controle       LIKE nat_operacao.ies_tip_controle #-- OS 544109

  DEFINE g_ies_grafico            SMALLINT

  DEFINE p_versao                 CHAR(18) #Favor Nao Alterar esta linha (SUPORTE)

  DEFINE ga_array_marcadas        ARRAY[999] OF RECORD
                                    num_prog_entrega LIKE prog_ordem_sup.num_prog_entrega,
                                    qtd_reservada    LIKE prog_ordem_sup.qtd_recebida,
                                    qtd_solic        LIKE prog_ordem_sup.qtd_solic,
                                    val_reservado    LIKE prog_ordem_sup_com.val_receb,
                                    val_solic        LIKE prog_ordem_sup_com.val_solic
                                  END RECORD

  DEFINE ga_array_ordens          ARRAY[999] OF RECORD
                                    num_pedido       LIKE ordem_sup.num_pedido,
                                    num_oc           LIKE prog_ordem_sup.num_oc,
                                    num_prog_entrega LIKE prog_ordem_sup.num_prog_entrega,
                                    cod_unid_med     LIKE ordem_sup.cod_unid_med,
                                    dat_entrega_prev LIKE prog_ordem_sup.dat_entrega_prev,
                                    qtd_saldo        LIKE prog_ordem_sup.qtd_recebida,
                                    qtd_solic        LIKE prog_ordem_sup.qtd_solic,
                                    val_saldo        LIKE prog_ordem_sup_com.val_receb,
                                    val_solic        LIKE prog_ordem_sup_com.val_solic
                                  END RECORD

  DEFINE ga_array_ordens2         ARRAY[999] OF RECORD
                                    ies_liquida_oc LIKE ordem_sup.ies_liquida_oc,
                                    qtd_solic      LIKE prog_ordem_sup.qtd_solic,
                                    val_solic      LIKE prog_ordem_sup_com.val_solic
                                  END RECORD

  DEFINE ga_array_ordens_aux      ARRAY[999] OF RECORD
                                    num_pedido       LIKE ordem_sup.num_pedido,
                                    num_oc           LIKE prog_ordem_sup.num_oc,
                                    num_prog_entrega LIKE prog_ordem_sup.num_prog_entrega,
                                    cod_unid_med     LIKE ordem_sup.cod_unid_med,
                                    dat_entrega_prev LIKE prog_ordem_sup.dat_entrega_prev,
                                    qtd_saldo        LIKE prog_ordem_sup.qtd_recebida,
                                    qtd_reservada    LIKE prog_ordem_sup.qtd_recebida
                                  END RECORD

  DEFINE p_calcula_diferen        SMALLINT,
         p_ies_contab_aen         LIKE par_con.ies_contab_aen,
         p_val_div_maior_frt      DECIMAL(17,3),
         p_val_div_menor_frt      DECIMAL(17,3),
         p_par_sup                RECORD LIKE par_sup.*,
         p_par_sup_compl          RECORD LIKE par_sup_compl.*,
         p_par_sup_compl_1        RECORD LIKE par_sup_compl_1.*,
         p_frete_sup              RECORD LIKE frete_sup.*,
         g_ies_ped_icms           CHAR(01)

END GLOBALS

#MODULARES
  DEFINE m_den_empresa            LIKE empresa.den_empresa,
         m_versao_texto           SMALLINT,
         m_status                 SMALLINT,
         m_comando3               CHAR(200),
         m_msg_erro               CHAR(59)

  DEFINE m_consulta_ativa         SMALLINT,
         m_ies_cont_insp_aut      CHAR(01),
         m_ies_grava_erro_4       CHAR(01),
         m_ies_busca_loclib       CHAR(01),
         m_relac_unica_nff        CHAR(01),
         m_uf_trans_nfdr          LIKE par_sup_pad.par_ies,
         m_empr_utiliz_mp66       LIKE par_sup_pad.par_ies,
         m_controla_gao           CHAR(01),
         m_pct_bc_pis             LIKE sup_pct_bc_imposto.pct_bas_calc,
         m_cod_grp_despesa        LIKE grupo_ctr_desp.gru_ctr_desp,
         m_ies_grupo_desp_item    CHAR(01),
         m_uf_igual_vendas        CHAR(01),
         m_grp_desp_st_remet      LIKE frete_sup.gru_ctr_desp_frete,
         m_cred_st_faturam_it_compra_revd CHAR(01),
         m_confirm_compex_ciap     CHAR(01),
         m_confirm_compex_mp       CHAR(01),
         m_solicitou_mp            SMALLINT,
         m_solicitou_ciap          SMALLINT,
         m_nf_deposit              CHAR(01), # IMP-WMS
         m_valida_nf_frete_filiais CHAR(01)

 #CH786325
  DEFINE m_lista_classif_descr_fornecedor   CHAR(01),
         m_lista_classif_quebra_comprador   CHAR(01)

  DEFINE sql_stmt                 CHAR(2000),
         where_clause             CHAR(400),
         m_mantem_cfop_frt        CHAR(01)

  DEFINE m_comando                CHAR(200)

  DEFINE m_caminho                CHAR(300)

  DEFINE mr_consistencia          RECORD
                                    nota_fiscal       DECIMAL(7,0),
                                    serie_nota_fiscal CHAR(03),
                                    subserie_nf       DECIMAL(2,0),
                                    espc_nota_fiscal  CHAR(03),
                                    fornecedor        CHAR(15),
                                    sequencia         DECIMAL(3,0),
                                    txt_consistencia  CHAR(59),
                                    arquivo           CHAR(100),
                                    comprador         CHAR(08) #CH786325
                                  END RECORD

  DEFINE ma_array_consistencias   ARRAY[999] OF RECORD
                                    nota_fiscal       DECIMAL(7,0),
                                    serie_nota_fiscal CHAR(03),
                                    subserie_nf       DECIMAL(2,0),
                                    espc_nota_fiscal  CHAR(03),
                                    fornecedor        CHAR(15),
                                    sequencia         DECIMAL(3,0),
                                    txt_consistencia  CHAR(59),
                                    arquivo           CHAR(100)
                                  END RECORD

  DEFINE mr_importados            RECORD
                                    tipo_registro     CHAR(1),
                                    nota_fiscal       DECIMAL(7,0),
                                    serie_nota_fiscal CHAR(03),
                                    subserie_nf       DECIMAL(2,0),
                                    espc_nota_fiscal  CHAR(03),
                                    fornecedor        CHAR(15),
                                    num_nff_relac     DECIMAL(6,0),
                                    arquivo           CHAR(100)
                                  END RECORD

  DEFINE mr_w_sup0552_4           RECORD
                                    tipo_registro      CHAR(01),
                                    empresa            CHAR(02),
                                    empresa_estabel    CHAR(02),
                                    nota_fiscal        DECIMAL(7,0),
                                    serie_nota_fiscal  CHAR(03),
                                    subserie_nf        DECIMAL(2,0),
                                    espc_nota_fiscal   CHAR(03),
                                    fornecedor         CHAR(15),
                                    dat_emis_nf        DATE,
                                    dat_ent_nf         DATE,
                                    cond_pagto         DECIMAL(3,0),
                                    modo_embarque      DECIMAL(2,0),
                                    tip_nota_fiscal    CHAR(01),
                                    num_conhec_frete   DECIMAL(7,0),
                                    serie_conhec_frete CHAR(03),
                                    subserie_conh_fret DECIMAL(2,0),
                                    transportador      CHAR(15),
                                    val_tot_decl_nf    DECIMAL(17,2),
                                    val_tot_decl_icms  DECIMAL(17,2),
                                    val_tot_decl_ipi   DECIMAL(17,2),
                                    cfop               CHAR(05),
                                    cfop_compl         INTEGER,
                                    processado         CHAR(01),
                                    sequencia          SMALLINT,
                                    pedido             DECIMAL(6,0),
                                    ordem_compra       DECIMAL(9,0),
                                    item               CHAR(15),
                                    pre_unit_nf        DECIMAL(17,6),
                                    qtd_decl_nf        DECIMAL(15,3),
                                    pct_ipi            DECIMAL(6,3),
                                    bas_calc_ipi       DECIMAL(17,2),
                                    val_ipi            DECIMAL(17,2),
                                    pct_icms           DECIMAL(6,3),
                                    bas_calc_icms      DECIMAL(17,2),
                                    val_icms           DECIMAL(17,2),
                                    val_frete          DECIMAL(17,2),
                                    pct_icms_frete     DECIMAL(6,3),
                                    bc_icms_frete      DECIMAL(17,2),
                                    val_icms_frete     DECIMAL(17,2),
                                    compl_nota1        CHAR(120),
                                    compl_nota2        CHAR(120),
                                    desc_nota          DECIMAL(17,2),
                                    insc_estad         CHAR(16),
                                    seq_insc_estad     SMALLINT,
                                    val_inss           DECIMAL(17,2),
                                    val_inss_funrural  DECIMAL(17,2),
                                    seq_tabulacao      INTEGER,
                                    grade_1            CHAR(15),
                                    grade_2            CHAR(15),
                                    grade_3            CHAR(15),
                                    grade_4            CHAR(15),
                                    grade_5            CHAR(15),
                                    num_peca           CHAR(15),
                                    serie_peca         CHAR(15),
                                    comprimento        DECIMAL(15,3),
                                    largura            DECIMAL(15,3),
                                    altura             DECIMAL(15,3),
                                    diametro           DECIMAL(15,3),
                                    local_estoq        CHAR(10),
                                    num_lote           CHAR(15)
                                  END RECORD

  DEFINE mr_w_sup0552_4_it        RECORD
                                    tipo_registro      CHAR(01),
                                    empresa            CHAR(02),
                                    empresa_estabel    CHAR(02),
                                    nota_fiscal        DECIMAL(7,0),
                                    serie_nota_fiscal  CHAR(03),
                                    subserie_nf        DECIMAL(2,0),
                                    espc_nota_fiscal   CHAR(03),
                                    fornecedor         CHAR(15),
                                    dat_emis_nf        DATE,
                                    dat_ent_nf         DATE,
                                    cond_pagto         DECIMAL(3,0),
                                    modo_embarque      DECIMAL(2,0),
                                    tip_nota_fiscal    CHAR(01),
                                    num_conhec_frete   DECIMAL(7,0),
                                    serie_conhec_frete CHAR(03),
                                    subserie_conh_fret DECIMAL(2,0),
                                    transportador      CHAR(15),
                                    val_tot_decl_nf    DECIMAL(17,2),
                                    val_tot_decl_icms  DECIMAL(17,2),
                                    val_tot_decl_ipi   DECIMAL(17,2),
                                    cfop               CHAR(05),
                                    cfop_compl         INTEGER,
                                    processado         CHAR(01),
                                    sequencia          SMALLINT,
                                    pedido             DECIMAL(6,0),
                                    ordem_compra       DECIMAL(9,0),
                                    item               CHAR(15),
                                    pre_unit_nf        DECIMAL(17,6),
                                    qtd_decl_nf        DECIMAL(15,3),
                                    pct_ipi            DECIMAL(6,3),
                                    bas_calc_ipi       DECIMAL(17,2),
                                    val_ipi            DECIMAL(17,2),
                                    pct_icms           DECIMAL(6,3),
                                    bas_calc_icms      DECIMAL(17,2),
                                    val_icms           DECIMAL(17,2),
                                    val_frete          DECIMAL(17,2),
                                    pct_icms_frete     DECIMAL(6,3),
                                    bc_icms_frete      DECIMAL(17,2),
                                    val_icms_frete     DECIMAL(17,2),
                                    compl_nota1        CHAR(120),
                                    compl_nota2        CHAR(120),
                                    desc_nota          DECIMAL(17,2),
                                    insc_estad         CHAR(16),
                                    seq_insc_estad     SMALLINT,
                                    val_inss           DECIMAL(17,2),
                                    val_inss_funrural  DECIMAL(17,2)
                                  END RECORD

  DEFINE mr_w_sup0552_4_rat       RECORD
                                    tipo_registro      CHAR(01),
                                    empresa            CHAR(02),
                                    empresa_estabel    CHAR(02),
                                    nota_fiscal        DECIMAL(7,0),
                                    serie_nota_fiscal  CHAR(03),
                                    subserie_nf        DECIMAL(2,0),
                                    espc_nota_fiscal   CHAR(03),
                                    fornecedor         CHAR(15),
                                    dat_emis_nf        DATE,
                                    dat_ent_nf         DATE,
                                    cond_pagto         DECIMAL(3,0),
                                    modo_embarque      DECIMAL(2,0),
                                    tip_nota_fiscal    CHAR(01),
                                    num_conhec_frete   DECIMAL(7,0),
                                    serie_conhec_frete CHAR(03),
                                    subserie_conh_fret DECIMAL(2,0),
                                    transportador      CHAR(15),
                                    val_tot_decl_nf    DECIMAL(17,2),
                                    val_tot_decl_icms  DECIMAL(17,2),
                                    val_tot_decl_ipi   DECIMAL(17,2),
                                    cfop               CHAR(05),
                                    cfop_compl         INTEGER,
                                    processado         CHAR(01),
                                    sequencia          SMALLINT,
                                    pedido             DECIMAL(6,0),
                                    ordem_compra       DECIMAL(9,0),
                                    item               CHAR(15),
                                    pre_unit_nf        DECIMAL(17,6),
                                    qtd_decl_nf        DECIMAL(15,3),
                                    pct_ipi            DECIMAL(6,3),
                                    bas_calc_ipi       DECIMAL(17,2),
                                    val_ipi            DECIMAL(17,2),
                                    pct_icms           DECIMAL(6,3),
                                    bas_calc_icms      DECIMAL(17,2),
                                    val_icms           DECIMAL(17,2),
                                    val_frete          DECIMAL(17,2),
                                    pct_icms_frete     DECIMAL(6,3),
                                    bc_icms_frete      DECIMAL(17,2),
                                    val_icms_frete     DECIMAL(17,2)
                                  END RECORD,
         mr_sup_info_adic_nfe     RECORD
                                     empresa       CHAR(02),
                                     aviso_recebto DECIMAL(6,0),
                                     dia           DECIMAL(2,0),
                                     mes           DECIMAL(2,0),
                                     ano           DECIMAL(4,0),
                                     qtd_diaria    DECIMAL(17,3)
                                  END RECORD,
         mr_sup_ar_imp_cana       RECORD
                                   empresa           CHAR(02),
                                   cond_pgto         DECIMAL(3,0),
                                   val_tot_decl_nf   DECIMAL(17,2),
                                   val_tot_decl_icms DECIMAL(17,2),
                                   sequencia         DECIMAL(3,0),
                                   item              CHAR(15),
                                   qtd_decl_nf       DECIMAL(15,3),
                                   venci_imp_cana    DATE,
                                   num_aviso_rec     LIKE aviso_rec.num_aviso_rec
                                  END RECORD


  DEFINE mr_nf_sup                RECORD LIKE nf_sup.*,
         mr_aviso_rec             RECORD LIKE aviso_rec.*,
         mr_aviso_rec_compl       RECORD LIKE aviso_rec_compl.*,
         mr_nfe_sup_compl         RECORD LIKE nfe_sup_compl.*,
         mr_reten_inss            RECORD LIKE reten_inss.*,
         mr_reten_inss_rur        RECORD LIKE reten_inss_rur.*,
         mr_ar_compl_sq           RECORD LIKE aviso_rec_compl_sq.*,
         mr_ar_ped                RECORD LIKE ar_ped.*,
         mr_dest_aviso_rec        RECORD LIKE dest_aviso_rec.*,
         mr_dest_aviso_rec4       RECORD LIKE dest_aviso_rec4.*,
         m_msg                    CHAR(500),
         mr_nf_sup_erro           RECORD LIKE nf_sup_erro.*,
         mr_audit_ar              RECORD LIKE audit_ar.*,
         m_gru_ctr_desp_frt       LIKE icms.gru_ctr_desp

  DEFINE mr_frete_sup             RECORD LIKE frete_sup.*,
         mr_frete_sup_compl       RECORD LIKE frete_sup_compl.*,
         mr_audit_frete           RECORD LIKE audit_frete.*,
         mr_frete_sup_erro        RECORD LIKE frete_sup_erro.*,
         mr_ar_diverg             RECORD LIKE ar_diverg.*,
         mr_dest_frete_sup        RECORD LIKE dest_frete_sup.*,
         mr_plano_contas          RECORD LIKE plano_contas.*,
         mr_pedagio_frete         RECORD LIKE pedagio_frete.*,
         mr_relac_nff             RECORD
                                    empresa            LIKE frete_sup_x_nff.cod_empresa,
                                    num_conhec         LIKE frete_sup_x_nff.num_conhec,
                                    serie_conhec       LIKE frete_sup_x_nff.ser_conhec,
                                    subserie_conhec    LIKE frete_sup_x_nff.ssr_conhec,
                                    especie            LIKE nf_sup.ies_especie_nf,
                                    transportador      LIKE frete_sup_x_nff.cod_transpor,
                                    num_nff_relac      LIKE frete_sup_x_nff.num_nff,
                                    ser_nff_relac      LIKE frete_sup_x_nff.ser_nf_saida,
                                    ssr_nff_relac      LIKE frete_sup_x_nff.subserie_nota_fiscal_fatura,
                                    dat_emis_nff_relac DATE
                                  END RECORD

  DEFINE m_tip_desp_frt_v         LIKE par_sup.cod_tip_desp_frt_v,
         m_dat_fim_valid          LIKE par_sup_pad.par_data,
         m_nom_arquivo            CHAR(200),
         m_nom_arquivo_pad        LIKE sup_ctr_nf_import.nom_arq,
         m_nom_arquivo_consis     CHAR(200),
         m_perm_relac_frfob_frvnd CHAR(01),
         m_sup_info_adic_nfe      SMALLINT,
         m_sup_ar_imp_cana        SMALLINT,
         m_fim_valid              SMALLINT,
         m_import_auto            SMALLINT
# 472924
  DEFINE m_cont_insp_especial     CHAR(01),
         m_nota_imp_sup0052_util_reg_fisc CHAR(01), #OS 612607
         m_ies_fat_unico          SMALLINT,
         m_controles              CHAR(300),
         m_util_cod_fisc_arq_txt  CHAR(01),
         m_cod_empresa_aux        LIKE nf_sup.cod_empresa,
         m_arg                    SMALLINT,
         m_entrada_frete_em_transito CHAR(01),
         m_dir_arq_sup0552           CHAR(100),
         m_dir_arq_proc_sup0552      CHAR(100),
         m_dir_arq_erro_sup0552      CHAR(100),
         m_texto                     CHAR(100),
         m_nome_arquivo              CHAR(100),
         m_relatorio1                CHAR(100),
         m_relatorio2                CHAR(100),
         m_nome_arquivo_err          CHAR(100),
         m_status_arquivo            SMALLINT, #0-sucesso 1-erro processamento
         #-- OS 544109 inicio --#
         m_contr_terc_no_dep         CHAR(01),
         m_cod_motivo_remessa        CHAR(100),
         m_cod_mot_rem_terc          LIKE motivo_remessa.cod_motivo_remessa,
         ma_fornec_agend             ARRAY[1000] OF RECORD
                                        fornecedor         LIKE sup_fornec_agto.fornecedor,
                                        dir_arq_pendente   LIKE sup_fornec_agto.dir_arq_pendente,
                                        dir_arq_processado LIKE sup_fornec_agto.dir_arq_processado,
                                        dir_arquivo_erro   LIKE sup_fornec_agto.dir_arquivo_erro,
                                        dir_arq_consis     LIKE sup_fornec_agto.dir_arq_consis
                                     END RECORD,
         m_ind_fornec_agend          SMALLINT

  DEFINE ma_fornec                   ARRAY[1000] OF RECORD
                                     selecao             CHAR(01),
                                     cod_fornecedor      LIKE fornecedor.cod_fornecedor,
                                     raz_social          LIKE fornecedor.raz_social
                                     END RECORD,
         ma_fornec_compl             ARRAY[1000] OF RECORD
                                     dir_arq_pendente     LIKE sup_fornec_agto.dir_arq_pendente,
                                     dir_arq_processado   LIKE sup_fornec_agto.dir_arq_processado,
                                     dir_arquivo_erro     LIKE sup_fornec_agto.dir_arquivo_erro,
                                     dir_arq_consis       LIKE sup_fornec_agto.dir_arq_consis
                                     END RECORD,
         m_ind                       SMALLINT,
         m_ind_arq                   SMALLINT,
         m_existe_fornec             SMALLINT
  DEFINE ma_caminho                  ARRAY[1000] OF RECORD
                                     selecao       CHAR(01),
                                     caminho       CHAR(100)
                                     END RECORD

  DEFINE m_dir_arq_pendente          CHAR(100),
         m_dir_arq_processado        CHAR(100),
         m_dir_arquivo_erro          CHAR(100),
         m_dir_arq_consis            CHAR(100),
         m_raz_social                LIKE fornecedor.raz_social,
         m_num_args                  SMALLINT,
         m_qtd_dias_final_export     SMALLINT,
         m_gerar_os_recb_mat_terc    CHAR(01),
         m_divergencia               CHAR(300),
         m_varios_fornecedores       SMALLINT,
         m_eh_background             SMALLINT,
         m_ies_alt_nfe_emit          CHAR(01),
         m_conta_lanc                SMALLINT,
         m_ies_interf_cre            CHAR(01),
         m_parcretxt                 CHAR(500),
         m_ies_pagamento             LIKE cond_pgto_cap.ies_pagamento,
         m_cod_empresa_uni           CHAR(02),
         m_ies_anexa_dupl            CHAR(01),
         m_gera_rsv_transf           CHAR(01),
         m_cod_emp_transf            LIKE empresa.cod_empresa,
         m_pedido_venda1             LIKE pedidos.num_pedido,
         m_pedido_venda              LIKE pedidos.num_pedido,
         m_ies_utiliz_provisao       CHAR(02),
         m_utiliz_nfm_import         CHAR(02),
         m_count_seq                 SMALLINT,
         ma_inf_ar                   ARRAY[999] OF RECORD
                                     num_seq      LIKE aviso_rec.num_seq,
                                     num_pedido   LIKE aviso_rec.num_pedido,
                                     num_oc       LIKE aviso_rec.num_oc
                                     END RECORD,
         m_cred_st_fat               CHAR(01),
         m_ies_custo_grade           CHAR(01),
         m_exporta_nf                CHAR(01),
         m_contr_local_terc          CHAR(04),
         m_ies_usa_ae                CHAR(01),
         m_houve_erro                SMALLINT,
         m_ies_obt_inf_tr_unid       CHAR(01),
         m_proc_ini_os163407         SMALLINT,
         m_num_ar_relac              LIKE aviso_rec.num_aviso_rec, #OS450170
         m_contr_pes_rec             LIKE par_sup_pad.par_ies,
         m_existe_despprit           SMALLINT,
         m_exst_rel_fre_indt         SMALLINT,
         m_proc_imp_rec_nfr_consig   CHAR(01),
         m_ies_tex_inst              CHAR(01),
         m_utiliza_dds_fortaleza     CHAR(01),
         m_cod_oper_ent_ind          LIKE par_sup_pad.par_txt,
         m_oper_ent_ind_g            LIKE par_sup_pad.par_txt,
         m_ies_wms_instalado         CHAR(01),
         m_utiliza_nf_eletronica     CHAR(01),
         m_num_ped_fornec            LIKE prog_ordem_sup.num_pedido_fornec,
         m_ped_venda_dest            LIKE pedidos.num_pedido_cli,
         m_tipo_de_processo          CHAR(01),
         m_transacao_ativa           SMALLINT,
         m_data_char1                CHAR(25),
         m_data_char2                CHAR(25),
         m_data_char3                CHAR(25),
         m_data_char4                CHAR(25),
         m_data_char5                CHAR(25),
         #-- OS 544109 fim --#
         #--OS 563259 inicio --#
         m_num_dupl_igual_nf           CHAR(01),
         m_bloqueia_dig_dupl_atrasada  CHAR(01),
         m_falta_valor                 SMALLINT,
         m_val_difer                   DECIMAL (17,2),
         mr_cond_pgto_cap              RECORD LIKE cond_pgto_cap.*,
         m_count                       SMALLINT,
         m_val_total_dup               LIKE nf_sup.val_tot_nf_d,
         m_temp_grade                  SMALLINT, ##OS 586613
         ma_dados                      ARRAY[100] OF RECORD
                                       num_docum   LIKE  vencimento_nff.num_docum,
                                       val_docum   LIKE  vencimento_nff.val_docum,
                                       dat_vencto  LIKE  vencimento_nff.dat_vencto
                                       END RECORD,
         m_temp_cana                   SMALLINT,
         m_val_imp_cana                LIKE nf_sup.val_tot_nf_d,
         m_impostos           DECIMAL(15,2)
         #--OS 563259 fim --#

  DEFINE mr_inf_compl_nf          RECORD
         tipo_registro            CHAR(01),
         registro_entrada         CHAR(01),
         reten_inss               CHAR(03),
         valor_despesa_acessoria  DECIMAL(17,2),
         num_di                   DECIMAL(10,0),
         recolhimento_inss        CHAR(05),
         reten_iss                CHAR(01),
         reten_sest_senat         CHAR(15)
  END RECORD

  DEFINE mr_inf_compl_item   RECORD
         tipo_registro       CHAR(01),
         ies_da_bc_ipi       CHAR(01),
         grupo_despesa_item  DECIMAL(7,0),
         cod_tip_despesa     LIKE aviso_rec.cod_tip_despesa
  END RECORD

  DEFINE mr_inf_compl_fret          RECORD
         tipo_registro              CHAR(01),
         gerar_frete_con_como_ar    CHAR(01),
         grupo_despesa_item_fr      LIKE aviso_rec.gru_ctr_desp_item,
         reten_inss                 CHAR(03),
         recolhimento_inss          CHAR(05),
         reten_iss                  CHAR(01),
         reten_sest_senat           CHAR(15),
         cod_tip_despesa            LIKE frete_sup.cod_tip_despesa
  END RECORD

  DEFINE m_permite_ent_fret_apenas_transp CHAR(01),
         m_ver_dupli_peca_serie           CHAR(01),
         m_num_lote                       CHAR(15),
         m_ies_inf_dat_fabr               CHAR(01),
         m_ies_lote_automat               CHAR(01),
         m_considera_num_lote_emp_origem  CHAR(01),
         m_ler_param_cfop99_do_sup8740    CHAR(01), #724885
         m_ies_cfop99                     CHAR(01),
         m_assumir_pct_ipi_decl_sup0552       CHAR(01),
         m_ant_tipo_registro              CHAR(01),
         m_ant_nota_fiscal                DECIMAL(7,0),
         m_ant_serie_nota_fiscal          CHAR(03),
         m_ant_subserie_nf                DECIMAL(2,0),
         m_ant_item                       CHAR(15),
         m_registro_v                     SMALLINT,
         m_registro_t                     SMALLINT,
         m_registro_f                     SMALLINT,
         m_bc_retencao_inss               DECIMAL(17,6),
         m_bc_recolhimento_inss           DECIMAL(15,3),
         m_bc_recolhimento_inss_fret      DECIMAL(17,6),
         m_bc_retencao_inss_fret          DECIMAL(15,3),
         m_ies_tip_entrada_nf             LIKE cod_fiscal_sup.ies_tip_entrada,
         m_perc_reten_inss                DECIMAL(6,3),
         m_perc_reten_iss                 DECIMAL(6,3),
         m_cod_unid_med_padrao            CHAR(03), #728008
         m_modelo_nf_param                LIKE par_sup_pad.par_txt, #732596#
         m_exigir_modelo_nota_fiscal_ent  CHAR(01),                 #732596#
         m_modelo_con                     CHAR(02), #772116
         m_data_execut_atual              CHAR(01),
         m_regime_aduaneiro               CHAR(01),  #A24579
         m_peso_item                      DECIMAL(17,2), #A24579
         m_houve_nc_nf                    SMALLINT #801157 - Janaina

  #--# Importação de NFe #--#
  DEFINE m_utiliz_totvs_colab             CHAR(01), #796313 - Espindola - Projeto Totvs Colaboracao
         m_extensao_arq                   CHAR(10)

#END MODULARES

MAIN

  CALL log0180_conecta_usuario()

  CALL fgl_setenv("VERSION_INFO","L10-SUP0552-10.02.$Revision: 38 $p") #Informacao da versao do programa controlado pelo SourceSafe - Nao remover esta linha.
  LET p_versao = 'SUP0552-10.02.36p' #Favor nao alterar esta linha (SUPORTE)

  WHENEVER ERROR CONTINUE
   CALL log1400_isolation()
   SET LOCK MODE TO WAIT 120
  WHENEVER ERROR STOP

  DEFER INTERRUPT

  LET m_caminho = log140_procura_caminho('sup0552.iem')

  OPTIONS
      PREVIOUS KEY control-b,
      NEXT     KEY control-f,
      HELP    FILE m_caminho

  CALL log001_acessa_usuario('SUPRIMEN','LOGERP;LOGLQ2;LOGWMS')
     RETURNING p_status, p_cod_empresa, p_user

  LET m_arg           = FALSE
  LET m_import_auto   = FALSE
  LET m_eh_background = FALSE

  IF NUM_ARGS() > 0 THEN
      LET p_cod_empresa = ARG_VAL(1)

      IF find4GLFunction('supy75_verifica_cliente_859') THEN
         IF supy75_verifica_cliente_859() THEN
            LET m_import_auto = TRUE
         END IF
      END IF

      LET m_arg           = TRUE
      LET m_eh_background = TRUE
   END IF

  IF  p_status = 0 THEN
     CALL sup0552_controle()
  END IF

END MAIN

#---------------------------#
 FUNCTION sup0552_controle()
#---------------------------#
 DEFINE l_ind SMALLINT

 IF m_arg = FALSE THEN
    CALL log006_exibe_teclas('01',p_versao)

    CALL log130_procura_caminho("sup0552") RETURNING comando
    OPEN WINDOW w_sup0552 AT 2,08 WITH FORM comando
         ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, COMMENT LINE LAST)
 END IF

 CALL sup0552_busca_parametros_gerais()

 # CH 752449 - Rafael F. B. - 17/06/2010 #
 IF Find4GLFunction("supy164_cria_arquivos") THEN
    CALL supy164_cria_arquivos(m_eh_background)
 END IF

 LET m_transacao_ativa   = FALSE

 INITIALIZE m_tip_desp_frt_v TO NULL
 WHENEVER ERROR CONTINUE
 SELECT cod_tip_desp_frt_v
   INTO m_tip_desp_frt_v
   FROM par_sup
  WHERE par_sup.cod_empresa = p_cod_empresa
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode = 100 THEN
       IF m_eh_background = FALSE THEN
          ERROR 'Tipo de despesa de frete de vendas não parametrizado no sup1180.'
          CALL LOG_refresh_display()
          SLEEP 3
       END IF
    ELSE
       CALL log003_err_sql("SELECAO","PAR_SUP")
       RETURN
    END IF
 ELSE
    IF m_tip_desp_frt_v IS NULL THEN
       IF m_eh_background = FALSE THEN
          ERROR 'Tipo de despesa de frete de vendas não parametrizado no sup1180.'
          CALL LOG_refresh_display()
          SLEEP 3
       END IF
    END IF
 END IF

 WHENEVER ERROR CONTINUE
 SELECT den_empresa
   INTO m_den_empresa
   FROM empresa
  WHERE cod_empresa = p_cod_empresa
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    INITIALIZE m_den_empresa TO NULL
 END IF

 WHENEVER ERROR CONTINUE
 SELECT par_ind_especial
  INTO m_controla_gao
  FROM gao_par_padrao
 WHERE empresa = p_cod_empresa
   AND parametro = "controla_gao"
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    LET m_controla_gao = 'N'
 END IF

 #796313 - Espindola - Projeto Totvs Colaboracao
 WHENEVER ERROR CONTINUE
 SELECT par_ies
   INTO m_utiliz_totvs_colab
   FROM par_sup_pad
 WHERE cod_empresa   = p_cod_empresa
   AND cod_parametro = "utiliz_totvs_colab"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
    CALL log003_err_sql("select","par_sup_pad")
 END IF

 IF m_utiliz_totvs_colab IS NULL
 OR m_utiliz_totvs_colab = ' ' THEN
    LET m_utiliz_totvs_colab = 'N'
 END IF
 LET m_nom_arquivo_pad = p_cod_empresa, "RECEB.REC"

 CALL sup0552_localiza_par_sup_pad()
 IF m_versao_texto IS NOT NULL THEN
    LET m_nom_arquivo = p_cod_empresa, "SUP0552", m_versao_texto USING "&&&", ".REC"
 ELSE
    LET m_nom_arquivo = m_nom_arquivo_pad
 END IF

  INITIALIZE m_util_cod_fisc_arq_txt TO NULL #OS479018

  CALL log2250_busca_parametro(p_cod_empresa,"utiliza_cod_fiscal_arquivo_txt")
     RETURNING m_util_cod_fisc_arq_txt, p_status

  IF p_status = FALSE
  OR m_util_cod_fisc_arq_txt IS NULL
  OR m_util_cod_fisc_arq_txt = " " THEN
     LET m_util_cod_fisc_arq_txt = "2"
  END IF

 IF m_arg = FALSE THEN

    DISPLAY p_cod_empresa TO cod_empresa
    DISPLAY m_nom_arquivo TO nom_arquivo

    MENU "OPCAO"
       COMMAND "Informar" "Informar Importacao de Notas Fiscais / Fretes"
         HELP 009
         MESSAGE ""
         LET m_transacao_ativa = FALSE
         IF log005_seguranca(p_user,"SUPRIMEN","SUP0552","IN")  THEN
            INITIALIZE ma_fornec TO NULL
            LET m_existe_fornec = FALSE
            CALL sup0552_informar()
            NEXT OPTION "Processar"
         END IF
       COMMAND "Processar" "Processar Importacao de Notas Fiscais / Fretes"
         HELP 010
         MESSAGE ""
         LET m_transacao_ativa = FALSE
         IF log005_seguranca(p_user,"SUPRIMEN","SUP0552","IN")  THEN
            IF  m_nom_arquivo IS NOT NULL
            AND m_nom_arquivo <> " " THEN
               IF log0040_confirm(19,22,"Executa função em andamento?") THEN
                  CALL sup0552_importar("NORMAL")
                  CALL sup0552_gera_relat("NORMAL")
               END IF
            ELSE
               ERROR "Favor informar nome do arquivo."
               CALL LOG_refresh_display()
               NEXT OPTION "Informar"
            END IF
         END IF

       COMMAND "Historico_importacoes"   "Consulta histórico dos arquivos importados."
         HELP 011
         MESSAGE ""
         CALL log120_procura_caminho("sup1406") RETURNING m_comando
         RUN m_comando RETURNING p_cancel

       COMMAND "WMS" "Menu do WMS" #-- OS 544109
          HELP 012
          MESSAGE ""
          LET int_flag = 0
          CALL sup0552_menu_wms()

       COMMAND KEY ("!")
         PROMPT "Digite o comando : " FOR comando
         RUN comando
         PROMPT "\nTecle ENTER para continuar" FOR CHAR comando
         CALL log006_exibe_teclas("01", p_versao)
         CURRENT WINDOW IS w_sup0552
       COMMAND "Fim"        "Retorna ao Menu Anterior"
         HELP 008
         EXIT MENU


     #lds COMMAND KEY ("F11") "Sobre" "Informações sobre a aplicação (F11)."
     #lds CALL LOG_info_sobre(sourceName(),p_versao)



  #lds COMMAND KEY ("F11") "Sobre" "Informações sobre a aplicação (F11)."
  #lds CALL LOG_info_sobre(sourceName(),p_versao)

    END MENU

    CLOSE WINDOW w_sup0552
 ELSE
    CALL sup0552_cria_temp() RETURNING m_status

    LET m_eh_background = TRUE
    LET m_existe_fornec = FALSE

    CALL log150_procura_caminho("JOR") RETURNING m_comando
    LET m_comando = m_comando CLIPPED, "sup0552_" CLIPPED, p_user CLIPPED,".bg"
    CALL STARTLOG(m_comando)
    CALL errorlog("Controle")

    IF m_import_auto = TRUE THEN
       IF NOT omcr69_cria_temp_t_telab(0) THEN
          RETURN
       END IF

       IF find4GLFunction('supy75_importa_notas_portal_compras') THEN
          IF supy75_importa_notas_portal_compras() THEN
             IF log0040_confirm(19,22,"Executa função em andamento?") THEN
                CALL sup0552_importar("NORMAL")
                CALL sup0552_gera_relat("NORMAL")
             END IF
             IF LOG_existe_epl('sup0552y_before_insert_nf_sup') THEN
                IF sup0552y_before_insert_nf_sup() = FALSE THEN
                   IF m_status_arquivo = 1 AND m_nome_arquivo_err IS NOT NULL THEN
                      CALL sup0552_envia_email_2()
                   END IF
                END IF
             END IF
          ELSE
             CALL errorlog("Erro na importacao.")
          END IF
       ELSE
          CALL errorlog("Erro na importacao.")
       END IF
    ELSE

       IF m_dir_arq_sup0552 IS NULL THEN
          CALL errorlog("Diretorio dos arquivos ainda nao proc. nao parametrizado.")
          RETURN
       END IF
       IF m_dir_arq_proc_sup0552 IS NULL THEN
          CALL errorlog("Diretorio dos arquivos processados ainda nao parametrizado.")
          RETURN
       END IF
       IF m_dir_arq_erro_sup0552 IS NULL THEN
          CALL errorlog("Diretorio dos arquivos com erro de proc. ainda nao parametrizado.")
          RETURN
       END IF

       IF sup0552_cria_temp_carrega_arquivos() THEN
          IF sup0552_carrega_arquivos_importacao() THEN

             WHENEVER ERROR CONTINUE
             DECLARE cq_arquivo CURSOR WITH HOLD FOR
              SELECT arquivo
                FROM w_arquivo_data
             WHENEVER ERROR STOP

              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("DECLARE","CQ_ARQUIVO")
                 RETURN
              END IF

              IF m_eh_background = FALSE THEN
                 IF log0040_confirm(19,22,"Executa função em andamento?") THEN
                    RETURN
                 END IF
              END IF

              WHENEVER ERROR CONTINUE
              FOREACH cq_arquivo INTO m_nom_arquivo
              WHENEVER ERROR STOP

                 IF sqlca.sqlcode <> 0 THEN
                    CLOSE cq_arquivo #764215#
                    EXIT FOREACH
                 END IF

                 CALL sup0552_importar("NORMAL")

                 IF LOG_existe_epl('sup0552y_before_insert_nf_sup') THEN
                    IF sup0552y_before_insert_nf_sup() = FALSE THEN
                       IF m_status_arquivo = 1 AND m_nome_arquivo_err IS NOT NULL THEN
                          CALL sup0552_envia_email(mr_w_sup0552_4.fornecedor, "ERRO")
                       ELSE
                          CALL sup0552_envia_email(mr_w_sup0552_4.fornecedor, "SUCESSO")
                       END IF
                    END IF
                 END IF

                 IF m_status_arquivo = 0 THEN
                    CALL sup0552_move_arquivo(m_dir_arq_proc_sup0552)
                 ELSE
                    CALL sup0552_move_arquivo(m_dir_arq_erro_sup0552)
                 END IF

              END FOREACH
              FREE cq_arquivo
              CALL sup0552_gera_relat("NORMAL")
          END IF
       END IF
       #-- OS 544109 inicio --#
       IF sup0552_cria_temp() THEN
          CALL sup0552_carrega_array_fornec("TODOS") RETURNING m_status
          # Lista os arquivos pendentes de vários fornecedores
          FOR m_ind_arq = 1 TO m_ind
             CALL sup0552_carrega_arq_fornec(ma_fornec_compl[m_ind_arq].dir_arq_pendente) RETURNING m_status
          END FOR
          IF m_existe_fornec THEN
             CALL sup0552_insere_temp_e_processa()
          END IF
       ELSE
          CALL log0030_mensagem("Não existe fornecedor para ser listado","info")
       END IF
       #-- OS 544109 fim --#
    END IF
 END IF

 END FUNCTION
#-- OS 563259 inicio --#
#----------------------------------------------------#
 FUNCTION sup0552_busca_cond_pgto_cap(l_cnd_pgto)
#----------------------------------------------------#
 DEFINE l_cnd_pgto   LIKE cond_pgto_cap.cnd_pgto

 INITIALIZE mr_cond_pgto_cap.* TO NULL

 WHENEVER ERROR CONTINUE
 SELECT cnd_pgto             ,
        des_cnd_pgto         ,
        ies_contag_dias      ,
        ies_pagamento        ,
        ies_fora
   INTO mr_cond_pgto_cap.cnd_pgto             ,
        mr_cond_pgto_cap.des_cnd_pgto         ,
        mr_cond_pgto_cap.ies_contag_dias      ,
        mr_cond_pgto_cap.ies_pagamento        ,
        mr_cond_pgto_cap.ies_fora
   FROM cond_pgto_cap
  WHERE cond_pgto_cap.cnd_pgto = l_cnd_pgto
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("SELECAO","COND_PGTO_CAP")
 END IF

 END FUNCTION

#--------------------------------------------------#
 FUNCTION sup0552_verifica_numero_dupl(l_num_docum)
#--------------------------------------------------#
  DEFINE l_num_docum   LIKE vencimento_nff.num_docum,
         l_ind         SMALLINT,
         l_tam         SMALLINT

  IF l_num_docum IS NULL
  OR l_num_docum = " " THEN
     LET l_num_docum = 0
  END IF

  LET l_tam = LENGTH(l_num_docum)

  FOR l_ind = 1 TO l_tam
     IF l_num_docum[l_ind] = "/" OR
        l_num_docum[l_ind] = "-" THEN
        EXIT FOR
     END IF
  END FOR
  LET l_ind = l_ind - 1

  IF l_num_docum[1,l_ind] = mr_w_sup0552_4_it.nota_fiscal THEN
     RETURN TRUE
  END IF
  RETURN FALSE
 END FUNCTION
#-------------------------------------#
 FUNCTION sup0552_consulta_duplicatas()
#-------------------------------------#
CURRENT WINDOW IS w_sup09902

  WHENEVER ERROR CONTINUE
  DECLARE cq_consulta_dupl CURSOR FOR
    SELECT num_docum, val_docum, dat_vencto
      FROM vencimento_nff
        WHERE vencimento_nff.cod_empresa       = mr_w_sup0552_4_it.empresa
          AND vencimento_nff.num_nf            = mr_w_sup0552_4_it.nota_fiscal
          AND vencimento_nff.ser_nf            = mr_w_sup0552_4_it.serie_nota_fiscal
          AND vencimento_nff.ssr_nf            = mr_w_sup0552_4_it.subserie_nf
          AND vencimento_nff.cod_fornecedor    = mr_w_sup0552_4_it.fornecedor
     ORDER BY dat_vencto
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","VENCIMENTO_NFF")
  END IF

  LET m_count = 1
  WHENEVER ERROR CONTINUE
  FOREACH cq_consulta_dupl INTO ma_dados[m_count].*
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("FOREACH","CQ_CONSULTA_DUPL")
        CLOSE cq_consulta_dupl #764215#
        EXIT FOREACH
     END IF
     LET m_count = m_count + 1
  END FOREACH
  FREE cq_consulta_dupl #764215#
  WHENEVER ERROR STOP
  CALL set_count(m_count -1)

  IF int_flag = TRUE THEN
     LET int_flag = FALSE
  END IF
END FUNCTION
#------------------------------------#
 FUNCTION sup0552_verifica_valor_nota()
#------------------------------------#
  DEFINE l_erro_val       SMALLINT,
         l_num_ar         SMALLINT ,
         l_cod_moeda_urv  LIKE par_cap.cod_moeda_urv,
         l_val_cotacao    LIKE cotacao.val_cotacao,
         l_val_tot_nf_u   DECIMAL(17,3),
         l_inteiro        INTEGER

  #eduardo o.s.313372
  DEFINE l_val_inss           LIKE cap_ret_inss_auton.val_inss,
         l_val_reten_inss     LIKE reten_inss.val_reten_inss,
         l_val_ret_inss_rur   LIKE reten_inss_rur.val_reten_inss_rur,
         l_val_reten_iss      LIKE reten_iss.val_reten_iss
  DEFINE l_sup_ar_imp_cana    SMALLINT, # MORENO
         l_impostos           DECIMAL(15,2)


  LET l_erro_val = FALSE
  LET m_falta_valor = TRUE
  LET l_val_tot_nf_u = 0
  LET l_inteiro = 0
  LET m_val_difer = 0
  LET l_num_ar = 0
  LET l_val_tot_nf_u =  mr_nf_sup.val_tot_nf_d
  LET l_sup_ar_imp_cana   = FALSE
  LET m_val_imp_cana = 0

 #verifica se tem impostos
 #eduardo o.s.313372
 LET l_impostos = 0

 WHENEVER ERROR CONTINUE
 SELECT val_inss
   INTO l_val_inss
   FROM cap_ret_inss_auton
  WHERE cap_ret_inss_auton.empresa           = mr_w_sup0552_4_it.empresa
    AND cap_ret_inss_auton.ad_nf_origem      = mr_w_sup0552_4_it.nota_fiscal
    AND cap_ret_inss_auton.serie_nota_fiscal = mr_w_sup0552_4_it.serie_nota_fiscal
    AND cap_ret_inss_auton.subserie_nf       = mr_w_sup0552_4_it.subserie_nf
    AND cap_ret_inss_auton.espc_nota_fiscal  = mr_w_sup0552_4_it.espc_nota_fiscal
    AND cap_ret_inss_auton.fornecedor        = mr_w_sup0552_4_it.fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_val_inss = 0
 END IF

 WHENEVER ERROR CONTINUE
 SELECT val_reten_inss
   INTO l_val_reten_inss
   FROM reten_inss
  WHERE reten_inss.cod_empresa     = mr_w_sup0552_4_it.empresa
    AND reten_inss.cod_fornecedor  = mr_w_sup0552_4_it.fornecedor
    AND reten_inss.num_ad_nf_orig  = mr_w_sup0552_4_it.nota_fiscal
    AND reten_inss.ser_nf          = mr_w_sup0552_4_it.serie_nota_fiscal
    AND reten_inss.ssr_nf          = mr_w_sup0552_4_it.subserie_nf
    AND reten_inss.ies_especie_nf  = mr_w_sup0552_4_it.espc_nota_fiscal
    AND reten_inss.ies_isencao_inss <> "I"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_val_reten_inss = 0
 END IF

 WHENEVER ERROR CONTINUE
 SELECT val_reten_inss_rur
   INTO l_val_ret_inss_rur
   FROM reten_inss_rur
  WHERE reten_inss_rur.cod_empresa     = mr_w_sup0552_4_it.empresa
    AND reten_inss_rur.cod_fornecedor  = mr_w_sup0552_4_it.fornecedor
    AND reten_inss_rur.num_ad_nf_orig  = mr_w_sup0552_4_it.nota_fiscal
    AND reten_inss_rur.ser_nf          = mr_w_sup0552_4_it.serie_nota_fiscal
    AND reten_inss_rur.ssr_nf          = mr_w_sup0552_4_it.subserie_nf
    AND reten_inss_rur.ies_especie_nf  = mr_w_sup0552_4_it.espc_nota_fiscal
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_val_ret_inss_rur = 0
 END IF

 WHENEVER ERROR CONTINUE
 SELECT val_reten_iss
   INTO l_val_reten_iss
   FROM reten_iss
  WHERE reten_iss.cod_empresa     = mr_w_sup0552_4_it.empresa
    AND reten_iss.cod_fornecedor  = mr_w_sup0552_4_it.fornecedor
    AND reten_iss.num_ad_nf_orig  = mr_w_sup0552_4_it.nota_fiscal
    AND reten_iss.ser_nf          = mr_w_sup0552_4_it.serie_nota_fiscal
    AND reten_iss.ssr_nf          = mr_w_sup0552_4_it.subserie_nf
    AND reten_iss.ies_especie_nf  = mr_w_sup0552_4_it.espc_nota_fiscal
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_val_reten_iss = 0
 END IF

#### OS 390962 - caso possua impostos INSS/ISS, efetua pergunta em tela se abate ou não
####             esses impostos na duplicata
 # LEITURA IMPOSTOS CANA
 WHENEVER ERROR CONTINUE
 SELECT SUM(val_imp_declarado)
   INTO m_val_imp_cana
   FROM sup_ar_imp_cana
  WHERE empresa       = mr_w_sup0552_4_it.empresa
    AND aviso_recebto = mr_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE CURSOR","CQ_IMP_CANA3")
    RETURN TRUE,FALSE,""
 END IF
 #FIM LEITURA IMPOSTOS CANA

 LET m_impostos = l_val_inss + l_val_reten_inss + l_val_ret_inss_rur + l_val_reten_iss + m_val_imp_cana
 LET l_val_tot_nf_u = mr_w_sup0552_4_it.val_tot_decl_nf
 IF m_impostos <> 0 THEN
    IF mr_w_sup0552_4_it.tip_nota_fiscal = 'S' THEN
       WHENEVER ERROR CONTINUE
       INSERT INTO sup_par_ar (empresa,aviso_recebto,seq_aviso_recebto,parametro,
                               par_ind_especial,parametro_texto,parametro_val,parametro_dat)
                               VALUES(mr_w_sup0552_4_it.empresa,
                                     mr_nf_sup.num_aviso_rec,
                                     0,
                                     "abate_inss_iss_dupl",
                                     "S",
                                     NULL,
                                     NULL,
                                     NULL)
       IF sqlca.sqlcode <> 0 THEN
       END IF
       WHENEVER ERROR STOP
    ELSE
       WHENEVER ERROR CONTINUE
       INSERT INTO sup_par_ar (empresa,aviso_recebto,seq_aviso_recebto,parametro,
                               par_ind_especial,parametro_texto,parametro_val,parametro_dat)
                              VALUES(mr_w_sup0552_4.empresa,
                                     mr_nf_sup.num_aviso_rec,
                                     0,
                                     "abate_inss_iss_dupl",
                                     "N",
                                     NULL,
                                     NULL,
                                     NULL)
       IF sqlca.sqlcode <> 0 THEN
       END IF
       WHENEVER ERROR STOP
    END IF
 END IF

 #Eduardo o.s.313372

 IF mr_w_sup0552_4_it.transportador IS NOT NULL THEN
    LET m_val_total_dup = m_val_total_dup + mr_w_sup0552_4_it.val_tot_decl_nf
 END IF

END FUNCTION

#-----------------------------------#
 FUNCTION sup0552_verifica_num_docum()
#-----------------------------------#
 DEFINE l_conta   SMALLINT,
        l_error    SMALLINT

  LET l_error = FALSE

  FOR l_conta = 1 TO 100
    IF mr_w_sup0552_4_it.transportador = ma_dados[l_conta].num_docum AND
       l_conta <> m_count THEN
     LET l_error = TRUE
    END IF
  END FOR

  IF l_error = TRUE THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END FUNCTION
#-- OS 563259 fim --#

#-- OS 544109 inicio --#
#----------------------------#
 FUNCTION sup0552_menu_wms()
#----------------------------#
  DEFINE l_msg         CHAR(100),
         l_ind         SMALLINT,
         l_ind2        SMALLINT

  MENU "OPCAO"
     COMMAND "Importar WMS" "Importar informaçõs de estoque dos itens que possuem WMS."
        HELP 009
        MESSAGE ""
        LET int_flag = 0
        DISPLAY p_cod_empresa TO cod_empresa
        IF sup0552_carrega_array_fornec("WMS") THEN
           CALL sup0552_fornec_agendados()
           IF int_flag = 1 THEN
              LET m_existe_fornec = FALSE
           ELSE
              IF m_existe_fornec THEN
                 IF NOT sup0552_existe_arquivo_processado() THEN
                    LET l_msg = "Confirma processamento ?"
                    IF log0040_confirm(12,25,l_msg) THEN
                       IF sup0552_cria_temp() THEN
                          CALL sup0552_insere_temp_e_processa()
                       END IF
                    ELSE
                       CALL log0030_mensagem("Processamento cancelado","info")
                       CALL LOG_refresh_display()
                    END IF
                 END IF
              ELSE
                 CALL log0030_mensagem("Faltou informar o fornecedor","info")
              END IF
           END IF
        END IF

     COMMAND "Importar Não WMS" "Importar informações de estoque dos itens que não possuem WMS"
        HELP 010
        MESSAGE ""
        LET int_flag = 0
        DISPLAY p_cod_empresa TO cod_empresa
        IF sup0552_carrega_array_fornec("GENERICO") THEN
           CALL sup0552_fornec_agendados()
           IF int_flag = 1 THEN
              LET m_existe_fornec = FALSE
           ELSE
              IF m_existe_fornec THEN
                 IF NOT sup0552_existe_arquivo_processado() THEN
                    LET l_msg = "Confirma processamento ?"
                    IF log0040_confirm(12,25,l_msg) THEN
                       IF sup0552_cria_temp() THEN
                          CALL sup0552_insere_temp_e_processa()
                       END IF
                    ELSE
                       CALL log0030_mensagem("Processamento cancelado","info")
                       CALL LOG_refresh_display()
                    END IF
                 END IF
              ELSE
                 CALL log0030_mensagem("Faltou informar o fornecedor","info")
              END IF
           END IF
        END IF

     COMMAND KEY ("!")
        PROMPT "Digite o comando : " FOR m_comando
        RUN m_comando
        PROMPT "\nTecle ENTER para continuar" FOR CHAR m_comando
        DATABASE logix
     COMMAND "Fim"  "Retorna ao menu anterior. "
        HELP 008
        EXIT MENU


  #lds COMMAND KEY ("control-F1") "Sobre" "Informações sobre a aplicação (CTRL-F1)."
  #lds CALL LOG_info_sobre(sourceName(),p_versao)



  #lds COMMAND KEY ("F11") "Sobre" "Informações sobre a aplicação (F11)."
  #lds CALL LOG_info_sobre(sourceName(),p_versao)

  END MENU
 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_existe_arquivo_processado()
#----------------------------------------------#
  DEFINE l_ind, l_ind2       SMALLINT,
         l_msg               CHAR(200)

  IF m_varios_fornecedores THEN
     #Fornecedor
     FOR l_ind = 1 TO m_ind
        IF ma_fornec[l_ind].selecao = " "
        OR ma_fornec[l_ind].selecao IS NULL
        OR ma_fornec[l_ind].selecao = "N" THEN
           CONTINUE FOR
        END IF
        LET m_arg = TRUE
        CALL sup0552_carrega_arq_fornec(ma_fornec_compl[l_ind].dir_arq_pendente) RETURNING m_status
        LET m_arg = m_eh_background
        #Arquivo do Fornecedor
        FOR l_ind2 = 1 TO m_ind_arq
           LET m_nom_arquivo = ma_caminho[l_ind2].caminho
           IF NOT sup0552_valida_arquivo() THEN
              LET l_msg = "Arquivo ", m_nom_arquivo CLIPPED," já processado para o fornecedor ", ma_fornec[m_ind].raz_social
              CALL log0030_mensagem(l_msg,"exclamation")
              RETURN TRUE
           END IF
        END FOR
     END FOR
  END IF

  RETURN FALSE

 END FUNCTION

#----------------------------------#
 FUNCTION sup0552_cria_temp_cana()
#----------------------------------#

  WHENEVER ERROR CONTINUE
  DROP TABLE w_sup0552_4
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF log0030_err_sql_tabela_inexistente() THEN
     ELSE
        CALL log003_err_sql("DROP TABLE","w_sup0552_4 1")
        RETURN
     END IF
  END IF

  WHENEVER ERROR CONTINUE
  CREATE TEMP TABLE w_sup0552_4
  (tipo_registro      CHAR(01),
   empresa            CHAR(02),
   empresa_estabel    CHAR(02),
   nota_fiscal        DECIMAL(7,0),
   serie_nota_fiscal  CHAR(03),
   subserie_nf        DECIMAL(2,0),
   espc_nota_fiscal   CHAR(03),
   fornecedor         CHAR(15),
   dat_emis_nf        DATE,
   dat_ent_nf         DATE,
   cond_pagto         DECIMAL(3,0),
   modo_embarque      DECIMAL(2,0),
   tip_nota_fiscal    CHAR(01),
   num_conhec_frete   DECIMAL(7,0),
   serie_conhec_frete CHAR(03),
   subserie_conh_fret DECIMAL(2,0),
   transportador      CHAR(23),
   val_tot_decl_nf    DECIMAL(17,2),
   val_tot_decl_icms  DECIMAL(17,2),
   val_tot_decl_ipi   DECIMAL(17,2),
   cfop               CHAR(05),
   cfop_compl         INTEGER,
   processado         CHAR(01),
   sequencia          SMALLINT,
   pedido             DECIMAL(6,0),
   ordem_compra       DECIMAL(9,0),
   item               CHAR(15),
   pre_unit_nf        DECIMAL(17,6),
   qtd_decl_nf        DECIMAL(15,3),
   pct_ipi            DECIMAL(6,3),
   bas_calc_ipi       DECIMAL(17,2),
   val_ipi            DECIMAL(17,2),
   pct_icms           DECIMAL(6,3),
   bas_calc_icms      DECIMAL(17,2),
   val_icms           DECIMAL(17,2),
   val_frete          DECIMAL(17,2),
   pct_icms_frete     DECIMAL(6,3),
   bc_icms_frete      DECIMAL(17,2),
   val_icms_frete     DECIMAL(17,2),
   compl_nota1        CHAR(120),
   compl_nota2        CHAR(120),
   desc_nota          DECIMAL(17,2),
   insc_estad         CHAR(16),
   seq_insc_estad     SMALLINT,
   val_inss           DECIMAL(17,2),
   val_inss_funrural  DECIMAL(17,2)
  ) WITH NO LOG
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF log0030_err_sql_tabela_duplicada() THEN
        WHENEVER ERROR CONTINUE
        DELETE FROM w_sup0552_4
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DELETE","w_sup0552_4 2")
        END IF
     ELSE
        CALL log003_err_sql("CREATE TABLE","w_sup0552_4 3")
     END IF
  END IF

  LET m_temp_cana = TRUE

 END FUNCTION

#-------------------------------------------#
 FUNCTION sup0552_cria_temp_controle_grade()
#-------------------------------------------#

  WHENEVER ERROR CONTINUE
  DROP TABLE w_sup0552_4
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF log0030_err_sql_tabela_inexistente() THEN
     ELSE
        CALL log003_err_sql("DROP TABLE","w_sup0552_4")
        RETURN
     END IF
  END IF

  WHENEVER ERROR CONTINUE
  CREATE TEMP TABLE w_sup0552_4
  (tipo_registro      CHAR(01),
   empresa            CHAR(02),
   empresa_estabel    CHAR(02),
   nota_fiscal        DECIMAL(7,0),
   serie_nota_fiscal  CHAR(03),
   subserie_nf        DECIMAL(2,0),
   espc_nota_fiscal   CHAR(03),
   fornecedor         CHAR(15),
   dat_emis_nf        DATE,
   dat_ent_nf         DATE,
   cond_pagto         DECIMAL(3,0),
   modo_embarque      DECIMAL(2,0),
   tip_nota_fiscal    CHAR(01),
   num_conhec_frete   DECIMAL(7,0),
   serie_conhec_frete CHAR(03),
   subserie_conh_fret DECIMAL(2,0),
   transportador      CHAR(23),
   val_tot_decl_nf    DECIMAL(17,2),
   val_tot_decl_icms  DECIMAL(17,2),
   val_tot_decl_ipi   DECIMAL(17,2),
   cfop               CHAR(05),
   cfop_compl         INTEGER,
   processado         CHAR(01),
   sequencia          SMALLINT,
   pedido             DECIMAL(6,0),
   ordem_compra       DECIMAL(9,0),
   item               CHAR(15),
   pre_unit_nf        DECIMAL(17,6),
   qtd_decl_nf        DECIMAL(15,3),
   pct_ipi            DECIMAL(6,3),
   bas_calc_ipi       DECIMAL(17,2),
   val_ipi            DECIMAL(17,2),
   pct_icms           DECIMAL(6,3),
   bas_calc_icms      DECIMAL(17,2),
   val_icms           DECIMAL(17,2),
   val_frete          DECIMAL(17,2),
   pct_icms_frete     DECIMAL(6,3),
   bc_icms_frete      DECIMAL(17,2),
   val_icms_frete     DECIMAL(17,2),
   compl_nota1        CHAR(120),
   compl_nota2        CHAR(120),
   desc_nota          DECIMAL(17,2),
   insc_estad         CHAR(16),
   seq_insc_estad     SMALLINT,
   val_inss           DECIMAL(17,2),
   val_inss_funrural  DECIMAL(17,2),
   seq_tabulacao      INTEGER,
   grade_1            CHAR(15),
   grade_2            CHAR(15),
   grade_3            CHAR(15),
   grade_4            CHAR(15),
   grade_5            CHAR(15),
   num_peca           CHAR(15),
   serie_peca         CHAR(15),
   comprimento        DECIMAL(15,3),
   largura            DECIMAL(15,3),
   altura             DECIMAL(15,3),
   diametro           DECIMAL(15,3),
   local_estoq        CHAR(10),
   num_lote           CHAR(15)
  ) WITH NO LOG
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF log0030_err_sql_tabela_duplicada() THEN
        WHENEVER ERROR CONTINUE
        DELETE FROM w_sup0552_4
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DELETE","w_sup0552_4")
        END IF
     ELSE
        CALL log003_err_sql("CREATE TABLE","w_sup0552_4")
     END IF
  END IF

  CALL sup0063_cria_temp_controle()

  LET m_temp_grade = TRUE

 END FUNCTION

#-------------------------------------------#
 FUNCTION sup0552_insere_temp_e_processa()
#-------------------------------------------#
  DEFINE l_ind      SMALLINT,
         l_msg      CHAR(50),
         l_ind2     SMALLINT

  CALL sup0552_cria_temp() RETURNING m_status

  INITIALIZE l_ind, l_ind2 TO NULL

  FOR l_ind2 = 1 TO m_ind
     IF ma_fornec[l_ind2].selecao = "S" THEN
        # Setado a variavel para nao abrir a selecao de arquivos por fornecedor
        # Se nao tiver varios fornecedores selecionados a variavel m_dir_arq_pendente vai estar preenchida
        # com o diretorio do unico fornecedor selecionado
        IF m_varios_fornecedores THEN
           LET m_arg = TRUE
           LET m_dir_arq_pendente   = ma_fornec_compl[l_ind2].dir_arq_pendente
           LET m_dir_arq_processado = ma_fornec_compl[l_ind2].dir_arq_processado
           LET m_dir_arquivo_erro   = ma_fornec_compl[l_ind2].dir_arquivo_erro
           LET m_dir_arq_consis     = ma_fornec_compl[l_ind2].dir_arq_consis
           CALL sup0552_carrega_arq_fornec(m_dir_arq_pendente) RETURNING m_status
           LET m_arg = m_eh_background
        END IF

        FOR l_ind = 1 TO m_ind_arq
           IF ma_caminho[l_ind].selecao = "S" THEN
              LET m_caminho            = m_dir_arq_pendente CLIPPED,ma_caminho[l_ind].caminho
              LET m_nom_arquivo        = ma_caminho[l_ind].caminho
              LET m_nom_arquivo_consis = m_dir_arq_consis CLIPPED, ma_caminho[l_ind].caminho

              WHENEVER ERROR CONTINUE
              LOAD FROM m_caminho DELIMITER "|" INSERT INTO w_sup0552_4
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 IF sqlca.sqlcode = -846 OR
                    sqlca.sqlcode = -236 OR
                    sqlca.sqlcode = -213 OR
                    sqlca.sqlcode = -263 THEN

                    CALL sup0552_cria_temp_cana()

                    WHENEVER ERROR CONTINUE
                    LOAD FROM m_caminho DELIMITER "|" INSERT INTO w_sup0552_4
                    WHENEVER ERROR STOP
                    IF sqlca.sqlcode <> 0 THEN
                       IF sqlca.sqlcode = -846 OR
                          sqlca.sqlcode = -236 OR
                          sqlca.sqlcode = -213 OR
                          sqlca.sqlcode = -263 THEN

                          CALL sup0552_cria_temp_controle_grade()

                          WHENEVER ERROR CONTINUE
                          LOAD FROM m_caminho DELIMITER "|" INSERT INTO w_sup0552_4
                          WHENEVER ERROR STOP
                          IF sqlca.sqlcode = -805 THEN
                             IF m_eh_background = FALSE THEN
                                ERROR "Arquivo ",m_caminho CLIPPED," não encontrado "
                                CALL LOG_refresh_display()
                             END IF
                             RETURN
                          ELSE
                             IF sqlca.sqlcode = -236 #OS510028
                             OR sqlca.sqlcode = -846 THEN
                                CALL log0030_mensagem("Importação não realizada. Arquivo com layout incorreto.","info")
                                RETURN
                             ELSE
                                IF sqlca.sqlcode <> 0 THEN
                                   IF m_eh_background = FALSE THEN
                                      CALL log003_err_sql("LEITURA","ARQUIVO")
                                      ERROR "Processamento cancelado"
                                      CALL LOG_refresh_display()
                                   END IF
                                   RETURN
                                END IF
                             END IF
                          END IF

                          CALL sup0552_subserie_nf_nula()#729321

                          CALL sup0552_importar("WMS")
                          CALL sup0552_limpa_w_sup0552_4()
                       ELSE
                          IF sqlca.sqlcode = -805 THEN
                             IF m_eh_background = FALSE THEN
                                ERROR " Arquivo ",l_nom_arquivo_new CLIPPED," nao encontrado "
                                CALL LOG_refresh_display()
                             END IF
                          ELSE
                             CALL log003_err_sql("CARGA-ARQUIVO","W_SUP0552_4 6")
                          END IF
                          IF m_eh_background = FALSE THEN
                             MESSAGE ""
                          END IF
                          RETURN
                       END IF
                    END IF
                 ELSE
                    IF sqlca.sqlcode = -805 THEN
                       IF m_eh_background = FALSE THEN
                          ERROR " Arquivo ",l_nom_arquivo_new CLIPPED," nao encontrado "
                          CALL LOG_refresh_display()
                       END IF
                    ELSE
                       CALL log003_err_sql("CARGA-ARQUIVO","W_SUP0552_4 6")
                    END IF
                    IF m_eh_background = FALSE THEN
                       MESSAGE ""
                    END IF
                    RETURN
                 END IF
              END IF
           END IF
        END FOR
     END IF
  END FOR

  CALL sup0552_gera_relat("WMS")

 END FUNCTION

#-----------------------------------------#
 FUNCTION sup0552_limpa_w_sup0552_4()
#-----------------------------------------#

 WHENEVER ERROR CONTINUE
 DELETE FROM w_sup0552_4 WHERE 1=1
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","W_SUP0552_4 4")
 END IF

 END FUNCTION

#-------------------------------------------#
 FUNCTION sup0552_carrega_array_fornec(l_tipo)
#-------------------------------------------#
 DEFINE l_tipo         CHAR(100)

 LET m_ind  = 1

 LET m_varios_fornecedores = FALSE
 INITIALIZE ma_fornec TO NULL

 WHENEVER ERROR CONTINUE
 DECLARE cq_carrega_fornec CURSOR WITH HOLD FOR
 SELECT sup_fornec_agto.fornecedor,
        sup_fornec_agto.dir_arq_pendente,
        sup_fornec_agto.dir_arq_processado,
        sup_fornec_agto.dir_arquivo_erro,
        sup_fornec_agto.dir_arq_consis
   FROM sup_fornec_agto
  WHERE sup_fornec_agto.empresa          = p_cod_empresa
    AND sup_fornec_agto.tip_movimentacao = 'N'
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_CARREGA_FORNEC")
    RETURN FALSE
 END IF

 WHENEVER ERROR CONTINUE
 OPEN cq_carrega_fornec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("OPEN","CQ_CARREGA_FORNEC")
    RETURN FALSE
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cq_carrega_fornec INTO ma_fornec[m_ind].cod_fornecedor,
                                ma_fornec_compl[m_ind].dir_arq_pendente,
                                ma_fornec_compl[m_ind].dir_arq_processado,
                                ma_fornec_compl[m_ind].dir_arquivo_erro,
                                ma_fornec_compl[m_ind].dir_arq_consis

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_CARREGA_FORNEC")
       CONTINUE FOREACH
    END IF

    IF l_tipo = "GENERICO" THEN
       IF ma_fornec[m_ind].cod_fornecedor <> " " THEN
          CONTINUE FOREACH
       END IF
    ELSE
       IF l_tipo = "WMS" THEN
          IF ma_fornec[m_ind].cod_fornecedor = " " THEN
             CONTINUE FOREACH
          END IF
       END IF
    END IF

    IF ma_fornec[m_ind].cod_fornecedor = " " THEN
       LET ma_fornec[m_ind].raz_social     = " GENERICO (NÃO WMS) "
    ELSE
       LET ma_fornec[m_ind].raz_social = sup0552_busca_nome_fornecedor(ma_fornec[m_ind].cod_fornecedor)
    END IF

    IF m_arg THEN
       LET ma_fornec[m_ind].selecao = "S"
       LET m_varios_fornecedores    = TRUE
    ELSE
       LET ma_fornec[m_ind].selecao = "N"
    END IF

    LET m_ind = m_ind + 1

 END FOREACH
 WHENEVER ERROR STOP
 CLOSE cq_carrega_fornec
 FREE  cq_carrega_fornec

 LET m_ind = m_ind - 1

 IF m_ind > 0 THEN
    RETURN TRUE
 ELSE
    IF NOT m_arg THEN
       CALL log0030_mensagem("Diretório não cadastrado para nenhum fornecedor (SUP5552).","info")
    END IF
    RETURN FALSE
 END IF


 END FUNCTION


 #----------------------------------------------------------#
 FUNCTION sup0552_busca_nome_fornecedor(l_cod_fornecedor)
#----------------------------------------------------------#
 DEFINE l_cod_fornecedor    LIKE fornecedor.cod_fornecedor,
        l_raz_social        LIKE fornecedor.raz_social

  INITIALIZE l_raz_social TO NULL
  WHENEVER ERROR CONTINUE
  SELECT raz_social
    INTO l_raz_social
    FROM fornecedor
   WHERE fornecedor.cod_fornecedor   = l_cod_fornecedor
  WHENEVER ERROR STOP

  IF sqlca.sqlcode <> 0 THEN
    LET l_raz_social = "Não cadastrado"
    RETURN l_raz_social
  ELSE
    RETURN l_raz_social
  END IF

 END FUNCTION

 #------------------------------------#
 FUNCTION sup0552_fornec_agendados()
#------------------------------------#
  DEFINE l_funcao      CHAR(015),
         l_arr_curr    SMALLINT,
         l_scr_line    SMALLINT,
         l_ind         SMALLINT,
         l_ind2        SMALLINT,
         l_num_selecao SMALLINT

  CALL log130_procura_caminho("sup05521") RETURNING m_comando
  OPEN WINDOW w_sup05521 AT 02, 02 WITH FORM m_comando
   ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST)

  CALL log006_exibe_teclas('01 02 07' ,p_versao)
  CURRENT WINDOW IS w_sup05521

  LET int_flag = 0

  CALL SET_COUNT(m_ind)

  INPUT ARRAY ma_fornec WITHOUT DEFAULTS FROM s_tela.*
    BEFORE ROW
        LET l_arr_curr = ARR_CURR()
        LET l_scr_line = SCR_LINE()

    AFTER FIELD selecao
       IF ma_fornec[l_arr_curr].selecao <> "S"
       AND ma_fornec[l_arr_curr].selecao <> "N" THEN
          NEXT FIELD selecao
       END IF
       IF ma_fornec[l_arr_curr].selecao = "S" THEN
          LET m_dir_arq_pendente     = ma_fornec_compl[l_arr_curr].dir_arq_pendente
          LET m_dir_arq_processado   = ma_fornec_compl[l_arr_curr].dir_arq_processado
          LET m_dir_arquivo_erro     = ma_fornec_compl[l_arr_curr].dir_arquivo_erro
          LET m_dir_arq_consis       = ma_fornec_compl[l_arr_curr].dir_arq_consis
          LET m_raz_social           = ma_fornec[l_arr_curr].raz_social
          #Setado m_arg para dentro da funcao selecionar todos os arquivos do forncedor
          LET m_arg = TRUE
          IF NOT sup0552_carrega_arq_fornec(m_dir_arq_pendente) THEN
             LET ma_fornec[l_arr_curr].selecao = "N"
             DISPLAY ma_fornec[l_arr_curr].selecao TO s_tela[l_scr_line].selecao
             LET m_existe_fornec = FALSE
             CALL LOG_refresh_display()
          END IF
          LET m_arg = m_eh_background
       END IF
    AFTER INPUT
       IF NOT int_flag THEN
          LET l_ind2 = 0
          FOR l_ind = 1 TO m_ind
             IF ma_fornec[l_ind].selecao = "S" THEN
                LET l_ind2 = l_ind2 + 1
                #Guarda o indice do fornecedor selecionado para abrir os arquivos
                LET l_num_selecao = l_ind
             END IF
          END FOR
          IF l_ind2 = 1 THEN
             LET m_dir_arq_pendente     = ma_fornec_compl[l_num_selecao].dir_arq_pendente
             LET m_dir_arq_processado   = ma_fornec_compl[l_num_selecao].dir_arq_processado
             LET m_dir_arquivo_erro     = ma_fornec_compl[l_num_selecao].dir_arquivo_erro
             LET m_dir_arq_consis       = ma_fornec_compl[l_num_selecao].dir_arq_consis
             LET m_raz_social           = ma_fornec[l_num_selecao].raz_social
             IF NOT sup0552_carrega_arq_fornec(m_dir_arq_pendente) THEN
                IF int_flag = 1 THEN
                   LET int_flag = 0
                   NEXT FIELD selecao
                END IF
                LET ma_fornec[l_arr_curr].selecao = "N"
                LET m_existe_fornec = FALSE
                DISPLAY ma_fornec[l_arr_curr].selecao TO s_tela[l_scr_line].selecao
                CALL LOG_refresh_display()
             END IF
             LET m_varios_fornecedores = FALSE
          ELSE
             IF l_ind2 > 1 THEN
                LET m_varios_fornecedores = TRUE
                LET m_existe_fornec       = TRUE
             ELSE
                LET m_varios_fornecedores = FALSE
                LET m_existe_fornec       = FALSE
             END IF
          END IF
       END IF

    ON KEY(control-w,f1)
       #lds IF NOT LOG_logix_versao5() THEN
       #lds CONTINUE INPUT
       #lds END IF
      CALL sup0552_help()

    ON KEY (control-f)
  END INPUT


  CLOSE WINDOW w_sup05521
  CURRENT WINDOW IS w_sup0552

 END FUNCTION

#------------------------------------#
 FUNCTION sup0552_exclusao_nota_2()
#------------------------------------#
    WHENEVER ERROR CONTINUE
      DELETE FROM cap_sest_senat
       WHERE empresa           = mr_w_sup0552_4.empresa
         AND ad_nf_origem      = mr_w_sup0552_4.nota_fiscal
         AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
         AND subserie_nf       = mr_w_sup0552_4.subserie_nf
         AND espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
         AND fornecedor        = mr_w_sup0552_4.fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","CAP_SEST_SENAT")
    END IF

    WHENEVER ERROR CONTINUE
      DELETE FROM cap_ret_inss_auton
       WHERE empresa           = mr_w_sup0552_4.empresa
         AND ad_nf_origem      = mr_w_sup0552_4.nota_fiscal
         AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
         AND subserie_nf       = mr_w_sup0552_4.subserie_nf
         AND espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
         AND fornecedor        = mr_w_sup0552_4.fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","CAP_RET_INSS_AUTON")
    END IF

    WHENEVER ERROR CONTINUE
      DELETE FROM cap_ret_inss_compl
       WHERE empresa           = mr_w_sup0552_4.empresa
         AND ad_nf_origem      = mr_w_sup0552_4.nota_fiscal
         AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
         AND subserie_nf       = mr_w_sup0552_4.subserie_nf
         AND espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
         AND fornecedor        = mr_w_sup0552_4.fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","CAP_RET_INSS_COMPL")
    END IF

    WHENEVER ERROR CONTINUE
      DELETE FROM cap_ret_proalminas
       WHERE empresa           = mr_w_sup0552_4.empresa
         AND ad_nf_origem      = mr_w_sup0552_4.nota_fiscal
         AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
         AND subserie_nf       = mr_w_sup0552_4.subserie_nf
         AND espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
         AND fornecedor        = mr_w_sup0552_4.fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","CAP_RET_PROALMINAS")
    END IF

    WHENEVER ERROR CONTINUE
      DELETE FROM cap_iss_compl
       WHERE empresa           = mr_w_sup0552_4.empresa
         AND ad_nota_fiscal    = mr_w_sup0552_4.nota_fiscal
         AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
         AND subserie_nf       = mr_w_sup0552_4.subserie_nf
         AND espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
         AND fornecedor        = mr_w_sup0552_4.fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","CAP_ISS_COMPL")
    END IF

    WHENEVER ERROR CONTINUE
      DELETE FROM cap_iss_eletronico
       WHERE empresa           = mr_w_sup0552_4.empresa
         AND ad_nota_fiscal    = mr_w_sup0552_4.nota_fiscal
         AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
         AND subserie_nf       = mr_w_sup0552_4.subserie_nf
         AND espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
         AND fornecedor        = mr_w_sup0552_4.fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","CAP_ISS_ELETRONICO")
    END IF
   WHENEVER ERROR STOP

END FUNCTION

 #-- OS 544109 fim --#

#---------------------------------#
 FUNCTION sup0552_importar(l_tipo)
#---------------------------------#
 DEFINE l_conta_div        SMALLINT,
        l_conta_import     SMALLINT,
        l_conta_itens      SMALLINT,
        l_conta_itens_erro SMALLINT,
        l_conta_dupl_erro  SMALLINT,
        l_texto            CHAR(75),
        l_ind              SMALLINT,
        l_num_aviso_rec    LIKE aviso_rec.num_aviso_rec,
        l_ies_tip_frete    CHAR(01),
        l_msg              CHAR(200),
        l_prim_digito      CHAR(01),
        l_empresa          LIKE nf_sup.cod_empresa,
        l_cod_transpor     LIKE nf_sup.cod_transpor,
        l_num_conhec       LIKE nf_sup.num_conhec,
        l_ser_conhec       LIKE nf_sup.ser_conhec,
        l_ssr_conhec       LIKE nf_sup.ssr_conhec,
        l_houve_erro       SMALLINT,
        l_status           SMALLINT,
        l_seq              SMALLINT,
        l_contador         SMALLINT,
        l_retorno          SMALLINT,
        l_num_ar           LIKE aviso_rec.num_aviso_rec,
        l_seq_aviso        LIKE aviso_rec.num_seq,
        l_caminho          CHAR(150),
        l_nom_arquivo      CHAR(100),
        l_nom_arquivo_new  CHAR(120),
        l_cod_fiscal_compl LIKE item_sup_compl.cod_fiscal_compl,
        l_data_hora        DATETIME YEAR TO SECOND,
        l_data_hora_c      CHAR(20),
        l_data_atual       LIKE aviso_rec.dat_inclusao_seq,
        l_hora_atual       CHAR(08),
        l_data_char        CHAR(25),
        l_uf_nf            LIKE uni_feder.cod_uni_feder,
        l_erro_gao         CHAR(01),
        lr_pedido_sup      RECORD LIKE pedido_sup.*,
        lr_ordem_sup       RECORD LIKE ordem_sup.*,
        lr_item            RECORD LIKE item.*,
        lr_item_sup        RECORD LIKE item_sup.*,
        l_conta_array      SMALLINT,
        l_count_relac      SMALLINT,
        l_tot_pct          DECIMAL(6,3),
        l_cod_seg_merc     LIKE dest_frete_sup4.cod_seg_merc,
        l_cod_cla_uso      LIKE dest_frete_sup4.cod_cla_uso,
        l_cod_area_char    CHAR(03),
        l_erro_dest_frete  CHAR(01),
        l_houve_erro_reg_c SMALLINT,
        l_cod_fisc_frete    LIKE par_sup_pad.par_txt,
        l_verif_gru_icms_st SMALLINT,
        l_forn_dif_pc       LIKE par_sup_pad.par_ies,
        l_oper              CHAR(02),
        l_hora_emb          CHAR(05),
        l_dat_hor_emb       CHAR(16),
        l_dat_hor_emb_aux   LIKE sac_embarque.dat_embarque,
        l_cgc_raiz_oc       CHAR(11),
        l_cgc_raiz_ped      CHAR(11),
        lr_atualiza_gao     RECORD
                            cod_empresa     LIKE empresa.cod_empresa,
                            num_aviso_rec   LIKE aviso_rec.num_aviso_rec,
                            num_seq         LIKE aviso_rec.num_seq,
                            valor_recebido  LIKE aviso_rec.pre_unit_nf,
                            dat_entrada_nf  LIKE nf_sup.dat_entrada_nf
                            END RECORD,
        lr_frete_sup_gao    RECORD
                            cod_empresa        LIKE frete_sup.cod_empresa,
                            num_conhec         LIKE frete_sup.num_conhec,
                            ser_conhec         LIKE frete_sup.ser_conhec,
                            ssr_conhec         LIKE frete_sup.ssr_conhec,
                            cod_transpor       LIKE frete_sup.cod_transpor,
                            val_frete          LIKE frete_sup.val_frete,
                            dat_entrada_conhec LIKE frete_sup.dat_entrada_conhec,
                            tip_frete          LIKE frete_sup.tip_frete
                            END RECORD,
        l_existe_h_tab      CHAR(14),         #OS 414316 #
        l_frete_vnd_sem_nf  SMALLINT

 DEFINE l_ies_tip_entrada    LIKE cod_fiscal_sup.ies_tip_entrada,
        l_grade_dimens       SMALLINT,
        l_cod_grp_despesa    LIKE grupo_ctr_desp.gru_ctr_desp,
        l_cod_cidade_frt     CHAR(05), #OS479018
        l_cod_cidade         CHAR(05), #OS479018
        l_cod_fornecedor_nf  LIKE nf_sup.cod_fornecedor, #OS479018
        l_work               SMALLINT,
        l_gravou             SMALLINT,
        l_num_aviso_rec_ant  LIKE aviso_rec.num_aviso_rec,
        l_cont               SMALLINT,
        l_aviso_rec_seq      LIKE aviso_rec.num_seq,
        l_compex             SMALLINT,
        l_serie              LIKE par_sup_pad.par_txt,
        l_val_inss           LIKE reten_inss.val_base_calc_inss,
        l_val_inss_funrural  LIKE reten_inss_rur.val_b_cal_inss_rur,
        l_ies_tip_fornec     LIKE fornecedor.ies_tip_fornec,
        l_erro_consistencia  SMALLINT,
        l_txt_consistencia   CHAR(59),
        l_tipo               CHAR(20), #-- OS 544109
        l_destino            CHAR(300),
        l_executa            CHAR(300),
        l_arquivo            CHAR(300),
        l_tabela             CHAR(50),
        l_passou_dup         SMALLINT,
        l_ies_pagamento      LIKE cond_pgto_cap.ies_pagamento, #--OS 563259
        l_sql_stmt           CHAR(2000),
        l_cont_dup           DECIMAL(05,0),
        l_num_dup            DECIMAL(05,0),
        l_erro               CHAR(60),
        l_primeira_vez       SMALLINT, #564600
        l_empresa_aux        CHAR(01),
        l_is_cliente55       SMALLINT,
        l_is_cliente357      SMALLINT,
        l_msg_erro           CHAR(59),
        l_data               DATETIME YEAR TO SECOND, #OS612607 Antonio
        l_ies_obj_entrada_fisc LIKE cod_fiscal_sup.ies_obj_entrada, #724885
        l_ies_obj_entrada_fisc_item LIKE cod_fiscal_sup.ies_obj_entrada, #724885
        l_num_seq              LIKE aviso_rec.num_seq,
        l_val_liquido_item     LIKE aviso_rec.val_liquido_item,
        l_val_tot_liq          LIKE aviso_rec.val_liquido_item,
        l_val_frt_imbutido_nf  LIKE sup_par_ar.parametro_val,
        l_ies_contrib_ipi      CHAR(01),
        l_val_despesa_aces_i   LIKE aviso_rec.val_despesa_aces_i,
        l_prim_nota_fornec     SMALLINT,
        l_cgc_cpf_wms          LIKE fornecedor.num_cgc_cpf,
        l_raz_soc_wms          LIKE fornecedor.raz_social,
        l_ins_est_wms          LIKE fornecedor.ins_estadual,
        l_cod_uf_wms           LIKE fornecedor.cod_uni_feder,
        l_erro_import          SMALLINT ,
        l_regime                CHAR(01),
        l_nom_arquivo2         CHAR(30)

 IF m_arg = FALSE THEN
    ERROR " Importando Notas Fiscais / Conhecimentos de Frete ... "
    CALL LOG_refresh_display()
 END IF

 LET m_houve_erro = FALSE
 LET m_temp_grade = FALSE

 CALL sup0552_valida_banco_dados()

 IF m_ies_wms_instalado = "S" THEN
    IF find4GLFunction('wms6612_create_table') THEN
       CALL wms6612_create_table()
    END IF
 END IF

 CALL sup1084_cria_temp()
 IF l_tipo = "NORMAL" THEN
    IF  m_import_auto = FALSE THEN
       CALL sup0552_cria_temp() RETURNING m_status
       IF NOT omcr69_cria_temp_t_telab(0) THEN
          RETURN
       END IF

       WHENEVER ERROR CONTINUE

       CALL log150_procura_caminho("UNL") RETURNING l_caminho

       IF m_arg = FALSE THEN
          LET l_nom_arquivo = l_caminho CLIPPED, m_nom_arquivo CLIPPED
       ELSE
          IF m_extensao_arq IS NOT NULL AND
             m_extensao_arq <> ' ' THEN
             LET l_nom_arquivo = m_nom_arquivo CLIPPED
          ELSE
             LET l_nom_arquivo = m_dir_arq_sup0552 CLIPPED, m_nom_arquivo CLIPPED
          END IF
       END IF

       LET m_nom_arquivo_consis = l_nom_arquivo

       IF g_ies_ambiente = "W" THEN
          --# CALL log120_procura_caminho("log2002") RETURNING m_comando
          LET l_nom_arquivo_new = l_nom_arquivo CLIPPED, ".new"

          --# LET m_comando = m_comando CLIPPED, " ",
          --#                 l_nom_arquivo CLIPPED, " ",
          --#                 l_nom_arquivo_new

          --# RUN m_comando

          IF NOT m_transacao_ativa THEN
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("BEGIN")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("TRANSACAO","BEGIN")
             END IF
             LET m_transacao_ativa = TRUE
          END IF

          LET m_temp_cana = FALSE

          ##O COMANDO LOAD FUNCIONA PARA TODOS OS BANCOS
          ##(INFORMIX, SQL SERVER E ORACLE), POREM A FORMA DE MONTAR O ARQUIVO
          ##TEXTO É QUE MUDA PARA OS CAMPOS DE DATA.
          ##- INFORMIX = 30/10/2003
          ##- ORACLE = 2003-10-30 00:00:00
          ##- SQL SERVER = 2003-10-30 00:00:00.000
          WHENEVER ERROR CONTINUE
          LOAD FROM l_nom_arquivo_new INSERT INTO w_sup0552_4
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             IF sqlca.sqlcode = -846 OR
                sqlca.sqlcode = -236 OR
                sqlca.sqlcode = -213 OR
                sqlca.sqlcode = -263 THEN
                IF NOT find4GLFunction('supy43_cliente_55') THEN
                   CALL sup0552_cria_temp_cana()
                   WHENEVER ERROR CONTINUE
                   LOAD FROM l_nom_arquivo_new INSERT INTO w_sup0552_4
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      IF sqlca.sqlcode = -846 OR
                         sqlca.sqlcode = -236 OR
                         sqlca.sqlcode = -213 OR
                         sqlca.sqlcode = -263 THEN

                         CALL sup0552_cria_temp_controle_grade()

                         WHENEVER ERROR CONTINUE
                         LOAD FROM l_nom_arquivo_new INSERT INTO w_sup0552_4
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            IF sqlca.sqlcode = -805 THEN
                               IF m_eh_background = FALSE THEN
                                  ERROR " Arquivo ",l_nom_arquivo_new CLIPPED," nao encontrado "
                                  CALL LOG_refresh_display()
                               END IF
                            ELSE
                               CALL log003_err_sql("CARGA-ARQUIVO","W_SUP0552_4 5 ")
                            END IF
                            IF m_eh_background = FALSE THEN
                               MESSAGE ""
                            END IF
                            WHENEVER ERROR CONTINUE
                            CALL log085_transacao("ROLLBACK")
                            WHENEVER ERROR STOP
                            IF sqlca.sqlcode <> 0 THEN
                               CALL log003_err_sql("TRANSACAO","ROLLBACK")
                            END IF
                            RETURN
                         END IF
                      ELSE
                         IF sqlca.sqlcode = -805 THEN
                             IF m_eh_background = FALSE THEN
                                ERROR " Arquivo ",l_nom_arquivo_new CLIPPED," nao encontrado "
                                CALL LOG_refresh_display()
                             END IF
                          ELSE
                             CALL log003_err_sql("CARGA-ARQUIVO","W_SUP0552_4 6")
                          END IF
                          IF m_eh_background = FALSE THEN
                             MESSAGE ""
                          END IF
                          WHENEVER ERROR CONTINUE
                          CALL log085_transacao("ROLLBACK")
                          WHENEVER ERROR STOP
                          IF sqlca.sqlcode <> 0 THEN
                             CALL log003_err_sql("TRANSACAO","ROLLBACK")
                          END IF
                          RETURN
                      END IF
                   END IF
                END IF
             ELSE
                IF sqlca.sqlcode = -805 THEN
                    IF m_eh_background = FALSE THEN
                       ERROR " Arquivo ",l_nom_arquivo_new CLIPPED," nao encontrado "
                       CALL LOG_refresh_display()
                    END IF
                 ELSE
                    CALL log003_err_sql("CARGA-ARQUIVO","W_SUP0552_4 6")
                 END IF
                 IF m_eh_background = FALSE THEN
                    MESSAGE ""
                 END IF
                 WHENEVER ERROR CONTINUE
                 CALL log085_transacao("ROLLBACK")
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode <> 0 THEN
                    CALL log003_err_sql("TRANSACAO","ROLLBACK")
                 END IF
                 RETURN
             END IF
          END IF

          IF m_transacao_ativa THEN
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("COMMIT")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("TRANSACAO","COMMIT")
                CALL log085_transacao("ROLLBACK") #OS596059
                RETURN
             END IF
             LET m_transacao_ativa = FALSE
          END IF

          LET m_nome_arquivo = l_nom_arquivo

          --# LET comando = "del ", l_nom_arquivo_new
          --# RUN comando

       ELSE
          IF NOT m_transacao_ativa THEN
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("BEGIN")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("TRANSACAO","BEGIN")
             END IF
             LET m_transacao_ativa = TRUE
          END IF
          CALL LOG_file_unix2dos(l_nom_arquivo,0) #Tupy libera permissão ao arquivo
          ##O COMANDO LOAD FUNCIONA PARA TODOS OS BANCOS
          ##(INFORMIX, SQL SERVER E ORACLE), POREM A FORMA DE MONTAR O ARQUIVO
          ##TEXTO É QUE MUDA PARA OS CAMPOS DE DATA.
          ##- INFORMIX = 30/10/2003
          ##- ORACLE = 2003-10-30 00:00:00
          ##- SQL SERVER = 2003-10-30 00:00:00.000
          WHENEVER ERROR CONTINUE
          LOAD FROM l_nom_arquivo INSERT INTO w_sup0552_4
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             IF sqlca.sqlcode = -846 OR
                sqlca.sqlcode = -236 OR
                sqlca.sqlcode = -213 OR
                sqlca.sqlcode = -263 THEN
                IF NOT find4GLFunction('supy43_cliente_55') THEN
                   CALL sup0552_cria_temp_cana()
                   WHENEVER ERROR CONTINUE
                   LOAD FROM l_nom_arquivo_new INSERT INTO w_sup0552_4
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      IF sqlca.sqlcode = -846 OR
                         sqlca.sqlcode = -236 OR
                         sqlca.sqlcode = -213 OR
                         sqlca.sqlcode = -263 THEN

                         CALL sup0552_cria_temp_controle_grade()

                         WHENEVER ERROR CONTINUE
                         LOAD FROM l_nom_arquivo INSERT INTO w_sup0552_4
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            IF sqlca.sqlcode = -805 THEN
                               IF m_eh_background = FALSE THEN
                                  ERROR " Arquivo ",l_nom_arquivo_new CLIPPED," nao encontrado "
                               END IF
                            ELSE
                               CALL log003_err_sql("CARGA-ARQUIVO","W_SUP0552_4")
                            END IF
                            IF m_eh_background = FALSE THEN
                               MESSAGE ""
                            END IF
                            CALL log085_transacao("ROLLBACK")
                            RETURN
                         END IF
                      ELSE
                         IF sqlca.sqlcode = -805 THEN
                            IF m_eh_background = FALSE THEN
                               ERROR " Arquivo ",l_nom_arquivo CLIPPED," nao encontrado "
                               CALL LOG_refresh_display()
                            END IF
                         ELSE
                            CALL log003_err_sql("LEITURA-ARQUIVO","W_SUP0552_4 7 ")
                         END IF
                         IF m_eh_background = FALSE THEN
                            MESSAGE ""
                         END IF
                         CALL log085_transacao("ROLLBACK")
                         RETURN
                      END IF
                   END IF
                END IF
             ELSE
                IF sqlca.sqlcode = -805 THEN
                   IF m_eh_background = FALSE THEN
                      ERROR " Arquivo ",l_nom_arquivo CLIPPED," nao encontrado "
                      CALL LOG_refresh_display()
                   END IF
                ELSE
                   CALL log003_err_sql("LEITURA-ARQUIVO","W_SUP0552_4 8")
                END IF
                IF m_eh_background = FALSE THEN
                   MESSAGE ""
                END IF
                WHENEVER ERROR CONTINUE
                CALL log085_transacao("ROLLBACK")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("TRANSACAO","ROLLBACK")
                END IF
                RETURN
             END IF
          END IF

          IF m_transacao_ativa THEN
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("COMMIT")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("TRANSACAO","COMMIT")
                CALL log085_transacao("ROLLBACK") #OS596059
                RETURN
             END IF
             LET m_transacao_ativa = FALSE
          END IF
          LET m_nome_arquivo = l_nom_arquivo
       END IF
    END IF
 END IF

 CALL sup0552_subserie_nf_nula()#729321

 IF m_arg = FALSE THEN
    OPEN WINDOW w_processo AT 10,10 WITH 08 ROWS, 58 COLUMNS
         ATTRIBUTE(BORDER, PROMPT LINE LAST, MESSAGE LINE LAST)

    DISPLAY "                      PROCESSANDO ...                     " AT 1,1 ATTRIBUTE(REVERSE)
    DISPLAY "NF/Conhec..: " AT 03,02
    DISPLAY "Serie......: " AT 04,02
    DISPLAY "Sub-Serie..: " AT 05,02
    DISPLAY "Especie....: " AT 06,02
    DISPLAY "Forn/Transp: " AT 07,02
    DISPLAY "Sequencia..: " AT 08,02
    CALL LOG_refresh_display()
 END IF

 LET l_data_atual = TODAY
 LET l_hora_atual = TIME

 INITIALIZE ma_array_consistencias TO NULL
 INITIALIZE mr_w_sup0552_4.* TO NULL
 LET l_houve_erro   = FALSE
 LET l_conta_div    = 0
 LET l_conta_import = 0

 LET l_verif_gru_icms_st = TRUE
 INITIALIZE m_gru_ctr_desp_frt TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"grupo_desp_frete_st")
      RETURNING m_gru_ctr_desp_frt, p_status
 IF m_gru_ctr_desp_frt IS NULL OR m_gru_ctr_desp_frt = " " THEN
    LET l_verif_gru_icms_st = FALSE
 END IF

 IF m_entrada_frete_em_transito = "S" THEN
    WHENEVER ERROR CONTINUE
    SELECT UNIQUE transportador
      FROM w_sup0552_4
     WHERE espc_nota_fiscal IN ("CON")
       AND tipo_registro     = "M"
    WHENEVER ERROR STOP

    IF sqlca.sqlcode = -284 THEN
       IF m_arg = TRUE THEN
          CALL errorlog("Arquivo a ser processado possui mais de uma transportadora. Processamento cancelado.")
          RETURN
       ELSE
          CALL log0030_mensagem("Arquivo a ser processado possui mais de uma transportadora. Processamento cancelado.","exclamation")
          RETURN
       END IF
    END IF
 END IF

 LET m_status_arquivo = 0

 CALL sup0552_carrega_tipo_registro_P()

 LET sql_stmt = " SELECT w_sup0552_4.* ",
                  " FROM w_sup0552_4 ",
                 " WHERE w_sup0552_4.tipo_registro = 'M' "
 #-- OS 544109 fim --#

 WHENEVER ERROR CONTINUE
 PREPARE var_query4 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","VAR_QUERY4")
    RETURN
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_mestre CURSOR WITH HOLD FOR var_query4
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_MESTRE")
 END IF

 WHENEVER ERROR CONTINUE
 OPEN cq_mestre
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("OPEN","CQ_MESTRE")
    RETURN
 END IF

 LET l_conta_array = 0

 WHILE TRUE
    IF l_houve_erro = TRUE THEN
       IF m_arg = FALSE THEN
          WHENEVER ERROR CONTINUE
          DELETE FROM w_sup0552_2
          WHERE nota_fiscal         =  mr_w_sup0552_4_it.nota_fiscal
            AND serie_nota_fiscal   =  mr_w_sup0552_4_it.serie_nota_fiscal
            AND subserie_nf         =  mr_w_sup0552_4_it.subserie_nf
            AND espc_nota_fiscal    =  mr_w_sup0552_4_it.espc_nota_fiscal
            AND fornecedor          =  mr_w_sup0552_4_it.fornecedor
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("DELETE","W_SUP0552_2")
          END IF
       END IF
    END IF

    CALL sup0552_efetua_rollback()
    CALL sup0552_insere_consistencia(TRUE)
    INITIALIZE ma_array_consistencias TO NULL
    INITIALIZE m_msg_erro TO NULL

    WHENEVER ERROR CONTINUE
    FETCH cq_mestre INTO mr_w_sup0552_4.*
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       IF sqlca.sqlcode <> 100 THEN
           CALL log003_err_sql("WHILE","CQ_MESTRE")
            CLOSE cq_mestre #764215#
            FREE cq_mestre #764215#
           RETURN
       END IF
       EXIT WHILE
    END IF

    IF NOT m_transacao_ativa THEN
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("BEGIN")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("TRANSACAO","BEGIN")
          EXIT WHILE
       END IF
       LET m_transacao_ativa = TRUE
    END IF

    #--inicio--OS 724885 #
    LET l_houve_erro = FALSE
    LET m_houve_erro = FALSE
    IF mr_w_sup0552_4.empresa_estabel = "MO" OR
       mr_w_sup0552_4.empresa_estabel = "EX" THEN
       IF LOG_existe_epl("sup0552y_before_process_importacao_nf") THEN
          CALL LOG_setVar("empresa",       mr_w_sup0552_4.empresa)
          CALL LOG_setVar("fornecedor",    mr_w_sup0552_4.fornecedor)
          CALL LOG_setVar("num_nf",        mr_w_sup0552_4.nota_fiscal)
          CALL LOG_setVar("ser_nf",        mr_w_sup0552_4.serie_nota_fiscal)
          CALL LOG_setVar("ssr_nf",        mr_w_sup0552_4.subserie_nf)
          CALL LOG_setVar("ies_especie_nf",mr_w_sup0552_4.espc_nota_fiscal)
          CALL LOG_setVar("acao_nf",       mr_w_sup0552_4.empresa_estabel)
          CALL sup0552y_before_process_importacao_nf()
       END IF
       IF mr_w_sup0552_4.empresa_estabel = "EX" THEN
          CALL log085_transacao("COMMIT")
          LET m_transacao_ativa = FALSE
          CONTINUE WHILE
       END IF
    END IF
    IF sup0552_busca_inf_compl_nf() = FALSE THEN
       IF m_registro_v = TRUE THEN
          LET l_conta_div   = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1

          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Não é permitido ter mais de uma inf compl de NF por NF."
       END IF
       LET l_erro_import = TRUE
      # CONTINUE WHILE 759692
    END IF

    IF sup0552_busca_inf_compl_fret() = FALSE THEN
       IF m_registro_f = TRUE THEN
          LET l_conta_div   = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1

          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Não é permitido ter mais de uma inf compl Frete por frete."
       END IF
       LET l_erro_import = TRUE
       #CONTINUE WHILE 759692
    END IF

    #CH A24579
    IF m_ies_wms_instalado = 'S' THEN
       IF  m_regime_aduaneiro IS NOT NULL
       AND m_regime_aduaneiro <> " " THEN
          IF find4GLFunction('wms6612_verifica_depositante_aduaneiro') THEN
             CALL wms6612_verifica_depositante_aduaneiro(mr_w_sup0552_4.fornecedor,FALSE)
                RETURNING l_status, l_regime
             IF l_status THEN
                IF  m_regime_aduaneiro <> 'D'
                AND m_regime_aduaneiro <> 'T'
                AND m_regime_aduaneiro <> 'N' THEN
                      LET l_conta_div   = l_conta_div + 1
                      LET l_conta_array = l_conta_array + 1

                      CALL sup0552_carrega_chave_consiste(l_conta_array)
                      LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Regime aduaneiro diferente de 'D','T' e 'N'."
                      LET l_erro_import = TRUE
                END IF
             ELSE
                IF m_regime_aduaneiro = 'D'
                OR m_regime_aduaneiro = 'T' THEN
                   LET l_conta_div   = l_conta_div + 1
                   LET l_conta_array = l_conta_array + 1

                   CALL sup0552_carrega_chave_consiste(l_conta_array)
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Depositante não parametrizado para regime aduaneiro."
                   LET l_erro_import = TRUE
                END IF
             END IF
          END IF
       END IF
    END IF

    IF sup0552_valida_grupo_despesa(mr_w_sup0552_4.empresa,
                                    mr_inf_compl_fret.grupo_despesa_item_fr) = FALSE THEN
       LET l_conta_div   = l_conta_div + 1
       LET l_conta_array = l_conta_array + 1

       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Grupo de despesa não cadastrado no SUP0260."
       LET l_erro_import = TRUE
       #CONTINUE WHILE 759692
    END IF

    IF sup0552_valida_tipo_despesa(mr_w_sup0552_4.empresa,
                                   mr_inf_compl_fret.cod_tip_despesa) = FALSE THEN
       LET l_conta_div   = l_conta_div + 1
       LET l_conta_array = l_conta_array + 1

       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Tipo de despesa não cadastrado no CAP0070."
       LET l_erro_import = TRUE
       #CONTINUE WHILE 759692
    END IF
    #---fim----OS 724885 #

    LET m_tipo_de_processo = sup0552_busca_tipo_processo()

    #-- OS 544109 inicio --#

    IF m_cod_mot_rem_terc = " " THEN
       LET l_conta_div   = l_conta_div + 1
       LET l_conta_array = l_conta_array + 1

       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Para controle de terceiros, ativar o código do motivo de remessa no sup8740. "
       LET l_erro_import = TRUE
       #CONTINUE WHILE 759692
    END IF

    IF sup0552_data_nf_com_mes_fechado() THEN
       LET l_conta_div   = l_conta_div + 1
       LET l_conta_array = l_conta_array + 1

       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
          "A data da nota fiscal ", mr_w_sup0552_4.nota_fiscal CLIPPED, " pertence ao período já fechado. "

       LET l_erro_import = TRUE
       #CONTINUE WHILE 759692
    END IF
    #-- OS 544109 fim --#

    IF m_arg = FALSE THEN
       DISPLAY mr_w_sup0552_4.nota_fiscal       AT 03,15
       DISPLAY mr_w_sup0552_4.serie_nota_fiscal AT 04,15
       DISPLAY mr_w_sup0552_4.subserie_nf       AT 05,15
       DISPLAY mr_w_sup0552_4.espc_nota_fiscal  AT 06,15
       DISPLAY mr_w_sup0552_4.fornecedor        AT 07,15
       CALL LOG_refresh_display()
    END IF

    IF  mr_w_sup0552_4.espc_nota_fiscal <> "CON"
    AND mr_w_sup0552_4.espc_nota_fiscal <> "COV" OR
        mr_inf_compl_fret.gerar_frete_con_como_ar = "S"   THEN #724885

       IF m_tipo_de_processo = "I" THEN
          #--inicio--OS 414316 #
          CALL sup0552_existe_h_nf_sup(mr_w_sup0552_4.empresa, mr_w_sup0552_4.nota_fiscal, mr_w_sup0552_4.serie_nota_fiscal,
                                       mr_w_sup0552_4.subserie_nf, mr_w_sup0552_4.espc_nota_fiscal, mr_w_sup0552_4.fornecedor)
             RETURNING l_existe_h_tab
          #---fim----OS 414316 #

          INITIALIZE m_cod_empresa_aux TO NULL
          IF sup0552_cons_nf_duplicada(mr_w_sup0552_4.fornecedor,
                                       mr_w_sup0552_4.espc_nota_fiscal,
                                       mr_w_sup0552_4.nota_fiscal,
                                       mr_w_sup0552_4.serie_nota_fiscal,
                                       mr_w_sup0552_4.subserie_nf) THEN

             LET l_conta_div   = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1

             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Nota Fiscal já cadastrada na empresa ", m_cod_empresa_aux
             LET m_status_arquivo = 1
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF

          WHENEVER ERROR CONTINUE
          SELECT nf_sup.num_nf
            FROM nf_sup
           WHERE nf_sup.cod_empresa    = mr_w_sup0552_4.empresa
             AND nf_sup.num_nf         = mr_w_sup0552_4.nota_fiscal
             AND nf_sup.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
             AND nf_sup.ssr_nf         = mr_w_sup0552_4.subserie_nf
   # OS 454017
   #         AND nf_sup.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
             AND nf_sup.cod_fornecedor = mr_w_sup0552_4.fornecedor
          WHENEVER ERROR STOP
          IF sqlca.sqlcode = 0 OR l_existe_h_tab IS NOT NULL THEN
             LET l_conta_div = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1

             CALL sup0552_carrega_chave_consiste(l_conta_array)

             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Nota Fiscal já foi importada.", l_existe_h_tab CLIPPED
             LET m_status_arquivo = 1
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF
          #--# Importação de NFe #--#
          IF m_utiliz_totvs_colab = "S" THEN

             CALL sup13429_existe_docum_pendente(mr_w_sup0552_4.empresa,           mr_w_sup0552_4.nota_fiscal,
                                                 mr_w_sup0552_4.serie_nota_fiscal, mr_w_sup0552_4.subserie_nf,
                                                 mr_w_sup0552_4.fornecedor,        mr_w_sup0552_4.dat_emis_nf)
                  RETURNING m_status, m_msg, m_comando3


             IF m_status = 1
             OR m_status = 2
             OR m_status = 3 THEN

                LET l_conta_div   = l_conta_div   + 1
                LET l_conta_array = l_conta_array + 1

                CALL sup0552_carrega_chave_consiste(l_conta_array)

                IF m_status = 1 THEN
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Existe arquivo XML pendente de integração para este documento no Monitor de Integração."
                ELSE
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  = m_msg
                END IF
                LET m_status_arquivo = 1
                LET l_erro_import = TRUE
             END IF
          END IF
       END IF

       LET l_num_aviso_rec = NULL
       IF m_tipo_de_processo = "I" THEN
          CALL sup0552_busca_num_aviso_rec(mr_w_sup0552_4.empresa, l_conta_array) RETURNING m_status,
                                                                                            l_num_aviso_rec,
                                                                                            l_conta_array

          IF NOT m_status THEN
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF
       ELSE
          WHENEVER ERROR CONTINUE
          SELECT num_aviso_rec
            INTO l_num_aviso_rec
            FROM nf_sup
           WHERE nf_sup.cod_empresa    = mr_w_sup0552_4.empresa
             AND nf_sup.num_nf         = mr_w_sup0552_4.nota_fiscal
             AND nf_sup.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
             AND nf_sup.ssr_nf         = mr_w_sup0552_4.subserie_nf
             AND nf_sup.cod_fornecedor = mr_w_sup0552_4.fornecedor
             AND ies_especie_nf        = mr_w_sup0552_4.espc_nota_fiscal
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Nota Fiscal não existe."
             LET m_status_arquivo = 1
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF
          LET mr_aviso_rec.num_aviso_rec = l_num_aviso_rec
       END IF

       INITIALIZE mr_nf_sup.*,
                  mr_aviso_rec_compl.*,
                  mr_audit_ar.*,
                  mr_nf_sup_erro.* TO NULL

       LET mr_nf_sup.cod_empresa        = mr_w_sup0552_4.empresa
       LET mr_nf_sup.cod_empresa_estab  = mr_w_sup0552_4.empresa_estabel
       LET mr_nf_sup.num_nf             = mr_w_sup0552_4.nota_fiscal
       LET mr_nf_sup.ser_nf             = mr_w_sup0552_4.serie_nota_fiscal
       LET mr_nf_sup.ssr_nf             = mr_w_sup0552_4.subserie_nf
       LET mr_nf_sup.ies_especie_nf     = mr_w_sup0552_4.espc_nota_fiscal
       LET mr_nf_sup.cod_fornecedor     = mr_w_sup0552_4.fornecedor

       WHENEVER ERROR CONTINUE
       SELECT fornecedor.cod_fornecedor
         FROM fornecedor
        WHERE fornecedor.cod_fornecedor   = mr_nf_sup.cod_fornecedor
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET l_conta_div   = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
              "Fornecedor desta NF nao esta cadastrado."
          LET m_status_arquivo = 1
          LET l_erro_import = TRUE
          #CONTINUE WHILE 759692
       END IF

       LET mr_nf_sup.num_conhec = mr_w_sup0552_4.num_conhec_frete

       IF mr_nf_sup.num_conhec IS NULL THEN
          LET mr_nf_sup.num_conhec = 0
       END IF

       LET mr_nf_sup.ser_conhec         = mr_w_sup0552_4.serie_conhec_frete

       IF mr_nf_sup.ser_conhec IS NULL THEN
          LET mr_nf_sup.ser_conhec = " "
       END IF

       LET mr_nf_sup.ssr_conhec         = mr_w_sup0552_4.subserie_conh_fret

       IF mr_nf_sup.ssr_conhec IS NULL THEN
          LET mr_nf_sup.ssr_conhec = 0
       END IF

       LET mr_nf_sup.cod_transpor       = mr_w_sup0552_4.transportador[1,15]

       IF mr_nf_sup.cod_transpor IS NOT NULL AND
          mr_nf_sup.cod_transpor <> " "     THEN

          WHENEVER ERROR CONTINUE
          SELECT fornecedor.ies_tip_fornec
            INTO l_ies_tip_fornec
            FROM fornecedor
           WHERE fornecedor.cod_fornecedor   = mr_nf_sup.cod_transpor
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET l_conta_div   = l_conta_div   + 1
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia = "Transportador desta NF nao esta cadastrado."
             LET m_status_arquivo = 1
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF

          IF m_permite_ent_fret_apenas_transp = "S" THEN
             IF l_ies_tip_fornec <> "2" AND
                l_ies_tip_fornec <> "5" THEN
                LET l_conta_div   = l_conta_div   + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia =
                    "Transp. não está cadastrado como Transportador (VDP0815)"
                LET m_status_arquivo = 1
                LET l_erro_import = TRUE
                #CONTINUE WHILE 759692
             END IF
          END IF

       ELSE
          LET mr_nf_sup.cod_transpor = " "
       END IF

       ### OS457682 ###
       IF mr_nf_sup.num_conhec <> 0 THEN
          INITIALIZE l_ies_tip_frete TO NULL
          WHENEVER ERROR CONTINUE
          SELECT frete_sup.tip_frete
            INTO l_ies_tip_frete
            FROM frete_sup
           WHERE frete_sup.cod_empresa  = mr_nf_sup.cod_empresa
             AND frete_sup.num_conhec   = mr_nf_sup.num_conhec
             AND frete_sup.ser_conhec   = mr_nf_sup.ser_conhec
             AND frete_sup.ssr_conhec   = mr_nf_sup.ssr_conhec
             AND frete_sup.cod_transpor = mr_nf_sup.cod_transpor
          WHENEVER ERROR STOP
          IF sqlca.sqlcode = 0 THEN
             IF l_ies_tip_frete = "V" THEN
                LET l_conta_div   = l_conta_div + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Frete venda não pode possuir NF de entrada relacionada."
                LET m_status_arquivo = 1
                LET l_erro_import = TRUE
                #CONTINUE WHILE 759692
             END IF
          ELSE
             WHENEVER ERROR CONTINUE
             SELECT pedido
               FROM w_sup0552_4
              WHERE w_sup0552_4.empresa           = mr_nf_sup.cod_empresa
                AND w_sup0552_4.nota_fiscal       = mr_nf_sup.num_conhec
                AND w_sup0552_4.serie_nota_fiscal = mr_nf_sup.ser_conhec
                AND w_sup0552_4.subserie_nf       = mr_nf_sup.ssr_conhec
                AND w_sup0552_4.fornecedor        = mr_nf_sup.cod_transpor
                AND w_sup0552_4.tipo_registro     = "F"
                AND w_sup0552_4.espc_nota_fiscal  = "COV"
             WHENEVER ERROR STOP
             IF sqlca.sqlcode = 0 THEN
                LET l_conta_div   = l_conta_div + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Frete venda não pode possuir NF de entrada relacionada."
                LET m_status_arquivo = 1
                LET l_erro_import = TRUE
                #CONTINUE WHILE 759692
             END IF
          END IF
       END IF

       IF mr_w_sup0552_4.dat_ent_nf < mr_w_sup0552_4.dat_emis_nf THEN
          LET l_conta_div   = l_conta_div   + 1
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia =
              "Data de entrada da NF menor que a data de emissao."
          LET m_status_arquivo = 1
          LET l_erro_import = TRUE
          #CONTINUE WHILE 759692
       END IF

       LET mr_nf_sup.num_aviso_rec      = l_num_aviso_rec
       LET mr_nf_sup.dat_emis_nf        = mr_w_sup0552_4.dat_emis_nf
       LET mr_nf_sup.dat_entrada_nf     = mr_w_sup0552_4.dat_ent_nf


       IF m_valida_nf_frete_filiais = 'S' THEN
             CALL sup3321_valida_nf_frete_existe(mr_nf_sup.num_nf ,
                                                 mr_nf_sup.ser_nf ,
                                                 mr_nf_sup.ssr_nf,
                                                 mr_nf_sup.cod_fornecedor,
                                                 mr_nf_sup.dat_emis_nf,
                                                 1,
                                                 TRUE)
             RETURNING l_status,l_msg
             IF NOT l_status THEN
                LET l_conta_div   = l_conta_div   + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia =
                    l_msg CLIPPED
                LET m_status_arquivo = 1
                LET l_erro_import = TRUE
             END IF
       END IF

       IF m_data_execut_atual = 'S' THEN
          LET mr_w_sup0552_4.dat_ent_nf = TODAY
          LET mr_nf_sup.dat_entrada_nf  = TODAY
       END IF

       IF sup0552_verifica_fechamento(mr_nf_sup.dat_entrada_nf,l_conta_array,"AR",FALSE) = FALSE THEN  #578942
          LET l_conta_div        = l_conta_div + 1
          LET l_conta_array      = l_conta_array + 1
          LET m_status_arquivo = 1
          LET l_erro_import = TRUE
          #CONTINUE WHILE 759692
       END IF

       LET mr_nf_sup.cod_regist_entrada = 01
       LET mr_nf_sup.val_tot_nf_c       = 0
       LET mr_nf_sup.val_tot_nf_d       = mr_w_sup0552_4.val_tot_decl_nf
       LET mr_nf_sup.val_tot_icms_nf_c  = 0
       LET mr_nf_sup.val_tot_icms_nf_d  = mr_w_sup0552_4.val_tot_decl_icms
       LET mr_nf_sup.val_ipi_calc       = 0
       LET mr_nf_sup.val_ipi_nf         = mr_w_sup0552_4.val_tot_decl_ipi
       LET mr_nf_sup.val_tot_desc       = 0
       LET mr_nf_sup.val_tot_acresc     = 0
       LET mr_nf_sup.val_despesa_aces   = mr_inf_compl_nf.valor_despesa_acessoria #724885
       LET mr_nf_sup.val_adiant         = 0
       LET mr_nf_sup.cnd_pgto_nf        = mr_w_sup0552_4.cond_pagto

       IF mr_nf_sup.val_despesa_aces  IS NULL OR
          mr_nf_sup.val_despesa_aces = " " THEN
          LET mr_nf_sup.val_despesa_aces   = 0
       END IF

       WHENEVER ERROR CONTINUE
       SELECT cond_pgto_cap.cnd_pgto
         FROM cond_pgto_cap
        WHERE cond_pgto_cap.cnd_pgto = mr_nf_sup.cnd_pgto_nf
       WHENEVER ERROR STOP

       IF sqlca.sqlcode <> 0 THEN
          LET l_conta_div        = l_conta_div + 1
          LET l_conta_array      = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
              "Cond.Pagamento desta NF nao esta cadastrada."
          LET m_status_arquivo = 1
          LET l_erro_import = TRUE
          #CONTINUE WHILE 759692
       END IF

       IF find4GLFunction('capy106_ies_tupy55') THEN
          IF mr_w_sup0552_4.pedido IS NULL AND mr_w_sup0552_4.ordem_compra IS NULL THEN
             IF NOT capy106_verifica_condicao_ativa(mr_nf_sup.cnd_pgto_nf) THEN
                LET l_conta_div        = l_conta_div + 1
                LET l_conta_array      = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Cond. Pagamento desta NF não está ativa.Ver CAP0215."
                LET m_status_arquivo = 1
                LET l_erro_import = TRUE
             END IF
          END IF
       END IF

       LET mr_nf_sup.cod_mod_embar      = mr_w_sup0552_4.modo_embarque
       IF NOT find4GLFunction('supy43_cliente_55') THEN
          LET l_ies_tip_frete = " "
          WHENEVER ERROR CONTINUE
          SELECT modo_embarque.ies_tip_frete
            INTO l_ies_tip_frete
            FROM modo_embarque
           WHERE modo_embarque.cod_mod_embar = mr_nf_sup.cod_mod_embar
          WHENEVER ERROR STOP


          IF sqlca.sqlcode <> 0 THEN
             LET l_conta_div        = l_conta_div + 1
             LET l_conta_array      = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Modo Embarque desta NF nao esta cadastrado."
             LET m_status_arquivo = 1
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF
       END IF

       IF mr_nf_sup.ies_especie_nf = "NFS" THEN
          IF mr_nf_sup.num_conhec <> 0 THEN
             LET l_conta_div   = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Nota fiscal de serviço não possui serviço de transporte."
             LET m_status_arquivo = 1
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF
          IF l_ies_tip_frete = 2 THEN
             LET l_conta_div   = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Nota fiscal de serviço não pode possuir frete a pagar."
             LET m_status_arquivo = 1
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF
       END IF

       LET mr_nf_sup.ies_tip_frete      = l_ies_tip_frete
       LET mr_nf_sup.ies_nf_com_erro    = "S"
       LET mr_nf_sup.nom_resp_aceite_er = NULL
       LET mr_nf_sup.ies_incl_cap       = "N"
       LET mr_nf_sup.ies_incl_contab    = "N"
       LET mr_nf_sup.cod_operacao       = mr_w_sup0552_4.cfop
       LET mr_nf_sup.ies_calc_subst     = NULL
       LET mr_nf_sup.val_bc_subst_d     = 0
       LET mr_nf_sup.val_icms_subst_d   = 0
       LET mr_nf_sup.val_bc_subst_c     = 0
       LET mr_nf_sup.val_icms_subst_c   = 0
       LET mr_nf_sup.cod_imp_renda      = NULL
       LET mr_nf_sup.val_imp_renda      = 0
       LET mr_nf_sup.ies_situa_import   = " "
       LET mr_nf_sup.val_bc_imp_renda   = 0
       LET mr_nf_sup.ies_nf_aguard_nfe  = mr_w_sup0552_4.tip_nota_fiscal

       LET mr_aviso_rec_compl.cod_empresa      = mr_w_sup0552_4.empresa
       LET mr_aviso_rec_compl.num_aviso_rec    = l_num_aviso_rec
       LET mr_aviso_rec_compl.cod_transpor     = NULL
       LET mr_aviso_rec_compl.den_transpor     = NULL
       LET mr_aviso_rec_compl.num_placa_veic   = NULL
       LET mr_aviso_rec_compl.num_di           = mr_inf_compl_nf.num_di #724885
       LET mr_aviso_rec_compl.ies_incl_import  = NULL
       LET mr_aviso_rec_compl.num_lote_pat     = NULL
       LET mr_aviso_rec_compl.cod_empresa_orig = NULL
       LET mr_aviso_rec_compl.cod_moeda_forn   = NULL
       LET mr_aviso_rec_compl.num_embarque     = NULL
       LET mr_aviso_rec_compl.ies_situacao     = "N"
       LET mr_aviso_rec_compl.nom_usuario      = p_user
       LET mr_aviso_rec_compl.dat_proces       = TODAY
       LET mr_aviso_rec_compl.hor_operac       = TIME
       LET mr_aviso_rec_compl.cod_fiscal_compl = mr_w_sup0552_4.cfop_compl

       # ÍNICIO 554725
       IF mr_w_sup0552_4.tip_nota_fiscal = "S" THEN
          LET l_conta_div        = l_conta_div + 1
          LET l_conta_array      = l_conta_array + 1
          CALL sup0552_gera_inconsistencia_nota(l_conta_div, l_conta_array,"Tipo da nota fiscal igual a 'S'")
          LET l_erro_import = TRUE
          #CONTINUE WHILE 759692
       END IF

       IF mr_w_sup0552_4.val_inss > 0 AND mr_w_sup0552_4.val_inss IS NOT NULL THEN
          CALL sup0552_carrega_inss(mr_w_sup0552_4.empresa) RETURNING l_val_inss

          IF l_val_inss <> mr_reten_inss.val_reten_inss THEN
             LET l_conta_div        = l_conta_div + 1
             LET l_conta_array      = l_conta_array + 1
             CALL sup0552_gera_inconsistencia_nota(l_conta_div, l_conta_array,"Valor INSS importado difere do calculado.")
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF
       END IF

       IF mr_w_sup0552_4.val_inss_funrural > 0 AND mr_w_sup0552_4.val_inss_funrural IS NOT NULL THEN
          CALL sup0552_carrega_inss_funrural(mr_w_sup0552_4.empresa) RETURNING l_val_inss_funrural

          IF l_val_inss_funrural <> mr_reten_inss_rur.val_reten_inss_rur THEN
             LET l_conta_div        = l_conta_div + 1
             LET l_conta_array      = l_conta_array + 1
             CALL sup0552_gera_inconsistencia_nota(l_conta_div, l_conta_array,"Valor INSS FUNRURAL importado difere do calculado.")
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF
       END IF

       IF NOT sup0552_valida_serie_nota_fiscal() THEN
          LET l_conta_div        = l_conta_div + 1
          LET l_conta_array      = l_conta_array + 1
          CALL sup0552_gera_inconsistencia_nota(l_conta_div, l_conta_array,"Série da nota fiscal não é válida.")
          LET l_erro_import = TRUE
          #CONTINUE WHILE 759692
       END IF

       IF NOT sup0552_valida_insc_estad() THEN
          LET l_conta_div        = l_conta_div + 1
          LET l_conta_array      = l_conta_array + 1
          CALL sup0552_gera_inconsistencia_nota(l_conta_div, l_conta_array,"Inscrição estadual não cadastrada para o fornecedor.")
          LET l_erro_import = TRUE
          #CONTINUE WHILE 759692
       END IF

       CALL sup0552_carrega_compl_nota(l_num_aviso_rec)

       CALL sup0552_processa_sup_info_adic_nfe(l_num_aviso_rec) RETURNING l_houve_erro, l_erro_consistencia,l_txt_consistencia

       IF l_erro_consistencia THEN
          LET l_conta_div        = l_conta_div + 1
          LET l_conta_array      = l_conta_array + 1
          LET l_conta_itens_erro = l_conta_itens_erro + 1
          CALL sup0552_gera_inconsistencia_nota(l_conta_div,
                                                l_conta_array,
                                                l_txt_consistencia)
          LET l_erro_import = TRUE
          #CONTINUE WHILE 759692
       END IF
       # FIM 554725

# 472924
       INITIALIZE l_ies_tip_entrada, p_status TO NULL
       CALL sup0686_retorna_tipo_entrada(mr_nf_sup.cod_operacao,
                                         mr_aviso_rec_compl.cod_fiscal_compl)
          RETURNING p_status,
                    m_ies_tip_entrada_nf
       IF (mr_nf_sup.ies_especie_nf = "NFD" OR
           (m_ies_tip_entrada_nf = "5"      AND
            mr_nf_sup.ies_especie_nf <> "NFC")) THEN
          LET mr_aviso_rec_compl.cod_operacao  = gr_par_sup_compl.cod_operac_dev_cli
       ELSE
          LET mr_aviso_rec_compl.cod_operacao  = gr_par_sup.cod_operac_estoq_c
       END IF

       LET l_conta_itens      = 0
       LET l_conta_itens_erro = 0

       INITIALIZE mr_w_sup0552_4_it.* TO NULL
       LET l_gravou = FALSE

       #-- OS 544109 inicio --#
       IF NOT l_houve_erro THEN
          IF m_tipo_de_processo = "E"
          OR m_tipo_de_processo = "A" THEN
             CALL sup0552_efetua_consistencia(l_conta_array) RETURNING m_status
             # m_status é a quantidade do l_conta_array da funcao sup0552_efetua_consistenci
             IF m_status > l_conta_array THEN
                LET l_conta_div = l_conta_div + 1
                LET l_conta_array = m_status
                LET l_houve_erro = TRUE
                LET l_erro_import = TRUE
                #CONTINUE WHILE 759692
             END IF
          END IF
       ELSE
          LET l_erro_import = TRUE
          #CONTINUE WHILE 759692
       END IF
       IF m_tipo_de_processo = "A" THEN
          LET m_tipo_de_processo = "I"
       ELSE
          IF m_tipo_de_processo = "E" THEN
             LET l_erro_import = TRUE
             #CONTINUE WHILE 759692
          END IF
       END IF
       #-- OS 544109 fim --#

       #-- OS 544109 inicio --#
       LET sql_stmt = " SELECT *      ",
                      "   FROM w_sup0552_4 ",
                      "  WHERE empresa           = '", mr_w_sup0552_4.empresa           ,"' ",
                      "    AND nota_fiscal       = '", mr_w_sup0552_4.nota_fiscal       ,"' ",
                      "    AND serie_nota_fiscal = '", mr_w_sup0552_4.serie_nota_fiscal ,"' ",
                      "    AND subserie_nf       = '", mr_w_sup0552_4.subserie_nf       ,"' ",
                      "    AND espc_nota_fiscal  = '", mr_w_sup0552_4.espc_nota_fiscal  ,"' ",
                      "    AND fornecedor        = '", mr_w_sup0552_4.fornecedor        ,"' ",
                      "    AND tipo_registro     = 'D'                                  ",
                      "  ORDER BY empresa,               ",
                      "           nota_fiscal,           ",
                      "           serie_nota_fiscal,     ",
                      "           subserie_nf,           ",
                      "           espc_nota_fiscal,      ",
                      "           fornecedor,            ",
                      "           sequencia              "
       #-- OS 544109 fim --#

       WHENEVER ERROR CONTINUE
       PREPARE var_query9 FROM sql_stmt
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("PREPARE","var_query9")
           CLOSE cq_mestre #764215#
           FREE cq_mestre #764215#
          RETURN
       END IF

       WHENEVER ERROR CONTINUE
       DECLARE cq_itens CURSOR WITH HOLD FOR var_query9
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DECLARE","CQ_ITENS")
           CLOSE cq_mestre #764215#
           FREE cq_mestre #764215#
          RETURN
       END IF

       #IMP-WMS
       # VERIFICAR SE JA EXISTE ALGUMA NF PARA ESTE FORNECEDOR
       LET l_prim_nota_fornec = FALSE
       IF m_ies_wms_instalado = 'S' AND m_nf_deposit = 'S' THEN
          WHENEVER ERROR CONTINUE
          SELECT DISTINCT 1
            FROM nf_sup
           WHERE nf_sup.cod_empresa = mr_w_sup0552_4.empresa
             AND nf_sup.cod_fornecedor = mr_w_sup0552_4.fornecedor
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> NOTFOUND THEN
             CALL log003_err_sql("SELECT","NF_SUP")
              CLOSE cq_mestre #764215#
              FREE cq_mestre #764215#
             RETURN
          END IF
          IF sqlca.sqlcode = NOTFOUND THEN
             LET l_prim_nota_fornec = TRUE
          END IF
       END IF
       # FIM IMP-WMS

       WHENEVER ERROR CONTINUE
       FOREACH cq_itens INTO mr_w_sup0552_4_it.*
       WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("FOREACH","CQ_ITENS")
          END IF

          #--inicio--OS 724885 #
          IF sup0552_busca_inf_compl_item() = FALSE THEN
             IF m_registro_t = TRUE THEN
                LET l_conta_div   = l_conta_div + 1
                LET l_conta_array = l_conta_array + 1
                LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                    mr_w_sup0552_4_it.nota_fiscal
                LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                    mr_w_sup0552_4_it.serie_nota_fiscal
                LET ma_array_consistencias[l_conta_array].subserie_nf       =
                    mr_w_sup0552_4_it.subserie_nf
                LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                    mr_w_sup0552_4_it.espc_nota_fiscal
                LET ma_array_consistencias[l_conta_array].fornecedor        =
                    mr_w_sup0552_4_it.fornecedor
                LET ma_array_consistencias[l_conta_array].sequencia         =
                    mr_w_sup0552_4_it.sequencia
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Não é permitido ter mais de uma inf compl item por item."
                LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
                LET l_conta_itens_erro = l_conta_itens_erro + 1
             END IF
             LET m_status_arquivo = 1
             LET m_houve_erro     = TRUE
             LET l_erro_import = TRUE
             #CONTINUE FOREACH 759692
          END IF

          #CH A24579
          IF m_ies_wms_instalado = 'S' THEN
             IF  m_regime_aduaneiro  IS NOT NULL
             OR  m_regime_aduaneiro  <> ' '
             OR  m_regime_aduaneiro  <> 'N' THEN
                IF find4GLFunction('wms6612_verifica_depositante_aduaneiro') THEN
                   CALL wms6612_verifica_depositante_aduaneiro(mr_w_sup0552_4.fornecedor,FALSE)
                      RETURNING l_status, l_regime
                   IF l_status THEN
                      CALL wms6612_verifica_item_generico_msg_batch(mr_w_sup0552_4_it.item,m_regime_aduaneiro)
                         RETURNING l_status,l_msg
                      IF NOT l_status THEN
                         LET l_conta_div   = l_conta_div + 1
                         LET l_conta_array = l_conta_array + 1

                         CALL sup0552_carrega_chave_consiste(l_conta_array)
                         LET ma_array_consistencias[l_conta_array].txt_consistencia  = l_msg CLIPPED
                         LET l_erro_import = TRUE
                      ELSE
                         IF m_peso_item IS NOT NULL THEN
                            IF m_regime_aduaneiro = 'T' THEN
                               #IF NOT wms6612_tem_conferencia_alfandegado_ar(mr_w_sup0552_4.empresa, l_num_aviso_rec) THEN
                               CALL wms6612_seta_peso_item(m_peso_item)
                               CALL wms6612_grava_temp_peso(l_num_aviso_rec,
                                                            mr_w_sup0552_4_it.item ,
                                                            mr_w_sup0552_4_it.sequencia)
                               #END IF
                            ELSE
                               LET l_conta_div   = l_conta_div + 1
                               LET l_conta_array = l_conta_array + 1

                               CALL sup0552_carrega_chave_consiste(l_conta_array)
                               LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Não informar peso para itens de regime alfandegário DA."
                               LET l_erro_import = TRUE
                            END IF
                         END IF
                      END IF
                   END IF
                END IF
             END IF
          END IF

          IF sup0552_valida_grupo_despesa(mr_w_sup0552_4.empresa,
                                          mr_inf_compl_item.grupo_despesa_item) = FALSE THEN
             LET l_conta_div   = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1
             LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                 mr_w_sup0552_4_it.nota_fiscal
             LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                 mr_w_sup0552_4_it.serie_nota_fiscal
             LET ma_array_consistencias[l_conta_array].subserie_nf       =
                 mr_w_sup0552_4_it.subserie_nf
             LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                 mr_w_sup0552_4_it.espc_nota_fiscal
             LET ma_array_consistencias[l_conta_array].fornecedor        =
                 mr_w_sup0552_4_it.fornecedor
             LET ma_array_consistencias[l_conta_array].sequencia         =
                 mr_w_sup0552_4_it.sequencia
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Grupo de despesa não cadastrado no SUP0260."
             LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
             LET l_conta_itens_erro = l_conta_itens_erro + 1
             LET m_status_arquivo = 1
             LET m_houve_erro     = TRUE
             LET l_erro_import = TRUE
             #CONTINUE FOREACH 759692
          END IF

          IF sup0552_valida_tipo_despesa(mr_w_sup0552_4.empresa,
                                         mr_inf_compl_item.cod_tip_despesa) = FALSE THEN
             LET l_conta_div   = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1
             LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                 mr_w_sup0552_4_it.nota_fiscal
             LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                 mr_w_sup0552_4_it.serie_nota_fiscal
             LET ma_array_consistencias[l_conta_array].subserie_nf       =
                 mr_w_sup0552_4_it.subserie_nf
             LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                 mr_w_sup0552_4_it.espc_nota_fiscal
             LET ma_array_consistencias[l_conta_array].fornecedor        =
                 mr_w_sup0552_4_it.fornecedor
             LET ma_array_consistencias[l_conta_array].sequencia         =
                 mr_w_sup0552_4_it.sequencia
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Tipo de despesa não cadastrado no CAP0070."
             LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
             LET l_conta_itens_erro = l_conta_itens_erro + 1
             LET m_status_arquivo = 1
             LET m_houve_erro     = TRUE
             LET l_erro_import = TRUE
             #CONTINUE FOREACH 759692
          END IF

          IF sup0552_valida_cod_registro_entrada(mr_w_sup0552_4.empresa,
                                                 mr_inf_compl_nf.registro_entrada) = FALSE THEN
             LET l_conta_div   = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1
             LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                 mr_w_sup0552_4_it.nota_fiscal
             LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                 mr_w_sup0552_4_it.serie_nota_fiscal
             LET ma_array_consistencias[l_conta_array].subserie_nf       =
                 mr_w_sup0552_4_it.subserie_nf
             LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                 mr_w_sup0552_4_it.espc_nota_fiscal
             LET ma_array_consistencias[l_conta_array].fornecedor        =
                 mr_w_sup0552_4_it.fornecedor
             LET ma_array_consistencias[l_conta_array].sequencia         =
                 mr_w_sup0552_4_it.sequencia
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Registro de entrada não cadastrado no SUP0610."
             LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
             LET l_conta_itens_erro = l_conta_itens_erro + 1
             LET m_status_arquivo = 1
             LET m_houve_erro     = TRUE
             LET l_erro_import = TRUE
             #CONTINUE FOREACH 759692
          END IF
          #---fim----OS 724885 #

           IF m_arg = FALSE THEN
              DISPLAY mr_w_sup0552_4_it.sequencia AT 08,15
              CALL LOG_refresh_display()
           END IF

          LET l_conta_itens = l_conta_itens + 1

          INITIALIZE lr_pedido_sup.*, lr_ordem_sup.* TO NULL

          IF mr_w_sup0552_4_it.pedido <> 0 THEN

             WHENEVER ERROR CONTINUE
             SELECT pedido_sup.cod_empresa          ,
                    pedido_sup.num_pedido           ,
                    pedido_sup.num_versao           ,
                    pedido_sup.ies_versao_atual     ,
                    pedido_sup.ies_situa_ped        ,
                    pedido_sup.dat_emis             ,
                    pedido_sup.dat_liquidac         ,
                    pedido_sup.cod_fornecedor       ,
                    pedido_sup.cod_moeda            ,
                    pedido_sup.cnd_pgto             ,
                    pedido_sup.cod_mod_embar        ,
                    pedido_sup.num_texto_loc_entr   ,
                    pedido_sup.num_texto_loc_cobr   ,
                    pedido_sup.cod_transpor         ,
                    pedido_sup.val_tot_ped          ,
                    pedido_sup.cod_comprador        ,
                    pedido_sup.ies_impresso         ,
                    pedido_sup.ies_ped_automatic
               INTO lr_pedido_sup.cod_empresa          ,
                    lr_pedido_sup.num_pedido           ,
                    lr_pedido_sup.num_versao           ,
                    lr_pedido_sup.ies_versao_atual     ,
                    lr_pedido_sup.ies_situa_ped        ,
                    lr_pedido_sup.dat_emis             ,
                    lr_pedido_sup.dat_liquidac         ,
                    lr_pedido_sup.cod_fornecedor       ,
                    lr_pedido_sup.cod_moeda            ,
                    lr_pedido_sup.cnd_pgto             ,
                    lr_pedido_sup.cod_mod_embar        ,
                    lr_pedido_sup.num_texto_loc_entr   ,
                    lr_pedido_sup.num_texto_loc_cobr   ,
                    lr_pedido_sup.cod_transpor         ,
                    lr_pedido_sup.val_tot_ped          ,
                    lr_pedido_sup.cod_comprador        ,
                    lr_pedido_sup.ies_impresso         ,
                    lr_pedido_sup.ies_ped_automatic
               FROM pedido_sup
              WHERE pedido_sup.cod_empresa      = mr_w_sup0552_4_it.empresa
                AND pedido_sup.num_pedido       = mr_w_sup0552_4_it.pedido
                AND pedido_sup.ies_versao_atual = "S"
             WHENEVER ERROR STOP

             IF sqlca.sqlcode <> 0 THEN
                LET l_conta_div        = l_conta_div + 1
                LET l_conta_array = l_conta_array + 1
                LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                    mr_w_sup0552_4_it.nota_fiscal
                LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                    mr_w_sup0552_4_it.serie_nota_fiscal
                LET ma_array_consistencias[l_conta_array].subserie_nf       =
                    mr_w_sup0552_4_it.subserie_nf
                LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                    mr_w_sup0552_4_it.espc_nota_fiscal
                LET ma_array_consistencias[l_conta_array].fornecedor        =
                    mr_w_sup0552_4_it.fornecedor
                LET ma_array_consistencias[l_conta_array].sequencia         =
                    mr_w_sup0552_4_it.sequencia
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Pedido de Compra nao encontrado."
                LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
                LET l_conta_itens_erro = l_conta_itens_erro + 1
                LET m_status_arquivo = 1
                LET m_houve_erro     = TRUE
                LET l_erro_import = TRUE
                #CONTINUE FOREACH   759692
             END IF
          END IF
          IF lr_pedido_sup.cod_mod_embar IS NOT NULL THEN
             LET mr_nf_sup.cod_mod_embar = lr_pedido_sup.cod_mod_embar
          END IF

          LET l_ies_tip_frete = " "
          WHENEVER ERROR CONTINUE
          SELECT modo_embarque.ies_tip_frete
            INTO l_ies_tip_frete
            FROM modo_embarque
           WHERE modo_embarque.cod_mod_embar = mr_nf_sup.cod_mod_embar
          WHENEVER ERROR STOP

          IF sqlca.sqlcode <> 0 THEN
             LET l_ies_tip_frete = 1
          END IF

          LET mr_nf_sup.ies_tip_frete      = l_ies_tip_frete
          IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
             WHENEVER ERROR CONTINUE
               SELECT cod_empresa,
                      num_oc,
                      num_versao,
                      num_versao_pedido,
                      ies_versao_atual,
                      cod_item,
                      num_pedido,
                      ies_situa_oc,
                      ies_origem_oc,
                      ies_item_estoq,
                      ies_imobilizado,
                      cod_unid_med,
                      dat_emis,
                      qtd_solic,
                      dat_entrega_prev,
                      fat_conver_unid,
                      qtd_recebida,
                      pre_unit_oc,
                      dat_ref_cotacao,
                      ies_tip_cotacao,
                      pct_ipi,
                      cod_moeda,
                      cod_fornecedor,
                      num_cotacao,
                      cnd_pgto,
                      cod_mod_embar,
                      num_docum,
                      gru_ctr_desp,
                      cod_secao_receb,
                      cod_progr,
                      cod_comprador,
                      pct_aceite_dif,
                      ies_tip_entrega,
                      ies_liquida_oc,
                      dat_abertura_oc,
                      num_oc_origem,
                      qtd_origem,
                      dat_origem,
                      ies_tip_incid_ipi,
                      ies_tip_incid_icms,
                      cod_fiscal,
                      cod_tip_despesa,
                      ies_insp_recebto,
                      ies_tipo_inspecao
                 INTO lr_ordem_sup.cod_empresa,
                      lr_ordem_sup.num_oc,
                      lr_ordem_sup.num_versao,
                      lr_ordem_sup.num_versao_pedido,
                      lr_ordem_sup.ies_versao_atual,
                      lr_ordem_sup.cod_item,
                      lr_ordem_sup.num_pedido,
                      lr_ordem_sup.ies_situa_oc,
                      lr_ordem_sup.ies_origem_oc,
                      lr_ordem_sup.ies_item_estoq,
                      lr_ordem_sup.ies_imobilizado,
                      lr_ordem_sup.cod_unid_med,
                      lr_ordem_sup.dat_emis,
                      lr_ordem_sup.qtd_solic,
                      lr_ordem_sup.dat_entrega_prev,
                      lr_ordem_sup.fat_conver_unid,
                      lr_ordem_sup.qtd_recebida,
                      lr_ordem_sup.pre_unit_oc,
                      lr_ordem_sup.dat_ref_cotacao,
                      lr_ordem_sup.ies_tip_cotacao,
                      lr_ordem_sup.pct_ipi,
                      lr_ordem_sup.cod_moeda,
                      lr_ordem_sup.cod_fornecedor,
                      lr_ordem_sup.num_cotacao,
                      lr_ordem_sup.cnd_pgto,
                      lr_ordem_sup.cod_mod_embar,
                      lr_ordem_sup.num_docum,
                      lr_ordem_sup.gru_ctr_desp,
                      lr_ordem_sup.cod_secao_receb,
                      lr_ordem_sup.cod_progr,
                      lr_ordem_sup.cod_comprador,
                      lr_ordem_sup.pct_aceite_dif,
                      lr_ordem_sup.ies_tip_entrega,
                      lr_ordem_sup.ies_liquida_oc,
                      lr_ordem_sup.dat_abertura_oc,
                      lr_ordem_sup.num_oc_origem,
                      lr_ordem_sup.qtd_origem,
                      lr_ordem_sup.dat_origem,
                      lr_ordem_sup.ies_tip_incid_ipi,
                      lr_ordem_sup.ies_tip_incid_icms,
                      lr_ordem_sup.cod_fiscal,
                      lr_ordem_sup.cod_tip_despesa,
                      lr_ordem_sup.ies_insp_recebto,
                      lr_ordem_sup.ies_tipo_inspecao
               FROM ordem_sup
              WHERE ordem_sup.cod_empresa      = mr_w_sup0552_4_it.empresa
                AND ordem_sup.num_oc           = mr_w_sup0552_4_it.ordem_compra
                AND ordem_sup.ies_versao_atual = "S"
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                LET l_conta_div        = l_conta_div + 1
                LET l_conta_array      = l_conta_array + 1
                LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                    mr_w_sup0552_4_it.nota_fiscal
                LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                    mr_w_sup0552_4_it.serie_nota_fiscal
                LET ma_array_consistencias[l_conta_array].subserie_nf       =
                    mr_w_sup0552_4_it.subserie_nf
                LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                    mr_w_sup0552_4_it.espc_nota_fiscal
                LET ma_array_consistencias[l_conta_array].fornecedor        =
                    mr_w_sup0552_4_it.fornecedor
                LET ma_array_consistencias[l_conta_array].sequencia         =
                    mr_w_sup0552_4_it.sequencia
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Ordem de Compra nao encontrada."
                LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
                LET l_conta_itens_erro = l_conta_itens_erro + 1
                LET m_status_arquivo = 1
                LET m_houve_erro     = TRUE
                LET l_erro_import = TRUE
                #CONTINUE FOREACH 759692
             END IF

             IF m_import_auto = TRUE THEN
                LET mr_w_sup0552_4_it.item = lr_ordem_sup.cod_item
             END IF

             IF mr_w_sup0552_4_it.pedido <> 0 THEN
                IF lr_ordem_sup.num_pedido <> mr_w_sup0552_4_it.pedido THEN
                   LET l_conta_div        = l_conta_div + 1
                   LET l_conta_array      = l_conta_array + 1
                   LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                       mr_w_sup0552_4_it.nota_fiscal
                   LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                       mr_w_sup0552_4_it.serie_nota_fiscal
                   LET ma_array_consistencias[l_conta_array].subserie_nf       =
                       mr_w_sup0552_4_it.subserie_nf
                   LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                       mr_w_sup0552_4_it.espc_nota_fiscal
                   LET ma_array_consistencias[l_conta_array].fornecedor        =
                       mr_w_sup0552_4_it.fornecedor
                   LET ma_array_consistencias[l_conta_array].sequencia         =
                       mr_w_sup0552_4_it.sequencia
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                       "Pedido de compra pertence a outra OC."
                   LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
                   LET l_conta_itens_erro = l_conta_itens_erro + 1
                   LET m_status_arquivo = 1
                   LET m_houve_erro     = TRUE
                   LET l_erro_import = TRUE
                   #CONTINUE FOREACH 759692
                END IF
             END IF


             IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
                CALL sup0552_verifica_item_arquivo(l_conta_div, l_conta_array,l_conta_itens_erro, 'OC')
                     RETURNING l_conta_div, l_conta_array, l_conta_itens_erro
                IF m_houve_nc_nf = TRUE THEN
                    LET m_status_arquivo = 1
                    LET m_houve_erro     = TRUE
                    LET l_erro_import = TRUE
                END IF
             ELSE
                IF mr_w_sup0552_4_it.pedido <> 0 THEN
                   CALL sup0552_verifica_item_arquivo(l_conta_div, l_conta_array,l_conta_itens_erro, 'PC')
                        RETURNING l_conta_div, l_conta_array, l_conta_itens_erro
                   IF m_houve_nc_nf = TRUE THEN
                       LET m_status_arquivo = 1
                       LET m_houve_erro     = TRUE
                       LET l_erro_import = TRUE
                   END IF
                END IF
             END IF

             IF lr_ordem_sup.cod_fornecedor <> lr_pedido_sup.cod_fornecedor THEN
                INITIALIZE l_forn_dif_pc TO NULL
                WHENEVER ERROR CONTINUE
                SELECT par_sup_pad.par_ies
                  INTO l_forn_dif_pc
                  FROM par_sup_pad
                 WHERE par_sup_pad.cod_empresa   = lr_ordem_sup.cod_empresa
                   AND par_sup_pad.cod_parametro = "ies_foif_pc"
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   LET l_forn_dif_pc = "N"
                END IF

                IF l_forn_dif_pc <> "S" THEN
                   INITIALIZE l_cgc_raiz_oc TO NULL
                   WHENEVER ERROR CONTINUE
                   SELECT fornecedor.num_cgc_cpf
                     INTO l_cgc_raiz_oc
                     FROM fornecedor
                    WHERE fornecedor.cod_fornecedor   = lr_ordem_sup.cod_fornecedor
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      LET l_cgc_raiz_oc = "y"
                   END IF

                   INITIALIZE l_cgc_raiz_ped TO NULL
                   WHENEVER ERROR CONTINUE
                   SELECT fornecedor.num_cgc_cpf
                     INTO l_cgc_raiz_ped
                     FROM fornecedor
                    WHERE fornecedor.cod_fornecedor   = lr_pedido_sup.cod_fornecedor
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      LET l_cgc_raiz_ped = "x"
                   END IF

                   IF l_forn_dif_pc <> "R" OR
                     (l_forn_dif_pc  = "R" AND l_cgc_raiz_oc <> l_cgc_raiz_ped) THEN
                      LET l_conta_div        = l_conta_div + 1
                      LET l_conta_array      = l_conta_array + 1
                      LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                          mr_w_sup0552_4_it.nota_fiscal
                      LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                          mr_w_sup0552_4_it.serie_nota_fiscal
                      LET ma_array_consistencias[l_conta_array].subserie_nf       =
                          mr_w_sup0552_4_it.subserie_nf
                      LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                          mr_w_sup0552_4_it.espc_nota_fiscal
                      LET ma_array_consistencias[l_conta_array].fornecedor        =
                          mr_w_sup0552_4_it.fornecedor
                      LET ma_array_consistencias[l_conta_array].sequencia         =
                          mr_w_sup0552_4_it.sequencia
                      LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                          "Fornecedor pedido de compra diferente do fornecedor OC."
                      LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
                      LET l_conta_itens_erro = l_conta_itens_erro + 1
                      LET m_status_arquivo = 1
                      LET m_houve_erro     = TRUE
                      LET l_erro_import = TRUE
                      #CONTINUE FOREACH 759692
                   END IF
                END IF
             END IF
          END IF

          INITIALIZE mr_aviso_rec.*,
                     mr_ar_compl_sq.*,
                     mr_ar_ped.*,
                     lr_item.*,
                     lr_item_sup.* TO NULL

          WHENEVER ERROR CONTINUE
          SELECT item.cod_empresa          ,
                 item.cod_item             ,
                 item.den_item             ,
                 item.den_item_reduz       ,
                 item.cod_unid_med         ,
                 item.pes_unit             ,
                 item.ies_tip_item         ,
                 item.dat_cadastro         ,
                 item.ies_ctr_estoque      ,
                 item.cod_local_estoq      ,
                 item.ies_tem_inspecao     ,
                 item.cod_local_insp       ,
                 item.ies_ctr_lote         ,
                 item.cod_familia          ,
                 item.gru_ctr_estoq        ,
                 item.cod_cla_fisc         ,
                 item.pct_ipi              ,
                 item.cod_lin_prod         ,
                 item.cod_lin_recei        ,
                 item.cod_seg_merc         ,
                 item.cod_cla_uso          ,
                 item.fat_conver           ,
                 item.ies_situacao
            INTO lr_item.cod_empresa          ,
                 lr_item.cod_item             ,
                 lr_item.den_item             ,
                 lr_item.den_item_reduz       ,
                 lr_item.cod_unid_med         ,
                 lr_item.pes_unit             ,
                 lr_item.ies_tip_item         ,
                 lr_item.dat_cadastro         ,
                 lr_item.ies_ctr_estoque      ,
                 lr_item.cod_local_estoq      ,
                 lr_item.ies_tem_inspecao     ,
                 lr_item.cod_local_insp       ,
                 lr_item.ies_ctr_lote         ,
                 lr_item.cod_familia          ,
                 lr_item.gru_ctr_estoq        ,
                 lr_item.cod_cla_fisc         ,
                 lr_item.pct_ipi              ,
                 lr_item.cod_lin_prod         ,
                 lr_item.cod_lin_recei        ,
                 lr_item.cod_seg_merc         ,
                 lr_item.cod_cla_uso          ,
                 lr_item.fat_conver           ,
                 lr_item.ies_situacao
            FROM item
           WHERE item.cod_empresa = mr_w_sup0552_4_it.empresa
             AND item.cod_item    = mr_w_sup0552_4_it.item
          WHENEVER ERROR STOP

          IF sqlca.sqlcode <> 0 THEN
             LET l_conta_div        = l_conta_div + 1
             LET l_conta_array      = l_conta_array + 1
             LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                 mr_w_sup0552_4_it.nota_fiscal
             LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                 mr_w_sup0552_4_it.serie_nota_fiscal
             LET ma_array_consistencias[l_conta_array].subserie_nf       =
                 mr_w_sup0552_4_it.subserie_nf
             LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                 mr_w_sup0552_4_it.espc_nota_fiscal
             LET ma_array_consistencias[l_conta_array].fornecedor        =
                 mr_w_sup0552_4_it.fornecedor
             LET ma_array_consistencias[l_conta_array].sequencia         =
                 mr_w_sup0552_4_it.sequencia
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Item nao cadastrado."
             LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
             LET l_conta_itens_erro = l_conta_itens_erro + 1
             LET m_status_arquivo = 1
             LET m_houve_erro     = TRUE
             LET l_erro_import = TRUE
             #CONTINUE FOREACH 759692
          END IF

          IF mr_w_sup0552_4_it.item  IS NOT NULL AND
             mr_w_sup0552_4_it.item  <> " "      THEN
             IF lr_item.ies_situacao= 'I' THEN

                LET l_conta_div        = l_conta_div + 1
                LET l_conta_array      = l_conta_array + 1
                LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                    mr_w_sup0552_4_it.nota_fiscal
                LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                    mr_w_sup0552_4_it.serie_nota_fiscal
                LET ma_array_consistencias[l_conta_array].subserie_nf       =
                    mr_w_sup0552_4_it.subserie_nf
                LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                    mr_w_sup0552_4_it.espc_nota_fiscal
                LET ma_array_consistencias[l_conta_array].fornecedor        =
                    mr_w_sup0552_4_it.fornecedor
                LET ma_array_consistencias[l_conta_array].sequencia         =
                    mr_w_sup0552_4_it.sequencia
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Item inativo."
                LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
                LET l_conta_itens_erro = l_conta_itens_erro + 1
                LET m_status_arquivo = 1
                LET m_houve_erro     = TRUE
                LET l_erro_import = TRUE
                #CONTINUE FOREACH 759692
             ELSE
                IF lr_item.ies_situacao = 'C' THEN
                   LET l_conta_div        = l_conta_div + 1
                   LET l_conta_array      = l_conta_array + 1
                   LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                       mr_w_sup0552_4_it.nota_fiscal
                   LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                       mr_w_sup0552_4_it.serie_nota_fiscal
                   LET ma_array_consistencias[l_conta_array].subserie_nf       =
                       mr_w_sup0552_4_it.subserie_nf
                   LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                       mr_w_sup0552_4_it.espc_nota_fiscal
                   LET ma_array_consistencias[l_conta_array].fornecedor        =
                       mr_w_sup0552_4_it.fornecedor
                   LET ma_array_consistencias[l_conta_array].sequencia         =
                       mr_w_sup0552_4_it.sequencia
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                       "Item cancelado."
                   LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
                   LET l_conta_itens_erro = l_conta_itens_erro + 1
                   LET m_status_arquivo = 1
                   LET m_houve_erro     = TRUE
                   LET l_erro_import = TRUE
                   #CONTINUE FOREACH 759692
                END IF
             END IF
          END IF

          WHENEVER ERROR CONTINUE
          SELECT item_sup.cod_empresa          ,
                 item_sup.cod_item             ,
                 item_sup.ies_item_iso_9000    ,
                 item_sup.ies_rateio_compra    ,
                 item_sup.gru_ctr_desp         ,
                 item_sup.cod_progr            ,
                 item_sup.cod_comprador        ,
                 item_sup.cod_cor              ,
                 item_sup.cod_tamanho          ,
                 item_sup.cod_local_receb      ,
                 item_sup.num_conta            ,
                 item_sup.dat_especif          ,
                 item_sup.dat_atualiz_esp      ,
                 item_sup.qtd_lote_minimo      ,
                 item_sup.qtd_lote_maximo      ,
                 item_sup.qtd_lote_multiplo    ,
                 item_sup.qtd_lote_economic    ,
                 item_sup.qtd_pt_pedid         ,
                 item_sup.qtd_estoq_seg        ,
                 item_sup.qtd_estoq_max        ,
                 item_sup.ies_lista_pt_ped     ,
                 item_sup.qtd_dias_est_seg     ,
                 item_sup.qtd_dias_est_max     ,
                 item_sup.qtd_meses_media      ,
                 item_sup.vid_util             ,
                 item_sup.tmp_necessar_p_ped   ,
                 item_sup.tmp_necessar_fabr    ,
                 item_sup.tmp_transpor         ,
                 item_sup.tmp_inspecao         ,
                 item_sup.tmp_necessar_cont    ,
                 item_sup.tmp_reposic_emerg    ,
                 item_sup.dat_compra_futura    ,
                 item_sup.pre_unit_ult_compr   ,
                 item_sup.ies_tip_incid_ipi    ,
                 item_sup.ies_tip_incid_icms   ,
                 item_sup.cod_fiscal           ,
                 item_sup.cod_tip_despesa      ,
                 item_sup.ies_freq_entrega
            INTO lr_item_sup.cod_empresa          ,
                 lr_item_sup.cod_item             ,
                 lr_item_sup.ies_item_iso_9000    ,
                 lr_item_sup.ies_rateio_compra    ,
                 lr_item_sup.gru_ctr_desp         ,
                 lr_item_sup.cod_progr            ,
                 lr_item_sup.cod_comprador        ,
                 lr_item_sup.cod_cor              ,
                 lr_item_sup.cod_tamanho          ,
                 lr_item_sup.cod_local_receb      ,
                 lr_item_sup.num_conta            ,
                 lr_item_sup.dat_especif          ,
                 lr_item_sup.dat_atualiz_esp      ,
                 lr_item_sup.qtd_lote_minimo      ,
                 lr_item_sup.qtd_lote_maximo      ,
                 lr_item_sup.qtd_lote_multiplo    ,
                 lr_item_sup.qtd_lote_economic    ,
                 lr_item_sup.qtd_pt_pedid         ,
                 lr_item_sup.qtd_estoq_seg        ,
                 lr_item_sup.qtd_estoq_max        ,
                 lr_item_sup.ies_lista_pt_ped     ,
                 lr_item_sup.qtd_dias_est_seg     ,
                 lr_item_sup.qtd_dias_est_max     ,
                 lr_item_sup.qtd_meses_media      ,
                 lr_item_sup.vid_util             ,
                 lr_item_sup.tmp_necessar_p_ped   ,
                 lr_item_sup.tmp_necessar_fabr    ,
                 lr_item_sup.tmp_transpor         ,
                 lr_item_sup.tmp_inspecao         ,
                 lr_item_sup.tmp_necessar_cont    ,
                 lr_item_sup.tmp_reposic_emerg    ,
                 lr_item_sup.dat_compra_futura    ,
                 lr_item_sup.pre_unit_ult_compr   ,
                 lr_item_sup.ies_tip_incid_ipi    ,
                 lr_item_sup.ies_tip_incid_icms   ,
                 lr_item_sup.cod_fiscal           ,
                 lr_item_sup.cod_tip_despesa      ,
                 lr_item_sup.ies_freq_entrega
            FROM item_sup
           WHERE item_sup.cod_empresa = mr_w_sup0552_4_it.empresa
             AND item_sup.cod_item    = mr_w_sup0552_4_it.item
          WHENEVER ERROR STOP

          IF sqlca.sqlcode <> 0 THEN
             LET l_conta_div        = l_conta_div + 1
             LET l_conta_array      = l_conta_array + 1
             LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                 mr_w_sup0552_4_it.nota_fiscal
             LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                 mr_w_sup0552_4_it.serie_nota_fiscal
             LET ma_array_consistencias[l_conta_array].subserie_nf       =
                 mr_w_sup0552_4_it.subserie_nf
             LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                 mr_w_sup0552_4_it.espc_nota_fiscal
             LET ma_array_consistencias[l_conta_array].fornecedor        =
                 mr_w_sup0552_4_it.fornecedor
             LET ma_array_consistencias[l_conta_array].sequencia         =
                 mr_w_sup0552_4_it.sequencia
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Item-SUPRIMENTOS nao cadastrado."
             LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
             LET l_conta_itens_erro = l_conta_itens_erro + 1
             LET m_status_arquivo = 1
             LET m_houve_erro     = TRUE
             LET l_erro_import = TRUE
             #CONTINUE FOREACH 759692
          END IF

          # INICIO 554725
          IF mr_w_sup0552_4_it.desc_nota IS NOT NULL THEN
             IF mr_w_sup0552_4_it.desc_nota > mr_w_sup0552_4_it.val_tot_decl_nf  THEN
                LET l_conta_div        = l_conta_div + 1
                LET l_conta_array      = l_conta_array + 1
                LET l_conta_itens_erro = l_conta_itens_erro + 1
                CALL sup0552_gera_inconsistencia_item(l_conta_div,
                                                      l_conta_array,
                                                      l_conta_itens_erro,
                                                      "Valor de desconto superior ao valor do item.")
                LET l_erro_import = TRUE
                #CONTINUE FOREACH 759692
             END IF
             LET mr_aviso_rec.val_desc_item = mr_w_sup0552_4_it.desc_nota / mr_w_sup0552_4_it.qtd_decl_nf
          ELSE
             LET mr_aviso_rec.val_desc_item = 0
          END IF

          CALL sup0552_processa_sup_ar_imp_cana(l_num_aviso_rec) RETURNING l_houve_erro, l_erro_consistencia,l_txt_consistencia

          IF l_erro_consistencia THEN
             LET l_conta_div        = l_conta_div + 1
             LET l_conta_array      = l_conta_array + 1
             LET l_conta_itens_erro = l_conta_itens_erro + 1
             CALL sup0552_gera_inconsistencia_item(l_conta_div,
                                                   l_conta_array,
                                                   l_conta_itens_erro,
                                                   l_txt_consistencia)
             LET l_erro_import = TRUE
             #CONTINUE FOREACH 759692
          END IF
          # FIM 554725

          IF l_erro_import = TRUE THEN #759692
             CONTINUE FOREACH
          END IF


          LET mr_aviso_rec.cod_empresa          = mr_w_sup0552_4_it.empresa
          LET mr_aviso_rec.cod_empresa_estab    = mr_w_sup0552_4_it.empresa_estabel
          LET mr_aviso_rec.num_aviso_rec        = l_num_aviso_rec
          LET mr_aviso_rec.num_seq              = mr_w_sup0552_4_it.sequencia
          LET mr_aviso_rec.dat_inclusao_seq     = TODAY
          LET mr_aviso_rec.ies_liberacao_cont   = "N"
          LET mr_aviso_rec.ies_incl_almox       = "N"
          LET mr_aviso_rec.ies_receb_fiscal     = "S"
          LET mr_aviso_rec.ies_liberacao_ar     = "1"
          LET mr_aviso_rec.ies_diverg_listada   = "N"

          IF m_import_auto = TRUE THEN
             IF l_num_aviso_rec_ant IS NULL THEN
                LET l_num_aviso_rec_ant = l_num_aviso_rec
             END IF

             IF l_num_aviso_rec_ant = l_num_aviso_rec AND l_cont > 1 THEN
                LET l_aviso_rec_seq      = l_aviso_rec_seq + 1
                LET mr_aviso_rec.num_seq = l_aviso_rec_seq
             ELSE
                LET mr_aviso_rec.num_seq = 1
                LET l_cont = 2
                LET l_aviso_rec_seq = 1
                LET l_num_aviso_rec_ant = l_num_aviso_rec
             END IF
          ELSE
             LET mr_aviso_rec.num_seq = mr_w_sup0552_4_it.sequencia
          END IF

          IF mr_w_sup0552_4_it.ordem_compra <> 0  THEN
             LET mr_aviso_rec.ies_item_estoq    = lr_ordem_sup.ies_item_estoq
          ELSE
             IF mr_w_sup0552_4.espc_nota_fiscal = 'NFR' THEN
                IF mr_w_sup0552_4_it.serie_conhec_frete IS NOT NULL AND
                   mr_w_sup0552_4_it.serie_conhec_frete = 'N' THEN
                   LET mr_aviso_rec.ies_item_estoq = 'N'
                ELSE
                   LET mr_aviso_rec.ies_item_estoq = lr_item.ies_ctr_estoque
                END IF
             ELSE
                LET mr_aviso_rec.ies_item_estoq = lr_item.ies_ctr_estoque
             END IF
          END IF

          LET mr_aviso_rec.ies_controle_lote    = lr_item.ies_ctr_lote

          IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
             LET mr_aviso_rec.cod_comprador     = lr_ordem_sup.cod_comprador
          ELSE
             LET mr_aviso_rec.cod_comprador     = 0
          END IF

          LET mr_aviso_rec.num_pedido           = mr_w_sup0552_4_it.pedido

          IF mr_aviso_rec.num_pedido IS NULL THEN
             LET mr_aviso_rec.num_pedido = 0
          END IF

          LET mr_aviso_rec.num_oc               = mr_w_sup0552_4_it.ordem_compra

          IF mr_aviso_rec.num_oc IS NULL THEN
             LET mr_aviso_rec.num_oc = 0
          END IF

          LET mr_aviso_rec.cod_item             = mr_w_sup0552_4_it.item

          IF mr_aviso_rec.ies_item_estoq = "S" THEN
             LET mr_aviso_rec.den_item = lr_item.den_item
          ELSE
             WHENEVER ERROR CONTINUE
             SELECT ordem_sup_txt.tex_observ_oc
               INTO mr_aviso_rec.den_item
               FROM ordem_sup_txt
              WHERE ordem_sup_txt.cod_empresa   = lr_ordem_sup.cod_empresa
                AND ordem_sup_txt.num_oc        = lr_ordem_sup.num_oc
                AND ordem_sup_txt.num_seq       = 1
                AND ordem_sup_txt.ies_tip_texto = "P"
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                LET mr_aviso_rec.den_item = lr_item.den_item
             END IF
          END IF

          LET mr_aviso_rec.cod_cla_fisc         = lr_item.cod_cla_fisc

          IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
             LET mr_aviso_rec.cod_unid_med_nf   = lr_ordem_sup.cod_unid_med
          ELSE
             LET mr_aviso_rec.cod_unid_med_nf   = lr_item.cod_unid_med
          END IF

          LET mr_aviso_rec.pre_unit_nf          = mr_w_sup0552_4_it.pre_unit_nf
          LET mr_aviso_rec.val_despesa_aces_i   = 0

          IF mr_inf_compl_item.ies_da_bc_ipi IS NOT NULL AND #724885
             mr_inf_compl_item.ies_da_bc_ipi <> " " THEN
             LET mr_aviso_rec.ies_da_bc_ipi     = mr_inf_compl_item.ies_da_bc_ipi
          ELSE
             LET mr_aviso_rec.ies_da_bc_ipi     = "N"
          END IF

          IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
             LET mr_aviso_rec.ies_tip_incid_ipi  = lr_ordem_sup.ies_tip_incid_ipi
          ELSE
             LET mr_aviso_rec.ies_tip_incid_ipi  = lr_item_sup.ies_tip_incid_ipi
          END IF

          CALL sup0552_busca_cod_incid_ipi(mr_nf_sup.cod_fornecedor,
                                           mr_aviso_rec.ies_tip_incid_ipi)
               RETURNING mr_aviso_rec.cod_incid_ipi,
                         mr_aviso_rec.pct_direito_cred

          LET mr_aviso_rec.pct_ipi_declarad      = mr_w_sup0552_4_it.pct_ipi

          #--inicio--OS 724885  #
          IF m_assumir_pct_ipi_decl_sup0552 = "S" THEN
             LET mr_aviso_rec.pct_ipi_tabela = mr_aviso_rec.pct_ipi_declarad
          ELSE
             IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
                LET mr_aviso_rec.pct_ipi_tabela     = lr_ordem_sup.pct_ipi
             ELSE
                LET mr_aviso_rec.pct_ipi_tabela     = lr_item.pct_ipi
             END IF
          END IF
          #---fim----OS 724885 #

          LET mr_aviso_rec.ies_bitributacao      = "N"
          LET mr_aviso_rec.val_base_c_ipi_it     = mr_w_sup0552_4_it.bas_calc_ipi
          LET mr_aviso_rec.val_base_c_ipi_da     = 0
          LET mr_aviso_rec.val_ipi_decl_item     = mr_w_sup0552_4_it.val_ipi
          LET mr_aviso_rec.val_ipi_calc_item     = 0
          LET mr_aviso_rec.val_ipi_desp_aces     = 0
          #LET mr_aviso_rec.val_desc_item         = 0

          IF mr_w_sup0552_4_it.qtd_decl_nf > 0 THEN ##OS 598025
             LET mr_aviso_rec.val_liquido_item      = (mr_w_sup0552_4_it.pre_unit_nf *
                                                       mr_w_sup0552_4_it.qtd_decl_nf)
          ELSE
             LET mr_aviso_rec.val_liquido_item      = mr_w_sup0552_4_it.pre_unit_nf
          END IF

          LET mr_aviso_rec.val_contabil_item     = mr_aviso_rec.val_liquido_item +
                                                   mr_aviso_rec.val_ipi_decl_item
          LET mr_aviso_rec.qtd_declarad_nf       = mr_w_sup0552_4_it.qtd_decl_nf

          IF mr_aviso_rec.ies_situa_ar <> "C" THEN
             LET mr_aviso_rec.qtd_recebida       = mr_w_sup0552_4_it.qtd_decl_nf
          ELSE
             LET mr_aviso_rec.qtd_recebida       = 0
          END IF

          LET mr_aviso_rec.qtd_devolvid          = 0
          LET mr_aviso_rec.dat_devoluc           = NULL
          LET mr_aviso_rec.val_devoluc           = 0
          LET mr_aviso_rec.num_nf_dev            = 0
          LET mr_aviso_rec.qtd_rejeit            = 0
          LET mr_aviso_rec.qtd_liber             = 0
          LET mr_aviso_rec.qtd_liber_excep       = 0
          LET mr_aviso_rec.cus_tot_item          = 0

          LET l_prim_digito = " "

          CASE mr_w_sup0552_4.cfop[1,1]
             WHEN "5"
                LET l_prim_digito = "1"
             WHEN "6"
                LET l_prim_digito = "2"
             WHEN "7"
                LET l_prim_digito = "3"
          END CASE

          #--inicio--OS 724885 #
          INITIALIZE l_ies_obj_entrada_fisc, l_status TO NULL
          CALL sup0686_retorna_objetivo_entrada(mr_w_sup0552_4.cfop,
                                                mr_w_sup0552_4.cfop_compl)
                                                RETURNING l_status,
                                                          l_ies_obj_entrada_fisc
          IF m_ler_param_cfop99_do_sup8740 = "S"  AND
             m_ies_cfop99                  = "S"  AND
             l_ies_obj_entrada_fisc        = "99" THEN

             LET mr_aviso_rec.cod_fiscal_item    = l_prim_digito,mr_w_sup0552_4.cfop[2,5]
             LET mr_ar_compl_sq.cod_fiscal_compl = mr_w_sup0552_4.cfop_compl

          ELSE
             LET mr_ar_compl_sq.cod_fiscal_compl = mr_w_sup0552_4.cfop_compl
             IF m_util_cod_fisc_arq_txt = "1" THEN #OS479018
                LET mr_aviso_rec.cod_fiscal_item = mr_w_sup0552_4_it.cfop
             ELSE
                IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
                   LET mr_aviso_rec.cod_fiscal_item = l_prim_digito,".",lr_ordem_sup.cod_fiscal
                ELSE
                   LET mr_aviso_rec.cod_fiscal_item = l_prim_digito,".",lr_item_sup.cod_fiscal
                END IF
             END IF
          END IF

          #724885
          IF mr_w_sup0552_4.cfop[1,1] = "7" THEN
             LET mr_aviso_rec.ies_bitributacao = "S"
          ELSE
             INITIALIZE l_ies_obj_entrada_fisc, l_status TO NULL
             CALL sup0686_retorna_objetivo_entrada(mr_aviso_rec.cod_fiscal_item,
                                                   mr_w_sup0552_4.cfop_compl)
                                                   RETURNING l_status,
                                                             l_ies_obj_entrada_fisc_item

             IF  l_ies_obj_entrada_fisc_item      = "1"  OR
                 l_ies_obj_entrada_fisc_item      = "2"  OR
                 (m_ies_tip_entrada_nf            = "5"  OR
                  mr_w_sup0552_4.espc_nota_fiscal = "NFD") THEN

                LET mr_aviso_rec.ies_bitributacao = "N"
             ELSE
               WHENEVER ERROR CONTINUE
                 SELECT fornecedor.ies_contrib_ipi
                   INTO l_ies_contrib_ipi
                   FROM fornecedor
                  WHERE fornecedor.cod_fornecedor   = mr_nf_sup.cod_fornecedor
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql('SELECT','FORNECEDOR')
                  LET l_houve_erro = TRUE
                  EXIT FOREACH
               END IF

               IF l_ies_contrib_ipi = "S" THEN
                  LET mr_aviso_rec.ies_bitributacao = "S"
               ELSE
                  LET mr_aviso_rec.ies_bitributacao = "N"
               END IF
             END IF
          END IF

          #724885
          IF mr_inf_compl_item.grupo_despesa_item IS NOT NULL THEN
             LET mr_aviso_rec.gru_ctr_desp_item = mr_inf_compl_item.grupo_despesa_item
          ELSE
             IF mr_inf_compl_fret.grupo_despesa_item_fr IS NOT NULL THEN
                LET mr_aviso_rec.gru_ctr_desp_item = mr_inf_compl_fret.grupo_despesa_item_fr
             ELSE
                IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
                   LET mr_aviso_rec.gru_ctr_desp_item  = lr_ordem_sup.gru_ctr_desp
                ELSE
                   LET mr_aviso_rec.gru_ctr_desp_item  = lr_item_sup.gru_ctr_desp
                END IF
             END IF
          END IF
          #---fim----OS 724885 #

          IF mr_aviso_rec.ies_item_estoq = "S" THEN
             IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
                LET mr_aviso_rec.cod_local_estoq    = lr_ordem_sup.cod_secao_receb
             ELSE
                WHENEVER ERROR CONTINUE
                SELECT estoque_operac_ar.cod_local
                  INTO mr_aviso_rec.cod_local_estoq
                  FROM estoque_operac_ar
                 WHERE estoque_operac_ar.cod_empresa  = mr_w_sup0552_4_it.empresa
                   AND estoque_operac_ar.cod_operacao = mr_aviso_rec_compl.cod_operacao
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   LET mr_aviso_rec.cod_local_estoq = lr_item.cod_local_estoq
                END IF
             END IF
             IF mr_aviso_rec.cod_local_estoq IS NULL OR
                mr_aviso_rec.cod_local_estoq = " " THEN
                LET mr_aviso_rec.cod_local_estoq = lr_item.cod_local_estoq
             END IF
          ELSE
             #o.s.291502 eduluiz
             IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
                LET mr_aviso_rec.cod_local_estoq    = lr_ordem_sup.cod_secao_receb
             ELSE
                LET mr_aviso_rec.cod_local_estoq    = lr_item.cod_local_estoq
             END IF
             IF mr_aviso_rec.cod_local_estoq IS NULL THEN
                LET mr_aviso_rec.cod_local_estoq = ' '
             END IF
          END IF

          LET mr_aviso_rec.num_lote              = NULL
          LET mr_aviso_rec.cod_operac_estoq      = " "
          LET mr_aviso_rec.val_base_c_item_d     = mr_w_sup0552_4_it.bas_calc_icms
          LET mr_aviso_rec.val_base_c_item_c     = 0
          LET mr_aviso_rec.pct_icms_item_d       = mr_w_sup0552_4_it.pct_icms
          LET mr_aviso_rec.pct_icms_item_c       = 0
          LET mr_aviso_rec.pct_red_bc_item_d     = 0
          LET mr_aviso_rec.pct_red_bc_item_c     = 0
          LET mr_aviso_rec.pct_diferen_item_d    = 0
          LET mr_aviso_rec.pct_diferen_item_c    = 0
          LET mr_aviso_rec.val_icms_item_d       = mr_w_sup0552_4_it.val_icms
          LET mr_aviso_rec.val_icms_item_c       = 0
          LET mr_aviso_rec.val_base_c_icms_da    = 0
          LET mr_aviso_rec.val_icms_diferen_i    = 0
          LET mr_aviso_rec.val_icms_desp_aces    = 0

          #724885
          ##Rafael - OS318370
          #IF mr_aviso_rec.val_base_c_item_d = (mr_aviso_rec.val_liquido_item +
          #                                     mr_aviso_rec.val_ipi_decl_item) THEN
          #   LET mr_aviso_rec.ies_bitributacao = "S"
          #ELSE
          #   LET mr_aviso_rec.ies_bitributacao = "N"
          #END IF
          ##Fim OS318370

          #724885
          IF mr_w_sup0552_4_it.serie_conhec_frete IS NOT NULL AND
             mr_w_sup0552_4_it.serie_conhec_frete <> " " THEN
             LET mr_aviso_rec.ies_incid_icms_ite = mr_w_sup0552_4_it.serie_conhec_frete
          ELSE
             IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
                LET mr_aviso_rec.ies_incid_icms_ite = lr_ordem_sup.ies_tip_incid_icms
             ELSE
                LET mr_aviso_rec.ies_incid_icms_ite = lr_item_sup.ies_tip_incid_icms
             END IF
          END IF

          LET mr_aviso_rec.val_frete             = mr_w_sup0552_4_it.val_frete

          IF mr_aviso_rec.val_frete IS NULL THEN
             LET mr_aviso_rec.val_frete = 0
          END IF

          LET mr_aviso_rec.val_icms_frete_d      = mr_w_sup0552_4_it.val_icms_frete

          IF mr_aviso_rec.val_icms_frete_d IS NULL THEN
             LET mr_aviso_rec.val_icms_frete_d = 0
          END IF

          LET mr_aviso_rec.val_icms_frete_c      = 0
          LET mr_aviso_rec.val_base_c_frete_d    = mr_w_sup0552_4_it.bc_icms_frete

          IF mr_aviso_rec.val_base_c_frete_d IS NULL THEN
             LET mr_aviso_rec.val_base_c_frete_d = 0
          END IF

          LET mr_aviso_rec.val_base_c_frete_c    = 0
          LET mr_aviso_rec.val_icms_diferen_f    = 0
          LET mr_aviso_rec.pct_icms_frete_d      = mr_w_sup0552_4_it.pct_icms_frete

          IF mr_aviso_rec.pct_icms_frete_d IS NULL THEN
             LET mr_aviso_rec.pct_icms_frete_d = 0
          END IF

          LET mr_aviso_rec.pct_icms_frete_c      = 0
          LET mr_aviso_rec.pct_red_bc_frete_d    = 0
          LET mr_aviso_rec.pct_red_bc_frete_c    = 0
          LET mr_aviso_rec.pct_diferen_fret_d    = 0
          LET mr_aviso_rec.pct_diferen_fret_c    = 0
          LET mr_aviso_rec.val_acrescimos        = 0
          LET mr_aviso_rec.val_enc_financ        = 0
          LET mr_aviso_rec.ies_contabil          = "S"
          LET mr_aviso_rec.ies_total_nf          = "S"
          LET mr_aviso_rec.val_compl_estoque     = 0
          LET mr_aviso_rec.dat_ref_val_compl     = NULL
          LET mr_aviso_rec.pct_enc_financ        = 0
          LET mr_aviso_rec.cod_cla_fisc_nf       = lr_item.cod_cla_fisc

          #--inicio--OS 724885 #
          IF mr_inf_compl_item.cod_tip_despesa IS NOT NULL THEN
             LET mr_aviso_rec.cod_tip_despesa = mr_inf_compl_item.cod_tip_despesa
          ELSE
             IF mr_inf_compl_fret.cod_tip_despesa IS NOT NULL THEN
                LET mr_aviso_rec.cod_tip_despesa = mr_inf_compl_fret.cod_tip_despesa
             ELSE
                IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN
                   LET mr_aviso_rec.cod_tip_despesa    = lr_ordem_sup.cod_tip_despesa
                ELSE
                   LET mr_aviso_rec.cod_tip_despesa    = lr_item_sup.cod_tip_despesa
                END IF
             END IF
          END IF
          #---fim----OS 724885 #

          LET mr_aviso_rec.observacao            = NULL

          CALL sup0552_busca_ies_situa_ar(mr_w_sup0552_4_it.item,
                                          lr_ordem_sup.*,
                                          lr_item.*,
                                          l_conta_array) RETURNING mr_aviso_rec.ies_situa_ar, l_conta_array
          LET mr_aviso_rec.ies_liberacao_insp    = sup0552_busca_ies_liberacao_insp(mr_w_sup0552_4_it.item,
                                                                                    lr_ordem_sup.*,
                                                                                    lr_item.*)

          IF  mr_aviso_rec.ies_item_estoq = "N"
          AND mr_aviso_rec.cod_local_estoq IS NULL THEN
             LET mr_aviso_rec.cod_local_estoq = " "
          END IF

         # 472924
          LET l_grade_dimens = FALSE
          CALL sup0063_verifica_controles(1,
                                          mr_aviso_rec.cod_item,
                                          "INCLUSAO",
                                          "SUP3760")
             RETURNING m_controles
          IF m_controles <> " " THEN
             ### Irá obrigar contagem manual, pois precisa ser informada a grade
             ### da contagem.
             LET l_grade_dimens = TRUE
          END IF

          IF m_cont_insp_especial = "S" AND
             l_grade_dimens = FALSE THEN
             IF (mr_aviso_rec.cod_item IS NULL OR mr_aviso_rec.cod_item = " ") OR
                 mr_aviso_rec.qtd_declarad_nf = 0 OR
                (mr_aviso_rec.ies_item_estoq = "N" AND
                 mr_nf_sup.ies_nf_aguard_nfe <> "4") THEN
                LET mr_aviso_rec.ies_liberacao_insp = "S"
                LET mr_aviso_rec.ies_situa_ar       = "E"
                LET mr_aviso_rec.qtd_recebida       = mr_aviso_rec.qtd_declarad_nf
                IF (mr_aviso_rec.ies_item_estoq = "N" AND
                   mr_nf_sup.ies_nf_aguard_nfe <> "4") THEN
                   LET mr_aviso_rec.ies_liberacao_cont = "S"
                END IF
             END IF
          END IF

          IF m_houve_erro THEN
             LET l_houve_erro = TRUE
          END IF

          LET m_data_char1 = log0810_date_sql(mr_aviso_rec.dat_inclusao_seq)

          WHENEVER ERROR CONTINUE
          INSERT INTO aviso_rec (cod_empresa           ,
                                 cod_empresa_estab     ,
                                 num_aviso_rec         ,
                                 num_seq               ,
                                 dat_inclusao_seq      ,
                                 ies_situa_ar          ,
                                 ies_incl_almox        ,
                                 ies_receb_fiscal      ,
                                 ies_liberacao_ar      ,
                                 ies_liberacao_cont    ,
                                 ies_liberacao_insp    ,
                                 ies_diverg_listada    ,
                                 ies_item_estoq        ,
                                 ies_controle_lote     ,
                                 cod_comprador         ,
                                 num_pedido            ,
                                 num_oc                ,
                                 cod_item              ,
                                 den_item              ,
                                 cod_cla_fisc          ,
                                 cod_unid_med_nf       ,
                                 pre_unit_nf           ,
                                 val_despesa_aces_i    ,
                                 ies_da_bc_ipi         ,
                                 cod_incid_ipi         ,
                                 ies_tip_incid_ipi     ,
                                 pct_direito_cred      ,
                                 pct_ipi_declarad      ,
                                 pct_ipi_tabela        ,
                                 ies_bitributacao      ,
                                 val_base_c_ipi_it     ,
                                 val_base_c_ipi_da     ,
                                 val_ipi_decl_item     ,
                                 val_ipi_calc_item     ,
                                 val_ipi_desp_aces     ,
                                 val_desc_item         ,
                                 val_liquido_item      ,
                                 val_contabil_item     ,
                                 qtd_declarad_nf       ,
                                 qtd_recebida          ,
                                 qtd_devolvid          ,
                                 dat_devoluc           ,
                                 val_devoluc           ,
                                 num_nf_dev            ,
                                 qtd_rejeit            ,
                                 qtd_liber             ,
                                 qtd_liber_excep       ,
                                 cus_tot_item          ,
                                 cod_fiscal_item       ,
                                 gru_ctr_desp_item     ,
                                 cod_local_estoq       ,
                                 num_lote              ,
                                 cod_operac_estoq      ,
                                 val_base_c_item_d     ,
                                 val_base_c_item_c     ,
                                 pct_icms_item_d       ,
                                 pct_icms_item_c       ,
                                 pct_red_bc_item_d     ,
                                 pct_red_bc_item_c     ,
                                 pct_diferen_item_d    ,
                                 pct_diferen_item_c    ,
                                 val_icms_item_d       ,
                                 val_icms_item_c       ,
                                 val_base_c_icms_da    ,
                                 val_icms_diferen_i    ,
                                 val_icms_desp_aces    ,
                                 ies_incid_icms_ite    ,
                                 val_frete             ,
                                 val_icms_frete_d      ,
                                 val_icms_frete_c      ,
                                 val_base_c_frete_d    ,
                                 val_base_c_frete_c    ,
                                 val_icms_diferen_f    ,
                                 pct_icms_frete_d      ,
                                 pct_icms_frete_c      ,
                                 pct_red_bc_frete_d    ,
                                 pct_red_bc_frete_c    ,
                                 pct_diferen_fret_d    ,
                                 pct_diferen_fret_c    ,
                                 val_acrescimos        ,
                                 val_enc_financ        ,
                                 ies_contabil          ,
                                 ies_total_nf          ,
                                 val_compl_estoque     ,
                                 dat_ref_val_compl     ,
                                 pct_enc_financ        ,
                                 cod_cla_fisc_nf       ,
                                 cod_tip_despesa       ,
                                 observacao            )
                         VALUES (mr_aviso_rec.cod_empresa           ,
                                 mr_aviso_rec.cod_empresa_estab     ,
                                 mr_aviso_rec.num_aviso_rec         ,
                                 mr_aviso_rec.num_seq               ,
                                 mr_aviso_rec.dat_inclusao_seq      ,
                                 mr_aviso_rec.ies_situa_ar          ,
                                 mr_aviso_rec.ies_incl_almox        ,
                                 mr_aviso_rec.ies_receb_fiscal      ,
                                 mr_aviso_rec.ies_liberacao_ar      ,
                                 mr_aviso_rec.ies_liberacao_cont    ,
                                 mr_aviso_rec.ies_liberacao_insp    ,
                                 mr_aviso_rec.ies_diverg_listada    ,
                                 mr_aviso_rec.ies_item_estoq        ,
                                 mr_aviso_rec.ies_controle_lote     ,
                                 mr_aviso_rec.cod_comprador         ,
                                 mr_aviso_rec.num_pedido            ,
                                 mr_aviso_rec.num_oc                ,
                                 mr_aviso_rec.cod_item              ,
                                 mr_aviso_rec.den_item              ,
                                 mr_aviso_rec.cod_cla_fisc          ,
                                 mr_aviso_rec.cod_unid_med_nf       ,
                                 mr_aviso_rec.pre_unit_nf           ,
                                 mr_aviso_rec.val_despesa_aces_i    ,
                                 mr_aviso_rec.ies_da_bc_ipi         ,
                                 mr_aviso_rec.cod_incid_ipi         ,
                                 mr_aviso_rec.ies_tip_incid_ipi     ,
                                 mr_aviso_rec.pct_direito_cred      ,
                                 mr_aviso_rec.pct_ipi_declarad      ,
                                 mr_aviso_rec.pct_ipi_tabela        ,
                                 mr_aviso_rec.ies_bitributacao      ,
                                 mr_aviso_rec.val_base_c_ipi_it     ,
                                 mr_aviso_rec.val_base_c_ipi_da     ,
                                 mr_aviso_rec.val_ipi_decl_item     ,
                                 mr_aviso_rec.val_ipi_calc_item     ,
                                 mr_aviso_rec.val_ipi_desp_aces     ,
                                 mr_aviso_rec.val_desc_item         ,
                                 mr_aviso_rec.val_liquido_item      ,
                                 mr_aviso_rec.val_contabil_item     ,
                                 mr_aviso_rec.qtd_declarad_nf       ,
                                 mr_aviso_rec.qtd_recebida          ,
                                 mr_aviso_rec.qtd_devolvid          ,
                                 mr_aviso_rec.dat_devoluc,
                                 mr_aviso_rec.val_devoluc           ,
                                 mr_aviso_rec.num_nf_dev            ,
                                 mr_aviso_rec.qtd_rejeit            ,
                                 mr_aviso_rec.qtd_liber             ,
                                 mr_aviso_rec.qtd_liber_excep       ,
                                 mr_aviso_rec.cus_tot_item          ,
                                 mr_aviso_rec.cod_fiscal_item       ,
                                 mr_aviso_rec.gru_ctr_desp_item     ,
                                 mr_aviso_rec.cod_local_estoq       ,
                                 mr_aviso_rec.num_lote              ,
                                 mr_aviso_rec.cod_operac_estoq      ,
                                 mr_aviso_rec.val_base_c_item_d     ,
                                 mr_aviso_rec.val_base_c_item_c     ,
                                 mr_aviso_rec.pct_icms_item_d       ,
                                 mr_aviso_rec.pct_icms_item_c       ,
                                 mr_aviso_rec.pct_red_bc_item_d     ,
                                 mr_aviso_rec.pct_red_bc_item_c     ,
                                 mr_aviso_rec.pct_diferen_item_d    ,
                                 mr_aviso_rec.pct_diferen_item_c    ,
                                 mr_aviso_rec.val_icms_item_d       ,
                                 mr_aviso_rec.val_icms_item_c       ,
                                 mr_aviso_rec.val_base_c_icms_da    ,
                                 mr_aviso_rec.val_icms_diferen_i    ,
                                 mr_aviso_rec.val_icms_desp_aces    ,
                                 mr_aviso_rec.ies_incid_icms_ite    ,
                                 mr_aviso_rec.val_frete             ,
                                 mr_aviso_rec.val_icms_frete_d      ,
                                 mr_aviso_rec.val_icms_frete_c      ,
                                 mr_aviso_rec.val_base_c_frete_d    ,
                                 mr_aviso_rec.val_base_c_frete_c    ,
                                 mr_aviso_rec.val_icms_diferen_f    ,
                                 mr_aviso_rec.pct_icms_frete_d      ,
                                 mr_aviso_rec.pct_icms_frete_c      ,
                                 mr_aviso_rec.pct_red_bc_frete_d    ,
                                 mr_aviso_rec.pct_red_bc_frete_c    ,
                                 mr_aviso_rec.pct_diferen_fret_d    ,
                                 mr_aviso_rec.pct_diferen_fret_c    ,
                                 mr_aviso_rec.val_acrescimos        ,
                                 mr_aviso_rec.val_enc_financ        ,
                                 mr_aviso_rec.ies_contabil          ,
                                 mr_aviso_rec.ies_total_nf          ,
                                 mr_aviso_rec.val_compl_estoque     ,
                                 mr_aviso_rec.dat_ref_val_compl     ,
                                 mr_aviso_rec.pct_enc_financ        ,
                                 mr_aviso_rec.cod_cla_fisc_nf       ,
                                 mr_aviso_rec.cod_tip_despesa       ,
                                 mr_aviso_rec.observacao            )
          WHENEVER ERROR STOP
          IF sqlca.sqlcode = 0 THEN
             #Início OS 539059
             CALL sup0552_verifica_fornec_incl_regime_compex(mr_nf_sup.cod_empresa,
                                                             mr_nf_sup.dat_emis_nf,
                                                             mr_nf_sup.cod_fornecedor)
                RETURNING l_compex

             IF l_compex THEN
                CALL sup0552_verifica_regime_compex(mr_aviso_rec.cod_empresa,
                                                    mr_aviso_rec.num_aviso_rec,
                                                    mr_aviso_rec.num_seq,
                                                    mr_aviso_rec.cod_item)
             END IF
             #FIM OS 539059

             IF m_cred_st_faturam_it_compra_revd = "S"    #OS. 479344
             OR m_cred_st_faturam_it_compra_revd = "E" THEN
                IF NOT sup2621_verifica_nota_transferencia(mr_aviso_rec.*, mr_nf_sup.cod_fornecedor) THEN
                END IF
             END IF                                       #OS. 479344

              IF m_import_auto = FALSE THEN
                #--inicio--OS 612607 Antonio #
                LET l_data = EXTEND(CURRENT, YEAR TO SECOND)
                IF NOT sup0552_grava_sup_par_ar(mr_nf_sup.cod_empresa,
                                                mr_nf_sup.num_aviso_rec,
                                                0,
                                                'data_hora_nf_entrada',
                                                '',
                                                l_data,
                                                '',
                                                '',
                                                l_conta_array) THEN
                   LET l_conta_array = l_conta_array + 1
                   LET l_houve_erro = TRUE
                   CONTINUE WHILE
                END IF
                #---fim----OS                #
                IF NOT sup0552_grava_sup_par_ar(mr_aviso_rec.cod_empresa, mr_aviso_rec.num_aviso_rec, mr_aviso_rec.num_seq,
                                                "arquivo_importacao", '', m_nom_arquivo, '', '', l_conta_array) THEN
                   LET l_conta_array = l_conta_array + 1
                   LET l_houve_erro = TRUE
                   EXIT FOREACH
                END IF

                IF NOT sup0552_grava_sup_par_ar(mr_aviso_rec.cod_empresa, mr_aviso_rec.num_aviso_rec, mr_aviso_rec.num_seq,
                                                "usuario_importacao", '', p_user, '', '',l_conta_array) THEN
                   LET l_conta_array = l_conta_array + 1
                   LET l_houve_erro = TRUE
                   EXIT FOREACH
                END IF

                IF NOT sup0552_grava_sup_par_ar(mr_aviso_rec.cod_empresa, mr_aviso_rec.num_aviso_rec, mr_aviso_rec.num_seq,
                                                "dat_hor_importacao", '', l_hora_atual, '', l_data_atual, l_conta_array) THEN
                   LET l_conta_array = l_conta_array + 1
                   LET l_houve_erro = TRUE
                   EXIT FOREACH
                END IF
             ELSE
                IF NOT l_gravou THEN
                   IF NOT sup0552_grava_sup_par_ar(mr_aviso_rec.cod_empresa, mr_aviso_rec.num_aviso_rec,0,
                                                   "nf_import_wbt", '',mr_w_sup0552_4.sequencia, '', l_data_atual, l_conta_array) THEN
                      LET l_conta_array = l_conta_array + 1
                      LET l_houve_erro = TRUE
                      EXIT FOREACH
                   END IF
                   LET l_gravou = TRUE
                END IF
             END IF

             #--inicio--vanderlei OS 410113 #
             # -- Verifica se o AR do registro tipo "D" possui Substituição Tributária(registro tipo "S") -- #
             # -- Se possuir, será feita a inclusão na "ar_subst_tribut" para o AR em questão.            -- #
             IF NOT sup0552_inclui_st_para_ar(l_tipo, l_conta_array) THEN
                # -- Erro, arquivo pode estar corrompido, cancelar toda a operação -- #
                LET l_conta_array = l_conta_array + 1
                LET l_houve_erro = TRUE
                EXIT FOREACH
             END IF
             #---fim----vanderlei OS 410113 #

             CALL sup0552_inclui_grade_dim_item(l_grade_dimens) ##OS 586613
                  RETURNING p_status, l_msg_erro

             IF p_status = FALSE THEN
                LET l_conta_div = l_conta_div + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].sequencia         = mr_aviso_rec.num_seq
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = l_msg_erro
                LET m_houve_erro = TRUE
                CONTINUE FOREACH
             END IF
          ELSE
             CALL sup0552_mostra_erro_aviso_rec()
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da AVISO_REC "
             LET m_status_arquivo = 1
             #EXIT WHILE
             CONTINUE WHILE #724885
          END IF

          CALL LOG_setVar("empresa",mr_aviso_rec.cod_empresa)
          IF NOT sup1031_grava_audit_ar(mr_aviso_rec.num_aviso_rec,
                                        mr_aviso_rec.num_seq,
                                        "SUP0552","1") THEN
              #764215#
              CLOSE cq_itens
              FREE cq_itens

              CLOSE cq_mestre
              FREE cq_mestre
              #---fim--- 764215#
             RETURN
          END IF

          LET mr_ar_compl_sq.cod_empresa       = mr_w_sup0552_4_it.empresa
          LET mr_ar_compl_sq.cod_empresa_estab = mr_w_sup0552_4_it.empresa_estabel
          LET mr_ar_compl_sq.num_aviso_rec     = l_num_aviso_rec
          LET mr_ar_compl_sq.num_seq           = mr_aviso_rec.num_seq #mr_w_sup0552_4_it.sequencia

          LET l_cod_fiscal_compl = NULL

          IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN

             WHENEVER ERROR CONTINUE
             SELECT ordem_sup_compl.cod_fiscal_compl
               INTO l_cod_fiscal_compl
               FROM ordem_sup_compl
              WHERE ordem_sup_compl.cod_empresa = mr_w_sup0552_4_it.empresa
                AND ordem_sup_compl.num_oc      = mr_w_sup0552_4_it.ordem_compra
             WHENEVER ERROR STOP

             IF sqlca.sqlcode <> 0 OR
                l_cod_fiscal_compl IS NULL THEN

                WHENEVER ERROR CONTINUE
                SELECT item_sup_compl.cod_fiscal_compl
                  INTO l_cod_fiscal_compl
                  FROM item_sup_compl
                 WHERE item_sup_compl.cod_empresa = mr_w_sup0552_4_it.empresa
                   AND item_sup_compl.cod_item    = mr_w_sup0552_4_it.item
                WHENEVER ERROR STOP

                IF sqlca.sqlcode <> 0 OR
                   l_cod_fiscal_compl IS NULL THEN
                   LET l_cod_fiscal_compl = 0
                END IF
             END IF

          ELSE

             WHENEVER ERROR CONTINUE
             SELECT item_sup_compl.cod_fiscal_compl
               INTO l_cod_fiscal_compl
               FROM item_sup_compl
              WHERE item_sup_compl.cod_empresa = mr_w_sup0552_4_it.empresa
                AND item_sup_compl.cod_item    = mr_w_sup0552_4_it.item
             WHENEVER ERROR STOP

             IF sqlca.sqlcode <> 0 OR
                l_cod_fiscal_compl IS NULL THEN
                LET l_cod_fiscal_compl = 0
             END IF

          END IF

          #724885
          #IF m_ler_param_cfop99_do_sup8740  <> "S"  OR
          #   m_ies_cfop99                   <> "S"  OR
          #   l_ies_obj_entrada_fisc         <> "99" THEN
             LET mr_ar_compl_sq.cod_fiscal_compl  = l_cod_fiscal_compl
          #END IF

          LET mr_ar_compl_sq.val_base_d_ipi_it = 0
          LET mr_ar_compl_sq.dat_ini_garantia  = NULL
          LET mr_ar_compl_sq.dat_fim_garantia  = NULL

          #jefferson 802453
          IF mr_ar_compl_sq.cod_fiscal_compl IS NULL OR
             mr_ar_compl_sq.cod_fiscal_compl = ' ' THEN
             LET mr_ar_compl_sq.cod_fiscal_compl = 0
          END IF
          #FIM jefferson 802453

          WHENEVER ERROR CONTINUE
          INSERT INTO aviso_rec_compl_sq (cod_empresa          ,
                                          cod_empresa_estab    ,
                                          num_aviso_rec        ,
                                          num_seq              ,
                                          cod_fiscal_compl     ,
                                          val_base_d_ipi_it    ,
                                          dat_ini_garantia     ,
                                          dat_fim_garantia     )
                                          VALUES (mr_ar_compl_sq.cod_empresa          ,
                                                  mr_ar_compl_sq.cod_empresa_estab    ,
                                                  mr_ar_compl_sq.num_aviso_rec        ,
                                                  mr_ar_compl_sq.num_seq              ,
                                                  mr_ar_compl_sq.cod_fiscal_compl     ,
                                                  mr_ar_compl_sq.val_base_d_ipi_it    ,
                                                  mr_ar_compl_sq.dat_ini_garantia     ,
                                                  mr_ar_compl_sq.dat_fim_garantia     )
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET m_houve_erro = TRUE
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da AVISO_REC_COMPL_SQ "
             LET m_status_arquivo = 1
             LET l_houve_erro = TRUE
             EXIT FOREACH
          END IF

          CALL sup0552_inclui_dest_aviso_rec(l_tipo,
                                             lr_item.cod_lin_prod,
                                             lr_item.cod_lin_recei,
                                             lr_item.cod_seg_merc,
                                             lr_item.cod_cla_uso,
                                             lr_item_sup.num_conta)
               RETURNING m_status

          IF m_status = FALSE THEN
             IF m_msg_erro IS NOT NULL AND m_msg_erro <> " " THEN
                LET l_conta_div = l_conta_div + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia = m_msg_erro
             END IF
             LET l_houve_erro = TRUE
             LET l_houve_erro_reg_c = TRUE
             LET m_status_arquivo = 1
             CONTINUE FOREACH # OS 540402
          END IF

          IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN

             CALL sup0552_inclui_ar_ped(lr_ordem_sup.*,l_conta_array)
                RETURNING p_status, l_retorno

             IF p_status = FALSE THEN
                LET l_houve_erro = TRUE
                LET m_status_arquivo = 1
                EXIT FOREACH
             END IF

             LET l_conta_div        = l_conta_div + l_retorno
             LET l_conta_itens_erro = l_conta_itens_erro + l_retorno
             LET l_conta_array      = l_conta_array + l_retorno

          END IF

          #564600
          IF l_primeira_vez = TRUE THEN
             IF mr_w_sup0552_4.tipo_registro = "M"      AND
                mr_w_sup0552_4.espc_nota_fiscal = 'NFE' AND
                mr_w_sup0552_4.tip_nota_fiscal = '6'    AND
                mr_w_sup0552_4.sequencia =  '1'         THEN
                WHENEVER ERROR CONTINUE
                  INSERT INTO sup_par_ar
                   (empresa,
                    aviso_recebto,
                    seq_aviso_recebto,
                    parametro,
                    par_ind_especial,
                    parametro_texto,
                    parametro_val,
                    parametro_dat)
                  VALUES
                   (mr_aviso_rec.cod_empresa,
                    mr_aviso_rec.num_aviso_rec,
                    0,
                    'sem_alt_num_nota',
                    'S',
                    'Numero de nota sem alteracao.',
                    0,
                    TODAY)
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql('INCLUSÃO','SUP_PAR_AR/SEM_ALT_NUM_NOTA')
                   RETURN
                END IF
             END IF

             LET  l_primeira_vez = FALSE
          END IF

       END FOREACH
       WHENEVER ERROR STOP
       CLOSE cq_itens
       FREE cq_itens

       IF l_houve_erro THEN ##Se apresentar erro no item deverá ler a próxima NF
          CONTINUE WHILE
       END IF

       #-- OS 563259 inicio --#
       LET l_cont_dup = 0
       WHENEVER ERROR CONTINUE
       SELECT COUNT(empresa)
         INTO l_cont_dup
         FROM w_sup0552_4
        WHERE w_sup0552_4.empresa           = mr_w_sup0552_4.empresa
          AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
          AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
          AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4.subserie_nf
          AND w_sup0552_4.fornecedor        = mr_w_sup0552_4.fornecedor
          AND w_sup0552_4.tipo_registro     = "U"
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET l_cont_dup = 0
       END IF
       LET m_val_total_dup   = 0
       LET l_passou_dup      = FALSE
       LET l_conta_dupl_erro = 0
       LET l_num_dup         = 0
       IF m_temp_cana = TRUE THEN
         LET l_sql_stmt = "SELECT w_sup0552_4.tipo_registro, ",
                               "w_sup0552_4.empresa, ",
                               "w_sup0552_4.empresa_estabel, ",
                               "w_sup0552_4.nota_fiscal, ",
                               "w_sup0552_4.serie_nota_fiscal, ",
                               "w_sup0552_4.subserie_nf, ",
                               "w_sup0552_4.espc_nota_fiscal, ",
                               "w_sup0552_4.fornecedor, ",
                               "w_sup0552_4.dat_emis_nf, ",
                               "w_sup0552_4.dat_ent_nf, ",
                               "w_sup0552_4.cond_pagto, ",
                               "w_sup0552_4.modo_embarque, ",
                               "w_sup0552_4.tip_nota_fiscal, ",
                               "w_sup0552_4.num_conhec_frete, ",
                               "w_sup0552_4.serie_conhec_frete, ",
                               "w_sup0552_4.subserie_conh_fret, ",
                               "w_sup0552_4.transportador, ",
                               "w_sup0552_4.val_tot_decl_nf, ",
                               "w_sup0552_4.val_tot_decl_icms, ",
                               "w_sup0552_4.val_tot_decl_ipi, ",
                               "w_sup0552_4.cfop, ",
                               "w_sup0552_4.cfop_compl, ",
                               "w_sup0552_4.processado, ",
                               "w_sup0552_4.sequencia, ",
                               "w_sup0552_4.pedido, ",
                               "w_sup0552_4.ordem_compra, ",
                               "w_sup0552_4.item, ",
                               "w_sup0552_4.pre_unit_nf, ",
                               "w_sup0552_4.qtd_decl_nf, ",
                               "w_sup0552_4.pct_ipi, ",
                               "w_sup0552_4.bas_calc_ipi, ",
                               "w_sup0552_4.val_ipi, ",
                               "w_sup0552_4.pct_icms, ",
                               "w_sup0552_4.bas_calc_icms, ",
                               "w_sup0552_4.val_icms, ",
                               "w_sup0552_4.val_frete, ",
                               "w_sup0552_4.pct_icms_frete, ",
                               "w_sup0552_4.bc_icms_frete, ",
                               "w_sup0552_4.val_icms_frete, ",
                               "w_sup0552_4.compl_nota1, ",
                               "w_sup0552_4.compl_nota2, ",
                               "w_sup0552_4.desc_nota, ",
                               "w_sup0552_4.insc_estad, ",
                               "w_sup0552_4.seq_insc_estad, ",
                               "w_sup0552_4.val_inss, ",
                               "w_sup0552_4.val_inss_funrural ",
                         "FROM w_sup0552_4 ",
                        "WHERE w_sup0552_4.empresa           = '",mr_w_sup0552_4.empresa,"' ",
                          "AND w_sup0552_4.nota_fiscal       = ",mr_w_sup0552_4.nota_fiscal," ",
                          "AND w_sup0552_4.serie_nota_fiscal = '",mr_w_sup0552_4.serie_nota_fiscal,"' ",
                          "AND w_sup0552_4.subserie_nf       = ",mr_w_sup0552_4.subserie_nf," ",
                          "AND w_sup0552_4.fornecedor        = '", mr_w_sup0552_4.fornecedor,"' ",
                          "AND w_sup0552_4.tipo_registro     = ""U"" ",
                        "ORDER BY w_sup0552_4.empresa,",
                                 "w_sup0552_4.nota_fiscal,",
                                 "w_sup0552_4.serie_nota_fiscal,",
                                 "w_sup0552_4.subserie_nf,",
                                 "w_sup0552_4.espc_nota_fiscal,",
                                 "w_sup0552_4.fornecedor,",
                                 "w_sup0552_4.sequencia"
       ELSE
         LET l_sql_stmt = "SELECT w_sup0552_4.tipo_registro, ",
                                 "w_sup0552_4.empresa, ",
                                 "w_sup0552_4.empresa_estabel, ",
                                 "w_sup0552_4.nota_fiscal, ",
                                 "w_sup0552_4.serie_nota_fiscal, ",
                                 "w_sup0552_4.subserie_nf, ",
                                 "w_sup0552_4.espc_nota_fiscal, ",
                                 "w_sup0552_4.fornecedor, ",
                                 "w_sup0552_4.dat_emis_nf, ",
                                 "w_sup0552_4.dat_ent_nf, ",
                                 "w_sup0552_4.cond_pagto, ",
                                 "w_sup0552_4.modo_embarque, ",
                                 "w_sup0552_4.tip_nota_fiscal, ",
                                 "w_sup0552_4.num_conhec_frete, ",
                                 "w_sup0552_4.serie_conhec_frete, ",
                                 "w_sup0552_4.subserie_conh_fret, ",
                                 "w_sup0552_4.transportador, ",
                                 "w_sup0552_4.val_tot_decl_nf, ",
                                 "w_sup0552_4.val_tot_decl_icms, ",
                                 "w_sup0552_4.val_tot_decl_ipi, ",
                                 "w_sup0552_4.cfop, ",
                                 "w_sup0552_4.cfop_compl, ",
                                 "w_sup0552_4.processado, ",
                                 "w_sup0552_4.sequencia, ",
                                 "w_sup0552_4.pedido, ",
                                 "w_sup0552_4.ordem_compra, ",
                                 "w_sup0552_4.item, ",
                                 "w_sup0552_4.pre_unit_nf, ",
                                 "w_sup0552_4.qtd_decl_nf, ",
                                 "w_sup0552_4.pct_ipi, ",
                                 "w_sup0552_4.bas_calc_ipi, ",
                                 "w_sup0552_4.val_ipi, ",
                                 "w_sup0552_4.pct_icms, ",
                                 "w_sup0552_4.bas_calc_icms, ",
                                 "w_sup0552_4.val_icms, ",
                                 "w_sup0552_4.val_frete, ",
                                 "w_sup0552_4.pct_icms_frete, ",
                                 "w_sup0552_4.bc_icms_frete, ",
                                 "w_sup0552_4.val_icms_frete ,",
                                 "' ',",
                                 "' ',",
                                 "0  ,",
                                 "' ',",
                                 "0  ,",
                                 "0  ,",
                                 "0   ",
                         "FROM w_sup0552_4 ",
                        "WHERE w_sup0552_4.empresa           = '",mr_w_sup0552_4.empresa,"' ",
                          "AND w_sup0552_4.nota_fiscal       = ",mr_w_sup0552_4.nota_fiscal," ",
                          "AND w_sup0552_4.serie_nota_fiscal = '",mr_w_sup0552_4.serie_nota_fiscal,"' ",
                          "AND w_sup0552_4.subserie_nf       = ",mr_w_sup0552_4.subserie_nf," ",
                          "AND w_sup0552_4.fornecedor        = '", mr_w_sup0552_4.fornecedor,"' ",
                          "AND w_sup0552_4.tipo_registro     = ""U"" ",
                        "ORDER BY w_sup0552_4.empresa,",
                                 "w_sup0552_4.nota_fiscal,",
                                 "w_sup0552_4.serie_nota_fiscal,",
                                 "w_sup0552_4.subserie_nf,",
                                 "w_sup0552_4.espc_nota_fiscal,",
                                 "w_sup0552_4.fornecedor,",
                                 "w_sup0552_4.sequencia"

       END IF

       WHENEVER ERROR CONTINUE
       PREPARE var_query19 FROM l_sql_stmt
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
       END IF
       WHENEVER ERROR CONTINUE
       DECLARE cq_duplicata CURSOR WITH HOLD FOR var_query19
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
       END IF

       WHENEVER ERROR CONTINUE
       FOREACH cq_duplicata INTO mr_w_sup0552_4_it.*
          IF sqlca.sqlcode <> 0 THEN
             EXIT FOREACH
          END IF


          LET l_num_dup = l_num_dup + 1
          CALL sup0552_consulta_duplicatas()
          CALL sup0552_verifica_valor_nota()
          IF sup0552_verifica_num_docum() THEN
                LET l_conta_div   = l_conta_div + 1
                LET l_conta_array = l_conta_array + 1
                LET l_conta_dupl_erro = l_conta_dupl_erro + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Número de documento", mr_w_sup0552_4_it.transportador CLIPPED ," já cadastrado."
                CONTINUE FOREACH
          END IF

           IF m_num_dupl_igual_nf = "S" THEN
              IF NOT sup0552_verifica_numero_dupl(mr_w_sup0552_4_it.transportador) THEN
                LET l_conta_div   = l_conta_div + 1
                LET l_conta_array = l_conta_array + 1
                LET l_conta_dupl_erro = l_conta_dupl_erro + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Numero do documento ", mr_w_sup0552_4_it.transportador CLIPPED," deve ser igual da nota fiscal. "
                CONTINUE FOREACH
              END IF
           END IF
           IF mr_w_sup0552_4_it.val_tot_decl_nf  <= 0 THEN
             LET l_conta_div   = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1
             LET l_conta_dupl_erro = l_conta_dupl_erro + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "O valor do documento ", mr_w_sup0552_4_it.transportador CLIPPED," deve ser informado. "
             CONTINUE FOREACH
           END IF

           IF mr_w_sup0552_4_it.dat_emis_nf < mr_w_sup0552_4.dat_emis_nf THEN
              LET l_conta_div   = l_conta_div + 1
              LET l_conta_array = l_conta_array + 1
              LET l_conta_dupl_erro = l_conta_dupl_erro + 1
              CALL sup0552_carrega_chave_consiste(l_conta_array)
              LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                  "A data de vencimento do documento ", mr_w_sup0552_4_it.transportador CLIPPED," deve ser maior que a data de emissão. "
              CONTINUE FOREACH
           END IF

           IF  m_bloqueia_dig_dupl_atrasada = "S"
           AND mr_w_sup0552_4_it.dat_emis_nf < TODAY THEN
              LET l_conta_div   = l_conta_div + 1
              LET l_conta_array = l_conta_array + 1
              LET l_conta_dupl_erro = l_conta_dupl_erro + 1
              CALL sup0552_carrega_chave_consiste(l_conta_array)
              LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                  "Data de vencimento do documento ", mr_w_sup0552_4_it.transportador CLIPPED," menor que a data corrente. "
              CONTINUE FOREACH
           END IF

           CALL sup0552_busca_cond_pgto_cap(mr_nf_sup.cnd_pgto_nf)
           LET l_ies_pagamento = mr_cond_pgto_cap.ies_pagamento
           IF l_ies_pagamento = "3" THEN
              LET l_conta_div   = l_conta_div + 1
              LET l_conta_array = l_conta_array + 1
              LET l_conta_dupl_erro = l_conta_dupl_erro + 1
              CALL sup0552_carrega_chave_consiste(l_conta_array)
              LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                  " Nota fiscal ", mr_w_sup0552_4_it.nota_fiscal CLIPPED," sem pagamento "
              CONTINUE FOREACH
           END IF
           LET l_passou_dup = TRUE
#           CALL log085_transacao("BEGIN")
           IF l_passou_dup THEN
              IF mr_w_sup0552_4_it.tip_nota_fiscal = 'S' THEN
                 IF m_impostos <> 0 AND l_num_dup = l_cont_dup THEN
                    LET m_val_total_dup = m_val_total_dup + m_impostos
                 END IF
                 IF l_num_dup = l_cont_dup THEN
                    IF m_val_total_dup <> mr_w_sup0552_4.val_tot_decl_nf THEN
                       LET l_conta_div   = l_conta_div + 1
                       LET l_conta_array = l_conta_array + 1
                       LET l_conta_dupl_erro = l_conta_dupl_erro + 1
                       LET m_val_difer   = mr_w_sup0552_4.val_tot_decl_nf - m_val_total_dup
                       CALL sup0552_carrega_chave_consiste(l_conta_array)
                       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                           " Há diferença nos valores das duplicatas com o valor total da NFF: " , m_val_difer
                       CONTINUE FOREACH
                    END IF
                 END IF
              END IF
              IF l_conta_array = 0 THEN
                 WHENEVER ERROR CONTINUE
                 DELETE FROM vencimento_nff
                  WHERE vencimento_nff.cod_empresa       = mr_w_sup0552_4_it.empresa
                    AND vencimento_nff.num_nf            = mr_w_sup0552_4_it.nota_fiscal
                    AND vencimento_nff.ser_nf            = mr_w_sup0552_4_it.serie_nota_fiscal
                    AND vencimento_nff.ssr_nf            = mr_w_sup0552_4_it.subserie_nf
                    AND vencimento_nff.cod_fornecedor    = mr_w_sup0552_4_it.fornecedor
                    AND vencimento_nff.num_docum         = mr_w_sup0552_4_it.transportador
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode = 0 THEN
                    IF mr_w_sup0552_4_it.transportador IS NOT NULL THEN
                       WHENEVER ERROR CONTINUE
                       INSERT INTO vencimento_nff
                            VALUES (mr_w_sup0552_4_it.empresa              ,
                                    NULL                                   ,
                                    mr_w_sup0552_4_it.nota_fiscal          ,
                                    mr_w_sup0552_4_it.serie_nota_fiscal    ,
                                    mr_w_sup0552_4_it.subserie_nf          ,
                                    mr_w_sup0552_4_it.fornecedor           ,
                                    mr_w_sup0552_4_it.transportador        ,
                                    mr_w_sup0552_4_it.val_tot_decl_nf      ,
                                    mr_w_sup0552_4_it.dat_emis_nf )
                       WHENEVER ERROR STOP

                       IF sqlca.sqlcode = 0 THEN
                          INITIALIZE mr_importados.* TO NULL

                          LET mr_importados.tipo_registro     = "U"
                          LET mr_importados.nota_fiscal       = mr_w_sup0552_4_it.nota_fiscal
                          LET mr_importados.serie_nota_fiscal = mr_w_sup0552_4_it.serie_nota_fiscal
                          LET mr_importados.subserie_nf       = mr_w_sup0552_4_it.subserie_nf
                          LET mr_importados.espc_nota_fiscal  = mr_w_sup0552_4_it.espc_nota_fiscal
                          LET mr_importados.fornecedor        = mr_w_sup0552_4_it.transportador
                          LET mr_importados.num_nff_relac     = 0

                          WHENEVER ERROR CONTINUE
                          INSERT INTO w_sup0552_2 (tipo_registro       ,
                                                      nota_fiscal         ,
                                                      serie_nota_fiscal   ,
                                                      subserie_nf         ,
                                                      espc_nota_fiscal    ,
                                                      fornecedor          ,
                                                      num_nff_relac       )
                                              VALUES (mr_importados.tipo_registro       ,
                                                      mr_importados.nota_fiscal         ,
                                                      mr_importados.serie_nota_fiscal   ,
                                                      mr_importados.subserie_nf         ,
                                                      mr_importados.espc_nota_fiscal    ,
                                                      mr_importados.fornecedor          ,
                                                      mr_importados.num_nff_relac       )
                          WHENEVER ERROR STOP

                          IF sqlca.sqlcode <> 0 THEN
                             LET l_conta_array = l_conta_array + 1
                             CALL sup0552_carrega_chave_consiste(l_conta_array)
                             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da W_SUP0552_2 "
                             LET m_status_arquivo = 1
                             EXIT FOREACH
                          END IF
                       END IF
                    END IF
                 END IF
              END IF
           END IF
       END FOREACH
       WHENEVER ERROR STOP
       #-- OS 563259 fim --#
        CLOSE cq_duplicata #764215#
       FREE cq_duplicata

       #-- OS 544109 inicio --#
       IF NOT sup0552_grava_sup_par_ar(mr_nf_sup.cod_empresa, mr_nf_sup.num_aviso_rec, 0,
                                       "possui_identif_saida", 'N', 'N', '', '', l_conta_array) THEN #OS612607
          LET l_conta_array = l_conta_array + 1
          LET l_houve_erro = TRUE
          CONTINUE WHILE
       END IF

       IF NOT sup0552_grava_sup_par_ar(mr_nf_sup.cod_empresa, mr_nf_sup.num_aviso_rec, 0,
                                       "nf_receb_edi", 'N', 'N', '', '', l_conta_array) THEN #OS612607
          LET l_conta_array = l_conta_array + 1
          LET l_houve_erro = TRUE
          CONTINUE WHILE
       END IF

       IF NOT sup0552_grava_sup_par_ar(mr_nf_sup.cod_empresa, mr_nf_sup.num_aviso_rec, 0,
                                       "nf_regular_fiscal", m_nota_imp_sup0052_util_reg_fisc, m_nota_imp_sup0052_util_reg_fisc,'', '', l_conta_array) THEN #OS612607
          LET l_conta_array = l_conta_array + 1
          LET l_houve_erro = TRUE
          CONTINUE WHILE
       END IF
       #-- OS 544109 fim --#

       IF NOT sup0552_incl_sup_compl_nf_sup() THEN #732596#
          LET l_houve_erro = TRUE
       END IF

       IF m_tipo_de_processo = "I" THEN
          IF l_houve_erro = FALSE THEN
             IF l_conta_itens = 0 THEN
                LET l_conta_div = l_conta_div + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Itens da Nota Fiscal nao encontrados."
                LET l_houve_erro = TRUE
                LET m_status_arquivo = 1
                CONTINUE WHILE
             END IF

             IF  l_conta_dupl_erro > 0 THEN
                ### Se houve consistencia nas duplicatas da nota, nao deve importar ###
                CONTINUE WHILE
             END IF

             IF l_conta_itens_erro > 0 THEN
                ### Se houve consistencia em algum item da nota, nao deve importar ###
                LET l_houve_erro = TRUE
                CONTINUE WHILE
             END IF

             #--inicio--OS 724885 #
             IF mr_inf_compl_nf.registro_entrada IS NOT NULL THEN
                LET mr_nf_sup.cod_regist_entrada =  mr_inf_compl_nf.registro_entrada
             END IF
             #---fim----OS 724885 #

             IF LOG_existe_epl("sup0552y_before_insert_nf_sup") THEN
                IF sup0552y_before_insert_nf_sup() THEN
                   LET mr_nf_sup.cod_empresa_estab = NULL
                END IF
             END IF
             IF LOG_job_mode() THEN
                LET mr_nf_sup.ies_nf_aguard_nfe = "7"
             END IF

             WHENEVER ERROR CONTINUE
             INSERT INTO nf_sup (cod_empresa          ,
                                 cod_empresa_estab    ,
                                 num_nf               ,
                                 ser_nf               ,
                                 ssr_nf               ,
                                 ies_especie_nf       ,
                                 cod_fornecedor       ,
                                 num_conhec           ,
                                 ser_conhec           ,
                                 ssr_conhec           ,
                                 cod_transpor         ,
                                 num_aviso_rec        ,
                                 dat_emis_nf          ,
                                 dat_entrada_nf       ,
                                 cod_regist_entrada   ,
                                 val_tot_nf_c         ,
                                 val_tot_nf_d         ,
                                 val_tot_icms_nf_d    ,
                                 val_tot_icms_nf_c    ,
                                 val_tot_desc         ,
                                 val_tot_acresc       ,
                                 val_ipi_nf           ,
                                 val_ipi_calc         ,
                                 val_despesa_aces     ,
                                 val_adiant           ,
                                 ies_tip_frete        ,
                                 cnd_pgto_nf          ,
                                 cod_mod_embar        ,
                                 ies_nf_com_erro      ,
                                 nom_resp_aceite_er   ,
                                 ies_incl_cap         ,
                                 ies_incl_contab      ,
                                 cod_operacao         ,
                                 ies_calc_subst       ,
                                 val_bc_subst_d       ,
                                 val_icms_subst_d     ,
                                 val_bc_subst_c       ,
                                 val_icms_subst_c     ,
                                 cod_imp_renda        ,
                                 val_imp_renda        ,
                                 ies_situa_import     ,
                                 val_bc_imp_renda     ,
                                 ies_nf_aguard_nfe    )
                         VALUES (mr_nf_sup.cod_empresa          ,
                                 mr_nf_sup.cod_empresa_estab    ,
                                 mr_nf_sup.num_nf               ,
                                 mr_nf_sup.ser_nf               ,
                                 mr_nf_sup.ssr_nf               ,
                                 mr_nf_sup.ies_especie_nf       ,
                                 mr_nf_sup.cod_fornecedor       ,
                                 mr_nf_sup.num_conhec           ,
                                 mr_nf_sup.ser_conhec           ,
                                 mr_nf_sup.ssr_conhec           ,
                                 mr_nf_sup.cod_transpor         ,
                                 mr_nf_sup.num_aviso_rec        ,
                                 mr_nf_sup.dat_emis_nf          ,
                                 mr_nf_sup.dat_entrada_nf       ,
                                 mr_nf_sup.cod_regist_entrada   ,
                                 mr_nf_sup.val_tot_nf_c         ,
                                 mr_nf_sup.val_tot_nf_d         ,
                                 mr_nf_sup.val_tot_icms_nf_d    ,
                                 mr_nf_sup.val_tot_icms_nf_c    ,
                                 mr_nf_sup.val_tot_desc         ,
                                 mr_nf_sup.val_tot_acresc       ,
                                 mr_nf_sup.val_ipi_nf           ,
                                 mr_nf_sup.val_ipi_calc         ,
                                 mr_nf_sup.val_despesa_aces     ,
                                 mr_nf_sup.val_adiant           ,
                                 mr_nf_sup.ies_tip_frete        ,
                                 mr_nf_sup.cnd_pgto_nf          ,
                                 mr_nf_sup.cod_mod_embar        ,
                                 mr_nf_sup.ies_nf_com_erro      ,
                                 mr_nf_sup.nom_resp_aceite_er   ,
                                 mr_nf_sup.ies_incl_cap         ,
                                 mr_nf_sup.ies_incl_contab      ,
                                 mr_nf_sup.cod_operacao         ,
                                 mr_nf_sup.ies_calc_subst       ,
                                 mr_nf_sup.val_bc_subst_d       ,
                                 mr_nf_sup.val_icms_subst_d     ,
                                 mr_nf_sup.val_bc_subst_c       ,
                                 mr_nf_sup.val_icms_subst_c     ,
                                 mr_nf_sup.cod_imp_renda        ,
                                 mr_nf_sup.val_imp_renda        ,
                                 mr_nf_sup.ies_situa_import     ,
                                 mr_nf_sup.val_bc_imp_renda     ,
                                 mr_nf_sup.ies_nf_aguard_nfe    )
             WHENEVER ERROR STOP

             IF sqlca.sqlcode <> 0 THEN
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da NF_SUP "
                LET m_status_arquivo = 1
                CALL sup0552_mostra_erro_nf_sup()
                LET l_houve_erro = TRUE
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

             # IMP-WMS
             IF m_ies_wms_instalado = 'S' THEN
                IF l_prim_nota_fornec THEN
                   WHENEVER ERROR CONTINUE
                   SELECT num_cgc_cpf,
                          raz_social,
                          ins_estadual,
                          cod_uni_feder
                     INTO l_cgc_cpf_wms,
                          l_raz_soc_wms,
                          l_ins_est_wms,
                          l_cod_uf_wms
                     FROM fornecedor
                    WHERE fornecedor.cod_fornecedor   = mr_nf_sup.cod_fornecedor
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                   END IF

                   WHENEVER ERROR CONTINUE
                   INSERT INTO wms_valid_prim_nf_deposit (empresa,
                                       deposit,
                                       aviso_recebto,
                                       razao_social_nota_fiscal,
                                       estado_nota_fiscal,
                                       cnpj_cpf_nota_fiscal,
                                       inscricao_estadual_nota_fiscal,
                                       dat_hor_liberacao,
                                       respons_liberacao)
                               VALUES (mr_nf_sup.cod_empresa,
                                       mr_nf_sup.cod_fornecedor,
                                       mr_nf_sup.num_aviso_rec,
                                       l_raz_soc_wms,
                                       l_cod_uf_wms,
                                       l_cgc_cpf_wms,
                                       l_ins_est_wms,
                                       NULL,
                                       NULL)
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      LET m_houve_erro = TRUE
                      LET l_conta_array = l_conta_array + 1
                      CALL sup0552_carrega_chave_consiste(l_conta_array)
                      LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da WMS_VALID_PRIM_NF_DEPOSIT "
                      LET m_status_arquivo = 1
                      LET l_houve_erro = TRUE
                      CONTINUE WHILE
                   END IF
                   LET l_prim_nota_fornec = FALSE
                END IF
             END IF
             # FIM IMP-WMS

             #--inicio--OS 724885 #
             IF  mr_inf_compl_nf.tipo_registro  = "V" THEN
                CALL sup0552_reten_recol_imposto_nf()
             END IF
             #---fim----OS 724885 #

             #--inicio--OS 599526 #
             IF sup0552_integra_cre() = FALSE THEN
                LET l_houve_erro = TRUE
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF
             #---fim----OS 599526 #

             # INICIO 554725
             IF mr_w_sup0552_4.insc_estad IS NOT NULL AND mr_w_sup0552_4.insc_estad <> " " THEN

                IF NOT sup0552_insere_ins_estadual(l_conta_array) THEN
                   LET l_conta_array = l_conta_array + 1
                   LET m_status_arquivo = 1
                   LET l_houve_erro = TRUE
                   #EXIT WHILE
                   CONTINUE WHILE #724885
                END IF
             END IF

             IF mr_reten_inss.num_ad_nf_orig IS NOT NULL AND mr_reten_inss.num_ad_nf_orig <> " " THEN
                IF NOT sup0552_insere_reten_inss(l_conta_array) THEN
                   LET l_conta_array = l_conta_array + 1
                   LET m_status_arquivo = 1
                   LET l_houve_erro = TRUE
                   #EXIT WHILE
                   CONTINUE WHILE #724885
                END IF
             END IF

             IF mr_reten_inss_rur.num_ad_nf_orig IS NOT NULL AND mr_reten_inss_rur.num_ad_nf_orig <> " " THEN
                IF NOT sup0552_insere_reten_inss_rur(l_conta_array) THEN
                   LET l_conta_array = l_conta_array + 1
                   LET m_status_arquivo = 1
                   LET l_houve_erro = TRUE
                   #EXIT WHILE
                   CONTINUE WHILE #724885
                END IF
             END IF

             IF (mr_w_sup0552_4.compl_nota1 IS NOT NULL AND mr_w_sup0552_4.compl_nota1 <> " ") OR
                (mr_w_sup0552_4.compl_nota2 IS NOT NULL AND mr_w_sup0552_4.compl_nota2 <> " ") THEN
                IF NOT sup0552_insere_nfe_sup_compl(l_conta_array) THEN
                   LET l_conta_array = l_conta_array + 1
                   LET m_status_arquivo = 1
                   LET l_houve_erro = TRUE
                   #EXIT WHILE
                   CONTINUE WHILE #724885
                END IF
             END IF
             # FIM 554725


             WHENEVER ERROR CONTINUE
             INSERT INTO aviso_rec_compl (cod_empresa          ,
                                          num_aviso_rec        ,
                                          cod_transpor         ,
                                          den_transpor         ,
                                          num_placa_veic       ,
                                          num_di               ,
                                          ies_incl_import      ,
                                          num_lote_pat         ,
                                          cod_operacao         ,
                                          cod_empresa_orig     ,
                                          cod_moeda_forn       ,
                                          num_embarque         ,
                                          ies_situacao         ,
                                          nom_usuario          ,
                                          dat_proces           ,
                                          hor_operac           ,
                                          cod_fiscal_compl     )
                                  VALUES (mr_aviso_rec_compl.cod_empresa          ,
                                          mr_aviso_rec_compl.num_aviso_rec        ,
                                          mr_aviso_rec_compl.cod_transpor         ,
                                          mr_aviso_rec_compl.den_transpor         ,
                                          mr_aviso_rec_compl.num_placa_veic       ,
                                          mr_aviso_rec_compl.num_di               ,
                                          mr_aviso_rec_compl.ies_incl_import      ,
                                          mr_aviso_rec_compl.num_lote_pat         ,
                                          mr_aviso_rec_compl.cod_operacao         ,
                                          mr_aviso_rec_compl.cod_empresa_orig     ,
                                          mr_aviso_rec_compl.cod_moeda_forn       ,
                                          mr_aviso_rec_compl.num_embarque         ,
                                          mr_aviso_rec_compl.ies_situacao         ,
                                          mr_aviso_rec_compl.nom_usuario          ,
                                          mr_aviso_rec_compl.dat_proces           ,
                                          mr_aviso_rec_compl.hor_operac           ,
                                          mr_aviso_rec_compl.cod_fiscal_compl     )
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN

                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da NF_SUP "
                LET m_status_arquivo = 1

                CALL sup0552_mostra_erro_ar_compl()

                LET l_houve_erro = TRUE
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

            #CH786325 - Consistências KLIN
             IF LOG_existe_epl("sup0552y_verifica_vencimento_nff_cnd_pagto") THEN
               #EPL Passagem de parâmetros
                CALL LOG_setVar("num_pedido",mr_aviso_rec.num_pedido)
                CALL LOG_setVar("num_seq",mr_aviso_rec.num_seq)
                CALL LOG_setVar("num_aviso_rec",l_num_aviso_rec)
                CALL LOG_setVar("qtd_dias_apos_dupl",p_par_sup.qtd_dias_apos_dupl)
                CALL LOG_setVar("qtd_dias_ant_dupl",p_par_sup.qtd_dias_ant_dupl)
                CALL LOG_setVar("cod_empresa",mr_nf_sup.cod_empresa)
                CALL LOG_setVar("cnd_pgto_nf",mr_nf_sup.cnd_pgto_nf)
                CALL LOG_setVar("dat_entrada_nf",mr_nf_sup.dat_entrada_nf)
                CALL LOG_setVar("dat_emis_nf",mr_nf_sup.dat_emis_nf)
                CALL LOG_setVar("cod_fornecedor",mr_nf_sup.cod_fornecedor)
                CALL LOG_setVar("num_nf",mr_nf_sup.num_nf)
                CALL LOG_setVar("ser_nf",mr_nf_sup.ser_nf)
                CALL LOG_setVar("ssr_nf",mr_nf_sup.ssr_nf)

               #EPL Verificação de vencimentos da NFF x CONDIÇÃO DE PAGAMENTO
                IF NOT sup0552y_verifica_vencimento_nff_cnd_pagto() THEN
                   LET m_houve_erro = TRUE
                   LET l_conta_array = l_conta_array + 1
                   CALL sup0552_carrega_chave_consiste(l_conta_array)
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Data vencimento duplicata calculada difere da informada."
                   LET m_status_arquivo = 1
                   LET l_houve_erro = TRUE
                END IF
             END IF

             IF LOG_existe_epl("sup0552y_verifica_diverg_preco_unit") THEN
               #EPL Passagem de parâmetros
                CALL LOG_setVar("num_aviso_rec",mr_aviso_rec.num_aviso_rec)
                CALL LOG_setVar("pre_unit_nf",mr_aviso_rec.pre_unit_nf)
                CALL LOG_setVar("num_seq",mr_aviso_rec.num_seq)

               #EPL Verificação de difergencia do preço unitário do item da NF x preço unitário do item da OC
                IF NOT sup0552y_verifica_diverg_preco_unit() THEN
                   LET m_houve_erro = TRUE
                   LET l_conta_array = l_conta_array + 1
                   CALL sup0552_carrega_chave_consiste(l_conta_array)
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Preço unit. do item da NF diverge do preço unit. da OC."
                   LET m_status_arquivo = 1
                   LET l_houve_erro = TRUE
                END IF
             END IF

             IF LOG_existe_epl("sup0552y_consiste_saldos") THEN
                IF mr_aviso_rec.num_oc IS NOT NULL AND mr_aviso_rec.num_oc <> " " THEN
                  #EPL Passagem de parâmetros
                   CALL LOG_setVar("num_oc",mr_aviso_rec.num_oc)
                   CALL LOG_setVar("qtd_declarad_nf",mr_aviso_rec.qtd_declarad_nf)

                  #EPL Verificação de difergencia do preço unitário do item da NF x preço unitário do item da OC
                   IF NOT sup0552y_consiste_saldos() THEN
                      LET m_houve_erro = TRUE
                      LET l_conta_array = l_conta_array + 1
                      CALL sup0552_carrega_chave_consiste(l_conta_array)
                      LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Quantidade do item da NF maior que a quantidade tolerada."
                      LET m_status_arquivo = 1
                      LET l_houve_erro = TRUE
                   END IF
                END IF
             END IF

             IF l_houve_erro THEN
                CONTINUE WHILE
             END IF
            #---------------------------------------------------

             #--inicio--OS 724885 #
             IF mr_inf_compl_nf.valor_despesa_acessoria IS NOT NULL AND
                mr_inf_compl_nf.valor_despesa_acessoria > 0 THEN
                WHENEVER ERROR CONTINUE
                  SELECT SUM(aviso_rec.val_liquido_item)
                    INTO l_val_tot_liq
                    FROM nf_sup, aviso_rec, aviso_rec_compl, cod_fiscal_sup
                   WHERE nf_sup.cod_empresa              = mr_nf_sup.cod_empresa
                     AND nf_sup.num_aviso_rec            = mr_nf_sup.num_aviso_rec
                     AND aviso_rec.cod_empresa           = nf_sup.cod_empresa
                     AND aviso_rec.num_aviso_rec         = nf_sup.num_aviso_rec
                     AND aviso_rec_compl.cod_empresa     = aviso_rec.cod_empresa
                     AND aviso_rec_compl.num_aviso_rec   = aviso_rec.num_aviso_rec
                     AND cod_fiscal_sup.cod_fiscal       = aviso_rec.cod_fiscal_item
                     AND cod_fiscal_sup.cod_fiscal_compl = aviso_rec_compl.cod_fiscal_compl
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("SELECT SUM","NF_SUP/AVISO_REC/AVISO_REC_COMPL/COD_FISCAL_SUP")
                   LET l_houve_erro = TRUE
                   #EXIT WHILE
                   CONTINUE WHILE #724885
                END IF

                WHENEVER ERROR CONTINUE
                 DECLARE cq_despesa_aces CURSOR WITH HOLD FOR
                  SELECT num_seq,
                         val_liquido_item
                    FROM aviso_rec
                   WHERE cod_empresa   = mr_nf_sup.cod_empresa
                     AND num_aviso_rec = mr_nf_sup.num_aviso_rec
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql('SELECT','CQ_DESPESA_ACES')
                   LET l_houve_erro = TRUE
                   #EXIT WHILE
                   CONTINUE WHILE #724885
                END IF


                WHENEVER ERROR CONTINUE
                FOREACH cq_despesa_aces INTO l_num_seq,
                                             l_val_liquido_item
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql('FOREACH CURSOR','cq_despesa_aces')
                      LET l_houve_erro = TRUE
                      EXIT FOREACH
                   END IF

                   LET l_val_despesa_aces_i = (mr_inf_compl_nf.valor_despesa_acessoria * l_val_liquido_item) / l_val_tot_liq
                   LET l_val_liquido_item   = l_val_liquido_item + l_val_despesa_aces_i

                   IF l_val_despesa_aces_i IS NOT NULL THEN
                      WHENEVER ERROR CONTINUE
                        UPDATE aviso_rec
                           SET val_despesa_aces_i = l_val_despesa_aces_i,
                               val_liquido_item   = l_val_liquido_item
                         WHERE cod_empresa        = mr_nf_sup.cod_empresa
                           AND num_aviso_rec      = mr_nf_sup.num_aviso_rec
                           AND num_seq            = l_num_seq
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode <> 0 THEN
                         CALL log003_err_sql('UPDATE','AVISO_REC')
                         LET l_houve_erro = TRUE
                          CLOSE cq_despesa_aces #764215#
                         EXIT FOREACH
                      END IF
                   END IF

                   WHENEVER ERROR CONTINUE

                END FOREACH
                FREE cq_despesa_aces
                WHENEVER ERROR STOP
             END IF
             #---fim----OS 724885 #

             WHENEVER ERROR CONTINUE
             INSERT INTO nf_sup_erro ( empresa, num_aviso_rec, num_seq, des_pendencia_item, ies_origem_erro, ies_erro_grave )  VALUES ( mr_nf_sup.cod_empresa,
                                            mr_nf_sup.num_aviso_rec,
                                            0,
                                            "Falta efetuar consistencia",
                                            "1",
                                            "S")
             WHENEVER ERROR STOP

             IF sqlca.sqlcode <> 0 THEN
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da NF_SUP_ERRO "
                LET m_status_arquivo = 1
                LET l_houve_erro = TRUE
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

             IF NOT sup0552_atualiza_sup0552_4_proces("S") THEN
                LET l_houve_erro = TRUE
                LET m_status_arquivo = 1
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

             INITIALIZE mr_importados.* TO NULL

             LET mr_importados.tipo_registro     = "M"
             LET mr_importados.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
             LET mr_importados.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
             LET mr_importados.subserie_nf       = mr_w_sup0552_4.subserie_nf
             LET mr_importados.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
             LET mr_importados.fornecedor        = mr_w_sup0552_4.fornecedor
             LET mr_importados.num_nff_relac     = 0
             LET mr_importados.arquivo           = m_nom_arquivo_consis

             WHENEVER ERROR CONTINUE
             INSERT INTO w_sup0552_2 (tipo_registro     ,
                                      nota_fiscal       ,
                                      serie_nota_fiscal ,
                                      subserie_nf       ,
                                      espc_nota_fiscal  ,
                                      fornecedor        ,
                                      num_nff_relac     ,
                                      arquivo           )
                              VALUES (mr_importados.tipo_registro     ,
                                      mr_importados.nota_fiscal       ,
                                      mr_importados.serie_nota_fiscal ,
                                      mr_importados.subserie_nf       ,
                                      mr_importados.espc_nota_fiscal  ,
                                      mr_importados.fornecedor        ,
                                      mr_importados.num_nff_relac     ,
                                      mr_importados.arquivo           )
             WHENEVER ERROR STOP

             IF sqlca.sqlcode <> 0 THEN
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da W_SUP0552_2 "
                LET m_status_arquivo = 1
                LET l_houve_erro = TRUE
                LET m_status_arquivo = 1
                CONTINUE WHILE
             END IF

             #---inicio----OS 724885 #
             IF find4GLFunction('cap3095_adic_set_programa_orig') THEN
                CALL cap3095_adic_set_programa_orig('SUP0552')

                CALL cap3095_integra_impostos('NF',
                                              mr_w_sup0552_4.empresa,
                                              mr_w_sup0552_4.nota_fiscal      ,
                                              mr_w_sup0552_4.serie_nota_fiscal,
                                              mr_w_sup0552_4.subserie_nf      ,
                                              mr_w_sup0552_4.espc_nota_fiscal ,
                                              mr_w_sup0552_4.fornecedor)
                RETURNING l_status, l_msg

                IF l_status = FALSE THEN
                   LET l_conta_array = l_conta_array + 1
                   CALL sup0552_carrega_chave_consiste(l_conta_array)
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  = l_msg
                   LET m_status_arquivo = 1
                   LET l_houve_erro = TRUE
                   CONTINUE WHILE
                END IF
             END IF
             #---fim----OS 724885 #

             IF NOT fcl1150_integra_ar_fcx(mr_nf_sup.cod_empresa,mr_nf_sup.num_aviso_rec,"IN") THEN
                LET l_houve_erro = TRUE
                LET m_status_arquivo = 1
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

             IF m_tipo_de_processo = "I" THEN
                IF m_transacao_ativa THEN
                   WHENEVER ERROR CONTINUE
                   CALL log085_transacao("COMMIT")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("EFETIVACAO","NF_SUP")
                      CALL log085_transacao("ROLLBACK") #OS596059
                      LET l_houve_erro = TRUE
                      LET m_status_arquivo = 1
                      EXIT WHILE
                   END IF
                   LET m_transacao_ativa = FALSE
                END IF
             END IF

             #Não estava rateando o frete que vem na nota fiscal...
             #IF mr_nf_sup.num_conhec <> 0 THEN
             #   CALL supm61_frete_sup_leitura(mr_nf_sup.cod_empresa,
             #                                 mr_nf_sup.cod_transpor,
             #                                 mr_nf_sup.num_conhec,
             #                                 mr_nf_sup.ser_conhec,
             #                                 mr_nf_sup.ssr_conhec,
             #                                 FALSE,
             #                                 FALSE)
             #      RETURNING p_status
             #
             #   IF p_status = TRUE THEN
             #      LET mr_frete_sup.cod_empresa          = supm61_frete_sup_get_cod_empresa()
             #      LET mr_frete_sup.cod_empresa_estab    = supm61_frete_sup_get_cod_empresa_estab()
             #      LET mr_frete_sup.cod_transpor         = supm61_frete_sup_get_cod_transpor()
             #      LET mr_frete_sup.num_conhec           = supm61_frete_sup_get_num_conhec()
             #      LET mr_frete_sup.ser_conhec           = supm61_frete_sup_get_ser_conhec()
             #      LET mr_frete_sup.ssr_conhec           = supm61_frete_sup_get_ssr_conhec()
             #      LET mr_frete_sup.dat_emis_conhec      = supm61_frete_sup_get_dat_emis_conhec()
             #      LET mr_frete_sup.dat_entrada_conhec   = supm61_frete_sup_get_dat_entrada_conhec()
             #      LET mr_frete_sup.cnd_pgto_frt         = supm61_frete_sup_get_cnd_pgto_frt()
             #      LET mr_frete_sup.cod_regist_entrada   = supm61_frete_sup_get_cod_regist_entrada()
             #      LET mr_frete_sup.cod_fiscal_frete     = supm61_frete_sup_get_cod_fiscal_frete()
             #      LET mr_frete_sup.gru_ctr_desp_frete   = supm61_frete_sup_get_gru_ctr_desp_frete()
             #      LET mr_frete_sup.ies_incid_icms_fre   = supm61_frete_sup_get_ies_incid_icms_fre()
             #      LET mr_frete_sup.val_frete            = supm61_frete_sup_get_val_frete()
             #      LET mr_frete_sup.val_base_c_frete_c   = supm61_frete_sup_get_val_base_c_frete_c()
             #      LET mr_frete_sup.val_tot_icms_frt_d   = supm61_frete_sup_get_val_tot_icms_frt_d()
             #      LET mr_frete_sup.val_tot_icms_frt_c   = supm61_frete_sup_get_val_tot_icms_frt_c()
             #      LET mr_frete_sup.val_icms_diferen     = supm61_frete_sup_get_val_icms_diferen()
             #      LET mr_frete_sup.pct_icms_frete_c     = supm61_frete_sup_get_pct_icms_frete_c()
             #      LET mr_frete_sup.pct_red_bc_frete_c   = supm61_frete_sup_get_pct_red_bc_frete_c()
             #      LET mr_frete_sup.pct_diferen_fret_c   = supm61_frete_sup_get_pct_diferen_fret_c()
             #      LET mr_frete_sup.val_adiant           = supm61_frete_sup_get_val_adiant()
             #      LET mr_frete_sup.ies_conhec_erro      = supm61_frete_sup_get_ies_conhec_erro()
             #      LET mr_frete_sup.nom_resp_aceite_er   = supm61_frete_sup_get_nom_resp_aceite_er()
             #      LET mr_frete_sup.ies_incl_cap         = supm61_frete_sup_get_ies_incl_cap()
             #      LET mr_frete_sup.ies_incl_contab      = supm61_frete_sup_get_ies_incl_contab()
             #      LET mr_frete_sup.cod_praca            = supm61_frete_sup_get_cod_praca()
             #      LET mr_frete_sup.ies_frt_contratado   = supm61_frete_sup_get_ies_frt_contratado()
             #      LET mr_frete_sup.tip_carga            = supm61_frete_sup_get_tip_carga()
             #      LET mr_frete_sup.cod_item_tab_frete   = supm61_frete_sup_get_cod_item_tab_frete()
             #      LET mr_frete_sup.pes_vol_frete        = supm61_frete_sup_get_pes_vol_frete()
             #      LET mr_frete_sup.val_frete_c          = supm61_frete_sup_get_val_frete_c()
             #      LET mr_frete_sup.ies_diverg_listada   = supm61_frete_sup_get_ies_diverg_listada()
             #      LET mr_frete_sup.ies_diverg_val_frt   = supm61_frete_sup_get_ies_diverg_val_frt()
             #      LET mr_frete_sup.ies_liberacao_frt    = supm61_frete_sup_get_ies_liberacao_frt()
             #      LET mr_frete_sup.ies_diverg_relac     = supm61_frete_sup_get_ies_diverg_relac()
             #      LET mr_frete_sup.ies_diverg_cnd_pgt   = supm61_frete_sup_get_ies_diverg_cnd_pgt()
             #      LET mr_frete_sup.cnd_pgto_tab         = supm61_frete_sup_get_cnd_pgto_tab()
             #      LET mr_frete_sup.tip_frete            = supm61_frete_sup_get_tip_frete()
             #      LET mr_frete_sup.cod_tip_despesa      = supm61_frete_sup_get_cod_tip_despesa()
             #      LET mr_frete_sup.ies_subst_tribut     = supm61_frete_sup_get_ies_subst_tribut()
             #      LET mr_frete_sup.val_base_c_frete_d   = supm61_frete_sup_get_val_base_c_frete_d()
             #
             #      CALL supr12_rateio_frete(mr_frete_sup.*)
             #         RETURNING p_status
             #
             #   END IF
             #
             #   IF p_status THEN
             #      EXIT FOREACH
             #   END IF
             #END IF

             LET l_conta_import = l_conta_import + 1
             IF NOT LOG_job_mode() THEN
                CALL log120_procura_caminho("sup0682") RETURNING comando2
                LET comando2 = comando2 CLIPPED        ," ",
                              mr_nf_sup.cod_empresa  ," ",
                              mr_nf_sup.num_aviso_rec
                RUN comando2 RETURNING p_status
             END IF

             LET l_contador = 0
             WHENEVER ERROR CONTINUE
             SELECT COUNT(*)
               INTO l_contador
               FROM w_sup0552_4
              WHERE w_sup0552_4.empresa           = mr_w_sup0552_4.empresa
                AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4.num_conhec_frete
                AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4.serie_conhec_frete
                AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4.subserie_conh_fret
                AND w_sup0552_4.espc_nota_fiscal  = "CON"
                AND w_sup0552_4.fornecedor        = mr_w_sup0552_4.transportador
                AND w_sup0552_4.processado        = "N"
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 OR
                l_contador IS NULL THEN
                LET l_contador = 0
             END IF

             IF l_contador = 0 THEN

                ### OS457682 - não rateava o frete...
                IF mr_nf_sup.num_conhec <> 0 THEN
                   CALL supm61_frete_sup_leitura(mr_nf_sup.cod_empresa,
                                                 mr_nf_sup.cod_transpor,
                                                 mr_nf_sup.num_conhec,
                                                 mr_nf_sup.ser_conhec,
                                                 mr_nf_sup.ssr_conhec,
                                                 FALSE,
                                                 TRUE)
                      RETURNING p_status,l_msg

                   IF p_status = TRUE THEN
                      LET mr_frete_sup.cod_empresa          = supm61_frete_sup_get_cod_empresa()
                      LET mr_frete_sup.cod_empresa_estab    = supm61_frete_sup_get_cod_empresa_estab()
                      LET mr_frete_sup.cod_transpor         = supm61_frete_sup_get_cod_transpor()
                      LET mr_frete_sup.num_conhec           = supm61_frete_sup_get_num_conhec()
                      LET mr_frete_sup.ser_conhec           = supm61_frete_sup_get_ser_conhec()
                      LET mr_frete_sup.ssr_conhec           = supm61_frete_sup_get_ssr_conhec()
                      LET mr_frete_sup.dat_emis_conhec      = supm61_frete_sup_get_dat_emis_conhec()
                      LET mr_frete_sup.dat_entrada_conhec   = supm61_frete_sup_get_dat_entrada_conhec()
                      LET mr_frete_sup.cnd_pgto_frt         = supm61_frete_sup_get_cnd_pgto_frt()
                      LET mr_frete_sup.cod_regist_entrada   = supm61_frete_sup_get_cod_regist_entrada()
                      LET mr_frete_sup.cod_fiscal_frete     = supm61_frete_sup_get_cod_fiscal_frete()
                      LET mr_frete_sup.gru_ctr_desp_frete   = supm61_frete_sup_get_gru_ctr_desp_frete()
                      LET mr_frete_sup.ies_incid_icms_fre   = supm61_frete_sup_get_ies_incid_icms_fre()
                      LET mr_frete_sup.val_frete            = supm61_frete_sup_get_val_frete()
                      LET mr_frete_sup.val_base_c_frete_c   = supm61_frete_sup_get_val_base_c_frete_c()
                      LET mr_frete_sup.val_tot_icms_frt_d   = supm61_frete_sup_get_val_tot_icms_frt_d()
                      LET mr_frete_sup.val_tot_icms_frt_c   = supm61_frete_sup_get_val_tot_icms_frt_c()
                      LET mr_frete_sup.val_icms_diferen     = supm61_frete_sup_get_val_icms_diferen()
                      LET mr_frete_sup.pct_icms_frete_c     = supm61_frete_sup_get_pct_icms_frete_c()
                      LET mr_frete_sup.pct_red_bc_frete_c   = supm61_frete_sup_get_pct_red_bc_frete_c()
                      LET mr_frete_sup.pct_diferen_fret_c   = supm61_frete_sup_get_pct_diferen_fret_c()
                      LET mr_frete_sup.val_adiant           = supm61_frete_sup_get_val_adiant()
                      LET mr_frete_sup.ies_conhec_erro      = supm61_frete_sup_get_ies_conhec_erro()
                      LET mr_frete_sup.nom_resp_aceite_er   = supm61_frete_sup_get_nom_resp_aceite_er()
                      LET mr_frete_sup.ies_incl_cap         = supm61_frete_sup_get_ies_incl_cap()
                      LET mr_frete_sup.ies_incl_contab      = supm61_frete_sup_get_ies_incl_contab()
                      LET mr_frete_sup.cod_praca            = supm61_frete_sup_get_cod_praca()
                      LET mr_frete_sup.ies_frt_contratado   = supm61_frete_sup_get_ies_frt_contratado()
                      LET mr_frete_sup.tip_carga            = supm61_frete_sup_get_tip_carga()
                      LET mr_frete_sup.cod_item_tab_frete   = supm61_frete_sup_get_cod_item_tab_frete()
                      LET mr_frete_sup.pes_vol_frete        = supm61_frete_sup_get_pes_vol_frete()
                      LET mr_frete_sup.val_frete_c          = supm61_frete_sup_get_val_frete_c()
                      LET mr_frete_sup.ies_diverg_listada   = supm61_frete_sup_get_ies_diverg_listada()
                      LET mr_frete_sup.ies_diverg_val_frt   = supm61_frete_sup_get_ies_diverg_val_frt()
                      LET mr_frete_sup.ies_liberacao_frt    = supm61_frete_sup_get_ies_liberacao_frt()
                      LET mr_frete_sup.ies_diverg_relac     = supm61_frete_sup_get_ies_diverg_relac()
                      LET mr_frete_sup.ies_diverg_cnd_pgt   = supm61_frete_sup_get_ies_diverg_cnd_pgt()
                      LET mr_frete_sup.cnd_pgto_tab         = supm61_frete_sup_get_cnd_pgto_tab()
                      LET mr_frete_sup.tip_frete            = supm61_frete_sup_get_tip_frete()
                      LET mr_frete_sup.cod_tip_despesa      = supm61_frete_sup_get_cod_tip_despesa()
                      LET mr_frete_sup.ies_subst_tribut     = supm61_frete_sup_get_ies_subst_tribut()
                      LET mr_frete_sup.val_base_c_frete_d   = supm61_frete_sup_get_val_base_c_frete_d()

                      CALL supr12_rateio_frete(mr_frete_sup.*)
                        RETURNING p_status

                  ELSE
                     #724885
                     LET l_conta_div   = l_conta_div + 1
                     LET l_conta_array = l_conta_array + 1

                     CALL sup0552_carrega_chave_consiste(l_conta_array)
                     LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Conhecimento de frete nao cadastrado: ", mr_nf_sup.num_conhec, " - ", mr_frete_sup.ser_conhec, " - ", mr_frete_sup.ssr_conhec       #724885
                     LET m_status_arquivo = 1
                     CONTINUE WHILE
                  END IF
               END IF

               IF NOT LOG_job_mode() THEN
                  IF mr_nf_sup.ies_nf_aguard_nfe = "7" THEN
                     CALL sup0552_insere_erro_transito_nf(mr_nf_sup.*)
                  END IF
                  CALL log120_procura_caminho("sup0680") RETURNING comando2
                  LET comando2 = comando2 CLIPPED        ," ",
                                 mr_nf_sup.cod_empresa  ," ",
                                 mr_nf_sup.num_aviso_rec, " ",
                                 "N"," ",
                                 "N"," ",
                                 TRUE
                  RUN comando2 RETURNING p_cancel
               END IF

               LET l_contador = 0
               WHENEVER ERROR CONTINUE
               SELECT COUNT(*)
                 INTO l_contador
                 FROM nf_sup_erro
                WHERE nf_sup_erro.empresa        = mr_nf_sup.cod_empresa
                  AND nf_sup_erro.num_aviso_rec  = mr_nf_sup.num_aviso_rec
                  AND (nf_sup_erro.ies_origem_erro <> "4" AND
                       nf_sup_erro.ies_origem_erro <> "5")
               WHENEVER ERROR STOP
               IF sqlca.sqlcode = 0 THEN
                  IF l_contador > 0  THEN
                     WHENEVER ERROR CONTINUE
                     UPDATE nf_sup SET nf_sup.ies_nf_com_erro = "S"
                      WHERE nf_sup.cod_empresa   = mr_nf_sup.cod_empresa
                        AND nf_sup.num_aviso_rec = mr_nf_sup.num_aviso_rec
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        CALL log003_err_sql("ATUALIZACAO","NF_SUP")
                        LET l_houve_erro = TRUE
                        LET m_status_arquivo = 1
                        #EXIT WHILE
                        CONTINUE WHILE #724885
                     END IF

                     IF m_ies_cont_insp_aut = "3" THEN
                        IF gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
                           (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                            mr_nf_sup.ies_especie_nf = "NFS") THEN
                           IF sup0552_verifica_itens_nao_estoque() THEN
                              CALL sup0552_gera_movimento_estoque("DEB_DIRETO","NORMAL")
                           ELSE
                              CALL sup0552_gera_movimento_estoque("NORMAL","NORMAL")
                           END IF
                        ELSE
                           CALL sup0552_gera_movimento_estoque("NORMAL","NORMAL")
                        END IF
                     ELSE
                        IF gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
                           (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                            mr_nf_sup.ies_especie_nf = "NFS") THEN
                           IF sup0552_verifica_itens_nao_estoque() THEN
                              CALL sup0552_gera_movimento_estoque("DEB_DIRETO","NORMAL")
                           ELSE
                              CALL sup0552_gera_movimento_estoque("NORMAL","NORMAL")
                           END IF
                        ELSE
                           CALL sup0552_gera_movimento_estoque("NORMAL","NORMAL")
                        END IF
                     END IF
                  ELSE
                     WHENEVER ERROR CONTINUE
                     UPDATE nf_sup SET nf_sup.ies_nf_com_erro = "N"
                      WHERE nf_sup.cod_empresa   = mr_nf_sup.cod_empresa
                        AND nf_sup.num_aviso_rec = mr_nf_sup.num_aviso_rec
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        CALL log003_err_sql("ATUALIZACAO","NF_SUP")
                        LET l_houve_erro = TRUE
                        LET m_status_arquivo = 1
                        #EXIT WHILE
                        CONTINUE WHILE #724885
                      END IF

                      CALL sup0552_gera_movimento_estoque("NORMAL","NORMAL")

                      CALL sup0552_verifica_frete()
                      IF m_ies_grava_erro_4 = "S" THEN
                         IF NOT sup0552_grava_liberacao_nota(l_conta_array) THEN
                            LET l_conta_array = l_conta_array + 1
                         END IF
                      END IF

                  END IF
               END IF

                CALL sup1473_integra_nf_cap_livro_fiscal(mr_nf_sup.num_nf,
                                                         mr_nf_sup.ser_nf,
                                                         mr_nf_sup.ssr_nf,
                                                         "NOTA","", "", "",
                                                         mr_nf_sup.cod_empresa, "",
                                                         mr_nf_sup.cod_fornecedor,
                                                         mr_nf_sup.ies_especie_nf)


                IF NOT supr6_contabilizacao_por_documento(mr_nf_sup.cod_empresa,
                                                          mr_nf_sup.num_nf,
                                                          mr_nf_sup.ser_nf,
                                                          mr_nf_sup.ssr_nf,
                                                          mr_nf_sup.ies_especie_nf,
                                                          mr_nf_sup.cod_fornecedor,
                                                          mr_nf_sup.dat_entrada_nf,
                                                          mr_nf_sup.num_aviso_rec,TRUE) THEN

                   LET m_msg = " EMP ",mr_nf_sup.cod_empresa, " NF ",mr_nf_sup.num_nf USING "<<<<<<"
                   LET m_msg = m_msg CLIPPED," - ",log0030_mensagem_get_texto()
                   LET l_conta_div   = l_conta_div   + 1
                   LET l_conta_array = l_conta_array + 1
                   CALL sup0552_carrega_chave_consiste(l_conta_array)
                   LET ma_array_consistencias[l_conta_array].txt_consistencia = m_msg CLIPPED
                END IF
             ELSE
                ### Se o frete relacionado a nota fiscal ainda nao foi processado,
                ### marca para que a consistencia da NF seja feita apos a inclusao
                ### do frete.

                WHENEVER ERROR CONTINUE
                INSERT INTO w_sup0552_3 (empresa,
                                         nota_fiscal       ,
                                         serie_nota_fiscal ,
                                         subserie_nf       ,
                                         espc_nota_fiscal  ,
                                         fornecedor        )
                                 VALUES (mr_w_sup0552_4.empresa,
                                         mr_w_sup0552_4.nota_fiscal,
                                         mr_w_sup0552_4.serie_nota_fiscal,
                                         mr_w_sup0552_4.subserie_nf,
                                         mr_w_sup0552_4.espc_nota_fiscal,
                                         mr_w_sup0552_4.fornecedor)
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   LET l_conta_array = l_conta_array + 1
                   CALL sup0552_carrega_chave_consiste(l_conta_array)
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da W_SUP0552_3 "
                   LET m_status_arquivo = 1
                   LET l_houve_erro = TRUE
                   #EXIT WHILE
                   CONTINUE WHILE #724885
                END IF

             END IF

             IF m_tipo_de_processo = "I" THEN
                IF NOT m_transacao_ativa THEN
#OS 578359         CALL sup1084_cria_temp()
                   WHENEVER ERROR CONTINUE
                   CALL log085_transacao("BEGIN")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("INICIO","AR_PIS_COFINS")
                   END IF
                   LET m_transacao_ativa = TRUE
                END IF
             END IF

             ##Deve ser chamado após a consistência da nota fiscal, como é feito no SUP3760,
             ##senão caso seja gerado erro na tabela nf_sup_erro o mesmo será eliminado
             IF NOT sup0552_grava_ar_pis_cofins("NF") THEN
                LET l_houve_erro = TRUE
                LET m_status_arquivo = 1
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF
          ELSE
             LET l_houve_erro = TRUE
             LET m_status_arquivo = 1
             IF l_houve_erro_reg_c = TRUE THEN
                LET l_houve_erro_reg_c = FALSE
                LET l_houve_erro = FALSE
                CONTINUE WHILE
             ELSE
                EXIT WHILE
             END IF
          END IF
       ELSE
          IF m_tipo_de_processo = "I" THEN
             IF NOT l_houve_erro THEN
                IF m_transacao_ativa THEN
                   WHENEVER ERROR CONTINUE
                   CALL log085_transacao("COMMIT")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("EFETIVACAO","AR_PIS_COFINS")
                      CALL log085_transacao("ROLLBACK") #OS596059
                      LET l_houve_erro = TRUE
                      LET m_status_arquivo = 1
                      EXIT WHILE
                   END IF
                   LET m_transacao_ativa = FALSE
                   WHENEVER ERROR CONTINUE
                   CALL log085_transacao("BEGIN")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("TRANSACAO","BEGIN")
                   END IF
                   LET m_transacao_ativa = TRUE
                END IF
             ELSE
                CALL sup0552_efetua_rollback()
                LET m_status_arquivo = 1
                IF l_houve_erro_reg_c = TRUE THEN
                   LET l_houve_erro_reg_c = FALSE
                   LET l_houve_erro = FALSE
                   CONTINUE WHILE
                ELSE
                EXIT WHILE
                END IF
             END IF
          END IF
       END IF

      #Atualizacao GAO
       IF m_controla_gao = 'S' THEN

          WHENEVER ERROR CONTINUE
          DECLARE cq_aviso_rec CURSOR WITH HOLD FOR
           SELECT aviso_rec.cod_empresa,
                  aviso_rec.num_aviso_rec,
                  aviso_rec.num_seq,
                  ((aviso_rec.qtd_recebida - aviso_rec.qtd_devolvid)*aviso_rec.pre_unit_nf),
                  nf_sup.dat_entrada_nf
             FROM aviso_rec, nf_sup
            WHERE aviso_rec.cod_empresa    = mr_nf_sup.cod_empresa
              AND nf_sup.cod_empresa       = mr_nf_sup.cod_empresa
              AND nf_sup.num_aviso_rec     = mr_nf_sup.num_aviso_rec
              AND aviso_rec.num_aviso_rec  = mr_nf_sup.num_aviso_rec
          WHENEVER ERROR STOP

          IF sqlca.sqlcode <> 0
          AND sqlca.sqlcode <> 100 THEN
             CALL log003_err_sql("DECLARE","CQ_AVISO_REC")
          END IF

          INITIALIZE lr_atualiza_gao.* TO NULL

          LET l_erro_gao = 'N'
          WHENEVER ERROR CONTINUE
          FOREACH cq_aviso_rec INTO lr_atualiza_gao.cod_empresa,    lr_atualiza_gao.num_aviso_rec,
                                    lr_atualiza_gao.num_seq,        lr_atualiza_gao.valor_recebido,
                                    lr_atualiza_gao.dat_entrada_nf
          WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                 CLOSE cq_aviso_rec #764215#
                EXIT FOREACH
             END IF
             CALL sup0772_verifica_saldo_contas_nf_inclui_parcial(lr_atualiza_gao.cod_empresa,
                                                                  lr_atualiza_gao.num_aviso_rec,
                                                                  lr_atualiza_gao.num_seq,
                                                                  lr_atualiza_gao.valor_recebido,
                                                                  lr_atualiza_gao.dat_entrada_nf,
                                                                  'AR',
                                                                  'SUP0552',
                                                                  0)
             RETURNING p_status, m_msg
             IF p_status = FALSE THEN
                LET l_erro_gao = 'S'

                LET l_conta_div   = l_conta_div   + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia = m_msg CLIPPED
                CALL sup0552_deleta_tabelas()
                LET m_status_arquivo = 1
                 CLOSE cq_aviso_rec #764215#
                EXIT FOREACH
             END IF

          END FOREACH
          FREE cq_aviso_rec

          IF l_erro_gao = 'S' THEN
             LET l_houve_erro = TRUE
             CONTINUE WHILE
          END IF

       END IF
      #Atualizacao GAO

      IF find4GLFunction('supy75_atualiza_wbt_nota_fiscal') THEN
         CALL supy75_atualiza_wbt_nota_fiscal(3, 2, mr_w_sup0552_4.sequencia,mr_w_sup0552_4.empresa,"")
      END IF
    ELSE
       #nota frete

       #--inicio--OS 414316 #
       CALL sup0552_existe_h_frete_sup(mr_w_sup0552_4.empresa, mr_w_sup0552_4.fornecedor, mr_w_sup0552_4.nota_fiscal,
                                       mr_w_sup0552_4.serie_nota_fiscal, mr_w_sup0552_4.subserie_nf,  mr_w_sup0552_4.dat_emis_nf)
          RETURNING l_existe_h_tab
       #---fim----OS 414316 #

       INITIALIZE m_cod_empresa_aux TO NULL
       IF sup0552_cons_conhec_duplicado(mr_w_sup0552_4.fornecedor,
                                        mr_w_sup0552_4.nota_fiscal,
                                        mr_w_sup0552_4.serie_nota_fiscal,
                                        mr_w_sup0552_4.subserie_nf) THEN

          LET l_conta_div = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1

          CALL sup0552_carrega_chave_consiste(l_conta_array)

          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Conhecimento Já cadastrado na empresa ", m_cod_empresa_aux
          LET m_status_arquivo = 1
          CALL sup0552_efetua_rollback()

          #--inicio--OS 578942 #
          WHENEVER ERROR CONTINUE
            INSERT INTO w_verif_frete
                        (empresa,
                        nota_fiscal,
                        serie_nota_fiscal,
                        subserie_nf,
                        fornecedor)
                VALUES (mr_w_sup0552_4.empresa,
                        mr_w_sup0552_4.nota_fiscal,
                        mr_w_sup0552_4.serie_nota_fiscal,
                        mr_w_sup0552_4.subserie_nf,
                        mr_w_sup0552_4.fornecedor)
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql('INSERT','w_verif_frete1')
          END IF
          #---fim----OS 578942 #

          CONTINUE WHILE
       END IF

       WHENEVER ERROR CONTINUE
       SELECT frete_sup.num_conhec
         FROM frete_sup
        WHERE frete_sup.cod_empresa  = mr_w_sup0552_4.empresa
          AND frete_sup.num_conhec   = mr_w_sup0552_4.nota_fiscal
          AND frete_sup.ser_conhec   = mr_w_sup0552_4.serie_nota_fiscal
          AND frete_sup.ssr_conhec   = mr_w_sup0552_4.subserie_nf
          AND frete_sup.cod_transpor = mr_w_sup0552_4.fornecedor
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 OR l_existe_h_tab IS NOT NULL THEN
          LET l_conta_div = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Conhecimento de Frete já foi importado.", l_existe_h_tab CLIPPED
          LET m_status_arquivo = 1
          CALL sup0552_efetua_rollback()

          #--inicio--OS 578942 #
          WHENEVER ERROR CONTINUE
            INSERT INTO w_verif_frete
                        (empresa,
                        nota_fiscal,
                        serie_nota_fiscal,
                        subserie_nf,
                        fornecedor)
                VALUES (mr_w_sup0552_4.empresa,
                        mr_w_sup0552_4.nota_fiscal,
                        mr_w_sup0552_4.serie_nota_fiscal,
                        mr_w_sup0552_4.subserie_nf,
                        mr_w_sup0552_4.fornecedor)
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql('INSERT','w_verif_frete2')
          END IF
          #---fim----OS 578942 #

          CONTINUE WHILE
       END IF

       #--# Importação de CTe #--#
       IF m_utiliz_totvs_colab = "S" THEN

          CALL sup13429_existe_docum_pendente(mr_w_sup0552_4.empresa,           mr_w_sup0552_4.nota_fiscal,
                                              mr_w_sup0552_4.serie_nota_fiscal, mr_w_sup0552_4.subserie_nf,
                                              mr_w_sup0552_4.fornecedor,        mr_w_sup0552_4.dat_emis_nf)
               RETURNING m_status, m_msg, m_comando3


          IF m_status = 1
          OR m_status = 2
          OR m_status = 3 THEN

             LET l_conta_div   = l_conta_div   + 1
             LET l_conta_array = l_conta_array + 1

             CALL sup0552_carrega_chave_consiste(l_conta_array)
             IF m_status = 1 THEN
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Existe arquivo XML pendente de integração para este documento no Monitor de Integração."
             ELSE
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = m_msg
             END IF

             LET m_status_arquivo = 1
             CALL sup0552_efetua_rollback()

             #--inicio--OS 578942 #
             WHENEVER ERROR CONTINUE
               INSERT INTO w_verif_frete
                           (empresa,
                           nota_fiscal,
                           serie_nota_fiscal,
                           subserie_nf,
                           fornecedor)
                   VALUES (mr_w_sup0552_4.empresa,
                           mr_w_sup0552_4.nota_fiscal,
                           mr_w_sup0552_4.serie_nota_fiscal,
                           mr_w_sup0552_4.subserie_nf,
                           mr_w_sup0552_4.fornecedor)
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql('INSERT','w_verif_frete2')
             END IF
             #---fim----OS 578942 #

             CONTINUE WHILE
          END IF
       END IF
       INITIALIZE mr_frete_sup.*,
                  mr_frete_sup_compl.*,
                  mr_audit_frete.*,
                  mr_frete_sup_erro.*,
                  mr_ar_diverg.* TO NULL

       LET mr_frete_sup.cod_empresa        = mr_w_sup0552_4.empresa
       LET mr_frete_sup.cod_empresa_estab  = mr_w_sup0552_4.empresa_estabel
       LET mr_frete_sup.cod_transpor       = mr_w_sup0552_4.fornecedor

       WHENEVER ERROR CONTINUE
       SELECT fornecedor.ies_tip_fornec ##OS 606621
         INTO l_ies_tip_fornec
         FROM fornecedor
        WHERE fornecedor.cod_fornecedor   = mr_frete_sup.cod_transpor
       WHENEVER ERROR STOP

       IF sqlca.sqlcode <> 0 THEN
          LET l_conta_div        = l_conta_div + 1
          LET l_conta_array      = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
              "Transportador não esta cadastrado (VDP0815)."
          LET m_status_arquivo = 1
          CONTINUE WHILE
       END IF

       IF m_uf_igual_vendas = "S" THEN #OS353801
          WHENEVER ERROR CONTINUE
          SELECT a.num_cgc_cpf          ,
                 a.cod_fornecedor       ,
                 a.raz_social           ,
                 a.raz_social_reduz     ,
                 a.ies_tip_fornec       ,
                 a.ies_fornec_ativo     ,
                 a.ies_contrib_ipi      ,
                 a.ies_fis_juridica     ,
                 a.ins_estadual         ,
                 a.dat_cadast           ,
                 a.dat_atualiz          ,
                 a.dat_validade         ,
                 a.dat_movto_ult        ,
                 a.end_fornec           ,
                 a.den_bairro           ,
                 a.cod_cep              ,
                 a.cod_cidade           ,
                 a.cod_uni_feder        ,
                 a.cod_pais             ,
                 a.ies_zona_franca      ,
                 a.num_telefone         ,
                 a.num_fax              ,
                 a.num_telex            ,
                 a.nom_contato          ,
                 a.nom_guerra           ,
                 a.cod_cidade_pgto      ,
                 a.camara_comp          ,
                 a.cod_banco            ,
                 a.num_agencia          ,
                 a.num_conta_banco      ,
                 a.tmp_transpor         ,
                 a.tex_observ           ,
                 a.num_lote_transf      ,
                 a.pct_aceite_div       ,
                 a.ies_tip_entrega      ,
                 a.ies_dep_cred         ,
                 a.ult_num_coleta       ,
                 a.ies_gera_ap
            FROM fornecedor a, empresa b
           WHERE a.cod_fornecedor   = mr_frete_sup.cod_transpor
             AND b.cod_empresa      = mr_frete_sup.cod_empresa
             AND a.cod_uni_feder    = b.uni_feder
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET l_conta_div   = l_conta_div   + 1
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia =
                 "UF do transportador difere da empresa corrente."
             LET m_status_arquivo = 1
             CONTINUE WHILE
          END IF
       END IF

       IF m_permite_ent_fret_apenas_transp = "S" THEN ##OS 606621
          IF l_ies_tip_fornec <> "2" AND
             l_ies_tip_fornec <> "5" THEN
             LET l_conta_div   = l_conta_div   + 1
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia = "Transp. não está cadastrado como Transportador (VDP0815)"
             LET m_status_arquivo = 1
             CONTINUE WHILE
          END IF
       END IF

       IF mr_w_sup0552_4.dat_ent_nf < mr_w_sup0552_4.dat_emis_nf THEN
          LET l_conta_div   = l_conta_div   + 1
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia =
              "Data de entrada do frete menor que a data de emissao."
          LET m_status_arquivo = 1
          CONTINUE WHILE
       END IF

       LET mr_frete_sup.num_conhec         = mr_w_sup0552_4.nota_fiscal
       LET mr_frete_sup.ser_conhec         = mr_w_sup0552_4.serie_nota_fiscal
       LET mr_frete_sup.ssr_conhec         = mr_w_sup0552_4.subserie_nf
       LET mr_frete_sup.dat_emis_conhec    = mr_w_sup0552_4.dat_emis_nf
       LET mr_frete_sup.dat_entrada_conhec = mr_w_sup0552_4.dat_ent_nf
       LET mr_frete_sup.cnd_pgto_frt       = mr_w_sup0552_4.cond_pagto
       LET l_frete_vnd_sem_nf              = TRUE
       IF m_data_execut_atual = 'S' THEN
          LET mr_w_sup0552_4.dat_ent_nf = TODAY
          LET mr_frete_sup.dat_entrada_conhec  = TODAY
       END IF

       IF m_valida_nf_frete_filiais = 'S' THEN
             CALL sup3321_valida_nf_frete_existe(mr_frete_sup.num_conhec ,
                                                 mr_frete_sup.ser_conhec,
                                                 mr_frete_sup.ssr_conhec,
                                                 mr_frete_sup.cod_transpor,
                                                 mr_frete_sup.dat_emis_conhec,
                                                 2,
                                                 TRUE)
             RETURNING l_status,l_msg
             IF NOT l_status THEN
                LET l_conta_div   = l_conta_div   + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia =
                    l_msg CLIPPED
                LET m_status_arquivo = 1
                LET l_erro_import = TRUE
             END IF
       END IF

       IF sup0552_verifica_fechamento(mr_frete_sup.dat_entrada_conhec,l_conta_array,"FRETE",FALSE) = FALSE THEN  #578942
          LET l_conta_div        = l_conta_div + 1
          LET l_conta_array      = l_conta_array + 1
          LET m_status_arquivo = 1
          CONTINUE WHILE
       END IF

       {SELECT cond_pgto_cap.cnd_pgto
         FROM cond_pgto_cap
        WHERE cond_pgto_cap.cnd_pgto = mr_frete_sup.cnd_pgto_frt

       IF sqlca.sqlcode <> 0 THEN
          LET l_conta_div        = l_conta_div + 1
          LET l_conta_array      = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
              "Cond.Pagamento nao esta cadastrada."
          CONTINUE FOREACH
       END IF}

       LET mr_frete_sup.cod_regist_entrada = 01

       CALL sup0552_busca_prim_digito() RETURNING l_prim_digito

       LET mr_frete_sup.cod_fiscal_frete   = l_prim_digito, mr_w_sup0552_4.cfop[2,5]

       #-Início OS 538147
       IF m_mantem_cfop_frt = 'N' OR (mr_w_sup0552_4.cfop IS NULL OR mr_w_sup0552_4.cfop = " ") THEN
          ## OS 391495
          INITIALIZE l_cod_fisc_frete TO NULL
          WHENEVER ERROR CONTINUE
          SELECT par_txt INTO l_cod_fisc_frete
            FROM par_sup_pad
           WHERE cod_empresa   = mr_w_sup0552_4.empresa
             AND cod_parametro = "cod_fisc_frete"
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("SELECAO","PAR_SUP_PAD")
          END IF
          IF m_fim_valid THEN
             ### COD_FISCAL_SUP ja convertida
             IF mr_frete_sup.dat_entrada_conhec > m_dat_fim_valid THEN
                IF l_cod_fisc_frete IS NULL OR
                   l_cod_fisc_frete = " " THEN
                   LET mr_frete_sup.cod_fiscal_frete[2,5] = ".352"
                ELSE
                   LET mr_frete_sup.cod_fiscal_frete[2,2] = "."
                   LET mr_frete_sup.cod_fiscal_frete[3,5] = l_cod_fisc_frete
                END IF
             ELSE
                IF l_cod_fisc_frete IS NULL OR
                   l_cod_fisc_frete = " " THEN
                   LET mr_frete_sup.cod_fiscal_frete[2,4] = ".62"
                ELSE
                   LET mr_frete_sup.cod_fiscal_frete[2,2] = "."
                   LET mr_frete_sup.cod_fiscal_frete[3,4] = l_cod_fisc_frete
                END IF
             END IF
          ELSE
             IF l_cod_fisc_frete IS NULL OR
                l_cod_fisc_frete = " " THEN
                LET mr_frete_sup.cod_fiscal_frete[2,4] = ".62"
             ELSE
                LET mr_frete_sup.cod_fiscal_frete[2,2] = "."
                LET mr_frete_sup.cod_fiscal_frete[3,4] = l_cod_fisc_frete
             END IF
          END IF
       END IF
       #- fim os 538147

       #INICIO OS.458658

       LET sql_stmt = "  SELECT pedido ",
                      "    FROM w_sup0552_4 ",
                      "   WHERE empresa           = '", mr_w_sup0552_4.empresa            ,"' ",
                      "     AND nota_fiscal       = '", mr_w_sup0552_4.nota_fiscal        ,"' ",
                      "     AND serie_nota_fiscal = '", mr_w_sup0552_4.serie_nota_fiscal  ,"' ",
                      "     AND subserie_nf       = '", mr_w_sup0552_4.subserie_nf        ,"' ",
                      "     AND fornecedor        = '", mr_w_sup0552_4.fornecedor         ,"' "

        #--inicio--OS 724885 #
        IF mr_inf_compl_fret.gerar_frete_con_como_ar = "S"  THEN
           LET sql_stmt = sql_stmt CLIPPED, " AND tipo_registro     = 'L' "
        ELSE
           LET sql_stmt = sql_stmt CLIPPED, " AND tipo_registro     = 'F' "
        END IF
        #---fim----OS 724885 #

       WHENEVER ERROR CONTINUE
       PREPARE var_query14 FROM sql_stmt
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("PREPARE","VAR_QUERY14")
       END IF

       LET l_cod_grp_despesa = 0
       WHENEVER ERROR CONTINUE
       DECLARE cq_grp_desp CURSOR WITH HOLD FOR var_query14
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET l_cod_grp_despesa = 0
          CALL log003_err_sql("DECLARE","CQ_GRP_DESP")
       END IF
       WHENEVER ERROR CONTINUE
       OPEN cq_grp_desp
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET l_cod_grp_despesa = 0
          CALL log003_err_sql("OPEN","CQ_GRP_DESP")
       END IF
       WHENEVER ERROR CONTINUE
       FETCH cq_grp_desp INTO l_cod_grp_despesa
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 OR
          l_cod_grp_despesa IS NULL OR
          l_cod_grp_despesa = " " THEN
          LET l_cod_grp_despesa = 0
       END IF
       WHENEVER ERROR CONTINUE
       CLOSE cq_grp_desp
       FREE cq_grp_desp
       WHENEVER ERROR STOP

       IF l_cod_grp_despesa = 0 THEN
          LET mr_frete_sup.gru_ctr_desp_frete = sup0552_grupo_despesa_frete(l_tipo)
       ELSE
          LET mr_frete_sup.gru_ctr_desp_frete = l_cod_grp_despesa
       END IF
       #FIM OS.458658

       CALL sup0552_atribui_valores_frete_sup() RETURNING l_status, l_erro

       # Inicio OS 578546
       IF NOT l_status THEN
          LET l_conta_div        = l_conta_div + 1
          LET l_conta_array      = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = l_erro
          LET m_status_arquivo = 1
          CONTINUE WHILE
       END IF
       # Fim OS 578546

       IF mr_frete_sup.tip_frete = "C" THEN

         LET l_cod_grp_despesa = 0

         LET sql_stmt = " SELECT pedido ",
                        "   FROM w_sup0552_4 ",
                        "  WHERE empresa           = '", mr_w_sup0552_4.empresa            ,"' ",
                        "    AND nota_fiscal       = '", mr_w_sup0552_4.nota_fiscal        ,"' ",
                        "    AND serie_nota_fiscal = '", mr_w_sup0552_4.serie_nota_fiscal  ,"' ",
                        "    AND subserie_nf       = '", mr_w_sup0552_4.subserie_nf        ,"' ",
                        "    AND fornecedor        = '", mr_w_sup0552_4.fornecedor         ,"' ",
                        "    AND tipo_registro     = 'L' "

         WHENEVER ERROR CONTINUE
         PREPARE var_query15 FROM sql_stmt
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 THEN
            CALL log003_err_sql("PREPARE","VAR_QUERY15")
         END IF

         WHENEVER ERROR CONTINUE
          DECLARE cq_grp_desp_1 CURSOR WITH HOLD FOR var_query15
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 THEN
            LET l_cod_grp_despesa = 0
            CALL log003_err_sql("DECLARE","CQ_GRP_DESP_1")
         END IF

         WHENEVER ERROR CONTINUE
             OPEN cq_grp_desp_1
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 THEN
            LET l_cod_grp_despesa = 0
            CALL log003_err_sql("OPEN","CQ_GRP_DESP_1")
         END IF

         WHENEVER ERROR CONTINUE
            FETCH cq_grp_desp_1 INTO l_cod_grp_despesa
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 OR
            l_cod_grp_despesa IS NULL OR
            l_cod_grp_despesa = " " THEN
            LET l_cod_grp_despesa = 0
         END IF

         IF l_cod_grp_despesa = 0 THEN
            LET l_cod_grp_despesa = sup0552_grupo_despesa_frete(l_tipo)
         END IF

         WHENEVER ERROR CONTINUE
           SELECT gru_ctr_desp
             FROM grupo_ctr_desp
            WHERE cod_empresa  = mr_w_sup0552_4.empresa
              AND gru_ctr_desp = l_cod_grp_despesa
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 THEN
            LET l_conta_div   = l_conta_div + 1
            LET l_conta_array = l_conta_array + 1
            LET ma_array_consistencias[l_conta_array].nota_fiscal       = mr_w_sup0552_4_it.nota_fiscal
            LET ma_array_consistencias[l_conta_array].serie_nota_fiscal = mr_w_sup0552_4_it.serie_nota_fiscal
            LET ma_array_consistencias[l_conta_array].subserie_nf       = mr_w_sup0552_4_it.subserie_nf
            LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  = mr_w_sup0552_4_it.espc_nota_fiscal
            LET ma_array_consistencias[l_conta_array].fornecedor        = mr_w_sup0552_4_it.fornecedor
            LET ma_array_consistencias[l_conta_array].sequencia         = mr_w_sup0552_4_it.sequencia
            LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Grupo de despesa do frete nao cadastrado."
            LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
            LET l_conta_itens_erro = l_conta_itens_erro + 1
            LET m_houve_erro     = TRUE
         ELSE
            LET mr_frete_sup.gru_ctr_desp_frete = l_cod_grp_despesa
         END  IF

         WHENEVER ERROR CONTINUE
            CLOSE cq_grp_desp_1
             FREE cq_grp_desp_1
         WHENEVER ERROR STOP
       END IF

       LET l_is_cliente55 = FALSE
       LET l_is_cliente357 = FALSE

       IF find4GLFunction('supy43_cliente_55') THEN
          LET l_is_cliente55 = supy43_cliente_55(mr_w_sup0552_4.empresa)
       END IF

       IF find4GLFunction('supy49_cliente_357') THEN
          LET l_is_cliente357 = supy49_cliente_357(mr_w_sup0552_4.empresa)
       END IF

       IF m_entrada_frete_em_transito = "S" AND m_arg = TRUE THEN
          IF mr_frete_sup.tip_frete = "V" AND (l_is_cliente55 = TRUE OR l_is_cliente357 = TRUE) THEN
             LET l_conta_div        = l_conta_div + 1
             LET l_conta_array      = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Frete de venda ",mr_frete_sup.num_conhec ," nao sera processado."
             LET m_status_arquivo = 1
             CONTINUE WHILE
          END IF
       END IF

       #eduardo o.s.331916
       IF mr_w_sup0552_4.espc_nota_fiscal <> "COV" THEN
          LET mr_frete_sup.cod_tip_despesa  = gr_par_sup.cod_tip_desp_frt_c
       ELSE
          IF m_tip_desp_frt_v IS NOT NULL THEN
             LET mr_frete_sup.cod_tip_despesa  = m_tip_desp_frt_v
          ELSE
             LET l_conta_div = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1

             CALL sup0552_carrega_chave_consiste(l_conta_array)

             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Tipo de despesa de frete de vendas não parametr. no sup1180"
             LET m_status_arquivo = 1
             CONTINUE WHILE
          END IF
       END IF
       #Eduardo o.s.331916

       CALL sup0552_busca_uni_feder_frete() RETURNING l_uf_nf

       WHENEVER ERROR CONTINUE
       SELECT icms.ies_subst_tribut
         INTO mr_frete_sup.ies_subst_tribut
         FROM icms
        WHERE icms.cod_empresa   = mr_frete_sup.cod_empresa
          AND icms.gru_ctr_desp  = mr_frete_sup.gru_ctr_desp_frete
          AND icms.cod_uni_feder = l_uf_nf
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET mr_frete_sup.ies_subst_tribut = "N"
       END IF

       ##OS 342752
       IF mr_frete_sup.tip_frete = "V" THEN
          IF NOT sup1203_incid_icms_diferido(l_uf_nf, mr_frete_sup.ies_incid_icms_fre,
                                             mr_frete_sup.gru_ctr_desp_frete,
                                             mr_frete_sup.*, 0, 0) THEN
             LET l_houve_erro = TRUE
          END IF
       END IF

       LET mr_frete_sup_compl.cod_empresa       = mr_w_sup0552_4.empresa
       LET mr_frete_sup_compl.cod_empresa_estab = mr_w_sup0552_4.empresa_estabel
       LET mr_frete_sup_compl.num_conhec        = mr_w_sup0552_4.nota_fiscal
       LET mr_frete_sup_compl.ser_conhec        = mr_w_sup0552_4.serie_nota_fiscal
       LET mr_frete_sup_compl.ssr_conhec        = mr_w_sup0552_4.subserie_nf
       LET mr_frete_sup_compl.cod_transpor      = mr_w_sup0552_4.fornecedor

       WHENEVER ERROR CONTINUE #OS479018
         SELECT w_sup0552_4.cfop
           INTO l_cod_cidade_frt
           FROM w_sup0552_4
          WHERE w_sup0552_4.empresa           = mr_w_sup0552_4.empresa
            AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
            AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
            AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4.subserie_nf
            AND w_sup0552_4.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
            AND w_sup0552_4.fornecedor        = mr_w_sup0552_4.fornecedor
            AND w_sup0552_4.tipo_registro     = "L"
       WHENEVER ERROR STOP
       IF  sqlca.sqlcode <> 0
       AND sqlca.sqlcode <> 100 THEN
          CALL log003_err_sql('SELECT','W_SUP0552_4')
       END IF

       IF l_cod_cidade_frt IS NOT NULL THEN
          LET mr_frete_sup_compl.cod_cidade = l_cod_cidade_frt
       ELSE
          IF  gr_par_sup.ies_frete_compras    = "G"
          AND mr_w_sup0552_4.espc_nota_fiscal = "CON" THEN
             WHENEVER ERROR CONTINUE
               SELECT cod_fornecedor
                 INTO l_cod_fornecedor_nf
                 FROM nf_sup
                WHERE nf_sup.cod_empresa  = mr_w_sup0552_4.empresa
                  AND nf_sup.num_conhec   = mr_w_sup0552_4.nota_fiscal
                  AND nf_sup.ser_conhec   = mr_w_sup0552_4.serie_nota_fiscal
                  AND nf_sup.ssr_conhec   = mr_w_sup0552_4.subserie_nf
                  AND nf_sup.cod_transpor = mr_w_sup0552_4.fornecedor
             WHENEVER ERROR STOP
             IF sqlca.sqlcode = 0 THEN
                WHENEVER ERROR CONTINUE
                  SELECT cod_cidade
                    INTO l_cod_cidade
                    FROM fornecedor
                   WHERE cod_fornecedor              = l_cod_fornecedor_nf
                WHENEVER ERROR STOP
                IF sqlca.sqlcode = 0 THEN
                   LET mr_frete_sup_compl.cod_cidade = l_cod_cidade
                ELSE
                   IF sqlca.sqlcode = 100 THEN
                      LET mr_frete_sup_compl.cod_cidade = NULL
                   ELSE
                      CALL log003_err_sql('SELECT','FORNECEDOR')
                   END IF
                END IF
             ELSE
                IF sqlca.sqlcode = 100 THEN
                   LET mr_frete_sup_compl.cod_cidade = NULL
                ELSE
                   CALL log003_err_sql('SELECT','NF_SUP')
                END IF
             END IF
          ELSE
             LET mr_frete_sup_compl.cod_cidade = NULL
          END IF
       END IF #--

       #--inicio--OS 728008 #
       IF gr_par_sup.ies_frete_compras = 'G' AND
          mr_frete_sup.tip_frete <> 'V'      AND
          mr_frete_sup_compl.cod_cidade      IS NULL THEN
          LET l_conta_div   = l_conta_div   + 1
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_lista_frete_consistencia(l_conta_array,'CIDADE NAO INFORMADA.VERIFICAR CONSISTENCIAS VIA SUP0580')
       END IF
       #---fim----OS 728008 #

       LET mr_frete_sup_compl.cod_fiscal_compl  = mr_w_sup0552_4.cfop_compl

       IF mr_frete_sup_compl.cod_fiscal_compl IS NULL THEN
          LET mr_frete_sup_compl.cod_fiscal_compl = 0
       END IF

       LET mr_frete_sup_compl.ies_preco_efetivo = NULL

       LET mr_frete_sup.val_base_c_frete_d      = 0

       IF mr_w_sup0552_4.espc_nota_fiscal <> "COV" THEN

          LET mr_frete_sup.val_frete               = 0
          LET mr_frete_sup.val_tot_icms_frt_d      = 0

          LET l_conta_itens      = 0
          LET l_conta_itens_erro = 0

          INITIALIZE mr_w_sup0552_4_it.* TO NULL

          LET sql_stmt = " SELECT * ",
                         "   FROM w_sup0552_4 ",
                         "  WHERE empresa           = '", mr_w_sup0552_4.empresa           ,"' ",
                         "    AND nota_fiscal       = '", mr_w_sup0552_4.nota_fiscal       ,"' ",
                         "    AND serie_nota_fiscal = '", mr_w_sup0552_4.serie_nota_fiscal ,"' ",
                         "    AND subserie_nf       = '", mr_w_sup0552_4.subserie_nf       ,"' ",
                         "    AND espc_nota_fiscal  = '", mr_w_sup0552_4.espc_nota_fiscal  ,"' ",
                         "    AND fornecedor        = '", mr_w_sup0552_4.fornecedor        ,"' ",
                         "    AND tipo_registro     = 'D' ",
                         "  ORDER BY empresa,             ",
                         "           nota_fiscal,         ",
                         "           serie_nota_fiscal,   ",
                         "           subserie_nf,         ",
                         "           espc_nota_fiscal,    ",
                         "           fornecedor,          ",
                         "           sequencia            "

          WHENEVER ERROR CONTINUE
          PREPARE var_query16 FROM sql_stmt
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("PREPARE","VAR_QUERY16")
          END IF

          WHENEVER ERROR CONTINUE
          DECLARE cq_itens_frt CURSOR WITH HOLD FOR var_query16
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("DECLARE","CQ_ITENS_FRT")
          END IF


          WHENEVER ERROR CONTINUE
          FOREACH cq_itens_frt INTO mr_w_sup0552_4_it.*
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("FOREACH","CQ_ITENS_FRT")
             END IF

             IF m_arg = FALSE THEN
                DISPLAY mr_w_sup0552_4_it.sequencia AT 08,15
                CALL LOG_refresh_display()
             END IF

             LET l_conta_itens = l_conta_itens + 1

             LET mr_frete_sup.val_base_c_frete_d = (mr_frete_sup.val_base_c_frete_d +
                                                    mr_w_sup0552_4_it.bc_icms_frete)

             LET mr_frete_sup.val_frete          = (mr_frete_sup.val_frete +
                                                    mr_w_sup0552_4_it.val_frete)

             LET mr_frete_sup.val_tot_icms_frt_d = (mr_frete_sup.val_tot_icms_frt_d +
                                                    mr_w_sup0552_4_it.val_icms_frete)

          END FOREACH
          FREE cq_itens_frt
       END IF

       IF l_houve_erro = FALSE THEN
          IF  l_conta_itens = 0
          AND mr_w_sup0552_4.espc_nota_fiscal <> "COV" THEN
             LET l_conta_div = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Itens do Conhec.Frete nao encontrados."
             LET m_status_arquivo = 1
             CONTINUE WHILE
          END IF

          LET l_is_cliente55 = FALSE
          LET l_is_cliente357 = FALSE

          IF find4GLFunction('supy43_cliente_55') THEN
             LET l_is_cliente55 = supy43_cliente_55(mr_w_sup0552_4.empresa)
          END IF

          IF find4GLFunction('supy49_cliente_357') THEN
             LET l_is_cliente357 = supy49_cliente_357(mr_w_sup0552_4.empresa)
          END IF

          IF m_entrada_frete_em_transito = "S" THEN
             IF NOT sup0552_grava_frete_em_transito(l_conta_array) THEN
                LET l_conta_array = l_conta_array + 1
             END IF
             IF mr_frete_sup.tip_frete = "C" AND (l_is_cliente55 = TRUE OR l_is_cliente357 = TRUE) THEN
                IF NOT sup0552_grava_frete_edi(l_conta_array) THEN
                   LET l_conta_array = l_conta_array + 1
                END IF
             END IF
          END IF

          IF m_entrada_frete_em_transito = "S" THEN
             IF NOT sup0552_grava_frete_imp(l_conta_array) THEN
                LET l_conta_array = l_conta_array + 1
             END IF
          END IF

          INITIALIZE m_modelo_con TO NULL
          IF find4GLFunction('supy169_cliente_803') THEN
             IF supy169_cliente_803() = TRUE AND
                mr_w_sup0552_4.espc_nota_fiscal = "COV" THEN
                IF find4GLFunction('supy169_busca_peso') THEN
                   CALL supy169_busca_peso(mr_w_sup0552_4.empresa,
                                           mr_w_sup0552_4.nota_fiscal,
                                           mr_w_sup0552_4.serie_nota_fiscal,
                                           mr_w_sup0552_4.subserie_nf,
                                           mr_w_sup0552_4.fornecedor)
                      RETURNING mr_frete_sup.pes_vol_frete
                END IF

                IF find4GLFunction('supy169_busca_modelo_con') THEN
                   CALL supy169_busca_modelo_con(mr_w_sup0552_4.empresa,
                                                 mr_w_sup0552_4.nota_fiscal,
                                                 mr_w_sup0552_4.serie_nota_fiscal,
                                                 mr_w_sup0552_4.subserie_nf,
                                                 mr_w_sup0552_4.fornecedor)
                      RETURNING m_modelo_con
                END IF

             ELSE
                CALL sup0552_busca_peso(l_tipo)
                   RETURNING mr_frete_sup.pes_vol_frete
             END IF
          ELSE
             CALL sup0552_busca_peso(l_tipo)
                   RETURNING mr_frete_sup.pes_vol_frete
          END IF

          #--inicio--OS 728008 #
          IF gr_par_sup.ies_frete_compras = 'G' THEN
             IF mr_frete_sup.pes_vol_frete IS NOT NULL THEN
                CALL sup0552_busca_cond_pagto_omc_emitente(l_conta_div,
                                                           l_conta_array,
                                                           mr_frete_sup.cod_transpor)
                                                 RETURNING l_conta_div,
                                                           l_conta_array,
                                                           mr_frete_sup.cnd_pgto_frt

                CALL sup0552_busca_tip_carga(l_conta_div,
                                             l_conta_array)
                                   RETURNING l_conta_div,
                                             l_conta_array

             END IF

             IF sup0552_busca_tip_veiculo() = FALSE THEN
                LET l_conta_div   = l_conta_div   + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_lista_frete_consistencia(l_conta_array,'TIPO DE VEICULO NAO CADASTRADO PARA CONHECIMENTO DO FRETE')
             END IF

             LET p_frete_sup.* = mr_frete_sup.*
             CALL sup0552_chama_sup7720_frete_venda(l_conta_div, l_conta_array,"S")
          END IF
          #---fim----OS 728008 #

          #--inicio--OS 724885 #
          IF mr_inf_compl_fret.cod_tip_despesa IS NOT NULL THEN
             LET mr_frete_sup.cod_tip_despesa  = mr_inf_compl_fret.cod_tip_despesa
          END IF
          #---fim----OS 724885 #

          WHENEVER ERROR CONTINUE
          INSERT INTO frete_sup (cod_empresa          ,
                                 cod_empresa_estab    ,
                                 cod_transpor         ,
                                 num_conhec           ,
                                 ser_conhec           ,
                                 ssr_conhec           ,
                                 dat_emis_conhec      ,
                                 dat_entrada_conhec   ,
                                 cnd_pgto_frt         ,
                                 cod_regist_entrada   ,
                                 cod_fiscal_frete     ,
                                 gru_ctr_desp_frete   ,
                                 ies_incid_icms_fre   ,
                                 val_frete            ,
                                 val_base_c_frete_c   ,
                                 val_tot_icms_frt_d   ,
                                 val_tot_icms_frt_c   ,
                                 val_icms_diferen     ,
                                 pct_icms_frete_c     ,
                                 pct_red_bc_frete_c   ,
                                 pct_diferen_fret_c   ,
                                 val_adiant           ,
                                 ies_conhec_erro      ,
                                 nom_resp_aceite_er   ,
                                 ies_incl_cap         ,
                                 ies_incl_contab      ,
                                 cod_praca            ,
                                 ies_frt_contratado   ,
                                 tip_carga            ,
                                 cod_item_tab_frete   ,
                                 pes_vol_frete        ,
                                 val_frete_c          ,
                                 ies_diverg_listada   ,
                                 ies_diverg_val_frt   ,
                                 ies_liberacao_frt    ,
                                 ies_diverg_relac     ,
                                 ies_diverg_cnd_pgt   ,
                                 cnd_pgto_tab         ,
                                 tip_frete            ,
                                 cod_tip_despesa      ,
                                 ies_subst_tribut     ,
                                 val_base_c_frete_d   )
                          VALUES (mr_frete_sup.cod_empresa              ,
                                  mr_frete_sup.cod_empresa_estab        ,
                                  mr_frete_sup.cod_transpor             ,
                                  mr_frete_sup.num_conhec               ,
                                  mr_frete_sup.ser_conhec               ,
                                  mr_frete_sup.ssr_conhec               ,
                                  mr_frete_sup.dat_emis_conhec          ,
                                  mr_frete_sup.dat_entrada_conhec       ,
                                  mr_frete_sup.cnd_pgto_frt             ,
                                  mr_frete_sup.cod_regist_entrada       ,
                                  mr_frete_sup.cod_fiscal_frete         ,
                                  mr_frete_sup.gru_ctr_desp_frete       ,
                                  mr_frete_sup.ies_incid_icms_fre       ,
                                  mr_frete_sup.val_frete                ,
                                  mr_frete_sup.val_base_c_frete_c       ,
                                  mr_frete_sup.val_tot_icms_frt_d       ,
                                  mr_frete_sup.val_tot_icms_frt_c       ,
                                  mr_frete_sup.val_icms_diferen         ,
                                  mr_frete_sup.pct_icms_frete_c         ,
                                  mr_frete_sup.pct_red_bc_frete_c       ,
                                  mr_frete_sup.pct_diferen_fret_c       ,
                                  mr_frete_sup.val_adiant               ,
                                  mr_frete_sup.ies_conhec_erro          ,
                                  mr_frete_sup.nom_resp_aceite_er       ,
                                  mr_frete_sup.ies_incl_cap             ,
                                  mr_frete_sup.ies_incl_contab          ,
                                  mr_frete_sup.cod_praca                ,
                                  mr_frete_sup.ies_frt_contratado       ,
                                  mr_frete_sup.tip_carga                ,
                                  mr_frete_sup.cod_item_tab_frete       ,
                                  mr_frete_sup.pes_vol_frete            ,
                                  mr_frete_sup.val_frete_c              ,
                                  mr_frete_sup.ies_diverg_listada       ,
                                  mr_frete_sup.ies_diverg_val_frt       ,
                                  mr_frete_sup.ies_liberacao_frt        ,
                                  mr_frete_sup.ies_diverg_relac         ,
                                  mr_frete_sup.ies_diverg_cnd_pgt       ,
                                  mr_frete_sup.cnd_pgto_tab             ,
                                  mr_frete_sup.tip_frete                ,
                                  mr_frete_sup.cod_tip_despesa          ,
                                  mr_frete_sup.ies_subst_tribut         ,
                                  mr_frete_sup.val_base_c_frete_d       )
          WHENEVER ERROR STOP

          IF sqlca.sqlcode = 0 THEN
              IF (mr_w_sup0552_4.num_conhec_frete  IS NOT NULL AND
                 mr_w_sup0552_4.num_conhec_frete <> " ") AND
                 (mr_w_sup0552_4.serie_conhec_frete IS NOT NULL AND
                 mr_w_sup0552_4.serie_conhec_frete <> " ") AND
                 (mr_w_sup0552_4.subserie_conh_fret IS NOT NULL AND
                 mr_w_sup0552_4.subserie_conh_fret <> " ") AND
                 (mr_w_sup0552_4.transportador IS NOT NULL AND
                 mr_w_sup0552_4.transportador <> " ") THEN

                 #FAZ RELACIONAMENTO DO FRETE COM NOTA FISCAL
                 CALL sup0552_relaciona_frete_x_nota_fiscal(l_conta_array)
                    RETURNING p_status, l_conta_array
                 #FIM DO RELACIONAMENTO DO FRETE COM NOTA FISCAL
              END IF

              #--inicio--OS 724885 #
              IF  mr_inf_compl_fret.tipo_registro = "L" THEN
                 CALL sup0552_reten_recol_imposto_frete()
              END IF
              #---fim----OS 724885 #


             WHENEVER ERROR CONTINUE

             INSERT INTO sup_par_frete (empresa          ,
                                        num_conhec       ,
                                        serie_conhec     ,
                                        subserie_conhec  ,
                                        transportadora   ,
                                        parametro        ,
                                        par_ind_especial ,
                                        parametro_texto  ,
                                        parametro_val    ,
                                        parametro_dat)
                                VALUES (mr_frete_sup.cod_empresa,
                                        mr_frete_sup.num_conhec,
                                        mr_frete_sup.ser_conhec,
                                        mr_frete_sup.ssr_conhec,
                                        mr_frete_sup.cod_transpor,
                                        "arquivo_importacao",
                                        NULL,
                                        m_nom_arquivo,
                                        NULL,
                                        NULL)
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SUP_PAR_FRETE "
                LET m_status_arquivo = 1
                LET l_houve_erro = TRUE
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

             WHENEVER ERROR CONTINUE
             INSERT INTO sup_par_frete (empresa          ,
                                        num_conhec       ,
                                        serie_conhec     ,
                                        subserie_conhec  ,
                                        transportadora   ,
                                        parametro        ,
                                        par_ind_especial ,
                                        parametro_texto  ,
                                        parametro_val    ,
                                        parametro_dat)
                                VALUES (mr_frete_sup.cod_empresa,
                                        mr_frete_sup.num_conhec,
                                        mr_frete_sup.ser_conhec,
                                        mr_frete_sup.ssr_conhec,
                                        mr_frete_sup.cod_transpor,
                                        "usuario_importacao",
                                        NULL,
                                        p_user,
                                        NULL,
                                        NULL)
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SUP_PAR_FRETE "
                LET m_status_arquivo = 1
                LET l_houve_erro = TRUE
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

             WHENEVER ERROR CONTINUE
             INSERT INTO sup_par_frete (empresa          ,
                                        num_conhec       ,
                                        serie_conhec     ,
                                        subserie_conhec  ,
                                        transportadora   ,
                                        parametro        ,
                                        par_ind_especial ,
                                        parametro_texto  ,
                                        parametro_val    ,
                                        parametro_dat)
                                VALUES (mr_frete_sup.cod_empresa,
                                        mr_frete_sup.num_conhec,
                                        mr_frete_sup.ser_conhec,
                                        mr_frete_sup.ssr_conhec,
                                        mr_frete_sup.cod_transpor,
                                        "dat_hor_importacao",
                                        NULL,
                                        l_hora_atual,
                                        NULL,
                                        l_data_atual)
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("INCLUSAO","SUP_PAR_FRETE")
                LET l_houve_erro = TRUE
                LET m_status_arquivo = 1
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

          ELSE
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da FRETE_SUP "
             LET m_status_arquivo = 1
             LET l_houve_erro = TRUE
             #EXIT WHILE
             CONTINUE WHILE #724885
          END IF

          WHENEVER ERROR CONTINUE
          INSERT INTO frete_sup_compl (cod_empresa        ,
                                       cod_empresa_estab  ,
                                       num_conhec         ,
                                       ser_conhec         ,
                                       ssr_conhec         ,
                                       cod_transpor       ,
                                       cod_cidade         ,
                                       cod_fiscal_compl   ,
                                       ies_preco_efetivo  )
                               VALUES (mr_frete_sup_compl.cod_empresa        ,
                                       mr_frete_sup_compl.cod_empresa_estab  ,
                                       mr_frete_sup_compl.num_conhec         ,
                                       mr_frete_sup_compl.ser_conhec         ,
                                       mr_frete_sup_compl.ssr_conhec         ,
                                       mr_frete_sup_compl.cod_transpor       ,
                                       mr_frete_sup_compl.cod_cidade         ,
                                       mr_frete_sup_compl.cod_fiscal_compl   ,
                                       mr_frete_sup_compl.ies_preco_efetivo  )
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("INCLUSAO","FRETE_SUP_COMPL")
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da FRETE_SUP_COMPL "
             LET m_status_arquivo = 1
             LET l_houve_erro = TRUE
             #EXIT WHILE
             CONTINUE WHILE #724885
          END IF

          IF mr_w_sup0552_4.espc_nota_fiscal = "COV" THEN ##O.S 344969
             LET p_frete_sup.* = mr_frete_sup.*
             IF sup0552_calcula_piscofins_frvnd(l_conta_div, l_conta_array,"CONHEC", l_tipo) = FALSE THEN
                LET m_status_arquivo = 1
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

             IF mr_w_sup0552_4.dat_emis_nf IS NOT NULL AND
                mr_w_sup0552_4.dat_emis_nf <> " " THEN

                LET l_hora_emb    = TIME
                LET l_dat_hor_emb = mr_w_sup0552_4.dat_emis_nf USING "yyyy-mm-dd", " ",
                                    l_hora_emb
                LET l_dat_hor_emb_aux = EXTEND(l_dat_hor_emb,YEAR TO MINUTE)

                WHENEVER ERROR CONTINUE
                INSERT INTO sac_embarque (cod_empresa          ,
                                          num_nf               ,
                                          ser_nf               ,
                                          cod_transpor         ,
                                          cod_consig           ,
                                          dat_embarque         ,
                                          dat_entrega          ,
                                          contato_entrega)
                                  VALUES (mr_w_sup0552_4.empresa,
                                          mr_w_sup0552_4.nota_fiscal,
                                          mr_w_sup0552_4.serie_nota_fiscal,
                                          mr_w_sup0552_4.fornecedor,
                                          NULL,
                                          NULL,
                                          l_dat_hor_emb_aux,
                                          NULL)
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   LET l_conta_array = l_conta_array + 1
                   CALL sup0552_carrega_chave_consiste(l_conta_array)
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SAC_EMBARQUE "
                   LET m_status_arquivo = 1
                   LET l_houve_erro = TRUE
                   #EXIT WHILE
                   CONTINUE WHILE #724885
                END IF

             END IF

          END IF

          LET mr_pedagio_frete.cod_empresa    = mr_frete_sup.cod_empresa
          LET mr_pedagio_frete.num_nf_conhec  = mr_frete_sup.num_conhec
          LET mr_pedagio_frete.ser_nf_conhec  = mr_frete_sup.ser_conhec
          LET mr_pedagio_frete.ssr_nf_conhec  = mr_frete_sup.ssr_conhec
          LET mr_pedagio_frete.ies_especie_nf = "FR"
          LET mr_pedagio_frete.cod_fornecedor = mr_frete_sup.cod_transpor
          LET mr_pedagio_frete.dat_atualiz    = TODAY
          IF mr_w_sup0552_4.pre_unit_nf IS NOT NULL AND #841998
             mr_w_sup0552_4.pre_unit_nf <> " " THEN
             LET mr_pedagio_frete.val_pedagio    = mr_w_sup0552_4.pre_unit_nf
          ELSE #841998
             LET mr_pedagio_frete.val_pedagio    = 0
          END IF

          WHENEVER ERROR CONTINUE
          INSERT INTO pedagio_frete (cod_empresa   ,
                                     num_nf_conhec ,
                                     ser_nf_conhec ,
                                     ssr_nf_conhec ,
                                     ies_especie_nf,
                                     cod_fornecedor,
                                     val_pedagio   ,
                                     dat_atualiz)
                             VALUES (mr_pedagio_frete.cod_empresa   ,
                                     mr_pedagio_frete.num_nf_conhec ,
                                     mr_pedagio_frete.ser_nf_conhec ,
                                     mr_pedagio_frete.ssr_nf_conhec ,
                                     mr_pedagio_frete.ies_especie_nf,
                                     mr_pedagio_frete.cod_fornecedor,
                                     mr_pedagio_frete.val_pedagio   ,
                                     mr_pedagio_frete.dat_atualiz)
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("INCLUSAO","PEDAGIO_FRETE")
             LET l_houve_erro = TRUE
             CALL log085_transacao("ROLLBACK")
             LET m_transacao_ativa = FALSE
             EXIT FOREACH
          END IF


          LET l_data_hora_c = YEAR(TODAY) USING "&&&&","-",
                              MONTH(TODAY) USING "&&","-",
                              DAY(TODAY) USING "&&"," ",
                              TIME

          LET l_data_hora   = l_data_hora_c

          WHENEVER ERROR CONTINUE
          INSERT INTO audit_frete (cod_empresa      ,
                                   num_conhec       ,
                                   ser_conhec       ,
                                   ssr_conhec       ,
                                   cod_transpor     ,
                                   nom_usuario      ,
                                   dat_hor_proces   ,
                                   num_prog         ,
                                   ies_tipo_auditoria)
                           VALUES (mr_frete_sup.cod_empresa,
                                   mr_frete_sup.num_conhec,
                                   mr_frete_sup.ser_conhec,
                                   mr_frete_sup.ssr_conhec,
                                   mr_frete_sup.cod_transpor,
                                   p_user,
                                   l_data_hora,
                                   "SUP0552",
                                   "1")
          WHENEVER ERROR STOP

          IF sqlca.sqlcode <> 0 THEN
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da AUDIT_FRETE"
             LET m_status_arquivo = 1
             LET l_houve_erro = TRUE
             #EXIT WHILE
             CONTINUE WHILE #724885
          END IF

          IF sup0552_existe_frete_transito() THEN
             WHENEVER ERROR CONTINUE
             INSERT INTO frete_sup_erro (cod_empresa          ,
                                         cod_transpor         ,
                                         num_conhec           ,
                                         ser_conhec           ,
                                         ssr_conhec           ,
                                         des_pendencia        ,
                                         ies_origem_erro      ,
                                         ies_erro_grave)
                                  VALUES(mr_frete_sup.cod_empresa,
                                         mr_frete_sup.cod_transpor,
                                         mr_frete_sup.num_conhec,
                                         mr_frete_sup.ser_conhec,
                                         mr_frete_sup.ssr_conhec,
                                         "Frete em transito",
                                         "1",
                                         "S")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da FRETE_SUP_ERRO"
                LET m_status_arquivo = 1
                LET l_houve_erro = TRUE
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF
          END IF

          WHENEVER ERROR CONTINUE
          INSERT INTO frete_sup_erro (cod_empresa          ,
                                      cod_transpor         ,
                                      num_conhec           ,
                                      ser_conhec           ,
                                      ssr_conhec           ,
                                      des_pendencia        ,
                                      ies_origem_erro      ,
                                      ies_erro_grave)
                               VALUES(mr_frete_sup.cod_empresa,
                                      mr_frete_sup.cod_transpor,
                                      mr_frete_sup.num_conhec,
                                      mr_frete_sup.ser_conhec,
                                      mr_frete_sup.ssr_conhec,
                                      "Falta efetuar consistencia",
                                      "1",
                                      "S")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da FRETE_SUP_ERRO"
             LET m_status_arquivo = 1
             LET l_houve_erro = TRUE
             #EXIT WHILE
             CONTINUE WHILE #724885
          END IF

          IF mr_w_sup0552_4.espc_nota_fiscal = "COV" THEN
             #772116
             IF find4GLFunction('supy169_cliente_803') THEN
                IF supy169_cliente_803() = TRUE AND
                   m_modelo_con IS NOT NULL AND
                   m_modelo_con <> ' ' THEN
                   IF find4GLFunction('supy169_grava_sup_compl_frete_sup') THEN
                      IF NOT supy169_grava_sup_compl_frete_sup(p_frete_sup.cod_empresa,
                                                               p_frete_sup.num_conhec,
                                                               p_frete_sup.ser_conhec,
                                                               p_frete_sup.ssr_conhec,
                                                               p_frete_sup.cod_transpor,
                                                               m_modelo_con) THEN
                         LET l_houve_erro = TRUE
                      END IF
                   END IF
                END IF
             END IF

             LET l_tot_pct = 0
             CALL sup0552_SUM_val_tot_decl_nf(l_tipo, FALSE, FALSE) RETURNING m_status, l_tot_pct
             IF NOT m_status THEN
                LET l_tot_pct = 0
             END IF

             IF l_tot_pct <> 100 THEN
                #INICIO OS.458658
                ### Não é obrigatorio informar o tipo de registro 'C' para conhecimentos
                ### de compra.
                IF l_tot_pct = 0 AND mr_w_sup0552_4.espc_nota_fiscal = "CON" THEN
                ELSE
                #FIM OS.458658
                LET l_conta_div = l_conta_div + 1
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                   INITIALIZE mr_nf_sup.*,
                              mr_aviso_rec_compl.*,
                              mr_audit_ar.*,
                              mr_nf_sup_erro.* TO NULL
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Soma Registros tipo C nao totaliza 100%"
                   LET l_houve_erro = TRUE
                   LET l_houve_erro_reg_c = TRUE
                   LET m_status_arquivo = 1
                #CONTINUE WHILE
                CONTINUE WHILE #724885
                END IF
             ELSE
                INITIALIZE mr_dest_frete_sup.* TO NULL

                LET mr_dest_frete_sup.cod_empresa  = mr_w_sup0552_4.empresa
                LET mr_dest_frete_sup.num_conhec   = mr_w_sup0552_4.nota_fiscal
                LET mr_dest_frete_sup.ser_conhec   = mr_w_sup0552_4.serie_nota_fiscal
                LET mr_dest_frete_sup.ssr_conhec   = mr_w_sup0552_4.subserie_nf
                LET mr_dest_frete_sup.cod_transpor = mr_w_sup0552_4.fornecedor

                #l_erro_dest_frete = 0 --> sem erro
                #l_erro_dest_frete = 1 --> continuar proximo frete
                #l_erro_dest_frete = 2 --> interromper
                LET l_erro_dest_frete = "0"

                LET sql_stmt =   " SELECT cond_pagto,modo_embarque,val_tot_decl_nf,   ",
                                 "        serie_conhec_frete,subserie_conh_fret,      ",
                                 "        transportador                               ",
                                 "   FROM w_sup0552_4 ",
                                 "  WHERE empresa           = '", mr_w_sup0552_4.empresa            ,"' ",
                                 "    AND nota_fiscal       = '", mr_w_sup0552_4.nota_fiscal        ,"' ",
                                 "    AND serie_nota_fiscal = '", mr_w_sup0552_4.serie_nota_fiscal  ,"' ",
                                 "    AND subserie_nf       = '", mr_w_sup0552_4.subserie_nf        ,"' ",
                                 "    AND fornecedor        = '", mr_w_sup0552_4.fornecedor         ,"' ",
                                 "    AND tipo_registro     = 'C' "
                WHENEVER ERROR CONTINUE
                PREPARE var_query17 FROM sql_stmt
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("PREPARE","VAR_QUERY17")
                END IF

                WHENEVER ERROR CONTINUE
                DECLARE cq_conta_aen_frete CURSOR WITH HOLD FOR var_query17
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("DECLARE","CQ_CONTA_AEN_FRETE")
                END IF

                WHENEVER ERROR CONTINUE
                FOREACH cq_conta_aen_frete INTO mr_dest_frete_sup.cod_area_negocio,
                                                mr_dest_frete_sup.cod_lin_negocio,
                                                mr_dest_frete_sup.pct_particip_comp,
                                                l_cod_seg_merc,
                                                l_cod_cla_uso,
                                                mr_dest_frete_sup.num_conta_deb_desp
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("FOREACH","CQ_CONTA_AEN_FRETE")
                END IF

                   IF mr_dest_frete_sup.cod_area_negocio IS NULL THEN
                      LET mr_dest_frete_sup.cod_area_negocio = 0
                   END IF
                   IF mr_dest_frete_sup.cod_lin_negocio IS NULL THEN
                      LET mr_dest_frete_sup.cod_lin_negocio  = 0
                   END IF

                   IF  mr_dest_frete_sup.num_conta_deb_desp IS NOT NULL
                   AND mr_dest_frete_sup.cod_area_negocio IS NOT NULL THEN

                      CALL sup0552_verifica_conta_relac(l_conta_div,
                                                        l_conta_array)
                         RETURNING l_conta_div,
                                   l_conta_array,
                                   p_status

                      IF p_status = FALSE THEN
                         LET l_erro_dest_frete = "1"
                          CLOSE cq_conta_aen_frete #764215#
                         EXIT FOREACH
                      END IF

                      WHENEVER ERROR CONTINUE
                      INSERT INTO dest_frete_sup (cod_empresa       ,
                                                  num_conhec        ,
                                                  ser_conhec        ,
                                                  ssr_conhec        ,
                                                  cod_transpor      ,
                                                  cod_area_negocio  ,
                                                  cod_lin_negocio   ,
                                                  pct_particip_comp ,
                                                  num_conta_deb_desp)
                                          VALUES (mr_dest_frete_sup.cod_empresa           ,
                                                  mr_dest_frete_sup.num_conhec            ,
                                                  mr_dest_frete_sup.ser_conhec            ,
                                                  mr_dest_frete_sup.ssr_conhec            ,
                                                  mr_dest_frete_sup.cod_transpor          ,
                                                  mr_dest_frete_sup.cod_area_negocio      ,
                                                  mr_dest_frete_sup.cod_lin_negocio       ,
                                                  mr_dest_frete_sup.pct_particip_comp     ,
                                                  mr_dest_frete_sup.num_conta_deb_desp    )
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode <> 0 THEN
                         LET l_conta_array = l_conta_array + 1
                         CALL sup0552_carrega_chave_consiste(l_conta_array)
                         LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da DEST_FRETE_SUP"
                         LET m_status_arquivo = 1
                         LET l_erro_dest_frete = "2"
                          CLOSE cq_conta_aen_frete #764215#
                         EXIT FOREACH
                      END IF

                      IF gr_par_con.ies_contab_aen = "4" THEN
                         IF l_cod_seg_merc IS NULL THEN
                            LET l_cod_seg_merc = 0
                         END IF
                         IF l_cod_cla_uso IS NULL THEN
                            LET l_cod_cla_uso = 0
                         END IF

                         WHENEVER ERROR CONTINUE
                         INSERT INTO dest_frete_sup4 (cod_empresa        ,
                                                      num_conhec         ,
                                                      ser_conhec         ,
                                                      ssr_conhec         ,
                                                      cod_transpor       ,
                                                      cod_area_negocio   ,
                                                      cod_lin_negocio    ,
                                                      pct_particip_comp  ,
                                                      num_conta_deb_desp ,
                                                      cod_seg_merc       ,
                                                      cod_cla_uso )
                                              VALUES (mr_dest_frete_sup.cod_empresa          ,
                                                      mr_dest_frete_sup.num_conhec           ,
                                                      mr_dest_frete_sup.ser_conhec           ,
                                                      mr_dest_frete_sup.ssr_conhec           ,
                                                      mr_dest_frete_sup.cod_transpor         ,
                                                      mr_dest_frete_sup.cod_area_negocio     ,
                                                      mr_dest_frete_sup.cod_lin_negocio      ,
                                                      mr_dest_frete_sup.pct_particip_comp    ,
                                                      mr_dest_frete_sup.num_conta_deb_desp   ,
                                                      l_cod_seg_merc,
                                                      l_cod_cla_uso)
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            LET l_conta_array = l_conta_array + 1
                            CALL sup0552_carrega_chave_consiste(l_conta_array)
                            LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da DEST_FRETE_SUP4"
                            LET m_status_arquivo = 1
                            LET l_erro_dest_frete = "2"
                             CLOSE cq_conta_aen_frete #764215#
                            EXIT FOREACH
                         END IF
                      END IF
                   END IF
                END FOREACH
                FREE cq_conta_aen_frete
                CASE l_erro_dest_frete
                   WHEN "1"
                      LET l_houve_erro = TRUE
                      CONTINUE WHILE
                   WHEN "2"
                      LET l_houve_erro = TRUE
                     # EXIT WHILE
                       CONTINUE WHILE #724885
                END CASE
             END IF
          END IF

          IF l_houve_erro_reg_c = FALSE THEN
             IF NOT sup0552_atualiza_sup0552_4_proces("S") THEN
                LET l_houve_erro = TRUE
                LET m_status_arquivo = 1
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

             INITIALIZE mr_importados.* TO NULL

             LET mr_importados.tipo_registro     = "M"
             LET mr_importados.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
             LET mr_importados.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
             LET mr_importados.subserie_nf       = mr_w_sup0552_4.subserie_nf
             LET mr_importados.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
             LET mr_importados.fornecedor        = mr_w_sup0552_4.fornecedor
             LET mr_importados.num_nff_relac     = 0
             LET mr_importados.arquivo           = m_nom_arquivo_consis

             WHENEVER ERROR CONTINUE
             INSERT INTO w_sup0552_2 (tipo_registro       ,
                                      nota_fiscal         ,
                                      serie_nota_fiscal   ,
                                      subserie_nf         ,
                                      espc_nota_fiscal    ,
                                      fornecedor          ,
                                      num_nff_relac       ,
                                      arquivo             )
                              VALUES (mr_importados.tipo_registro       ,
                                      mr_importados.nota_fiscal         ,
                                      mr_importados.serie_nota_fiscal   ,
                                      mr_importados.subserie_nf         ,
                                      mr_importados.espc_nota_fiscal    ,
                                      mr_importados.fornecedor          ,
                                      mr_importados.num_nff_relac       ,
                                      mr_importados.arquivo             )
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("INCLUSAO","W_SUP0552_2")
             END IF

             IF sqlca.sqlcode <> 0 THEN
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da W_SUP0552_2"
                LET m_status_arquivo = 1
                LET l_houve_erro = TRUE
                CONTINUE WHILE #724885
             END IF

             #---inicio----OS 724885 #
             IF find4GLFunction('cap3095_adic_set_programa_orig') THEN
                CALL cap3095_adic_set_programa_orig('SUP0552')
                CALL cap3095_integra_impostos('FR',
                                               mr_w_sup0552_4.empresa,
                                               mr_w_sup0552_4.nota_fiscal      ,
                                               mr_w_sup0552_4.serie_nota_fiscal,
                                               mr_w_sup0552_4.subserie_nf      ,
                                               "CON",
                                               mr_w_sup0552_4.fornecedor)
                RETURNING l_status, l_msg
                IF l_status = FALSE THEN
                  CALL log0030_mensagem(l_msg,"excla")
                   LET l_houve_erro = TRUE
                   LET m_status_arquivo = 1
                   CONTINUE WHILE #724885
                END IF
             END IF
             #---fim----OS 724885 #

             IF NOT fcl1150_integra_frete_fcx(mr_frete_sup.cod_empresa,
                                              mr_frete_sup.num_conhec,
                                              mr_frete_sup.ser_conhec,
                                              mr_frete_sup.ssr_conhec,
                                              mr_frete_sup.cod_transpor,"IN") THEN
                LET l_houve_erro = TRUE
                LET m_status_arquivo = 1
                #EXIT WHILE
                CONTINUE WHILE #724885
             END IF

             LET p_ies_contab_aen = gr_par_con.ies_contab_aen

             IF l_verif_gru_icms_st THEN
                IF NOT sup0552_verifica_grupo_icms_st(l_conta_array) THEN #OS 337055
                   LET l_conta_array = l_conta_array + 1
                   LET l_houve_erro = TRUE
                   LET m_status_arquivo = 1
                   #EXIT WHILE
                   CONTINUE WHILE #724885
                END IF
             END IF

 ### OS 424563
             LET l_frete_vnd_sem_nf = TRUE
             IF mr_frete_sup.tip_frete = "V" THEN
                WHENEVER ERROR CONTINUE
                SELECT w_sup0552_4.empresa
                  FROM w_sup0552_4
                 WHERE w_sup0552_4.tipo_registro     = "F"
                   AND w_sup0552_4.empresa           = mr_frete_sup.cod_empresa
                   AND w_sup0552_4.fornecedor        = mr_frete_sup.cod_transpor
                   AND w_sup0552_4.nota_fiscal       = mr_frete_sup.num_conhec
                   AND w_sup0552_4.serie_nota_fiscal = mr_frete_sup.ser_conhec
                   AND w_sup0552_4.subserie_nf       = mr_frete_sup.ssr_conhec
                WHENEVER ERROR STOP
   ### No caso de frete venda com nota de saída relacionada será efetuada consistência
   ### quando verifica os registros tipo F (monta relacionamento nota de saída para o frete)

                IF sqlca.sqlcode = 0 OR
                   sqlca.sqlcode = -284 THEN
                   LET l_frete_vnd_sem_nf = FALSE
                   WHENEVER ERROR CONTINUE
                   DELETE FROM frete_sup_erro
                    WHERE frete_sup_erro.cod_empresa  = mr_frete_sup.cod_empresa
                      AND frete_sup_erro.num_conhec   = mr_frete_sup.num_conhec
                      AND frete_sup_erro.ser_conhec   = mr_frete_sup.ser_conhec
                      AND frete_sup_erro.ssr_conhec   = mr_frete_sup.ssr_conhec
                      AND frete_sup_erro.cod_transpor = mr_frete_sup.cod_transpor
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 THEN
                      LET p_status = TRUE
                   ELSE
                      LET p_status = FALSE
                   END IF
                ELSE
                   CALL sup772_consiste_frete(mr_frete_sup.*) #_# CHAMAR DEPOIS DE FAZER O RELACIONAMENTO
                        RETURNING p_status, mr_frete_sup.*
                END IF
             ELSE
                CALL sup772_consiste_frete(mr_frete_sup.*)
                     RETURNING p_status, mr_frete_sup.*
             END IF

             IF p_status = FALSE THEN
                LET l_houve_erro = TRUE
                LET m_status_arquivo = 1
                #EXIT WHILE
                CONTINUE WHILE #724885
             ELSE
                IF NOT sup0552_grava_ar_pis_cofins("FRETE") THEN
                   LET l_houve_erro = TRUE
                   LET m_status_arquivo = 1
                   #EXIT WHILE
                   CONTINUE WHILE #724885
                END IF
             END IF

             # Inicio chamado 739991
             IF mr_frete_sup.tip_frete = "V" THEN
                LET mr_frete_sup.val_base_c_frete_d = mr_frete_sup.val_base_c_frete_c
             END IF
             # Fim chamado 739991

             LET l_contador = 0
             WHENEVER ERROR CONTINUE
             SELECT COUNT(*)
               INTO l_contador
               FROM frete_sup_erro
              WHERE frete_sup_erro.cod_empresa  = mr_frete_sup.cod_empresa
                AND frete_sup_erro.num_conhec   = mr_frete_sup.num_conhec
                AND frete_sup_erro.ser_conhec   = mr_frete_sup.ser_conhec
                AND frete_sup_erro.ssr_conhec   = mr_frete_sup.ssr_conhec
                AND frete_sup_erro.cod_transpor = mr_frete_sup.cod_transpor
                AND (frete_sup_erro.ies_origem_erro <> "4" AND
                     frete_sup_erro.ies_origem_erro <> "5")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode = 0 THEN
                IF l_contador > 0  THEN
                   LET mr_frete_sup.ies_conhec_erro = "S"
                   WHENEVER ERROR CONTINUE
                   UPDATE frete_sup
                      SET frete_sup.cod_empresa          = mr_frete_sup.cod_empresa          ,
                          frete_sup.cod_empresa_estab    = mr_frete_sup.cod_empresa_estab    ,
                          frete_sup.cod_transpor         = mr_frete_sup.cod_transpor         ,
                          frete_sup.num_conhec           = mr_frete_sup.num_conhec           ,
                          frete_sup.ser_conhec           = mr_frete_sup.ser_conhec           ,
                          frete_sup.ssr_conhec           = mr_frete_sup.ssr_conhec           ,
                          frete_sup.dat_emis_conhec      = mr_frete_sup.dat_emis_conhec      ,
                          frete_sup.dat_entrada_conhec   = mr_frete_sup.dat_entrada_conhec   ,
                          frete_sup.cnd_pgto_frt         = mr_frete_sup.cnd_pgto_frt         ,
                          frete_sup.cod_regist_entrada   = mr_frete_sup.cod_regist_entrada   ,
                          frete_sup.cod_fiscal_frete     = mr_frete_sup.cod_fiscal_frete     ,
                          frete_sup.gru_ctr_desp_frete   = mr_frete_sup.gru_ctr_desp_frete   ,
                          frete_sup.ies_incid_icms_fre   = mr_frete_sup.ies_incid_icms_fre   ,
                          frete_sup.val_frete            = mr_frete_sup.val_frete            ,
                          frete_sup.val_base_c_frete_c   = mr_frete_sup.val_base_c_frete_c   ,
                          frete_sup.val_tot_icms_frt_d   = mr_frete_sup.val_tot_icms_frt_d   ,
                          frete_sup.val_tot_icms_frt_c   = mr_frete_sup.val_tot_icms_frt_c   ,
                          frete_sup.val_icms_diferen     = mr_frete_sup.val_icms_diferen     ,
                          frete_sup.pct_icms_frete_c     = mr_frete_sup.pct_icms_frete_c     ,
                          frete_sup.pct_red_bc_frete_c   = mr_frete_sup.pct_red_bc_frete_c   ,
                          frete_sup.pct_diferen_fret_c   = mr_frete_sup.pct_diferen_fret_c   ,
                          frete_sup.val_adiant           = mr_frete_sup.val_adiant           ,
                          frete_sup.ies_conhec_erro      = mr_frete_sup.ies_conhec_erro      ,
                          frete_sup.nom_resp_aceite_er   = mr_frete_sup.nom_resp_aceite_er   ,
                          frete_sup.ies_incl_cap         = mr_frete_sup.ies_incl_cap         ,
                          frete_sup.ies_incl_contab      = mr_frete_sup.ies_incl_contab      ,
                          frete_sup.cod_praca            = mr_frete_sup.cod_praca            ,
                          frete_sup.ies_frt_contratado   = mr_frete_sup.ies_frt_contratado   ,
                          frete_sup.tip_carga            = mr_frete_sup.tip_carga            ,
                          frete_sup.cod_item_tab_frete   = mr_frete_sup.cod_item_tab_frete   ,
                          frete_sup.pes_vol_frete        = mr_frete_sup.pes_vol_frete        ,
                          frete_sup.val_frete_c          = mr_frete_sup.val_frete_c          ,
                          frete_sup.ies_diverg_listada   = mr_frete_sup.ies_diverg_listada   ,
                          frete_sup.ies_diverg_val_frt   = mr_frete_sup.ies_diverg_val_frt   ,
                          frete_sup.ies_liberacao_frt    = mr_frete_sup.ies_liberacao_frt    ,
                          frete_sup.ies_diverg_relac     = mr_frete_sup.ies_diverg_relac     ,
                          frete_sup.ies_diverg_cnd_pgt   = mr_frete_sup.ies_diverg_cnd_pgt   ,
                          frete_sup.cnd_pgto_tab         = mr_frete_sup.cnd_pgto_tab         ,
                          frete_sup.tip_frete            = mr_frete_sup.tip_frete            ,
                          frete_sup.cod_tip_despesa      = mr_frete_sup.cod_tip_despesa      ,
                          frete_sup.ies_subst_tribut     = mr_frete_sup.ies_subst_tribut     ,
                          frete_sup.val_base_c_frete_d   = mr_frete_sup.val_base_c_frete_d
                    WHERE frete_sup.cod_empresa  = mr_frete_sup.cod_empresa
                      AND frete_sup.num_conhec   = mr_frete_sup.num_conhec
                      AND frete_sup.ser_conhec   = mr_frete_sup.ser_conhec
                      AND frete_sup.ssr_conhec   = mr_frete_sup.ssr_conhec
                      AND frete_sup.cod_transpor = mr_frete_sup.cod_transpor
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("ATUALIZACAO","FRETE_SUP")
                      LET l_houve_erro = TRUE
                      #EXIT WHILE
                      CONTINUE WHILE #724885
                   END IF

                   #724885
                   WHENEVER ERROR CONTINUE
                     SELECT cod_empresa
                       FROM frete_sup_erro
                      WHERE cod_empresa  = mr_frete_sup.cod_empresa
                        AND cod_transpor = mr_frete_sup.cod_transpor
                        AND num_conhec   = mr_frete_sup.num_conhec
                        AND ser_conhec   = mr_frete_sup.ser_conhec
                        AND ssr_conhec   = mr_frete_sup.ssr_conhec
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 OR
                      sqlca.sqlcode = -284 THEN

                      ### Para listar Fretes com consistencias
                      LET l_conta_div = l_conta_div + 1
                      LET l_conta_array = l_conta_array + 1
                      LET ma_array_consistencias[l_conta_array].nota_fiscal       = mr_frete_sup.num_conhec
                      LET ma_array_consistencias[l_conta_array].serie_nota_fiscal = mr_frete_sup.ser_conhec
                      LET ma_array_consistencias[l_conta_array].subserie_nf       = mr_frete_sup.ssr_conhec
                      LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
                      LET ma_array_consistencias[l_conta_array].fornecedor        = mr_frete_sup.cod_transpor
                      LET ma_array_consistencias[l_conta_array].sequencia         = 0
                      LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Frete: ",mr_frete_sup.num_conhec," - ",mr_frete_sup.ser_conhec," - ", mr_frete_sup.ssr_conhec ," importado.ver consistencias via SUP0580"
                      LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
                   END IF
                ELSE
                   LET mr_frete_sup.ies_conhec_erro = "N"

                   WHENEVER ERROR CONTINUE
                   UPDATE frete_sup SET frete_sup.* = mr_frete_sup.*
                    WHERE frete_sup.cod_empresa   = mr_frete_sup.cod_empresa
                      AND frete_sup.num_conhec   = mr_frete_sup.num_conhec
                      AND frete_sup.ser_conhec   = mr_frete_sup.ser_conhec
                      AND frete_sup.ssr_conhec   = mr_frete_sup.ssr_conhec
                      AND frete_sup.cod_transpor = mr_frete_sup.cod_transpor
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("ATUALIZACAO","FRETE_SUP")
                      LET l_houve_erro = TRUE
                      #EXIT WHILE
                      CONTINUE WHILE #724885
                   END IF

                   IF m_ies_grava_erro_4 = "S" THEN
      ## OS 391495
                      IF NOT sup0552_grava_liberacao_frete(mr_frete_sup.cod_empresa, mr_frete_sup.num_conhec, mr_frete_sup.ser_conhec, mr_frete_sup.ssr_conhec, mr_frete_sup.cod_transpor, l_conta_array) THEN
                         LET l_conta_array = l_conta_array + 1
                      END IF
                   END IF
                END IF
             END IF

             LET l_conta_import = l_conta_import + 1

             IF gr_par_sup.ies_frete_estoque = "S" AND
                mr_w_sup0552_4.espc_nota_fiscal <> "COV" THEN

                CALL supr12_rateio_frete(mr_frete_sup.*)
                   RETURNING l_work
             END IF

             ##Nestas funções tem abertura de transação, então só poderá ser chamada
             ##depois do COMMIT
             #IF l_frete_vnd_sem_nf = TRUE THEN
             #   CALL sup1473_integra_nf_cap_livro_fiscal("","","","FRETE",
             #                                            mr_frete_sup.num_conhec,
             #                                            mr_frete_sup.ser_conhec,
             #                                            mr_frete_sup.ssr_conhec,
             #                                            mr_frete_sup.cod_empresa,
             #                                            mr_frete_sup.cod_transpor,"","")
             #
             #   IF NOT supr6_contabilizacao_por_documento(mr_frete_sup.cod_empresa,
             #                                             mr_frete_sup.num_conhec,
             #                                             mr_frete_sup.ser_conhec,
             #                                             mr_frete_sup.ssr_conhec,
             #                                             "CON",
             #                                             mr_frete_sup.cod_transpor,
             #                                             mr_frete_sup.dat_entrada_conhec,
             #                                             0,TRUE) THEN
             #      LET m_msg = " EMP ",mr_frete_sup.cod_empresa, " CONHEC ",mr_frete_sup.num_conhec USING "<<<<<<"
             #      LET m_msg = m_msg CLIPPED," - ",log0030_mensagem_get_texto()
             #      LET l_conta_div   = l_conta_div   + 1
             #      LET l_conta_array = l_conta_array + 1
             #      CALL sup0552_carrega_chave_consiste(l_conta_array)
             #      LET ma_array_consistencias[l_conta_array].txt_consistencia = m_msg CLIPPED
             #   END IF
             #END IF
          END IF
       ELSE
          LET l_houve_erro = TRUE
          #EXIT WHILE
          CONTINUE WHILE #724885
       END IF

       IF l_houve_erro_reg_c  = FALSE THEN
          IF m_controla_gao = 'S' THEN
             WHENEVER ERROR CONTINUE
             DECLARE cq_frete_sup CURSOR WITH HOLD FOR
              SELECT frete_sup.cod_empresa, #Maria Carolina - Chamado AAAHWM
                     frete_sup.num_conhec,
                     frete_sup.ser_conhec,
                     frete_sup.ssr_conhec,
                     frete_sup.cod_transpor,
                     frete_sup.val_frete,
                     frete_sup.dat_entrada_conhec,
                     frete_sup.tip_frete
                FROM frete_sup
               WHERE frete_sup.cod_empresa  = mr_w_sup0552_4.empresa
                 AND frete_sup.num_conhec   = mr_w_sup0552_4.nota_fiscal
                 AND frete_sup.ser_conhec   = mr_w_sup0552_4.serie_nota_fiscal
                 AND frete_sup.ssr_conhec   = mr_w_sup0552_4.subserie_nf
                 AND frete_sup.cod_transpor = mr_w_sup0552_4.fornecedor
             WHENEVER ERROR STOP

             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("DECLARE","CQ_FRETE_SUP")
             END IF

             INITIALIZE lr_frete_sup_gao.* TO NULL

             LET l_erro_gao = 'N'
             WHENEVER ERROR CONTINUE
             FOREACH cq_frete_sup INTO lr_frete_sup_gao.cod_empresa, #Maria Carolina - Chamado AAAHWM
                                       lr_frete_sup_gao.num_conhec,
                                       lr_frete_sup_gao.ser_conhec,
                                       lr_frete_sup_gao.ssr_conhec,
                                       lr_frete_sup_gao.cod_transpor,
                                       lr_frete_sup_gao.val_frete,
                                       lr_frete_sup_gao.dat_entrada_conhec,
                                       lr_frete_sup_gao.tip_frete
             WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                    CLOSE cq_frete_sup #764215#
                   EXIT FOREACH
                END IF

                IF lr_frete_sup_gao.tip_frete = "C" THEN
                   LET l_oper = "FC"
                ELSE
                   LET l_oper = "FV"
                END IF

                CALL sup0772_verifica_saldo_contas_fr_inclui(lr_frete_sup_gao.cod_empresa,
                                                             lr_frete_sup_gao.num_conhec,
                                                             lr_frete_sup_gao.ser_conhec,
                                                             lr_frete_sup_gao.ssr_conhec,
                                                             lr_frete_sup_gao.cod_transpor,
                                                             lr_frete_sup_gao.val_frete,
                                                             lr_frete_sup_gao.dat_entrada_conhec,
                                                             l_oper,
                                                             "SUP0552",
                                                             0)
                     RETURNING p_status, m_msg
                IF p_status = FALSE THEN
                   LET l_erro_gao = 'S'

                   LET l_conta_div   = l_conta_div   + 1
                   LET l_conta_array = l_conta_array + 1
                   CALL sup0552_carrega_chave_consiste(l_conta_array)
                   LET ma_array_consistencias[l_conta_array].txt_consistencia = m_msg CLIPPED
                   CALL sup0552_deleta_tabelas_fretes()
                   LET m_status_arquivo = 1
                    CLOSE cq_frete_sup #764215#
                   EXIT FOREACH
                END IF

             END FOREACH
             FREE cq_frete_sup

             IF l_erro_gao = 'S' THEN
                CONTINUE WHILE
             END IF
            #Atualizacao GAO
          ELSE
             LET l_houve_erro_reg_c  = FALSE
          END IF
       END IF
    END IF
    IF m_houve_erro THEN
       LET l_houve_erro = TRUE
    END IF
    IF NOT l_houve_erro THEN
       IF m_transacao_ativa THEN
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("COMMIT")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("TRANSACAO","COMMIT")
             CALL log085_transacao("ROLLBACK") #OS596059
             EXIT WHILE
          END IF
       END IF
       LET m_transacao_ativa = FALSE

       IF l_frete_vnd_sem_nf = TRUE THEN
          CALL sup1473_integra_nf_cap_livro_fiscal("","","","FRETE",
                                                   mr_frete_sup.num_conhec,
                                                   mr_frete_sup.ser_conhec,
                                                   mr_frete_sup.ssr_conhec,
                                                   mr_frete_sup.cod_empresa,
                                                   mr_frete_sup.cod_transpor,"","")

          IF NOT supr6_contabilizacao_por_documento(mr_frete_sup.cod_empresa,
                                                    mr_frete_sup.num_conhec,
                                                    mr_frete_sup.ser_conhec,
                                                    mr_frete_sup.ssr_conhec,
                                                    "CON",
                                                    mr_frete_sup.cod_transpor,
                                                    mr_frete_sup.dat_entrada_conhec,
                                                    0,TRUE) THEN
             LET m_msg = " EMP ",mr_frete_sup.cod_empresa, " CONHEC ",mr_frete_sup.num_conhec USING "<<<<<<"
             LET m_msg = m_msg CLIPPED," - ",log0030_mensagem_get_texto()
             LET l_conta_div   = l_conta_div   + 1
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia = m_msg CLIPPED
          END IF
       END IF
    ELSE
       IF m_transacao_ativa THEN
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("TRANSACAO","ROLLBACK")
             EXIT WHILE
          END IF
          LET m_transacao_ativa = FALSE
       END IF
    END IF

    #CH A24579
    IF m_ies_wms_instalado = 'S' THEN
       IF  m_regime_aduaneiro IS NOT NULL
       AND m_regime_aduaneiro <> " " THEN
          IF find4GLFunction('wms6612_verifica_depositante_aduaneiro') THEN
             CALL wms6612_verifica_depositante_aduaneiro(mr_w_sup0552_4.fornecedor,FALSE)
                RETURNING l_status, l_regime
             IF l_status THEN
                CALL wms6612_atualiza_sup_par_ar(l_num_aviso_rec,
                                                 m_regime_aduaneiro,
                                                 'N')
             END IF
          END IF
       END IF
    END IF

    LET m_houve_erro = FALSE
    LET l_houve_erro = FALSE
 END WHILE
 CLOSE cq_mestre
 FREE  cq_mestre


 IF NOT l_houve_erro THEN
    IF m_transacao_ativa THEN
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("COMMIT")
       WHENEVER ERROR STOP
       IF  sqlca.sqlcode <> 0
       AND sqlca.sqlcode <> -255 THEN
          CALL log003_err_sql("TRANSACAO","COMMIT")
          CALL log085_transacao("ROLLBACK") #OS596059
       END IF
    END IF
    LET m_transacao_ativa = FALSE
 ELSE
    IF m_transacao_ativa THEN
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("TRANSACAO","ROLLBACK")
       END IF
       LET m_transacao_ativa = FALSE
    END IF
 END IF

 LET l_work = TRUE
 #_# aqui vai ser feito o FOREACH DO TIPO "R"
 #_# CHAMAR NOVAMENTE A CONSISTE_FRETE

 LET sql_stmt = "  SELECT tipo_registro,         ",
                "         empresa,               ",
                "         empresa_estabel,       ",
                "         nota_fiscal,           ",
                "         serie_nota_fiscal,     ",
                "         subserie_nf,           ",
                "         espc_nota_fiscal,      ",
                "         fornecedor,            ",
                "         dat_emis_nf,           ",
                "         dat_ent_nf,            ",
                "         cond_pagto,            ",
                "         modo_embarque,         ",
                "         tip_nota_fiscal,       ",
                "         num_conhec_frete,      ",
                "         serie_conhec_frete,    ",
                "         subserie_conh_fret,    ",
                "         transportador          ",
                "    FROM w_sup0552_4 ",
                "   WHERE tipo_registro = 'R'    "


 WHENEVER ERROR CONTINUE
 PREPARE var_query10 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query10")
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_sup_frete_x CURSOR WITH HOLD FOR var_query10
 WHENEVER ERROR STOP
 IF sqlca.sqlcode<> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_SUP_FRETE_X")
 END IF
 WHENEVER ERROR CONTINUE
 FOREACH cq_sup_frete_x INTO mr_w_sup0552_4.tipo_registro,
                             mr_w_sup0552_4.empresa,
                             mr_w_sup0552_4.empresa_estabel,
                             mr_w_sup0552_4.nota_fiscal,
                             mr_w_sup0552_4.serie_nota_fiscal,
                             mr_w_sup0552_4.subserie_nf,
                             mr_w_sup0552_4.espc_nota_fiscal,
                             mr_w_sup0552_4.fornecedor,
                             mr_w_sup0552_4.dat_emis_nf,
                             mr_w_sup0552_4.dat_ent_nf,
                             mr_w_sup0552_4.cond_pagto,
                             mr_w_sup0552_4.modo_embarque,
                             mr_w_sup0552_4.tip_nota_fiscal,
                             mr_w_sup0552_4.num_conhec_frete,
                             mr_w_sup0552_4.serie_conhec_frete,
                             mr_w_sup0552_4.subserie_conh_fret,
                             mr_w_sup0552_4.transportador
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_SUP_FRETE_X")
    END IF

    #Obs.: Se a nota ou o frete foram importados neste arquivo já está na NF_SUP também..
    CALL supm20_nf_sup_existe(mr_w_sup0552_4.empresa,
                              mr_w_sup0552_4.nota_fiscal,
                              mr_w_sup0552_4.serie_nota_fiscal,
                              mr_w_sup0552_4.subserie_nf,
                              mr_w_sup0552_4.espc_nota_fiscal,
                              mr_w_sup0552_4.fornecedor,
                              FALSE)
       RETURNING l_status
    IF NOT l_status THEN
       LET l_conta_array = l_conta_array + 1
       LET ma_array_consistencias[l_conta_array].nota_fiscal       = mr_w_sup0552_4.nota_fiscal
       LET ma_array_consistencias[l_conta_array].serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
       LET ma_array_consistencias[l_conta_array].subserie_nf       = mr_w_sup0552_4.subserie_nf
       LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
       LET ma_array_consistencias[l_conta_array].fornecedor        = mr_w_sup0552_4.fornecedor
       LET ma_array_consistencias[l_conta_array].sequencia         = mr_w_sup0552_4.sequencia
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
        "NF não cadastrada. Impossível relacionar com frete", l_existe_h_tab CLIPPED
       LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
       LET l_work = FALSE
       LET m_houve_erro     = TRUE
       CONTINUE FOREACH
    END IF

    CALL supm61_frete_sup_existe(mr_w_sup0552_4.empresa,
                                 mr_w_sup0552_4.transportador,
                                 mr_w_sup0552_4.num_conhec_frete,
                                 mr_w_sup0552_4.serie_conhec_frete,
                                 mr_w_sup0552_4.subserie_conh_fret,
                                 FALSE)
       RETURNING l_status
    IF NOT l_status THEN
       LET l_conta_array = l_conta_array + 1
       LET ma_array_consistencias[l_conta_array].nota_fiscal       = mr_w_sup0552_4.nota_fiscal
       LET ma_array_consistencias[l_conta_array].serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
       LET ma_array_consistencias[l_conta_array].subserie_nf       = mr_w_sup0552_4.subserie_nf
       LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
       LET ma_array_consistencias[l_conta_array].fornecedor        = mr_w_sup0552_4.fornecedor
       LET ma_array_consistencias[l_conta_array].sequencia         = mr_w_sup0552_4.sequencia
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
       "Frete não cadastrado. Impossível relacionar com NF", l_existe_h_tab CLIPPED
       LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
       LET l_work = FALSE
       LET m_houve_erro     = TRUE
       CONTINUE FOREACH
    END IF

    CALL supm20_nf_sup_leitura(mr_w_sup0552_4.empresa,
                               mr_w_sup0552_4.nota_fiscal,
                               mr_w_sup0552_4.serie_nota_fiscal,
                               mr_w_sup0552_4.subserie_nf,
                               mr_w_sup0552_4.espc_nota_fiscal,
                               mr_w_sup0552_4.fornecedor,
                               TRUE,
                               FALSE)

    CALL supm20_nf_sup_get_cod_empresa()
       RETURNING l_empresa
    CALL supm20_nf_sup_get_cod_transpor()
       RETURNING l_cod_transpor
    CALL supm20_nf_sup_get_num_conhec()
       RETURNING l_num_conhec
    CALL supm20_nf_sup_get_ser_conhec()
      RETURNING l_ser_conhec
    CALL supm20_nf_sup_get_ssr_conhec()
      RETURNING l_ssr_conhec

    IF l_empresa = mr_w_sup0552_4.empresa AND
       l_cod_transpor = mr_w_sup0552_4.transportador AND
       l_num_conhec   = mr_w_sup0552_4.num_conhec_frete AND
       l_ser_conhec   = mr_w_sup0552_4.serie_conhec_frete AND
       l_ssr_conhec   = mr_w_sup0552_4.subserie_conh_fret THEN
       LET l_msg = "Nota fiscal ",mr_w_sup0552_4.nota_fiscal CLIPPED ," já relacionada com o frete ", l_num_conhec CLIPPED
       CALL log0030_mensagem(l_msg,"info")
       LET l_work = FALSE
       CONTINUE FOREACH
    END IF

    LET l_num_ar = supm20_nf_sup_get_num_aviso_rec()

    WHENEVER ERROR CONTINUE
    DECLARE cq_seq_aviso CURSOR FOR
    SELECT num_seq
      FROM aviso_rec
     WHERE aviso_rec.cod_empresa   = mr_w_sup0552_4.empresa
       AND aviso_rec.num_aviso_rec = l_num_ar
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0
    AND sqlca.sqlcode <> 100 THEN

       LET l_work = FALSE
       CALL log003_err_sql("DECLARE","CQ_SEQ_AVISO")
    END IF

    IF l_num_conhec = 0 THEN
       WHENEVER ERROR CONTINUE
       UPDATE nf_sup
          SET num_conhec = mr_w_sup0552_4.num_conhec_frete,
              ser_conhec = mr_w_sup0552_4.serie_conhec_frete,
              ssr_conhec = mr_w_sup0552_4.subserie_conh_fret,
              cod_transpor = mr_w_sup0552_4.transportador
        WHERE cod_empresa  = mr_w_sup0552_4.empresa
          AND num_aviso_rec = l_num_ar
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET l_work = FALSE
          CALL log003_err_sql("UPDATE","NF_SUP")
          CONTINUE FOREACH
       END IF
    ELSE
       WHENEVER ERROR CONTINUE
       FOREACH cq_seq_aviso INTO l_seq_aviso
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("FOREACH","CQ_SEQ_AVISO")
       END IF
          CALL supm370_sup_frete_x_nf_entrada_set_null()
          CALL supm370_sup_frete_x_nf_entrada_set_empresa(mr_w_sup0552_4.empresa)
          CALL supm370_sup_frete_x_nf_entrada_set_aviso_recebto(l_num_ar)
          CALL supm370_sup_frete_x_nf_entrada_set_seq_aviso_recebto(l_seq_aviso)
          CALL supm370_sup_frete_x_nf_entrada_set_conhec(mr_w_sup0552_4.num_conhec_frete)
          CALL supm370_sup_frete_x_nf_entrada_set_serie_conhec(mr_w_sup0552_4.serie_conhec_frete)
          CALL supm370_sup_frete_x_nf_entrada_set_subserie_conhec(mr_w_sup0552_4.subserie_conh_fret)
          CALL supm370_sup_frete_x_nf_entrada_set_transportador(mr_w_sup0552_4.transportador)
          CALL supm370_sup_frete_x_nf_entrada_set_val_frete(0)
          CALL supm370_sup_frete_x_nf_entrada_set_val_bas_calc_frete_declarado(0)
          CALL supm370_sup_frete_x_nf_entrada_set_val_bas_calc_frete_calculado(0)
          CALL supm370_sup_frete_x_nf_entrada_set_val_diferenc_icms_frete(0)
          CALL supm370_sup_frete_x_nf_entrada_set_val_icms_frete_declarado(0)
          CALL supm370_sup_frete_x_nf_entrada_set_val_icms_frete_calculado(0)
          CALL supm370_sup_frete_x_nf_entrada_set_pct_icms_frete_declarado(0)
          CALL supm370_sup_frete_x_nf_entrada_set_pct_icms_frete_calculado(0)
          CALL supm370_sup_frete_x_nf_entrada_set_pct_red_bc_frete_declarado(0)
          CALL supm370_sup_frete_x_nf_entrada_set_pct_red_bc_frete_calculado(0)
          CALL supm370_sup_frete_x_nf_entrada_set_pct_diferenc_frete_declarado(0)
          CALL supm370_sup_frete_x_nf_entrada_set_pct_diferenc_frete_calculado(0)

          CALL supt370_sup_frete_x_nf_entrada_inclui(TRUE, TRUE)
             RETURNING p_status
       END FOREACH
        FREE cq_seq_aviso #764215#
    END IF

    CALL supm61_frete_sup_leitura(mr_w_sup0552_4.empresa,
                                  mr_w_sup0552_4.transportador,
                                  mr_w_sup0552_4.num_conhec_frete,
                                  mr_w_sup0552_4.serie_conhec_frete,
                                  mr_w_sup0552_4.subserie_conh_fret,
                                  FALSE,
                                  TRUE )
      RETURNING p_status,l_msg

    IF p_status = TRUE THEN
       LET p_frete_sup.cod_empresa          = supm61_frete_sup_get_cod_empresa()
       LET p_frete_sup.cod_empresa_estab    = supm61_frete_sup_get_cod_empresa_estab()
       LET p_frete_sup.cod_transpor         = supm61_frete_sup_get_cod_transpor()
       LET p_frete_sup.num_conhec           = supm61_frete_sup_get_num_conhec()
       LET p_frete_sup.ser_conhec           = supm61_frete_sup_get_ser_conhec()
       LET p_frete_sup.ssr_conhec           = supm61_frete_sup_get_ssr_conhec()
       LET p_frete_sup.dat_emis_conhec      = supm61_frete_sup_get_dat_emis_conhec()
       LET p_frete_sup.dat_entrada_conhec   = supm61_frete_sup_get_dat_entrada_conhec()
       LET p_frete_sup.cnd_pgto_frt         = supm61_frete_sup_get_cnd_pgto_frt()
       LET p_frete_sup.cod_regist_entrada   = supm61_frete_sup_get_cod_regist_entrada()
       LET p_frete_sup.cod_fiscal_frete     = supm61_frete_sup_get_cod_fiscal_frete()
       LET p_frete_sup.gru_ctr_desp_frete   = supm61_frete_sup_get_gru_ctr_desp_frete()
       LET p_frete_sup.ies_incid_icms_fre   = supm61_frete_sup_get_ies_incid_icms_fre()
       LET p_frete_sup.val_frete            = supm61_frete_sup_get_val_frete()
       LET p_frete_sup.val_base_c_frete_c   = supm61_frete_sup_get_val_base_c_frete_c()
       LET p_frete_sup.val_tot_icms_frt_d   = supm61_frete_sup_get_val_tot_icms_frt_d()
       LET p_frete_sup.val_tot_icms_frt_c   = supm61_frete_sup_get_val_tot_icms_frt_c()
       LET p_frete_sup.val_icms_diferen     = supm61_frete_sup_get_val_icms_diferen()
       LET p_frete_sup.pct_icms_frete_c     = supm61_frete_sup_get_pct_icms_frete_c()
       LET p_frete_sup.pct_red_bc_frete_c   = supm61_frete_sup_get_pct_red_bc_frete_c()
       LET p_frete_sup.pct_diferen_fret_c   = supm61_frete_sup_get_pct_diferen_fret_c()
       LET p_frete_sup.val_adiant           = supm61_frete_sup_get_val_adiant()
       LET p_frete_sup.ies_conhec_erro      = supm61_frete_sup_get_ies_conhec_erro()
       LET p_frete_sup.nom_resp_aceite_er   = supm61_frete_sup_get_nom_resp_aceite_er()
       LET p_frete_sup.ies_incl_cap         = supm61_frete_sup_get_ies_incl_cap()
       LET p_frete_sup.ies_incl_contab      = supm61_frete_sup_get_ies_incl_contab()
       LET p_frete_sup.cod_praca            = supm61_frete_sup_get_cod_praca()
       LET p_frete_sup.ies_frt_contratado   = supm61_frete_sup_get_ies_frt_contratado()
       LET p_frete_sup.tip_carga            = supm61_frete_sup_get_tip_carga()
       LET p_frete_sup.cod_item_tab_frete   = supm61_frete_sup_get_cod_item_tab_frete()
       LET p_frete_sup.pes_vol_frete        = supm61_frete_sup_get_pes_vol_frete()
       LET p_frete_sup.val_frete_c          = supm61_frete_sup_get_val_frete_c()
       LET p_frete_sup.ies_diverg_listada   = supm61_frete_sup_get_ies_diverg_listada()
       LET p_frete_sup.ies_diverg_val_frt   = supm61_frete_sup_get_ies_diverg_val_frt()
       LET p_frete_sup.ies_liberacao_frt    = supm61_frete_sup_get_ies_liberacao_frt()
       LET p_frete_sup.ies_diverg_relac     = supm61_frete_sup_get_ies_diverg_relac()
       LET p_frete_sup.ies_diverg_cnd_pgt   = supm61_frete_sup_get_ies_diverg_cnd_pgt()
       LET p_frete_sup.cnd_pgto_tab         = supm61_frete_sup_get_cnd_pgto_tab()
       LET p_frete_sup.tip_frete            = supm61_frete_sup_get_tip_frete()
       LET p_frete_sup.cod_tip_despesa      = supm61_frete_sup_get_cod_tip_despesa()
       LET p_frete_sup.ies_subst_tribut     = supm61_frete_sup_get_ies_subst_tribut()
       LET p_frete_sup.val_base_c_frete_d   = supm61_frete_sup_get_val_base_c_frete_d()

       IF l_work THEN
          INITIALIZE mr_importados.* TO NULL

          LET mr_importados.tipo_registro     = "X"
          LET mr_importados.nota_fiscal       = p_frete_sup.num_conhec
          LET mr_importados.serie_nota_fiscal = p_frete_sup.ser_conhec
          LET mr_importados.subserie_nf       = p_frete_sup.ssr_conhec
          LET mr_importados.espc_nota_fiscal  = "CON"
          LET mr_importados.fornecedor        = p_frete_sup.cod_transpor
          LET mr_importados.num_nff_relac     = l_num_ar
          LET mr_importados.arquivo           = m_nom_arquivo_consis

          WHENEVER ERROR CONTINUE
          INSERT INTO w_sup0552_2 (tipo_registro       ,
                                   nota_fiscal         ,
                                   serie_nota_fiscal   ,
                                   subserie_nf         ,
                                   espc_nota_fiscal    ,
                                   fornecedor          ,
                                   num_nff_relac       ,
                                   arquivo             )
                           VALUES (mr_importados.tipo_registro       ,
                                   mr_importados.nota_fiscal         ,
                                   mr_importados.serie_nota_fiscal   ,
                                   mr_importados.subserie_nf         ,
                                   mr_importados.espc_nota_fiscal    ,
                                   mr_importados.fornecedor          ,
                                   mr_importados.num_nff_relac       ,
                                   mr_importados.arquivo             )
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da W_SUP0552_2"
             LET m_status_arquivo = 1
          END IF

          IF m_tipo_de_processo = "I" THEN
             IF m_transacao_ativa THEN
                WHENEVER ERROR CONTINUE
                CALL log085_transacao("COMMIT")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("TRANSACAO","COMMIT")
                   CALL log085_transacao("ROLLBACK") #OS596059
                   CONTINUE FOREACH
                END IF
                LET m_transacao_ativa = FALSE
                CALL log085_transacao("BEGIN")
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("TRANSACAO","BEGIN")
                END IF
                LET m_transacao_ativa = TRUE
             END IF
          END IF
          LET l_conta_import = l_conta_import + 1

          CALL sup772_consiste_frete(p_frete_sup.*)
             RETURNING l_work, p_frete_sup.*
          IF l_work THEN
             CALL supr12_rateio_frete(p_frete_sup.*)
                RETURNING l_work
          END IF
       ELSE
          LET l_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("TRANSACAO","ROLLBACK")
          END IF
          LET m_transacao_ativa = FALSE
       END IF
    ELSE
       #724885
       LET l_conta_div   = l_conta_div + 1
       LET l_conta_array = l_conta_array + 1

       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Conhecimento de frete nao cadastrado: ", mr_nf_sup.num_conhec, " - ", mr_frete_sup.ser_conhec, " - ", mr_frete_sup.ssr_conhec       #724885
       LET m_status_arquivo = 1
       CALL sup0552_efetua_rollback()
       CONTINUE FOREACH
    END IF
 END FOREACH
 FREE cq_sup_frete_x
 WHENEVER ERROR STOP

  LET l_contador = NULL
 WHENEVER ERROR CONTINUE
 SELECT COUNT(*)
   INTO l_contador
   FROM w_sup0552_3
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR
    l_contador IS NULL THEN
    LET l_contador = 0
 END IF

 IF l_contador > 0 THEN

    IF m_arg = FALSE THEN
       ERROR " Efetuando consistencia de NF's com Frete ... "
       DISPLAY "                      PROCESSANDO ...                     " AT 1,1 ATTRIBUTE(REVERSE)
       DISPLAY "NF/Conhec..: " AT 03,02
       DISPLAY "Serie......: " AT 04,02
       DISPLAY "Sub-Serie..: " AT 05,02
       DISPLAY "Especie....: " AT 06,02
       DISPLAY "Forn/Transp: " AT 07,02
       DISPLAY "Sequencia..: " AT 08,02
       CALL LOG_refresh_display()
    END IF

    INITIALIZE mr_w_sup0552_4.* TO NULL

    WHENEVER ERROR CONTINUE
    DECLARE cq_consiste CURSOR WITH HOLD FOR
     SELECT w_sup0552_3.empresa           ,
            w_sup0552_3.nota_fiscal       ,
            w_sup0552_3.serie_nota_fiscal ,
            w_sup0552_3.subserie_nf       ,
            w_sup0552_3.espc_nota_fiscal  ,
            w_sup0552_3.fornecedor
       FROM w_sup0552_3
      ORDER BY w_sup0552_3.empresa,
               w_sup0552_3.nota_fiscal,
               w_sup0552_3.serie_nota_fiscal,
               w_sup0552_3.subserie_nf,
               w_sup0552_3.espc_nota_fiscal,
               w_sup0552_3.fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DECLARE","CQ_CONSISTE")
    END IF

    WHENEVER ERROR CONTINUE
    FOREACH cq_consiste INTO mr_w_sup0552_4.empresa,
                             mr_w_sup0552_4.nota_fiscal,
                             mr_w_sup0552_4.serie_nota_fiscal,
                             mr_w_sup0552_4.subserie_nf,
                             mr_w_sup0552_4.espc_nota_fiscal,
                             mr_w_sup0552_4.fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_CONSISTE")
    END IF

       IF m_arg = FALSE THEN
          DISPLAY mr_w_sup0552_4.nota_fiscal       AT 03,15
          DISPLAY mr_w_sup0552_4.serie_nota_fiscal AT 04,15
          DISPLAY mr_w_sup0552_4.subserie_nf       AT 05,15
          DISPLAY mr_w_sup0552_4.espc_nota_fiscal  AT 06,15
          DISPLAY mr_w_sup0552_4.fornecedor        AT 07,15
          CALL LOG_refresh_display()
       END IF

       INITIALIZE mr_nf_sup.* TO NULL

       WHENEVER ERROR CONTINUE
       SELECT nf_sup.cod_empresa         ,
              nf_sup.cod_empresa_estab   ,
              nf_sup.num_nf              ,
              nf_sup.ser_nf              ,
              nf_sup.ssr_nf              ,
              nf_sup.ies_especie_nf      ,
              nf_sup.cod_fornecedor      ,
              nf_sup.num_conhec          ,
              nf_sup.ser_conhec          ,
              nf_sup.ssr_conhec          ,
              nf_sup.cod_transpor        ,
              nf_sup.num_aviso_rec       ,
              nf_sup.dat_emis_nf         ,
              nf_sup.dat_entrada_nf      ,
              nf_sup.cod_regist_entrada  ,
              nf_sup.val_tot_nf_c        ,
              nf_sup.val_tot_nf_d        ,
              nf_sup.val_tot_icms_nf_d   ,
              nf_sup.val_tot_icms_nf_c   ,
              nf_sup.val_tot_desc        ,
              nf_sup.val_tot_acresc      ,
              nf_sup.val_ipi_nf          ,
              nf_sup.val_ipi_calc        ,
              nf_sup.val_despesa_aces    ,
              nf_sup.val_adiant          ,
              nf_sup.ies_tip_frete       ,
              nf_sup.cnd_pgto_nf         ,
              nf_sup.cod_mod_embar       ,
              nf_sup.ies_nf_com_erro     ,
              nf_sup.nom_resp_aceite_er  ,
              nf_sup.ies_incl_cap        ,
              nf_sup.ies_incl_contab     ,
              nf_sup.cod_operacao        ,
              nf_sup.ies_calc_subst      ,
              nf_sup.val_bc_subst_d      ,
              nf_sup.val_icms_subst_d    ,
              nf_sup.val_bc_subst_c      ,
              nf_sup.val_icms_subst_c    ,
              nf_sup.cod_imp_renda       ,
              nf_sup.val_imp_renda       ,
              nf_sup.ies_situa_import    ,
              nf_sup.val_bc_imp_renda    ,
              nf_sup.ies_nf_aguard_nfe
         INTO mr_nf_sup.cod_empresa         ,
              mr_nf_sup.cod_empresa_estab   ,
              mr_nf_sup.num_nf              ,
              mr_nf_sup.ser_nf              ,
              mr_nf_sup.ssr_nf              ,
              mr_nf_sup.ies_especie_nf      ,
              mr_nf_sup.cod_fornecedor      ,
              mr_nf_sup.num_conhec          ,
              mr_nf_sup.ser_conhec          ,
              mr_nf_sup.ssr_conhec          ,
              mr_nf_sup.cod_transpor        ,
              mr_nf_sup.num_aviso_rec       ,
              mr_nf_sup.dat_emis_nf         ,
              mr_nf_sup.dat_entrada_nf      ,
              mr_nf_sup.cod_regist_entrada  ,
              mr_nf_sup.val_tot_nf_c        ,
              mr_nf_sup.val_tot_nf_d        ,
              mr_nf_sup.val_tot_icms_nf_d   ,
              mr_nf_sup.val_tot_icms_nf_c   ,
              mr_nf_sup.val_tot_desc        ,
              mr_nf_sup.val_tot_acresc      ,
              mr_nf_sup.val_ipi_nf          ,
              mr_nf_sup.val_ipi_calc        ,
              mr_nf_sup.val_despesa_aces    ,
              mr_nf_sup.val_adiant          ,
              mr_nf_sup.ies_tip_frete       ,
              mr_nf_sup.cnd_pgto_nf         ,
              mr_nf_sup.cod_mod_embar       ,
              mr_nf_sup.ies_nf_com_erro     ,
              mr_nf_sup.nom_resp_aceite_er  ,
              mr_nf_sup.ies_incl_cap        ,
              mr_nf_sup.ies_incl_contab     ,
              mr_nf_sup.cod_operacao        ,
              mr_nf_sup.ies_calc_subst      ,
              mr_nf_sup.val_bc_subst_d      ,
              mr_nf_sup.val_icms_subst_d    ,
              mr_nf_sup.val_bc_subst_c      ,
              mr_nf_sup.val_icms_subst_c    ,
              mr_nf_sup.cod_imp_renda       ,
              mr_nf_sup.val_imp_renda       ,
              mr_nf_sup.ies_situa_import    ,
              mr_nf_sup.val_bc_imp_renda    ,
              mr_nf_sup.ies_nf_aguard_nfe
         FROM nf_sup
        WHERE nf_sup.cod_empresa    = mr_w_sup0552_4.empresa
          AND nf_sup.num_nf         = mr_w_sup0552_4.nota_fiscal
          AND nf_sup.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
          AND nf_sup.ssr_nf         = mr_w_sup0552_4.subserie_nf
          AND nf_sup.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
          AND nf_sup.cod_fornecedor = mr_w_sup0552_4.fornecedor
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("SELECAO","NF_SUP")
       END IF
       IF NOT LOG_job_mode() THEN
          IF mr_nf_sup.ies_nf_aguard_nfe = "7" THEN
             CALL sup0552_insere_erro_transito_nf(mr_nf_sup.*)
          END IF
          IF NOT LOG_job_mode() THEN
             CALL log120_procura_caminho("sup0680") RETURNING comando2
             LET comando2 = comando2 CLIPPED        ," ",
                            mr_nf_sup.cod_empresa  ," ",
                            mr_nf_sup.num_aviso_rec
             RUN comando2 RETURNING p_cancel
          END IF
       END IF

       LET l_contador = 0
       WHENEVER ERROR CONTINUE
       SELECT COUNT(*)
         INTO l_contador
         FROM nf_sup_erro
        WHERE nf_sup_erro.empresa        = mr_nf_sup.cod_empresa
          AND nf_sup_erro.num_aviso_rec  = mr_nf_sup.num_aviso_rec
          AND (nf_sup_erro.ies_origem_erro <> "4" AND
               nf_sup_erro.ies_origem_erro <> "5")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 THEN
          IF l_contador > 0  THEN
             WHENEVER ERROR CONTINUE
             UPDATE nf_sup SET (nf_sup.ies_nf_com_erro) = ("S")
              WHERE nf_sup.cod_empresa   = mr_nf_sup.cod_empresa
                AND nf_sup.num_aviso_rec = mr_nf_sup.num_aviso_rec
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("ATUALIZACAO","NF_SUP")
                LET l_houve_erro = TRUE
                 CLOSE cq_consiste #764215#
                EXIT FOREACH
             END IF

             IF m_ies_cont_insp_aut = "3" THEN
                IF gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
                   (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                    mr_nf_sup.ies_especie_nf = "NFS") THEN
                   IF sup0552_verifica_itens_nao_estoque() THEN
                      CALL sup0552_gera_movimento_estoque("DEB_DIRETO","NORMAL")
                   ELSE
                      CALL sup0552_gera_movimento_estoque("NORMAL","NORMAL")
                   END IF
                ELSE
                   CALL sup0552_gera_movimento_estoque("NORMAL","NORMAL")
                END IF
             ELSE
                IF gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
                   (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                    mr_nf_sup.ies_especie_nf = "NFS") THEN
                   IF sup0552_verifica_itens_nao_estoque() THEN
                      CALL sup0552_gera_movimento_estoque("DEB_DIRETO","NORMAL")
                   ELSE
                      CALL sup0552_gera_movimento_estoque("NORMAL","NORMAL")
                   END IF
                ELSE
                   CALL sup0552_gera_movimento_estoque("NORMAL","NORMAL")
                END IF
             END IF
          ELSE
             WHENEVER ERROR CONTINUE
             UPDATE nf_sup SET (nf_sup.ies_nf_com_erro) = ("N")
              WHERE nf_sup.cod_empresa   = mr_nf_sup.cod_empresa
                AND nf_sup.num_aviso_rec = mr_nf_sup.num_aviso_rec
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("ATUALIZACAO","NF_SUP")
                LET l_houve_erro = TRUE
                 CLOSE cq_consiste #764215#
                EXIT FOREACH
             END IF

             CALL sup0552_gera_movimento_estoque("NORMAL","NORMAL")

             CALL sup0552_verifica_frete()
             IF m_ies_grava_erro_4 = "S" THEN
                IF NOT sup0552_grava_liberacao_nota(l_conta_array) THEN
                   LET l_conta_array = l_conta_array + 1
                END IF
             END IF

          END IF
       END IF

       ### OS457682 - não rateava o frete...
       IF mr_nf_sup.num_conhec <> 0 THEN
          CALL supm61_frete_sup_leitura(mr_nf_sup.cod_empresa,
                                        mr_nf_sup.cod_transpor,
                                        mr_nf_sup.num_conhec,
                                        mr_nf_sup.ser_conhec,
                                        mr_nf_sup.ssr_conhec,
                                        FALSE,
                                        TRUE)
             RETURNING p_status,l_msg

          IF p_status = TRUE THEN
             LET mr_frete_sup.cod_empresa          = supm61_frete_sup_get_cod_empresa()
             LET mr_frete_sup.cod_empresa_estab    = supm61_frete_sup_get_cod_empresa_estab()
             LET mr_frete_sup.cod_transpor         = supm61_frete_sup_get_cod_transpor()
             LET mr_frete_sup.num_conhec           = supm61_frete_sup_get_num_conhec()
             LET mr_frete_sup.ser_conhec           = supm61_frete_sup_get_ser_conhec()
             LET mr_frete_sup.ssr_conhec           = supm61_frete_sup_get_ssr_conhec()
             LET mr_frete_sup.dat_emis_conhec      = supm61_frete_sup_get_dat_emis_conhec()
             LET mr_frete_sup.dat_entrada_conhec   = supm61_frete_sup_get_dat_entrada_conhec()
             LET mr_frete_sup.cnd_pgto_frt         = supm61_frete_sup_get_cnd_pgto_frt()
             LET mr_frete_sup.cod_regist_entrada   = supm61_frete_sup_get_cod_regist_entrada()
             LET mr_frete_sup.cod_fiscal_frete     = supm61_frete_sup_get_cod_fiscal_frete()
             LET mr_frete_sup.gru_ctr_desp_frete   = supm61_frete_sup_get_gru_ctr_desp_frete()
             LET mr_frete_sup.ies_incid_icms_fre   = supm61_frete_sup_get_ies_incid_icms_fre()
             LET mr_frete_sup.val_frete            = supm61_frete_sup_get_val_frete()
             LET mr_frete_sup.val_base_c_frete_c   = supm61_frete_sup_get_val_base_c_frete_c()
             LET mr_frete_sup.val_tot_icms_frt_d   = supm61_frete_sup_get_val_tot_icms_frt_d()
             LET mr_frete_sup.val_tot_icms_frt_c   = supm61_frete_sup_get_val_tot_icms_frt_c()
             LET mr_frete_sup.val_icms_diferen     = supm61_frete_sup_get_val_icms_diferen()
             LET mr_frete_sup.pct_icms_frete_c     = supm61_frete_sup_get_pct_icms_frete_c()
             LET mr_frete_sup.pct_red_bc_frete_c   = supm61_frete_sup_get_pct_red_bc_frete_c()
             LET mr_frete_sup.pct_diferen_fret_c   = supm61_frete_sup_get_pct_diferen_fret_c()
             LET mr_frete_sup.val_adiant           = supm61_frete_sup_get_val_adiant()
             LET mr_frete_sup.ies_conhec_erro      = supm61_frete_sup_get_ies_conhec_erro()
             LET mr_frete_sup.nom_resp_aceite_er   = supm61_frete_sup_get_nom_resp_aceite_er()
             LET mr_frete_sup.ies_incl_cap         = supm61_frete_sup_get_ies_incl_cap()
             LET mr_frete_sup.ies_incl_contab      = supm61_frete_sup_get_ies_incl_contab()
             LET mr_frete_sup.cod_praca            = supm61_frete_sup_get_cod_praca()
             LET mr_frete_sup.ies_frt_contratado   = supm61_frete_sup_get_ies_frt_contratado()
             LET mr_frete_sup.tip_carga            = supm61_frete_sup_get_tip_carga()
             LET mr_frete_sup.cod_item_tab_frete   = supm61_frete_sup_get_cod_item_tab_frete()
             LET mr_frete_sup.pes_vol_frete        = supm61_frete_sup_get_pes_vol_frete()
             LET mr_frete_sup.val_frete_c          = supm61_frete_sup_get_val_frete_c()
             LET mr_frete_sup.ies_diverg_listada   = supm61_frete_sup_get_ies_diverg_listada()
             LET mr_frete_sup.ies_diverg_val_frt   = supm61_frete_sup_get_ies_diverg_val_frt()
             LET mr_frete_sup.ies_liberacao_frt    = supm61_frete_sup_get_ies_liberacao_frt()
             LET mr_frete_sup.ies_diverg_relac     = supm61_frete_sup_get_ies_diverg_relac()
             LET mr_frete_sup.ies_diverg_cnd_pgt   = supm61_frete_sup_get_ies_diverg_cnd_pgt()
             LET mr_frete_sup.cnd_pgto_tab         = supm61_frete_sup_get_cnd_pgto_tab()
             LET mr_frete_sup.tip_frete            = supm61_frete_sup_get_tip_frete()
             LET mr_frete_sup.cod_tip_despesa      = supm61_frete_sup_get_cod_tip_despesa()
             LET mr_frete_sup.ies_subst_tribut     = supm61_frete_sup_get_ies_subst_tribut()
             LET mr_frete_sup.val_base_c_frete_d   = supm61_frete_sup_get_val_base_c_frete_d()

             CALL supr12_rateio_frete(mr_frete_sup.*)
                RETURNING p_status
          END IF

          IF p_status THEN
             LET l_houve_erro = TRUE
              CLOSE cq_consiste #764215#
             EXIT FOREACH
          END IF
       END IF

       CALL sup1473_integra_nf_cap_livro_fiscal(mr_nf_sup.num_nf,
                                                mr_nf_sup.ser_nf,
                                                mr_nf_sup.ssr_nf,
                                                "NOTA","", "", "",
                                                mr_nf_sup.cod_empresa, "",
                                                mr_nf_sup.cod_fornecedor,
                                                mr_nf_sup.ies_especie_nf)

       IF NOT supr6_contabilizacao_por_documento(mr_nf_sup.cod_empresa,
                                                 mr_nf_sup.num_nf,
                                                 mr_nf_sup.ser_nf,
                                                 mr_nf_sup.ssr_nf,
                                                 mr_nf_sup.ies_especie_nf,
                                                 mr_nf_sup.cod_fornecedor,
                                                 mr_nf_sup.dat_entrada_nf,
                                                 mr_nf_sup.num_aviso_rec,TRUE) THEN
          LET m_msg = " EMP ",mr_nf_sup.cod_empresa, " NF ",mr_nf_sup.num_nf USING "<<<<<<"
          LET m_msg = m_msg CLIPPED," - ",log0030_mensagem_get_texto()
          WHENEVER ERROR CONTINUE
          SELECT w_sup0552_1.nota_fiscal
            FROM w_sup0552_1
           WHERE w_sup0552_1.nota_fiscal       = mr_nf_sup.num_nf
             AND w_sup0552_1.serie_nota_fiscal = mr_nf_sup.ser_nf
             AND w_sup0552_1.subserie_nf       = mr_nf_sup.ssr_nf
             AND w_sup0552_1.espc_nota_fiscal  = mr_nf_sup.ies_especie_nf
             AND w_sup0552_1.fornecedor        = mr_nf_sup.cod_fornecedor
             AND w_sup0552_1.sequencia         = 0
             AND w_sup0552_1.txt_consistencia  = m_msg
          WHENEVER ERROR STOP

          IF sqlca.sqlcode = NOTFOUND THEN
             WHENEVER ERROR CONTINUE
             INSERT INTO w_sup0552_1(nota_fiscal, serie_nota_fiscal, subserie_nf,
                                     espc_nota_fiscal, fornecedor, sequencia, txt_consistencia)
                              VALUES(mr_nf_sup.num_nf, mr_nf_sup.ser_nf, mr_nf_sup.ssr_nf,
                                     mr_nf_sup.ies_especie_nf, mr_nf_sup.cod_fornecedor, 0,
                                     m_msg)
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da W_SUP0552_1"
                LET m_status_arquivo = 1
             END IF
          END IF
       END IF

       #Atualizacao GAO
       #IF m_controla_gao = 'S' THEN
       #
       #   WHENEVER ERROR CONTINUE
       #   DECLARE cq_aviso_rec CURSOR FOR
       #    SELECT aviso_rec.cod_empresa,
       #           aviso_rec.num_aviso_rec,
       #           aviso_rec.num_seq,
       #           ((aviso_rec.qtd_recebida - aviso_rec.qtd_devolvid)*aviso_rec.pre_unit_nf),
       #           nf_sup.dat_entrada_nf
       #      FROM aviso_rec, nf_sup
       #     WHERE aviso_rec.cod_empresa    = p_cod_empresa
       #       AND nf_sup.cod_empresa       = p_cod_empresa
       #       AND nf_sup.num_aviso_rec     = mr_nf_sup.num_aviso_rec
       #       AND aviso_rec.num_aviso_rec  = mr_nf_sup.num_aviso_rec
       #   WHENEVER ERROR STOP
       #
       #   IF sqlca.sqlcode <> 0 THEN
       #      CALL log003_err_sql("DECLARE","CQ_AVISO_REC")
       #   END IF
       #
       #   INITIALIZE lr_atualiza_gao.* TO NULL
       #
       #   WHENEVER ERROR CONTINUE
       #   FOREACH cq_aviso_rec INTO lr_atualiza_gao.cod_empresa,    lr_atualiza_gao.num_aviso_rec,
       #                             lr_atualiza_gao.num_seq,        lr_atualiza_gao.valor_recebido,
       #                             lr_atualiza_gao.dat_entrada_nf
       #   WHENEVER ERROR STOP
       #      IF sqlca.sqlcode <> 0 THEN
       #         EXIT FOREACH
       #      END IF
       #      CALL sup0772_verifica_saldo_contas_nf_inclui_parcial(lr_atualiza_gao.cod_empresa,
       #                                                           lr_atualiza_gao.num_aviso_rec,
       #                                                           lr_atualiza_gao.num_seq,
       #                                                           lr_atualiza_gao.valor_recebido,
       #                                                           lr_atualiza_gao.dat_entrada_nf,
       #                                                           'AR',
       #                                                           'SUP0552',
       #                                                           0)
       #      RETURNING p_status, m_msg
       #      IF p_status = FALSE THEN
       #         #LET p_houve_erro = TRUE
       #         CALL sup0552_deleta_tabelas()
       #      END IF
       #
       #   END FOREACH
       #   FREE cq_aviso_rec
       #
       #END IF
       #Atualizacao GAO

    END FOREACH
     FREE cq_consiste #764215#

 END IF

 CALL sup0552_insere_relac_frete_nff(l_conta_div,
                                     l_conta_import,
                                     l_tipo) RETURNING l_conta_div,
                                                       l_conta_import

 IF m_arg = FALSE THEN
    CURRENT WINDOW IS w_sup0552
    MESSAGE ""
 END IF

#-- OS 544109 inicio --#

 IF l_tipo = "WMS" THEN
    IF m_status_arquivo THEN
       #Altera a extensão do arquivo para .err e move o arquivo para o diretorio de erro
       LET l_destino = m_dir_arquivo_erro CLIPPED, log0800_replace(m_nom_arquivo, ".pend", ".err")
       CASE g_ies_ambiente
          WHEN "U"
             LET l_executa = "mv ", m_dir_arq_pendente CLIPPED, m_nom_arquivo CLIPPED, " ", l_destino
          WHEN "W"
             LET l_executa = "move ",  m_dir_arq_pendente CLIPPED, m_nom_arquivo CLIPPED, " ", l_destino
       END CASE

       RUN l_executa RETURNING m_status

       IF m_status <> 0 THEN
           LET m_divergencia = "Erro ao mover arquivo do diretório ", m_caminho CLIPPED ," para o ", l_destino
           CALL log0030_mensagem(m_divergencia,"info")
           LET l_houve_erro = TRUE
       END IF
    ELSE
       #Altera a extensão do arquivo para .proc e move o arquivo para o diretorio processados
       LET l_destino = m_dir_arq_processado CLIPPED, log0800_replace(m_nom_arquivo, ".pend", ".proc")
       CASE g_ies_ambiente
          WHEN "U"
             LET l_executa = "mv ", m_dir_arq_pendente CLIPPED, m_nom_arquivo CLIPPED, " ", l_destino
          WHEN "W"
             LET l_executa = "move ", m_dir_arq_pendente CLIPPED, m_nom_arquivo CLIPPED, " ", l_destino
       END CASE

       RUN l_executa RETURNING m_status

       IF m_status <> 0 THEN
           LET m_divergencia = "Erro ao mover arquivo do diretório ", m_nom_arquivo CLIPPED," para o ", l_destino
           CALL log0030_mensagem(m_divergencia,"info")
           LET l_houve_erro = TRUE
       END IF
    END IF
 END IF
 #-- OS 544109 fim --#

 IF l_conta_array > 0 OR
    l_conta_import > 0 THEN

    IF m_nom_arquivo <> m_nom_arquivo_pad THEN

       LET l_houve_erro = FALSE
       IF m_tipo_de_processo = "I" THEN
          IF NOT m_transacao_ativa THEN
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("BEGIN")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("TRANSACAO","BEGIN")
             END IF
             LET m_transacao_ativa = TRUE
          END IF
       END IF
       IF sup0552_atualiza_par_sup_pad() THEN
          LET l_nom_arquivo2 = m_nom_arquivo
          WHENEVER ERROR CONTINUE
          INSERT INTO sup_ctr_nf_import (empresa            ,
                                         nom_arq            ,
                                         nom_usuario        ,
                                         dat_processamento  ,
                                         hor_processamento)
                                  VALUES(p_cod_empresa,
                                         l_nom_arquivo2,
                                         p_user,
                                         l_data_atual,
                                         l_hora_atual)
          IF sqlca.sqlcode <> 0 THEN
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SUP_CTR_NF_IMPORT"
             LET m_status_arquivo = 1
             LET l_houve_erro = TRUE
          END IF
       ELSE
          LET l_houve_erro = TRUE
       END IF
       IF l_houve_erro = FALSE THEN
          IF m_tipo_de_processo = "I" THEN
             IF m_transacao_ativa THEN
                WHENEVER ERROR CONTINUE
                CALL log085_transacao("COMMIT")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("EFETIVACAO","SUP_CTR_NF_IMPORT")
                   CALL log085_transacao("ROLLBACK") #OS596059
                END IF
                LET m_transacao_ativa = FALSE
             END IF
          END IF
       ELSE
          IF m_tipo_de_processo = "I" THEN
             IF m_transacao_ativa THEN
                WHENEVER ERROR CONTINUE
                CALL log085_transacao("ROLLBACK")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("ROLLBACK","SUP_CTR_NF_IMPORT")
                END IF
                LET m_transacao_ativa = FALSE
             END IF
          END IF
          LET l_houve_erro = TRUE
       END IF

    END IF
 END IF

 CALL sup0552_insere_consistencia(FALSE)

 END FUNCTION

#--OS 544109 inicio --#
#------------------------------------------#
 FUNCTION sup0552_efetua_rollback()
#------------------------------------------#

  IF m_transacao_ativa THEN
     WHENEVER ERROR CONTINUE
     CALL log085_transacao("ROLLBACK")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("TRANSACAO","ROLLBACK")
     END IF
     LET m_transacao_ativa = FALSE
     #WHENEVER ERROR CONTINUE
     #CALL log085_transacao("BEGIN")
     #WHENEVER ERROR STOP
     #IF sqlca.sqlcode <> 0 THEN
     #   CALL log003_err_sql("TRANSACAO","BEGIN")
     #END IF
  END IF


  LET m_houve_erro = TRUE

 END FUNCTION
#------------------------------------------------------#
 FUNCTION sup0552_SUM_val_tot_decl_nf(l_tipo,
                                      l_busca_especie,
                                      l_modo_exibicao)
#------------------------------------------------------#
 DEFINE l_tipo               CHAR(20),
        l_busca_especie      SMALLINT,
        l_tot_pct            DECIMAL(6,3),
        l_modo_exibicao      SMALLINT

    IF l_busca_especie THEN
       WHENEVER ERROR CONTINUE
       SELECT SUM(val_tot_decl_nf)
         INTO l_tot_pct
         FROM w_sup0552_4
        WHERE empresa           = mr_w_sup0552_4_it.empresa
          AND nota_fiscal       = mr_w_sup0552_4_it.nota_fiscal
          AND serie_nota_fiscal = mr_w_sup0552_4_it.serie_nota_fiscal
          AND subserie_nf       = mr_w_sup0552_4_it.subserie_nf
          AND fornecedor        = mr_w_sup0552_4_it.fornecedor
          AND espc_nota_fiscal  = mr_w_sup0552_4_it.espc_nota_fiscal
          AND sequencia         = mr_w_sup0552_4_it.sequencia
          AND tipo_registro     = "C"
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log0030_processa_err_sql("SELECT SUM","W_SUP0552_4 9 ",l_modo_exibicao)
          IF l_modo_exibicao THEN
             LET m_msg_erro = log0030_mensagem_get_texto()
          END IF
          RETURN FALSE, 0
       END IF
    ELSE
       WHENEVER ERROR CONTINUE
       SELECT SUM(val_tot_decl_nf)
         INTO l_tot_pct
         FROM w_sup0552_4
        WHERE empresa           = mr_w_sup0552_4.empresa
          AND nota_fiscal       = mr_w_sup0552_4.nota_fiscal
          AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
          AND subserie_nf       = mr_w_sup0552_4.subserie_nf
          AND fornecedor        = mr_w_sup0552_4.fornecedor
          AND tipo_registro     = 'C'
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log0030_processa_err_sql("SELECT SUM","W_SUP0552_4 10 ",l_modo_exibicao)
          IF l_modo_exibicao THEN
             LET m_msg_erro = log0030_mensagem_get_texto()
          END IF
          RETURN FALSE, 0
       END IF
    END IF

    RETURN TRUE, l_tot_pct

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_atualiza_tipo_processo()
#----------------------------------------------#

 # Esta atualização serve para a modificação de uma Nota Fiscal
 # Após excluir as notas fiscais, ele inclui novamente com as modificações necessárias

 WHENEVER ERROR CONTINUE
 UPDATE w_sup0552_6 SET w_sup0552_6.processado  = "I"
                  WHERE w_sup0552_6.empresa            = mr_w_sup0552_4.empresa
                    AND w_sup0552_6.nota_fiscal        = mr_w_sup0552_4.nota_fiscal
                    AND w_sup0552_6.serie_nota_fiscal  = mr_w_sup0552_4.serie_nota_fiscal
                    AND w_sup0552_6.subserie_nf        = mr_w_sup0552_4.subserie_nf
                    AND w_sup0552_6.espc_nota_fiscal   = mr_w_sup0552_4.espc_nota_fiscal
                    AND w_sup0552_6.fornecedor         = mr_w_sup0552_4.fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("ATUALIZA","W_SUP0552_6")
    RETURN FALSE
 END IF

 # Não verifica se m_tipo_de_processoa = "I" pois sempre vai precisar commitar para que depois da
 # alteração ele inclua sem dar registro duplicado.

 WHENEVER ERROR CONTINUE
 CALL log085_transacao("COMMIT")
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("TRANSACAO","COMMIT")
    CALL log085_transacao("ROLLBACK") #OS596059
    RETURN FALSE
 END IF
 LET m_transacao_ativa = FALSE

 WHENEVER ERROR CONTINUE
 CALL log085_transacao("BEGIN")
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("TRANSACAO","BEGIN")
 END IF
 LET m_transacao_ativa = TRUE

 RETURN TRUE

 END FUNCTION

#---------------------------------------------#
 FUNCTION sup0552_verifica_cap_ret_proalminas()
#---------------------------------------------#

  DEFINE l_apropr_desp_pagto     LIKE cap_ret_proalminas.apropr_desp_pagto

  INITIALIZE l_apropr_desp_pagto TO NULL
  WHENEVER ERROR CONTINUE
  SELECT cap_ret_proalminas.apropr_desp_pagto
    FROM cap_ret_proalminas
   WHERE cap_ret_proalminas.empresa           = mr_w_sup0552_4.empresa
     AND cap_ret_proalminas.ad_nf_origem      = mr_w_sup0552_4.nota_fiscal
     AND cap_ret_proalminas.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
     AND cap_ret_proalminas.subserie_nf       = mr_w_sup0552_4.subserie_nf
     AND cap_ret_proalminas.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
     AND cap_ret_proalminas.fornecedor        = mr_w_sup0552_4.fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR l_apropr_desp_pagto IS NULL THEN
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#-----------------------------------------#
 FUNCTION sup0552_verifica_cap_sest_senat()
#-----------------------------------------#

  DEFINE l_apropr_desp_pagto     LIKE cap_sest_senat.apropr_desp_pagto

  INITIALIZE l_apropr_desp_pagto TO NULL
  WHENEVER ERROR CONTINUE
  SELECT cap_sest_senat.apropr_desp_pagto
    FROM cap_sest_senat
   WHERE cap_sest_senat.empresa           = mr_w_sup0552_4.empresa
     AND cap_sest_senat.ad_nf_origem      = mr_w_sup0552_4.nota_fiscal
     AND cap_sest_senat.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
     AND cap_sest_senat.subserie_nf       = mr_w_sup0552_4.subserie_nf
     AND cap_sest_senat.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
     AND cap_sest_senat.fornecedor        = mr_w_sup0552_4.fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR l_apropr_desp_pagto IS NULL THEN
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#-----------------------------------------#
 FUNCTION sup0552_verifica_reten_inss_rur()
#-----------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT reten_inss_rur.cod_empresa
   FROM reten_inss_rur
  WHERE reten_inss_rur.cod_empresa    = mr_w_sup0552_4.empresa
    AND reten_inss_rur.num_ad_nf_orig = mr_w_sup0552_4.nota_fiscal
    AND reten_inss_rur.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
    AND reten_inss_rur.ssr_nf         = mr_w_sup0552_4.subserie_nf
    AND reten_inss_rur.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
    AND reten_inss_rur.cod_fornecedor = mr_w_sup0552_4.fornecedor
    AND reten_inss_rur.num_ad_pg_inss_rur IS NOT NULL
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0  THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

END FUNCTION

#-------------------------------------------#
 FUNCTION sup0552_verifica_reten_inss_auton()  #OS 237288
#-------------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT empresa
   FROM cap_ret_inss_auton
  WHERE cap_ret_inss_auton.empresa           = mr_w_sup0552_4.empresa
    AND cap_ret_inss_auton.ad_nf_origem      = mr_w_sup0552_4.nota_fiscal
    AND cap_ret_inss_auton.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
    AND cap_ret_inss_auton.subserie_nf       = mr_w_sup0552_4.subserie_nf
    AND cap_ret_inss_auton.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
    AND cap_ret_inss_auton.fornecedor        = mr_w_sup0552_4.fornecedor
    AND cap_ret_inss_auton.ad_pagto_inss     IS NOT NULL
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0  THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

END FUNCTION

#-------------------------------------#
 FUNCTION sup0552_verifica_reten_inss()
#-------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT reten_inss.cod_empresa
   FROM reten_inss
  WHERE reten_inss.cod_empresa    = mr_w_sup0552_4.empresa
    AND reten_inss.num_ad_nf_orig = mr_w_sup0552_4.nota_fiscal
    AND reten_inss.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
    AND reten_inss.ssr_nf         = mr_w_sup0552_4.subserie_nf
    AND reten_inss.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
    AND reten_inss.cod_fornecedor = mr_w_sup0552_4.fornecedor
    AND reten_inss.num_ad_pg_inss IS NOT NULL
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0  THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

END FUNCTION

#-------------------------------------#
 FUNCTION sup0552_verifica_reten_iss()
#-------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT reten_iss.cod_empresa
   FROM reten_iss
  WHERE reten_iss.cod_empresa    = mr_w_sup0552_4.empresa
    AND reten_iss.num_ad_nf_orig = mr_w_sup0552_4.nota_fiscal
    AND reten_iss.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
    AND reten_iss.ssr_nf         = mr_w_sup0552_4.subserie_nf
    AND reten_iss.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
    AND reten_iss.cod_fornecedor = mr_w_sup0552_4.fornecedor
    AND reten_iss.num_ad_pg_iss IS NOT NULL
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0  THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

END FUNCTION

#-------------------------------------#
 FUNCTION sup0552_verifica_inss_auton()
#-------------------------------------#
 WHENEVER ERROR CONTINUE
 SELECT inss_auton.cod_empresa
   FROM inss_auton
  WHERE inss_auton.cod_empresa    = mr_w_sup0552_4.empresa
    AND inss_auton.num_ad_nf_orig = mr_w_sup0552_4.nota_fiscal
    AND inss_auton.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
    AND inss_auton.ssr_nf         = mr_w_sup0552_4.subserie_nf
    AND inss_auton.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
    AND inss_auton.cod_fornecedor = mr_w_sup0552_4.fornecedor
    AND inss_auton.num_ad_pg_inss IS NOT NULL
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 OR
    SQLCA.sqlcode = -376 OR
    SQLCA.sqlcode = -284 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

END FUNCTION

#------------------------------------------------#
 FUNCTION sup0552_consiste_ae(l_num_aviso_rec_arg)
#------------------------------------------------#
 DEFINE l_num_aviso_rec_arg LIKE aviso_rec.num_aviso_rec,
        l_cancel            SMALLINT
  IF NOT LOG_job_mode() THEN
     CALL log120_procura_caminho("cto0120") RETURNING m_comando3
     LET m_comando3 = m_comando3 CLIPPED," ",l_num_aviso_rec_arg
     RUN m_comando3 RETURNING l_cancel

     CALL log120_procura_caminho("cto0180") RETURNING m_comando3
     LET m_comando3 = m_comando3 CLIPPED," ",l_num_aviso_rec_arg
     RUN m_comando3 RETURNING l_cancel
  END IF
END FUNCTION

#-----------------------------------------#
 FUNCTION sup0552_atualizar_ordens_fluxo(l_cod_empresa)
#-----------------------------------------#
  DEFINE l_ind         SMALLINT,
         l_cod_empresa LIKE empresa.cod_empresa

  #FLUXO DE CAIXA
  FOR l_ind = 1 TO 999
      IF ma_inf_ar[l_ind].num_pedido IS NULL THEN
         EXIT FOR
      END IF

      IF l_ind > 1 THEN
         #Não processar a mesma ordem mais de uma vez
         IF ma_inf_ar[l_ind].num_oc = ma_inf_ar[l_ind - 1].num_oc THEN
            CONTINUE FOR
         END IF
      END IF

      #Atualizar saldo da ordem de compra no
      #fluxo de caixa após exclusão de inf. fiscais do AR
      IF NOT fcl1150_integra_oc_fcx(l_cod_empresa,
                                    ma_inf_ar[l_ind].num_oc,"IN") THEN
         LET m_houve_erro = TRUE
         EXIT FOR
      END IF
  END FOR
 END FUNCTION

#------------------------------------------------------------#
 FUNCTION sup0552_cursor_excl_sup_retn_item_terc(l_filtra_seq)
#------------------------------------------------------------#

  DEFINE l_sql_stmt   CHAR(2000),
         l_filtra_seq SMALLINT

  LET l_sql_stmt = " SELECT sup_retn_item_terc.nf_remessa, ",
                          " sup_retn_item_terc.seq_nf_remessa, ",
                          " sup_retn_item_terc.seq_tabulacao, ",
                          " sup_retn_item_terc.qtd_devolvida ",
                     " FROM sup_retn_item_terc ",
                    " WHERE sup_retn_item_terc.empresa           = ? ",
                      " AND sup_retn_item_terc.nota_fiscal       = ? ",
                      " AND sup_retn_item_terc.serie_nota_fiscal = ? ",
                      " AND sup_retn_item_terc.subserie_nf       = ? ",
                      " AND sup_retn_item_terc.espc_nota_fiscal  = ? ",
                      " AND sup_retn_item_terc.fornecedor        = ? "

  IF l_filtra_seq THEN
     LET l_sql_stmt = l_sql_stmt CLIPPED,
                      " AND sup_retn_item_terc.seq_aviso_recebto = ? "
  END IF

  WHENEVER ERROR CONTINUE
  PREPARE var_query3 FROM l_sql_stmt
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("PREPARE","SUP_RETN_ITEM_TERC")
     RETURN TRUE
  END IF

  WHENEVER ERROR CONTINUE
  DECLARE cq_exclui_grd CURSOR FOR var_query3
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","SUP_RETN_ITEM_TERC")
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#-----------------------------------------#
 FUNCTION sup0552_desfaz_relac_desp_proc(l_conta_array)
#-----------------------------------------#
  DEFINE l_ind              SMALLINT,
         l_qtd_rateio       LIKE imp_desp_proc_item.val_rateio,
         l_saldo            LIKE imp_desp_proc_item.val_rateio,
         l_houve_erro       SMALLINT,
         l_count            SMALLINT,
         l_num_processo     SMALLINT,
         l_conta_array      SMALLINT

  DEFINE lr_desp_proc_item  RECORD LIKE imp_desp_proc_item.*

  LET l_houve_erro   = FALSE
  LET l_num_processo = sup3760_busca_numero_processo_importacao()

# variável m_existe_despprit - verifica se tabela existe
  IF m_existe_despprit THEN
     INITIALIZE l_count TO NULL
     WHENEVER ERROR CONTINUE
     SELECT COUNT(*)
       INTO l_count
       FROM imp_desp_proc_item
      WHERE empresa  = mr_aviso_rec.cod_empresa
        AND processo = l_num_processo
     WHENEVER ERROR STOP
     IF l_count IS NULL THEN
        LET l_count = 0
     END IF
     IF sqlca.sqlcode <> -206 AND l_count > 0 THEN
        FOR l_ind = 1 TO m_count_seq
           WHENEVER ERROR CONTINUE
           DECLARE cq_desf_relac CURSOR FOR
           SELECT empresa              ,
                  processo             ,
                  despesa              ,
                  sequencia_despesa    ,
                  aviso_recebto        ,
                  sequencia_recebto    ,
                  pedido               ,
                  ordem_compra         ,
                  qtd_rateio           ,
                  val_rateio           ,
                  sequencia_rateio     ,
                  qtd_rateio_imp       ,
                  val_rateio_imp
             FROM imp_desp_proc_item
            WHERE empresa           = mr_aviso_rec.cod_empresa
              AND aviso_recebto     = mr_aviso_rec.num_aviso_rec
              AND sequencia_recebto = ma_inf_ar[l_ind].num_seq
              AND sequencia_rateio  = 0
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("DECLARE","CQ_DESF_RELAC")
           END IF

           WHENEVER ERROR CONTINUE
           FOREACH cq_desf_relac INTO lr_desp_proc_item.*
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("FOREACH","CQ_DESF_RELAC")
           END IF
              LET l_num_processo = lr_desp_proc_item.processo
              WHENEVER ERROR CONTINUE
              INITIALIZE l_qtd_rateio TO NULL
              SELECT SUM(qtd_rateio)
                INTO l_qtd_rateio
                FROM imp_desp_proc_item
               WHERE empresa           = lr_desp_proc_item.empresa
                 AND processo          = lr_desp_proc_item.processo
                 AND aviso_recebto     IS NULL
                 AND sequencia_recebto IS NULL
                 AND despesa           = lr_desp_proc_item.despesa
                 AND sequencia_despesa = lr_desp_proc_item.sequencia_despesa
                 AND pedido            = lr_desp_proc_item.pedido
                 AND ordem_compra      = lr_desp_proc_item.ordem_compra
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("SELECAO","IMP_DESP_PROC_ITEM")
              END IF
              IF l_qtd_rateio IS NULL THEN
                 LET l_qtd_rateio = 0
              END IF
              LET l_saldo = lr_desp_proc_item.qtd_rateio + l_qtd_rateio
              WHENEVER ERROR CONTINUE
              DELETE FROM imp_desp_proc_item
               WHERE empresa           = lr_desp_proc_item.empresa
                 AND processo          = lr_desp_proc_item.processo
                 AND aviso_recebto     = lr_desp_proc_item.aviso_recebto
                 AND sequencia_recebto = lr_desp_proc_item.sequencia_recebto
                 AND despesa           = lr_desp_proc_item.despesa
                 AND sequencia_despesa = lr_desp_proc_item.sequencia_despesa
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("EXCLUSAO","IMP_DESP_PROC_ITEM")
                LET l_houve_erro = TRUE
                CLOSE cq_desf_relac #764215#
                EXIT FOREACH
              END IF

              WHENEVER ERROR CONTINUE
              DELETE FROM imp_desp_proc_item
               WHERE empresa           = lr_desp_proc_item.empresa
                 AND processo          = lr_desp_proc_item.processo
                 AND aviso_recebto     IS NULL
                 AND sequencia_recebto IS NULL
                 AND despesa           = lr_desp_proc_item.despesa
                 AND sequencia_despesa = lr_desp_proc_item.sequencia_despesa
                 AND pedido            = lr_desp_proc_item.pedido
                 AND ordem_compra      = lr_desp_proc_item.ordem_compra
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
                CALL log003_err_sql("EXCLUSAO","IMP_DESP_PROC_ITEM")
                LET l_houve_erro = TRUE
                CLOSE cq_desf_relac #764215#
                EXIT FOREACH
              END IF

              WHENEVER ERROR CONTINUE
              INSERT INTO imp_desp_proc_item (empresa              ,
                                              processo             ,
                                              despesa              ,
                                              sequencia_despesa    ,
                                              aviso_recebto        ,
                                              sequencia_recebto    ,
                                              pedido               ,
                                              ordem_compra         ,
                                              qtd_rateio           ,
                                              val_rateio           ,
                                              sequencia_rateio     ,
                                              qtd_rateio_imp       ,
                                              val_rateio_imp       )
                                       VALUES(lr_desp_proc_item.empresa,
                                              lr_desp_proc_item.processo,
                                              lr_desp_proc_item.despesa,
                                              lr_desp_proc_item.sequencia_despesa,
                                              NULL,
                                              NULL,
                                              lr_desp_proc_item.pedido,
                                              lr_desp_proc_item.ordem_compra,
                                              l_saldo,
                                              0,
                                              lr_desp_proc_item.sequencia_rateio,
                                              lr_desp_proc_item.qtd_rateio_imp,
                                              lr_desp_proc_item.val_rateio_imp)
              WHENEVER ERROR STOP

              IF sqlca.sqlcode <> 0 THEN
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da IMP_DESP_PROC_ITEM "
                LET m_status_arquivo = 1
                LET l_houve_erro = TRUE
                CLOSE cq_desf_relac #764215#
                EXIT FOREACH
              END IF
           END FOREACH
           FREE cq_desf_relac #764215#
           IF l_houve_erro THEN
              EXIT FOR
           END IF
        END FOR
     END IF
  END IF

  IF l_houve_erro THEN
     RETURN FALSE
  END IF
  RETURN TRUE
 END FUNCTION

#--------------------------------------------------------------------#
 FUNCTION sup0552_verifica_saldo_transf(l_cod_empresa, l_cod_item,
                                       l_qtd_movto, l_local_est_orig,
                                       l_sit_est_orig)
#--------------------------------------------------------------------#
  DEFINE l_qtd_movto         LIKE estoque_trans.qtd_movto,
         l_local_est_orig    LIKE estoque_trans.cod_local_est_orig,
         l_qtd_saldo         LIKE estoque_lote.qtd_saldo,
         l_qtd_reservada     LIKE estoque_loc_reser.qtd_reservada,
         l_sit_est_orig      LIKE estoque_trans.ies_sit_est_orig,
         l_cod_empresa       LIKE item_ret_terc.cod_empresa,
         l_cod_item          LIKE aviso_rec.cod_item

  WHENEVER ERROR CONTINUE
  SELECT qtd_saldo
    INTO l_qtd_saldo
    FROM estoque_lote
   WHERE cod_empresa     = l_cod_empresa
     AND cod_item        = l_cod_item
     AND cod_local       = l_local_est_orig
     AND (num_lote IS NULL
      OR  num_lote = " ")
     AND ies_situa_qtd = l_sit_est_orig
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("SELECAO","ESTOQUE_LOTE")
  END IF
  IF l_qtd_saldo IS NULL THEN
     LET l_qtd_saldo = 0
  END IF

  WHENEVER ERROR CONTINUE
  SELECT SUM(qtd_reservada)
    INTO l_qtd_reservada
    FROM estoque_loc_reser
   WHERE cod_empresa = l_cod_empresa
     AND cod_item    = l_cod_item
     AND cod_local   = l_local_est_orig
     AND (num_lote IS NULL
      OR  num_lote = " ")
     AND ies_situacao NOT IN ("L","C")
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("SELECAO","ESTOQUE_LOC_RESER")
  END IF

  IF l_qtd_reservada IS NULL THEN
     LET l_qtd_reservada = 0
  END IF

  IF (l_qtd_saldo - l_qtd_reservada) < l_qtd_movto THEN
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#--------------------------------------------------#
 FUNCTION sup0552_ies_item_ctr_estoq(l_cod_empresa,
                                     l_cod_item,
                                     l_conta_array)
#--------------------------------------------------#
 DEFINE l_cod_empresa                     LIKE aviso_rec.cod_empresa,
        l_cod_item                        LIKE item.cod_item,
        l_ies_ctr_estoque                 LIKE item.ies_ctr_estoque,
        l_conta_array                     SMALLINT

 INITIALIZE l_ies_ctr_estoque TO NULL
 WHENEVER ERROR CONTINUE
 SELECT ies_ctr_estoque
   INTO l_ies_ctr_estoque
   FROM item
  WHERE cod_empresa = l_cod_empresa
    AND cod_item    = l_cod_item
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na leitura da tabela ITEM."
 END IF

 IF l_ies_ctr_estoque = 'S' THEN
    RETURN TRUE
 END IF

 RETURN FALSE
 END FUNCTION

#----------------------------------------------------------------------------------------------#
 FUNCTION sup0552_existe_grade_remessa(l_cod_empresa, l_num_nf_remessa, l_num_sequencia_nf, l_cod_fornecedor)
#----------------------------------------------------------------------------------------------#
 DEFINE l_cod_empresa      LIKE empresa.cod_empresa,
        l_count            SMALLINT,
        l_num_nf_remessa   LIKE item_ret_terc.num_nf_remessa,
        l_num_sequencia_nf LIKE item_ret_terc.num_sequencia_nf,
        l_cod_fornecedor   LIKE item_ret_terc.cod_fornecedor

 WHENEVER ERROR CONTINUE
 SELECT COUNT(*)
   INTO l_count
   FROM sup_itterc_grade
  WHERE empresa     = l_cod_empresa
    AND nota_fiscal = l_num_nf_remessa
    AND seq_item_nf = l_num_sequencia_nf
    AND fornecedor  = l_cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0
 OR l_count IS NULL THEN
    LET l_count = 0
 END IF

 IF l_count = 0 THEN
    RETURN FALSE
 ELSE
    RETURN TRUE
 END IF

 END FUNCTION

 #-----------------------------------------------------------------------------------------------#
 FUNCTION sup0552_busca_local_motivo_remessa(l_cod_empresa,l_cod_fornecedor, l_num_nf_remessa, l_num_sequencia_nf)
#-----------------------------------------------------------------------------------------------#

  DEFINE l_cod_empresa            LIKE item_ret_terc.cod_empresa,
         l_num_nf_remessa         LIKE item_ret_terc.num_nf_remessa,
         l_num_sequencia_nf       LIKE item_ret_terc.num_sequencia_nf,
         l_cod_local_est_orig     LIKE estoque_trans.cod_local_est_orig,
         l_ies_sit_est_orig       LIKE estoque_trans.ies_sit_est_orig,
         l_cod_local_est_dest     LIKE estoque_trans.cod_local_est_dest,
         l_ies_sit_est_dest       LIKE estoque_trans.ies_sit_est_dest,
         l_cod_motivo_remessa     LIKE item_em_terc.cod_motivo_remessa,
         l_cod_fornecedor         LIKE item_ret_terc.cod_fornecedor

  INITIALIZE l_cod_motivo_remessa, l_cod_local_est_orig, l_ies_sit_est_orig,
             l_cod_local_est_dest, l_ies_sit_est_dest TO NULL

  WHENEVER ERROR CONTINUE
  SELECT item_em_terc.cod_motivo_remessa
    INTO l_cod_motivo_remessa
    FROM item_em_terc
   WHERE item_em_terc.cod_empresa    = l_cod_empresa
     AND item_em_terc.cod_fornecedor = l_cod_fornecedor
     AND item_em_terc.num_nf         = l_num_nf_remessa
     AND item_em_terc.num_sequencia  = l_num_sequencia_nf
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET l_cod_motivo_remessa = " "
  END IF

  WHENEVER ERROR CONTINUE
  SELECT motivo_remessa.cod_local_remessa,
         motivo_remessa.ies_situa_remessa,
         motivo_remessa.cod_local_retorno,
         motivo_remessa.ies_situa_retorno
    INTO l_cod_local_est_orig, l_ies_sit_est_orig,
         l_cod_local_est_dest, l_ies_sit_est_dest
    FROM motivo_remessa
   WHERE motivo_remessa.cod_empresa        = l_cod_empresa
     AND motivo_remessa.cod_motivo_remessa = l_cod_motivo_remessa
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET l_cod_local_est_orig = NULL
     LET l_ies_sit_est_orig   = NULL
     LET l_cod_local_est_dest = NULL
     LET l_ies_sit_est_dest   = NULL
  END IF

  RETURN l_cod_local_est_orig, l_ies_sit_est_orig,
         l_cod_local_est_dest, l_ies_sit_est_dest

 END FUNCTION

#----------------------------------------------------------------#
 FUNCTION sup0552_elimina_item_ret_terc(l_num_aviso_rec, l_num_seq,
                                        l_tipo, l_conta_array)
#----------------------------------------------------------------#
 DEFINE lr_item_em_terc       RECORD LIKE item_em_terc.*,
        lr_item_ret_terc      RECORD LIKE item_ret_terc.*,
        lr_sup_itterc_grade   RECORD LIKE sup_itterc_grade.*,
        l_saldo_terc          LIKE item_em_terc.qtd_tot_remessa,
        l_saldo_excluir       LIKE item_em_terc.qtd_tot_remessa,
        lr_aviso_rec           RECORD LIKE aviso_rec.*,
        l_num_aviso_rec       LIKE aviso_rec.num_aviso_rec,
        l_num_seq             LIKE aviso_rec.num_seq,
        l_tipo                CHAR(01),
        l_contr_local_terc    CHAR(04),
        lr_estoque_trans       RECORD LIKE estoque_trans.*,
        l_cod_motivo_remessa  LIKE item_em_terc.cod_motivo_remessa,
        l_local_estoq         LIKE item.cod_local_estoq,
        lr_estoque_trans_end   RECORD LIKE estoque_trans_end.*,
        lr_estoque_obs         RECORD LIKE estoque_obs.*,
        l_qtd_devolvida       LIKE sup_retn_item_terc.qtd_devolvida,
        l_seq_tabulacao       LIKE sup_itterc_grade.seq_tabulacao,
        l_conta_array         SMALLINT

 LET sql_stmt = "sELECT * FROM aviso_rec ",
                " WHERE aviso_rec.cod_empresa   = """, mr_w_sup0552_4.nota_fiscal, """ ",
                "   AND aviso_rec.num_aviso_rec = """, l_num_aviso_rec, """ "

 IF l_tipo = "1" THEN
    LET sql_stmt = sql_stmt CLIPPED,
      " AND aviso_rec.num_seq  = """, l_num_seq, """ "
 END IF
 WHENEVER ERROR CONTINUE
 PREPARE var_query1 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query1")
 END IF
 WHENEVER ERROR CONTINUE
 DECLARE cq_ar_terc CURSOR WITH HOLD FOR var_query1
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","cq_rt_terc")
 END IF
 INITIALIZE sql_stmt TO NULL
 LET sql_stmt = " SELECT * ",
                  " FROM item_ret_terc ",
                 " WHERE item_ret_terc.cod_empresa      = '", mr_w_sup0552_4.empresa, "' ",
                   " AND item_ret_terc.num_nf           = ",  mr_w_sup0552_4.nota_fiscal, " ",
                   " AND item_ret_terc.ser_nf           = '", mr_w_sup0552_4.serie_nota_fiscal, "' ",
                   " AND item_ret_terc.ssr_nf           = ",  mr_w_sup0552_4.subserie_nf, " ",
                   " AND item_ret_terc.cod_fornecedor   = '", mr_w_sup0552_4.fornecedor, "' ",
                   " AND item_ret_terc.num_sequencia_ar = ? "
 WHENEVER ERROR CONTINUE
 PREPARE var_query11 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query11")
 END IF
 WHENEVER ERROR CONTINUE
 DECLARE cq_rt_terc CURSOR FOR var_query11
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","cq_rt_terc")
 END IF
 INITIALIZE sql_stmt TO NULL
 LET sql_stmt = " SELECT * ",
                  " FROM sup_itterc_grade ",
                 " WHERE empresa     = '", mr_w_sup0552_4.empresa, "' ",
                   " AND nota_fiscal = ? ",
                   " AND seq_item_nf = ? ",
                 " ORDER BY seq_tabulacao DESC "
 WHENEVER ERROR CONTINUE
 PREPARE var_query8 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query8")
 END IF
 WHENEVER ERROR CONTINUE
 DECLARE cq_cons2 CURSOR FOR var_query8
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","cq_cons2")
 END IF
 INITIALIZE sql_stmt TO NULL
 LET sql_stmt = " SELECT seq_tabulacao, ",
                       " qtd_devolvida ",
                  " FROM sup_retn_item_terc ",
                 " WHERE empresa           = '", mr_w_sup0552_4.empresa, "' ",
                   " AND nota_fiscal       = ? ",
                   " AND serie_nota_fiscal = ? ",
                   " AND subserie_nf       = ? ",
                   " AND espc_nota_fiscal  = ? ",
                   " AND fornecedor        = ? ",
                   " AND seq_aviso_recebto = ? ",
                   " AND nf_remessa        = ? ",
                   " AND seq_nf_remessa    = ? "
 WHENEVER ERROR CONTINUE
 PREPARE var_query5 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query5")
 END IF
 WHENEVER ERROR CONTINUE
 DECLARE cq_atu_ret CURSOR FOR var_query5
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","cq_atu_ret")
 END IF
 INITIALIZE sql_stmt TO NULL
 LET sql_stmt = " SELECT cod_empresa         , ",
                       " cod_item            , ",
                       " cod_local           , ",
                       " num_lote            , ",
                       " endereco            , ",
                       " num_volume          , ",
                       " cod_grade_1         , ",
                       " cod_grade_2         , ",
                       " cod_grade_3         , ",
                       " cod_grade_4         , ",
                       " cod_grade_5         , ",
                       " dat_hor_producao    , ",
                       " num_ped_ven         , ",
                       " num_seq_ped_ven     , ",
                       " ies_situa_qtd       , ",
                       " qtd_saldo           , ",
                       " num_transac         , ",
                       " ies_origem_entrada  , ",
                       " dat_hor_validade    , ",
                       " num_peca            , ",
                       " num_serie           , ",
                       " comprimento         , ",
                       " largura             , ",
                       " altura              , ",
                       " diametro            , ",
                       " dat_hor_reserv_1    , ",
                       " dat_hor_reserv_2    , ",
                       " dat_hor_reserv_3    , ",
                       " qtd_reserv_1        , ",
                       " qtd_reserv_2        , ",
                       " qtd_reserv_3        , ",
                       " num_reserv_1        , ",
                       " num_reserv_2        , ",
                       " num_reserv_3        , ",
                       " tex_reservado ",
                  " FROM estoque_lote_ender ",
                 " WHERE estoque_lote_ender.cod_empresa        = ? ",
                   " AND estoque_lote_ender.cod_item           = ? ",
                   " AND estoque_lote_ender.endereco           = ? ",
                   " AND estoque_lote_ender.num_volume         = ? ",
                   " AND estoque_lote_ender.cod_grade_1        = ? ",
                   " AND estoque_lote_ender.cod_grade_2        = ? ",
                   " AND estoque_lote_ender.cod_grade_3        = ? ",
                   " AND estoque_lote_ender.cod_grade_4        = ? ",
                   " AND estoque_lote_ender.cod_grade_5        = ? ",
                   " AND estoque_lote_ender.dat_hor_producao   = ? ",
                   " AND estoque_lote_ender.dat_hor_validade   = ? ",
                   " AND estoque_lote_ender.num_peca           = ? ",
                   " AND estoque_lote_ender.num_serie          = ? ",
                   " AND estoque_lote_ender.comprimento        = ? ",
                   " AND estoque_lote_ender.largura            = ? ",
                   " AND estoque_lote_ender.altura             = ? ",
                   " AND estoque_lote_ender.diametro           = ? ",
                   " AND estoque_lote_ender.dat_hor_reserv_1   = ? ",
                   " AND estoque_lote_ender.dat_hor_reserv_2   = ? ",
                   " AND estoque_lote_ender.dat_hor_reserv_3   = ? ",
                   " AND estoque_lote_ender.qtd_reserv_1       = ? ",
                   " AND estoque_lote_ender.qtd_reserv_2       = ? ",
                   " AND estoque_lote_ender.qtd_reserv_3       = ? ",
                   " AND estoque_lote_ender.num_reserv_1       = ? ",
                   " AND estoque_lote_ender.num_reserv_2       = ? ",
                   " AND estoque_lote_ender.num_reserv_3       = ? ",
                   " AND estoque_lote_ender.tex_reservado      = ? ",
                   " AND estoque_lote_ender.qtd_saldo          > 0 "

 WHENEVER ERROR CONTINUE
 PREPARE var_query6 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query6")
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_est_lote_ender3 CURSOR FOR var_query6
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_EST_LOTE_ENDER3")
    RETURN FALSE, l_conta_array
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cq_ar_terc INTO lr_aviso_rec.*
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","cq_ar_terc")
        CLOSE cq_ar_terc #764215#
       EXIT FOREACH
    END IF
    WHENEVER ERROR CONTINUE
    FOREACH cq_rt_terc USING lr_aviso_rec.num_seq INTO lr_item_ret_terc.*
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("FOREACH","cq_ar_terc")
           CLOSE cq_rt_terc #764215#
          EXIT FOREACH
       END IF

       CALL sup0552_busca_local_motivo_remessa(lr_item_ret_terc.cod_empresa,
                                               lr_item_ret_terc.cod_fornecedor,
                                               lr_item_ret_terc.num_nf_remessa,
                                               lr_item_ret_terc.num_sequencia_nf)
                 RETURNING lr_estoque_trans.cod_local_est_orig,
                           lr_estoque_trans.ies_sit_est_orig,
                           lr_estoque_trans.cod_local_est_dest,
                           lr_estoque_trans.ies_sit_est_dest

       CALL sup0063_verifica_controles(12,
                                       lr_aviso_rec.cod_item,
                                       "INCLUSAO",
                                       "SUP3760")
         RETURNING m_controles
       IF m_controles <> " " AND
          sup0552_existe_grade_remessa(lr_item_ret_terc.cod_empresa,
                                       lr_item_ret_terc.num_nf_remessa,
                                       lr_item_ret_terc.num_sequencia_nf,
                                       lr_item_ret_terc.cod_fornecedor) THEN
          IF l_contr_local_terc IS NOT NULL AND
             l_contr_local_terc <> " " AND
             lr_estoque_trans.cod_local_est_orig IS NOT NULL AND
             lr_estoque_trans.cod_local_est_orig <> " " THEN
             IF sup0552_ies_item_ctr_estoq(mr_aviso_rec.cod_empresa,mr_aviso_rec.cod_item, l_conta_array) THEN
                #IF m_beneficiamento = FALSE THEN

                WHENEVER ERROR CONTINUE
                FOREACH cq_cons2 USING lr_item_ret_terc.num_nf_remessa,
                                       lr_aviso_rec.num_seq
                                  INTO lr_sup_itterc_grade.empresa              ,
                                       lr_sup_itterc_grade.nota_fiscal          ,
                                       lr_sup_itterc_grade.seq_item_nf          ,
                                       lr_sup_itterc_grade.fornecedor           ,
                                       lr_sup_itterc_grade.seq_tabulacao        ,
                                       lr_sup_itterc_grade.qtd_tot_remessa      ,
                                       lr_sup_itterc_grade.val_estoque          ,
                                       lr_sup_itterc_grade.val_remessa          ,
                                       lr_sup_itterc_grade.val_icms             ,
                                       lr_sup_itterc_grade.val_ipi              ,
                                       lr_sup_itterc_grade.qtd_tot_receb        ,
                                       lr_sup_itterc_grade.local                ,
                                       lr_sup_itterc_grade.lote                 ,
                                       lr_sup_itterc_grade.sit_qtd              ,
                                       lr_sup_itterc_grade.endereco             ,
                                       lr_sup_itterc_grade.num_volume           ,
                                       lr_sup_itterc_grade.grade_1              ,
                                       lr_sup_itterc_grade.grade_2              ,
                                       lr_sup_itterc_grade.grade_3              ,
                                       lr_sup_itterc_grade.grade_4              ,
                                       lr_sup_itterc_grade.grade_5              ,
                                       lr_sup_itterc_grade.dat_hor_producao     ,
                                       lr_sup_itterc_grade.dat_hor_valid        ,
                                       lr_sup_itterc_grade.peca                 ,
                                       lr_sup_itterc_grade.serie_peca           ,
                                       lr_sup_itterc_grade.comprimento          ,
                                       lr_sup_itterc_grade.largura              ,
                                       lr_sup_itterc_grade.altura               ,
                                       lr_sup_itterc_grade.diametro             ,
                                       lr_sup_itterc_grade.dat_hor_reserva_1    ,
                                       lr_sup_itterc_grade.dat_hor_reserva_2    ,
                                       lr_sup_itterc_grade.dat_hor_reserva_3    ,
                                       lr_sup_itterc_grade.qtd_reservada_1      ,
                                       lr_sup_itterc_grade.qtd_reservada_2      ,
                                       lr_sup_itterc_grade.qtd_reservada_3      ,
                                       lr_sup_itterc_grade.num_reserva_1        ,
                                       lr_sup_itterc_grade.num_reserva_2        ,
                                       lr_sup_itterc_grade.num_reserva_3        ,
                                       lr_sup_itterc_grade.texto_reservado
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("FOREACH","cq_cons2")
                       CLOSE cq_cons2 #764215#
                      EXIT FOREACH
                   END IF

                   LET l_qtd_devolvida = 0
                   WHENEVER ERROR CONTINUE
                   SELECT qtd_devolvida
                     INTO l_qtd_devolvida
                     FROM sup_retn_item_terc
                    WHERE empresa           = mr_w_sup0552_4.empresa
                      AND nota_fiscal       = mr_w_sup0552_4.nota_fiscal
                      AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
                      AND subserie_nf       = mr_w_sup0552_4.subserie_nf
                      AND espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
                      AND fornecedor        = mr_w_sup0552_4.fornecedor
                      AND seq_aviso_recebto = mr_aviso_rec.num_seq
                      AND seq_tabulacao     = lr_sup_itterc_grade.seq_tabulacao
                      AND nf_remessa        = lr_sup_itterc_grade.nota_fiscal
                      AND seq_nf_remessa    = lr_sup_itterc_grade.seq_item_nf
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      IF sqlca.sqlcode <> 100 THEN
                         CALL log003_err_sql("LEITURA","sup_retn_item_terc")
                      END IF
                      LET l_qtd_devolvida = 0
                   END IF
                   INITIALIZE lr_estoque_obs TO NULL
                   LET lr_estoque_trans.cod_empresa        = mr_aviso_rec.cod_empresa
                   LET lr_estoque_trans.num_transac        = 0
                   LET lr_estoque_trans.cod_item           = mr_aviso_rec.cod_item
                   LET lr_estoque_trans.dat_movto          = mr_w_sup0552_4.dat_ent_nf
                   LET lr_estoque_trans.dat_ref_moeda_fort = lr_item_ret_terc.dat_entrada_nf
                   LET lr_estoque_trans.cod_operacao       = l_contr_local_terc
                   LET lr_estoque_trans.num_docum          = mr_aviso_rec.num_aviso_rec
                   LET lr_estoque_trans.num_seq            = lr_item_ret_terc.num_sequencia_ar
                   LET lr_estoque_trans.ies_tip_movto      = "R"
                   LET lr_estoque_trans.qtd_movto          = l_qtd_devolvida
                   LET lr_estoque_trans.cus_unit_movto_p   = 0
                   LET lr_estoque_trans.cus_tot_movto_p    = 0
                   LET lr_estoque_trans.cus_unit_movto_f   = 0
                   LET lr_estoque_trans.cus_tot_movto_f    = 0
                   LET lr_estoque_trans.num_conta          = NULL
                   LET lr_estoque_trans.num_secao_requis   = NULL

                   INITIALIZE l_local_estoq TO NULL
                   WHENEVER ERROR CONTINUE
                   SELECT cod_local_estoq
                     INTO l_local_estoq
                     FROM item
                    WHERE cod_empresa = lr_item_ret_terc.cod_empresa
                      AND cod_item    = mr_aviso_rec.cod_item
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("SELECAO","ITEM")
                   END IF

                   IF lr_estoque_trans.cod_local_est_orig IS NULL OR
                      lr_estoque_trans.cod_local_est_orig = " " THEN
                      LET lr_estoque_trans.cod_local_est_orig = l_local_estoq
                      LET lr_estoque_trans.ies_sit_est_orig   = "L"
                   ELSE
                      IF lr_estoque_trans.ies_sit_est_orig IS NULL OR
                         lr_estoque_trans.ies_sit_est_orig = " " THEN
                         LET lr_estoque_trans.ies_sit_est_orig   = "L"
                      END IF
                   END IF

                   IF lr_estoque_trans.cod_local_est_dest IS NULL OR
                      lr_estoque_trans.cod_local_est_dest = " " THEN
                      IF lr_sup_itterc_grade.local IS NOT NULL AND
                         lr_sup_itterc_grade.local <> " " THEN
                         LET lr_estoque_trans.cod_local_est_dest   = lr_sup_itterc_grade.local
                         LET lr_estoque_trans.ies_sit_est_dest     = lr_sup_itterc_grade.sit_qtd
                      ELSE
                         LET lr_estoque_trans.cod_local_est_dest = l_local_estoq
                         LET lr_estoque_trans.ies_sit_est_dest   = "L"
                      END IF
                   ELSE
                      IF lr_estoque_trans.ies_sit_est_dest IS NULL OR
                         lr_estoque_trans.ies_sit_est_dest = " " THEN
                         LET lr_estoque_trans.ies_sit_est_dest   = "L"
                      END IF
                   END IF
                   LET lr_estoque_trans.num_lote_orig      = NULL
                   LET lr_estoque_trans.num_lote_dest      = NULL
                   LET lr_estoque_trans.cod_turno          = NULL
                   LET lr_estoque_trans.nom_usuario        = p_user
                   LET lr_estoque_trans.dat_proces         = TODAY
                   LET lr_estoque_trans.hor_operac         = TIME
                   LET lr_estoque_trans.num_prog           = "SUP2290"


                   INITIALIZE lr_estoque_trans_end.* TO NULL

                   LET lr_estoque_trans_end.cod_empresa          = lr_estoque_trans.cod_empresa
                   LET lr_estoque_trans_end.num_transac          = 0
                   LET lr_estoque_trans_end.endereco             = " "
                   LET lr_estoque_trans_end.num_volume           = 0
                   LET lr_estoque_trans_end.qtd_movto            = lr_estoque_trans.qtd_movto
                   LET lr_estoque_trans_end.cod_grade_1          = " "
                   LET lr_estoque_trans_end.cod_grade_2          = " "
                   LET lr_estoque_trans_end.cod_grade_3          = " "
                   LET lr_estoque_trans_end.cod_grade_4          = " "
                   LET lr_estoque_trans_end.cod_grade_5          = " "
                   LET lr_estoque_trans_end.dat_hor_prod_ini     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.dat_hor_prod_fim     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.vlr_temperatura      = 0
                   LET lr_estoque_trans_end.endereco_origem      = " "
                   LET lr_estoque_trans_end.num_ped_ven          = 0
                   LET lr_estoque_trans_end.num_seq_ped_ven      = 0
                   LET lr_estoque_trans_end.dat_hor_producao     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.dat_hor_validade     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.num_peca             = " "
                   LET lr_estoque_trans_end.num_serie            = " "
                   LET lr_estoque_trans_end.comprimento          = 0
                   LET lr_estoque_trans_end.largura              = 0
                   LET lr_estoque_trans_end.altura               = 0
                   LET lr_estoque_trans_end.diametro             = 0
                   LET lr_estoque_trans_end.dat_hor_reserv_1     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.dat_hor_reserv_2     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.dat_hor_reserv_3     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.qtd_reserv_1         = 0
                   LET lr_estoque_trans_end.qtd_reserv_2         = 0
                   LET lr_estoque_trans_end.qtd_reserv_3         = 0
                   LET lr_estoque_trans_end.num_reserv_1         = 0
                   LET lr_estoque_trans_end.num_reserv_2         = 0
                   LET lr_estoque_trans_end.num_reserv_3         = 0
                   LET lr_estoque_trans_end.tex_reservado        = " "

                   LET lr_estoque_trans_end.cod_grade_1      = lr_sup_itterc_grade.grade_1
                   LET lr_estoque_trans_end.cod_grade_2      = lr_sup_itterc_grade.grade_2
                   LET lr_estoque_trans_end.cod_grade_3      = lr_sup_itterc_grade.grade_3
                   LET lr_estoque_trans_end.cod_grade_4      = lr_sup_itterc_grade.grade_4
                   LET lr_estoque_trans_end.cod_grade_5      = lr_sup_itterc_grade.grade_5
                   LET lr_estoque_trans_end.endereco         = lr_sup_itterc_grade.endereco
                   LET lr_estoque_trans_end.endereco_origem  = lr_sup_itterc_grade.endereco
                   LET lr_estoque_trans_end.num_volume       = lr_sup_itterc_grade.num_volume
                   LET lr_estoque_trans_end.dat_hor_producao = lr_sup_itterc_grade.dat_hor_producao
                   LET lr_estoque_trans_end.dat_hor_validade = lr_sup_itterc_grade.dat_hor_valid
                   LET lr_estoque_trans_end.comprimento      = lr_sup_itterc_grade.comprimento
                   LET lr_estoque_trans_end.largura          = lr_sup_itterc_grade.largura
                   LET lr_estoque_trans_end.altura           = lr_sup_itterc_grade.altura
                   LET lr_estoque_trans_end.diametro         = lr_sup_itterc_grade.diametro
                   LET lr_estoque_trans_end.num_peca         = lr_sup_itterc_grade.peca
                   LET lr_estoque_trans_end.num_serie        = lr_sup_itterc_grade.serie_peca

                   LET lr_estoque_trans.num_lote_dest        = lr_sup_itterc_grade.lote
                   LET lr_estoque_trans.num_lote_orig        = lr_sup_itterc_grade.lote

                   IF sup3760_verifica_saldo_transf_grade(lr_estoque_trans.cod_item,
                                                          lr_estoque_trans.qtd_movto,
                                                          lr_estoque_trans.cod_local_est_dest,
                                                          lr_estoque_trans.ies_sit_est_dest,
                                                          lr_estoque_trans.num_lote_dest) THEN
                      IF m_eh_background = FALSE THEN
                         ERROR "Quantidade maior do que a encontrada no estoque."
                      END IF
                       CLOSE cq_cons2   #764215#
                       FREE  cq_cons2   #764215#

                       CLOSE cq_rt_terc #764215#
                       FREE  cq_rt_terc #764215#

                       CLOSE cq_ar_terc #764215#
                       FREE  cq_ar_terc #764215#

                      RETURN FALSE, l_conta_array
                   END IF

                   #-- Os 456623 inicio --#
                   IF p_par_sup_compl.ies_baixa_benef = "2" AND
                      lr_item_ret_terc.ies_especie_nf = "NFD" THEN
                      IF sup3760_zera_num_pedido(lr_estoque_trans.*,lr_estoque_trans_end.*) = FALSE THEN
                         RETURN FALSE, l_conta_array
                      ELSE
                         LET lr_estoque_trans_end.num_ped_ven     = 0
                         LET lr_estoque_trans_end.num_seq_ped_ven = 0
                      END IF
                   END IF
                   #-- Os 456623 fim --#

                   IF sup097_movto_estoque(lr_estoque_trans.*,
                                           lr_estoque_obs.*,
                                           lr_estoque_trans_end.*,
                                           0) = FALSE THEN
                      LET l_conta_array = l_conta_array + 1
                      CALL sup0552_carrega_chave_consiste(l_conta_array)
                      LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Problema na movimentacao de estoque, transacao cancelada."
                       CLOSE cq_cons2   #764215#
                       FREE  cq_cons2   #764215#

                       CLOSE cq_rt_terc #764215#
                       FREE  cq_rt_terc #764215#

                       CLOSE cq_ar_terc #764215#
                       FREE  cq_ar_terc #764215#

                      RETURN FALSE, l_conta_array
                   END IF
                   WHENEVER ERROR CONTINUE
                END FOREACH
                WHENEVER ERROR STOP
                 FREE cq_cons2
                WHENEVER ERROR CONTINUE
                FOREACH cq_atu_ret USING lr_item_ret_terc.num_nf,
                                         lr_item_ret_terc.ser_nf,
                                         lr_item_ret_terc.ssr_nf,
                                         lr_item_ret_terc.ies_especie_nf,
                                         lr_item_ret_terc.cod_fornecedor,
                                         lr_item_ret_terc.num_sequencia_ar,
                                         lr_item_ret_terc.num_nf_remessa,
                                         lr_item_ret_terc.num_sequencia_nf
                                    INTO l_seq_tabulacao,
                                         l_qtd_devolvida
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("FOREACH","cq_atu_ret")
                       CLOSE cq_atu_ret #764215#
                      EXIT FOREACH
                   END IF
                   WHENEVER ERROR CONTINUE
                   UPDATE sup_itterc_grade
                      SET qtd_tot_receb = qtd_tot_receb - l_qtd_devolvida
                    WHERE empresa       = lr_item_ret_terc.cod_empresa
                      AND nota_fiscal   = lr_item_ret_terc.num_nf_remessa
                      AND fornecedor    = lr_item_ret_terc.cod_fornecedor
                      AND seq_item_nf   = lr_item_ret_terc.num_sequencia_nf
                      AND seq_tabulacao = l_seq_tabulacao
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("ALTERAÇÃO","sup_itterc_grade")
                       CLOSE cq_atu_ret #764215#
                       FREE  cq_atu_ret #764215#

                       CLOSE cq_rt_terc #764215#
                       FREE  cq_rt_terc #764215#

                       CLOSE cq_ar_terc #764215#
                       FREE  cq_ar_terc #764215#
                      RETURN FALSE, l_conta_array
                   END IF
                   WHENEVER ERROR CONTINUE
                END FOREACH
                WHENEVER ERROR STOP
                CLOSE cq_atu_ret
                WHENEVER ERROR CONTINUE
                DELETE FROM sup_retn_item_terc
                 WHERE empresa           = lr_item_ret_terc.cod_empresa
                   AND nota_fiscal       = lr_item_ret_terc.num_nf
                   AND serie_nota_fiscal = lr_item_ret_terc.ser_nf
                   AND subserie_nf       = lr_item_ret_terc.ssr_nf
                   AND espc_nota_fiscal  = lr_item_ret_terc.ies_especie_nf
                   AND fornecedor        = lr_item_ret_terc.cod_fornecedor
                   AND seq_aviso_recebto = lr_item_ret_terc.num_sequencia_ar
                   AND nf_remessa        = lr_item_ret_terc.num_nf_remessa
                   AND seq_nf_remessa    = lr_item_ret_terc.num_sequencia_nf
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("EXCLUSÃO","sup_retn_item_terc")
                    CLOSE cq_rt_terc #764215#
                    FREE  cq_rt_terc #764215#

                    CLOSE cq_ar_terc #764215#
                    FREE  cq_ar_terc #764215#
                   RETURN FALSE, l_conta_array
                END IF
                IF p_ies_contab_aen = "4" THEN
                   WHENEVER ERROR CONTINUE
                   UPDATE item_em_terc_area
                      SET item_em_terc_area.qtd_tot_recebida =
                          item_em_terc_area.qtd_tot_recebida -
                          lr_item_ret_terc.qtd_devolvida
                    WHERE item_em_terc_area.cod_empresa    = lr_item_ret_terc.cod_empresa
                      AND item_em_terc_area.num_nf         = lr_item_ret_terc.num_nf_remessa
                      AND item_em_terc_area.num_sequencia  = lr_item_ret_terc.num_sequencia_nf
                      AND item_em_terc_area.cod_fornecedor = lr_item_ret_terc.cod_fornecedor
                    WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("ALTERACAO","item_em_terc_area")
                       CLOSE cq_rt_terc #764215#
                       FREE  cq_rt_terc #764215#

                       CLOSE cq_ar_terc #764215#
                       FREE  cq_ar_terc #764215#
                      RETURN FALSE, l_conta_array
                   END IF
                END IF
             ELSE
                LET l_conta_array = l_conta_array + 1
             END IF
          END IF
       ELSE
          IF l_contr_local_terc IS NOT NULL OR l_contr_local_terc <> " " THEN
             IF sup0552_ies_item_ctr_estoq(p_cod_empresa, mr_aviso_rec.cod_item, l_conta_array) THEN
                INITIALIZE lr_estoque_trans.* TO NULL
                INITIALIZE lr_estoque_obs.* TO NULL
                LET lr_estoque_trans.cod_empresa        = lr_item_ret_terc.cod_empresa
                LET lr_estoque_trans.num_transac        = 0
                LET lr_estoque_trans.cod_item           = lr_aviso_rec.cod_item
                LET lr_estoque_trans.dat_movto          = lr_item_ret_terc.dat_entrada_nf
                LET lr_estoque_trans.dat_ref_moeda_fort = lr_item_ret_terc.dat_entrada_nf
                LET lr_estoque_trans.cod_operacao       = l_contr_local_terc
                LET lr_estoque_trans.num_docum          = lr_aviso_rec.num_aviso_rec
                LET lr_estoque_trans.num_seq            = lr_item_ret_terc.num_sequencia_ar
                LET lr_estoque_trans.ies_tip_movto      = "R"
                LET lr_estoque_trans.qtd_movto          = lr_item_ret_terc.qtd_devolvida
                LET lr_estoque_trans.cus_unit_movto_p   = 0
                LET lr_estoque_trans.cus_tot_movto_p    = 0
                LET lr_estoque_trans.cus_unit_movto_f   = 0
                LET lr_estoque_trans.cus_tot_movto_f    = 0
                LET lr_estoque_trans.num_conta          = NULL
                LET lr_estoque_trans.num_secao_requis   = NULL

                INITIALIZE l_cod_motivo_remessa TO NULL
                WHENEVER ERROR CONTINUE
                SELECT cod_motivo_remessa
                  INTO l_cod_motivo_remessa
                  FROM item_em_terc
                 WHERE cod_empresa   = lr_item_ret_terc.cod_empresa
                   AND num_nf        = lr_item_ret_terc.num_nf_remessa
                   AND num_sequencia = lr_item_ret_terc.num_sequencia_nf
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("SELECAO","ITEM_EM_TERC")
                END IF

                INITIALIZE lr_estoque_trans.cod_local_est_orig TO NULL
                INITIALIZE lr_estoque_trans.ies_sit_est_orig TO NULL
                INITIALIZE lr_estoque_trans.cod_local_est_dest TO NULL
                INITIALIZE lr_estoque_trans.ies_sit_est_dest TO NULL
                WHENEVER ERROR CONTINUE
                SELECT cod_local_remessa, ies_situa_remessa,
                       cod_local_retorno, ies_situa_retorno
                  INTO lr_estoque_trans.cod_local_est_orig,
                       lr_estoque_trans.ies_sit_est_orig,
                       lr_estoque_trans.cod_local_est_dest,
                       lr_estoque_trans.ies_sit_est_dest
                  FROM motivo_remessa
                 WHERE cod_empresa        = lr_item_ret_terc.cod_empresa
                   AND cod_motivo_remessa = l_cod_motivo_remessa
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("SELECAO","MOTIVO_REMESSA")
                END IF

                INITIALIZE l_local_estoq TO NULL
                WHENEVER ERROR CONTINUE
                SELECT cod_local_estoq
                  INTO l_local_estoq
                  FROM item
                 WHERE cod_empresa = lr_item_ret_terc.cod_empresa
                   AND cod_item    = lr_aviso_rec.cod_item
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 OR l_local_estoq IS NULL THEN
                   LET l_local_estoq = " "
                END IF

                IF lr_estoque_trans.cod_local_est_orig IS NULL OR
                   lr_estoque_trans.cod_local_est_orig = " " THEN
                   LET lr_estoque_trans.cod_local_est_orig = l_local_estoq
                   LET lr_estoque_trans.ies_sit_est_orig   = "L"
                ELSE
                   IF lr_estoque_trans.ies_sit_est_orig IS NULL OR
                      lr_estoque_trans.ies_sit_est_orig = " " THEN
                      LET lr_estoque_trans.ies_sit_est_orig   = "L"
                   END IF
                END IF

                IF lr_estoque_trans.cod_local_est_dest IS NULL OR
                   lr_estoque_trans.cod_local_est_dest = " " THEN
                   LET lr_estoque_trans.cod_local_est_dest = l_local_estoq
                   LET lr_estoque_trans.ies_sit_est_dest = "L"
                ELSE
                   IF lr_estoque_trans.ies_sit_est_dest IS NULL OR
                      lr_estoque_trans.ies_sit_est_dest = " " THEN
                      LET lr_estoque_trans.ies_sit_est_dest = "L"
                   END IF
                END IF

                #LET lr_estoque_trans.cod_local_est_dest = l_local_estoq
                LET lr_estoque_trans.num_lote_orig      = NULL
                LET lr_estoque_trans.num_lote_dest      = NULL
                #LET lr_estoque_trans.ies_sit_est_dest   = "L"
                LET lr_estoque_trans.cod_turno          = NULL
                LET lr_estoque_trans.nom_usuario        = p_user
                LET lr_estoque_trans.dat_proces         = TODAY
                LET lr_estoque_trans.hor_operac         = TIME
                LET lr_estoque_trans.num_prog           = "SUP2290"

                IF sup0552_verifica_saldo_transf(lr_item_ret_terc.cod_empresa,
                                                lr_aviso_rec.cod_item,
                                                lr_estoque_trans.qtd_movto,
                                                lr_estoque_trans.cod_local_est_dest,
                                                lr_estoque_trans.ies_sit_est_dest) THEN
                   IF m_eh_background = FALSE THEN
                      ERROR "Quantidade maior do que a encontrada no estoque."
                   END IF
                    CLOSE cq_rt_terc #764215#
                    FREE  cq_rt_terc #764215#

                    CLOSE cq_ar_terc #764215#
                    FREE  cq_ar_terc #764215#
                   RETURN FALSE, l_conta_array
                END IF

                INITIALIZE lr_estoque_trans_end.* TO NULL

                LET lr_estoque_trans_end.cod_empresa          = lr_estoque_trans.cod_empresa
                LET lr_estoque_trans_end.num_transac          = 0
                LET lr_estoque_trans_end.endereco             = " "
                LET lr_estoque_trans_end.num_volume           = 0
                LET lr_estoque_trans_end.qtd_movto            = lr_estoque_trans.qtd_movto
                LET lr_estoque_trans_end.cod_grade_1          = " "
                LET lr_estoque_trans_end.cod_grade_2          = " "
                LET lr_estoque_trans_end.cod_grade_3          = " "
                LET lr_estoque_trans_end.cod_grade_4          = " "
                LET lr_estoque_trans_end.cod_grade_5          = " "
                LET lr_estoque_trans_end.dat_hor_prod_ini     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.dat_hor_prod_fim     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.vlr_temperatura      = 0
                LET lr_estoque_trans_end.endereco_origem      = " "
                LET lr_estoque_trans_end.num_ped_ven          = 0
                LET lr_estoque_trans_end.num_seq_ped_ven      = 0
                LET lr_estoque_trans_end.dat_hor_producao     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.dat_hor_validade     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.num_peca             = " "
                LET lr_estoque_trans_end.num_serie            = " "
                LET lr_estoque_trans_end.comprimento          = 0
                LET lr_estoque_trans_end.largura              = 0
                LET lr_estoque_trans_end.altura               = 0
                LET lr_estoque_trans_end.diametro             = 0
                LET lr_estoque_trans_end.dat_hor_reserv_1     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.dat_hor_reserv_2     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.dat_hor_reserv_3     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.qtd_reserv_1         = 0
                LET lr_estoque_trans_end.qtd_reserv_2         = 0
                LET lr_estoque_trans_end.qtd_reserv_3         = 0
                LET lr_estoque_trans_end.num_reserv_1         = 0
                LET lr_estoque_trans_end.num_reserv_2         = 0
                LET lr_estoque_trans_end.num_reserv_3         = 0
                LET lr_estoque_trans_end.tex_reservado        = " "

                IF sup097_movto_estoque(lr_estoque_trans.*,
                                        lr_estoque_obs.*,
                                        lr_estoque_trans_end.*,
                                        0) = FALSE THEN
                   LET l_conta_array = l_conta_array + 1
                   CALL sup0552_carrega_chave_consiste(l_conta_array)
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Problema na movimentacao de estoque, transacao cancelada."
                    CLOSE cq_rt_terc #764215#
                    FREE  cq_rt_terc #764215#

                    CLOSE cq_ar_terc #764215#
                    FREE  cq_ar_terc #764215#
                   RETURN FALSE, l_conta_array
                END IF
             ELSE
                LET l_conta_array = l_conta_array + 1
             END IF
          ELSE
             IF sup0552_verifica_saldo_transf(lr_item_ret_terc.cod_empresa,
                                                lr_aviso_rec.cod_item,
                                                lr_estoque_trans.qtd_movto,
                                                lr_estoque_trans.cod_local_est_dest,
                                                lr_estoque_trans.ies_sit_est_dest) THEN
                   LET l_conta_array = l_conta_array + 1
                   CALL sup0552_carrega_chave_consiste(l_conta_array)
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Quantidade maior do que a encontrada no estoque."
                    CLOSE cq_rt_terc #764215#
                    FREE  cq_rt_terc #764215#

                    CLOSE cq_ar_terc #764215#
                    FREE  cq_ar_terc #764215#
                   RETURN FALSE, l_conta_array
             END IF
          END IF
       END IF
       WHENEVER ERROR CONTINUE
       DELETE FROM item_ret_terc
        WHERE item_ret_terc.cod_empresa = lr_item_ret_terc.cod_empresa
          AND item_ret_terc.num_transac = lr_item_ret_terc.num_transac
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("EXCLUSAO","ITEM_RET_TERC")
           CLOSE cq_rt_terc #764215#
           FREE  cq_rt_terc #764215#

           CLOSE cq_ar_terc #764215#
           FREE  cq_ar_terc #764215#
          RETURN FALSE, l_conta_array
       END IF
       WHENEVER ERROR CONTINUE
       UPDATE item_em_terc
          SET item_em_terc.qtd_tot_recebida = item_em_terc.qtd_tot_recebida -
                                              lr_item_ret_terc.qtd_devolvida
        WHERE item_em_terc.cod_empresa   = lr_item_ret_terc.cod_empresa
          AND item_em_terc.num_nf        = lr_item_ret_terc.num_nf_remessa
          AND item_em_terc.num_sequencia = lr_item_ret_terc.num_sequencia_nf
          AND item_em_terc.cod_fornecedor = lr_item_ret_terc.cod_fornecedor
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("MODIFICACAO","ITEM_EM_TERC")
           CLOSE cq_rt_terc #764215#
           FREE  cq_rt_terc #764215#

           CLOSE cq_ar_terc #764215#
           FREE  cq_ar_terc #764215#
          RETURN FALSE, l_conta_array
       END IF
       WHENEVER ERROR CONTINUE
    END FOREACH
    WHENEVER ERROR STOP
    CLOSE cq_rt_terc
    WHENEVER ERROR CONTINUE
 END FOREACH
 WHENEVER ERROR STOP
 CLOSE cq_ar_terc
 FREE cq_cons2
 FREE cq_atu_ret
 FREE cq_rt_terc
 FREE cq_ar_terc
 RETURN TRUE, l_conta_array

 END FUNCTION

#--------------------------------------------------#
 FUNCTION sup0552_exclui_nf_consig(l_tipo, l_num_seq)
#--------------------------------------------------#

  DEFINE  l_num_transac   INTEGER ,
          l_qtd_devolvida LIKE item_ret_terc.qtd_devolvida,
          l_qtd_dev_cons  LIKE nf_consig_dev.qtd_devolvida,
          l_tipo          CHAR(20),
          l_qtd_saldo     LIKE item_ret_terc.qtd_devolvida,
          l_num_seq       LIKE aviso_rec.num_seq,
          lr_aviso_rec     RECORD LIKE aviso_rec.*,
          l_serie_nff     CHAR(02),
          l_num_pedido    LIKE fat_item_grd_consg.pedido,
          l_ord_montag    LIKE fat_item_grd_consg.ord_montag,
          l_seq_tabulacao LIKE fat_item_grd_consg.seq_tabulacao,
          l_qtd_tot_receb LIKE sup_itterc_grade.qtd_tot_receb,
          l_cod_cliente   LIKE nf_consig.cod_cliente,
          l_achou         SMALLINT,
          l_num_nf_dev    LIKE nf_consig_item.num_nff,
          l_num_seq_dev   LIKE nf_consig_item.num_sequencia

  INITIALIZE lr_aviso_rec.*, l_num_pedido, l_ord_montag,
             l_seq_tabulacao TO NULL

  LET l_num_nf_dev    = 0
  LET l_num_seq_dev   = 0
  LET l_qtd_dev_cons  = 0
  LET l_num_transac   = 0
  LET l_qtd_devolvida = 0
  LET l_qtd_tot_receb = 0

  WHENEVER ERROR CONTINUE
  DECLARE cq_ar_nf CURSOR WITH HOLD FOR
  SELECT aviso_rec.cod_empresa          ,
         aviso_rec.cod_empresa_estab    ,
         aviso_rec.num_aviso_rec        ,
         aviso_rec.num_seq              ,
         aviso_rec.dat_inclusao_seq     ,
         aviso_rec.ies_situa_ar         ,
         aviso_rec.ies_incl_almox       ,
         aviso_rec.ies_receb_fiscal     ,
         aviso_rec.ies_liberacao_ar     ,
         aviso_rec.ies_liberacao_cont   ,
         aviso_rec.ies_liberacao_insp   ,
         aviso_rec.ies_diverg_listada   ,
         aviso_rec.ies_item_estoq       ,
         aviso_rec.ies_controle_lote    ,
         aviso_rec.cod_comprador        ,
         aviso_rec.num_pedido           ,
         aviso_rec.num_oc               ,
         aviso_rec.cod_item             ,
         aviso_rec.den_item             ,
         aviso_rec.cod_cla_fisc         ,
         aviso_rec.cod_unid_med_nf      ,
         aviso_rec.pre_unit_nf          ,
         aviso_rec.val_despesa_aces_i   ,
         aviso_rec.ies_da_bc_ipi        ,
         aviso_rec.cod_incid_ipi        ,
         aviso_rec.ies_tip_incid_ipi    ,
         aviso_rec.pct_direito_cred     ,
         aviso_rec.pct_ipi_declarad     ,
         aviso_rec.ies_bitributacao     ,
         aviso_rec.val_base_c_ipi_it    ,
         aviso_rec.val_base_c_ipi_da    ,
         aviso_rec.val_ipi_decl_item    ,
         aviso_rec.val_ipi_calc_item    ,
         aviso_rec.val_ipi_desp_aces    ,
         aviso_rec.val_desc_item        ,
         aviso_rec.val_liquido_item     ,
         aviso_rec.val_contabil_item    ,
         aviso_rec.qtd_declarad_nf      ,
         aviso_rec.qtd_recebida         ,
         aviso_rec.qtd_devolvid         ,
         aviso_rec.dat_devoluc          ,
         aviso_rec.val_devoluc          ,
         aviso_rec.num_nf_dev           ,
         aviso_rec.qtd_rejeit           ,
         aviso_rec.qtd_liber            ,
         aviso_rec.qtd_liber_excep      ,
         aviso_rec.cus_tot_item         ,
         aviso_rec.cod_fiscal_item      ,
         aviso_rec.gru_ctr_desp_item    ,
         aviso_rec.cod_local_estoq      ,
         aviso_rec.num_lote             ,
         aviso_rec.cod_operac_estoq     ,
         aviso_rec.val_base_c_item_d    ,
         aviso_rec.val_base_c_item_c    ,
         aviso_rec.pct_icms_item_d      ,
         aviso_rec.pct_icms_item_c      ,
         aviso_rec.pct_red_bc_item_d    ,
         aviso_rec.pct_red_bc_item_c    ,
         aviso_rec.pct_diferen_item_d   ,
         aviso_rec.pct_diferen_item_c   ,
         aviso_rec.val_icms_item_d      ,
         aviso_rec.val_icms_item_c      ,
         aviso_rec.val_base_c_icms_da   ,
         aviso_rec.val_icms_diferen_i   ,
         aviso_rec.val_icms_desp_aces   ,
         aviso_rec.ies_incid_icms_ite   ,
         aviso_rec.val_frete            ,
         aviso_rec.val_icms_frete_d     ,
         aviso_rec.val_icms_frete_c     ,
         aviso_rec.val_base_c_frete_d   ,
         aviso_rec.val_base_c_frete_c   ,
         aviso_rec.val_icms_diferen_f   ,
         aviso_rec.pct_icms_frete_d     ,
         aviso_rec.pct_icms_frete_c     ,
         aviso_rec.pct_red_bc_frete_d   ,
         aviso_rec.pct_red_bc_frete_c   ,
         aviso_rec.pct_diferen_fret_d   ,
         aviso_rec.pct_diferen_fret_c   ,
         aviso_rec.val_acrescimos       ,
         aviso_rec.val_enc_financ       ,
         aviso_rec.ies_contabil         ,
         aviso_rec.ies_total_nf         ,
         aviso_rec.val_compl_estoque    ,
         aviso_rec.dat_ref_val_compl    ,
         aviso_rec.pct_enc_financ       ,
         aviso_rec.cod_cla_fisc_nf      ,
         aviso_rec.cod_tip_despesa      ,
         aviso_rec.observacao
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa   = mr_aviso_rec.cod_empresa
     AND aviso_rec.num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","AVISO_REC1")
     LET m_houve_erro = TRUE
     RETURN
  END IF

  WHENEVER ERROR CONTINUE
  FOREACH cq_ar_nf INTO lr_aviso_rec.*

     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("FOREACH","AVISO_REC1")
        LET m_houve_erro = TRUE
        EXIT FOREACH
     END IF

     IF l_tipo <> "NOTA" THEN
        IF lr_aviso_rec.num_seq <> l_num_seq THEN
           CONTINUE FOREACH
        END IF
     END IF

     WHENEVER ERROR CONTINUE
     DECLARE cq_nf_consigd CURSOR WITH HOLD FOR
       SELECT num_nf, num_item, qtd_devolvida, serie_nota_fiscal
         FROM nf_consig_dev
        WHERE cod_empresa     = mr_w_sup0552_4.empresa
          AND num_nf_cliente  = mr_w_sup0552_4.nota_fiscal
          AND cod_item        = lr_aviso_rec.cod_item
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DECLARE","NF_CONSIG_DEV")
        LET m_houve_erro = TRUE
        EXIT FOREACH
     END IF

     WHENEVER ERROR CONTINUE
     FOREACH cq_nf_consigd INTO l_num_nf_dev, l_num_seq_dev, l_qtd_dev_cons, l_serie_nff

        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("FOREACH","NF_CONSIG_DEV")
           LET m_houve_erro = TRUE
           CLOSE cq_nf_consigd #764215#
           EXIT FOREACH
        END IF

        WHENEVER ERROR CONTINUE
        LET l_achou = FALSE
        DECLARE cq_nf_consigg CURSOR WITH HOLD FOR
          SELECT cod_cliente
            FROM nf_consig
           WHERE cod_empresa     = mr_w_sup0552_4.empresa
             AND num_nff         = l_num_nf_dev
             AND serie_nota_fiscal = l_serie_nff
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DECLARE","CQ_NF_CONSIG")
           LET m_houve_erro = TRUE
           CLOSE cq_nf_consigd #764215#
           EXIT FOREACH
        END IF

        WHENEVER ERROR CONTINUE
        FOREACH cq_nf_consigg INTO l_cod_cliente

           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("FOREACH","CQ_NF_CONSIG")
              LET m_houve_erro = TRUE
              CLOSE cq_nf_consigg #764215#
              EXIT FOREACH
           END IF

             WHENEVER ERROR CONTINUE
             SELECT fornecedor.num_cgc_cpf
               FROM clientes, fornecedor
              WHERE clientes.cod_cliente        = l_cod_cliente
                AND fornecedor.cod_fornecedor   = mr_nf_sup.cod_fornecedor
                AND fornecedor.num_cgc_cpf      = clientes.num_cgc_cpf
             WHENEVER ERROR STOP
             IF sqlca.sqlcode = 0 OR
                sqlca.sqlcode = -284 THEN
                LET l_achou = TRUE
             ELSE
                IF sqlca.sqlcode = NOTFOUND THEN
                   CONTINUE FOREACH
                ELSE
                   CALL log003_err_sql("LEITURA","CLIENTE X FORNECEDOR")
                   LET m_houve_erro = TRUE
                   CLOSE cq_nf_consigg #764215#
                   EXIT FOREACH
                END IF
             END IF
             WHENEVER ERROR CONTINUE

           WHENEVER ERROR CONTINUE
           UPDATE nf_consig_item
              SET nf_consig_item.qtd_devolvida = qtd_devolvida - l_qtd_dev_cons
            WHERE nf_consig_item.cod_empresa       = lr_aviso_rec.cod_empresa
              AND nf_consig_item.num_nff           = l_num_nf_dev
              AND nf_consig_item.cod_item          = lr_aviso_rec.cod_item
              AND nf_consig_item.num_sequencia     = l_num_seq_dev
              AND nf_consig_item.serie_nota_fiscal = l_serie_nff
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("UPDATE","NF_CONSIG_ITEM")
              LET m_houve_erro = TRUE
              CLOSE cq_nf_consigg #764215#
              EXIT FOREACH
           END IF

           LET l_qtd_saldo = l_qtd_dev_cons

           WHENEVER ERROR CONTINUE
           DECLARE cq_ftit_grd_cons CURSOR FOR
           SELECT fat_item_grd_consg.pedido,
                  fat_item_grd_consg.ord_montag,
                  fat_item_grd_consg.seq_tabulacao,
                  fat_item_grd_consg.qtd_devolvida
             FROM fat_item_grd_consg
            WHERE fat_item_grd_consg.empresa           = lr_aviso_rec.cod_empresa
              AND fat_item_grd_consg.nota_fiscal       = l_num_nf_dev
              AND fat_item_grd_consg.serie_nota_fiscal = l_serie_nff
              AND fat_item_grd_consg.sequencia_item    = l_num_seq_dev
              AND fat_item_grd_consg.item              = lr_aviso_rec.cod_item
              AND fat_item_grd_consg.fornecedor        = mr_nf_sup.cod_fornecedor
            ORDER BY fat_item_grd_consg.seq_tabulacao
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("DECLARE","FAT_ITEM_GRD_CONSG")
              LET m_houve_erro = TRUE
              CLOSE cq_nf_consigg #764215#
              EXIT FOREACH
           END IF

           WHENEVER ERROR CONTINUE
           FOREACH cq_ftit_grd_cons INTO l_num_pedido, l_ord_montag,
                                         l_seq_tabulacao, l_qtd_devolvida

              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("FOREACH","FAT_ITEM_GRD_CONSG")
                 LET m_houve_erro = TRUE
                 CLOSE cq_ftit_grd_cons #764215#
                 EXIT FOREACH
              END IF

              IF l_qtd_devolvida > 0 THEN
                 IF l_qtd_devolvida > l_qtd_saldo THEN
                    LET l_qtd_devolvida = l_qtd_devolvida - l_qtd_saldo
                    LET l_qtd_saldo     = 0
                 ELSE
                    LET l_qtd_saldo = l_qtd_saldo - l_qtd_devolvida
                    LET l_qtd_devolvida = 0
                 END IF

                 WHENEVER ERROR CONTINUE
                 UPDATE fat_item_grd_consg
                    SET fat_item_grd_consg.qtd_devolvida = l_qtd_devolvida
                  WHERE fat_item_grd_consg.empresa           = lr_aviso_rec.cod_empresa
                    AND fat_item_grd_consg.nota_fiscal       = l_num_nf_dev
                    AND fat_item_grd_consg.serie_nota_fiscal = l_serie_nff
                    AND fat_item_grd_consg.pedido            = l_num_pedido
                    AND fat_item_grd_consg.sequencia_item    = l_num_seq_dev
                    AND fat_item_grd_consg.ord_montag        = l_ord_montag
                    AND fat_item_grd_consg.item              = lr_aviso_rec.cod_item
                    AND fat_item_grd_consg.fornecedor        = mr_nf_sup.cod_fornecedor
                    AND fat_item_grd_consg.seq_tabulacao     = l_seq_tabulacao
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode <> 0 THEN
                    CALL log003_err_sql("UPDATE","FAT_ITEM_GRD_CONSG")
                    LET m_houve_erro = TRUE
                    CLOSE cq_ftit_grd_cons #764215#
                    EXIT FOREACH
                 END IF

                 WHENEVER ERROR CONTINUE
                 IF l_qtd_saldo = 0 THEN
                    CLOSE cq_ftit_grd_cons #764215#
                    EXIT FOREACH
                 END IF
              END IF
           END FOREACH
           WHENEVER ERROR STOP

           FREE cq_ftit_grd_cons

           IF m_houve_erro = TRUE THEN
              CLOSE cq_nf_consigg #764215#
              EXIT FOREACH
           END IF

           LET l_qtd_saldo = l_qtd_dev_cons

           WHENEVER ERROR CONTINUE
           DECLARE cq_itterc_grade CURSOR FOR
            SELECT sup_itterc_grade.seq_tabulacao,
                   sup_itterc_grade.qtd_tot_receb
              FROM sup_itterc_grade
             WHERE sup_itterc_grade.empresa     = mr_nf_sup.cod_empresa
               AND sup_itterc_grade.nota_fiscal = l_num_nf_dev
               AND sup_itterc_grade.seq_item_nf = l_num_seq_dev
               AND sup_itterc_grade.fornecedor  = mr_nf_sup.cod_fornecedor
             ORDER BY sup_itterc_grade.seq_tabulacao
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("DECLARE","SUP_ITTERC_GRADE")
              LET m_houve_erro = TRUE
              CLOSE cq_nf_consigg #764215#
              EXIT FOREACH
           END IF

           WHENEVER ERROR CONTINUE
           FOREACH cq_itterc_grade INTO l_seq_tabulacao, l_qtd_tot_receb
           WHENEVER ERROR STOP

              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("FOREACH","SUP_ITTERC_GRADE")
                 LET m_houve_erro = TRUE
                 CLOSE cq_itterc_grade #764215#
                 EXIT FOREACH
              END IF

              IF l_qtd_tot_receb > 0 THEN
                 IF l_qtd_tot_receb > l_qtd_saldo THEN
                    LET l_qtd_tot_receb = l_qtd_tot_receb - l_qtd_saldo
                    LET l_qtd_saldo     = 0
                 ELSE
                    LET l_qtd_saldo = l_qtd_saldo - l_qtd_tot_receb
                    LET l_qtd_tot_receb = 0
                 END IF

                 WHENEVER ERROR CONTINUE
                 UPDATE sup_itterc_grade
                    SET sup_itterc_grade.qtd_tot_receb = l_qtd_tot_receb
                  WHERE sup_itterc_grade.empresa       = mr_nf_sup.cod_empresa
                    AND sup_itterc_grade.nota_fiscal   = l_num_nf_dev
                    AND sup_itterc_grade.seq_item_nf   = l_num_seq_dev
                    AND sup_itterc_grade.fornecedor    = mr_nf_sup.cod_fornecedor
                    AND sup_itterc_grade.seq_tabulacao = l_seq_tabulacao
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode <> 0 THEN
                    CALL log003_err_sql("UPDATE","SUP_ITTERC_GRADE")
                    LET m_houve_erro = TRUE
                    CLOSE cq_itterc_grade #764215#
                    EXIT FOREACH
                 END IF

                 WHENEVER ERROR CONTINUE
                 IF l_qtd_saldo = 0 THEN
                    CLOSE cq_itterc_grade #764215#
                    EXIT FOREACH
                 END IF
              END IF
           END FOREACH
           WHENEVER ERROR STOP

           FREE cq_itterc_grade
           IF m_houve_erro = TRUE THEN
              CONTINUE FOREACH
           END IF

           WHENEVER ERROR CONTINUE
           SELECT cod_empresa       ,
                 num_nf             ,
                 num_sequencia      ,
                 dat_emis_nf        ,
                 cod_fornecedor     ,
                 ies_incl_contab    ,
                 dat_inclusao_seq   ,
                 cod_cla_fisc       ,
                 cod_item           ,
                 den_item           ,
                 cod_unid_med       ,
                 dat_emis_nf_usina  ,
                 dat_retorno_prev   ,
                 cod_motivo_remessa ,
                 qtd_tot_remessa    ,
                 val_estoque        ,
                 val_remessa        ,
                 val_icms           ,
                 val_ipi            ,
                 qtd_tot_recebida   ,
                 cod_area_negocio   ,
                 cod_lin_negocio    ,
                 num_conta          ,
                 tex_observ         ,
                 prim_ped_prorrog   ,
                 prim_dat_vencto    ,
                 seg_ped_prorrog    ,
                 seg_dat_vencto     ,
                 terc_ped_prorrog   ,
                 terc_dat_vencto
             FROM item_em_terc
            WHERE item_em_terc.cod_empresa    = mr_nf_sup.cod_empresa
              AND item_em_terc.num_nf         = l_num_nf_dev
              AND item_em_terc.num_sequencia  = l_num_seq_dev
              AND item_em_terc.cod_fornecedor = mr_nf_sup.cod_fornecedor
           WHENEVER ERROR STOP
           IF SQLCA.SQLCODE = 0 THEN
              WHENEVER ERROR CONTINUE
              UPDATE item_em_terc
                 SET qtd_tot_recebida = qtd_tot_recebida - l_qtd_dev_cons
               WHERE item_em_terc.cod_empresa    = mr_nf_sup.cod_fornecedor
                 AND item_em_terc.num_nf         = l_num_nf_dev
                 AND item_em_terc.num_sequencia  = l_num_seq_dev
                 AND item_em_terc.cod_fornecedor = mr_nf_sup.cod_fornecedor
              WHENEVER ERROR STOP
              IF SQLCA.SQLCODE = 0 THEN
                 LET l_qtd_devolvida = 0

                 WHENEVER ERROR CONTINUE
                 SELECT num_transac ,qtd_devolvida
                   INTO l_num_transac ,l_qtd_devolvida
                   FROM item_ret_terc
                  WHERE item_ret_terc.cod_empresa      = mr_nf_sup.cod_fornecedor
                    AND item_ret_terc.num_nf           = mr_nf_sup.num_nf
                    AND item_ret_terc.ser_nf           = mr_nf_sup.ser_nf
                    AND item_ret_terc.ssr_nf           = mr_nf_sup.ssr_nf
                    AND item_ret_terc.ies_especie_nf   = mr_nf_sup.ies_especie_nf
                    AND item_ret_terc.cod_fornecedor   = mr_nf_sup.cod_fornecedor
                    AND item_ret_terc.num_nf_remessa   = l_num_nf_dev
                    AND item_ret_terc.num_sequencia_nf = l_num_seq_dev
                 WHENEVER ERROR STOP
                 IF SQLCA.SQLCODE = 0 THEN
                    IF l_qtd_devolvida = l_qtd_dev_cons THEN
                       WHENEVER ERROR CONTINUE
                       DELETE FROM item_ret_terc
                        WHERE item_ret_terc.cod_empresa = mr_nf_sup.cod_fornecedor
                          AND item_ret_terc.num_transac = l_num_transac
                       WHENEVER ERROR STOP
                       IF sqlca.sqlcode <> 0 THEN
                          CALL log003_err_sql("EXCLUSAO","ITEM_RET_TERC")
                          LET m_houve_erro = TRUE
                          CLOSE cq_nf_consigg #764215#
                          EXIT FOREACH
                       END IF

   ## 408466 (alterado na OS 404133)
                    #Excluir a sup_retn_item_terc

                       WHENEVER ERROR CONTINUE
                       DELETE FROM sup_retn_item_terc
                        WHERE empresa           = mr_nf_sup.cod_fornecedor
                          AND nota_fiscal       = mr_nf_sup.num_nf
                          AND serie_nota_fiscal = mr_nf_sup.ser_nf
                          AND subserie_nf       = mr_nf_sup.ssr_nf
                          AND espc_nota_fiscal  = mr_nf_sup.ies_especie_nf
                          AND fornecedor        = mr_nf_sup.cod_fornecedor
                          AND seq_aviso_recebto = lr_aviso_rec.num_seq
                          AND nf_remessa        = l_num_nf_dev
                          AND seq_nf_remessa    = l_num_seq_dev
                       WHENEVER ERROR STOP
                       IF sqlca.sqlcode <> 0 THEN
                          CALL log003_err_sql("EXCLUSAO","SUP_RETN_ITEM_TERC(4)")
                          LET m_houve_erro = TRUE
                          CLOSE cq_nf_consigg #764215#
                          EXIT FOREACH
                       END IF
                    END IF
                 END IF
              END IF
           END IF

           WHENEVER ERROR CONTINUE
        END FOREACH
        WHENEVER ERROR STOP
        FREE  cq_nf_consigg
        IF m_houve_erro = TRUE THEN
           EXIT FOREACH
        END IF
        WHENEVER ERROR CONTINUE
     END FOREACH
     WHENEVER ERROR STOP

     IF m_houve_erro = TRUE THEN
        CLOSE cq_nf_consigd #764215#
        EXIT FOREACH
     END IF

     IF l_achou = TRUE THEN
        WHENEVER ERROR CONTINUE
        DELETE FROM nf_consig_dev
         WHERE cod_empresa    = lr_aviso_rec.cod_empresa
           AND serie_nota_fiscal = l_serie_nff
           AND num_nf         = l_num_nf_dev
           AND cod_item       = lr_aviso_rec.cod_item
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("EXCLUSAO","NF_CONSIG_DEV")
           LET m_houve_erro = TRUE
           CLOSE cq_nf_consigd #764215#
           EXIT FOREACH
        END IF
     END IF

     WHENEVER ERROR CONTINUE
  END FOREACH
  FREE cq_ar_nf #764215#
  WHENEVER ERROR STOP

 END FUNCTION

#------------------------------------------------#
 FUNCTION sup0552_exclui_conta_corrente(l_funcao, l_conta_array)
#------------------------------------------------#
  DEFINE l_funcao        CHAR(01),
         l_houve_erro    SMALLINT,
         l_msg           CHAR(50),
         l_conta_array   SMALLINT

  LET l_houve_erro = FALSE
  IF l_funcao = "M" THEN
     IF m_tipo_de_processo = "I" THEN
        IF NOT m_transacao_ativa THEN
           WHENEVER ERROR CONTINUE
           CALL log085_transacao("BEGIN")
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("TRANSACAO","BEGIN")
           END IF
           LET m_transacao_ativa = TRUE
        END IF
     END IF
  END IF
  WHENEVER ERROR CONTINUE
  DELETE FROM sup_par_ar
   WHERE empresa           = mr_aviso_rec.cod_empresa
     AND aviso_recebto     = mr_aviso_rec.num_aviso_rec
     AND seq_aviso_recebto = 1
     AND parametro         = "banco_deposito"
  WHENEVER ERROR STOP

  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("EXCLUSAO","SUP_PAR_AR")
     LET l_houve_erro = TRUE
  END IF

  IF sup3731_gera_erro_consistencia(mr_aviso_rec.num_aviso_rec) = FALSE THEN
     LET l_houve_erro = TRUE
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_par_ar
   WHERE empresa           = mr_aviso_rec.cod_empresa
     AND aviso_recebto     = mr_aviso_rec.num_aviso_rec
     AND seq_aviso_recebto = 1
     AND parametro         = "agencia_deposito"
  WHENEVER ERROR STOP

  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("EXCLUSAO","SUP_PAR_AR")
     LET l_houve_erro = TRUE
  END IF

  IF sup3731_gera_erro_consistencia(mr_aviso_rec.num_aviso_rec) = FALSE THEN
     LET l_houve_erro = TRUE
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_par_ar
   WHERE empresa           = mr_aviso_rec.cod_empresa
     AND aviso_recebto     = mr_aviso_rec.num_aviso_rec
     AND seq_aviso_recebto = 1
     AND parametro         = "conta_deposito"
  WHENEVER ERROR STOP

  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("EXCLUSAO","SUP_PAR_AR")
     LET l_houve_erro = TRUE
  END IF

  IF sup3731_gera_erro_consistencia(mr_aviso_rec.num_aviso_rec) = FALSE THEN
     LET l_houve_erro = TRUE
  END IF

  IF l_funcao = "M" THEN
     IF m_tipo_de_processo = "I" THEN
        IF m_transacao_ativa THEN
           WHENEVER ERROR CONTINUE
           CALL log085_transacao("COMMIT")
           WHENEVER ERROR STOP

           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("EFETIVACAO-COMMIT","SUP_PAR_AR")
              CALL log085_transacao("ROLLBACK") #OS596059
              LET l_houve_erro = TRUE
           END IF
           LET m_transacao_ativa = FALSE

           WHENEVER ERROR CONTINUE
           CALL log085_transacao("BEGIN")
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("TRANSACAO","BEGIN")
              LET l_houve_erro = TRUE
           END IF
           LET m_transacao_ativa = TRUE
        END IF
     END IF
  END IF

  IF l_funcao <> "E" THEN
     IF l_houve_erro THEN
        LET l_msg = " Exclusao cancelada "
     ELSE
        IF m_eh_background = FALSE THEN
           CLEAR FORM
        END IF
        LET l_msg = " Exclusao efetuada com sucesso "
     END IF
     LET l_conta_array = l_conta_array + 1
     CALL sup0552_carrega_chave_consiste(l_conta_array)
     LET ma_array_consistencias[l_conta_array].txt_consistencia  = l_msg
  END IF
  RETURN l_conta_array
 END FUNCTION

#------------------------------------------------#
 FUNCTION sup0552_transfere_h_est_trans_de_terc(l_conta_array)
#------------------------------------------------#
 DEFINE lr_h_est_trans_terc RECORD LIKE h_est_trans_terc.*

 DEFINE l_conta_array    SMALLINT

 INITIALIZE lr_h_est_trans_terc TO NULL
 WHENEVER ERROR CONTINUE
 DECLARE cq_busca_h_terc CURSOR WITH HOLD FOR
    SELECT cod_empresa          ,
           num_transac          ,
           dat_movto            ,
           num_nf               ,
           ser_nf               ,
           ssr_nf               ,
           ies_especie_nf       ,
           cod_fornecedor       ,
           num_sequencia        ,
           cod_item             ,
           cod_local            ,
           num_lote             ,
           qtd_consumo          ,
           ies_situacao         ,
           num_pedido           ,
           num_oc               ,
           nom_usuario_fat      ,
           dat_autoriz_fat      ,
           hor_autoriz_fat      ,
           nom_usuario_valid    ,
           dat_validacao_fat    ,
           hor_validacao_fat    ,
           tex_observ           ,
           num_aviso_rec        ,
           num_seq              ,
           num_transac_origem   ,
           num_transac_dest     ,
           num_versao_cot
      FROM h_est_trans_terc
     WHERE cod_empresa    = mr_w_sup0552_4.empresa
       AND num_nf         = mr_w_sup0552_4.nota_fiscal
       AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
       AND ssr_nf         = mr_w_sup0552_4.subserie_nf
       AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
       AND cod_fornecedor = mr_w_sup0552_4.fornecedor
       AND ies_situacao   = "3"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_BUSCA_H_TERC")
 END IF
 WHENEVER ERROR CONTINUE
 FOREACH cq_busca_h_terc INTO lr_h_est_trans_terc.*

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("FOREACH","CQ_BUSCA_H_TERC")
 END IF
    LET lr_h_est_trans_terc.num_transac = 0

    WHENEVER ERROR CONTINUE
    INSERT INTO est_trans_de_terc
           (cod_empresa,
            dat_movto,
            num_nf,
            ser_nf,
            ssr_nf,
            ies_especie_nf,
            cod_fornecedor,
            num_sequencia,
            cod_item,
            cod_local,
            num_lote,
            qtd_consumo,
            ies_situacao,
            num_pedido,
            num_oc,
            nom_usuario_fat,
            dat_autoriz_fat,
            hor_autoriz_fat,
            nom_usuario_valid,
            dat_validacao_fat,
            hor_validacao_fat,
            tex_observ,
            num_aviso_rec,
            num_seq,
            num_transac_origem,
            num_transac_dest,
            num_versao_cot)
    VALUES (lr_h_est_trans_terc.cod_empresa,
           lr_h_est_trans_terc.dat_movto,
           lr_h_est_trans_terc.num_nf,
           lr_h_est_trans_terc.ser_nf,
           lr_h_est_trans_terc.ssr_nf,
           lr_h_est_trans_terc.ies_especie_nf,
           lr_h_est_trans_terc.cod_fornecedor,
           lr_h_est_trans_terc.num_sequencia,
           lr_h_est_trans_terc.cod_item,
           lr_h_est_trans_terc.cod_local,
           lr_h_est_trans_terc.num_lote,
           lr_h_est_trans_terc.qtd_consumo,
           lr_h_est_trans_terc.ies_situacao,
           lr_h_est_trans_terc.num_pedido,
           lr_h_est_trans_terc.num_oc,
           lr_h_est_trans_terc.nom_usuario_fat,
           lr_h_est_trans_terc.dat_autoriz_fat,
           lr_h_est_trans_terc.hor_autoriz_fat,
           lr_h_est_trans_terc.nom_usuario_valid,
           lr_h_est_trans_terc.dat_validacao_fat,
           lr_h_est_trans_terc.hor_validacao_fat,
           lr_h_est_trans_terc.tex_observ,
           lr_h_est_trans_terc.num_aviso_rec,
           lr_h_est_trans_terc.num_seq,
           lr_h_est_trans_terc.num_transac_origem,
           lr_h_est_trans_terc.num_transac_dest,
           lr_h_est_trans_terc.num_versao_cot
           )

    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da EST_TRANS_DE_TERC "
       LET m_status_arquivo = 1
       CLOSE cq_busca_h_terc #764215#
       FREE  cq_busca_h_terc #764215#
       RETURN FALSE
    ELSE
       WHENEVER ERROR CONTINUE
       DELETE FROM h_est_trans_terc
        WHERE cod_empresa    = mr_w_sup0552_4.empresa
          AND num_nf         = mr_w_sup0552_4.nota_fiscal
          AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
          AND ssr_nf         = mr_w_sup0552_4.subserie_nf
          AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
          AND cod_fornecedor = mr_w_sup0552_4.fornecedor
          AND ies_situacao   = "3"
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("EXCLUSAO","H_EST_TRANS_TERC")
       END IF
    END IF
 END FOREACH
 FREE  cq_busca_h_terc #764215#
 WHENEVER ERROR STOP

 RETURN TRUE

 END FUNCTION

#------------------------------------------#
 FUNCTION sup0552_deleta_inss_auton(l_nr_nf,l_num_seq)
#------------------------------------------#
 DEFINE l_nr_nf   LIKE reten_inss.num_ad_nf_orig,
        l_num_seq LIKE aviso_rec.num_seq

 WHENEVER ERROR CONTINUE
 DELETE FROM inss_auton
  WHERE inss_auton.cod_empresa    = mr_w_sup0552_4.empresa
    AND inss_auton.num_ad_nf_orig = l_nr_nf
    AND inss_auton.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
    AND inss_auton.ssr_nf         = mr_w_sup0552_4.subserie_nf
    AND inss_auton.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
    AND inss_auton.cod_fornecedor = mr_w_sup0552_4.fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("EXCLUSAO","inss_auton")
 END IF

 END FUNCTION

#-------------------------------------------------------------#
 FUNCTION sup0552_verifica_devol_nf_consig(l_ies_especie_nf,
                                           l_ies_nf_aguard_nfe,
                                           l_cod_empresa,
                                           l_num_nf_cliente,
                                           l_cod_fornecedor,
                                           l_cod_item,
                                           l_conta_array)
#-------------------------------------------------------------#
  DEFINE l_ies_especie_nf    LIKE nf_sup.ies_especie_nf,
         l_ies_nf_aguard_nfe LIKE nf_sup.ies_nf_aguard_nfe,
         l_cod_empresa       LIKE nf_consig_dev.cod_empresa,
         l_num_nf_cliente    LIKE nf_consig_dev.num_nf_cliente,
         l_cod_fornecedor    LIKE nf_sup.cod_fornecedor,
         l_achou_nff         SMALLINT

  DEFINE l_num_nff           LIKE nf_consig_dev.num_nf,
         l_ser_nff           LIKE nf_consig_dev.serie_nota_fiscal,
         l_cod_cliente       LIKE nf_consig.cod_cliente,
         l_cod_item          LIKE aviso_rec.cod_item, #-- OS 495219
         sql_stmt            CHAR(500), #-- OS 495219
         l_conta_array       SMALLINT

  LET l_achou_nff = FALSE
  INITIALIZE l_num_nff, l_ser_nff, l_cod_cliente TO NULL

  IF (l_ies_especie_nf = "NFR" OR
      l_ies_especie_nf = "NFE" ) AND ### OS 511148
      l_ies_nf_aguard_nfe = "X" THEN

#-- OS 495219 inicio --#
     LET sql_stmt = " SELECT nf_consig_dev.num_nf, serie_nota_fiscal ",
                    "   FROM nf_consig_dev ",
                    "  WHERE nf_consig_dev.cod_empresa       = """, l_cod_empresa ,""" ",
                    "    AND nf_consig_dev.num_nf_cliente    = """, l_num_nf_cliente ,""" "

     IF l_cod_item <> " " THEN
        LET sql_stmt = sql_stmt CLIPPED,
                       " AND nf_consig_dev.cod_item = """, l_cod_item ,""" "
     END IF

     WHENEVER ERROR CONTINUE
     PREPARE var_consig_dev FROM sql_stmt
     WHENEVER ERROR STOP

     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("PREPARE","VAR_CONSIG_DEV")
        RETURN FALSE
     END IF

     WHENEVER ERROR CONTINUE
     DECLARE cq_consig_dev CURSOR FOR var_consig_dev
     WHENEVER ERROR STOP
#-- OS 495219 fim --#
     IF sqlca.sqlcode <> 0 THEN
        CALL log0030_mensagem("DECLARE","CQ_CONSIG_DEV")
        WHENEVER ERROR STOP
        RETURN FALSE
     END IF

     WHENEVER ERROR CONTINUE
     FOREACH cq_consig_dev INTO l_num_nff, l_ser_nff
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("FOREACH","CQ_CONSIG_DEV")
           WHENEVER ERROR STOP
           CLOSE cq_consig_dev #764215#
           FREE  cq_consig_dev #764215#
           RETURN FALSE
        END IF

        WHENEVER ERROR CONTINUE
        DECLARE cq_nf_consig CURSOR FOR
         SELECT nf_consig.cod_cliente
           FROM nf_consig
          WHERE cod_empresa       = l_cod_empresa
            AND serie_nota_fiscal = l_ser_nff
            AND num_nff           = l_num_nff
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DECLARE","CQ_NF_CONSIG")
           CLOSE cq_consig_dev #764215#
           FREE  cq_consig_dev #764215#
           RETURN FALSE
        END IF
        WHENEVER ERROR CONTINUE
        FOREACH cq_nf_consig INTO l_cod_cliente
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("FOREACH","CQ_NF_CONSIG")
             WHENEVER ERROR STOP

              CLOSE cq_nf_consig #764215#
              FREE  cq_nf_consig #764215#

              CLOSE cq_consig_dev #764215#
              FREE  cq_consig_dev #764215#
             RETURN FALSE
          END IF
          WHENEVER ERROR CONTINUE
          SELECT fornecedor.num_cgc_cpf
            FROM clientes, fornecedor
           WHERE clientes.cod_cliente        = l_cod_cliente
             AND fornecedor.cod_fornecedor   = l_cod_fornecedor
             AND fornecedor.num_cgc_cpf      = clientes.num_cgc_cpf
          WHENEVER ERROR STOP
          IF sqlca.sqlcode = 0 OR
             sqlca.sqlcode = -284 THEN
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Exclua relacionamento nota consignação - (SUP5241)"
             LET l_achou_nff = TRUE
              CLOSE cq_consig_dev #764215#
             EXIT FOREACH
          ELSE
             IF sqlca.sqlcode <> NOTFOUND THEN
                CALL log003_err_sql("LEITURA","CLIENTE X FORNECEDOR")
                WHENEVER ERROR STOP
                 CLOSE cq_nf_consig #764215#
                 FREE  cq_nf_consig #764215#
                 CLOSE cq_consig_dev #764215#
                 FREE  cq_consig_dev #764215#
                RETURN FALSE
             END IF
          END IF
          WHENEVER ERROR CONTINUE
        END FOREACH
        WHENEVER ERROR STOP
        FREE cq_nf_consig

        IF l_achou_nff = TRUE THEN
           CLOSE cq_consig_dev #764215#
           EXIT FOREACH
        END IF
        WHENEVER ERROR CONTINUE
     END FOREACH
     WHENEVER ERROR STOP
     FREE cq_consig_dev
     IF l_achou_nff = TRUE THEN
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#----------------------------------------------------------------------------------------------#
 FUNCTION sup0552_atualiza_nota(l_cod_empresa, l_num_nf, l_ser_nf, l_ssr_nf, l_cod_fornecedor,
                                l_num_aviso_rec, l_cnd_pgto_nf)
#----------------------------------------------------------------------------------------------#
 # OS 485.525
 DEFINE l_cod_empresa       LIKE empresa.cod_empresa,
        l_empresa           LIKE empresa.cod_empresa,
        l_num_nf            LIKE nf_sup.num_nf,
        l_ser_nf            LIKE nf_sup.ser_nf,
        l_ssr_nf            LIKE nf_sup.ssr_nf,
        l_cod_fornecedor    LIKE nf_sup.cod_fornecedor,
        l_num_aviso_rec     LIKE nf_sup.num_aviso_rec,
        l_cnd_pgto_nf       LIKE nf_sup.cnd_pgto_nf,
        l_ies_pagamento     LIKE cond_pgto_cap.ies_pagamento,
        l_ies_incl_cap      LIKE nf_sup.ies_incl_cap

 WHENEVER ERROR CONTINUE
 SELECT ies_pagamento
   INTO l_ies_pagamento
   FROM cond_pgto_cap
  WHERE cnd_pgto = l_cnd_pgto_nf
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 0 AND l_ies_pagamento = "3" THEN
    WHENEVER ERROR CONTINUE
     SELECT cod_empresa_destin
       INTO l_empresa
       FROM emp_orig_destino
      WHERE cod_empresa_orig = l_cod_empresa
    WHENEVER ERROR STOP

    IF sqlca.sqlcode = 100 THEN
       LET l_empresa = l_cod_empresa
    END IF

    {Utilizar o conceito de empresa origem / destino - cap1010}
    WHENEVER ERROR CONTINUE
    SELECT num_ad
      FROM ad_mestre
     WHERE cod_empresa    = l_empresa
       AND num_nf         = l_num_nf
       AND cod_fornecedor = l_cod_fornecedor
       AND ser_nf         = l_ser_nf
       AND ssr_nf         = l_ssr_nf
    WHENEVER ERROR STOP

    #IF sqlca.sqlcode = 100 THEN   # Inicio OS 528292
    #   LET l_ies_incl_cap = "N"
    #ELSE
    #   LET l_ies_incl_cap = "S"
    #END IF
    IF sqlca.sqlcode = 0 THEN
       LET l_ies_incl_cap = "S"
    ELSE
       LET l_ies_incl_cap = "N"
    END IF                         # Fim OS 528292

    WHENEVER ERROR CONTINUE
     UPDATE nf_sup
        SET ies_incl_cap  = l_ies_incl_cap
      WHERE cod_empresa   = l_cod_empresa
        AND num_aviso_rec = l_num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("UPDATE","NF_SUP")
    END IF
 END IF

 END FUNCTION

#-----------------------------------------------------------#
 FUNCTION sup0552_busca_aviso_rec(l_empresa,l_num_ar,l_seq)
#-----------------------------------------------------------#
 DEFINE l_empresa   LIKE empresa.cod_empresa,
        l_num_ar    LIKE aviso_rec.num_aviso_rec,
        l_seq       LIKE aviso_rec.num_seq

 WHENEVER ERROR CONTINUE
 SELECT aviso_rec.cod_empresa          ,
        aviso_rec.cod_empresa_estab    ,
        aviso_rec.num_aviso_rec        ,
        aviso_rec.num_seq              ,
        aviso_rec.dat_inclusao_seq     ,
        aviso_rec.ies_situa_ar         ,
        aviso_rec.ies_incl_almox       ,
        aviso_rec.ies_receb_fiscal     ,
        aviso_rec.ies_liberacao_ar     ,
        aviso_rec.ies_liberacao_cont   ,
        aviso_rec.ies_liberacao_insp   ,
        aviso_rec.ies_diverg_listada   ,
        aviso_rec.ies_item_estoq       ,
        aviso_rec.ies_controle_lote    ,
        aviso_rec.cod_comprador        ,
        aviso_rec.num_pedido           ,
        aviso_rec.num_oc               ,
        aviso_rec.cod_item             ,
        aviso_rec.den_item             ,
        aviso_rec.cod_cla_fisc         ,
        aviso_rec.cod_unid_med_nf      ,
        aviso_rec.pre_unit_nf          ,
        aviso_rec.val_despesa_aces_i   ,
        aviso_rec.ies_da_bc_ipi        ,
        aviso_rec.cod_incid_ipi        ,
        aviso_rec.ies_tip_incid_ipi    ,
        aviso_rec.pct_direito_cred     ,
        aviso_rec.pct_ipi_declarad     ,
        aviso_rec.pct_ipi_tabela       ,
        aviso_rec.ies_bitributacao     ,
        aviso_rec.val_base_c_ipi_it    ,
        aviso_rec.val_base_c_ipi_da    ,
        aviso_rec.val_ipi_decl_item    ,
        aviso_rec.val_ipi_calc_item    ,
        aviso_rec.val_ipi_desp_aces    ,
        aviso_rec.val_desc_item        ,
        aviso_rec.val_liquido_item     ,
        aviso_rec.val_contabil_item    ,
        aviso_rec.qtd_declarad_nf      ,
        aviso_rec.qtd_recebida         ,
        aviso_rec.qtd_devolvid         ,
        aviso_rec.dat_devoluc          ,
        aviso_rec.val_devoluc          ,
        aviso_rec.num_nf_dev           ,
        aviso_rec.qtd_rejeit           ,
        aviso_rec.qtd_liber            ,
        aviso_rec.qtd_liber_excep      ,
        aviso_rec.cus_tot_item         ,
        aviso_rec.cod_fiscal_item      ,
        aviso_rec.gru_ctr_desp_item    ,
        aviso_rec.cod_local_estoq      ,
        aviso_rec.num_lote             ,
        aviso_rec.cod_operac_estoq     ,
        aviso_rec.val_base_c_item_d    ,
        aviso_rec.val_base_c_item_c    ,
        aviso_rec.pct_icms_item_d      ,
        aviso_rec.pct_icms_item_c      ,
        aviso_rec.pct_red_bc_item_d    ,
        aviso_rec.pct_red_bc_item_c    ,
        aviso_rec.pct_diferen_item_d   ,
        aviso_rec.pct_diferen_item_c   ,
        aviso_rec.val_icms_item_d      ,
        aviso_rec.val_icms_item_c      ,
        aviso_rec.val_base_c_icms_da   ,
        aviso_rec.val_icms_diferen_i   ,
        aviso_rec.val_icms_desp_aces   ,
        aviso_rec.ies_incid_icms_ite   ,
        aviso_rec.val_frete            ,
        aviso_rec.val_icms_frete_d     ,
        aviso_rec.val_icms_frete_c     ,
        aviso_rec.val_base_c_frete_d   ,
        aviso_rec.val_base_c_frete_c   ,
        aviso_rec.val_icms_diferen_f   ,
        aviso_rec.pct_icms_frete_d     ,
        aviso_rec.pct_icms_frete_c     ,
        aviso_rec.pct_red_bc_frete_d   ,
        aviso_rec.pct_red_bc_frete_c   ,
        aviso_rec.pct_diferen_fret_d   ,
        aviso_rec.pct_diferen_fret_c   ,
        aviso_rec.val_acrescimos       ,
        aviso_rec.val_enc_financ       ,
        aviso_rec.ies_contabil         ,
        aviso_rec.ies_total_nf         ,
        aviso_rec.val_compl_estoque    ,
        aviso_rec.dat_ref_val_compl    ,
        aviso_rec.pct_enc_financ       ,
        aviso_rec.cod_cla_fisc_nf      ,
        aviso_rec.cod_tip_despesa      ,
        aviso_rec.observacao
   INTO mr_aviso_rec.cod_empresa          ,
        mr_aviso_rec.cod_empresa_estab    ,
        mr_aviso_rec.num_aviso_rec        ,
        mr_aviso_rec.num_seq              ,
        mr_aviso_rec.dat_inclusao_seq     ,
        mr_aviso_rec.ies_situa_ar         ,
        mr_aviso_rec.ies_incl_almox       ,
        mr_aviso_rec.ies_receb_fiscal     ,
        mr_aviso_rec.ies_liberacao_ar     ,
        mr_aviso_rec.ies_liberacao_cont   ,
        mr_aviso_rec.ies_liberacao_insp   ,
        mr_aviso_rec.ies_diverg_listada   ,
        mr_aviso_rec.ies_item_estoq       ,
        mr_aviso_rec.ies_controle_lote    ,
        mr_aviso_rec.cod_comprador        ,
        mr_aviso_rec.num_pedido           ,
        mr_aviso_rec.num_oc               ,
        mr_aviso_rec.cod_item             ,
        mr_aviso_rec.den_item             ,
        mr_aviso_rec.cod_cla_fisc         ,
        mr_aviso_rec.cod_unid_med_nf      ,
        mr_aviso_rec.pre_unit_nf          ,
        mr_aviso_rec.val_despesa_aces_i   ,
        mr_aviso_rec.ies_da_bc_ipi        ,
        mr_aviso_rec.cod_incid_ipi        ,
        mr_aviso_rec.ies_tip_incid_ipi    ,
        mr_aviso_rec.pct_direito_cred     ,
        mr_aviso_rec.pct_ipi_declarad     ,
        mr_aviso_rec.pct_ipi_tabela       ,
        mr_aviso_rec.ies_bitributacao     ,
        mr_aviso_rec.val_base_c_ipi_it    ,
        mr_aviso_rec.val_base_c_ipi_da    ,
        mr_aviso_rec.val_ipi_decl_item    ,
        mr_aviso_rec.val_ipi_calc_item    ,
        mr_aviso_rec.val_ipi_desp_aces    ,
        mr_aviso_rec.val_desc_item        ,
        mr_aviso_rec.val_liquido_item     ,
        mr_aviso_rec.val_contabil_item    ,
        mr_aviso_rec.qtd_declarad_nf      ,
        mr_aviso_rec.qtd_recebida         ,
        mr_aviso_rec.qtd_devolvid         ,
        mr_aviso_rec.dat_devoluc          ,
        mr_aviso_rec.val_devoluc          ,
        mr_aviso_rec.num_nf_dev           ,
        mr_aviso_rec.qtd_rejeit           ,
        mr_aviso_rec.qtd_liber            ,
        mr_aviso_rec.qtd_liber_excep      ,
        mr_aviso_rec.cus_tot_item         ,
        mr_aviso_rec.cod_fiscal_item      ,
        mr_aviso_rec.gru_ctr_desp_item    ,
        mr_aviso_rec.cod_local_estoq      ,
        mr_aviso_rec.num_lote             ,
        mr_aviso_rec.cod_operac_estoq     ,
        mr_aviso_rec.val_base_c_item_d    ,
        mr_aviso_rec.val_base_c_item_c    ,
        mr_aviso_rec.pct_icms_item_d      ,
        mr_aviso_rec.pct_icms_item_c      ,
        mr_aviso_rec.pct_red_bc_item_d    ,
        mr_aviso_rec.pct_red_bc_item_c    ,
        mr_aviso_rec.pct_diferen_item_d   ,
        mr_aviso_rec.pct_diferen_item_c   ,
        mr_aviso_rec.val_icms_item_d      ,
        mr_aviso_rec.val_icms_item_c      ,
        mr_aviso_rec.val_base_c_icms_da   ,
        mr_aviso_rec.val_icms_diferen_i   ,
        mr_aviso_rec.val_icms_desp_aces   ,
        mr_aviso_rec.ies_incid_icms_ite   ,
        mr_aviso_rec.val_frete            ,
        mr_aviso_rec.val_icms_frete_d     ,
        mr_aviso_rec.val_icms_frete_c     ,
        mr_aviso_rec.val_base_c_frete_d   ,
        mr_aviso_rec.val_base_c_frete_c   ,
        mr_aviso_rec.val_icms_diferen_f   ,
        mr_aviso_rec.pct_icms_frete_d     ,
        mr_aviso_rec.pct_icms_frete_c     ,
        mr_aviso_rec.pct_red_bc_frete_d   ,
        mr_aviso_rec.pct_red_bc_frete_c   ,
        mr_aviso_rec.pct_diferen_fret_d   ,
        mr_aviso_rec.pct_diferen_fret_c   ,
        mr_aviso_rec.val_acrescimos       ,
        mr_aviso_rec.val_enc_financ       ,
        mr_aviso_rec.ies_contabil         ,
        mr_aviso_rec.ies_total_nf         ,
        mr_aviso_rec.val_compl_estoque    ,
        mr_aviso_rec.dat_ref_val_compl    ,
        mr_aviso_rec.pct_enc_financ       ,
        mr_aviso_rec.cod_cla_fisc_nf      ,
        mr_aviso_rec.cod_tip_despesa      ,
        mr_aviso_rec.observacao
   FROM aviso_rec
  WHERE aviso_rec.cod_empresa   = l_empresa
    AND aviso_rec.num_aviso_rec = l_num_ar
    AND aviso_rec.num_seq       = l_seq
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("LEITURA","AVISO_REC")
 END IF

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_verifica_cond_delecao(l_opcao, l_conta_array)
#----------------------------------------------#
  DEFINE l_opcao       CHAR(07),
         l_conta_array SMALLINT

  IF l_opcao = "EX_NOTA" THEN
     RETURN TRUE, l_conta_array
  END IF

  IF mr_aviso_rec.ies_receb_fiscal = "S" AND l_opcao = "EXCLUIR" THEN
     LET l_conta_array = l_conta_array + 1
     CALL sup0552_carrega_chave_consiste(l_conta_array)
     LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Possui recebimento fiscal."
     RETURN FALSE, l_conta_array
  END IF

  IF sup0552_verifica_item_wis(mr_aviso_rec.cod_item) THEN
     LET l_conta_array = l_conta_array + 1
     CALL sup0552_carrega_chave_consiste(l_conta_array)
     LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Dados ja processados na Interface WIS."
     RETURN FALSE, l_conta_array
  END IF

  IF sup0552_verifica_item_wms(mr_aviso_rec.cod_item) THEN
     WHENEVER ERROR CONTINUE
     SELECT wms_e_veic_nf.num_aviso_recebto
       FROM wms_e_entrada_veic, wms_e_veic_nf
      WHERE wms_e_entrada_veic.entrada_veiculo = wms_e_veic_nf.entrada_veiculo
        AND wms_e_veic_nf.num_aviso_recebto    = mr_aviso_rec.num_aviso_rec
        AND wms_e_entrada_veic.sit             NOT IN ("E")
        AND wms_e_entrada_veic.cod_empresa     = mr_aviso_rec.cod_empresa
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 THEN
        LET l_conta_array = l_conta_array + 1
        CALL sup0552_carrega_chave_consiste(l_conta_array)
        LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Dados ja processados na Interface LOGIX-WMS."
        RETURN FALSE
     END IF
  END IF

  IF mr_nf_sup.ies_nf_aguard_nfe = "T" THEN
     IF sup0552_verifica_devolucao_terceiros() = TRUE THEN
        LET l_conta_array = l_conta_array + 1
        CALL sup0552_carrega_chave_consiste(l_conta_array)
        LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Exclusao nao permitida. Ha devolucao de material de terceiros ja realizada."
        RETURN FALSE, l_conta_array
     END IF
  END IF

  IF mr_aviso_rec.ies_item_estoq = "N" THEN
     IF p_par_sup_compl.ies_conta_ok_n_est = "2" OR
       (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
        mr_nf_sup.ies_especie_nf = "NFS")
     THEN
        RETURN TRUE
     END IF
  END IF

  IF mr_aviso_rec.ies_situa_ar = "E" AND mr_aviso_rec.ies_liberacao_cont = "S" THEN
     IF sup0552_possui_avf_insp_ar() THEN
        LET l_conta_array = l_conta_array + 1
        CALL sup0552_carrega_chave_consiste(l_conta_array)
        LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Possui resultado da inspecao."
        RETURN FALSE, l_conta_array
     END IF
  ELSE
     IF mr_aviso_rec.ies_situa_ar = "I" AND
        mr_aviso_rec.ies_liberacao_cont = "S" THEN
        IF sup0552_possui_avf_insp_ar() THEN
           LET l_conta_array = l_conta_array + 1
           CALL sup0552_carrega_chave_consiste(l_conta_array)
           LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Possui resultado da contagem."
           RETURN FALSE, l_conta_array
        END IF
     END IF
  END IF

  RETURN TRUE
 END FUNCTION

#----------------------------------#
 FUNCTION sup0552_nota_faturamento()
#----------------------------------#
 DEFINE l_qtd_tot_devolvida  LIKE item_de_terc.qtd_tot_devolvida,
        l_not_fat            SMALLINT

 DEFINE l_cod_fornecedor     LIKE nf_sup.cod_fornecedor

 INITIALIZE l_qtd_tot_devolvida TO NULL
 LET l_not_fat = 0
 ## OS 407088
 CALL sup0552_busca_fornecedor_triangulacao(mr_aviso_rec.cod_empresa, mr_aviso_rec.num_aviso_rec, mr_aviso_rec.num_seq) RETURNING l_cod_fornecedor

 WHENEVER ERROR CONTINUE
 DECLARE cq_not_fat CURSOR FOR
   SELECT qtd_tot_devolvida
     FROM item_de_terc
    WHERE cod_empresa    = mr_w_sup0552_4.empresa
      AND num_nf         = mr_w_sup0552_4.nota_fiscal
      AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
      AND ssr_nf         = mr_w_sup0552_4.subserie_nf
      AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
      AND cod_fornecedor = l_cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_NOT_FAT")
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cq_not_fat INTO l_qtd_tot_devolvida
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("FOREACH","CQ_NOT_FAT")
 END IF
    IF l_qtd_tot_devolvida <> 0 THEN
       LET l_not_fat = 1
       CLOSE cq_not_fat #764215#
       EXIT FOREACH
    END IF
 END FOREACH
 WHENEVER ERROR STOP
 FREE cq_not_fat #764215#

 IF l_not_fat > 0 THEN
    RETURN TRUE
 END IF

 RETURN FALSE
 END FUNCTION

#--------------------------------------------#
 FUNCTION sup0552_verifica_impostos_ja_pagos(l_conta_array)
#--------------------------------------------#
 DEFINE l_conta_array     SMALLINT
 ## Esta função tem como objetivo verificar se já foi efetuado pagamento de algum imposto,
## neste caso não deve permitir efetuar exclusão, cancelamento, modificação valor/data entrada

 IF sup0552_verifica_inss_auton() THEN
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Existe INSS AUTON. apropriado na Nota Fiscal."
    RETURN l_conta_array
 END IF
 IF sup0552_verifica_reten_iss() THEN
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Existe reten. ISS apropriado na Nota Fiscal."
    RETURN l_conta_array
 END IF
 IF sup0552_verifica_reten_inss()  THEN
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Existe reten. INSS apropriado na Nota Fiscal."
    RETURN l_conta_array
 END IF
 IF sup0552_verifica_reten_inss_auton()  THEN  #OS 237288
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Existe reten. INSS Auton. apropriado na Nota Fiscal."
    RETURN l_conta_array
 END IF
 IF sup0552_verifica_reten_inss_rur()  THEN
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Existe reten. INSS RURAL apropriado na Nota Fiscal."
    RETURN l_conta_array
 END IF
 IF sup0552_verifica_cap_sest_senat() THEN #OS360335
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Existe SEST SENAT apropriado na Nota Fiscal."
    RETURN l_conta_array
 END IF
 IF sup0552_verifica_cap_ret_proalminas() THEN #OS360335
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Existe RET PROALMINAS apropriado na Nota Fiscal."
    RETURN l_conta_array
 END IF

 RETURN l_conta_array
 END FUNCTION

#--------------------------------------------------------------#
 FUNCTION sup0552_verifica_nfp_incl_apos_encerr(l_cod_empresa,
                                                l_num_aviso_rec)
#--------------------------------------------------------------#
 DEFINE l_cod_empresa    LIKE sup_par_ar.empresa,
        l_num_aviso_rec  LIKE sup_par_ar.aviso_recebto

 WHENEVER ERROR CONTINUE
 SELECT sup_par_ar.empresa
   FROM sup_par_ar
  WHERE sup_par_ar.empresa           = l_cod_empresa
    AND sup_par_ar.aviso_recebto     = l_num_aviso_rec
    AND sup_par_ar.seq_aviso_recebto = 0
    AND sup_par_ar.parametro         = "nfp_incl_apos_encerr"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    RETURN TRUE
 ELSE
    IF sqlca.sqlcode <> NOTFOUND THEN
       CALL log003_err_sql("LEITURA","SUP_PAR_AR")
    END IF
    RETURN FALSE
 END IF

 END FUNCTION

#-----------------------------------------------------#
 FUNCTION sup0552_leitura_processo_imp(l_cod_empresa,
                                       l_num_processo,
                                       l_tipo_reg)
#-----------------------------------------------------#
  DEFINE l_cod_empresa       LIKE empresa.cod_empresa,
         l_num_processo      LIKE processo_imp.num_processo,
         l_tipo_reg          CHAR(04),
         l_cod_fornecedor    LIKE processo_imp.cod_exportador,
         l_num_aviso_rec     LIKE processo_imp.num_aviso_rec

  INITIALIZE l_cod_fornecedor, l_num_aviso_rec TO NULL

  IF l_num_processo IS NOT NULL AND l_num_processo <> -1 THEN
     WHENEVER ERROR CONTINUE
     SELECT cod_exportador, num_aviso_rec
       INTO l_cod_fornecedor, l_num_aviso_rec
       FROM processo_imp
      WHERE cod_empresa      = l_cod_empresa
        AND num_processo     = l_num_processo
        AND ies_versao_atual = "S"
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("SELECAO","PROCESSO_IMP")
     END IF
  END IF

  IF l_tipo_reg = "FORN" THEN
     RETURN l_cod_fornecedor
  END IF

  RETURN l_num_aviso_rec

 END FUNCTION

#---------------------------------------#
 FUNCTION sup0552_possui_rateio_compl()
#---------------------------------------#
  DEFINE l_count  SMALLINT

  INITIALIZE l_count TO NULL
  WHENEVER ERROR CONTINUE
  SELECT COUNT(*)
    INTO l_count
    FROM relac_nf_import_it
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP

  IF sqlca.sqlcode = 0 THEN
     IF l_count > 0 THEN
        RETURN TRUE
     END IF
  END IF
  RETURN FALSE

 END FUNCTION

#---------------------------------------------------#
 FUNCTION sup0552_busca_numero_processo_importacao()
#---------------------------------------------------#
  DEFINE  l_num_processo    LIKE aviso_rec_proc_imp.num_processo

  WHENEVER ERROR CONTINUE
  INITIALIZE l_num_processo TO NULL
  SELECT UNIQUE(num_processo)
    INTO l_num_processo
    FROM aviso_rec_proc_imp
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("LEITURA","AVISO_REC_PROC_IMP")
  END IF

  RETURN l_num_processo
 END FUNCTION

#--------------------------------------------#
 FUNCTION sup0552_nfr_consignatario(l_funcao)
#--------------------------------------------#
 DEFINE l_funcao                     CHAR(11),
        l_num_processo               LIKE processo_imp.num_processo

  IF mr_nf_sup.ies_especie_nf = "NFR" AND
     m_proc_imp_rec_nfr_consig = "S" THEN
     IF l_funcao = "INCLUSAO" THEN
        RETURN TRUE
     ELSE
        LET l_num_processo = sup0552_busca_numero_processo_importacao()
        IF l_num_processo > 0 THEN
           RETURN TRUE
        END IF
     END IF
  END IF

  RETURN FALSE
 END FUNCTION

#------------------------------------------------#
 FUNCTION sup0552_verifica_classificacao_sucata()
#------------------------------------------------#
 DEFINE l_contador    SMALLINT

 LET l_contador = NULL
 WHENEVER ERROR CONTINUE
 SELECT COUNT(*)
   INTO l_contador
   FROM tran_class_sucata
  WHERE tran_class_sucata.cod_empresa   = mr_aviso_rec.cod_empresa
    AND tran_class_sucata.num_aviso_rec = mr_aviso_rec.num_aviso_rec
    AND tran_class_sucata.ies_status    = "1"
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 OR
    l_contador IS NULL THEN
    LET l_contador = 0
 END IF

 IF l_contador > 0 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

#------------------------------------------------------------#
 FUNCTION sup0552_verifica_item_dev_terc(l_contr_terc_no_dep, l_conta_array)
#------------------------------------------------------------#
  DEFINE l_contr_terc_no_dep CHAR(01),
         l_count             SMALLINT,
         l_conta_array       SMALLINT

  LET l_count = 0

  WHENEVER ERROR CONTINUE
    SELECT COUNT(*)
      INTO l_count
      FROM item_dev_terc
     WHERE item_dev_terc.cod_empresa    = mr_w_sup0552_4.empresa
       AND item_dev_terc.num_nf         = mr_w_sup0552_4.nota_fiscal
       AND item_dev_terc.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
       AND item_dev_terc.ssr_nf         = mr_w_sup0552_4.subserie_nf
       AND item_dev_terc.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
       AND item_dev_terc.cod_fornecedor = mr_w_sup0552_4.fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('LEITURA','ITEM_DEV_TERC')
     RETURN FALSE
  END IF

  IF l_count IS NULL THEN
     LET l_count = 0
  END IF

  IF l_count > 0 THEN
     IF  mr_nf_sup.ies_nf_aguard_nfe = 'A'
     OR (mr_nf_sup.ies_nf_aguard_nfe = 'B'
     AND l_contr_terc_no_dep = 'S') THEN
        LET l_conta_array = l_conta_array + 1
        CALL sup0552_carrega_chave_consiste(l_conta_array)
        LET ma_array_consistencias[l_conta_array].txt_consistencia  = 'Nota tipo A/B relacionada com nota tipo A/B (SUP2300), excluir relacionamento.'
        RETURN TRUE
     ELSE
        IF mr_nf_sup.ies_especie_nf = 'NFR' THEN
           LET l_conta_array = l_conta_array + 1
           CALL sup0552_carrega_chave_consiste(l_conta_array)
           LET ma_array_consistencias[l_conta_array].txt_consistencia  = 'Exclusão não permitida. Nota fiscal de remessa com retorno (SUP2300).'
           RETURN TRUE
        END IF
     END IF
  END IF

  RETURN FALSE

END FUNCTION

#--------------------------------#
 FUNCTION sup0552_exclusao_nota(l_conta_array)
#--------------------------------#
 DEFINE l_nr_nf               CHAR(7),
        l_cont                SMALLINT,
        l_num_nf              LIKE reten_irrf_pg.num_nf,
        l_num_ar_imp          LIKE aviso_rec_proc_imp.num_aviso_rec,
        l_num_ar_proc         LIKE processo_imp.num_aviso_rec,
        l_ies_situa_import    LIKE nf_sup.ies_situa_import,
        lr_nf_sup_erro        RECORD LIKE nf_sup_erro.*,
        l_num_oc_oln          LIKE ordem_sup.num_oc,
        l_pre_unit_oc_oln     LIKE ordem_sup.pre_unit_oc,
        l_dat_emis_oln        LIKE ordem_sup.dat_entrega_prev,
        l_qtd_recebida        LIKE ordem_sup.qtd_solic,
        l_fat_conver_unid     LIKE ordem_sup.fat_conver_unid,
        l_qtd_item            LIKE ordem_sup.qtd_solic,
        l_val_liquido_item    LIKE aviso_rec.val_liquido_item,
        l_num_seq             LIKE aviso_rec.num_seq,
        l_msg                 CHAR(100)

 DEFINE lr_item_ret_terc RECORD LIKE item_ret_terc.*,
        l_inventario_destino LIKE fat_transf_pat.inventario_destino,
        lr_patrimonio         RECORD LIKE patrimonio.*,
        lr_patrparc           RECORD LIKE patrparc.*,
        l_conta              LIKE plano_contas.num_conta,
        l_prog_contagem      LIKE par_sup_pad.par_txt,
        l_ies_volume         LIKE item_ctr_grade.ies_volume,
        lr_ar_x_nf_pend      RECORD LIKE ar_x_nf_pend.*,
        l_nf_remessa         LIKE sup_retn_item_terc.nf_remessa,
        l_seq_nf_remessa     LIKE sup_retn_item_terc.seq_nf_remessa,
        l_seq_tabulacao      LIKE sup_retn_item_terc.seq_tabulacao,
        l_qtd_devolvida      LIKE sup_retn_item_terc.qtd_devolvida,
        l_parametro          LIKE sup_par_ar.parametro,
        l_nfr_import         SMALLINT,
        l_num_processo       LIKE processo_imp.num_processo,
        l_inicio_provisao    DECIMAL(6,0),
        l_ies_situa_ar       LIKE aviso_rec.ies_situa_ar,
        l_conta_array        SMALLINT

## 407088
 DEFINE l_cod_fornecedor     LIKE nf_sup.cod_fornecedor

 IF sup0552_verifica_item_dev_terc(m_contr_terc_no_dep, l_conta_array) THEN
    LET l_conta_array = l_conta_array + 1
    #Chamada da mensagem retirada pois a funcao do sup3762 ja apresenta mensagem (OS522401)
    #CALL log0030_mensagem("Nota tipo A/B relacionada com nota tipo A/B(SUP2300), excluir relacionamento","exclamation")
    RETURN l_conta_array
 END IF

 IF sup0552_verifica_classificacao_sucata() = TRUE THEN
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Existe classificacao de sucata/materia-prima para este AR. "
    RETURN l_conta_array
 END IF

 LET l_nfr_import = FALSE
 IF sup0552_nfr_consignatario("EXCLUSAO") THEN
   LET l_nfr_import = TRUE
 END IF

 IF mr_nf_sup.cod_operacao[1] = "7" OR l_nfr_import THEN
    IF sup0552_possui_rateio_compl() THEN
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Nota fiscal possui rateio de despesa complementar de importacao (SUP5010) "
       RETURN l_conta_array
    END IF

    LET l_num_processo = sup0552_busca_numero_processo_importacao()
    IF l_num_processo IS NULL THEN
       LET l_num_processo = l_inicio_provisao
    END IF

    IF (m_ies_utiliz_provisao = "N" OR
       (m_ies_utiliz_provisao = "S" AND
        l_num_processo < l_inicio_provisao) OR
       (m_ies_utiliz_provisao = "S" AND m_utiliz_nfm_import = "S" AND
        l_num_processo >= l_inicio_provisao)) THEN
       LET l_num_ar_proc = sup0552_leitura_processo_imp(mr_aviso_rec.cod_empresa, l_num_processo,"AR")
       IF l_num_ar_proc IS NOT NULL THEN
          INITIALIZE l_ies_situa_import TO NULL
          WHENEVER ERROR CONTINUE
          SELECT ies_situa_import
            INTO l_ies_situa_import
            FROM nf_sup
           WHERE cod_empresa   = mr_aviso_rec.cod_empresa
             AND num_aviso_rec = l_num_ar_proc
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("SELECAO","NF_SUP")
          END IF
          IF l_ies_situa_import IS NOT NULL AND
             l_ies_situa_import = "E" THEN
             IF NOT sup0552_verifica_nfp_incl_apos_encerr(mr_aviso_rec.cod_empresa,
                                                          mr_aviso_rec.num_aviso_rec) THEN
                LET l_conta_array = l_conta_array + 1
                CALL sup0552_carrega_chave_consiste(l_conta_array)
                LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Processo de importacao ja encerrado "
                RETURN l_conta_array
             END IF
          END IF
       END IF
    END IF
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_num_seqs CURSOR FOR
 SELECT num_seq, num_pedido, num_oc
  FROM aviso_rec
 WHERE cod_empresa   = mr_aviso_rec.cod_empresa
   AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
   AND num_pedido    > 0
 ORDER BY num_oc
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_NUM_SEQS")
 END IF

 LET m_count_seq = 1
 INITIALIZE ma_inf_ar TO NULL
 WHENEVER ERROR CONTINUE
 FOREACH cq_num_seqs INTO ma_inf_ar[m_count_seq].num_seq,
                          ma_inf_ar[m_count_seq].num_pedido,
                          ma_inf_ar[m_count_seq].num_oc

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("FOREACH","CQ_NUM_SEQS")
 END IF
    LET m_count_seq = m_count_seq + 1
    IF m_count_seq > 999 THEN
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Estouro de array - cq_num_seqs"
       CLOSE cq_num_seqs #764215#
       FREE  cq_num_seqs #764215#
       RETURN l_conta_array
    END IF
 END FOREACH
 WHENEVER ERROR STOP
 FREE  cq_num_seqs #764215#
 LET m_count_seq = m_count_seq - 1

 IF mr_nf_sup.ies_nf_aguard_nfe = "4" THEN
    IF sup0552_nota_faturamento() THEN
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Excluir nota de faturamento de consignacao "
       RETURN l_conta_array
    END IF
 END IF

 IF mr_nf_sup.ies_especie_nf = "NFM" THEN
    WHENEVER ERROR CONTINUE
    LET l_cont = 0
    SELECT COUNT(*)
      INTO l_cont
      FROM ar_x_nf_pend
     WHERE ar_x_nf_pend.cod_empresa    = mr_w_sup0552_4.empresa
       AND ar_x_nf_pend.num_nf         = mr_w_sup0552_4.nota_fiscal
       AND ar_x_nf_pend.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
       AND ar_x_nf_pend.ssr_nf         = mr_w_sup0552_4.subserie_nf
       AND ar_x_nf_pend.cod_fornecedor = mr_w_sup0552_4.fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       IF l_cont > 0 THEN
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Existe NFP relacionada com esta NFM "
          RETURN l_conta_array
       END IF
    END IF
 END IF

    CALL sup0552_verifica_impostos_ja_pagos(l_conta_array) RETURNING l_conta_array

    LET m_houve_erro = FALSE

   IF find4GLFunction('supy75_verifica_cliente_859') THEN
      IF supy75_verifica_cliente_859() THEN
         IF find4GLFunction('supy75_atualiza_wbt_nota_fiscal') THEN
            CALL supy75_atualiza_wbt_nota_fiscal(4,2,"",mr_aviso_rec.cod_empresa,mr_aviso_rec.num_aviso_rec)
         END IF
      END IF
   END IF
   # FIM OS 532222

   IF m_cred_st_fat = "S"
   OR m_cred_st_fat = "E" THEN
      IF NOT sup1466_valida_saldo_com_revd_st(mr_aviso_rec.cod_empresa,mr_aviso_rec.num_aviso_rec,0,"EXCLUSAO") THEN
         LET m_houve_erro = TRUE
         RETURN l_conta_array
      END IF
   END IF

   IF mr_nf_sup.ies_nf_aguard_nfe <> "4"
   OR ( mr_nf_sup.ies_nf_aguard_nfe = "4" AND
        sup0552_nota_faturamento() = FALSE ) THEN

     WHENEVER ERROR CONTINUE
     DECLARE cq_excnot CURSOR WITH HOLD FOR
      SELECT cod_empresa          ,
             cod_empresa_estab    ,
             num_aviso_rec        ,
             num_seq              ,
             dat_inclusao_seq     ,
             ies_situa_ar         ,
             ies_incl_almox       ,
             ies_receb_fiscal     ,
             ies_liberacao_ar     ,
             ies_liberacao_cont   ,
             ies_liberacao_insp   ,
             ies_diverg_listada   ,
             ies_item_estoq       ,
             ies_controle_lote    ,
             cod_comprador        ,
             num_pedido           ,
             num_oc               ,
             cod_item             ,
             den_item             ,
             cod_cla_fisc         ,
             cod_unid_med_nf      ,
             pre_unit_nf          ,
             val_despesa_aces_i   ,
             ies_da_bc_ipi        ,
             cod_incid_ipi        ,
             ies_tip_incid_ipi    ,
             pct_direito_cred     ,
             pct_ipi_declarad     ,
             ies_bitributacao     ,
             val_base_c_ipi_it    ,
             val_base_c_ipi_da    ,
             val_ipi_decl_item    ,
             val_ipi_calc_item    ,
             val_ipi_desp_aces    ,
             val_desc_item        ,
             val_liquido_item     ,
             val_contabil_item    ,
             qtd_declarad_nf      ,
             qtd_recebida         ,
             qtd_devolvid         ,
             dat_devoluc          ,
             val_devoluc          ,
             num_nf_dev           ,
             qtd_rejeit           ,
             qtd_liber            ,
             qtd_liber_excep      ,
             cus_tot_item         ,
             cod_fiscal_item      ,
             gru_ctr_desp_item    ,
             cod_local_estoq      ,
             num_lote             ,
             cod_operac_estoq     ,
             val_base_c_item_d    ,
             val_base_c_item_c    ,
             pct_icms_item_d      ,
             pct_icms_item_c      ,
             pct_red_bc_item_d    ,
             pct_red_bc_item_c    ,
             pct_diferen_item_d   ,
             pct_diferen_item_c   ,
             val_icms_item_d      ,
             val_icms_item_c      ,
             val_base_c_icms_da   ,
             val_icms_diferen_i   ,
             val_icms_desp_aces   ,
             ies_incid_icms_ite   ,
             val_frete            ,
             val_icms_frete_d     ,
             val_icms_frete_c     ,
             val_base_c_frete_d   ,
             val_base_c_frete_c   ,
             val_icms_diferen_f   ,
             pct_icms_frete_d     ,
             pct_icms_frete_c     ,
             pct_red_bc_frete_d   ,
             pct_red_bc_frete_c   ,
             pct_diferen_fret_d   ,
             pct_diferen_fret_c   ,
             val_acrescimos       ,
             val_enc_financ       ,
             ies_contabil         ,
             ies_total_nf         ,
             val_compl_estoque    ,
             dat_ref_val_compl    ,
             pct_enc_financ       ,
             cod_cla_fisc_nf      ,
             cod_tip_despesa      ,
             observacao
        FROM aviso_rec
       WHERE cod_empresa    = mr_aviso_rec.cod_empresa
         AND num_aviso_rec  = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DECLARE","AVISO_REC")
     END IF

     WHENEVER ERROR CONTINUE
     FOREACH cq_excnot INTO mr_aviso_rec.*

     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("FOREACH","CQ_EXCNOT")
     END IF

       CALL sup3762_busca_fornecedor_triangulacao(mr_aviso_rec.num_aviso_rec, mr_aviso_rec.num_seq) RETURNING l_cod_fornecedor

       IF mr_nf_sup.ies_nf_aguard_nfe = "4" THEN
          WHENEVER ERROR CONTINUE
          DELETE FROM sup_item_terc_end
          WHERE empresa           = mr_nf_sup.cod_empresa
            AND nota_fiscal       = mr_nf_sup.num_nf
            AND serie_nota_fiscal = mr_nf_sup.ser_nf
            AND subserie_nf       = mr_nf_sup.ssr_nf
            AND espc_nota_fiscal  = mr_nf_sup.ies_especie_nf
            AND fornecedor        = l_cod_fornecedor
            AND seq_aviso_recebto = mr_aviso_rec.num_seq
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
            CALL log003_err_sql("EXCLUSAO","SUP_ITEM_TERC_END")
            LET m_houve_erro = TRUE

            CLOSE cq_excnot #764215#
            FREE  cq_excnot #764215#

            RETURN l_conta_array
          END IF
          WHENEVER ERROR CONTINUE
          DELETE FROM item_de_terc
           WHERE cod_empresa    = mr_nf_sup.cod_empresa
             AND num_nf         = mr_nf_sup.num_nf
             AND ser_nf         = mr_nf_sup.ser_nf
             AND ssr_nf         = mr_nf_sup.ssr_nf
             AND ies_especie_nf = mr_nf_sup.ies_especie_nf
             AND cod_fornecedor = l_cod_fornecedor
             AND num_sequencia  = mr_aviso_rec.num_seq
          WHENEVER ERROR STOP
          IF SQLCA.SQLCODE <> 0 THEN
             LET m_houve_erro = TRUE
             CALL log003_err_sql("DELETE","ITEM_DE_TERC")

             CLOSE cq_excnot #764215#
             FREE  cq_excnot #764215#

             RETURN l_conta_array
          END IF
       END IF

       CALL sup0552_verifica_cond_delecao("EX_NOTA", l_conta_array) RETURNING m_status, l_conta_array
       # Não tem concistencia de delecao
       IF m_status THEN
         IF mr_nf_sup.num_conhec IS NOT NULL AND mr_nf_sup.num_conhec > 0 THEN
            LET l_conta_array = l_conta_array + 1
            CALL sup0552_carrega_chave_consiste(l_conta_array)
            LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Existe frete relacionado com a Nota. Excluir relacionamento."

            LET m_houve_erro = TRUE

            CLOSE cq_excnot #764215#
            FREE  cq_excnot #764215#

            RETURN l_conta_array
         ELSE
            IF mr_nf_sup.ies_nf_aguard_nfe <> "7" THEN
               IF mr_nf_sup.ies_nf_aguard_nfe <> "5" THEN
                  IF NOT sup0552_possui_avf_insp_ar() THEN
                     IF  mr_aviso_rec.ies_liberacao_insp = "S"
                     AND mr_aviso_rec.ies_situa_ar       = "E" THEN

                        ## O programa sup0570 não está preparado para trabalhar com transação
                        ## sendo assim sempre qdo o item tiver que excluir inspeção ou contagem
                        ## será necessário fazer manualmente.
                        LET m_houve_erro = TRUE
                        LET l_conta_array = l_conta_array + 1
                        CALL sup0552_carrega_chave_consiste(l_conta_array)
                        LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Não foi possível excluir a inspeção. Excluir manualmente. "

                        CLOSE cq_excnot #764215#
                        FREE  cq_excnot #764215#

                        RETURN l_conta_array

                        ### OS237529 ###
                        INITIALIZE l_prog_contagem TO NULL
                        WHENEVER ERROR CONTINUE
                        SELECT par_txt
                          INTO l_prog_contagem
                          FROM par_sup_pad
                         WHERE par_sup_pad.cod_empresa   = mr_nf_sup.cod_empresa
                           AND par_sup_pad.cod_parametro = "prog_contagem"
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode <> 0 OR
                           l_prog_contagem IS NULL THEN
                            LET l_prog_contagem = " "
                         END IF

                         IF l_prog_contagem = "sup0799" THEN
                            LET m_houve_erro = TRUE
                            LET l_conta_array = l_conta_array + 1
                            CALL sup0552_carrega_chave_consiste(l_conta_array)
                            LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Exclua primeiramente resultado de contagem - SUP0799 "

                            CLOSE cq_excnot #764215#
                            FREE  cq_excnot #764215#

                            RETURN l_conta_array
                         END IF
                         IF m_eh_background = FALSE THEN
                            ERROR " Aguarde ... Excluindo Inspecao ... "
                         END IF
                         CALL log120_procura_caminho("sup0570") RETURNING m_comando3
                         LET m_comando3 = m_comando3 CLIPPED, " ",  mr_aviso_rec.cod_empresa, " ",
                                                          mr_aviso_rec.num_aviso_rec,  " ",
                                                          mr_aviso_rec.num_seq, " ",
                                                          "EXCLUSAO"," ",
                                                          "SUP3760"
                         RUN m_comando3 RETURNING p_cancel

                         LET l_ies_situa_ar = NULL
                         CALL sup0552_busca_aviso_rec(mr_aviso_rec.cod_empresa, mr_aviso_rec.num_aviso_rec, mr_aviso_rec.num_seq)
                         LET l_ies_situa_ar = mr_aviso_rec.ies_situa_ar

                         IF mr_aviso_rec.ies_item_estoq = "S" THEN
                            CALL sup0063_verifica_controles(1, mr_aviso_rec.cod_item, "INCLUSAO","SUP0552") RETURNING m_controles
                         ELSE
                            CALL sup0063_verifica_controles(11, mr_aviso_rec.cod_item, "INCLUSAO","SUP0552") RETURNING m_controles
                         END IF

                         IF  m_ies_custo_grade = "S"
                         AND m_controles      <> " " THEN
                            ## Quando a empresa utiliza custo por grade, a contagem
                            ## eh excluida ja quando faz a exclusao da inspecao.
                            IF l_ies_situa_ar <> "C" THEN
                               LET m_houve_erro = TRUE
                               LET l_conta_array = l_conta_array + 1
                               CALL sup0552_carrega_chave_consiste(l_conta_array)
                               LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Problemas na exclusao da inspecao. "

                               CLOSE cq_excnot #764215#
                               FREE  cq_excnot #764215#

                               RETURN l_conta_array
                            END IF
                         ELSE
                            IF l_ies_situa_ar <> "I" THEN
                               LET m_houve_erro = TRUE
                               LET l_conta_array = l_conta_array + 1
                               CALL sup0552_carrega_chave_consiste(l_conta_array)
                               LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Problemas na exclusao da inspecao. "

                               CLOSE cq_excnot #764215#
                               FREE  cq_excnot #764215#

                               RETURN l_conta_array
                            END IF
                         END IF
                         IF m_eh_background = FALSE THEN
                            ERROR " Exclusao de inspecao realizada com sucesso. "
                         END IF
                      END IF
                   ELSE
                      IF mr_aviso_rec.ies_item_estoq = "S" THEN
                         IF avf1003_exclusao_qualidade(mr_aviso_rec.num_aviso_rec,
                                                       mr_aviso_rec.num_seq) = FALSE THEN
                            LET m_houve_erro = TRUE
                            LET l_conta_array = l_conta_array + 1
                            CALL sup0552_carrega_chave_consiste(l_conta_array)
                            LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Problemas na exclusao da inspecao (AVF). "

                            CLOSE cq_excnot #764215#
                            FREE  cq_excnot #764215#

                            RETURN l_conta_array
                         ELSE
                            #efetiva transacao para não bloquear
                            #exclusão de inspeção no SUP0570
                            IF m_tipo_de_processo = "I" THEN
                               IF m_transacao_ativa THEN
                                  WHENEVER ERROR CONTINUE
                                  CALL log085_transacao("COMMIT")
                                  WHENEVER ERROR STOP
                                  IF sqlca.sqlcode <> 0 THEN
                                     CALL log003_err_sql("EFETIVACAO","NF_SUP")
                                     CALL log085_transacao("ROLLBACK") #OS596059

                                     CLOSE cq_excnot #764215#
                                     FREE  cq_excnot #764215#

                                     RETURN l_conta_array
                                  END IF
                                  LET m_transacao_ativa = FALSE
                                  WHENEVER ERROR CONTINUE
                                  CALL log085_transacao("BEGIN")
                                  WHENEVER ERROR STOP
                                  LET m_transacao_ativa = TRUE
                               END IF
                            END IF
                         END IF
                      ELSE
                         #efetiva transacao para não bloquear
                         #exclusão de inspeção no SUP0570
                         IF m_tipo_de_processo = "I" THEN
                            IF m_transacao_ativa THEN
                               WHENEVER ERROR CONTINUE
                               CALL log085_transacao("COMMIT")
                               WHENEVER ERROR STOP
                               IF sqlca.sqlcode <> 0 THEN
                                  CALL log003_err_sql("EFETIVACAO","NF_SUP")
                                  CALL log085_transacao("ROLLBACK") #OS596059

                                  CLOSE cq_excnot #764215#
                                  FREE  cq_excnot #764215#

                                  RETURN l_conta_array
                               END IF
                               LET m_transacao_ativa = FALSE
                               WHENEVER ERROR CONTINUE
                               CALL log085_transacao("BEGIN")
                               WHENEVER ERROR STOP
                               IF sqlca.sqlcode <> 0 THEN
                                  CALL log003_err_sql("TRANSACAO","BEGIN")
                               END IF
                               LET m_transacao_ativa = TRUE
                            END IF
                         END IF
                      END IF
                   END IF
                END IF

                 IF mr_aviso_rec.ies_liberacao_cont = "S" THEN
                     IF m_eh_background = FALSE THEN
                        ERROR " Aguarde ... Excluindo contagem ... "
                     END IF

                     ## O programa sup0570 não está preparado para trabalhar com transação
                     ## sendo assim sempre qdo o item tiver que excluir inspeção ou contagem
                     ## será necessário fazer manualmente.
                     LET m_houve_erro = TRUE
                     LET l_conta_array = l_conta_array + 1
                     CALL sup0552_carrega_chave_consiste(l_conta_array)
                     LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Não foi possível excluir a contagem. Excluir manualmente. "

                     CLOSE cq_excnot #764215#
                     FREE  cq_excnot #764215#

                     RETURN l_conta_array

                     CALL sup0552_atualiza_nota(mr_w_sup0552_4.empresa, mr_w_sup0552_4.nota_fiscal, mr_w_sup0552_4.serie_nota_fiscal,
                                                mr_w_sup0552_4.subserie_nf, mr_w_sup0552_4.fornecedor,
                                                mr_aviso_rec.num_aviso_rec, mr_w_sup0552_4.cond_pagto)

                     CALL log120_procura_caminho("sup0530") RETURNING m_comando3
                     LET m_comando3 = m_comando3 CLIPPED, " ", mr_aviso_rec.cod_empresa,
                                                      " ", mr_aviso_rec.num_aviso_rec,
                                                      " ", mr_aviso_rec.num_seq,
                                                      " ", 3760,
                                                      " ", "S",
                                                      " ", "EXCLUSAO",
                                                      " ", 0,
                                                      " ", "N",
                                                      " ", "S"
                     RUN m_comando3 RETURNING p_cancel
                     LET l_ies_situa_ar = NULL
                     CALL sup0552_busca_aviso_rec(mr_aviso_rec.cod_empresa, mr_aviso_rec.num_aviso_rec, mr_aviso_rec.num_seq)
                     LET l_ies_situa_ar = mr_aviso_rec.ies_situa_ar
                     IF l_ies_situa_ar <> "C" THEN
                        LET m_houve_erro = TRUE
                        LET l_conta_array = l_conta_array + 1
                        CALL sup0552_carrega_chave_consiste(l_conta_array)
                        LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Problemas na exclusao da contagem. "

                        CLOSE cq_excnot #764215#
                        FREE  cq_excnot #764215#

                        RETURN l_conta_array
                     END IF
                     IF m_eh_background = FALSE THEN
                        ERROR " Exclusao de contagem realizada com sucesso. "
                     END IF
                 END IF
              END IF
           END IF
         END IF
         WHENEVER ERROR CONTINUE
         LET l_cont = 0
         SELECT count(*)
           INTO l_cont
           FROM deb_fornec
          WHERE cod_empresa   = mr_aviso_rec.cod_empresa
            AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
            AND num_seq       = mr_aviso_rec.num_seq
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 THEN
            CALL log003_err_sql("SELECAO","DEB_FORNEC")
         END IF
         IF l_cont = 0 THEN
         ELSE
            LET l_conta_array = l_conta_array + 1
            CALL sup0552_carrega_chave_consiste(l_conta_array)
            LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Existe deb_fornec - excluir registro no sup5960"
            LET m_houve_erro = TRUE

            CLOSE cq_excnot #764215#
            FREE  cq_excnot #764215#

            RETURN l_conta_array
         END IF

         WHENEVER ERROR CONTINUE
         LET l_cont = 0
         SELECT count(*)
           INTO l_cont
           FROM dev_fornec
          WHERE cod_empresa   = mr_aviso_rec.cod_empresa
            AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
            AND num_seq       = mr_aviso_rec.num_seq
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 THEN
            CALL log003_err_sql("SELECAO","DEV_FORNEC")
         END IF
         IF l_cont = 0 THEN
         ELSE
            LET l_conta_array = l_conta_array + 1
            CALL sup0552_carrega_chave_consiste(l_conta_array)
            LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Existe devolução a fornecedor - excluir registro no sup0460"
            LET m_houve_erro = TRUE

            CLOSE cq_excnot #764215#
            FREE  cq_excnot #764215#

            RETURN l_conta_array
         END IF
     END FOREACH
     WHENEVER ERROR STOP
     FREE  cq_excnot #764215#
   END IF

   IF  (m_tipo_de_processo = "E"
        OR m_tipo_de_processo = "A")
   AND m_houve_erro THEN
      IF m_transacao_ativa THEN
         WHENEVER ERROR CONTINUE
         CALL log085_transacao("COMMIT")
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 THEN
            CALL log003_err_sql("TRANSACAO","COMMIT")
            CALL log085_transacao("ROLLBACK") #OS596059
            RETURN l_conta_array
         END IF

         WHENEVER ERROR CONTINUE
         CALL log085_transacao("BEGIN")
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 THEN
            CALL log003_err_sql("TRANSACAO","BEGIN")
         END IF
      END IF
   END IF

   WHENEVER ERROR CONTINUE
   DECLARE cq_excpatr CURSOR WITH HOLD FOR
     SELECT cod_empresa          ,
            cod_empresa_estab    ,
            num_aviso_rec        ,
            num_seq              ,
            dat_inclusao_seq     ,
            ies_situa_ar         ,
            ies_incl_almox       ,
            ies_receb_fiscal     ,
            ies_liberacao_ar     ,
            ies_liberacao_cont   ,
            ies_liberacao_insp   ,
            ies_diverg_listada   ,
            ies_item_estoq       ,
            ies_controle_lote    ,
            cod_comprador        ,
            num_pedido           ,
            num_oc               ,
            cod_item             ,
            den_item             ,
            cod_cla_fisc         ,
            cod_unid_med_nf      ,
            pre_unit_nf          ,
            val_despesa_aces_i   ,
            ies_da_bc_ipi        ,
            cod_incid_ipi        ,
            ies_tip_incid_ipi    ,
            pct_direito_cred     ,
            pct_ipi_declarad     ,
            ies_bitributacao     ,
            val_base_c_ipi_it    ,
            val_base_c_ipi_da    ,
            val_ipi_decl_item    ,
            val_ipi_calc_item    ,
            val_ipi_desp_aces    ,
            val_desc_item        ,
            val_liquido_item     ,
            val_contabil_item    ,
            qtd_declarad_nf      ,
            qtd_recebida         ,
            qtd_devolvid         ,
            dat_devoluc          ,
            val_devoluc          ,
            num_nf_dev           ,
            qtd_rejeit           ,
            qtd_liber            ,
            qtd_liber_excep      ,
            cus_tot_item         ,
            cod_fiscal_item      ,
            gru_ctr_desp_item    ,
            cod_local_estoq      ,
            num_lote             ,
            cod_operac_estoq     ,
            val_base_c_item_d    ,
            val_base_c_item_c    ,
            pct_icms_item_d      ,
            pct_icms_item_c      ,
            pct_red_bc_item_d    ,
            pct_red_bc_item_c    ,
            pct_diferen_item_d   ,
            pct_diferen_item_c   ,
            val_icms_item_d      ,
            val_icms_item_c      ,
            val_base_c_icms_da   ,
            val_icms_diferen_i   ,
            val_icms_desp_aces   ,
            ies_incid_icms_ite   ,
            val_frete            ,
            val_icms_frete_d     ,
            val_icms_frete_c     ,
            val_base_c_frete_d   ,
            val_base_c_frete_c   ,
            val_icms_diferen_f   ,
            pct_icms_frete_d     ,
            pct_icms_frete_c     ,
            pct_red_bc_frete_d   ,
            pct_red_bc_frete_c   ,
            pct_diferen_fret_d   ,
            pct_diferen_fret_c   ,
            val_acrescimos       ,
            val_enc_financ       ,
            ies_contabil         ,
            ies_total_nf         ,
            val_compl_estoque    ,
            dat_ref_val_compl    ,
            pct_enc_financ       ,
            cod_cla_fisc_nf      ,
            cod_tip_despesa      ,
            observacao
       FROM aviso_rec
      WHERE cod_empresa    = mr_aviso_rec.cod_empresa
        AND num_aviso_rec  = mr_aviso_rec.num_aviso_rec
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("DECLARE","DEV_FORNEC")
   END IF

   WHENEVER ERROR CONTINUE
   FOREACH cq_excpatr INTO mr_aviso_rec.*
      ### OS 154880 ###
      IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql("LEITURA","AVISO_REC")
         LET m_houve_erro = TRUE
         CLOSE cq_excpatr #764215#
         EXIT FOREACH
      END IF

      IF NOT sup0552_verifica_devol_nf_consig(mr_nf_sup.ies_especie_nf,
                                              mr_nf_sup.ies_nf_aguard_nfe,
                                              mr_nf_sup.cod_empresa,
                                              mr_nf_sup.num_nf,
                                              mr_nf_sup.cod_fornecedor,
                                              mr_aviso_rec.cod_item,
                                              l_conta_array) THEN #-- OS 495219
         LET l_conta_array = l_conta_array + 1
         CLOSE cq_excpatr #764215#
         FREE cq_excpatr #764215#
         RETURN l_conta_array
      END IF

      IF m_ies_obt_inf_tr_unid = "S" AND
      sup0812_verifica_nota_transferencia(mr_aviso_rec.cod_empresa,
                                         mr_aviso_rec.num_aviso_rec,
                                         mr_nf_sup.num_nf,
                                         mr_nf_sup.ser_nf,
                                         mr_nf_sup.ssr_nf,
                                         mr_nf_sup.cod_fornecedor,
                                         mr_nf_sup.cod_operacao,
                                         mr_w_sup0552_4.cfop_compl) THEN
         IF g_ies_tip_controle = "J" OR
            g_ies_tip_controle = "I" THEN  #eduardo o.s.290535 18/11/03
            WHENEVER ERROR CONTINUE
            DECLARE cq_fat_transf CURSOR FOR
             SELECT inventario_destino
               FROM fat_transf_pat
### Permanecer como está na versao Beta da Tupy(04.10) pois customizacao foi
### feita pra eles (Roberta)
              WHERE empresa_destino    = mr_aviso_rec.cod_empresa
                AND aviso_recebto      = mr_aviso_rec.num_aviso_rec
                AND seq_aviso_recebto  = mr_aviso_rec.num_seq
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql("DECLARE","CQ_FAT_TRANSF")
            END IF
            WHENEVER ERROR CONTINUE
            OPEN cq_fat_transf
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql("OPEN","cq_fat_transf")
            END IF
            WHENEVER ERROR CONTINUE
            FETCH cq_fat_transf INTO l_inventario_destino
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               IF g_ies_tip_controle = "I" THEN
                  CLOSE cq_excpatr #764215#
                  CLOSE cq_fat_transf
                  FREE cq_fat_transf
                  EXIT FOREACH
               ELSE
                  LET m_houve_erro = TRUE
                  LET l_conta_array = l_conta_array + 1
                  CALL sup0552_carrega_chave_consiste(l_conta_array)
                  LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Nao encontrado relacionadomento NF origem/dest SUP1421"
                  CLOSE cq_excpatr #764215#
                  FREE  cq_excpatr #764215#
                  CLOSE cq_fat_transf
                  FREE cq_fat_transf
                  RETURN l_conta_array
               END IF
            END IF
            CLOSE cq_fat_transf
            FREE cq_fat_transf

            WHENEVER ERROR CONTINUE
            UPDATE fat_transf_pat
               SET empresa_destino    = NULL,
                   inventario_destino = NULL,
                   aviso_recebto      = NULL,
                   seq_aviso_recebto  = NULL,
                   dat_entrada        = NULL
             WHERE empresa_destino    = mr_aviso_rec.cod_empresa
               AND aviso_recebto      = mr_aviso_rec.num_aviso_rec
               AND seq_aviso_recebto  = mr_aviso_rec.num_seq
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               LET m_houve_erro = TRUE
               CALL log003_err_sql("ATUALIZACAO","FAT_TRANSF_PAT")
               CLOSE cq_excpatr #764215#
               FREE  cq_excpatr #764215#
               RETURN l_conta_array
            ELSE
               WHENEVER ERROR CONTINUE
               DELETE FROM patrval
                WHERE cod_empresa       = mr_aviso_rec.cod_empresa
                  AND cod_empresa_estab = mr_aviso_rec.cod_empresa
                  AND num_invent        = l_inventario_destino
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  LET m_houve_erro = TRUE
                  CALL log003_err_sql("EXCLUSAO","PATRVAL")
               END IF

               WHENEVER ERROR CONTINUE
               DELETE FROM patrparc
                WHERE cod_empresa       = mr_aviso_rec.cod_empresa
                  AND cod_empresa_estab = mr_aviso_rec.cod_empresa
                  AND num_invent_pai     = l_inventario_destino
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  LET m_houve_erro = TRUE
                  CALL log003_err_sql("EXCLUSAO","PATRPARC")
               END IF

               WHENEVER ERROR CONTINUE
               DELETE FROM patrimonio
                WHERE cod_empresa = mr_aviso_rec.cod_empresa
                  AND num_invent  = l_inventario_destino
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  LET m_houve_erro = TRUE
                  CALL log003_err_sql("EXCLUSAO","PATRIMONIO")
               END IF
            END IF
         END IF

         WHENEVER ERROR CONTINUE
         INSERT INTO nf_sup_erro
                (empresa,
                 num_aviso_rec,
                 num_seq,
                 des_pendencia_item,
                 ies_origem_erro,
                 ies_erro_grave
                 )
         VALUES (mr_aviso_rec.cod_empresa,
                 mr_aviso_rec.num_aviso_rec,
                 mr_aviso_rec.num_seq,
                 " Item da NF de origem pendente de recebimento ",
                 "1",
                 "S")
         WHENEVER ERROR STOP

         IF sqlca.sqlcode <> 0 THEN
            LET m_houve_erro = TRUE
            LET l_conta_array = l_conta_array + 1
            CALL sup0552_carrega_chave_consiste(l_conta_array)
            LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da NF_SUP_ERRO "
            LET m_status_arquivo = 1
         END IF

      END IF

      WHENEVER ERROR CONTINUE
      ### FIM OS 154880 ###
   END FOREACH
   WHENEVER ERROR STOP
   FREE cq_excpatr #764215#

   WHENEVER ERROR CONTINUE
   DELETE FROM nf_sup_erro
    WHERE nf_sup_erro.empresa = mr_aviso_rec.cod_empresa
      AND nf_sup_erro.num_aviso_rec = mr_aviso_rec.num_aviso_rec
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("DELETE","NF_SUP_ERRO")
   END IF

   LET l_nr_nf = mr_w_sup0552_4.nota_fiscal

   CALL sup0552_deleta_inss_auton(l_nr_nf,mr_aviso_rec.num_seq)

   IF NOT sup0552_transfere_h_est_trans_de_terc(l_conta_array) THEN
      LET l_conta_array = l_conta_array + 1
   END IF

   IF mr_nf_sup.ies_nf_aguard_nfe = "4" THEN
      WHENEVER ERROR CONTINUE
      DELETE FROM est_trans_de_terc
       WHERE cod_empresa    = mr_w_sup0552_4.empresa
         AND num_nf         = mr_w_sup0552_4.nota_fiscal
         AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
         AND ssr_nf         = mr_w_sup0552_4.subserie_nf
         AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
         AND cod_fornecedor = mr_w_sup0552_4.fornecedor
         AND ies_situacao   = "3"
      WHENEVER ERROR STOP
      IF SQLCA.SQLCODE <> 0 THEN
         LET m_houve_erro = TRUE
         CALL log003_err_sql("DELETE","EST_TRANS_DE_TERC")
         RETURN l_conta_array
      END IF
   END IF

   IF ((mr_nf_sup.cod_operacao[1] = "7" AND
      (mr_nf_sup.ies_especie_nf = "NFE" OR
       mr_nf_sup.ies_especie_nf = "NFP" )) OR l_nfr_import) AND
     ((m_ies_utiliz_provisao = "S" AND
       m_utiliz_nfm_import = "N" AND
       l_num_processo >= l_inicio_provisao) OR
       mr_nf_sup.ies_situa_import = "R") THEN
      LET l_num_processo = sup0552_busca_numero_processo_importacao()
      IF l_num_processo IS NULL THEN
         LET l_num_processo = -1
      END IF
      IF l_num_processo <> -1 THEN
         IF l_num_processo >= m_proc_ini_os163407 THEN
            IF NOT imp0101_desfaz_rateio(l_num_processo,mr_aviso_rec.num_aviso_rec,-1) THEN
               LET l_conta_array = l_conta_array + 1
               CALL sup0552_carrega_chave_consiste(l_conta_array)
               LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Problema ao desfazer o rateio das despesas de importacao"
               LET m_houve_erro = TRUE
               RETURN l_conta_array
            END IF
         ELSE
            IF NOT imp0101_desfaz_rateio_ant(l_num_processo,mr_aviso_rec.num_aviso_rec,-1) THEN
               LET l_conta_array = l_conta_array + 1
               CALL sup0552_carrega_chave_consiste(l_conta_array)
               LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Problema ao desfazer o rateio das despesas de importacao"
               LET m_houve_erro = TRUE
               RETURN l_conta_array
            END IF
         END IF
      END IF
   END IF

   #FLUXO DE CAIXA
   IF NOT fcl1150_integra_ar_fcx(mr_aviso_rec.cod_empresa,mr_aviso_rec.num_aviso_rec,"EX") THEN
      LET m_houve_erro = TRUE
      RETURN l_conta_array
   END IF

   WHENEVER ERROR CONTINUE
   DELETE FROM nfe_sup_compl
    WHERE nfe_sup_compl.cod_empresa   = mr_aviso_rec.cod_empresa
      AND nfe_sup_compl.num_aviso_rec = mr_aviso_rec.num_aviso_rec
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("DELETE","NFE_SUP_COMPL")
   END IF

   WHENEVER ERROR CONTINUE
   DELETE FROM dest_aviso_rec
    WHERE  dest_aviso_rec.cod_empresa = mr_aviso_rec.cod_empresa
      AND  dest_aviso_rec.num_aviso_rec = mr_aviso_rec.num_aviso_rec
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("DELETE","DEST_AVISO_REC")
   END IF

   IF p_ies_contab_aen = "4" THEN
      WHENEVER ERROR CONTINUE
      DELETE FROM dest_aviso_rec4
       WHERE  dest_aviso_rec4.cod_empresa = mr_aviso_rec.cod_empresa
         AND  dest_aviso_rec4.num_aviso_rec = mr_aviso_rec.num_aviso_rec
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql("DELETE","dest_aviso_rec4")
      END IF
   END IF

   WHENEVER ERROR CONTINUE
   DELETE FROM ar_ped
    WHERE  ar_ped.cod_empresa = mr_aviso_rec.cod_empresa
      AND  ar_ped.num_aviso_rec = mr_aviso_rec.num_aviso_rec
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("DELETE","AR_PED")
   END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM ar_nf_item
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","AR_NF_ITEM")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM ar_diverg
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","AR_DIVERG")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM ar_diverg_provid
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","AR_DIVERG_PROVID")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM dev_item
   WHERE cod_empresa = mr_aviso_rec.cod_empresa
     AND num_nff     = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","DEV_ITEM")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_nf_devol_cli
   WHERE empresa       = mr_aviso_rec.cod_empresa
     AND aviso_recebto = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","sup_nf_devol_cli")
  END IF

  WHENEVER ERROR CONTINUE #OS450170
    SELECT sup_par_ar.parametro_val
      INTO m_num_ar_relac
      FROM sup_par_ar
     WHERE sup_par_ar.empresa           = mr_aviso_rec.cod_empresa
       AND sup_par_ar.aviso_recebto     = mr_aviso_rec.num_aviso_rec
       AND sup_par_ar.seq_aviso_recebto = 1
       AND sup_par_ar.parametro         = "final_cfop"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     WHENEVER ERROR CONTINUE
       DELETE FROM sup_par_ar
        WHERE empresa           = mr_aviso_rec.cod_empresa
          AND aviso_recebto     = m_num_ar_relac
          AND seq_aviso_recebto = 1
          AND parametro         = "final_cfop"
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_PAR_AR")
        LET m_houve_erro = TRUE
     ELSE
        IF sup3760_verifica_num_ar(m_num_ar_relac) THEN
           CALL sup3760_verifica_cfop_retr_serv()
        END IF
     END IF
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_par_ar
   WHERE empresa       = mr_aviso_rec.cod_empresa
     AND aviso_recebto = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","SUP_PAR_AR")
  END IF

  IF find4GLFunction('supy5_cliente_78') THEN
     IF supy5_cliente_78() = TRUE THEN
        LET l_parametro = "nfdigit_4032_", mr_w_sup0552_4.nota_fiscal USING "&&&&&&&"
        WHENEVER ERROR CONTINUE
        DELETE FROM sup_par_ar
         WHERE empresa           = mr_aviso_rec.cod_empresa
           AND aviso_recebto     = 0
           AND seq_aviso_recebto = 0
           AND parametro         = l_parametro
        WHENEVER ERROR STOP

        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("delete","sup_par_ar")
        END IF
     END IF
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_compl_nf_sup
   WHERE empresa       = mr_aviso_rec.cod_empresa
     AND aviso_recebto = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","SUP_COMPL_NF_SUP")
  END IF

#### OS 139067
  WHENEVER ERROR CONTINUE
  DELETE FROM ar_subst_tribut
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","AR_SUBST_TRIBUT")
  END IF

  ##Excluir o relacionamento dos fretes/CON ICMS ST com a NFE,
  ##para que se possa reprocessar a geração automática da NFE (SUP1265).
  IF mr_nf_sup.ies_especie_nf = "NFE" THEN ##OS 337055
     WHENEVER ERROR CONTINUE
     DELETE FROM sup_par_ar
      WHERE empresa       = mr_aviso_rec.cod_empresa
        AND parametro     = "nfe_icms_st"
        AND parametro_val = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_PAR_AR")
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM sup_par_frete
      WHERE empresa       = mr_aviso_rec.cod_empresa
        AND parametro     = "nfe_icms_st"
        AND parametro_val = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_PAR_FRETE")
     END IF
  END IF

  IF m_exporta_nf = "A" THEN
     CALL sup0552_exclui_conta_corrente("E", l_conta_array) RETURNING l_conta_array
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM ar_os_esp
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
    AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","AR_OS_ESP")
  END IF

  IF p_par_sup_compl.ies_rastreio = "1" THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM avf_insp_ar
      WHERE avf_insp_ar.empresa       = mr_aviso_rec.cod_empresa
        AND avf_insp_ar.aviso_recebto = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","avf_insp_ar")
     END IF
  END IF

  IF (mr_nf_sup.ies_especie_nf    = "NFR" OR
      mr_nf_sup.ies_especie_nf    = "NFE") AND
      mr_nf_sup.ies_nf_aguard_nfe = "X" THEN
      CALL sup0552_exclui_nf_consig("NOTA", 0)
  ELSE
     CALL sup0552_elimina_item_ret_terc(mr_nf_sup.num_aviso_rec,0,"2", l_conta_array) RETURNING m_status, l_conta_array
     IF NOT m_status THEN
        LET m_houve_erro = TRUE
        RETURN l_conta_array
     END IF
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM aviso_rec
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("EXCLUSAO","AVISO_REC")
     LET m_houve_erro = TRUE
  END IF

  ### OS 277425 ###
  IF sup3766_exclui_sup_ar_grade(mr_aviso_rec.cod_empresa,
                                 mr_aviso_rec.num_aviso_rec,
                                 0) = FALSE THEN
     LET m_houve_erro = TRUE
  END IF
  ### OS 277425 ###
  IF sup1283_exclui_sup_ar_grade(mr_aviso_rec.cod_empresa,
                                 mr_aviso_rec.num_aviso_rec,
                                 0) = FALSE THEN
     LET m_houve_erro = TRUE
  END IF
  ### FIM OS 277425 ###

  ### OS 159597 ###
  IF m_contr_pes_rec = 'S' THEN #eduardo - o.s.290538 19/11/03
     WHENEVER ERROR CONTINUE
     UPDATE sup_ctr_balanca
        SET aviso_recebto     = NULL
      WHERE empresa           = mr_w_sup0552_4.empresa
        AND num_docum         = mr_w_sup0552_4.nota_fiscal
        AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
        AND subserie_nf       = mr_w_sup0552_4.subserie_nf
        AND fornecedor        = mr_w_sup0552_4.fornecedor
        AND seq_nota_fiscal   > 0
        AND tip_pesagem       = "1"
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("UPDATE","SUP_CTR_BALANCA")
     END IF
  END IF

  IF mr_nf_sup.ies_nf_aguard_nfe = "A" THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM ar_depos
      WHERE cod_empresa   = mr_aviso_rec.cod_empresa
        AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","AR_DEPOS")
     END IF
  END IF

  IF mr_nf_sup.ies_nf_aguard_nfe = "B" THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM item_de_terc_dep
      WHERE cod_empresa     = mr_w_sup0552_4.empresa
        AND num_nf          = mr_w_sup0552_4.nota_fiscal
        AND ser_nf          = mr_w_sup0552_4.serie_nota_fiscal
        AND ies_especie_nf  = mr_w_sup0552_4.subserie_nf
        AND cod_fornecedor  = mr_w_sup0552_4.fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","ITEM_DE_TERC_DEP")
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM ar_fornec_depos
      WHERE cod_empresa   = mr_aviso_rec.cod_empresa
        AND num_ar_depos  = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","AR_FORNEC_DEPOS")
     END IF
  END IF

  CALL LOG_setVar("empresa",mr_aviso_rec.cod_empresa)
  IF NOT sup1031_grava_audit_ar(mr_aviso_rec.num_aviso_rec,
                                0, ##EXCLUSAO TOTAL DA NOTA FISCAL
                                "SUP3760","5") THEN
     LET m_houve_erro = TRUE
  END IF

  IF mr_w_sup0552_4.empresa_estabel IS NULL THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM rec_find_ent_ar
      WHERE empresa         = mr_aviso_rec.cod_empresa
        AND empresa_estabel IS NULL
        AND aviso_recebto   = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","REC_FIND_ENT_AR")
     END IF
  ELSE
     WHENEVER ERROR CONTINUE
     DELETE FROM rec_find_ent_ar
      WHERE empresa         = mr_w_sup0552_4.empresa
        AND empresa_estabel = mr_w_sup0552_4.empresa_estabel
        AND aviso_recebto   = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","REC_FIND_ENT_AR")
     END IF
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM aviso_rec_compl_sq
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","AVISO_REC_COMPL_SQ")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM aviso_rec_aux
   WHERE cod_empresa = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","AVISO_REC_AUX")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM dev_mestre
   WHERE cod_empresa = mr_aviso_rec.cod_empresa
     AND num_nff     = mr_aviso_rec.num_aviso_rec
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
      CALL log003_err_sql("EXCLUSAO","DEV_MESTRE")
      LET m_houve_erro = TRUE
      RETURN l_conta_array
   END IF

# OS 134963
  WHENEVER ERROR CONTINUE
  DELETE FROM audit_sup_cre
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("EXCLUSAO","AUDIT_SUP_CRE")
     LET m_houve_erro = TRUE
     RETURN l_conta_array
  END IF

# OS 81443
  WHENEVER ERROR CONTINUE
  DELETE FROM ar_frete_cesta
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR CONTINUE
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","AR_FRETE_CESTA")
  END IF
  WHENEVER ERROR CONTINUE
  DELETE FROM sup_item_terc_end
  WHERE empresa           = mr_w_sup0552_4.empresa
    AND nota_fiscal       = mr_w_sup0552_4.nota_fiscal
    AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
    AND subserie_nf       = mr_w_sup0552_4.subserie_nf
    AND espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
    AND fornecedor        = l_cod_fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("EXCLUSAO","SUP_ITEM_TERC_END")
     LET m_houve_erro = TRUE
     RETURN l_conta_array
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM item_de_terc
   WHERE cod_empresa    = mr_w_sup0552_4.empresa
     AND num_nf         = mr_w_sup0552_4.nota_fiscal
     AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
     AND ssr_nf         = mr_w_sup0552_4.subserie_nf
     AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
     AND cod_fornecedor = l_cod_fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","ITEM_DE_TERC")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM item_de_terc_compl
   WHERE cod_empresa    = mr_w_sup0552_4.empresa
     AND num_nf         = mr_w_sup0552_4.nota_fiscal
     AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
     AND ssr_nf         = mr_w_sup0552_4.subserie_nf
     AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
     AND cod_fornec_nf  = l_cod_fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","ITEM_DE_TERC_COMPL")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM item_de_terc_area
   WHERE cod_empresa    = mr_w_sup0552_4.empresa
     AND num_nf         = mr_w_sup0552_4.nota_fiscal
     AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
     AND ssr_nf         = mr_w_sup0552_4.subserie_nf
     AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
     AND cod_fornecedor = l_cod_fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","ITEM_DE_TERC_AREA")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM item_dev_terc_comp
   WHERE item_dev_terc_comp.cod_empresa = mr_w_sup0552_4.empresa
     AND item_dev_terc_comp.num_nf = mr_w_sup0552_4.nota_fiscal
     AND item_dev_terc_comp.ser_nf = mr_w_sup0552_4.serie_nota_fiscal
     AND item_dev_terc_comp.ssr_nf = mr_w_sup0552_4.subserie_nf
     AND item_dev_terc_comp.num_sequencia = mr_aviso_rec.num_seq
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","ITEM_DEV_TERC_COMP")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_nf_reajus
   WHERE sup_nf_reajus.empresa   = mr_aviso_rec.cod_empresa
     AND sup_nf_reajus.ar_reajus = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","SUP_NF_REAJUS")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_nf_fat_remessa
   WHERE sup_nf_fat_remessa.empresa           = mr_w_sup0552_4.empresa
     AND sup_nf_fat_remessa.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
     AND sup_nf_fat_remessa.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
     AND sup_nf_fat_remessa.subserie_nf       = mr_w_sup0552_4.subserie_nf
     AND sup_nf_fat_remessa.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
     AND sup_nf_fat_remessa.fornecedor        = mr_w_sup0552_4.fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","SUP_NF_FAT_REMESSA")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM ar_iss
   WHERE cod_empresa = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","AR_ISS")
  END IF

  IF m_ies_tex_inst = "S" THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM ar_ped_tex
      WHERE cod_empresa      = mr_aviso_rec.cod_empresa
        AND num_aviso_rec    = mr_aviso_rec.num_aviso_rec
        AND num_seq          = mr_aviso_rec.num_seq
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","AR_PED_TEX")
     END IF
     WHENEVER ERROR CONTINUE
     DELETE FROM nf_sup_tex_cap_con
      WHERE cod_empresa      = mr_aviso_rec.cod_empresa
        AND num_aviso_rec    = mr_aviso_rec.num_aviso_rec
        AND num_seq          = mr_aviso_rec.num_seq
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","NF_SUP_TEX_CAP_CON")
     END IF
  END IF

  IF m_exst_rel_fre_indt THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM sup_relc_ftre_indt
      WHERE sup_relc_ftre_indt.empresa       = mr_aviso_rec.cod_empresa
        AND sup_relc_ftre_indt.aviso_recebto = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_RELC_FTRE_INDT")
     END IF
     ## OS 518223 ##
     IF find4GLFunction('supy61_gera_mvto_comodato') THEN
        IF NOT supy61_gera_mvto_comodato(mr_aviso_rec.cod_empresa,
                                         mr_aviso_rec.num_aviso_rec,
                                         "E") THEN
           LET m_houve_erro = TRUE
           RETURN l_conta_array
        END IF
     END IF
     ## OS 518223 ##
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM nf_sup
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0  THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM sup_infc_strib_nfe
      WHERE empresa            = mr_w_sup0552_4.empresa
        AND nf_entrada         = mr_w_sup0552_4.nota_fiscal
        AND serie_nf_entrada   = mr_w_sup0552_4.serie_nota_fiscal
        AND subserie_nfe       = mr_w_sup0552_4.subserie_nf
        AND especie_nf_entrada = mr_w_sup0552_4.espc_nota_fiscal
        AND fornecedor         = mr_w_sup0552_4.fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_INFC_STRIB_NFE")
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM vencimento_nff
      WHERE cod_empresa    = mr_w_sup0552_4.empresa
        AND num_nf         = mr_w_sup0552_4.nota_fiscal
        AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
        AND ssr_nf         = mr_w_sup0552_4.subserie_nf
        AND cod_fornecedor = mr_w_sup0552_4.fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","VENCIMENTO_NFF")
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM nf_sup_aux
      WHERE cod_empresa   = mr_aviso_rec.cod_empresa
        AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","NF_SUP_AUX")
     END IF

     IF mr_nf_sup.ies_especie_nf = "NFM" THEN
        WHENEVER ERROR CONTINUE
        DELETE FROM nf_pend
         WHERE cod_empresa    = mr_w_sup0552_4.empresa
           AND num_nf         = mr_w_sup0552_4.nota_fiscal
           AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
           AND ssr_nf         = mr_w_sup0552_4.subserie_nf
           AND cod_fornecedor = mr_w_sup0552_4.fornecedor
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DELETE","NF_PEND")
        END IF
     END IF

     IF mr_nf_sup.ies_especie_nf = "NFP" THEN
        WHENEVER ERROR CONTINUE
        DECLARE cq_ar_x_nf_pend4 CURSOR FOR
        SELECT cod_empresa          ,
               num_nf               ,
               ser_nf               ,
               ssr_nf               ,
               cod_fornecedor       ,
               cod_item             ,
               num_aviso_rec        ,
               num_seq              ,
               qtd_regularizada     ,
               dat_inclusao         ,
               cod_fornec_nfp
          FROM ar_x_nf_pend
         WHERE cod_empresa   = mr_aviso_rec.cod_empresa
           AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DECLARE","CQ_AR_X_NF_PEND4")
        END IF

        WHENEVER ERROR CONTINUE
        FOREACH cq_ar_x_nf_pend4 INTO lr_ar_x_nf_pend.*
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("FOREACH","CQ_AR_X_NF_PEND4")
        END IF
           WHENEVER ERROR CONTINUE
           UPDATE nf_pend
              SET qtd_regularizada = qtd_regularizada -
                                     lr_ar_x_nf_pend.qtd_regularizada
            WHERE cod_empresa    = lr_ar_x_nf_pend.cod_empresa
              AND num_nf         = lr_ar_x_nf_pend.num_nf
              AND ser_nf         = lr_ar_x_nf_pend.ser_nf
              AND ssr_nf         = lr_ar_x_nf_pend.ssr_nf
              AND cod_fornecedor = lr_ar_x_nf_pend.cod_fornecedor
              AND cod_item       = lr_ar_x_nf_pend.cod_item
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("UPDATE","NF_PEND")
           END IF
        END FOREACH
        WHENEVER ERROR STOP
        FREE cq_ar_x_nf_pend4 #764215#

        WHENEVER ERROR CONTINUE
        DELETE FROM ar_x_nf_pend
         WHERE cod_empresa    = mr_aviso_rec.cod_empresa
           AND num_aviso_rec  = mr_aviso_rec.num_aviso_rec
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DELETE","AR_X_NF_PEND")
        END IF
     END IF

     IF mr_nf_sup.ies_especie_nf = "CON" THEN
        CALL sup376_exclui_pedagio_frete()
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM reten_iss
      WHERE cod_empresa    = mr_w_sup0552_4.empresa
        AND num_ad_nf_orig = mr_w_sup0552_4.nota_fiscal
        AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
        AND ssr_nf         = mr_w_sup0552_4.subserie_nf
        AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
        AND cod_fornecedor = mr_w_sup0552_4.fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","RETEN_ISS")
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM reten_inss
      WHERE cod_empresa    = mr_w_sup0552_4.empresa
        AND num_ad_nf_orig = mr_w_sup0552_4.nota_fiscal
        AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
        AND ssr_nf         = mr_w_sup0552_4.subserie_nf
        AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
        AND cod_fornecedor = mr_w_sup0552_4.fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","RETEN_INSS")
     END IF

     #eduardo o.s.335020
     CALL sup0552_exclusao_nota_2()
     #Eduardo o.s.335020

      IF m_utiliza_dds_fortaleza = "S" THEN
        WHENEVER ERROR CONTINUE
        DELETE FROM cap_sistema_dds
          WHERE empresa           = mr_w_sup0552_4.empresa
            AND ad_nota_fiscal    = mr_w_sup0552_4.nota_fiscal
            AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
            AND subserie_nf       = mr_w_sup0552_4.subserie_nf
            AND espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
            AND fornecedor        = mr_w_sup0552_4.fornecedor
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DELETE","CAP_SISTEMA_DDS")
        END IF
     END IF


     WHENEVER ERROR CONTINUE
     DELETE FROM reten_inss_rur
      WHERE cod_empresa    = mr_w_sup0552_4.empresa
        AND num_ad_nf_orig = mr_w_sup0552_4.nota_fiscal
        AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
        AND ssr_nf         = mr_w_sup0552_4.subserie_nf
        AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
        AND cod_fornecedor = mr_w_sup0552_4.fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","RETEN_INSS_RUR")
     END IF

     IF mr_aviso_rec.cod_operac_estoq = m_cod_oper_ent_ind THEN
        WHENEVER ERROR CONTINUE
        DELETE FROM sup_item_terc_end
        WHERE sup_item_terc_end.empresa           = mr_w_sup0552_4.empresa
          AND sup_item_terc_end.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
          AND sup_item_terc_end.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
          AND sup_item_terc_end.subserie_nf       = mr_w_sup0552_4.subserie_nf
          AND sup_item_terc_end.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
          AND sup_item_terc_end.fornecedor        = l_cod_fornecedor
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
           CALL log003_err_sql("EXCLUSAO","SUP_ITEM_TERC_END")
           LET m_houve_erro = TRUE
           RETURN l_conta_array
        END IF
        WHENEVER ERROR CONTINUE
        DELETE FROM item_de_terc
         WHERE item_de_terc.cod_empresa    = mr_w_sup0552_4.empresa
           AND item_de_terc.num_nf         = mr_w_sup0552_4.nota_fiscal
           AND item_de_terc.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
           AND item_de_terc.ssr_nf         = mr_w_sup0552_4.subserie_nf
           AND item_de_terc.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
           AND item_de_terc.cod_fornecedor = l_cod_fornecedor
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DELETE","ITEM_DE_TERC")
        END IF
     END IF
     IF mr_aviso_rec.cod_operac_estoq = m_oper_ent_ind_g THEN
        WHENEVER ERROR CONTINUE
        DECLARE cq_ret CURSOR FOR
        SELECT cod_empresa          ,
               num_nf               ,
               ser_nf               ,
               ssr_nf               ,
               ies_especie_nf       ,
               cod_fornecedor       ,
               ies_incl_contab      ,
               num_sequencia_ar     ,
               dat_emis_nf          ,
               dat_entrada_nf       ,
               dat_inclusao_seq     ,
               num_nf_remessa       ,
               num_sequencia_nf     ,
               qtd_devolvida        ,
               tex_observ           ,
               num_transac
          FROM item_ret_terc
         WHERE item_ret_terc.cod_empresa    = mr_w_sup0552_4.empresa
           AND item_ret_terc.num_nf         = mr_w_sup0552_4.nota_fiscal
           AND item_ret_terc.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
           AND item_ret_terc.ssr_nf         = mr_w_sup0552_4.subserie_nf
           AND item_ret_terc.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
           AND item_ret_terc.cod_fornecedor = mr_w_sup0552_4.fornecedor
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DECLARE","CQ_RET")
        END IF

        WHENEVER ERROR CONTINUE
        FOREACH cq_ret INTO lr_item_ret_terc.*
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("FOREACH","CQ_RET")
        END IF
            WHENEVER ERROR CONTINUE
            UPDATE item_em_terc
               SET item_em_terc.qtd_tot_recebida = item_em_terc.qtd_tot_recebida -
                                                   lr_item_ret_terc.qtd_devolvida
             WHERE item_em_terc.cod_empresa = lr_item_ret_terc.cod_empresa
               AND item_em_terc.num_nf      = lr_item_ret_terc.num_nf_remessa
               AND item_em_terc.num_sequencia = lr_item_ret_terc.num_sequencia_nf
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql("UPDATE","ITEM_EM_TERC")
            END IF

           WHENEVER ERROR CONTINUE
           DELETE FROM item_ret_terc
            WHERE item_ret_terc.cod_empresa = lr_item_ret_terc.cod_empresa
              AND num_nf         = lr_item_ret_terc.num_nf
              AND ser_nf         = lr_item_ret_terc.ser_nf
              AND ssr_nf         = lr_item_ret_terc.ssr_nf
              AND ies_especie_nf = lr_item_ret_terc.ies_especie_nf
              AND cod_fornecedor = lr_item_ret_terc.cod_fornecedor
              AND num_sequencia_ar = lr_item_ret_terc.num_sequencia_ar
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("DELETE","ITEM_RET_TERC")
           END IF
        END FOREACH
        WHENEVER ERROR STOP
        FREE cq_ret #764215#
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM reten_inss_rur
      WHERE cod_empresa    = mr_w_sup0552_4.empresa
        AND num_ad_nf_orig = mr_w_sup0552_4.nota_fiscal
        AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
        AND ssr_nf         = mr_w_sup0552_4.subserie_nf
        AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
        AND cod_fornecedor = mr_w_sup0552_4.fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","RETEN_INSS_RUR")
     END IF

     LET l_num_nf = mr_nf_sup.num_nf
     WHENEVER ERROR CONTINUE
     DELETE FROM reten_irrf_pg
      WHERE cod_empresa    = mr_w_sup0552_4.empresa
        AND num_nf         = l_num_nf
        AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
        AND ssr_nf         = mr_w_sup0552_4.subserie_nf
        AND ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
        AND cod_fornecedor = mr_w_sup0552_4.fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","RETEN_IRRF_PG")
     END IF

     WHENEVER ERROR CONTINUE
       DELETE FROM nf_sup
        WHERE cod_empresa   = mr_aviso_rec.cod_empresa
          AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode < 0 THEN
        CALL log003_err_sql("DELETE","NF_SUP")
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM aviso_rec_compl
      WHERE cod_empresa   = mr_aviso_rec.cod_empresa
        AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","AVISO_REC_COMPL")
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM ar_pis_cofins
      WHERE cod_empresa   = mr_aviso_rec.cod_empresa
        AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","ar_pis_cofins")
     END IF

     #OS 359707
     WHENEVER ERROR CONTINUE
       DELETE FROM obf_dvcli_piscofin
        WHERE empresa           = mr_aviso_rec.cod_empresa
          AND aviso_recebto     = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","OBF_DVCLI_PISCOFIN")
     END IF

     WHENEVER ERROR CONTINUE
       DELETE FROM obf_p_dvcli_cofins
        WHERE empresa           = mr_aviso_rec.cod_empresa
          AND aviso_recebto     = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","OBF_P_DVCLI_COFINS")
     END IF
     #OS 359707

     WHENEVER ERROR CONTINUE ##OS 361268
     DELETE FROM sup_par_devol_cli
      WHERE empresa           = mr_aviso_rec.cod_empresa
        AND aviso_recebto     = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_PAR_DEVOL_CLI")
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM sup_ar_piscofim
      WHERE empresa       = mr_aviso_rec.cod_empresa
        AND aviso_recebto = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_AR_PISCOFIM")
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM sup_fr_pis_cofins
      WHERE empresa       = mr_aviso_rec.cod_empresa
        AND aviso_recebto = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_FR_PIS_COFINS")
     END IF

     IF NOT sup0552_desfaz_relac_desp_proc(l_conta_array) THEN
        LET l_conta_array = l_conta_array + 1
        LET m_houve_erro = TRUE
        RETURN l_conta_array
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM aviso_rec_proc_imp
      WHERE cod_empresa   = mr_aviso_rec.cod_empresa
        AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","AVISO_REC_PROC_IMP")
     END IF

     WHENEVER ERROR CONTINUE
{awc}DELETE FROM ar_iss
      WHERE cod_empresa = mr_aviso_rec.cod_empresa
        AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","AR_ISS")
     END IF

     CALL sup0552_cursor_excl_sup_retn_item_terc(FALSE)
          RETURNING m_houve_erro

     IF NOT m_houve_erro THEN
        WHENEVER ERROR CONTINUE
        OPEN cq_exclui_grd USING mr_w_sup0552_4.empresa           ,
                                 mr_w_sup0552_4.nota_fiscal       ,
                                 mr_w_sup0552_4.serie_nota_fiscal ,
                                 mr_w_sup0552_4.subserie_nf       ,
                                 mr_w_sup0552_4.espc_nota_fiscal  ,
                                 mr_w_sup0552_4.fornecedor
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("OPEN","SUP_RETN_ITEM_TERC(3)")
           LET m_houve_erro = TRUE
        END IF

        IF NOT m_houve_erro THEN
           WHILE TRUE
              WHENEVER ERROR CONTINUE
              FETCH cq_exclui_grd INTO l_nf_remessa, l_seq_nf_remessa,
                                       l_seq_tabulacao, l_qtd_devolvida
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 IF sqlca.sqlcode <> 100 THEN
                    CALL log003_err_sql("FETCH","SUP_RETN_ITEM_TERC(3)")
                    LET m_houve_erro = TRUE
                 END IF
                 EXIT WHILE
              END IF

              WHENEVER ERROR CONTINUE
              UPDATE sup_itterc_grade
                 SET sup_itterc_grade.qtd_tot_receb = sup_itterc_grade.qtd_tot_receb -
                                                      l_qtd_devolvida
               WHERE sup_itterc_grade.empresa       = mr_w_sup0552_4.empresa
                 AND sup_itterc_grade.nota_fiscal   = l_nf_remessa
                 AND sup_itterc_grade.seq_item_nf   = l_seq_nf_remessa
                 AND sup_itterc_grade.fornecedor    = mr_w_sup0552_4.cod_fornecedor
                 AND sup_itterc_grade.seq_tabulacao = l_seq_tabulacao
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("UPDATE","SUP_ITTERC_GRADE(3)")
                 LET m_houve_erro = TRUE
              END IF

              WHENEVER ERROR CONTINUE
              IF m_houve_erro THEN
                 EXIT WHILE
              END IF
           END WHILE
           CLOSE cq_exclui_grd #764215#
           FREE cq_exclui_grd  #764215#
        END IF
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM sup_retn_item_terc
      WHERE sup_retn_item_terc.empresa           = mr_w_sup0552_4.empresa
        AND sup_retn_item_terc.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
        AND sup_retn_item_terc.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
        AND sup_retn_item_terc.subserie_nf       = mr_w_sup0552_4.subserie_nf
        AND sup_retn_item_terc.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
        AND sup_retn_item_terc.fornecedor        = mr_w_sup0552_4.fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_RETN_ITEM_TERC(3)")
        LET m_houve_erro = TRUE
     END IF

     #IF p_ies_interf_cre = "S" THEN
     #    IF p_dados_tela.ies_especie_nf = "NFD" OR
     #       p_ies_tip_entrada = "5" THEN
     #        CALL log0030_mensagem("ATENCAO !!! Estes dados ja foram baixados no Contas a Receber ","info")
     #    END IF
     # END IF
      IF (mr_nf_sup.cod_operacao[1] = "7" OR l_nfr_import) AND
          mr_nf_sup.ies_especie_nf <> "NFM" AND
         (p_par_sup_compl.ies_mod_importacao = "L" OR
          p_par_sup_compl.ies_mod_importacao = "S") THEN
         IF l_num_processo IS NOT NULL AND l_num_processo <> -1 THEN
            WHENEVER ERROR CONTINUE
            DECLARE cq_ar_proc_imp CURSOR FOR
            SELECT num_aviso_rec
              FROM aviso_rec_proc_imp
             WHERE cod_empresa  = mr_w_sup0552_4.empresa
               AND num_processo = l_num_processo
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql("DECLARE","CQ_AR_PROC_IMP")
            END IF

            INITIALIZE l_num_ar_imp TO NULL
            WHENEVER ERROR CONTINUE
            OPEN cq_ar_proc_imp
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql("OPEN","CQ_AR_PROC_IMP")
            END IF
            WHENEVER ERROR CONTINUE
            FETCH cq_ar_proc_imp INTO l_num_ar_imp
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql("FETCH","CQ_AR_PROC_IMP")
            END IF
            CLOSE cq_ar_proc_imp
            FREE  cq_ar_proc_imp #764215#

            IF l_num_ar_imp IS NULL THEN
               WHENEVER ERROR CONTINUE
               UPDATE processo_imp
                  SET num_aviso_rec = NULL,
                      ies_situacao  = "4"
                WHERE cod_empresa      = mr_w_sup0552_4.empresa
                  AND num_aviso_rec    IS NOT NULL
                  AND num_aviso_rec    = mr_aviso_rec.num_aviso_rec
                  AND ies_versao_atual = "S"
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql("(1)MODIFICACAO","PROCESSO_IMP")
                  LET m_houve_erro = TRUE
               ELSE
                  CALL imp0024_mov_even(mr_w_sup0552_4.empresa,l_num_processo,
                                        34," ",TODAY)
               END IF
            ELSE
               LET l_num_ar_proc = sup0552_leitura_processo_imp(mr_aviso_rec.cod_empresa, l_num_processo,"AR")
               IF l_num_ar_proc = mr_aviso_rec.num_aviso_rec THEN
                  WHENEVER ERROR CONTINUE
                  UPDATE processo_imp
                     SET num_aviso_rec    = l_num_ar_imp
                   WHERE cod_empresa      = mr_w_sup0552_4.empresa
                     AND num_processo     = l_num_processo
                     AND ies_versao_atual = "S"
                  WHENEVER ERROR STOP
                  IF sqlca.sqlcode <> 0 THEN
                     CALL log003_err_sql("(2)MODIFICACAO","PROCESSO_IMP")
                     LET m_houve_erro = TRUE
                  END IF
               END IF
            END IF
         END IF
      END IF

      IF m_houve_erro = FALSE THEN
         #FLUXO DE CAIXA
         CALL sup0552_atualizar_ordens_fluxo(mr_w_sup0552_4.empresa)
      END IF

      LET m_tipo_de_processo = sup0552_busca_tipo_processo()

      IF m_houve_erro = FALSE THEN
         IF m_eh_background = FALSE THEN
            IF m_tipo_de_processo = "E" THEN
               ERROR " Nota Fiscal excluida com sucesso. " ATTRIBUTE(REVERSE)
            ELSE
               ERROR " Nota Fiscal sendo alterada..." ATTRIBUTE(REVERSE)
            END IF
            CALL LOG_refresh_display()
         END IF
      END IF
  ELSE
      CALL log003_err_sql("EXCLUSAO","NF_SUP")
      LET m_houve_erro = TRUE
  END IF

  IF m_houve_erro = FALSE THEN
     IF m_transacao_ativa THEN
        IF m_tipo_de_processo = "I" THEN
           WHENEVER ERROR CONTINUE
           CALL log085_transacao("COMMIT")
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("TRANSACAO","COMMIT")
              CALL log085_transacao("ROLLBACK") #OS596059
           END IF
           LET m_transacao_ativa = FALSE
        END IF
        IF m_ies_usa_ae = "S" THEN
           CALL sup0552_consiste_ae(mr_aviso_rec.num_aviso_rec)
        END IF
     END IF
  ELSE
     IF m_transacao_ativa THEN
        IF m_tipo_de_processo = "I" THEN
           WHENEVER ERROR CONTINUE
           CALL log085_transacao("ROLLBACK")
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("TRANSACAO","ROLLBACK")
           END IF
           LET m_transacao_ativa = FALSE
        END IF
     END IF
     LET m_houve_erro = TRUE
  END IF

  RETURN l_conta_array

 END FUNCTION

#-----------------------------------------------#
 FUNCTION sup0552_busca_ped_venda(l_conta_array)
#-----------------------------------------------#
 DEFINE l_tipo             CHAR(01),
        l_conta_array      SMALLINT

 INITIALIZE m_cod_emp_transf TO NULL
 WHENEVER ERROR CONTINUE
 SELECT cod_empresa_orig
   INTO m_cod_emp_transf
   FROM aviso_rec_compl
  WHERE cod_empresa   = mr_aviso_rec.cod_empresa
    AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0
 OR m_cod_emp_transf IS NULL THEN
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Empresa origem nao encontrada "
    RETURN FALSE
 END IF

 INITIALIZE m_pedido_venda1 TO NULL

 WHENEVER ERROR CONTINUE
 SELECT UNIQUE(num_pedido)
   INTO m_pedido_venda1
   FROM nf_item_ser
  WHERE cod_empresa = m_cod_emp_transf
    AND num_nff     = mr_w_sup0552_4.nota_fiscal
    AND ser_nff     = mr_w_sup0552_4.serie_nota_fiscal
    AND num_pedido  = m_pedido_venda
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0
 OR m_pedido_venda1 IS NULL THEN
    LET m_pedido_venda1 = 0
 END IF

 IF m_pedido_venda1 = 0 THEN
    WHENEVER ERROR CONTINUE
    SELECT unique(num_pedido)
      INTO m_pedido_venda1
      FROM nf_item
     WHERE nf_item.cod_empresa = m_cod_emp_transf
       AND nf_item.num_nff     = mr_w_sup0552_4.nota_fiscal
       AND nf_item.num_pedido  = m_pedido_venda
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 OR
      m_pedido_venda1 IS NULL THEN
      LET m_pedido_venda1 = 0
   END IF
 END IF

 IF m_pedido_venda1 = 0 THEN
    WHENEVER ERROR CONTINUE
    SELECT unique(num_pedido)
      INTO m_pedido_venda1
      FROM nf_item_hist
     WHERE nf_item_hist.cod_empresa = m_cod_emp_transf
       AND nf_item_hist.num_nff     = mr_w_sup0552_4.nota_fiscal
       AND nf_item_hist.num_pedido  = m_pedido_venda
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 OR
       m_pedido_venda1 IS NULL THEN
       LET m_pedido_venda1 = 0
    END IF
 END IF

 RETURN TRUE

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_verifica_nota_integrada_wms()
#----------------------------------------------#
 DEFINE l_item_wms           SMALLINT,
        l_ind_envio_interf   SMALLINT,
        l_sucesso            SMALLINT

  IF m_ies_wms_instalado = "S" THEN
     LET l_ind_envio_interf = 0
     WHENEVER ERROR CONTINUE
     SELECT COUNT(*)
       INTO l_ind_envio_interf
       FROM wms_e_nf_item a, wms_e_entrada_veic b
      WHERE a.fornecedor         = mr_w_sup0552_4.fornecedor
        AND a.num_nota_fiscal    = mr_w_sup0552_4.nota_fiscal
        AND a.serie_nota_fiscal  = mr_w_sup0552_4.serie_nota_fiscal
        AND a.subserie_nf        = mr_w_sup0552_4.subserie_nf
        AND b.entrada_veiculo    = a.entrada_veiculo
        AND b.cod_empresa        = mr_w_sup0552_4.empresa
        AND b.ind_envio_interf   = "S"
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 THEN
        IF l_ind_envio_interf > 0 THEN
           RETURN TRUE
        END IF
     END IF
 END IF

 RETURN FALSE
END FUNCTION

#-----------------------------------------#
 FUNCTION sup0552_verifica_devolucao(l_conta_array)
#-----------------------------------------#
 DEFINE l_cont             SMALLINT,
        lr_docum           RECORD LIKE docum.*,
        lr_dev_mestre       RECORD LIKE dev_mestre.*,
        l_num_docum_origem LIKE docum.num_docum_origem,
        l_num_docum_or_aux LIKE docum.num_docum_origem,
        l_cod_cliente      LIKE docum.cod_cliente,
        l_contador         SMALLINT,
        l_continua         SMALLINT,
        l_ies_tip_entrada  SMALLINT,
        l_status           SMALLINT,
        l_houve_erro       SMALLINT,
        l_conta_array      SMALLINT

 LET l_houve_erro = FALSE

 INITIALIZE l_ies_tip_entrada TO NULL

 CALL sup0686_retorna_tipo_entrada(mr_w_sup0552_4.cfop,
                                   mr_w_sup0552_4.cfop_compl)
                                   RETURNING l_status,
                                             l_ies_tip_entrada

 IF (mr_nf_sup.ies_especie_nf = "NFD" OR
     l_ies_tip_entrada = "5") AND
     m_ies_interf_cre  = "S" THEN

     INITIALIZE l_contador TO NULL
     WHENEVER ERROR CONTINUE
     SELECT COUNT(*)
       INTO l_contador
       FROM sup_nf_devol_cli
      WHERE empresa           = mr_nf_sup.cod_empresa
        AND aviso_recebto     = mr_nf_sup.num_aviso_rec
     WHENEVER ERROR STOP

     IF sqlca.sqlcode <> 0 OR l_contador IS NULL THEN
        LET l_contador = 0
     END IF

     IF l_contador = 0 THEN
        INITIALIZE lr_dev_mestre.* TO NULL
        WHENEVER ERROR CONTINUE
        SELECT cod_empresa          ,
               num_nff              ,
               dat_lancamento       ,
               cod_motivo           ,
               cod_cliente          ,
               cod_repres           ,
               num_nff_origem
          INTO lr_dev_mestre.cod_empresa          ,
               lr_dev_mestre.num_nff              ,
               lr_dev_mestre.dat_lancamento       ,
               lr_dev_mestre.cod_motivo           ,
               lr_dev_mestre.cod_cliente          ,
               lr_dev_mestre.cod_repres           ,
               lr_dev_mestre.num_nff_origem
          FROM dev_mestre
         WHERE cod_empresa    = mr_nf_sup.cod_empresa
           AND num_nff        = mr_nf_sup.num_aviso_rec
           AND num_nff_origem IS NOT NULL
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           RETURN FALSE, l_conta_array
        END IF
        LET l_continua = TRUE
     ELSE
        WHENEVER ERROR CONTINUE
        DECLARE cq_num_nf_saida CURSOR FOR
        SELECT UNIQUE(nota_fiscal_fatura)
          FROM sup_nf_devol_cli
         WHERE empresa           = mr_nf_sup.cod_empresa
           AND aviso_recebto     = mr_nf_sup.num_aviso_rec
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DECLARE","SUP_NF_DEVOL_CLI")
        END IF

        WHENEVER ERROR CONTINUE
        OPEN cq_num_nf_saida
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("OPEN","CQ_NUM_NF_SAIDA")
           RETURN TRUE, l_conta_array
        END IF

        WHENEVER ERROR CONTINUE
        FETCH cq_num_nf_saida INTO lr_dev_mestre.num_nff_origem
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 0 THEN
           LET l_continua = TRUE
        ELSE
           RETURN FALSE, l_conta_array
        END IF
     END IF

     WHILE l_continua

        IF lr_dev_mestre.num_nff_origem > 0 THEN
           LET l_num_docum_origem = lr_dev_mestre.num_nff_origem USING "&&&&&&"
           LET l_num_docum_or_aux = lr_dev_mestre.num_nff_origem

           LET sql_stmt = "SELECT docum.* ",
                            "FROM docum ",
                           "WHERE docum.cod_empresa         = """,m_cod_empresa_uni,""" ",
                             "AND docum.ies_tip_docum       = ""DP"" ",
                             "AND docum.ies_tip_docum_orig  = ""NF"" ",
                             "AND (docum.num_docum_origem   = """,l_num_docum_origem,""" ",
                              "OR  docum.num_docum_origem   = """,l_num_docum_or_aux,""") ",
                          "UNION ALL ",
                          "SELECT docum.* ",
                            "FROM docum, docum_anterior, cre_doc_ant_compl ",
                           "WHERE docum.cod_empresa                      = """,m_cod_empresa_uni,""" ",
                             "AND docum.ies_tip_docum_orig               = ""NF"" ",
                             "AND docum.ies_tip_docum                    = ""DP"" ",
                             "AND docum.num_docum_origem                 IS NULL ",
                             "AND docum_anterior.cod_empresa             = docum.cod_empresa ",
                             "AND docum_anterior.num_docum               = docum.num_docum ",
                             "AND docum_anterior.ies_tip_docum           = ""DP"" ",
                             "AND docum_anterior.ies_tip_docum_orig      = ""NF"" ",
                             "AND docum_anterior.num_docum_orig[1,6]     = """,l_num_docum_or_aux,""" ",
                             "AND cre_doc_ant_compl.empresa              = """,m_cod_empresa_uni,""" ",
                             "AND cre_doc_ant_compl.num_docum            = docum_anterior.num_docum ",
                             "AND cre_doc_ant_compl.tip_docum            = docum_anterior.ies_tip_docum ",
                             "AND cre_doc_ant_compl.sequencia_docum      = docum_anterior.num_seq_docum ",
                             "AND cre_doc_ant_compl.parametro            = ""empresa_consol"" ",
                             "AND cre_doc_ant_compl.texto_parametro[1,2] = """,mr_nf_sup.cod_empresa,""" "

           WHENEVER ERROR CONTINUE
           PREPARE var_docum FROM sql_stmt
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("PREPARE","VAR_DOCUM")
           END IF
           WHENEVER ERROR CONTINUE
           DECLARE cq_docum CURSOR FOR var_docum
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("DECLARE","CQ_DOCUM")
           END IF

           LET l_houve_erro = FALSE
           WHENEVER ERROR CONTINUE
           FOREACH cq_docum INTO lr_docum.*
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("FOREACH","CQ_DOCUM")
              END IF

              IF lr_docum.ies_pgto_docum <> "A" THEN
                 LET l_cont = 0
                 LET l_num_docum_origem = mr_nf_sup.num_nf USING "&&&&&&"
                 #OS 371663 - Thiago
                 SELECT count(*)
                   INTO l_cont
                   FROM docum_pgto a, docum_abat b
                  WHERE a.cod_empresa    = lr_docum.cod_empresa
                    AND a.num_docum      = lr_docum.num_docum
                    AND a.ies_tip_docum  = "DP"
                    AND a.ies_forma_pgto = "DV"
                    AND a.num_lote_pgto  = 5100
                    AND b.cod_empresa    = lr_docum.cod_empresa
                    AND b.num_docum      = lr_docum.num_docum
                    AND b.ies_tip_docum  = "DP"
                    AND b.num_seq_docum  = a.num_seq_docum
                    AND b.num_nota_cred  = l_num_docum_origem

                 IF l_cont > 0 THEN
                    LET l_conta_array = l_conta_array + 1
                    CALL sup0552_carrega_chave_consiste(l_conta_array)
                    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Esta devolucao gerou abatimento em uma Duplicata. Contatar Setor de Cobranca."
                    LET l_houve_erro = TRUE
                    CLOSE cq_docum #764215#
                    EXIT FOREACH
                 END IF
              ELSE
                 IF m_parcretxt[309] = "S" THEN
                    SELECT num_docum
                      FROM docum_posterior
                     WHERE cod_empresa        = lr_docum.cod_empresa
                        AND ies_tip_docum      = "NC"
                        AND num_docum_post     = lr_docum.num_docum
                        AND ies_tip_docum_post = lr_docum.ies_tip_docum
                        AND num_seq_docum      = 1
                    IF sqlca.sqlcode = 0 THEN
                       LET l_conta_array = l_conta_array + 1
                       CALL sup0552_carrega_chave_consiste(l_conta_array)
                       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Esta devolucao possui Nota de Credito c/ Vinculacao.Contatar Setor de Cobranca"
                       LET l_houve_erro = TRUE
                       CLOSE cq_docum #764215#
                       EXIT FOREACH
                    END IF
                 END IF
              END IF
           END FOREACH
           WHENEVER ERROR STOP
           FREE cq_docum #764215#

           IF l_houve_erro = TRUE THEN
              IF l_contador > 0 THEN
                 WHENEVER ERROR CONTINUE
                 CLOSE cq_num_nf_saida
                 FREE cq_num_nf_saida
                 WHENEVER ERROR STOP
              END IF
              RETURN TRUE, l_conta_array
           END IF
        END IF

        IF l_contador = 0 THEN
           LET l_continua = FALSE
        ELSE
           WHENEVER ERROR CONTINUE
           FETCH cq_num_nf_saida INTO lr_dev_mestre.num_nff_origem
           WHENEVER ERROR STOP

           IF sqlca.sqlcode <> 0 THEN
              LET l_continua = FALSE
           END IF
        END IF
    END WHILE

    FREE cq_num_nf_saida #764215#

    LET l_num_docum_origem    = mr_nf_sup.num_nf

    INITIALIZE l_cod_cliente TO NULL
    WHENEVER ERROR CONTINUE
    DECLARE cq_cliente CURSOR FOR
    SELECT clientes.cod_cliente
      FROM clientes, fornecedor
     WHERE fornecedor.cod_fornecedor = mr_nf_sup.cod_fornecedor
       AND clientes.num_cgc_cpf = fornecedor.num_cgc_cpf
       AND clientes.ies_situacao  IN ("S","A")
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DECLARE","CQ_CLIENTE")
    END IF
    WHENEVER ERROR CONTINUE
    FOREACH cq_cliente INTO l_cod_cliente
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_CLIENTE")
    END IF
      EXIT FOREACH
    END FOREACH
    WHENEVER ERROR STOP
    CLOSE cq_cliente #764215#
    FREE  cq_cliente #764215#

    LET sql_stmt = "SELECT docum.* ",
                     "FROM docum ",
                    "WHERE docum.cod_empresa         = """,m_cod_empresa_uni,""" ",
                      "AND docum.cod_cliente         = """,l_cod_cliente,""" ",
                      "AND docum.ies_tip_docum       = ""NC"" ",
                      "AND docum.ies_tip_docum_orig  = ""NF"" ",
                      "AND docum.num_docum_origem    = """,l_num_docum_origem,""" ",
                   "UNION ALL ",
                   "SELECT docum.* ",
                     "FROM docum, docum_anterior, cre_doc_ant_compl ",
                    "WHERE docum.cod_empresa                      = """,m_cod_empresa_uni,""" ",
                      "AND docum.cod_cliente                      = """,l_cod_cliente,""" ",
                      "AND docum.ies_tip_docum_orig               = ""NF"" ",
                      "AND docum.ies_tip_docum                    = ""NC"" ",
                      "AND docum.num_docum_origem                 IS NULL ",
                      "AND docum_anterior.cod_empresa             = docum.cod_empresa ",
                      "AND docum_anterior.num_docum               = docum.num_docum ",
                      "AND docum_anterior.ies_tip_docum           = ""NC"" ",
                      "AND docum_anterior.ies_tip_docum_orig      = ""NF"" ",
                      "AND docum_anterior.num_docum_orig[1,6]     = """,l_num_docum_origem,""" ",
                      "AND cre_doc_ant_compl.empresa              = """,m_cod_empresa_uni,""" ",
                      "AND cre_doc_ant_compl.num_docum            = docum_anterior.num_docum ",
                      "AND cre_doc_ant_compl.tip_docum            = docum_anterior.ies_tip_docum ",
                      "AND cre_doc_ant_compl.sequencia_docum      = docum_anterior.num_seq_docum ",
                      "AND cre_doc_ant_compl.parametro            = ""empresa_consol"" ",
                      "AND cre_doc_ant_compl.texto_parametro[1,2] = """,mr_nf_sup.cod_empresa,""" "

    WHENEVER ERROR CONTINUE
    PREPARE var_nc_vinc FROM sql_stmt
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("PREPARE","VAR_NC_VINC")
    END IF
    WHENEVER ERROR CONTINUE
    DECLARE cq_nc_vinc CURSOR FOR var_nc_vinc
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DECLARE","CQ_NC_VINC")
    END IF
    WHENEVER ERROR CONTINUE
    FOREACH cq_nc_vinc INTO lr_docum.*
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_NC_VINC")
    END IF
    IF lr_docum.ies_pgto_docum = "A" THEN
          IF m_parcretxt[309] = "S" THEN
            WHENEVER ERROR CONTINUE
            SELECT cod_empresa          ,
                   num_docum            ,
                   ies_tip_docum        ,
                   num_seq_docum        ,
                   num_docum_post       ,
                   ies_tip_docum_post
              FROM docum_posterior
             WHERE cod_empresa    = lr_docum.cod_empresa
               AND num_docum      = lr_docum.num_docum
               AND ies_tip_docum  = lr_docum.ies_tip_docum
               AND num_seq_docum  = 1
            WHENEVER ERROR STOP
         IF sqlca.sqlcode = 0 THEN
            LET l_conta_array = l_conta_array + 1
            CALL sup0552_carrega_chave_consiste(l_conta_array)
            LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Esta devolucao possui Nota de Credito c/ Vinculacao.Contatar Setor de Cobranca"
               CLOSE cq_nc_vinc #764215#
               FREE  cq_nc_vinc #764215#
            RETURN TRUE, l_conta_array
         END IF
       END IF
    ELSE
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "NC ja utilizada em outra Duplicada.Contatar Setor de Cobranca"
          CLOSE cq_nc_vinc #764215#
          FREE  cq_nc_vinc #764215#
       RETURN TRUE, l_conta_array
    END IF
    END FOREACH
    WHENEVER ERROR STOP
    FREE  cq_nc_vinc #764215#
 END IF

 RETURN FALSE, l_conta_array

 END FUNCTION

#------------------------------------------------------------------------------#
 FUNCTION sup0552_verifica_sup_nf_eletronica(l_empresa, l_aviso_rec, l_funcao)
#------------------------------------------------------------------------------#
  DEFINE l_empresa    CHAR(02),
         l_aviso_rec  DECIMAL(6,0),
         l_protocolo  DECIMAL(15,0),
         l_funcao     CHAR(08)

  LET l_protocolo = 0
  WHENEVER ERROR CONTINUE
  SELECT protocolo
    INTO l_protocolo
    FROM sup_nf_eletronica
   WHERE empresa       = l_empresa
     AND aviso_recebto = l_aviso_rec
     AND sit_nota_fiscal = "N"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode =  0 THEN
     IF l_funcao = 'EXCLUIR' THEN
        RETURN TRUE
     ELSE
        IF l_funcao = 'CANCELAR' THEN
           IF l_protocolo IS NULL OR l_protocolo = 0 THEN
              RETURN TRUE
           ELSE
              RETURN FALSE
           END IF
        END IF
     END IF
  ELSE
     RETURN FALSE
  END IF

END FUNCTION

#-----------------------------------------#
 FUNCTION sup0552_deleta_ar_frete_cesta()
#-----------------------------------------#
 WHENEVER ERROR CONTINUE
 SELECT num_aviso_rec
   FROM ar_frete_cesta
  WHERE cod_empresa   = mr_aviso_rec.cod_empresa
    AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    WHENEVER ERROR CONTINUE
    DELETE FROM ar_frete_cesta
     WHERE cod_empresa   = mr_aviso_rec.cod_empresa
       AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       CALL sup3731_gera_erro_consistencia(mr_aviso_rec.num_aviso_rec) RETURNING m_status
    END IF
 END IF
 END FUNCTION

#-----------------------------------------#
 FUNCTION sup0552_verifica_carta_correcao()
#-----------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT num_carta
   FROM carta_corr
  WHERE carta_corr.cod_empresa       = mr_w_sup0552_4.empresa
    AND carta_corr.num_docum         = mr_w_sup0552_4.nota_fiscal
    AND carta_corr.ser_docum         = mr_w_sup0552_4.serie_nota_fiscal
    AND carta_corr.ssr_docum         = mr_w_sup0552_4.subserie_nf
    AND carta_corr.ies_especie_docum = mr_w_sup0552_4.espc_nota_fiscal
    AND carta_corr.cod_fornecedor    = mr_w_sup0552_4.fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

#-------------------------------------------------------------#
FUNCTION sup0552_verifica_relac_frete_x_nf(l_tipo,l_num,l_ser,l_ssr,l_cod, l_conta_array)
#-------------------------------------------------------------#
 DEFINE l_tipo        CHAR(05),
        l_num         DECIMAL(7,0),
        l_ser         CHAR(03),
        l_ssr         DECIMAL(2,0),
        l_cod         CHAR(19),
        l_msg         CHAR(100),
        l_conta_array SMALLINT,
        l_houve_erro  SMALLINT,
        lr_frete_sup   RECORD LIKE frete_sup.*,
        lr_nf_sup     RECORD LIKE nf_sup.*

 LET l_houve_erro = FALSE

 IF l_ser = "@@@" THEN
    LET l_ser = " "
 END IF

 LET m_houve_erro = FALSE

 IF l_tipo = "NF" THEN

    SELECT *
      INTO lr_frete_sup.*
      FROM frete_sup
     WHERE frete_sup.cod_empresa  = mr_nf_sup.cod_empresa
       AND frete_sup.num_conhec   = l_num
       AND frete_sup.ser_conhec   = l_ser
       AND frete_sup.ssr_conhec   = l_ssr
       AND frete_sup.cod_transpor = l_cod

    IF SQLCA.SQLCODE = 0 THEN
       IF lr_frete_sup.ies_incl_contab = "S" OR lr_frete_sup.ies_incl_contab = "M" THEN
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Excluir contabilizacao do frete."
          LET l_houve_erro = TRUE
       END IF

       DECLARE c_cons_nf CURSOR FOR
        SELECT nf_sup.num_aviso_rec , nf_sup.ies_incl_contab
          FROM nf_sup
         WHERE nf_sup.cod_empresa  = lr_frete_sup.cod_empresa
           AND nf_sup.num_conhec   = lr_frete_sup.num_conhec
           AND nf_sup.ser_conhec   = lr_frete_sup.ser_conhec
           AND nf_sup.ssr_conhec   = lr_frete_sup.ssr_conhec
           AND nf_sup.cod_transpor = lr_frete_sup.cod_transpor
      ORDER BY num_aviso_rec

       FOREACH c_cons_nf INTO lr_nf_sup.num_aviso_rec, lr_nf_sup.ies_incl_contab
          IF lr_nf_sup.ies_incl_contab = "S" OR lr_nf_sup.ies_incl_contab = "M" THEN
             LET l_msg = "Excluir lancamento contabil AR: " , lr_nf_sup.num_aviso_rec CLIPPED
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = l_msg
             LET l_houve_erro = TRUE
          END IF
       END FOREACH
       FREE c_cons_nf #764215#
    END IF
 END IF

 IF l_tipo = "FRETE" THEN

    DECLARE c_cons_rel CURSOR FOR
     SELECT *
       FROM nf_sup
      WHERE nf_sup.cod_empresa  = mr_nf_sup.cod_empresa
        AND nf_sup.num_conhec   = l_num
        AND nf_sup.ser_conhec   = l_ser
        AND nf_sup.ssr_conhec   = l_ssr
        AND nf_sup.cod_transpor = l_cod
   ORDER BY num_aviso_rec

    FOREACH c_cons_rel INTO lr_nf_sup.*
       IF lr_nf_sup.ies_incl_contab = "S" OR lr_nf_sup.ies_incl_contab = "M" THEN
          LET l_msg = "Excluir lancamento contabil AR: " , lr_nf_sup.num_aviso_rec CLIPPED
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = l_msg
          LET l_houve_erro = TRUE
       END IF
    END FOREACH
    FREE c_cons_rel #764215#
 END IF

 IF l_houve_erro THEN
    RETURN TRUE, l_conta_array
 ELSE
    RETURN FALSE, l_conta_array
 END IF

 END FUNCTION

#-----------------------------------#
 FUNCTION sup0552_verifica_cnd_pgto()
#-----------------------------------#

 LET m_ies_pagamento         = NULL

 WHENEVER ERROR CONTINUE
 SELECT cond_pgto_cap.ies_pagamento
   INTO m_ies_pagamento
   FROM cond_pgto_cap
  WHERE cond_pgto_cap.cnd_pgto = mr_w_sup0552_4.cond_pagto
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET m_ies_pagamento         = NULL
 END IF

 END FUNCTION

#------------------------------------------------------------------------#
 FUNCTION sup0552_consiste_nf_incluida_no_cap_contab(l_ies_pagamento,
                                                     l_conta_lanc,
                                                     l_tipo,
                                                     l_consiste_nf_integr,
                                                     l_conta_array)
#------------------------------------------------------------------------#

  DEFINE l_ies_pagamento          LIKE cond_pgto_cap.ies_pagamento,
         l_conta_lanc             SMALLINT,
         l_tipo                   CHAR(01),
         l_consiste_nf_integr     CHAR(01),
         l_conta_array            SMALLINT

  IF (mr_nf_sup.ies_incl_cap = "S" OR mr_nf_sup.ies_incl_cap = "B") AND
      l_ies_pagamento = "2" THEN
     IF l_tipo = "1" THEN
        IF (mr_nf_sup.ies_incl_contab = "S" OR mr_nf_sup.ies_incl_contab = "M") AND
           l_conta_lanc > 0 THEN
           LET l_conta_array = l_conta_array + 1
           CALL sup0552_carrega_chave_consiste(l_conta_array)
           LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Nota Fiscal já incluída no Contas a Pagar e na Contabilidade."
        ELSE
           LET l_conta_array = l_conta_array + 1
           CALL sup0552_carrega_chave_consiste(l_conta_array)
           LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Nota Fiscal já incluída no Contas a Pagar."
        END IF
     ELSE
        IF (mr_nf_sup.ies_incl_contab = "S" OR mr_nf_sup.ies_incl_contab = "M") THEN
           LET l_conta_array = l_conta_array + 1
           CALL sup0552_carrega_chave_consiste(l_conta_array)
           LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Nota Fiscal já incluída no Contas a Pagar e na Contabilidade."
        ELSE
           LET l_conta_array = l_conta_array + 1
           CALL sup0552_carrega_chave_consiste(l_conta_array)
           LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Nota Fiscal já incluída no Contas a Pagar."
        END IF
     END IF
     IF l_consiste_nf_integr = "N" THEN
        RETURN TRUE, l_conta_array
     END IF
  ELSE
     IF (mr_nf_sup.ies_incl_contab = "S" OR mr_nf_sup.ies_incl_contab = "M") THEN
        LET l_conta_array = l_conta_array + 1
        CALL sup0552_carrega_chave_consiste(l_conta_array)
        LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Nota Fiscal já incluída na Contabilidade."
        IF l_consiste_nf_integr = "N" THEN
           RETURN TRUE, l_conta_array
        END IF
     END IF
  END IF

  RETURN FALSE, l_conta_array

 END FUNCTION

#--------------------------------------#
 FUNCTION sup0552_verifica_lancamentos()
#--------------------------------------#
 LET m_conta_lanc = 0

 WHENEVER ERROR CONTINUE
 SELECT count(*)
   INTO m_conta_lanc
   FROM lanc_cont_rec
  WHERE cod_empresa    = mr_w_sup0552_4.empresa
    AND num_nf         = mr_w_sup0552_4.nota_fiscal
    AND ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
    AND ssr_nf         = mr_w_sup0552_4.subserie_nf
    AND ies_especie    = mr_w_sup0552_4.espc_nota_fiscal
    AND cod_fornecedor = mr_w_sup0552_4.fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET m_conta_lanc = 0
 END IF

 END FUNCTION

#-----------------------------#
 FUNCTION sup0552_nfe_emitida()
#-----------------------------#
 DEFINE l_ies_nfe_emit      LIKE nfe_sup_compl.ies_nfe_emit,
        l_ies_alt_nfe_emit  CHAR(01)

 LET l_ies_nfe_emit = " "

 WHENEVER ERROR CONTINUE
 SELECT ies_nfe_emit
   INTO l_ies_nfe_emit
   FROM nfe_sup_compl
  WHERE cod_empresa   = mr_aviso_rec.cod_empresa
    AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_ies_nfe_emit = " "
 END IF

 IF l_ies_nfe_emit = " " OR l_ies_nfe_emit IS NULL THEN
    LET l_ies_nfe_emit = "N"
 END IF

 IF l_ies_nfe_emit = "S" AND m_ies_alt_nfe_emit = "N" THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_busca_tipo_processo()
#----------------------------------------#
 DEFINE l_processado       CHAR(01)

  WHENEVER ERROR CONTINUE
  SELECT w_sup0552_6.processado
    INTO l_processado
    FROM w_sup0552_6
   WHERE w_sup0552_6.empresa            = mr_w_sup0552_4.empresa
     AND w_sup0552_6.nota_fiscal        = mr_w_sup0552_4.nota_fiscal
     AND w_sup0552_6.serie_nota_fiscal  = mr_w_sup0552_4.serie_nota_fiscal
     AND w_sup0552_6.subserie_nf        = mr_w_sup0552_4.subserie_nf
     AND w_sup0552_6.espc_nota_fiscal   = mr_w_sup0552_4.espc_nota_fiscal
     AND w_sup0552_6.fornecedor         = mr_w_sup0552_4.fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET l_processado = "I"
  END IF

  RETURN l_processado

 END FUNCTION

#------------------------------------------------#
 FUNCTION sup0552_carrega_tipo_registro_P()
#------------------------------------------------#
 DEFINE lr_w_sup0552_4r  RECORD
                         tipo_registro      CHAR(01),
                         empresa            CHAR(02),
                         empresa_estabel    CHAR(02),
                         nota_fiscal        DECIMAL(7,0),
                         serie_nota_fiscal  CHAR(03),
                         subserie_nf        DECIMAL(2,0),
                         espc_nota_fiscal   CHAR(03),
                         fornecedor         CHAR(15),
                         dat_emis_nf        DATE,
                         dat_ent_nf         DATE,
                         cond_pagto         DECIMAL(3,0),
                         modo_embarque      DECIMAL(2,0),
                         tip_nota_fiscal    CHAR(01),
                         num_conhec_frete   DECIMAL(7,0),
                         serie_conhec_frete CHAR(03),
                         subserie_conh_fret DECIMAL(2,0),
                         transportador      CHAR(15),
                         val_tot_decl_nf    DECIMAL(17,2),
                         val_tot_decl_icms  DECIMAL(17,2),
                         val_tot_decl_ipi   DECIMAL(17,2),
                         cfop               CHAR(05),
                         cfop_compl         INTEGER,
                         processado         CHAR(01),
                         sequencia          SMALLINT,
                         pedido             DECIMAL(6,0),
                         ordem_compra       DECIMAL(9,0),
                         item               CHAR(15),
                         pre_unit_nf        DECIMAL(17,6),
                         qtd_decl_nf        DECIMAL(15,3),
                         pct_ipi            DECIMAL(6,3),
                         bas_calc_ipi       DECIMAL(17,2),
                         val_ipi            DECIMAL(17,2),
                         pct_icms           DECIMAL(6,3),
                         bas_calc_icms      DECIMAL(17,2),
                         val_icms           DECIMAL(17,2),
                         val_frete          DECIMAL(17,2),
                         pct_icms_frete     DECIMAL(6,3),
                         bc_icms_frete      DECIMAL(17,2),
                         val_icms_frete     DECIMAL(17,2),
                         compl_nota1        CHAR(120),
                         compl_nota2        CHAR(120),
                         desc_nota          DECIMAL(17,2),
                         insc_estad         CHAR(16),
                         seq_insc_estad     SMALLINT,
                         val_inss           DECIMAL(17,2),
                         val_inss_funrural  DECIMAL(17,2),
                         seq_tabulacao      INTEGER,
                         grade_1            CHAR(15),
                         grade_2            CHAR(15),
                         grade_3            CHAR(15),
                         grade_4            CHAR(15),
                         grade_5            CHAR(15),
                         num_peca           CHAR(15),
                         serie_peca         CHAR(15),
                         comprimento        DECIMAL(15,3),
                         largura            DECIMAL(15,3),
                         altura             DECIMAL(15,3),
                         diametro           DECIMAL(15,3),
                         local_estoq        CHAR(10),
                         num_lote           CHAR(15)
                         END RECORD

  LET lr_w_sup0552_4r.* = mr_w_sup0552_4.*

  LET sql_stmt = " SELECT w_sup0552_4.* ",
                   " FROM w_sup0552_4 ",
                  " WHERE w_sup0552_4.tipo_registro = 'P' "
  #-- OS 544109 fim --#

  WHENEVER ERROR CONTINUE
  PREPARE var_query7 FROM sql_stmt
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("PREPARE","VAR_QUERY7")
     RETURN
  END IF

  WHENEVER ERROR CONTINUE
  DECLARE cq_registro_P CURSOR WITH HOLD FOR var_query7
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","CQ_REGISTRO_p")
  END IF

  WHENEVER ERROR CONTINUE
  OPEN cq_registro_P
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("OPEN","CQ_MESTRE")
     RETURN
  END IF

  WHILE TRUE
     WHENEVER ERROR CONTINUE
     FETCH cq_registro_P INTO mr_w_sup0552_4.*

     IF sqlca.sqlcode <> 0 THEN
        IF sqlca.sqlcode <> 100 THEN
           CALL log003_err_sql("FETCH","cq_registro_P")
        END IF
        EXIT WHILE
     END IF

     WHENEVER ERROR CONTINUE
     INSERT INTO w_sup0552_6 (empresa        ,
                              nota_fiscal        ,
                              serie_nota_fiscal  ,
                              subserie_nf        ,
                              espc_nota_fiscal   ,
                              fornecedor         ,
                              processado        )
                      VALUES (mr_w_sup0552_4.empresa        ,
                              mr_w_sup0552_4.nota_fiscal        ,
                              mr_w_sup0552_4.serie_nota_fiscal  ,
                              mr_w_sup0552_4.subserie_nf        ,
                              mr_w_sup0552_4.espc_nota_fiscal   ,
                              mr_w_sup0552_4.fornecedor         ,
                              mr_w_sup0552_4.processado        )
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        LET m_houve_erro = TRUE
        LET m_status_arquivo = 1
     END IF

  END WHILE
  CLOSE cq_registro_P
  FREE  cq_registro_P

  LET mr_w_sup0552_4.* = lr_w_sup0552_4r.*

 END FUNCTION

#---------------------------------------#
 FUNCTION sup0552_efetua_consistencia(l_conta_array)
#---------------------------------------#
  DEFINE l_conta_array  SMALLINT,
         l_ind          SMALLINT,
         l_num_oc_ar    SMALLINT,
         l_cont         SMALLINT

  IF NOT sup0552_verifica_fechamento(mr_w_sup0552_4.dat_ent_nf, l_conta_array, "AR", FALSE) THEN    #578942
     LET l_conta_array = l_conta_array + 1
     RETURN l_conta_array
  END IF

  IF sup0552_nfe_emitida() THEN
     LET l_conta_array = l_conta_array + 1
     CALL sup0552_carrega_chave_consiste(l_conta_array)
     LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Esta Nota ja foi impressa, deve ser cancelada."
     RETURN l_conta_array
  END IF

  IF m_utiliza_nf_eletronica = 'S' THEN
     IF sup0552_verifica_sup_nf_eletronica(mr_nf_sup.cod_empresa,
                                           mr_nf_sup.num_aviso_rec,
                                           "EXCLUIR") THEN
        LET l_conta_array = l_conta_array + 1
        CALL sup0552_carrega_chave_consiste(l_conta_array)
        LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Esta nota fiscal foi enviada para a Sefaz e não poderá ser excluída."
        RETURN l_conta_array
     END IF
  END IF

  IF (mr_nf_sup.ies_incl_contab = "S" OR mr_nf_sup.ies_incl_contab = "M") THEN
     CALL sup0552_verifica_lancamentos()
  END IF

  CALL sup0552_verifica_cnd_pgto()

  CALL sup0552_consiste_nf_incluida_no_cap_contab(m_ies_pagamento, m_conta_lanc,"1", "N", l_conta_array) RETURNING m_status, l_conta_array
  # Se não existe nf incluida no cap e contab
  IF NOT m_status THEN
     CALL sup0552_verifica_relac_frete_x_nf("NF",
                                             mr_nf_sup.num_conhec,
                                             mr_nf_sup.ser_conhec,
                                             mr_nf_sup.ssr_conhec,
                                             mr_nf_sup.cod_transpor,
                                             l_conta_array) RETURNING m_status, l_conta_array
     # Se não existe relacionamento de frente com NF
     IF NOT m_status THEN
          IF NOT sup0552_verifica_carta_correcao() THEN
             CALL sup0552_deleta_ar_frete_cesta()
             CALL sup0552_verifica_devolucao(l_conta_array) RETURNING m_status, l_conta_array
             # Se não tem devolucao
             IF NOT m_status THEN
                IF m_gera_rsv_transf = "S" THEN
                   IF mr_nf_sup.ies_nf_aguard_nfe = "8" THEN
                      #Exclui nota
                      FOR l_ind = 1 TO 999
                         INITIALIZE l_num_oc_ar TO NULL
                         SELECT num_oc
                           INTO l_num_oc_ar
                           FROM aviso_rec
                          WHERE cod_empresa   = mr_aviso_rec.cod_empresa
                            AND num_aviso_rec = mr_aviso_rec.num_aviso_rec
                            AND num_seq       = l_ind
                         IF sqlca.sqlcode <> 0 THEN
                            # Nao tem mais sequencia.
                            EXIT FOR
                         END IF

                         SELECT num_pedido_fornec
                           INTO m_num_ped_fornec
                           FROM prog_ordem_sup
                          WHERE cod_empresa      = mr_aviso_rec.cod_empresa
                            AND num_oc           = l_num_oc_ar
                            AND num_versao       = 001
                            AND num_prog_entrega = 001

                         LET m_pedido_venda = m_num_ped_fornec[1,6]

                         IF NOT sup0552_busca_ped_venda(l_conta_array) THEN
                            LET l_conta_array = l_conta_array + 1
                         END IF

                         LET l_cont = 0
                         DECLARE cq_busca_ped_orig CURSOR FOR
                            SELECT num_pedido_cli
                              FROM pedidos
                             WHERE cod_empresa = m_cod_emp_transf
                               AND num_pedido  = m_pedido_venda1
                         FOREACH cq_busca_ped_orig INTO m_ped_venda_dest
                            SELECT COUNT(*)
                              INTO l_cont
                              FROM ordem_montag_item, ordem_montag_mest
                             WHERE ordem_montag_item.cod_empresa = mr_aviso_rec.cod_empresa
                               AND ordem_montag_item.num_pedido  = m_ped_venda_dest
                               AND ordem_montag_mest.cod_empresa = mr_aviso_rec.cod_empresa
                               AND ordem_montag_mest.num_om      = ordem_montag_item.num_om
                               AND ordem_montag_mest.ies_sit_om  = "N"

                            IF sqlca.sqlcode <> 0 OR l_cont IS NULL THEN
                               LET l_cont = 0
                            END IF
                            IF l_cont > 0 THEN
                             CLOSE cq_busca_ped_orig #764215#
                               EXIT FOREACH
                            END IF
                         END FOREACH
                       FREE cq_busca_ped_orig #764215#
                      END FOR
                      IF l_cont > 0 THEN
                         LET l_conta_array = l_conta_array + 1
                         CALL sup0552_carrega_chave_consiste(l_conta_array)
                         LET ma_array_consistencias[l_conta_array].txt_consistencia  = " Opcao nao permitida, existe ordem de montagem p/pedido ",m_ped_venda_dest
                      ELSE
                         IF NOT sup0552_verifica_nota_integrada_wms() THEN #2
                            CALL sup0552_exclusao_nota(l_conta_array) RETURNING l_conta_array
                         ELSE
                            CALL log0030_mensagem("Esta Nota Fiscal ja foi incluida na WMS","exlclamation")
                         END IF
                      END IF
                   ELSE
                      IF NOT sup0552_verifica_nota_integrada_wms() THEN #2
                         CALL sup0552_exclusao_nota(l_conta_array) RETURNING l_conta_array
                      ELSE
                         LET l_conta_array = l_conta_array + 1
                         CALL sup0552_carrega_chave_consiste(l_conta_array)
                         LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Esta Nota Fiscal ja foi incluida na WMS"
                      END IF
                   END IF

                ELSE
                   IF NOT sup0552_verifica_nota_integrada_wms() THEN #2
                      CALL sup0552_exclusao_nota(l_conta_array) RETURNING l_conta_array
                   ELSE
                      LET l_conta_array = l_conta_array + 1
                      CALL sup0552_carrega_chave_consiste(l_conta_array)
                      LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Esta Nota Fiscal ja foi incluida na WMS"
                   END IF
                END IF
             END IF
          END IF
     END IF
  END IF

  RETURN l_conta_array

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_verifica_devolucao_terceiros()
#----------------------------------------------#
   DEFINE l_qtd_devolvida LIKE item_de_terc.qtd_tot_devolvida

   DEFINE l_cod_fornecedor LIKE nf_sup.cod_fornecedor

     LET l_qtd_devolvida = NULL

     CALL sup0552_busca_fornecedor_triangulacao(mr_aviso_rec.cod_empresa, mr_aviso_rec.num_aviso_rec, mr_aviso_rec.num_seq) RETURNING l_cod_fornecedor

     IF gr_par_con.ies_contab_aen <> "4" THEN
        WHENEVER ERROR CONTINUE
        SELECT item_de_terc.qtd_tot_devolvida
          INTO l_qtd_devolvida
          FROM item_de_terc
         WHERE item_de_terc.cod_empresa    = mr_w_sup0552_4.empresa
           AND item_de_terc.num_nf         = mr_w_sup0552_4.nota_fiscal
           AND item_de_terc.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
           AND item_de_terc.ssr_nf         = mr_w_sup0552_4.subserie_nf
           AND item_de_terc.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
           AND item_de_terc.cod_fornecedor = l_cod_fornecedor
           AND item_de_terc.num_sequencia  = mr_aviso_rec.num_seq
        WHENEVER ERROR STOP
     ELSE
        WHENEVER ERROR CONTINUE
        SELECT item_de_terc_area.qtd_tot_devolvida
          INTO l_qtd_devolvida
          FROM item_de_terc_area
         WHERE item_de_terc_area.cod_empresa    = mr_w_sup0552_4.empresa
           AND item_de_terc_area.num_nf         = mr_w_sup0552_4.nota_fiscal
           AND item_de_terc_area.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
           AND item_de_terc_area.ssr_nf         = mr_w_sup0552_4.subserie_nf
           AND item_de_terc_area.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
           AND item_de_terc_area.cod_fornecedor = l_cod_fornecedor
           AND item_de_terc_area.num_sequencia  = mr_aviso_rec.num_seq
        WHENEVER ERROR STOP
     END IF

     IF l_qtd_devolvida IS NULL THEN
        LET l_qtd_devolvida = 0
     END IF

     IF l_qtd_devolvida <> 0 THEN
        RETURN TRUE
     ELSE
        RETURN FALSE
     END IF

  END FUNCTION

#------------------------------------#
 FUNCTION sup0552_possui_avf_insp_ar()
#------------------------------------#
 DEFINE l_contador    SMALLINT

  LET l_contador = NULL

  WHENEVER ERROR CONTINUE
  SELECT COUNT(*)
    INTO l_contador
    FROM avf_insp_ar
   WHERE avf_insp_ar.empresa           = mr_aviso_rec.empresa
     AND avf_insp_ar.aviso_recebto     = mr_aviso_rec.num_aviso_rec
     AND avf_insp_ar.seq_aviso_recebto = mr_aviso_rec.num_seq
  WHENEVER ERROR STOP

  IF sqlca.sqlcode <> 0 OR
     l_contador IS NULL THEN
     LET l_contador = 0
  END IF

  IF l_contador = 0 THEN
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF

 END FUNCTION

#---------------------------------------------#
 FUNCTION sup0552_verifica_item_wms(l_cod_item)
#---------------------------------------------#
 DEFINE l_cod_item     LIKE aviso_rec.cod_item,
        l_sucesso_sql  SMALLINT,
        l_ies_item_wms SMALLINT

 IF m_ies_wms_instalado = "S" AND sup0552_verifica_interf_ent_wms() THEN

     CALL wms0004_item_sob_controle_wms(mr_aviso_rec.cod_empresa , l_cod_item)
          RETURNING l_sucesso_sql, l_ies_item_wms

     IF l_sucesso_sql AND l_ies_item_wms THEN
       RETURN TRUE
     END IF

 END IF

 RETURN FALSE

END FUNCTION

#------------------------------------------#
 FUNCTION sup0552_verifica_interf_ent_wms()
#------------------------------------------#

  WHENEVER ERROR CONTINUE

  SELECT par_ies
    FROM par_sup_pad
   WHERE cod_empresa   = mr_aviso_rec.cod_empresa
     AND cod_parametro = "ies_interf_ent_wms"
     AND par_ies       = "S"
  WHENEVER ERROR STOP
  IF SQLCA.sqlcode = 0 THEN
     RETURN TRUE
  END IF
  IF SQLCA.sqlcode <> 100 OR SQLCA.sqlcode <> NOTFOUND THEN
   CALL log003_err_sql("SELECT","PAR_SUP_PAD")
  END IF
  RETURN FALSE

 END FUNCTION

#---------------------------------------------#
 FUNCTION sup0552_verifica_item_wis(l_cod_item)
#---------------------------------------------#

 DEFINE l_cod_item LIKE aviso_rec.cod_item

  WHENEVER ERROR CONTINUE
    SELECT *
      FROM wis_nf_item
     WHERE cod_fornecedor = mr_w_sup0552_4.fornecedor
       AND num_nff        = mr_w_sup0552_4.nota_fiscal
       AND cod_item       = l_cod_item
  WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
      RETURN TRUE
    ELSE
      RETURN FALSE
    END IF

 END FUNCTION

#---------------------------------#
 FUNCTION sup0552_gera_relat(l_tipo)
#---------------------------------#
 DEFINE l_tipo         CHAR(20),
        l_arquivo      CHAR(200),
        l_msg          CHAR(200),
        l_passou1      SMALLINT,
        l_passou2      SMALLINT,
        l_nom_arquivo  CHAR(200),
        l_caminho      CHAR(200),
        l_is_cliente55 SMALLINT,
        l_is_cliente357 SMALLINT

 INITIALIZE m_nome_arquivo_err TO NULL

 IF m_arg = FALSE THEN
    CLOSE WINDOW w_processo
 END IF

 LET l_passou1 = FALSE
 LET l_passou2 = FALSE

 IF NOT m_arg THEN
    IF log0280_saida_relat(10,42) IS NULL THEN
       ERROR "Processamento cancelado"
       CALL LOG_refresh_display()
       RETURN
    END IF
 END IF

 LET l_arquivo = "&&"


 ###############################
 #  RELATÓRIO DE CONSISTÊNCIA  #
 ###############################

 INITIALIZE mr_consistencia.* TO NULL

 LET l_is_cliente55 = FALSE
 LET l_is_cliente357 = FALSE

 IF find4GLFunction('supy43_cliente_55') THEN
    LET l_is_cliente55 = supy43_cliente_55(mr_w_sup0552_4.empresa)
 END IF

 IF find4GLFunction('supy49_cliente_357') THEN
    LET l_is_cliente357 = supy49_cliente_357(mr_w_sup0552_4.empresa)
 END IF

 DECLARE cq_w_sup0552_1 CURSOR FOR
  SELECT w_sup0552_1.*
    FROM w_sup0552_1
   ORDER BY w_sup0552_1.nota_fiscal,
            w_sup0552_1.serie_nota_fiscal,
            w_sup0552_1.subserie_nf,
            w_sup0552_1.espc_nota_fiscal,
            w_sup0552_1.fornecedor,
            w_sup0552_1.sequencia

 WHENEVER ERROR CONTINUE
 FOREACH cq_w_sup0552_1 INTO mr_consistencia.*
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_W_SUP0552_1")
        CLOSE cq_w_sup0552_1 #764215#
       EXIT FOREACH
    END IF

    IF mr_consistencia.arquivo <> l_arquivo THEN
       IF l_arquivo <> "&&" THEN # Se o valor da variavel for diferente do valor que ela foi iniciada, então finaliza o relatorio que foi gerado
          FINISH REPORT sup0552_relat_consistencia
       END IF

       IF m_arg = FALSE THEN
          IF l_tipo = "NORMAL" THEN
             IF g_ies_ambiente = "W" THEN
                IF p_ies_impressao = "S" THEN
                   CALL log150_procura_caminho("LST") RETURNING p_caminho
                   LET p_caminho = p_caminho CLIPPED, "sup0552.tmp"
                   START REPORT sup0552_relat_consistencia TO p_caminho
                ELSE
                   LET l_nom_arquivo = p_nom_arquivo CLIPPED, "_1"
                   START REPORT sup0552_relat_consistencia TO l_nom_arquivo
                END IF
             ELSE
                IF p_ies_impressao = "S" THEN
                   START REPORT sup0552_relat_consistencia TO PIPE p_nom_arquivo
                ELSE
                   LET l_nom_arquivo = p_nom_arquivo CLIPPED, "_1"
                   START REPORT sup0552_relat_consistencia TO l_nom_arquivo
                END IF
             END IF
          ELSE
             #-- OS 544109 inicio --#
             # Se não existe fornecedor, salva o arquivo de consistencia no diretorio padrão
             # porém com a mesma nomenclatura que o arquivo processado(com a extensao renomeada para .lst)
             IF NOT m_existe_fornec THEN
                CALL log150_procura_caminho("LST") RETURNING m_caminho
                LET m_caminho = m_caminho,"_",p_user,".lst"
             ELSE
             #Se existe salva dentro do diretorio de consistencia
                LET l_caminho = log0800_replace(mr_consistencia.arquivo, ".pend", " ")
                LET m_caminho = l_caminho CLIPPED,"_1_",p_user CLIPPED,".lst"
             END IF

             IF g_ies_ambiente = "W" THEN
                START REPORT sup0552_relat_consistencia TO m_caminho
             ELSE
                IF p_ies_impressao = "S" THEN
                   START REPORT sup0552_relat_consistencia TO PIPE m_caminho
                ELSE
                   START REPORT sup0552_relat_consistencia TO m_caminho
                END IF
             END IF
             #-- OS 544109 fim --#
          END IF
          ERROR " Processando extração do relatório de consistências ... "
          CALL LOG_refresh_display()
       ELSE
          CALL log150_procura_caminho("LST") RETURNING p_caminho
          LET l_nom_arquivo = p_caminho CLIPPED, "sup0552_", p_user CLIPPED, "_1.txt"
          START REPORT sup0552_relat_consistencia TO l_nom_arquivo
       END IF
    END IF

    OUTPUT TO REPORT sup0552_relat_consistencia(mr_consistencia.*, l_is_cliente55, l_is_cliente357)
    LET l_arquivo = mr_consistencia.arquivo
    LET l_passou1 = TRUE
 END FOREACH
 WHENEVER ERROR STOP
 CLOSE cq_w_sup0552_1
 FREE  cq_w_sup0552_1

 IF l_passou1 THEN
    CALL log0030_mensagem(" Fim do processamento. Ocorreram consistencias na importacao das NF's/Fretes. ","info")
    FINISH REPORT sup0552_relat_consistencia
 END IF

 IF g_ies_ambiente = "W" AND
    p_ies_impressao = "S"  THEN
    LET comando = "lpdos.bat ",
        p_caminho CLIPPED, " ", p_nom_arquivo CLIPPED
    RUN comando
 END IF

 IF m_arg = FALSE
 AND l_passou1 THEN
    IF NOT m_existe_fornec THEN
       LET l_msg = "Relat.consistências :" ,m_caminho CLIPPED
       CALL log0030_mensagem(l_msg,"info")
    END IF

    ERROR " "
    CALL LOG_refresh_display()
 END IF


 ######################################
 #  RELATÓRIO DE ARQUIVOS IMPORTADOS  #
 ######################################

 LET l_arquivo = "&&"

 INITIALIZE mr_importados.* TO NULL

 DECLARE cq_w_sup0552_2_2 CURSOR FOR
  SELECT w_sup0552_2.*
    FROM w_sup0552_2
   ORDER BY w_sup0552_2.tipo_registro,
            w_sup0552_2.nota_fiscal,
            w_sup0552_2.serie_nota_fiscal,
            w_sup0552_2.subserie_nf,
            w_sup0552_2.espc_nota_fiscal,
            w_sup0552_2.fornecedor

 WHENEVER ERROR CONTINUE
 FOREACH cq_w_sup0552_2_2 INTO mr_importados.*
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_W_SUP0552_2_2")
        CLOSE cq_w_sup0552_2_2 #764215#
       EXIT FOREACH
    END IF
    IF mr_importados.arquivo <> l_arquivo THEN
       IF l_arquivo <> "&&" THEN # Se o valor da variavel for diferente do valor que ela foi iniciada, então finaliza o relatorio que foi gerado
          FINISH REPORT sup0552_relat_nf_importadas
       END IF
       IF m_arg = FALSE THEN
          IF l_tipo = "NORMAL" THEN
             IF g_ies_ambiente = "W" THEN
                IF p_ies_impressao = "S" THEN
                   CALL log150_procura_caminho("LST") RETURNING p_caminho
                   LET p_caminho = p_caminho CLIPPED, "sup0552.tmp"
                   START REPORT sup0552_relat_nf_importadas TO p_caminho
                ELSE
                   LET l_nom_arquivo = p_nom_arquivo CLIPPED, "_2"
                   START REPORT sup0552_relat_nf_importadas TO l_nom_arquivo
                END IF
             ELSE
                IF p_ies_impressao = "S" THEN
                   START REPORT sup0552_relat_nf_importadas TO PIPE p_nom_arquivo
                ELSE
                   LET l_nom_arquivo = p_nom_arquivo CLIPPED, "_2"
                   START REPORT sup0552_relat_nf_importadas TO l_nom_arquivo
                END IF
             END IF
          ELSE
             #-- OS 544109 inicio --#
             #Se existe salva dentro do diretorio de consistencia
             IF NOT m_existe_fornec THEN
                CALL log150_procura_caminho("LST") RETURNING m_caminho
                LET m_caminho = m_caminho,"_",p_user,".lst"
             ELSE
             #Se existe salva dentro do diretorio de consistencia
                LET l_caminho = log0800_replace(mr_importados.arquivo, ".pend", " ")
                LET m_caminho = l_caminho CLIPPED,"_2_",p_user CLIPPED,".lst"
             END IF

             IF g_ies_ambiente = "W" THEN
                START REPORT sup0552_relat_nf_importadas TO m_caminho
             ELSE
                IF p_ies_impressao = "S" THEN
                   START REPORT sup0552_relat_nf_importadas TO PIPE m_caminho
                ELSE
                   START REPORT sup0552_relat_nf_importadas TO m_caminho
                END IF
             END IF
             #-- OS 544109 fim --#
          END IF
          ERROR " Processando extracao do relatorio de NF's/Fretes importados ... "
          CALL LOG_refresh_display()
       ELSE
          CALL log150_procura_caminho("LST") RETURNING p_caminho
          LET l_nom_arquivo = p_caminho CLIPPED, "sup0552_", p_user CLIPPED, "_2.txt"
          START REPORT sup0552_relat_nf_importadas TO l_nom_arquivo
       END IF
    END IF
    OUTPUT TO REPORT sup0552_relat_nf_importadas(mr_importados.*)
    LET l_arquivo = mr_importados.arquivo
    LET l_passou2 = TRUE
 END FOREACH
 WHENEVER ERROR STOP
 CLOSE cq_w_sup0552_2_2
 FREE  cq_w_sup0552_2_2

 IF l_passou2 THEN
    FINISH REPORT sup0552_relat_nf_importadas
 END IF

 IF l_passou2 THEN
    IF NOT l_passou1 THEN
       CALL log0030_mensagem(" Fim do processamento. Não ocorreram consistencias na Import. das NF's/Fretes. ","info")
    END IF
 END IF

 IF g_ies_ambiente = "W" AND
    p_ies_impressao = "S"  THEN
    LET comando = "lpdos.bat ",
        p_caminho CLIPPED, " ", p_nom_arquivo CLIPPED
    RUN comando
 END IF

 IF m_arg = FALSE
 AND (l_passou1 OR l_passou2) THEN
    IF m_existe_fornec THEN
       LET l_msg = "Relatório de consistências criado no diretório parametrizado no SUP5552"
    ELSE
       LET l_msg = "Relat.NF's/Fretes importados : ",l_nom_arquivo CLIPPED
    END IF
    CALL log0030_mensagem(l_msg,"info")
    ERROR " "
    CALL LOG_refresh_display()
 END IF

 IF  NOT l_passou1
 AND NOT l_passou2 THEN
    IF m_arg = FALSE THEN
       CALL log0030_mensagem(" Fim do processamento. Não existem notas Fiscais, fretes ou relacionamento NFxFrete a serem importados. ","info")
    END IF
 END IF

 IF LOG_existe_epl("sup0552y_after_process_importacao_nf") THEN
    CALL LOG_setVar("caminho",m_dir_arq_sup0552)
    IF NOT sup0552y_after_process_importacao_nf() THEN
       CALL log0030_mensagem("Erro ao enviar email de retorno para o fornecedor.","info")
    END IF
 END IF

#CH786325
 IF LOG_existe_epl("sup0552y_after_process_import_nf_comprador") THEN
    IF m_lista_classif_quebra_comprador = "S" THEN
       CALL LOG_setVar("caminho",p_caminho)
       IF NOT sup0552y_after_process_import_nf_comprador() THEN
          CALL log0030_mensagem("Erro ao enviar email de retorno para o comprador.","info")
       END IF
    END IF
 END IF
#--------
 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup0552_data_nf_com_mes_fechado()
#-------------------------------------------------#
 DEFINE l_data_fechamento   LIKE par_estoque.dat_prx_fecha_est

   LET l_data_fechamento = MDY(MONTH(gr_par_estoque.dat_prx_fecha_est),01,YEAR(gr_par_estoque.dat_prx_fecha_est))

   IF mr_w_sup0552_4.dat_ent_nf < l_data_fechamento THEN
      RETURN TRUE # Confirmando que a data da nota fiscal pertence ao mes já fechado
   ELSE
      RETURN FALSE
   END IF

 END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_limpa_w_arquivo_data()
#----------------------------------------#

 WHENEVER ERROR CONTINUE
 DELETE FROM w_arquivo_data WHERE 1=1
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("EXCLUSAO","W_ARQUIVO_DATA")
 END IF

 END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_carrega_fornec_agend()
#----------------------------------------#
  DEFINE l_ind        SMALLINT,
         l_houve_erro SMALLINT

   LET l_houve_erro = FALSE

   FOR l_ind = 1 TO m_ind_fornec_agend
      IF NOT sup0552_carrega_arq_fornec(ma_fornec_agend[l_ind].dir_arq_pendente) THEN
         LET l_houve_erro = TRUE
      END IF
      IF l_houve_erro THEN
         RETURN FALSE
      END IF
   END FOR

   RETURN TRUE

 END FUNCTION

#------------------------------------#
 FUNCTION sup0552_carrega_arq_fornec(l_caminho)
#------------------------------------#
 DEFINE l_caminho         CHAR(100),
        l_msg             CHAR(200),
        l_ind             SMALLINT

 DEFINE l_arr_curr     SMALLINT,
        l_scr_line     SMALLINT,
        l_executa      CHAR(100),
        l_caminho_dest CHAR(100),
        l_selecionou   SMALLINT

 LET l_selecionou =  FALSE

 #Arquivo temporario, usado apenas para listar os arquivos do diretorio
 LET l_caminho_dest = "sup0552_lista_",p_user CLIPPED,".lst" # OS 612317

 CASE g_ies_ambiente
    WHEN "U"
       LET l_executa = "ls -p -a -d ",l_caminho CLIPPED , "/* "
    WHEN "W"
       LET l_executa = "dir /a:a/o:n /b ",  l_caminho CLIPPED #, " * "
 END CASE

 LET l_executa = l_executa CLIPPED, " > ",l_caminho_dest CLIPPED

 RUN l_executa RETURNING m_status
 IF m_status <> 0 THEN
     IF NOT m_arg THEN
        LET l_msg = "Não existe arquivo para ser listado em ", l_caminho
        CALL log0030_mensagem(l_msg,"exclamation")
     ELSE
        LET l_msg = "Não existe arquivo para o fornecedor ", m_raz_social
        CALL log0030_mensagem(l_msg,"exclamation") # OS 612317
        CALL LOG_refresh_display()
     END IF
     RETURN FALSE
 END IF

 CALL sup0552_cria_temp_carrega_arquivos() RETURNING m_status

 WHENEVER ERROR CONTINUE
 LOAD FROM l_caminho_dest DELIMITER "" INSERT INTO w_arquivo_data
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    IF NOT m_arg THEN
       LET l_msg = "Erro na importação do arquivo.", sqlca.sqlcode
       CALL log0030_mensagem(l_msg, "exclamation")
    ELSE
       LET l_msg = "Erro na importação do arquivo para o fornecedor ", m_raz_social
       ERROR l_msg
       #CALL LOG_refresh_display()
    END IF
    RETURN FALSE
 END IF

 CASE g_ies_ambiente
    WHEN "U"
       LET l_executa = "rm ", l_caminho_dest
    WHEN "W"
       LET l_executa = "del ", l_caminho_dest
 END CASE
 RUN l_executa RETURNING m_status
 IF m_status <> 0 THEN
     CALL log0030_mensagem( "Erro remover arquivo","exclamation")
     RETURN FALSE
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_arquivo5 CURSOR WITH HOLD FOR
 SELECT w_arquivo_data.arquivo
   FROM w_arquivo_data
  WHERE 1=1
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0  THEN
    CALL log0030_mensagem("DECLARE","CQ_ARQUIVO5")
    RETURN FALSE
 END IF

 LET m_ind_arq = 1

 WHENEVER ERROR CONTINUE
 FOREACH cq_arquivo5 INTO ma_caminho[m_ind_arq].caminho

    IF sqlca.sqlcode <> 0 THEN
       CALL log0030_mensagem("FOREACH","CQ_ARQUIVO5")
        CLOSE cq_arquivo5 #764215#
       EXIT FOREACH
    END IF

    LET ma_caminho[m_ind_arq].selecao = "S"

    LET m_ind_arq = m_ind_arq + 1

 END FOREACH
 WHENEVER ERROR STOP

 LET m_ind_arq = m_ind_arq - 1

 CLOSE cq_arquivo5
 FREE  cq_arquivo5


 IF m_ind_arq > 0
 AND NOT m_arg THEN
    CALL log130_procura_caminho("sup05522") RETURNING m_comando
    OPEN WINDOW w_sup05522 AT 02, 02 WITH FORM m_comando
     ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST)

    DISPLAY m_raz_social TO raz_social
    CALL LOG_refresh_display()

    CALL SET_COUNT(m_ind_arq)

    INPUT ARRAY ma_caminho WITHOUT DEFAULTS FROM s_caminho_fornec.*
      BEFORE ROW
          LET l_arr_curr = ARR_CURR()
          LET l_scr_line = SCR_LINE()

      AFTER FIELD selecao
         IF ma_caminho[l_arr_curr].selecao <> "S"
         AND ma_caminho[l_arr_curr].selecao <> "N" THEN
            NEXT FIELD selecao
         END IF
         IF ma_caminho[l_arr_curr].selecao = 'S' THEN
            LET m_nom_arquivo = ma_caminho[l_arr_curr].caminho
            IF NOT sup0552_valida_arquivo() THEN
               CALL log0030_mensagem("Arquivo já processado.","info")
               NEXT FIELD selecao
            END IF
         END IF

      AFTER INPUT
         IF NOT int_flag THEN
            FOR l_ind = 1 TO m_ind_arq
               IF ma_caminho[l_ind].selecao = 'S' THEN
                  LET l_selecionou = TRUE
                  LET m_nom_arquivo = ma_caminho[l_ind].caminho
                  IF NOT sup0552_valida_arquivo() THEN
                     CALL log0030_mensagem("Existe arquivo já processado na seleção.","info")
                     NEXT FIELD selecao
                  END IF
               END IF
            END FOR
            IF NOT l_selecionou THEN
               LET m_existe_fornec = FALSE
            END IF
         END IF

    END INPUT

    CLOSE WINDOW w_sup05522
    CURRENT WINDOW IS w_sup05521

    IF int_flag = 1 THEN
       RETURN FALSE
    END IF

 ELSE
    IF m_ind_arq > 0 THEN
       LET m_existe_fornec = TRUE
    ELSE
       LET m_existe_fornec = FALSE
    END IF
    IF NOT m_arg THEN
       CURRENT WINDOW IS w_sup05521
    END IF
 END IF

 RETURN TRUE

 END FUNCTION

#-------------------------------------------#
 FUNCTION sup0552_existe_sup_fornec_agto()
#-------------------------------------------#

 WHENEVER ERROR CONTINUE
 DECLARE cq_sup_fornec CURSOR WITH HOLD FOR
 SELECT sup_fornec_agto.fornecedor          ,
        sup_fornec_agto.tip_movimentacao    ,
        sup_fornec_agto.ambiente            ,
        sup_fornec_agto.dir_arq_pendente    ,
        sup_fornec_agto.dir_arq_processado  ,
        sup_fornec_agto.dir_arquivo_erro    ,
        sup_fornec_agto.dir_arq_consis      ,
        sup_fornec_agto.dir_arq_nconform
   FROM sup_fornec_agto
  WHERE sup_fornec_agto.empresa          = p_cod_empresa
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("SELECAO","SUP_FORNEC_AGTO")
 END IF

 WHENEVER ERROR CONTINUE
 OPEN cq_sup_fornec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("OPEN","SUP_FORNEC_AGTO")
 END IF

 LET m_ind_fornec_agend = 1

 WHILE TRUE
    WHENEVER ERROR CONTINUE
    FETCH cq_sup_fornec INTO ma_fornec_agend[m_ind_fornec_agend].fornecedor,
                             ma_fornec_agend[m_ind_fornec_agend].dir_arq_pendente,
                             ma_fornec_agend[m_ind_fornec_agend].dir_arq_processado,
                             ma_fornec_agend[m_ind_fornec_agend].dir_arquivo_erro,
                             ma_fornec_agend[m_ind_fornec_agend].dir_arq_consis
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FETCH","cq_sup_fornec")
    END IF

    LET m_ind_fornec_agend = m_ind_fornec_agend + 1

  END WHILE
  CLOSE cq_sup_fornec
  FREE  cq_sup_fornec

  LET m_ind_fornec_agend = m_ind_fornec_agend - 1

  IF m_ind_fornec_agend = 0 THEN
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF

 END FUNCTION

#-----------------------------------------------------------------------------------------#
 FUNCTION sup0552_existe_item_de_terc(l_cod_empresa,l_num_nf, l_ser_nf, l_ssr_nf, l_cod_fornecedor,
                                      l_ies_especie_nf, l_num_sequencia)
#-----------------------------------------------------------------------------------------#
 DEFINE l_cod_empresa       LIKE empresa.cod_empresa,
        l_num_nf            LIKE item_de_terc.num_nf,
        l_ser_nf            LIKE item_de_terc.ser_nf,
        l_ssr_nf            LIKE item_de_terc.ssr_nf,
        l_cod_fornecedor    LIKE item_de_terc.cod_fornecedor,
        l_ies_especie_nf    LIKE item_de_terc.ies_especie_nf,
        l_num_sequencia     LIKE item_de_terc.num_sequencia

 WHENEVER ERROR CONTINUE
  SELECT item_de_terc.num_nf
    FROM item_de_terc
   WHERE item_de_terc.cod_empresa    = l_cod_empresa
     AND item_de_terc.num_nf         = l_num_nf
     AND item_de_terc.ser_nf         = l_ser_nf
     AND item_de_terc.ssr_nf         = l_ssr_nf
     AND item_de_terc.cod_fornecedor = l_cod_fornecedor
     AND item_de_terc.ies_especie_nf = l_ies_especie_nf
     AND item_de_terc.num_sequencia  = l_num_sequencia
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 0 THEN
    RETURN TRUE
 END IF

 RETURN FALSE

END FUNCTION

#--------------------------------------#
 FUNCTION sup0552_gera_item_de_terc(lr_item, l_gru_ctr_desp_item)
#--------------------------------------#
   DEFINE lr_item_de_terc     RECORD LIKE item_de_terc.*,
          l_item_de_terc_c    RECORD LIKE item_de_terc_compl.*,
          l_texto             CHAR(100),
          l_mot_remes_item    CHAR(2),
          lr_aviso_rec        RECORD LIKE aviso_rec.*,
          lr_item             RECORD LIKE item.*,
          l_cod_seg_merc      LIKE item.cod_seg_merc,
          l_cod_cla_uso       LIKE item.cod_cla_uso,
          l_gru_ctr_desp_item LIKE item_sup.gru_ctr_desp

   DEFINE l_cod_fornecedor  LIKE nf_sup.cod_fornecedor

   IF  mr_nf_sup.ies_nf_aguard_nfe = "B"
   AND m_contr_terc_no_dep = "N" THEN
      RETURN FALSE
   END IF

     IF mr_nf_sup.ies_nf_aguard_nfe  = "T" THEN
        LET lr_item_de_terc.cod_motivo_remessa = m_cod_mot_rem_terc

        WHENEVER ERROR CONTINUE
        SELECT parametros[19,20]
          INTO l_mot_remes_item
          FROM item_parametro
          WHERE item_parametro.cod_empresa = lr_item.cod_empresa
            AND item_parametro.cod_item    = lr_item.cod_item
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 0 THEN
           IF  l_mot_remes_item IS NOT NULL
           AND l_mot_remes_item <> " " THEN
              LET lr_item_de_terc.cod_motivo_remessa = l_mot_remes_item
           END IF
        END IF
     END IF

     LET lr_item_de_terc.qtd_tot_recebida   = mr_w_sup0552_4_it.qtd_decl_nf

     IF mr_nf_sup.ies_nf_aguard_nfe = "4" THEN
        LET lr_item_de_terc.cod_motivo_remessa = m_cod_motivo_remessa[1,2]
        LET lr_item_de_terc.qtd_tot_recebida   = 0
     END IF

     LET lr_item_de_terc.cod_empresa       = mr_w_sup0552_4.empresa
     LET lr_item_de_terc.num_nf            = mr_w_sup0552_4.nota_fiscal
     LET lr_item_de_terc.ser_nf            = mr_w_sup0552_4.serie_nota_fiscal
     LET lr_item_de_terc.ssr_nf            = mr_w_sup0552_4.subserie_nf
     LET lr_item_de_terc.ies_especie_nf    = mr_w_sup0552_4.espc_nota_fiscal

  ## OS 407088
     CALL sup0552_busca_fornecedor_triangulacao(mr_nf_sup.cod_empresa, mr_nf_sup.num_aviso_rec, mr_w_sup0552_4_it.sequencia) RETURNING l_cod_fornecedor
     LET lr_item_de_terc.cod_fornecedor    = l_cod_fornecedor
     LET lr_item_de_terc.ies_incl_contab   = "N"
     LET lr_item_de_terc.num_sequencia     = mr_w_sup0552_4_it.sequencia
     LET lr_item_de_terc.dat_emis_nf       = mr_nf_sup.dat_emis_nf
     LET lr_item_de_terc.dat_entrada_nf    = mr_nf_sup.dat_entrada_nf
     LET lr_item_de_terc.dat_inclusao_seq  = TODAY
     LET lr_item_de_terc.cod_cla_fisc      = lr_item.cod_cla_fisc
     LET lr_item_de_terc.cod_item          = lr_item.cod_item
     LET lr_item_de_terc.den_item          = lr_item.den_item
     LET lr_item_de_terc.cod_unid_med      = lr_item.cod_unid_med
     LET lr_item_de_terc.dat_retorno_prev  = NULL
     LET lr_item_de_terc.val_remessa       = mr_aviso_rec.val_liquido_item
     LET lr_item_de_terc.val_icms          = 0
     LET lr_item_de_terc.val_ipi           = 0
     LET lr_item_de_terc.qtd_tot_devolvida = 0

     IF gr_par_con.ies_contab_aen = "S" OR
        gr_par_con.ies_contab_aen = "4" THEN
        CALL sup376_busca_item(p_cod_empresa, lr_item_de_terc.cod_item)
             RETURNING p_status
        LET lr_item_de_terc.cod_area_negocio = lr_item.cod_lin_prod
        LET lr_item_de_terc.cod_lin_negocio  = lr_item.cod_lin_recei
        LET l_cod_seg_merc                   = lr_item.cod_seg_merc
        LET l_cod_cla_uso                    = lr_item.cod_cla_uso
        IF p_status = FALSE THEN
           LET lr_item_de_terc.cod_area_negocio = 0
           LET lr_item_de_terc.cod_lin_negocio  = 0
           LET l_cod_seg_merc                   = 0
           LET l_cod_cla_uso                    = 0
        END IF
     ELSE
        LET lr_item_de_terc.cod_area_negocio = 0
        LET lr_item_de_terc.cod_lin_negocio  = 0
        LET l_cod_seg_merc                   = NULL
        LET l_cod_cla_uso                    = NULL
     END IF

     LET lr_item_de_terc.tex_observ = NULL
     SELECT cod_empresa
       FROM item_de_terc
      WHERE item_de_terc.cod_empresa    = lr_item_de_terc.cod_empresa
        AND item_de_terc.num_nf         = lr_item_de_terc.num_nf
        AND item_de_terc.ser_nf         = lr_item_de_terc.ser_nf
        AND item_de_terc.ssr_nf         = lr_item_de_terc.ssr_nf
        AND item_de_terc.ies_especie_nf = lr_item_de_terc.ies_especie_nf
        AND item_de_terc.cod_fornecedor = lr_item_de_terc.cod_fornecedor
        AND item_de_terc.num_sequencia  = lr_item_de_terc.num_sequencia
     IF SQLCA.SQLCODE = 0 THEN
     ELSE
       #inicio OS 514411#
       IF m_qtd_dias_final_export IS NOT NULL AND
          m_qtd_dias_final_export <> " " THEN
          LET lr_item_de_terc.dat_retorno_prev = TODAY + m_qtd_dias_final_export UNITS DAY
       END IF
       #fim OS 514411#
       WHENEVER ERROR CONTINUE
       INSERT INTO item_de_terc VALUES (lr_item_de_terc.*)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET m_houve_erro = TRUE
          LET m_status_arquivo = 1
          RETURN FALSE
       END IF
     END IF
     IF gr_par_con.ies_contab_aen = "4" THEN
        SELECT cod_empresa
          FROM item_de_terc_area
         WHERE item_de_terc_area.cod_empresa    = lr_item_de_terc.cod_empresa
           AND item_de_terc_area.num_nf         = lr_item_de_terc.num_nf
           AND item_de_terc_area.ser_nf         = lr_item_de_terc.ser_nf
           AND item_de_terc_area.ssr_nf         = lr_item_de_terc.ssr_nf
           AND item_de_terc_area.ies_especie_nf = lr_item_de_terc.ies_especie_nf
           AND item_de_terc_area.cod_fornecedor = lr_item_de_terc.cod_fornecedor
           AND item_de_terc_area.num_sequencia  = lr_item_de_terc.num_sequencia
        IF SQLCA.SQLCODE <> 0 THEN
           WHENEVER ERROR CONTINUE
           INSERT INTO item_de_terc_area VALUES (lr_item_de_terc.*, l_cod_seg_merc,
                                                 l_cod_cla_uso)
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              LET m_houve_erro = TRUE
              LET m_status_arquivo = 1
              RETURN FALSE
           END IF
        END IF
     END IF

     LET l_item_de_terc_c.cod_empresa     = lr_item_de_terc.cod_empresa
     LET l_item_de_terc_c.num_seq         = lr_item_de_terc.num_sequencia
     LET l_item_de_terc_c.cod_cliente     = lr_item_de_terc.cod_fornecedor
     LET l_item_de_terc_c.cod_fornecedor  = NULL
     LET l_item_de_terc_c.num_nf_fatura   = NULL
     LET l_item_de_terc_c.ser_nf_fatura   = NULL
     LET l_item_de_terc_c.num_pedido      = NULL
     LET l_item_de_terc_c.nom_arq_trans   = NULL
     LET l_item_de_terc_c.num_aviso_rec   = mr_nf_sup.num_aviso_rec
     LET l_item_de_terc_c.num_nf          = lr_item_de_terc.num_nf
     LET l_item_de_terc_c.ser_nf          = lr_item_de_terc.ser_nf
     LET l_item_de_terc_c.ssr_nf          = lr_item_de_terc.ssr_nf
     LET l_item_de_terc_c.ies_especie_nf  = lr_item_de_terc.ies_especie_nf
     LET l_item_de_terc_c.cod_fornec_nf   = lr_item_de_terc.cod_fornecedor

     SELECT cod_empresa
       FROM item_de_terc_compl
      WHERE item_de_terc_compl.cod_empresa    = lr_item_de_terc.cod_empresa
        AND item_de_terc_compl.num_nf         = lr_item_de_terc.num_nf
        AND item_de_terc_compl.ser_nf         = lr_item_de_terc.ser_nf
        AND item_de_terc_compl.ssr_nf         = lr_item_de_terc.ssr_nf
        AND item_de_terc_compl.ies_especie_nf = lr_item_de_terc.ies_especie_nf
        AND item_de_terc_compl.cod_fornec_nf  = lr_item_de_terc.cod_fornecedor
        AND item_de_terc_compl.num_seq        = lr_item_de_terc.num_sequencia
     IF SQLCA.SQLCODE <> 0 THEN
       WHENEVER ERROR CONTINUE
       INSERT INTO item_de_terc_compl VALUES (l_item_de_terc_c.*)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET m_houve_erro = TRUE
          LET m_status_arquivo = 1
          RETURN FALSE
       END IF
     END IF
     RETURN TRUE
 END FUNCTION

#-------------------------------------------------------------------------#
 FUNCTION sup0552_atualiza_item_de_terc(l_cod_empresa, l_val_remessa, l_cod_cla_fisc,
                                        l_den_item, l_cod_unid_med,
                                        l_dat_emis_nf, l_dat_entrada_nf,
                                        l_num_nf, l_ser_nf, l_ssr_nf,
                                        l_cod_fornecedor, l_ies_especie_nf,
                                        l_num_sequencia, l_ind)
#-------------------------------------------------------------------------#

  DEFINE l_cod_empresa         LIKE empresa.cod_empresa,
         l_ind                 SMALLINT,
         l_num_nf              LIKE item_de_terc.num_nf,
         l_ser_nf              LIKE item_de_terc.ser_nf,
         l_ssr_nf              LIKE item_de_terc.ssr_nf,
         l_den_item            LIKE item_de_terc.den_item,
         l_sql_stmt            CHAR(5000),
         l_dat_emis_nf         LIKE item_de_terc.dat_emis_nf,
         l_val_remessa         LIKE item_de_terc.val_remessa,
         l_cod_cla_fisc        LIKE item_de_terc.cod_cla_fisc,
         l_cod_unid_med        LIKE item_de_terc.cod_unid_med,
         l_num_sequencia       LIKE item_de_terc.num_sequencia,
         l_dat_entrada_nf      LIKE item_de_terc.dat_entrada_nf,
         l_cod_fornecedor      LIKE item_de_terc.cod_fornecedor,
         l_ies_especie_nf      LIKE item_de_terc.ies_especie_nf,
         l_val_remessa_char    CHAR(30)

  LET l_val_remessa_char = l_val_remessa     USING '--------------&.&&'

  WHENEVER ERROR CONTINUE
  SELECT item_de_terc.num_nf
    FROM item_de_terc
   WHERE item_de_terc.cod_empresa    = l_cod_empresa
     AND item_de_terc.num_nf         = l_num_nf
     AND item_de_terc.ser_nf         = l_ser_nf
     AND item_de_terc.ssr_nf         = l_ssr_nf
     AND item_de_terc.cod_fornecedor = l_cod_fornecedor
     AND item_de_terc.ies_especie_nf = l_ies_especie_nf
     AND item_de_terc.num_sequencia  = l_num_sequencia
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     LET l_sql_stmt = " UPDATE item_de_terc "

     IF l_ind = 1 THEN
        LET l_sql_stmt = l_sql_stmt CLIPPED,
                         " SET item_de_terc.val_remessa = ",log2260_troca_virgula_por_ponto (l_val_remessa_char),", ",
                             " item_de_terc.cod_cla_fisc   = """,l_cod_cla_fisc,""", ",
                             " item_de_terc.den_item       = ? ,",
                             " item_de_terc.cod_unid_med   = """,l_cod_unid_med,""" "
     ELSE
        LET l_sql_stmt = l_sql_stmt CLIPPED,
                         " SET item_de_terc.dat_emis_nf    = """,l_dat_emis_nf,""", ",
                             " item_de_terc.dat_entrada_nf = """,l_dat_entrada_nf,""" "
     END IF

     LET l_sql_stmt = l_sql_stmt CLIPPED,
                       " WHERE item_de_terc.cod_empresa    = """,l_cod_empresa,""" ",
                         " AND item_de_terc.num_nf         = ",l_num_nf," ",
                         " AND item_de_terc.ser_nf         = """,l_ser_nf,""" ",
                         " AND item_de_terc.ssr_nf         = ",l_ssr_nf," ",
                         " AND item_de_terc.cod_fornecedor = """,l_cod_fornecedor,""" ",
                         " AND item_de_terc.ies_especie_nf = """,l_ies_especie_nf,""" ",
                         " AND item_de_terc.num_sequencia  = ",l_num_sequencia," "

     WHENEVER ERROR CONTINUE
     PREPARE var_update FROM l_sql_stmt
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("PREPARE","ITEM_DE_TERC")
        RETURN FALSE
     END IF

     WHENEVER ERROR CONTINUE
     IF l_ind = 1 THEN
        EXECUTE var_update USING l_den_item
     ELSE
        EXECUTE var_update
     END IF
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("UPADTE","ITEM_DE_TERC")
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_busca_fornecedor_triangulacao(l_cod_empresa, l_num_aviso_rec, l_num_seq)
#----------------------------------------------#
 DEFINE l_cod_empresa      LIKE empresa.cod_empresa,
        l_num_aviso_rec    LIKE aviso_rec.num_aviso_rec,
        l_num_seq          LIKE aviso_rec.num_seq

 DEFINE l_parametro_ind     LIKE obf_par_grp_desp.parametro_ind,
        l_gru_ctr_desp_item LIKE aviso_rec.gru_ctr_desp_item,
        l_gru_ctr_desp      LIKE item_sup.gru_ctr_desp,
        l_fornecedor        LIKE sup_par_ar.parametro_texto

 LET l_fornecedor = mr_nf_sup.cod_fornecedor

 INITIALIZE l_gru_ctr_desp_item TO NULL
 WHENEVER ERROR CONTINUE
 SELECT gru_ctr_desp_item
   INTO l_gru_ctr_desp_item
   FROM aviso_rec
  WHERE cod_empresa   = l_cod_empresa
    AND num_aviso_rec = l_num_aviso_rec
    AND num_seq       = l_num_seq
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_gru_ctr_desp_item = l_gru_ctr_desp
 END IF

 INITIALIZE l_parametro_ind TO NULL
 WHENEVER ERROR CONTINUE
 SELECT parametro_ind
   INTO l_parametro_ind
   FROM obf_par_grp_desp
  WHERE obf_par_grp_desp.empresa         = l_cod_empresa
    AND obf_par_grp_desp.grp_ctr_despesa = l_gru_ctr_desp_item
    AND obf_par_grp_desp.unid_federal    = " "    #a U.F será sempre em branco para este parametro neste caso
    AND obf_par_grp_desp.parametro       = "relac_terceirizacao"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    RETURN l_fornecedor
 END IF

## Busca fornecedor triangulação
 IF l_parametro_ind IS NOT NULL AND
    l_parametro_ind = "T" THEN
    WHENEVER ERROR CONTINUE
    SELECT parametro_texto
      INTO l_fornecedor
      FROM sup_par_ar
     WHERE empresa           = l_cod_empresa
       AND aviso_recebto     = l_num_aviso_rec
       AND seq_aviso_recebto = 0
       AND parametro         = "fornec_triangulacao"
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       RETURN l_fornecedor
    END IF
 END IF

 RETURN l_fornecedor
 END FUNCTION


#--OS 544109 fim --#

#------------------------------------------#
 FUNCTION sup0552_busca_parametros_gerais()
#------------------------------------------#
  DEFINE l_status       SMALLINT

  INITIALIZE m_considera_num_lote_emp_origem TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "considera_num_lote_emp_origem")
  RETURNING m_considera_num_lote_emp_origem, p_status
  IF p_status = FALSE OR
     m_considera_num_lote_emp_origem IS NULL OR
     m_considera_num_lote_emp_origem = " " THEN
     LET m_considera_num_lote_emp_origem = "N"
  END IF

  INITIALIZE m_ies_inf_dat_fabr TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_ies
   INTO m_ies_inf_dat_fabr
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
    AND par_sup_pad.cod_parametro = 'ies_inf_dat_fabr'
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR
     m_ies_inf_dat_fabr IS NULL OR
     m_ies_inf_dat_fabr = ' ' THEN
     LET m_ies_inf_dat_fabr = 'N'
  END IF

  INITIALIZE m_ies_lote_automat  TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_logix.parametros[75,75]
    INTO m_ies_lote_automat
    FROM par_logix
   WHERE par_logix.cod_empresa = p_cod_empresa
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR
     m_ies_lote_automat  IS NULL OR
     m_ies_lote_automat  = ' ' THEN
     LET m_ies_lote_automat  = 'N'
  END IF

  INITIALIZE m_contr_local_terc TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_txt
    INTO m_contr_local_terc
    FROM par_sup_pad
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "contr_local_terc"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR
     m_contr_local_terc IS NULL THEN
     LET m_contr_local_terc = " "
  END IF

  #OS490925
  INITIALIZE m_ver_dupli_peca_serie TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"verif_dupli_numero_peca_serie")
     RETURNING m_ver_dupli_peca_serie, p_status
  IF p_status = FALSE
  OR m_ver_dupli_peca_serie IS NULL
  OR m_ver_dupli_peca_serie = " " THEN
     LET m_ver_dupli_peca_serie = "S"
  END IF
  #OS490925

  CALL log2250_busca_parametro(p_cod_empresa,"valida_nf_frete_filiais")
   RETURNING m_valida_nf_frete_filiais, l_status
  IF l_status = FALSE OR m_valida_nf_frete_filiais IS NULL OR m_valida_nf_frete_filiais = " " THEN
     LET m_valida_nf_frete_filiais = "S"
  END IF

  INITIALIZE m_permite_ent_fret_apenas_transp TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"permite_ent_fret_apenas_transp")
        RETURNING m_permite_ent_fret_apenas_transp, p_status
  IF p_status = FALSE OR
     m_permite_ent_fret_apenas_transp IS NULL OR
     m_permite_ent_fret_apenas_transp = " " THEN
     LET m_permite_ent_fret_apenas_transp = "N"
  END IF

  #-- OS 544109 inicio --#

 INITIALIZE m_utiliza_nf_eletronica TO NULL
 CALL log2250_busca_parametro(p_cod_empresa, "utiliza_nf_eletr")
    RETURNING m_utiliza_nf_eletronica, p_status

 IF p_status = FALSE OR m_utiliza_nf_eletronica IS NULL OR m_utiliza_nf_eletronica = ' ' THEN
    LET m_utiliza_nf_eletronica = 'N'
 END IF

  IF wms0004_wms_instalado(p_cod_empresa) THEN
    LET m_ies_wms_instalado = "S"
  ELSE
    LET m_ies_wms_instalado = "N"
  END IF

  INITIALIZE m_oper_ent_ind_g TO NULL
  SELECT par_txt
    INTO m_oper_ent_ind_g
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "oper_ent_ind_g"

  INITIALIZE m_cod_oper_ent_ind TO NULL
  SELECT par_txt
    INTO m_cod_oper_ent_ind
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "cod_oper_ent_ind"

  CALL log2250_busca_parametro(p_cod_empresa,"utiliza_dds_fortaleza")
     RETURNING m_utiliza_dds_fortaleza, p_status
  IF NOT p_status OR m_utiliza_dds_fortaleza IS NULL  THEN
     LET m_utiliza_dds_fortaleza = "N"
  END IF

  INITIALIZE m_ies_tex_inst TO NULL
  LET m_ies_tex_inst  = sup376_busca_par_sup_pad("ies_tex_inst",1)
  IF sqlca.sqlcode <> 0 OR
     m_ies_tex_inst IS NULL OR
     m_ies_tex_inst = " "   THEN
     LET m_ies_tex_inst = "N"
  END IF

  INITIALIZE m_proc_imp_rec_nfr_consig TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"proc_imp_rec_nfr_consignatario")
        RETURNING m_proc_imp_rec_nfr_consig, p_status
  IF p_status = FALSE OR
     m_proc_imp_rec_nfr_consig IS NULL OR
     m_proc_imp_rec_nfr_consig = " " THEN
     LET m_proc_imp_rec_nfr_consig = "N"
  END IF

  LET m_existe_despprit   = log0150_verifica_se_tabela_existe('imp_desp_proc_item')
  LET m_exst_rel_fre_indt = log0150_verifica_se_tabela_existe('sup_relc_ftre_indt')

  INITIALIZE m_contr_pes_rec TO NULL
  SELECT par_ies
    INTO m_contr_pes_rec
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa    = p_cod_empresa
     AND par_sup_pad.cod_parametro  = "contr_pes_rec"
  IF sqlca.sqlcode <> 0 OR
     m_contr_pes_rec IS NULL OR
     m_contr_pes_rec = " " THEN
     LET m_contr_pes_rec = "N"
  END IF

  INITIALIZE m_proc_ini_os163407 TO NULL
  SELECT par_num
    INTO m_proc_ini_os163407
    FROM par_imp
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "proc_ini_os163407"
  IF sqlca.sqlcode <> 0 THEN
     LET m_proc_ini_os163407 = 0
  END IF


  LET m_ies_obt_inf_tr_unid = NULL
  SELECT par_sup_pad.par_ies
    INTO m_ies_obt_inf_tr_unid
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "ies_obt_inf_tr_unid"
  IF sqlca.sqlcode <> 0 OR
     m_ies_obt_inf_tr_unid IS NULL THEN
     LET m_ies_obt_inf_tr_unid = "N"
  END IF

  LET m_ies_usa_ae = NULL
  SELECT par_sup_pad.par_ies
    INTO m_ies_usa_ae
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "ies_usa_ae"
  IF sqlca.sqlcode <> 0 OR
     m_ies_usa_ae IS NULL THEN
     LET m_ies_usa_ae = "N"
  END IF

  LET m_exporta_nf = NULL
  SELECT par_sup_pad.par_ies
    INTO m_exporta_nf
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "exporta_nf"
  IF sqlca.sqlcode <> 0 OR
     m_exporta_nf IS NULL THEN
     LET m_exporta_nf = "N"
  END IF

  LET m_ies_custo_grade = NULL
  SELECT par_sup_pad.par_ies
    INTO m_ies_custo_grade
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "ies_informa_custo_gr"
  IF sqlca.sqlcode <> 0 OR
     m_ies_custo_grade IS NULL THEN
     LET m_ies_custo_grade = "N"
  END IF

  CALL log2250_busca_parametro(p_cod_empresa, "cred_st_faturam_it_compra_revd")
     RETURNING m_cred_st_fat, l_status

  IF NOT l_status OR
     m_cred_st_fat IS NULL OR
     m_cred_st_fat = " " THEN
     LET m_cred_st_fat = "N"
  END IF

  INITIALIZE m_utiliz_nfm_import TO NULL
  SELECT par_ies
    INTO m_utiliz_nfm_import
    FROM par_imp
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "utiliz_nfm_import"

  IF sqlca.sqlcode <> 0 OR m_utiliz_nfm_import IS NULL
  OR m_utiliz_nfm_import = " " THEN
     LET m_utiliz_nfm_import = "N"
  END IF

  INITIALIZE m_ies_utiliz_provisao TO NULL
  SELECT par_ies
     INTO m_ies_utiliz_provisao
     FROM par_imp
    WHERE par_imp.cod_empresa   = p_cod_empresa
      AND par_imp.cod_parametro = "ies_utiliz_provisao"

  IF sqlca.sqlcode <> 0 OR m_ies_utiliz_provisao IS NULL
  OR m_ies_utiliz_provisao = " " THEN
     LET m_ies_utiliz_provisao = "N"
  END IF

  LET m_gera_rsv_transf = NULL
  SELECT par_sup_pad.par_ies
    INTO m_gera_rsv_transf
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "gera_rsv_transf"
  IF sqlca.sqlcode <> 0 OR
     m_gera_rsv_transf IS NULL THEN
     LET m_gera_rsv_transf = "N"
  END IF

  INITIALIZE m_ies_anexa_dupl TO NULL
  SELECT par_vdp.par_vdp_txt[45,45]
    INTO m_ies_anexa_dupl
    FROM par_vdp
   WHERE par_vdp.cod_empresa = p_cod_empresa
  IF m_ies_anexa_dupl IS NULL OR
     m_ies_anexa_dupl = " " THEN
     LET m_ies_anexa_dupl = "N"
  END IF

  INITIALIZE m_cod_empresa_uni TO NULL
  IF m_ies_anexa_dupl = "S" THEN
     SELECT par_vdp_txt[158,159]
       INTO m_cod_empresa_uni
       FROM par_vdp
      WHERE par_vdp.cod_empresa = p_cod_empresa
  END IF
  IF m_cod_empresa_uni IS NULL OR
     m_cod_empresa_uni = " " THEN
     LET m_cod_empresa_uni = p_cod_empresa
  END IF

  INITIALIZE m_ies_interf_cre TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_ies
    INTO m_ies_interf_cre
    FROM par_sup_pad
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "ies_interf_cre"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET m_ies_interf_cre = "N"
  END IF

  INITIALIZE m_parcretxt TO NULL
  WHENEVER ERROR CONTINUE
  SELECT parametro
    INTO m_parcretxt
    FROM par_cre_txt
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET m_parcretxt = " "
  END IF

  INITIALIZE  m_ies_alt_nfe_emit TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_ies
    INTO m_ies_alt_nfe_emit
    FROM par_sup_pad
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "ies_alt_nfe_emit"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR m_ies_alt_nfe_emit = " " OR m_ies_alt_nfe_emit IS NULL THEN
     LET m_ies_alt_nfe_emit = "N"
  END IF

  INITIALIZE m_gerar_os_recb_mat_terc TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "gerar_os_recb_mat_terc")
  RETURNING m_gerar_os_recb_mat_terc, p_status

  IF (m_gerar_os_recb_mat_terc IS NULL) OR (m_gerar_os_recb_mat_terc = " ") THEN
     LET m_gerar_os_recb_mat_terc = "N"
  END IF

  INITIALIZE m_contr_terc_no_dep TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "contr_terceiro_no_depositante")
       RETURNING m_contr_terc_no_dep, p_status

  IF m_contr_terc_no_dep IS NULL OR m_contr_terc_no_dep = " " THEN
     LET m_contr_terc_no_dep = "N"
  END IF

  INITIALIZE m_qtd_dias_final_export TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"qtd_dias_final_export")
       RETURNING m_qtd_dias_final_export, p_status
  IF p_status = FALSE THEN
     LET m_qtd_dias_final_export = ""
  END IF

 INITIALIZE m_cod_motivo_remessa TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_txt
   INTO m_cod_motivo_remessa
   FROM par_sup_pad
  WHERE cod_empresa = p_cod_empresa
    AND cod_parametro = "cod_motivo_remessa"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET m_cod_motivo_remessa = ' '
 END IF

 INITIALIZE m_cod_mot_rem_terc TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_txt
   INTO m_cod_motivo_remessa
   FROM par_sup_pad
  WHERE cod_empresa = p_cod_empresa
    AND cod_parametro = "cod_mot_rem_terc"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET m_cod_mot_rem_terc = ' '
 END IF

 #-- OS 544109 fim --#

 #- inicio - OS 538147
 INITIALIZE m_mantem_cfop_frt TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_ies
   INTO m_mantem_cfop_frt
   FROM par_sup_pad
 WHERE cod_empresa = p_cod_empresa
   AND cod_parametro = "mantem_cfop_frt"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
    CALL log003_err_sql("select","par_sup_pad")
 END IF

 IF sqlca.sqlcode <> 0 THEN
    LET m_mantem_cfop_frt = 'N'
 END IF
 #- FIM - OS 538147

 INITIALIZE gr_par_con.* TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_con.*
   INTO gr_par_con.*
   FROM par_con
  WHERE par_con.cod_empresa = p_cod_empresa
 WHENEVER ERROR STOP

 INITIALIZE gr_par_sup.*, p_par_sup.* TO NULL
 WHENEVER ERROR CONTINUE
 SELECT *
   INTO gr_par_sup.*
   FROM par_sup
  WHERE par_sup.cod_empresa = p_cod_empresa
 WHENEVER ERROR STOP
 ### OS454914 ###
 IF gr_par_sup.ies_cont_sintetica IS NULL OR
    gr_par_sup.ies_cont_sintetica = ' ' THEN
    LET gr_par_sup.ies_cont_sintetica = 'N'
 END IF
 ### OS454914 ###

 INITIALIZE m_entrada_frete_em_transito TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"entrada_frete_em_transito")
      RETURNING m_entrada_frete_em_transito, p_status
 IF p_status = FALSE
 OR m_entrada_frete_em_transito IS NULL
 OR m_entrada_frete_em_transito = " " THEN
    LET m_entrada_frete_em_transito = "N"
 END IF

 INITIALIZE m_dir_arq_sup0552 TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"dir_arq_sup0552")
      RETURNING m_dir_arq_sup0552, p_status

 CALL sup0552_edita_dir(m_dir_arq_sup0552) RETURNING m_dir_arq_sup0552

 INITIALIZE m_dir_arq_proc_sup0552 TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"dir_arq_proc_sup0552")
      RETURNING m_dir_arq_proc_sup0552, p_status

 CALL sup0552_edita_dir(m_dir_arq_proc_sup0552) RETURNING m_dir_arq_proc_sup0552

 INITIALIZE m_dir_arq_erro_sup0552 TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"dir_arq_erro_sup0552")
      RETURNING m_dir_arq_erro_sup0552, p_status

 CALL sup0552_edita_dir(m_dir_arq_erro_sup0552) RETURNING m_dir_arq_erro_sup0552

 INITIALIZE m_cred_st_faturam_it_compra_revd TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"cred_st_faturam_it_compra_revd")
      RETURNING m_cred_st_faturam_it_compra_revd, p_status
 IF p_status = FALSE
 OR m_cred_st_faturam_it_compra_revd IS NULL
 OR m_cred_st_faturam_it_compra_revd = " " THEN
    LET m_cred_st_faturam_it_compra_revd = "N"
 END IF

 CALL log2250_busca_parametro(p_cod_empresa,"grupo_desp_frete_sup0552")
      RETURNING m_cod_grp_despesa, p_status

 IF p_status = FALSE OR
    m_cod_grp_despesa IS NULL OR
    m_cod_grp_despesa = " " THEN
    LET m_cod_grp_despesa = gr_par_sup.cod_grp_despesa
 END IF

 CALL log2250_busca_parametro(p_cod_empresa,"grupo_desp_frete_vnd_remetente")
      RETURNING m_grp_desp_st_remet, p_status

### Váriável p_par_sup utilizada no sup7720
 LET p_par_sup.* = gr_par_sup.*

### Váriável p_par_sup_compl_1 utilizada no sup7720
 INITIALIZE p_par_sup_compl_1.* TO NULL
 WHENEVER ERROR CONTINUE
 SELECT *
   INTO p_par_sup_compl_1.*
   FROM par_sup_compl_1
  WHERE par_sup_compl_1.cod_empresa = p_cod_empresa
 WHENEVER ERROR STOP

### Váriável p_par_sup_compl utilizada no sup7720
 INITIALIZE gr_par_sup_compl.*, p_par_sup_compl.* TO NULL
 WHENEVER ERROR CONTINUE
 SELECT *
   INTO gr_par_sup_compl.*
   FROM par_sup_compl
  WHERE par_sup_compl.cod_empresa = p_cod_empresa
 WHENEVER ERROR STOP
 LET p_par_sup_compl.* = gr_par_sup_compl.*

 INITIALIZE gr_par_estoque.* TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_estoque.*
   INTO gr_par_estoque.*
   FROM par_estoque
  WHERE par_estoque.cod_empresa = p_cod_empresa
 WHENEVER ERROR STOP

 LET m_ies_cont_insp_aut = NULL
 WHENEVER ERROR CONTINUE
 SELECT par_sup_pad.par_ies
   INTO m_ies_cont_insp_aut
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
    AND par_sup_pad.cod_parametro = "ies_cont_insp_aut"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR
    m_ies_cont_insp_aut = " " OR
    m_ies_cont_insp_aut IS NULL THEN
    LET m_ies_cont_insp_aut = "N"
 END IF

 LET m_ies_grava_erro_4 = NULL
 WHENEVER ERROR CONTINUE
 SELECT par_sup_pad.par_ies
   INTO m_ies_grava_erro_4
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
    AND par_sup_pad.cod_parametro = "ies_grava_erro_4"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR
    m_ies_grava_erro_4 = " " OR
    m_ies_grava_erro_4 IS NULL THEN
    LET m_ies_grava_erro_4 = "N"
 END IF

 LET m_ies_busca_loclib = NULL
 WHENEVER ERROR CONTINUE
 SELECT par_sup_pad.par_ies
   INTO m_ies_busca_loclib
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
    AND par_sup_pad.cod_parametro = "ies_busca_loclib"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR
    m_ies_busca_loclib = " " OR
    m_ies_busca_loclib IS NULL THEN
    LET m_ies_busca_loclib = "N"
 END IF

 LET g_orig_uf_frt_nf_i = NULL
 WHENEVER ERROR CONTINUE
 SELECT par_sup_pad.par_ies
   INTO g_orig_uf_frt_nf_i
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
    AND par_sup_pad.cod_parametro = "orig_uf_frt_nf_imp"
 WHENEVER ERROR STOP
 IF g_orig_uf_frt_nf_i <> "1" AND
    g_orig_uf_frt_nf_i <> "2" THEN
    INITIALIZE g_orig_uf_frt_nf_i TO NULL
 END IF

 INITIALIZE m_uf_trans_nfdr TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_sup_pad.par_ies
   INTO m_uf_trans_nfdr
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
    AND par_sup_pad.cod_parametro = "uf_trans_nfdr"
 WHENEVER ERROR STOP
 IF m_uf_trans_nfdr <> "1" AND
    m_uf_trans_nfdr <> "2" THEN
    INITIALIZE m_uf_trans_nfdr TO NULL
 END IF

### Váriável p_val_div_maior_frt utilizada no sup7720
 INITIALIZE p_val_div_maior_frt TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_num
   INTO p_val_div_maior_frt
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
    AND par_sup_pad.cod_parametro = "val_div_maior_frt"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET p_val_div_maior_frt = 0
 END IF

### Váriável p_val_div_menor_frt utilizada no sup7720
 INITIALIZE p_val_div_menor_frt TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_num
   INTO p_val_div_menor_frt
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
    AND par_sup_pad.cod_parametro = "val_div_menor_frt"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET p_val_div_menor_frt = 0
 END IF

 INITIALIZE m_empr_utiliz_mp66 TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_ies
   INTO m_empr_utiliz_mp66
   FROM par_sup_pad
  WHERE cod_empresa   = p_cod_empresa
    AND cod_parametro = "ies_cred_pis"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0
 OR m_empr_utiliz_mp66 IS NULL
 OR m_empr_utiliz_mp66 = " " THEN
    LET m_empr_utiliz_mp66 = "N"
 END IF

 INITIALIZE g_ies_ped_icms TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_ies
   INTO g_ies_ped_icms
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa    = p_cod_empresa
    AND par_sup_pad.cod_parametro  = "ies_ped_icms"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0
 OR g_ies_ped_icms IS NULL
 OR g_ies_ped_icms = " " THEN
    LET g_ies_ped_icms = "N"
 END IF

 INITIALIZE m_ies_grupo_desp_item TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_ies   #Rafael - OS310614
   INTO m_ies_grupo_desp_item
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa    = p_cod_empresa
    AND par_sup_pad.cod_parametro  = 'ies_grupo_desp_item'
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR m_ies_grupo_desp_item IS NULL OR
    m_ies_grupo_desp_item = " " THEN
    LET m_ies_grupo_desp_item = "N"
 END IF

 INITIALIZE m_perm_relac_frfob_frvnd TO NULL #OS350543
 CALL log2250_busca_parametro(p_cod_empresa,"perm_relac_nf_fr_fob_frvnd")
      RETURNING m_perm_relac_frfob_frvnd, p_status

 IF m_perm_relac_frfob_frvnd IS NULL OR m_perm_relac_frfob_frvnd = " " THEN
    LET m_perm_relac_frfob_frvnd = "S"
 END IF

 #Rafael - #OS353801
 INITIALIZE m_uf_igual_vendas TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"uf_transp_igual_emp_fr_vendas") RETURNING m_uf_igual_vendas, p_status
 IF p_status = FALSE OR
    m_uf_igual_vendas IS NULL OR
    m_uf_igual_vendas = " " THEN
    LET m_uf_igual_vendas = "N"
 END IF

## OS 391495
 LET m_dat_fim_valid = MDY("12","31","2002")
 WHENEVER ERROR CONTINUE
 SELECT par_sup_pad.par_data
   INTO m_dat_fim_valid
   FROM par_sup_pad
  WHERE cod_empresa     = p_cod_empresa
    AND cod_parametro   = "dat_fim_valid"
 WHENEVER ERROR STOP
 IF m_dat_fim_valid IS NULL OR
    m_dat_fim_valid     = " " THEN
    LET m_dat_fim_valid = MDY("12","31","2002")
 END IF

 INITIALIZE m_fim_valid TO NULL
 IF sup0686_cod_fiscal_tem_dat_fim_valid() THEN
    LET m_fim_valid = TRUE
 ELSE
    LET m_fim_valid = FALSE
 END IF

 INITIALIZE m_relac_unica_nff TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"frete_venda_relac_uma_nf_saida") RETURNING m_relac_unica_nff, p_status
 IF p_status = FALSE OR m_relac_unica_nff IS NULL THEN
    LET m_relac_unica_nff = "N"
 END IF

# 472924
 INITIALIZE m_cont_insp_especial TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_sup_pad.par_ies
   INTO m_cont_insp_especial
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
    AND par_sup_pad.cod_parametro = "cont_insp_especial"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR m_cont_insp_especial IS NULL OR
    m_cont_insp_especial = " " THEN
    LET m_cont_insp_especial = "N"
 END IF

#--inicio--OS612607 Antonio#
 INITIALIZE m_nota_imp_sup0052_util_reg_fisc TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"nota_imp_sup0052_util_reg_fisc") RETURNING m_nota_imp_sup0052_util_reg_fisc, p_status
 IF p_status = FALSE OR m_nota_imp_sup0052_util_reg_fisc IS NULL THEN
    LET m_nota_imp_sup0052_util_reg_fisc = "N"
 END IF

#---fim----OS   #

 CALL sup1566_utiliza_faturamento_unico(p_cod_empresa)
      RETURNING m_ies_fat_unico

 #--inicio--OS 724885 #
  CALL log2250_busca_parametro(p_cod_empresa,"ler_param_cfop99_do_sup8740") RETURNING m_ler_param_cfop99_do_sup8740, l_status
  IF l_status = FALSE OR
     m_ler_param_cfop99_do_sup8740 IS NULL OR
     m_ler_param_cfop99_do_sup8740 = " " THEN
    LET m_ler_param_cfop99_do_sup8740 = "N"
  END IF

  CALL log2250_busca_parametro(p_cod_empresa,"assumir_pct_ipi_decl_sup0552") RETURNING m_assumir_pct_ipi_decl_sup0552, l_status
  IF l_status = FALSE OR
     m_assumir_pct_ipi_decl_sup0552 IS NULL OR
     m_assumir_pct_ipi_decl_sup0552 = " " THEN
    LET m_assumir_pct_ipi_decl_sup0552 = "N"
  END IF

  CALL supm5_par_sup_pad_leitura(p_cod_empresa ,
                                 "ies_cfop99",
                                 TRUE,
                                 TRUE) RETURNING p_status

  CALL supm5_par_sup_pad_get_par_ies() RETURNING m_ies_cfop99
  #---fim----OS 724885 #

  # IMP-WMS
  IF m_ies_wms_instalado = 'S' THEN
     CALL log2250_busca_parametro(p_cod_empresa,"efet_valid_prim_nf_deposit")
         RETURNING m_nf_deposit, l_status
     IF NOT l_status THEN
        LET m_nf_deposit = 'N'
     END IF
  ELSE
     LET m_nf_deposit = 'N'
  END IF
  # FIM IMP-WMS

  #--inicio--OS 728008 #
  CALL log2250_busca_parametro(p_cod_empresa,'unid_med_padrao_frt_compra_gtc')
                     RETURNING m_cod_unid_med_padrao, p_status
  IF p_status = FALSE OR
     m_cod_unid_med_padrao IS NULL OR
     m_cod_unid_med_padrao = ' ' THEN
     LET m_cod_unid_med_padrao = 'KG'
  END IF
  #---fim----OS 728008 #

  #732596#
  CALL log2250_busca_parametro(p_cod_empresa,"exigir_modelo_nota_fiscal_ent")
        RETURNING m_exigir_modelo_nota_fiscal_ent, p_status
   IF p_status = FALSE OR
      m_exigir_modelo_nota_fiscal_ent IS NULL OR
      m_exigir_modelo_nota_fiscal_ent = " " THEN
      LET m_exigir_modelo_nota_fiscal_ent = "N"
   END IF
   #---fim--- 732596#

  #OS 569662
  INITIALIZE m_data_execut_atual TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"dat_exec_0552_igual_dat_entrad")
       RETURNING m_data_execut_atual, p_status
  IF NOT p_status OR m_data_execut_atual IS NULL OR m_data_execut_atual = " " THEN
     LET m_data_execut_atual = "N"
  END IF
  #OS 569662

 #CH786325
  CALL log2250_busca_parametro(p_cod_empresa,"lista_classif_descr_fornecedor")
     RETURNING m_lista_classif_descr_fornecedor, p_status

  IF p_status = FALSE OR m_lista_classif_descr_fornecedor IS NULL OR m_lista_classif_descr_fornecedor = " " THEN
     LET m_lista_classif_descr_fornecedor = "N"
  END IF

  CALL log2250_busca_parametro(p_cod_empresa,"lista_classif_quebra_comprador")
     RETURNING m_lista_classif_quebra_comprador, p_status

  IF p_status = FALSE OR m_lista_classif_quebra_comprador IS NULL OR m_lista_classif_quebra_comprador = " " THEN
     LET m_lista_classif_quebra_comprador = "N"
  END IF
 #--------

  INITIALIZE m_extensao_arq TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"extensao_arq_import_sup0552")
     RETURNING m_extensao_arq, p_status

  IF p_status = FALSE THEN
     INITIALIZE m_extensao_arq TO NULL
  END IF

 END FUNCTION

#----------------------------#
 FUNCTION sup0552_cria_temp()
#----------------------------#

 WHENEVER ERROR CONTINUE
 CREATE TEMP TABLE w_sup0552_1
 (
  nota_fiscal       DECIMAL(7,0),
  serie_nota_fiscal CHAR(03),
  subserie_nf       DECIMAL(2,0),
  espc_nota_fiscal  CHAR(03),
  fornecedor        CHAR(15),
  sequencia         DECIMAL(3,0),
  txt_consistencia  CHAR(59),
  arquivo           CHAR(100)
 ) WITH NO LOG
 WHENEVER ERROR STOP

 IF m_arg = FALSE THEN
    IF log0030_err_sql_tabela_duplicada() THEN
       WHENEVER ERROR CONTINUE
       DELETE FROM w_sup0552_1 WHERE 1=1
       WHENEVER ERROR STOP

       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DELETE","W_SUP0552_1")
          RETURN FALSE
       END IF
    ELSE
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("CREATE","W_SUP0552_1")
          RETURN FALSE
       ELSE
          WHENEVER ERROR CONTINUE
          CREATE INDEX ix_w_sup0552_1_1 ON w_sup0552_1
          (nota_fiscal       ,
           serie_nota_fiscal ,
           subserie_nf       ,
           espc_nota_fiscal  ,
           fornecedor        ,
           sequencia         ,
           txt_consistencia)
          WHENEVER ERROR STOP
       END IF
    END IF
 END IF

 WHENEVER ERROR CONTINUE
 CREATE TEMP TABLE w_sup0552_2
 (
  tipo_registro     CHAR(01),
  nota_fiscal       DECIMAL(7,0),
  serie_nota_fiscal CHAR(03),
  subserie_nf       DECIMAL(2,0),
  espc_nota_fiscal  CHAR(03),
  fornecedor        CHAR(15),
  num_nff_relac     DECIMAL(6,0),
  arquivo           CHAR(100)
 ) WITH NO LOG
 WHENEVER ERROR STOP
 IF m_arg = FALSE THEN
    IF log0030_err_sql_tabela_duplicada() THEN
       WHENEVER ERROR CONTINUE
       DELETE FROM w_sup0552_2 WHERE 1=1
       WHENEVER ERROR STOP

       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DELETE","W_SUP0552_2")
          RETURN FALSE
       END IF
    ELSE
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("CREATE","W_SUP0552_2")
          RETURN FALSE
       END IF
    END IF
 END IF

 WHENEVER ERROR CONTINUE
 CREATE TEMP TABLE w_sup0552_3
 (
  empresa           CHAR(02),
  nota_fiscal       DECIMAL(7,0),
  serie_nota_fiscal CHAR(03),
  subserie_nf       DECIMAL(2,0),
  espc_nota_fiscal  CHAR(03),
  fornecedor        CHAR(15)
 ) WITH NO LOG
 WHENEVER ERROR STOP
 IF log0030_err_sql_tabela_duplicada() THEN
    WHENEVER ERROR CONTINUE
    DELETE FROM w_sup0552_3 WHERE 1=1
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","W_SUP0552_3")
       RETURN FALSE
    END IF
 ELSE
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("CREATE","W_SUP0552_3")
       RETURN FALSE
    END IF
 END IF

 WHENEVER ERROR CONTINUE
 CREATE TEMP TABLE w_sup0552_4
 (
  tipo_registro      CHAR(01),
  empresa            CHAR(02),
  empresa_estabel    CHAR(02),
  nota_fiscal        DECIMAL(7,0),
  serie_nota_fiscal  CHAR(03),
  subserie_nf        DECIMAL(2,0),
  espc_nota_fiscal   CHAR(03),
  fornecedor         CHAR(15),
  dat_emis_nf        DATE,
  dat_ent_nf         DATE,
  cond_pagto         DECIMAL(3,0),
  modo_embarque      DECIMAL(2,0),
  tip_nota_fiscal    CHAR(01),
  num_conhec_frete   DECIMAL(7,0),
  serie_conhec_frete CHAR(03),
  subserie_conh_fret DECIMAL(2,0),
  transportador      CHAR(23),
  val_tot_decl_nf    DECIMAL(17,2),
  val_tot_decl_icms  DECIMAL(17,2),
  val_tot_decl_ipi   DECIMAL(17,2),
  cfop               CHAR(05),
  cfop_compl         INTEGER,
  processado         CHAR(01),
  sequencia          SMALLINT,
  pedido             DECIMAL(6,0),
  ordem_compra       DECIMAL(9,0),
  item               CHAR(15),
  pre_unit_nf        DECIMAL(17,6),
  qtd_decl_nf        DECIMAL(15,3),
  pct_ipi            DECIMAL(6,3),
  bas_calc_ipi       DECIMAL(17,2),
  val_ipi            DECIMAL(17,2),
  pct_icms           DECIMAL(6,3),
  bas_calc_icms      DECIMAL(17,2),
  val_icms           DECIMAL(17,2),
  val_frete          DECIMAL(17,2),
  pct_icms_frete     DECIMAL(6,3),
  bc_icms_frete      DECIMAL(17,2),
  val_icms_frete     DECIMAL(17,2)
 ) WITH NO LOG
 WHENEVER ERROR STOP
 IF log0030_err_sql_tabela_duplicada() THEN
    WHENEVER ERROR CONTINUE
    DELETE FROM w_sup0552_4 WHERE 1=1
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","W_SUP0552_4 11 ")
       RETURN FALSE
    END IF
 ELSE
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("CREATE","W_SUP0552_4 12 ")
       RETURN FALSE
    END IF
 END IF

 WHENEVER ERROR CONTINUE
 CREATE TEMP TABLE w_sup0552_6
 (
  empresa            CHAR(02),
  nota_fiscal        DECIMAL(7,0),
  serie_nota_fiscal  CHAR(03),
  subserie_nf        DECIMAL(2,0),
  espc_nota_fiscal   CHAR(03),
  fornecedor         CHAR(15),
  processado         CHAR(01)
  ) WITH NO LOG;
  WHENEVER ERROR STOP
 IF log0030_err_sql_tabela_duplicada() THEN
    WHENEVER ERROR CONTINUE
    DELETE FROM w_sup0552_6 WHERE 1=1
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","W_SUP0552_6")
       RETURN FALSE
    END IF
 ELSE
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("CREATE","W_SUP0552_6")
       RETURN FALSE
    END IF
 END IF
 #-- OS 544109 fim --#

  #578942
  WHENEVER ERROR CONTINUE
    CREATE TEMP TABLE w_verif_frete
                      (empresa            CHAR(02),
                       nota_fiscal        DECIMAL(7,0),
                       serie_nota_fiscal  CHAR(03),
                       subserie_nf        DECIMAL(2,0),
                       fornecedor         CHAR(15)) WITH NO LOG
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF log0030_err_sql_tabela_duplicada() THEN
       WHENEVER ERROR CONTINUE
         DELETE FROM w_verif_frete
          WHERE 1 = 1
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DELETE","W_VERIF_FRETE")
          RETURN FALSE
       END IF
     ELSE
        CALL log003_err_sql("CREATE TEMP","W_VERIF_FRETE")
        RETURN FALSE
     END IF
  END IF

 RETURN TRUE

 END FUNCTION

#--------------------------------------#
 FUNCTION sup0552_busca_num_aviso_rec(l_cod_empresa, l_conta_array)
#--------------------------------------#
 DEFINE l_cod_empresa   LIKE empresa.cod_empresa,
        l_num_aviso_rec LIKE aviso_rec.num_aviso_rec,
        l_par_val       LIKE par_sup_pad.par_val, # OS 410817 - Winston
        l_conta_array   SMALLINT

 LET l_num_aviso_rec =  NULL

 IF m_tipo_de_processo = "I" THEN

    WHENEVER ERROR CONTINUE
    DECLARE cm_par_sup CURSOR FOR
     SELECT par_sup_pad.par_val
       INTO l_num_aviso_rec
       FROM par_sup_pad
      WHERE par_sup_pad.cod_empresa = l_cod_empresa
        AND par_sup_pad.cod_parametro = "num_prx_ar"
    FOR UPDATE
    OPEN cm_par_sup
    FETCH cm_par_sup
    IF sqlca.sqlcode = 0 THEN

       LET l_par_val = l_num_aviso_rec + 1

       WHENEVER ERROR CONTINUE
       UPDATE par_sup_pad
          SET par_sup_pad.par_val = l_par_val # l_num_aviso_rec + 1
        WHERE CURRENT OF cm_par_sup
       WHENEVER ERROR STOP

       IF sqlca.sqlcode <> 0 THEN
          CLOSE cm_par_sup
          LET m_houve_erro = TRUE
          CLOSE cm_par_sup #764215#
          FREE  cm_par_sup #764215#
          RETURN FALSE, 0, l_conta_array
       ELSE
          CLOSE cm_par_sup #764215#
          FREE  cm_par_sup #764215#
          RETURN TRUE, l_num_aviso_rec, l_conta_array
       END IF
    ELSE
       CLOSE cm_par_sup #764215#
       FREE  cm_par_sup #764215#
       LET m_houve_erro = TRUE
       RETURN FALSE, 0, l_conta_array
    END IF

    WHENEVER ERROR STOP
 ELSE
    WHENEVER ERROR CONTINUE
    SELECT nf_sup.num_aviso_rec
      INTO l_num_aviso_rec
      FROM nf_sup
     WHERE nf_sup.cod_empresa    = mr_w_sup0552_4.empresa
       AND nf_sup.num_nf         = mr_w_sup0552_4.nota_fiscal
       AND nf_sup.ser_nf         = mr_w_sup0552_4.serie_nota_fiscal
       AND nf_sup.ssr_nf         = mr_w_sup0552_4.subserie_nf
       AND nf_sup.ies_especie_nf = mr_w_sup0552_4.espc_nota_fiscal
       AND nf_sup.cod_fornecedor = mr_w_sup0552_4.fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       IF sqlca.SQLCODE <> 100 THEN
          CALL log003_err_sql("SELECAO","NF_SUP")
          RETURN FALSE, 0, l_conta_array
       ELSE
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Nota Fiscal não existe."
          LET m_status_arquivo = 1
          RETURN FALSE, l_num_aviso_rec, l_conta_array
       END IF
    END IF

    RETURN TRUE, l_num_aviso_rec, l_conta_array
 END IF

 END FUNCTION

#------------------------------------------------------#
 FUNCTION sup0552_insere_consistencia(l_abre_transacao)
#------------------------------------------------------#
 DEFINE l_ind             SMALLINT,
        l_abre_transacao  SMALLINT

 IF m_houve_erro THEN
    IF m_transacao_ativa THEN
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("TRANSACAO","ROLLBACK")
       END IF
       LET m_transacao_ativa = FALSE
    END IF
 ELSE
    IF m_transacao_ativa THEN
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("COMMIT")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("TRANSACAO","COMMIT")
          CALL log085_transacao("ROLLBACK") #OS596059
       END IF
       LET m_transacao_ativa = FALSE
    END IF
 END IF

 FOR l_ind = 1 TO 999
    IF ma_array_consistencias[l_ind].nota_fiscal IS NOT NULL THEN
       SELECT w_sup0552_1.*
         FROM w_sup0552_1
        WHERE w_sup0552_1.nota_fiscal       = ma_array_consistencias[l_ind].nota_fiscal
          AND w_sup0552_1.serie_nota_fiscal = ma_array_consistencias[l_ind].serie_nota_fiscal
          AND w_sup0552_1.subserie_nf       = ma_array_consistencias[l_ind].subserie_nf
          AND w_sup0552_1.espc_nota_fiscal  = ma_array_consistencias[l_ind].espc_nota_fiscal
          AND w_sup0552_1.fornecedor        = ma_array_consistencias[l_ind].fornecedor
          AND w_sup0552_1.sequencia         = ma_array_consistencias[l_ind].sequencia
          AND w_sup0552_1.txt_consistencia  = ma_array_consistencias[l_ind].txt_consistencia

       IF sqlca.sqlcode = NOTFOUND THEN
          INSERT INTO w_sup0552_1 VALUES (ma_array_consistencias[l_ind].*)
          IF sqlca.sqlcode <> 0 THEN
             LET m_houve_erro = TRUE
             LET m_status_arquivo = 1
             RETURN
          END IF
       END IF
    END IF
 END FOR

 ##Indica se deverá verificar a necessidade de abrir ou não nova transação, isto porque
 ##esta função é a última a ser chamada na função sup0552_importar do programa
 ##então não deverá deixar transação aberta.
 IF l_abre_transacao THEN
    IF NOT m_transacao_ativa THEN
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("BEGIN")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("TRANSACAO","BEGIN")
       END IF
       LET m_transacao_ativa = TRUE
    END IF
 END IF

 END FUNCTION

#------------------------------------------------------#
 FUNCTION sup0552_busca_cod_incid_ipi(l_cod_fornec,
                                      l_ies_tip_incid)
#------------------------------------------------------#
 DEFINE l_nao_achou       SMALLINT,
        l_ies_contrib_ipi CHAR(01),
        l_cod_fornec      LIKE fornecedor.cod_fornecedor,
        l_ies_tip_incid   CHAR(01),
        l_pct_direito     LIKE incid_ipi.pct_direito_cred,
        l_cod_incid_ipi   LIKE incid_ipi.cod_incid_ipi

 LET l_cod_incid_ipi   = NULL
 LET l_pct_direito     = NULL
 LET l_ies_contrib_ipi = NULL

 SELECT fornecedor.ies_contrib_ipi
   INTO l_ies_contrib_ipi
   FROM fornecedor
  WHERE fornecedor.cod_fornecedor = l_cod_fornec

 LET l_nao_achou = NULL

 IF mr_aviso_rec.ies_tip_incid_ipi = "C" THEN
    IF l_ies_contrib_ipi = "S" THEN
       LET l_nao_achou = TRUE
       DECLARE cq_inc_ipi CURSOR FOR
        SELECT incid_ipi.cod_incid_ipi
          FROM incid_ipi
         WHERE incid_ipi.cod_empresa       = mr_w_sup0552_4_it.empresa
           AND incid_ipi.ies_tip_incid_ipi = "C"
           AND incid_ipi.pct_direito_cred  = 100
       FOREACH cq_inc_ipi INTO l_cod_incid_ipi
          LET l_nao_achou = FALSE
          CLOSE cq_inc_ipi #764215#
          EXIT FOREACH
       END FOREACH
       FREE cq_inc_ipi #764215#

       IF l_nao_achou = TRUE THEN
          LET l_cod_incid_ipi = 0
       END IF
    ELSE
       DECLARE cq_incid_ipi CURSOR FOR
        SELECT incid_ipi.cod_incid_ipi
          FROM incid_ipi
         WHERE incid_ipi.cod_empresa       = mr_w_sup0552_4_it.empresa
           AND incid_ipi.ies_tip_incid_ipi = "C"
           AND incid_ipi.pct_direito_cred  = 50
       FOREACH cq_incid_ipi INTO l_cod_incid_ipi
          LET l_nao_achou = FALSE
          CLOSE cq_incid_ipi #764215#
          EXIT FOREACH
       END FOREACH
       FREE cq_incid_ipi #764215#
       IF l_nao_achou = TRUE THEN
          LET l_cod_incid_ipi = 0
       END IF
    END IF
 ELSE
    LET l_nao_achou = TRUE
    DECLARE cq_cod_ipi CURSOR FOR
     SELECT UNIQUE(incid_ipi.cod_incid_ipi)
       FROM incid_ipi
      WHERE incid_ipi.cod_empresa       = mr_w_sup0552_4_it.empresa
        AND incid_ipi.ies_tip_incid_ipi = l_ies_tip_incid
    FOREACH cq_cod_ipi INTO l_cod_incid_ipi
       LET l_nao_achou = FALSE
       CLOSE cq_cod_ipi #764215#
       EXIT FOREACH
    END FOREACH
    FREE cq_cod_ipi #764215#
    IF l_nao_achou = TRUE THEN
       LET l_cod_incid_ipi = 0
    END IF
 END IF

 SELECT incid_ipi.pct_direito_cred
   INTO l_pct_direito
   FROM incid_ipi
  WHERE incid_ipi.cod_empresa       = mr_w_sup0552_4_it.empresa
    AND incid_ipi.cod_incid_ipi     = l_cod_incid_ipi

 RETURN l_cod_incid_ipi, l_pct_direito

 END FUNCTION

#----------------------------------------------------------#
 FUNCTION sup0552_inclui_ar_ped(lr_ordem_sup,l_conta_array)
#----------------------------------------------------------#
 DEFINE lr_ar_ped      RECORD LIKE ar_ped.*,
        lr_ordem_sup   RECORD LIKE ordem_sup.*,
        l_ind          SMALLINT,
        l_passou       SMALLINT,
        l_conta_array  SMALLINT

 IF sup0552_verifica_controla_valor(lr_ordem_sup.cod_empresa, lr_ordem_sup.num_oc) = TRUE THEN
    IF sup0552_marca_valores() = FALSE THEN
       RETURN FALSE, 0
    END IF
 ELSE
    IF sup0552_marca_quantidades() = FALSE THEN
       RETURN FALSE, 0
    END IF
 END IF

 LET l_passou = FALSE

 FOR l_ind = 1 TO 999

    IF ga_array_marcadas[l_ind].num_prog_entrega IS NOT NULL THEN

       INITIALIZE lr_ar_ped.* TO NULL

       LET lr_ar_ped.cod_empresa      = mr_aviso_rec.cod_empresa
       LET lr_ar_ped.num_aviso_rec    = mr_aviso_rec.num_aviso_rec
       LET lr_ar_ped.num_seq          = mr_aviso_rec.num_seq
       LET lr_ar_ped.num_pedido       = mr_aviso_rec.num_pedido
       LET lr_ar_ped.num_oc           = mr_aviso_rec.num_oc
       LET lr_ar_ped.num_prog_entrega = ga_array_marcadas[l_ind].num_prog_entrega
       LET lr_ar_ped.ies_tip_entrega  = sup0552_busca_ies_tip_entrega(lr_ordem_sup.*)
       LET lr_ar_ped.qtd_reservada    = ga_array_marcadas[l_ind].qtd_reservada
       LET lr_ar_ped.qtd_recebida     = 0
       LET lr_ar_ped.qtd_devolvid     = 0
       LET l_passou                   = TRUE

       INSERT INTO ar_ped VALUES (lr_ar_ped.*)
       IF sqlca.sqlcode <> 0 THEN
          LET m_houve_erro = TRUE
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da AR_PED "
          LET m_status_arquivo = 1
          RETURN FALSE, 0
       END IF
    END IF
 END FOR

 IF l_passou = FALSE THEN
    LET l_conta_array = l_conta_array + 1
    LET ma_array_consistencias[l_conta_array].nota_fiscal       =
        mr_w_sup0552_4_it.nota_fiscal
    LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
        mr_w_sup0552_4_it.serie_nota_fiscal
    LET ma_array_consistencias[l_conta_array].subserie_nf       =
        mr_w_sup0552_4_it.subserie_nf
    LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
        mr_w_sup0552_4_it.espc_nota_fiscal
    LET ma_array_consistencias[l_conta_array].fornecedor        =
        mr_w_sup0552_4_it.fornecedor
    LET ma_array_consistencias[l_conta_array].sequencia         =
        mr_w_sup0552_4_it.sequencia
    LET ma_array_consistencias[l_conta_array].txt_consistencia =
        "Ordem de Compra nr.",lr_ordem_sup.num_oc," sem SALDO."
    LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
    LET m_houve_erro     = TRUE
    RETURN TRUE, 1
 END IF

 RETURN TRUE, 0

 END FUNCTION

 #---------------------------------------------------#
 FUNCTION sup0552_busca_ies_tip_entrega(lr_ordem_sup)
#----------------------------------------------------#
 DEFINE l_val_dif_aceita   DECIMAL(17,2),
        l_val_recebido     DECIMAL(17,2),
        l_val_solicitado   DECIMAL(17,2),
        l_cod_grupo        DECIMAL(2,0),
        l_cod_familia      CHAR(03),
        l_ies_tip_entrega  CHAR(01),
        l_val_liquido_item DECIMAL(17,2),
        l_qtd_declarad_nf  DECIMAL(15,3),
        l_dif_aceita       DECIMAL(15,3),
        l_fat_conver_unid  LIKE ordem_sup.fat_conver_unid,
        lr_ordem_sup       RECORD LIKE ordem_sup.*

 LET l_ies_tip_entrega = "P"

 IF sup0552_verifica_controla_valor(lr_ordem_sup.cod_empresa, lr_ordem_sup.num_oc) = TRUE THEN

    LET l_val_liquido_item = 0
    CALL sup0552_busca_val_tot_reservado(lr_ordem_sup.cod_empresa,
                                         lr_ordem_sup.num_pedido,
                                         lr_ordem_sup.num_oc) RETURNING l_val_liquido_item
    LET l_val_liquido_item = l_val_liquido_item + mr_aviso_rec.val_liquido_item

    CALL sup0552_busca_totais_ordem(lr_ordem_sup.cod_empresa, lr_ordem_sup.num_oc) RETURNING l_val_solicitado, l_val_recebido

    LET l_ies_tip_entrega = "P"
    LET l_val_dif_aceita = 0
    IF lr_ordem_sup.pct_aceite_dif <> 0 THEN
       LET l_val_dif_aceita =  lr_ordem_sup.pct_aceite_dif *
                               (lr_ordem_sup.pre_unit_oc / 100)
    ELSE
       LET l_val_dif_aceita =  gr_par_sup.pct_maximo_div_q *
                               (lr_ordem_sup.pre_unit_oc / 100)
    END IF

    IF lr_ordem_sup.ies_liquida_oc = "1" THEN
       IF (l_val_liquido_item + l_val_recebido) >= l_val_solicitado THEN
           LET l_ies_tip_entrega = "T"
       END IF
    END IF
    IF lr_ordem_sup.ies_liquida_oc = "2" THEN
       IF (l_val_liquido_item + l_val_recebido) >= l_val_solicitado THEN
          LET l_ies_tip_entrega = "T"
       ELSE
          IF (l_val_liquido_item + l_val_recebido) >=
             (l_val_solicitado - l_val_dif_aceita) THEN
             LET l_ies_tip_entrega = "T"
          END IF
       END IF
    END IF
 ELSE
    LET l_fat_conver_unid = lr_ordem_sup.fat_conver_unid

    LET l_qtd_declarad_nf = 0
    CALL sup0552_busca_qtd_tot_reservada(lr_ordem_sup.cod_empresa,
                                         lr_ordem_sup.num_pedido,
                                         lr_ordem_sup.num_oc) RETURNING l_qtd_declarad_nf

    LET l_qtd_declarad_nf = l_qtd_declarad_nf + mr_aviso_rec.qtd_declarad_nf

    LET l_ies_tip_entrega = "P"
    LET l_dif_aceita = 0

    IF lr_ordem_sup.pct_aceite_dif <> 0 THEN
       LET l_dif_aceita =  lr_ordem_sup.pct_aceite_dif *
          (lr_ordem_sup.qtd_solic / 100)
    ELSE
       LET l_dif_aceita =  gr_par_sup.pct_maximo_div_q *
          (lr_ordem_sup.qtd_solic / 100)
    END IF

    IF lr_ordem_sup.ies_liquida_oc = "1" THEN
       IF (l_qtd_declarad_nf * l_fat_conver_unid) +
           lr_ordem_sup.qtd_recebida >= lr_ordem_sup.qtd_solic THEN
           LET l_ies_tip_entrega = "T"
       END IF
    END IF
    IF lr_ordem_sup.ies_liquida_oc = "2" THEN
       IF (l_qtd_declarad_nf * l_fat_conver_unid)  +
           lr_ordem_sup.qtd_recebida >= lr_ordem_sup.qtd_solic THEN
          LET l_ies_tip_entrega = "T"
       ELSE
          IF (l_qtd_declarad_nf * l_fat_conver_unid)  +
             lr_ordem_sup.qtd_recebida >= (lr_ordem_sup.qtd_solic - l_dif_aceita)     THEN
             LET l_ies_tip_entrega = "T"
          END IF
       END IF
    END IF
 END IF

 RETURN l_ies_tip_entrega

 END FUNCTION

#-------------------------------------------------------#
 FUNCTION sup0552_busca_val_tot_reservado(l_cod_empresa,
                                          l_num_pedido,
                                          l_num_oc)
#-------------------------------------------------------#
 DEFINE l_cod_empresa         LIKE empresa.cod_empresa,
        l_val_liquido_item    DECIMAL(17,2),
        l_num_pedido          LIKE ordem_sup.num_pedido,
        l_num_oc              LIKE ordem_sup.num_oc

 LET l_val_liquido_item = 0

 SELECT SUM(aviso_rec.val_liquido_item)
   INTO l_val_liquido_item
   FROM aviso_rec
  WHERE aviso_rec.cod_empresa        = l_cod_empresa
    AND aviso_rec.num_pedido         = l_num_pedido
    AND aviso_rec.num_oc             = l_num_oc
    AND aviso_rec.ies_liberacao_cont = "N"
 IF l_val_liquido_item IS NULL THEN
    LET l_val_liquido_item = 0
 END IF

 RETURN l_val_liquido_item

 END FUNCTION

#---------------------------------------------#
 FUNCTION sup0552_busca_totais_ordem(l_cod_empresa, l_num_oc)
#---------------------------------------------#
 DEFINE l_cod_empresa            LIKE empresa.cod_empresa,
        l_val_solic, l_val_receb DECIMAL(17,2),
        l_num_oc                 LIKE ordem_sup.num_oc

 SELECT SUM(prog_ordem_sup_com.val_solic),
        SUM(prog_ordem_sup_com.val_receb)
   INTO l_val_solic,
        l_val_receb
   FROM prog_ordem_sup_com, ordem_sup
  WHERE prog_ordem_sup_com.cod_empresa = l_cod_empresa
    AND prog_ordem_sup_com.num_oc      = l_num_oc
    AND prog_ordem_sup_com.num_versao  = ordem_sup.num_versao
    AND ordem_sup.cod_empresa          = prog_ordem_sup_com.cod_empresa
    AND ordem_sup.num_oc               = prog_ordem_sup_com.num_oc
    AND ordem_sup.ies_versao_atual     = "S"

 IF l_val_solic IS NULL THEN
    LET l_val_solic = 0
 END IF

 IF l_val_receb IS NULL THEN
    LET l_val_receb = 0
 END IF

 RETURN l_val_solic, l_val_receb

 END FUNCTION

#------------------------------------------------------#
 FUNCTION sup0552_busca_qtd_tot_reservada(l_cod_empresa,
                                          l_num_oc,
                                          l_num_pedido)
#------------------------------------------------------#
 DEFINE l_cod_empresa     LIKE empresa.cod_empresa,
        l_qtd_declarad_nf DECIMAL(15,3),
        l_num_pedido      LIKE ordem_sup.num_pedido,
        l_num_oc          LIKE ordem_sup.num_oc

 LET l_qtd_declarad_nf = 0

 SELECT SUM(aviso_rec.qtd_declarad_nf)
   INTO l_qtd_declarad_nf
   FROM aviso_rec
  WHERE aviso_rec.cod_empresa = l_cod_empresa
    AND aviso_rec.num_pedido  = l_num_pedido
    AND aviso_rec.num_oc      = l_num_oc
    AND aviso_rec.ies_liberacao_cont = "N"
 IF l_qtd_declarad_nf IS NULL THEN
    LET l_qtd_declarad_nf = 0
 END IF

 RETURN l_qtd_declarad_nf

END FUNCTION

#--------------------------------------------------#
 FUNCTION sup0552_verifica_controla_valor(l_cod_empresa, l_num_oc)
#--------------------------------------------------#
 DEFINE l_cod_empresa    LIKE empresa.cod_empresa,
        l_num_oc         LIKE ordem_sup.num_oc,
        l_controla_valor SMALLINT

 WHENEVER ERROR CONTINUE
 LET l_controla_valor = NULL
 SELECT COUNT(*)
   INTO l_controla_valor
   FROM prog_ordem_sup_com, ordem_sup
  WHERE prog_ordem_sup_com.cod_empresa = l_cod_empresa
    AND prog_ordem_sup_com.num_oc      = l_num_oc
    AND prog_ordem_sup_com.num_versao  = ordem_sup.num_versao
    AND ordem_sup.cod_empresa          = prog_ordem_sup_com.cod_empresa
    AND ordem_sup.num_oc               = prog_ordem_sup_com.num_oc
    AND ordem_sup.ies_versao_atual     = "S"
 WHENEVER ERROR STOP
 IF l_controla_valor IS NULL THEN
    LET l_controla_valor = 0
 END IF

 IF l_controla_valor > 0 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

#-------------------------------------#
 FUNCTION sup0552_marca_quantidades()
#-------------------------------------#
 DEFINE l_fat_conver_unid LIKE ordem_sup.fat_conver_unid,
        l_ind             SMALLINT,
        l_ind2            SMALLINT,
        l_achou_ar_ped    SMALLINT,
        l_qtd_reservada   DECIMAL(15,3),
        l_qtd_reservada1  DECIMAL(15,3),
        l_ies_reservou    CHAR(01),
        l_soma_reserva    DECIMAL(15,3)

 INITIALIZE ga_array_ordens, ga_array_ordens_aux, ga_array_marcadas TO NULL

 INITIALIZE l_fat_conver_unid, l_qtd_reservada, l_achou_ar_ped,
            l_qtd_reservada1, l_ies_reservou TO NULL

 LET l_achou_ar_ped = FALSE

 DECLARE cq_array_ordens  CURSOR FOR
  SELECT ordem_sup.num_pedido,
         ordem_sup.num_oc,
         prog_ordem_sup.num_prog_entrega,
         ordem_sup.cod_unid_med,
         prog_ordem_sup.dat_entrega_prev,
         (prog_ordem_sup.qtd_solic - prog_ordem_sup.qtd_recebida),
         prog_ordem_sup.qtd_solic,
         ordem_sup.ies_liquida_oc,
         ordem_sup.qtd_solic,
         ordem_sup.fat_conver_unid
    FROM ordem_sup, prog_ordem_sup
   WHERE ordem_sup.cod_empresa          = mr_aviso_rec.cod_empresa
     AND ordem_sup.num_oc               = mr_aviso_rec.num_oc
     AND ordem_sup.ies_versao_atual     = "S"
     AND prog_ordem_sup.cod_empresa     = ordem_sup.cod_empresa
     AND prog_ordem_sup.num_oc          = ordem_sup.num_oc
     AND prog_ordem_sup.num_versao      = ordem_sup.num_versao
     AND prog_ordem_sup.ies_situa_prog  <> "P"
     AND prog_ordem_sup.ies_situa_prog  <> "C"
     AND prog_ordem_sup.ies_situa_prog  <> "L"
   ORDER BY prog_ordem_sup.dat_entrega_prev,
            prog_ordem_sup.num_prog_entrega

 LET l_ind = 1

 FOREACH cq_array_ordens INTO ga_array_ordens[l_ind].num_pedido      ,
                              ga_array_ordens[l_ind].num_oc          ,
                              ga_array_ordens[l_ind].num_prog_entrega,
                              ga_array_ordens[l_ind].cod_unid_med    ,
                              ga_array_ordens[l_ind].dat_entrega_prev,
                              ga_array_ordens[l_ind].qtd_saldo       ,
                              ga_array_ordens[l_ind].qtd_solic       ,
                              ga_array_ordens2[l_ind].ies_liquida_oc ,
                              ga_array_ordens2[l_ind].qtd_solic      ,
                              l_fat_conver_unid

    LET l_achou_ar_ped = TRUE
    LET l_qtd_reservada = 0

    DECLARE cq_cursor_reserva CURSOR FOR
     SELECT ar_ped.qtd_reservada,
            ar_ped.num_aviso_rec,
            ar_ped.num_seq
       FROM ar_ped, aviso_rec
      WHERE ar_ped.cod_empresa            = mr_aviso_rec.cod_empresa
        AND ar_ped.num_pedido             = ga_array_ordens[l_ind].num_pedido
        AND ar_ped.num_oc                 = ga_array_ordens[l_ind].num_oc
        AND ar_ped.num_prog_entrega       = ga_array_ordens[l_ind].num_prog_entrega
        AND aviso_rec.cod_empresa         = mr_aviso_rec.cod_empresa
        AND aviso_rec.num_aviso_rec       = ar_ped.num_aviso_rec
        AND aviso_rec.num_seq             = ar_ped.num_seq
        AND aviso_rec.ies_liberacao_cont  = "N"

    FOREACH cq_cursor_reserva INTO l_qtd_reservada1
       LET l_qtd_reservada = l_qtd_reservada + (l_qtd_reservada1 * l_fat_conver_unid)
    END FOREACH
    FREE cq_cursor_reserva #764215#

    IF l_qtd_reservada <> 0 THEN
       LET ga_array_ordens[l_ind].qtd_saldo = ga_array_ordens[l_ind].qtd_saldo - l_qtd_reservada
    ELSE
       LET l_achou_ar_ped = FALSE
    END IF

    IF ga_array_ordens[l_ind].qtd_saldo > 0 OR
       ga_array_ordens2[l_ind].ies_liquida_oc = "3"               OR
       (ga_array_ordens2[l_ind].qtd_solic = 0 AND l_achou_ar_ped = FALSE) THEN
       LET l_ind = l_ind + 1
    END IF

    IF (ga_array_ordens[l_ind].num_pedido  IS NULL) AND (l_ind = 1) THEN
       EXIT FOREACH
    END IF

    IF l_ind > 999 THEN
       EXIT FOREACH
    END IF

 END FOREACH

 LET l_ies_reservou = "S"

 IF l_ind = 1  THEN
    LET l_ies_reservou = "N"
 END IF

 INITIALIZE ga_array_ordens_aux TO NULL
 LET l_soma_reserva = 0

 FOR l_ind2 = 1 TO l_ind

     LET ga_array_ordens[l_ind2].qtd_saldo = (ga_array_ordens[l_ind2].qtd_saldo /
                                              l_fat_conver_unid)
     LET ga_array_ordens[l_ind2].qtd_solic = (ga_array_ordens[l_ind2].qtd_solic /
                                              l_fat_conver_unid)

     IF ga_array_ordens[l_ind2].num_pedido IS NOT NULL THEN
        IF ga_array_ordens[l_ind2].qtd_saldo <
          (mr_aviso_rec.qtd_declarad_nf - l_soma_reserva) THEN
           LET ga_array_ordens_aux[l_ind2].num_pedido       = ga_array_ordens[l_ind2].num_pedido
           LET ga_array_ordens_aux[l_ind2].num_oc           = ga_array_ordens[l_ind2].num_oc
           LET ga_array_ordens_aux[l_ind2].num_prog_entrega = ga_array_ordens[l_ind2].num_prog_entrega
           LET ga_array_ordens_aux[l_ind2].cod_unid_med     = ga_array_ordens[l_ind2].cod_unid_med
           LET ga_array_ordens_aux[l_ind2].dat_entrega_prev = ga_array_ordens[l_ind2].dat_entrega_prev
           LET ga_array_ordens_aux[l_ind2].qtd_saldo        = ga_array_ordens[l_ind2].qtd_saldo
           IF l_soma_reserva <> 0 THEN
              IF (l_soma_reserva + ga_array_ordens[l_ind2].qtd_saldo) < mr_aviso_rec.qtd_declarad_nf THEN
                 LET ga_array_ordens_aux[l_ind2].qtd_reservada = ga_array_ordens[l_ind2].qtd_saldo
                 LET l_soma_reserva = l_soma_reserva + ga_array_ordens_aux[l_ind2].qtd_reservada
              ELSE
                 LET ga_array_ordens_aux[l_ind2].qtd_reservada =  (mr_aviso_rec.qtd_declarad_nf - l_soma_reserva)
                 LET l_soma_reserva = l_soma_reserva + ga_array_ordens_aux[l_ind2].qtd_reservada
              END IF
           ELSE
              LET ga_array_ordens_aux[l_ind2].qtd_reservada = ga_array_ordens[l_ind2].qtd_saldo
              LET l_soma_reserva = l_soma_reserva + ga_array_ordens[l_ind2].qtd_saldo
           END IF
        ELSE
           IF ga_array_ordens[l_ind2].qtd_saldo = (mr_aviso_rec.qtd_declarad_nf - l_soma_reserva) THEN
              LET ga_array_ordens_aux[l_ind2].num_pedido       = ga_array_ordens[l_ind2].num_pedido
              LET ga_array_ordens_aux[l_ind2].num_oc           = ga_array_ordens[l_ind2].num_oc
              LET ga_array_ordens_aux[l_ind2].num_prog_entrega = ga_array_ordens[l_ind2].num_prog_entrega
              LET ga_array_ordens_aux[l_ind2].cod_unid_med     = ga_array_ordens[l_ind2].cod_unid_med
              LET ga_array_ordens_aux[l_ind2].qtd_saldo        = ga_array_ordens[l_ind2].qtd_saldo
              LET ga_array_ordens_aux[l_ind2].dat_entrega_prev = ga_array_ordens[l_ind2].dat_entrega_prev
              LET ga_array_ordens_aux[l_ind2].qtd_reservada    = ga_array_ordens[l_ind2].qtd_saldo
              LET l_soma_reserva = l_soma_reserva + ga_array_ordens_aux[l_ind2].qtd_reservada
              EXIT FOR
           ELSE
              IF ga_array_ordens[l_ind2].qtd_saldo > (mr_aviso_rec.qtd_declarad_nf - l_soma_reserva) THEN
                 LET ga_array_ordens_aux[l_ind2].num_pedido       = ga_array_ordens[l_ind2].num_pedido
                 LET ga_array_ordens_aux[l_ind2].num_oc           = ga_array_ordens[l_ind2].num_oc
                 LET ga_array_ordens_aux[l_ind2].num_prog_entrega = ga_array_ordens[l_ind2].num_prog_entrega
                 LET ga_array_ordens_aux[l_ind2].cod_unid_med     = ga_array_ordens[l_ind2].cod_unid_med
                 LET ga_array_ordens_aux[l_ind2].qtd_saldo        = ga_array_ordens[l_ind2].qtd_saldo
                 LET ga_array_ordens_aux[l_ind2].dat_entrega_prev = ga_array_ordens[l_ind2].dat_entrega_prev
                 IF l_soma_reserva <> 0 THEN
                    IF (l_soma_reserva + ga_array_ordens[l_ind2].qtd_saldo) < mr_aviso_rec.qtd_declarad_nf THEN
                       LET ga_array_ordens_aux[l_ind2].qtd_reservada = ga_array_ordens[l_ind2].qtd_saldo
                    ELSE
                       LET ga_array_ordens_aux[l_ind2].qtd_reservada = (mr_aviso_rec.qtd_declarad_nf - l_soma_reserva)
                       LET l_soma_reserva = l_soma_reserva + ga_array_ordens[l_ind2].qtd_saldo
                    END IF
                 ELSE
                    LET ga_array_ordens_aux[l_ind2].qtd_reservada =  (mr_aviso_rec.qtd_declarad_nf - l_soma_reserva)
                    LET l_soma_reserva = l_soma_reserva + ga_array_ordens[l_ind2].qtd_saldo
                 END IF
                 EXIT FOR
              END IF
           END IF
        END IF
     END IF
 END FOR
 LET l_soma_reserva = 0
 FOR l_ind2 = 1 TO l_ind
    IF ga_array_ordens_aux[l_ind2].qtd_reservada IS NOT NULL THEN
       LET ga_array_marcadas[l_ind2].num_prog_entrega = ga_array_ordens_aux[l_ind2].num_prog_entrega
       LET ga_array_marcadas[l_ind2].qtd_reservada    = ga_array_ordens_aux[l_ind2].qtd_reservada
       LET ga_array_marcadas[l_ind2].qtd_solic        = ga_array_ordens[l_ind2].qtd_solic
       LET l_soma_reserva = l_soma_reserva + ga_array_ordens_aux[l_ind2].qtd_reservada
    END IF
 END FOR

 RETURN TRUE

END FUNCTION

#--------------------------------#
 FUNCTION sup0552_marca_valores()
#--------------------------------#
 DEFINE l_ind             SMALLINT,
        l_ind2            SMALLINT,
        l_achou_ar_ped    SMALLINT,
        l_val_reservado   DECIMAL(17,2),
        l_val_reservado1  DECIMAL(17,2),
        l_ies_reservou    CHAR(01),
        l_soma_reserva    DECIMAL(17,2)

 INITIALIZE ga_array_ordens, ga_array_ordens_aux, ga_array_marcadas TO NULL

 INITIALIZE l_val_reservado, l_achou_ar_ped,
            l_val_reservado1, l_ies_reservou TO NULL

 LET l_achou_ar_ped = FALSE

 DECLARE cq_array_ordens2 CURSOR FOR
  SELECT ordem_sup.num_pedido,
         ordem_sup.num_oc,
         prog_ordem_sup.num_prog_entrega,
         ordem_sup.cod_unid_med,
         prog_ordem_sup.dat_entrega_prev,
         (prog_ordem_sup_com.val_solic - prog_ordem_sup_com.val_receb),
         prog_ordem_sup_com.val_solic,
         ordem_sup.ies_liquida_oc,
         ordem_sup.qtd_solic
    FROM ordem_sup, prog_ordem_sup, prog_ordem_sup_com
   WHERE ordem_sup.cod_empresa               = mr_aviso_rec.cod_empresa
     AND ordem_sup.num_oc                    = mr_aviso_rec.num_oc
     AND ordem_sup.ies_versao_atual          = "S"
     AND prog_ordem_sup.cod_empresa          = ordem_sup.cod_empresa
     AND prog_ordem_sup.num_oc               = ordem_sup.num_oc
     AND prog_ordem_sup.num_versao           = ordem_sup.num_versao
     AND prog_ordem_sup.ies_situa_prog       <> "P"
     AND prog_ordem_sup.ies_situa_prog       <> "C"
     AND prog_ordem_sup.ies_situa_prog       <> "L"
     AND prog_ordem_sup_com.cod_empresa      = prog_ordem_sup.cod_empresa
     AND prog_ordem_sup_com.num_oc           = prog_ordem_sup.num_oc
     AND prog_ordem_sup_com.num_versao       = prog_ordem_sup.num_versao
     AND prog_ordem_sup_com.num_prog_entrega = prog_ordem_sup.num_prog_entrega
   ORDER BY prog_ordem_sup.dat_entrega_prev,
            prog_ordem_sup.num_prog_entrega

 LET l_ind = 1

 FOREACH cq_array_ordens2 INTO ga_array_ordens[l_ind].num_pedido      ,
                               ga_array_ordens[l_ind].num_oc          ,
                               ga_array_ordens[l_ind].num_prog_entrega,
                               ga_array_ordens[l_ind].cod_unid_med    ,
                               ga_array_ordens[l_ind].dat_entrega_prev,
                               ga_array_ordens[l_ind].val_saldo       ,
                               ga_array_ordens[l_ind].val_solic       ,
                               ga_array_ordens2[l_ind].ies_liquida_oc ,
                               ga_array_ordens2[l_ind].val_solic

    LET l_achou_ar_ped = TRUE
    LET l_val_reservado = 0

    DECLARE cq_cursor_reserva2 CURSOR FOR
     SELECT ar_ped.qtd_reservada,
            ar_ped.num_aviso_rec,
            ar_ped.num_seq
       FROM ar_ped, aviso_rec
      WHERE ar_ped.cod_empresa            = mr_aviso_rec.cod_empresa
        AND ar_ped.num_pedido             = ga_array_ordens[l_ind].num_pedido
        AND ar_ped.num_oc                 = ga_array_ordens[l_ind].num_oc
        AND ar_ped.num_prog_entrega       = ga_array_ordens[l_ind].num_prog_entrega
        AND aviso_rec.cod_empresa         = mr_aviso_rec.cod_empresa
        AND aviso_rec.num_aviso_rec       = ar_ped.num_aviso_rec
        AND aviso_rec.num_seq             = ar_ped.num_seq
        AND aviso_rec.ies_liberacao_cont  = "N"

    FOREACH cq_cursor_reserva2 INTO l_val_reservado1
       LET l_val_reservado = l_val_reservado + l_val_reservado1
    END FOREACH
    FREE cq_cursor_reserva2 #764215#

    IF l_val_reservado <> 0 THEN
       LET ga_array_ordens[l_ind].val_saldo = ga_array_ordens[l_ind].val_saldo - l_val_reservado
    ELSE
       LET l_achou_ar_ped = FALSE
    END IF

    IF ga_array_ordens[l_ind].val_saldo > 0 OR
       ga_array_ordens2[l_ind].ies_liquida_oc = "3"               OR
       (ga_array_ordens2[l_ind].val_solic = 0 AND l_achou_ar_ped = FALSE) THEN
       LET l_ind = l_ind + 1
    END IF

    IF (ga_array_ordens[l_ind].num_pedido  IS NULL) AND (l_ind = 1) THEN
       CLOSE cq_array_ordens2 #764215#
       EXIT FOREACH
    END IF

    IF l_ind > 999 THEN
       CLOSE cq_array_ordens2 #764215#
       EXIT FOREACH
    END IF

 END FOREACH
 FREE cq_array_ordens2 #764215#

 LET l_ies_reservou = "S"

 IF l_ind = 1  THEN
    LET l_ies_reservou = "N"
 END IF

 INITIALIZE ga_array_ordens_aux TO NULL
 LET l_soma_reserva = 0

 FOR l_ind2 = 1 TO l_ind

     IF ga_array_ordens[l_ind2].num_pedido IS NOT NULL THEN
        IF ga_array_ordens[l_ind2].val_saldo <
          (mr_aviso_rec.val_liquido_item - l_soma_reserva) THEN
           LET ga_array_ordens_aux[l_ind2].num_pedido       = ga_array_ordens[l_ind2].num_pedido
           LET ga_array_ordens_aux[l_ind2].num_oc           = ga_array_ordens[l_ind2].num_oc
           LET ga_array_ordens_aux[l_ind2].num_prog_entrega = ga_array_ordens[l_ind2].num_prog_entrega
           LET ga_array_ordens_aux[l_ind2].cod_unid_med     = ga_array_ordens[l_ind2].cod_unid_med
           LET ga_array_ordens_aux[l_ind2].dat_entrega_prev = ga_array_ordens[l_ind2].dat_entrega_prev
           LET ga_array_ordens_aux[l_ind2].qtd_saldo        = ga_array_ordens[l_ind2].val_saldo
           IF l_soma_reserva <> 0 THEN
              IF (l_soma_reserva + ga_array_ordens[l_ind2].val_saldo) < mr_aviso_rec.val_liquido_item THEN
                 LET ga_array_ordens_aux[l_ind2].qtd_reservada = ga_array_ordens[l_ind2].val_saldo
                 LET l_soma_reserva = l_soma_reserva + ga_array_ordens_aux[l_ind2].qtd_reservada
              ELSE
                 LET ga_array_ordens_aux[l_ind2].qtd_reservada =  (mr_aviso_rec.val_liquido_item - l_soma_reserva)
                 LET l_soma_reserva = l_soma_reserva + ga_array_ordens_aux[l_ind2].qtd_reservada
              END IF
           ELSE
              LET ga_array_ordens_aux[l_ind2].qtd_reservada = ga_array_ordens[l_ind2].val_saldo
              LET l_soma_reserva = l_soma_reserva + ga_array_ordens[l_ind2].val_saldo
           END IF
        ELSE
           IF ga_array_ordens[l_ind2].val_saldo = (mr_aviso_rec.val_liquido_item - l_soma_reserva) THEN
              LET ga_array_ordens_aux[l_ind2].num_pedido       = ga_array_ordens[l_ind2].num_pedido
              LET ga_array_ordens_aux[l_ind2].num_oc           = ga_array_ordens[l_ind2].num_oc
              LET ga_array_ordens_aux[l_ind2].num_prog_entrega = ga_array_ordens[l_ind2].num_prog_entrega
              LET ga_array_ordens_aux[l_ind2].cod_unid_med     = ga_array_ordens[l_ind2].cod_unid_med
              LET ga_array_ordens_aux[l_ind2].qtd_saldo        = ga_array_ordens[l_ind2].val_saldo
              LET ga_array_ordens_aux[l_ind2].dat_entrega_prev = ga_array_ordens[l_ind2].dat_entrega_prev
              LET ga_array_ordens_aux[l_ind2].qtd_reservada    = ga_array_ordens[l_ind2].val_saldo
              LET l_soma_reserva = l_soma_reserva + ga_array_ordens_aux[l_ind2].qtd_reservada
              EXIT FOR
           ELSE
              IF ga_array_ordens[l_ind2].val_saldo > (mr_aviso_rec.val_liquido_item - l_soma_reserva) THEN
                 LET ga_array_ordens_aux[l_ind2].num_pedido       = ga_array_ordens[l_ind2].num_pedido
                 LET ga_array_ordens_aux[l_ind2].num_oc           = ga_array_ordens[l_ind2].num_oc
                 LET ga_array_ordens_aux[l_ind2].num_prog_entrega = ga_array_ordens[l_ind2].num_prog_entrega
                 LET ga_array_ordens_aux[l_ind2].cod_unid_med     = ga_array_ordens[l_ind2].cod_unid_med
                 LET ga_array_ordens_aux[l_ind2].qtd_saldo        = ga_array_ordens[l_ind2].val_saldo
                 LET ga_array_ordens_aux[l_ind2].dat_entrega_prev = ga_array_ordens[l_ind2].dat_entrega_prev
                 IF l_soma_reserva <> 0 THEN
                    IF (l_soma_reserva + ga_array_ordens[l_ind2].val_saldo) < mr_aviso_rec.val_liquido_item THEN
                       LET ga_array_ordens_aux[l_ind2].qtd_reservada = ga_array_ordens[l_ind2].val_saldo
                    ELSE
                       LET ga_array_ordens_aux[l_ind2].qtd_reservada = (mr_aviso_rec.val_liquido_item - l_soma_reserva)
                       LET l_soma_reserva = l_soma_reserva + ga_array_ordens[l_ind2].val_saldo
                    END IF
                 ELSE
                    LET ga_array_ordens_aux[l_ind2].qtd_reservada =  (mr_aviso_rec.val_liquido_item - l_soma_reserva)
                    LET l_soma_reserva = l_soma_reserva + ga_array_ordens[l_ind2].val_saldo
                 END IF
                 EXIT FOR
              END IF
           END IF
        END IF
     END IF
 END FOR
 LET l_soma_reserva = 0
 FOR l_ind2 = 1 TO l_ind
    IF ga_array_ordens_aux[l_ind2].qtd_reservada IS NOT NULL THEN
       LET ga_array_marcadas[l_ind2].num_prog_entrega = ga_array_ordens_aux[l_ind2].num_prog_entrega
       LET ga_array_marcadas[l_ind2].qtd_reservada    = ga_array_ordens_aux[l_ind2].qtd_reservada
       LET ga_array_marcadas[l_ind2].qtd_solic        = ga_array_ordens[l_ind2].val_solic
       LET l_soma_reserva = l_soma_reserva + ga_array_ordens_aux[l_ind2].qtd_reservada
    END IF
 END FOR

 RETURN TRUE

END FUNCTION

#------------------------------------------------------------------#
 FUNCTION sup0552_gera_movimento_estoque(l_tipo_mov,l_tipo_chamada)
#------------------------------------------------------------------#
 DEFINE l_tipo_mov          CHAR(20),
        l_ies_somente_erro5 SMALLINT,
        l_tipo_chamada      CHAR(20),
        l_conta_erro        SMALLINT,
        lr_nf_sup_erro      RECORD
                            empresa              LIKE nf_sup_erro.empresa,
                            num_aviso_rec        LIKE nf_sup_erro.num_aviso_rec,
                            num_seq              LIKE nf_sup_erro.num_seq,
                            des_pendencia_item   LIKE nf_sup_erro.des_pendencia_item,
                            ies_origem_erro      LIKE nf_sup_erro.ies_origem_erro,
                            ies_erro_grave       LIKE nf_sup_erro.ies_erro_grave
                            END RECORD,
        l_item_wis          SMALLINT,
        l_sucesso           SMALLINT

 LET l_ies_somente_erro5 = FALSE
 LET l_conta_erro = 0

 CALL vdp3188_item_sob_controle_wis(mr_aviso_rec.cod_empresa,mr_aviso_rec.cod_item)
 RETURNING l_sucesso , l_item_wis

 IF mr_nf_sup.ies_nf_aguard_nfe <> "7" AND
    mr_nf_sup.ies_nf_aguard_nfe <> "T" THEN
    IF l_tipo_mov = "NORMAL" THEN
       LET l_ies_somente_erro5 = FALSE
       CALL sup0552_verifica_erro_tipo_5(l_tipo_chamada)
            RETURNING l_ies_somente_erro5

       IF (gr_par_estoque.ies_custo_medio = "D" AND
           (l_ies_somente_erro5 = TRUE OR
            mr_nf_sup.ies_nf_com_erro = "N" OR
            (mr_nf_sup.ies_nf_com_erro = "S" AND
             (mr_nf_sup.nom_resp_aceite_er IS NOT NULL AND
              mr_nf_sup.nom_resp_aceite_er <> " ")))) OR
           gr_par_estoque.ies_custo_medio = "M" THEN

        IF NOT l_item_wis THEN
          IF sup0552_verifica_itens_contagem_automatica() = TRUE THEN
             CALL log120_procura_caminho("sup0530") RETURNING comando2
             LET comando2 = comando2 CLIPPED, " ",  mr_nf_sup.cod_empresa, " ",
                                                    mr_nf_sup.num_aviso_rec," ",
                                                    0, " ",
                                                    3760," ",
                                                    "S"," ","INCLUSAO"
             RUN comando2 RETURNING p_cancel
          END IF
        END IF
       END IF
    ELSE
       IF sup0552_verifica_itens_contagem_automatica() = TRUE THEN
          IF NOT l_item_wis THEN
          CALL log120_procura_caminho("sup0530") RETURNING comando2
          LET comando2 = comando2 CLIPPED, " ",  mr_nf_sup.cod_empresa, " ",
                                                 mr_nf_sup.num_aviso_rec," ",
                                                 0, " ",
                                                 3760," ",
                                                 "D"," ","INCLUSAO"

          RUN comando2 RETURNING p_cancel
          END IF
       END IF
    END IF
 END IF

 LET l_conta_erro = 0
 INITIALIZE lr_nf_sup_erro.* TO NULL

 DECLARE cq_erros_nf CURSOR FOR
  SELECT nf_sup_erro.*
    FROM nf_sup_erro
   WHERE nf_sup_erro.empresa        = mr_nf_sup.cod_empresa
     AND nf_sup_erro.num_aviso_rec  = mr_nf_sup.num_aviso_rec
     AND nf_sup_erro.ies_origem_erro <> "4"
 FOREACH cq_erros_nf INTO lr_nf_sup_erro.*
    IF lr_nf_sup_erro.ies_erro_grave = "S" THEN
       LET l_conta_erro = l_conta_erro + 1
    ELSE
       IF (mr_nf_sup.nom_resp_aceite_er IS NULL OR
           mr_nf_sup.nom_resp_aceite_er = " ") THEN
          LET l_conta_erro = l_conta_erro + 1
       END IF
    END IF
 END FOREACH
 FREE cq_erros_nf #764215#
 IF l_conta_erro = 0 THEN
    UPDATE nf_sup SET nf_sup.ies_nf_com_erro = "N"
     WHERE nf_sup.cod_empresa   = mr_nf_sup.cod_empresa
       AND nf_sup.num_aviso_rec = mr_nf_sup.num_aviso_rec
 ELSE
    UPDATE nf_sup SET nf_sup.ies_nf_com_erro    = "S",
                      nf_sup.nom_resp_aceite_er = NULL
     WHERE nf_sup.cod_empresa   = mr_nf_sup.cod_empresa
       AND nf_sup.num_aviso_rec = mr_nf_sup.num_aviso_rec
 END IF
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("ATUALIZACAO","NF_SUP")
 END IF

 END FUNCTION

#---------------------------------------------#
 FUNCTION sup0552_verifica_erro_tipo_5(l_tipo)
#---------------------------------------------#
 DEFINE l_ies_tipo5 CHAR(01),
        l_conta_5   SMALLINT,
        l_conta_x   SMALLINT,
        l_tipo      CHAR(10)

 LET l_conta_5 = NULL
 LET l_conta_x = NULL

 SELECT COUNT(*)
   INTO l_conta_x
   FROM nf_sup_erro
  WHERE nf_sup_erro.empresa        = mr_nf_sup.cod_empresa
    AND nf_sup_erro.num_aviso_rec  = mr_nf_sup.num_aviso_rec
    AND nf_sup_erro.ies_origem_erro <> "4"

 IF l_conta_x IS NULL THEN
    LET l_conta_x = 0
 END IF

 SELECT COUNT(*)
   INTO l_conta_5
   FROM nf_sup_erro
  WHERE nf_sup_erro.empresa        = mr_nf_sup.cod_empresa
    AND nf_sup_erro.num_aviso_rec  = mr_nf_sup.num_aviso_rec
    AND nf_sup_erro.ies_origem_erro = "5"

 IF l_conta_5 IS NULL THEN
    LET l_conta_5 = 0
 END IF

 IF l_conta_5 = l_conta_x THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

#-----------------------------------------------------#
 FUNCTION sup0552_verifica_itens_contagem_automatica()
#-----------------------------------------------------#
 DEFINE l_contador           SMALLINT,
        l_num_seq            LIKE aviso_rec.num_seq,
        l_cod_item           LIKE item.cod_item,
        l_ies_liberacao_cont LIKE aviso_rec.ies_liberacao_cont,
        l_ies_situa_ar       LIKE aviso_rec.ies_situa_ar,
        l_sem_grade          SMALLINT,
        l_ies_custo_grade    CHAR(01),
        l_gera_rsv_transf    CHAR(01)

  LET l_ies_custo_grade = NULL #OS522963
  WHENEVER ERROR CONTINUE
    SELECT par_sup_pad.par_ies
      INTO l_ies_custo_grade
      FROM par_sup_pad
     WHERE par_sup_pad.cod_empresa   = mr_nf_sup.cod_empresa
       AND par_sup_pad.cod_parametro = "ies_informa_custo_gr"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0
  OR l_ies_custo_grade = " "
  OR l_ies_custo_grade IS NULL THEN
     LET l_ies_custo_grade = "N"
  END IF

 LET l_gera_rsv_transf = NULL
 WHENEVER ERROR CONTINUE
 SELECT par_sup_pad.par_ies
   INTO l_gera_rsv_transf
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = mr_nf_sup.cod_empresa
    AND par_sup_pad.cod_parametro = "gera_rsv_transf"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR
    l_gera_rsv_transf IS NULL THEN
    LET l_gera_rsv_transf = "N"
 END IF

 LET l_contador = 0

 WHENEVER ERROR CONTINUE
 SELECT COUNT(*)
   INTO l_contador
   FROM aviso_rec
  WHERE aviso_rec.cod_empresa   = mr_nf_sup.cod_empresa
    AND aviso_rec.num_aviso_rec = mr_nf_sup.num_aviso_rec
    AND aviso_rec.ies_situa_ar <> "C"
    AND aviso_rec.ies_liberacao_cont = "N"
 WHENEVER ERROR STOP
 IF l_contador > 0 THEN

    # OS419365
    # Nota de consignação sempre contagem automática.
    IF mr_nf_sup.ies_nf_aguard_nfe = "4"
    OR mr_nf_sup.ies_nf_aguard_nfe = "5" THEN
       RETURN TRUE
    END IF
    # OS419365

    IF l_gera_rsv_transf = "S" AND
       mr_nf_sup.ies_nf_aguard_nfe = "8" THEN
       RETURN TRUE
    ELSE
       LET l_sem_grade = FALSE

       INITIALIZE l_num_seq,
                  l_cod_item,
                  l_ies_liberacao_cont,
                  l_ies_situa_ar TO NULL

       WHENEVER ERROR CONTINUE
       DECLARE cq_itens1 CURSOR FOR
       SELECT aviso_rec.num_seq,
              aviso_rec.cod_item,
              aviso_rec.ies_liberacao_cont,
              aviso_rec.ies_situa_ar
         FROM aviso_rec
        WHERE aviso_rec.cod_empresa   = mr_nf_sup.cod_empresa
          AND aviso_rec.num_aviso_rec = mr_nf_sup.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DECLARE CURSOR","CQ_ITENS1")
          RETURN FALSE
       END IF

       WHENEVER ERROR CONTINUE
       FOREACH cq_itens1 INTO l_num_seq,
                              l_cod_item,
                              l_ies_liberacao_cont,
                              l_ies_situa_ar

          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("FOREACH CURSOR","CQ_ITENS1")
             RETURN FALSE
          END IF

          CALL sup0063_verifica_controles(1,
                                          l_cod_item,
                                          "INCLUSAO",
                                          "SUP3760")
             RETURNING m_controles

          IF  m_controles <> " "
          AND sup1074_existe_sup_ar_grade_rec(mr_nf_sup.cod_empresa,mr_nf_sup.num_aviso_rec,l_num_seq) = FALSE
          AND sup0812_verifica_nota_transferencia(mr_nf_sup.cod_empresa, mr_nf_sup.num_aviso_rec,
                                                  mr_nf_sup.num_nf, mr_nf_sup.ser_nf, mr_nf_sup.ssr_nf,
                                                  mr_nf_sup.cod_fornecedor, mr_nf_sup.cod_operacao,
                                                  mr_aviso_rec_compl.cod_fiscal_compl) = FALSE
          AND sup0552_verifica_apenas_controle_lote_automatico(l_cod_item) = FALSE THEN
             IF l_ies_liberacao_cont = "N" AND
                l_ies_situa_ar = "I" THEN

                ####l_ies_situa_ar <> "E" THEN
                ###o item q nao movimenta estoque fica como contN inspN situa_arE

                ### Identifica que setou para contagem automática
                ### Neste caso deve deixar como manual pois com controle de grade
                ### a contagem tem que ser manual para informar as grades!

                LET mr_aviso_rec.ies_situa_ar = "C"

                WHENEVER ERROR CONTINUE
                UPDATE aviso_rec
                   SET ies_situa_ar            = "C"
                 WHERE aviso_rec.cod_empresa   = mr_nf_sup.cod_empresa
                   AND aviso_rec.num_aviso_rec = mr_nf_sup.num_aviso_rec
                   AND aviso_rec.num_seq       = l_num_seq
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("ATUALIZACAO","AVISO_REC")
                   CLOSE cq_itens1 #764215#
                   FREE  cq_itens1 #764215#
                   RETURN FALSE
                END IF
             END IF
          ELSE
             LET l_sem_grade = TRUE
          END IF
          WHENEVER ERROR CONTINUE
       END FOREACH
       FREE cq_itens1 #764215#

       IF l_sem_grade THEN
          RETURN TRUE
       ELSE
          RETURN FALSE
       END IF
    END IF
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

#---------------------------------#
 FUNCTION sup0552_verifica_frete()
#---------------------------------#
 DEFINE l_contador1     SMALLINT,
        l_contador2     SMALLINT,
        l_des_pendencia CHAR(50)

 LET l_contador1     = 0
 LET l_des_pendencia = NULL

 WHENEVER ERROR CONTINUE
 SELECT COUNT(*)
   INTO l_contador1
   FROM nf_sup
  WHERE nf_sup.cod_empresa     = mr_nf_sup.cod_empresa
    AND nf_sup.num_conhec      = mr_nf_sup.num_conhec
    AND nf_sup.ser_conhec      = mr_nf_sup.ser_conhec
    AND nf_sup.ssr_conhec      = mr_nf_sup.ssr_conhec
    AND nf_sup.cod_transpor    = mr_nf_sup.cod_transpor
    AND nf_sup.ies_nf_com_erro = "S"
    AND (nf_sup.nom_resp_aceite_er IS NULL OR
         nf_sup.nom_resp_aceite_er = "       ")
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_contador1 = 0
 END IF
 IF l_contador1 = 0 THEN
    LET l_contador1 = FALSE
    LET l_contador2 = FALSE
    DECLARE cq_frete CURSOR FOR
     SELECT frete_sup_erro.des_pendencia
       FROM frete_sup_erro
      WHERE frete_sup_erro.cod_empresa  = mr_nf_sup.cod_empresa
        AND frete_sup_erro.cod_transpor = mr_nf_sup.cod_transpor
        AND frete_sup_erro.num_conhec   = mr_nf_sup.num_conhec
        AND frete_sup_erro.ser_conhec   = mr_nf_sup.ser_conhec
        AND frete_sup_erro.ssr_conhec   = mr_nf_sup.ssr_conhec
        AND frete_sup_erro.ies_origem_erro <> "4"
    FOREACH cq_frete INTO l_des_pendencia
       IF l_des_pendencia[1,48] = "Nota fiscal relacionada ao frete apresenta erro." THEN
          LET l_contador1 = TRUE
       ELSE
          LET l_contador2 = TRUE
       END IF
    END FOREACH
     FREE cq_frete #764215#
    IF l_contador1 = TRUE THEN
       DELETE FROM frete_sup_erro
        WHERE frete_sup_erro.cod_empresa   = mr_nf_sup.cod_empresa
          AND frete_sup_erro.cod_transpor  = mr_nf_sup.cod_transpor
          AND frete_sup_erro.num_conhec    = mr_nf_sup.num_conhec
          AND frete_sup_erro.ser_conhec    = mr_nf_sup.ser_conhec
          AND frete_sup_erro.ssr_conhec    = mr_nf_sup.ssr_conhec
          AND frete_sup_erro.des_pendencia[1,48] = "Nota fiscal relacionada ao frete apresenta erro."
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("EXCLUSAO","FRETE_SUP_ERRO")
          RETURN
       END IF
       IF l_contador2 = FALSE THEN
          UPDATE frete_sup SET frete_sup.ies_conhec_erro    = "N",
                               frete_sup.nom_resp_aceite_er = " "
           WHERE frete_sup.cod_empresa   = mr_nf_sup.cod_empresa
             AND frete_sup.cod_transpor  = mr_nf_sup.cod_transpor
             AND frete_sup.num_conhec    = mr_nf_sup.num_conhec
             AND frete_sup.ser_conhec    = mr_nf_sup.ser_conhec
             AND frete_sup.ssr_conhec    = mr_nf_sup.ssr_conhec
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("MODIFICACAO","FRETE_SUP")
             RETURN
          END IF
       END IF
    END IF
 END IF

 END FUNCTION

#---------------------------------------#
 FUNCTION sup0552_grava_liberacao_nota(l_conta_array)
#---------------------------------------#
 DEFINE lr_nf_sup_erro   RECORD
                         empresa              LIKE nf_sup_erro.empresa,
                         num_aviso_rec        LIKE nf_sup_erro.num_aviso_rec,
                         num_seq              LIKE nf_sup_erro.num_seq,
                         des_pendencia_item   LIKE nf_sup_erro.des_pendencia_item,
                         ies_origem_erro      LIKE nf_sup_erro.ies_origem_erro,
                         ies_erro_grave       LIKE nf_sup_erro.ies_erro_grave
                         END RECORD
 DEFINE l_conta_array    SMALLINT

 DELETE FROM nf_sup_erro
  WHERE nf_sup_erro.empresa         = mr_nf_sup.cod_empresa
    AND nf_sup_erro.num_aviso_rec   = mr_nf_sup.num_aviso_rec
    AND nf_sup_erro.ies_origem_erro = "4"
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("EXCLUSAO","NF_SUP_ERRO")
    RETURN FALSE
 END IF

 LET lr_nf_sup_erro.empresa            = mr_nf_sup.cod_empresa
 LET lr_nf_sup_erro.num_aviso_rec      = mr_nf_sup.num_aviso_rec
 LET lr_nf_sup_erro.num_seq            = 0
 LET lr_nf_sup_erro.ies_origem_erro    = "4"
 LET lr_nf_sup_erro.ies_erro_grave     = "N"
 LET lr_nf_sup_erro.des_pendencia_item = TODAY, " ",TIME

 WHENEVER ERROR CONTINUE
   INSERT INTO nf_sup_erro ( empresa, num_aviso_rec, num_seq, des_pendencia_item, ies_origem_erro, ies_erro_grave )
          VALUES ( lr_nf_sup_erro.empresa, lr_nf_sup_erro.num_aviso_rec, lr_nf_sup_erro.num_seq, lr_nf_sup_erro.des_pendencia_item, lr_nf_sup_erro.ies_origem_erro, lr_nf_sup_erro.ies_erro_grave)
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET m_houve_erro = TRUE
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da NF_SUP_ERRO "
    LET m_status_arquivo = 1
    RETURN FALSE
 END IF

 RETURN TRUE

END FUNCTION

## OS 391495
#----------------------------------------#
 FUNCTION sup0552_grava_liberacao_frete(lr_frete_sup, l_conta_array)
#----------------------------------------#
 DEFINE lr_frete_sup          RECORD
        cod_empresa          LIKE frete_sup.cod_empresa,
        num_conhec           LIKE frete_sup.num_conhec,
        ser_conhec           LIKE frete_sup.ser_conhec,
        ssr_conhec           LIKE frete_sup.ssr_conhec,
        cod_transpor         LIKE frete_sup.cod_transpor
                             END RECORD
 DEFINE l_conta_array        SMALLINT

 INITIALIZE mr_frete_sup_erro.* TO NULL

 LET mr_frete_sup_erro.cod_empresa     = lr_frete_sup.cod_empresa
 LET mr_frete_sup_erro.num_conhec      = lr_frete_sup.num_conhec
 LET mr_frete_sup_erro.ser_conhec      = lr_frete_sup.ser_conhec
 LET mr_frete_sup_erro.ssr_conhec      = lr_frete_sup.ssr_conhec
 LET mr_frete_sup_erro.cod_transpor    = lr_frete_sup.cod_transpor
 LET mr_frete_sup_erro.ies_origem_erro = "4"
 LET mr_frete_sup_erro.ies_erro_grave  = "N"
 LET mr_frete_sup_erro.des_pendencia   = TODAY, " ",TIME," ",p_user

 WHENEVER ERROR CONTINUE
 INSERT INTO frete_sup_erro (cod_empresa          ,
                             cod_transpor         ,
                             num_conhec           ,
                             ser_conhec           ,
                             ssr_conhec           ,
                             des_pendencia        ,
                             ies_origem_erro      ,
                             ies_erro_grave)
                      VALUES (mr_frete_sup_erro.cod_empresa     ,
                              mr_frete_sup_erro.cod_transpor    ,
                              mr_frete_sup_erro.num_conhec      ,
                              mr_frete_sup_erro.ser_conhec      ,
                              mr_frete_sup_erro.ssr_conhec      ,
                              mr_frete_sup_erro.des_pendencia   ,
                              mr_frete_sup_erro.ies_origem_erro ,
                              mr_frete_sup_erro.ies_erro_grave)
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET m_houve_erro = TRUE
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da FRETE_SUP_ERRO "
    LET m_status_arquivo = 1
    RETURN FALSE
 END IF

 RETURN TRUE

 END FUNCTION

#---------------------------------------------#
 FUNCTION sup0552_verifica_itens_nao_estoque()
#---------------------------------------------#
 DEFINE l_contador  SMALLINT

 LET l_contador = NULL
 SELECT COUNT(*)
   INTO l_contador
   FROM aviso_rec
  WHERE aviso_rec.cod_empresa    = mr_nf_sup.cod_empresa
    AND aviso_rec.num_aviso_rec  = mr_nf_sup.num_aviso_rec
    AND aviso_rec.ies_item_estoq = "N"
 IF l_contador > 0 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

#--------------------------------------------------#
 FUNCTION sup0552_busca_ies_situa_ar(l_cod_item,
                                     lr_ordem_sup,
                                     lr_item,
                                     l_conta_array)
#--------------------------------------------------#
 DEFINE l_cod_item          LIKE item.cod_item,
        l_ies_situacao      CHAR(01),
        l_ies_passou        SMALLINT,
        l_cod_local_rec     LIKE local.cod_local,
        l_ies_contagem      CHAR(01),
        l_parametros        CHAR(01),
        l_ies_item_cont_aut CHAR(01),
        l_ies_item_insp_aut CHAR(01),
        l_cod_gru_desp      LIKE aviso_rec.gru_ctr_desp_item,
        lr_ordem_sup        RECORD LIKE ordem_sup.*,
        lr_item             RECORD LIKE item.*,
        l_conta_array       SMALLINT

 LET l_ies_situacao = "C"

 #----------------- CONTAGEM ITEM NAO ESTOQUE ----------------------#
 LET l_ies_passou = FALSE
 IF mr_nf_sup.ies_nf_aguard_nfe <> "7" THEN
    IF mr_aviso_rec.ies_item_estoq = "N" THEN
       IF gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
         (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
          mr_nf_sup.ies_especie_nf = "NFS") THEN
          LET l_ies_passou   = TRUE
          LET l_ies_situacao = "E"
          LET mr_aviso_rec.ies_liberacao_cont = "S"
          #--OS 544109 inicio --#
          IF mr_nf_sup.ies_nf_aguard_nfe = "T" THEN
             LET mr_aviso_rec.ies_liberacao_cont = "S"
          ## OBS: ies_liberacao_cont deve ficar como N para efetuar a baixa de pedido de item Débito Direto no sup0530
          ELSE
             LET mr_aviso_rec.ies_liberacao_cont = "N"
          END IF

          ## OBS: ies_situa_ar deve ficar como E para que seja chamado sup0530 e efetue a baixa de pedido Débito Direto
          ##      como sup1190 'contagem física' está diferente de 1 a contagem DD é sempre automática
          IF  mr_nf_sup.ies_especie_nf    <> "NFR"    #OS. 503073
          AND mr_nf_sup.ies_nf_aguard_nfe <> "X" THEN
             LET mr_aviso_rec.ies_situa_ar    = "E"
             LET mr_aviso_rec.qtd_recebida = mr_aviso_rec.qtd_declarad_nf
          ELSE
             LET mr_aviso_rec.ies_liberacao_insp = "N"
          END IF
          #--OS 544109 fim --#
       END IF
    END IF
 END IF
 #------------------------------------------------------------------#

 #--OS 544109 inicio --#
 IF  mr_nf_sup.ies_especie_nf     = "NFR"
 AND mr_nf_sup.ies_nf_aguard_nfe  = "T" THEN
    IF NOT sup0552_existe_item_de_terc(mr_nf_sup.cod_empresa,
                                       mr_nf_sup.num_nf,
                                       mr_nf_sup.ser_nf,
                                       mr_nf_sup.ssr_nf,
                                       mr_nf_sup.cod_fornecedor,
                                       mr_nf_sup.ies_especie_nf,
                                       mr_w_sup0552_4_it.sequencia) THEN
       IF  mr_nf_sup.ies_especie_nf    = "NFR"
       AND mr_nf_sup.ies_nf_aguard_nfe = "B"
       AND m_contr_terc_no_dep         = "N" THEN
       ELSE
          IF sup0552_gera_item_de_terc(lr_item.*, mr_aviso_rec.gru_ctr_desp_item) = FALSE THEN
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Ocorreram erro na geração da item_de_terc"
             LET m_status_arquivo = 1
             RETURN l_ies_situacao, l_conta_array
          END IF
       END IF
    ELSE
       IF NOT sup0552_atualiza_item_de_terc(mr_aviso_rec.cod_empresa,
                                            mr_aviso_rec.val_liquido_item,
                                            mr_aviso_rec.cod_cla_fisc_nf,
                                            mr_aviso_rec.den_item,
                                            mr_aviso_rec.cod_unid_med_nf,
                                            mr_nf_sup.dat_emis_nf,
                                            mr_nf_sup.dat_entrada_nf,
                                            mr_nf_sup.num_nf,
                                            mr_nf_sup.ser_nf,
                                            mr_nf_sup.ssr_nf,
                                            mr_nf_sup.cod_fornecedor,
                                            mr_nf_sup.ies_especie_nf,
                                            mr_w_sup0552_4_it.sequencia, 1) THEN
          RETURN l_ies_situacao, l_conta_array
       END IF
    END IF
 END IF

 IF  m_gerar_os_recb_mat_terc    = 'S'
 AND mr_nf_sup.ies_especie_nf    = 'NFR'
 AND mr_nf_sup.ies_nf_aguard_nfe = 'T' THEN
       IF ate0074_inclusao_os(mr_nf_sup.num_nf,
                              mr_nf_sup.ser_nf,
                              mr_nf_sup.ssr_nf,
                              mr_nf_sup.ies_especie_nf,
                              mr_nf_sup.cod_fornecedor,
                              mr_nf_sup.dat_entrada_nf,
                              mr_nf_sup.num_aviso_rec,
                              'S') THEN
          RETURN l_ies_situacao, l_conta_array
       END IF
 END IF
 #--OS 544109 fim --#

 INITIALIZE l_cod_local_rec, l_ies_contagem  TO NULL
 CALL sup0552_verifica_operacao_recebimento()
      RETURNING l_cod_local_rec, l_ies_contagem

 CALL sup0552_busca_parametros_item(mr_aviso_rec.cod_empresa, mr_aviso_rec.cod_item) RETURNING l_parametros
 IF l_parametros = "S" THEN
    LET l_cod_local_rec = mr_aviso_rec.cod_local_estoq
 END IF

 IF l_cod_local_rec IS NOT NULL THEN
    LET mr_aviso_rec.cod_local_estoq = l_cod_local_rec
 END IF

 IF m_ies_busca_loclib = "S" THEN
    INITIALIZE l_cod_local_rec TO NULL
    CALL sup0552_busca_loclib(mr_aviso_rec.cod_empresa, mr_aviso_rec.cod_item) RETURNING l_cod_local_rec
    IF l_cod_local_rec IS NOT NULL THEN
       LET mr_aviso_rec.cod_local_estoq = l_cod_local_rec
    END IF
 END IF

 #--- seta variaveis para itens com contagem automatica ---#
 IF ((m_ies_cont_insp_aut = "1" OR
      m_ies_cont_insp_aut = "2" OR
      gr_par_estoque.ies_custo_medio = "D") AND
      mr_nf_sup.ies_nf_aguard_nfe <> "7" AND
      l_ies_passou = FALSE) OR
    (l_ies_contagem = "S")  OR
    (l_ies_passou = TRUE AND
     mr_nf_sup.ies_nf_aguard_nfe = "5") THEN

    INITIALIZE  l_ies_item_cont_aut, l_ies_item_insp_aut TO NULL

    CALL sup0552_verifica_cont_insp_automat(l_cod_item,
                                            lr_ordem_sup.*,
                                            lr_item.*)
         RETURNING l_ies_item_cont_aut, l_ies_item_insp_aut

    IF mr_aviso_rec.ies_item_estoq = "S" THEN
       IF l_ies_contagem IS NOT NULL THEN
          IF l_ies_contagem = "S" THEN
             LET l_ies_item_cont_aut = "S"
          ELSE
             LET l_ies_item_cont_aut = "N"
          END IF
       END IF
    END IF

    IF (l_ies_item_cont_aut = "S" OR
        gr_par_estoque.ies_custo_medio = "D") AND
       sup0552_verifica_itens_invent(mr_aviso_rec.cod_empresa) = FALSE THEN
       IF l_ies_item_insp_aut = "S" THEN
          IF l_ies_item_cont_aut = "S" THEN
             LET l_ies_situacao = "E"
             LET mr_aviso_rec.qtd_recebida = mr_aviso_rec.qtd_declarad_nf
          ELSE
             LET l_ies_situacao = "C"
          END IF
       ELSE
          IF l_ies_item_cont_aut = "S" THEN
             LET l_ies_situacao = "I"
             LET mr_aviso_rec.qtd_recebida = mr_aviso_rec.qtd_declarad_nf
          ELSE
             LET l_ies_situacao = "C"
          END IF
       END IF
    ELSE
       LET l_ies_situacao = "C"
    END IF
 END IF

 RETURN l_ies_situacao, l_conta_array

END FUNCTION

#------------------------------------------------#
 FUNCTION sup0552_verifica_operacao_recebimento()
#------------------------------------------------#
 DEFINE l_cod_local_rec  LIKE local.cod_local,
        l_ies_contagem   CHAR(01)

 LET l_cod_local_rec = NULL
 LET l_ies_contagem  = NULL

 IF mr_aviso_rec.ies_item_estoq <> "S" THEN
    RETURN l_cod_local_rec, l_ies_contagem
 END IF


 WHENEVER ERROR CONTINUE
 SELECT estoque_operac_ar.cod_local,
        estoque_operac_ar.ies_contagem_autom
   INTO l_cod_local_rec,
        l_ies_contagem
   FROM estoque_operac_ar
  WHERE estoque_operac_ar.cod_empresa  = mr_aviso_rec_compl.cod_empresa
    AND estoque_operac_ar.cod_operacao = mr_aviso_rec_compl.cod_operacao
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    LET l_cod_local_rec = NULL
    LET l_ies_contagem  = NULL
 END IF

 RETURN l_cod_local_rec, l_ies_contagem

END FUNCTION

#---------------------------------------------------#
 FUNCTION sup0552_busca_parametros_item(l_cod_empresa,l_cod_item)
#---------------------------------------------------#
 DEFINE l_cod_empresa  LIKE empresa.cod_empresa,
        l_cod_item     LIKE item.cod_item,
        l_parametro    CHAR(01)

 INITIALIZE l_parametro TO NULL

 SELECT item_parametro.parametros[17]
   INTO l_parametro
   FROM item_parametro
  WHERE item_parametro.cod_empresa = l_cod_empresa
    AND item_parametro.cod_item    = l_cod_item

 RETURN l_parametro

END FUNCTION

#-------------------------------------------#
 FUNCTION sup0552_busca_loclib(l_cod_empresa, l_cod_item)
#-------------------------------------------#
 DEFINE l_cod_empresa     LIKE empresa.cod_empresa,
        l_cod_item        LIKE item.cod_item,
        l_ies_est_fifo    CHAR(01),
        sql_stmt          CHAR(200),
        l_cod_local_lib   LIKE estoque_lote.cod_local,
        l_num_lote_lib    LIKE estoque_lote.num_lote

 SELECT par_sup_pad.par_ies
   INTO l_ies_est_fifo
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = l_cod_empresa
    AND par_sup_pad.cod_parametro = "ies_baixa_estoq_fifo"
 IF sqlca.sqlcode <> 0   OR
    l_ies_est_fifo = " " OR
    l_ies_est_fifo IS NULL THEN
    LET l_ies_est_fifo = "N"
 END IF

 LET sql_stmt = " SELECT cod_local, num_lote ",
                "   FROM estoque_lote ",
                "  WHERE cod_empresa  = """,l_cod_empresa,""" ",
                "    AND cod_item     = """,l_cod_item,""" ",
                "    AND ies_situa_qtd= ""L"" "

 IF l_ies_est_fifo = "L" THEN
    LET sql_stmt = sql_stmt CLIPPED,
             " ORDER BY num_lote, cod_local "
 ELSE
    LET sql_stmt = sql_stmt CLIPPED,
             " ORDER BY cod_local, num_lote "
 END IF

 PREPARE var_query FROM sql_stmt
 DECLARE cq_loclib CURSOR FOR var_query

 FOREACH cq_loclib INTO l_cod_local_lib, l_num_lote_lib
    IF l_cod_local_lib IS NOT NULL THEN
        CLOSE cq_loclib #764215#
       EXIT FOREACH
    END IF
 END FOREACH
  FREE cq_loclib #764215#

 RETURN l_cod_local_lib

END FUNCTION

#----------------------------------------------------------#
 FUNCTION sup0552_verifica_cont_insp_automat(l_cod_item,
                                             lr_ordem_sup,
                                             lr_item)
#----------------------------------------------------------#
 DEFINE l_cod_item          LIKE item.cod_item,
        l_ies_tem_inspecao  CHAR(01),
        l_passou            SMALLINT,
        l_ies_item_cont_aut CHAR(01),
        l_ies_item_insp_aut CHAR(01),
        lr_ordem_sup        RECORD LIKE ordem_sup.*,
        lr_item             RECORD LIKE item.*

 LET l_passou = FALSE

 INITIALIZE l_ies_item_cont_aut,
            l_ies_item_insp_aut,
            l_ies_tem_inspecao TO NULL

  IF mr_aviso_rec.ies_item_estoq = "N" AND
     mr_aviso_rec.num_oc <> 0         THEN
     IF lr_ordem_sup.ies_insp_recebto = "4" THEN
        LET l_ies_item_insp_aut = "S"
     ELSE
        LET l_ies_item_insp_aut = "N"
     END IF
     LET l_passou = TRUE
  END IF

  SELECT item_fornec.ies_tem_inspecao
    INTO l_ies_tem_inspecao
    FROM item_fornec
   WHERE item_fornec.cod_empresa    = lr_ordem_sup.cod_empresa
     AND item_fornec.cod_item       = l_cod_item
     AND item_fornec.cod_fornecedor = mr_nf_sup.cod_fornecedor

  IF sqlca.sqlcode <> 0 THEN
     SELECT item_parametro.parametros[12]
       INTO l_ies_item_cont_aut
       FROM item_parametro
      WHERE item_parametro.cod_empresa = lr_ordem_sup.cod_empresa
        AND item_parametro.cod_item    = l_cod_item

     IF sqlca.sqlcode <> 0 THEN
        IF mr_aviso_rec.ies_item_estoq = "N" AND
           (gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
           (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
            mr_nf_sup.ies_especie_nf = "NFS"))       THEN
           LET l_ies_item_cont_aut = "S"
        ELSE
           IF m_ies_cont_insp_aut = "1" THEN
              LET l_ies_item_cont_aut = "S"
           ELSE
              LET l_ies_item_cont_aut = "N"
           END IF
        END IF

        IF l_passou = FALSE THEN
           LET l_ies_tem_inspecao = NULL
           LET l_ies_tem_inspecao = lr_item.ies_tem_inspecao
           IF l_ies_tem_inspecao = "N" THEN
              LET l_ies_item_insp_aut = "S"
           ELSE
              LET l_ies_item_insp_aut = "N"
           END IF
        END IF
     ELSE
        IF mr_aviso_rec.ies_item_estoq = "N" AND
           (gr_par_sup_compl.ies_conta_ok_n_est = "2"   OR
            (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
             mr_nf_sup.ies_especie_nf = "NFS"))       THEN
           LET l_ies_item_cont_aut = "S"
        ELSE
           IF m_ies_cont_insp_aut = "1" THEN
              IF l_ies_item_cont_aut = "S" THEN
                 LET l_ies_item_cont_aut = "N"
              ELSE
                 LET l_ies_item_cont_aut = "S"
              END IF
           ELSE
              IF m_ies_cont_insp_aut = "2" THEN
                 IF l_ies_item_cont_aut = "S" THEN
                    LET l_ies_item_cont_aut = "S"
                 ELSE
                    LET l_ies_item_cont_aut = "N"
                 END IF
              ELSE
                 LET l_ies_item_cont_aut = "N"
              END IF
           END IF
        END IF

        IF l_passou = FALSE THEN
           LET l_ies_tem_inspecao = NULL
           LET l_ies_tem_inspecao = lr_item.ies_tem_inspecao
           IF l_ies_tem_inspecao = "N" THEN
              LET l_ies_item_insp_aut = "S"
           ELSE
              LET l_ies_item_insp_aut = "N"
           END IF
        END IF
     END IF

  ELSE

     CASE l_ies_tem_inspecao
        WHEN "S"
           IF l_passou = FALSE THEN
              LET l_ies_item_insp_aut = "N"
           END IF

           SELECT item_parametro.parametros[12]
             INTO l_ies_item_cont_aut
             FROM item_parametro
            WHERE item_parametro.cod_empresa = mr_nf_sup.cod_empresa
              AND item_parametro.cod_item    = l_cod_item

           IF sqlca.sqlcode <> 0 THEN
              IF mr_aviso_rec.ies_item_estoq = "N"  AND
                 (gr_par_sup_compl.ies_conta_ok_n_est = "2"   OR
                  (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                   mr_nf_sup.ies_especie_nf = "NFS"))       THEN
                 LET l_ies_item_cont_aut = "S"
              ELSE
                 IF m_ies_cont_insp_aut = "1" THEN
                    LET l_ies_item_cont_aut = "S"
                 ELSE
                    LET l_ies_item_cont_aut = "N"
                 END IF
              END IF
           ELSE
              IF mr_aviso_rec.ies_item_estoq = "N"  AND
                 (gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
                  (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                   mr_nf_sup.ies_especie_nf = "NFS"))       THEN
                 LET l_ies_item_cont_aut = "S"
              ELSE
                 IF m_ies_cont_insp_aut = "1" THEN
                    IF l_ies_item_cont_aut = "S" THEN
                       LET l_ies_item_cont_aut = "N"
                    ELSE
                       LET l_ies_item_cont_aut = "S"
                    END IF
                 ELSE
                    IF m_ies_cont_insp_aut = "2" THEN
                       IF l_ies_item_cont_aut = "S" THEN
                          LET l_ies_item_cont_aut = "S"
                       ELSE
                          LET l_ies_item_cont_aut = "N"
                       END IF
                    ELSE
                       LET l_ies_item_cont_aut = "N"
                    END IF
                 END IF
              END IF
           END IF

        WHEN "N"
           IF l_passou = FALSE THEN
              LET l_ies_item_insp_aut = "S"
           END IF

           SELECT item_parametro.parametros[12]
             INTO l_ies_item_cont_aut
             FROM item_parametro
            WHERE item_parametro.cod_empresa = lr_ordem_sup.cod_empresa
              AND item_parametro.cod_item    = l_cod_item

           IF sqlca.sqlcode <> 0 THEN
              IF mr_aviso_rec.ies_item_estoq = "N"    AND
                 (gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
                  (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                   mr_nf_sup.ies_especie_nf = "NFS"))       THEN
                 LET l_ies_item_cont_aut = "S"
              ELSE
                 IF m_ies_cont_insp_aut = "1" THEN
                    LET l_ies_item_cont_aut = "S"
                 ELSE
                    LET l_ies_item_cont_aut = "N"
                 END IF
              END IF
           ELSE
              IF mr_aviso_rec.ies_item_estoq = "N"    AND
                 (gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
                  (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                   mr_nf_sup.ies_especie_nf = "NFS"))       THEN
                 LET l_ies_item_cont_aut = "S"
              ELSE
                 IF m_ies_cont_insp_aut = "1" THEN
                    IF l_ies_item_cont_aut = "S" THEN
                       LET l_ies_item_cont_aut = "N"
                    ELSE
                       LET l_ies_item_cont_aut = "S"
                    END IF
                 ELSE
                    IF m_ies_cont_insp_aut = "2" THEN
                       IF l_ies_item_cont_aut = "S" THEN
                          LET l_ies_item_cont_aut = "S"
                       ELSE
                          LET l_ies_item_cont_aut = "N"
                       END IF
                    ELSE
                       LET l_ies_item_cont_aut = "N"
                    END IF
                 END IF
              END IF
           END IF

        WHEN "1"
           LET l_ies_item_cont_aut = "N"
           IF l_passou = FALSE THEN
              LET l_ies_item_insp_aut = "N"
           END IF
           IF mr_aviso_rec.ies_item_estoq = "N"     AND
              (gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
               (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                mr_nf_sup.ies_especie_nf = "NFS"))       THEN
              LET l_ies_item_cont_aut = "S"
           END IF

        WHEN "2"
           LET l_ies_item_cont_aut = "N"
           IF l_passou = FALSE THEN
              LET l_ies_item_insp_aut = "S"
           END IF
           IF mr_aviso_rec.ies_item_estoq = "N"     AND
              (gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
               (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                mr_nf_sup.ies_especie_nf = "NFS"))       THEN
              LET l_ies_item_cont_aut = "S"
           END IF

        WHEN "3"
           LET l_ies_item_cont_aut = "S"
           IF l_passou = FALSE THEN
              LET l_ies_item_insp_aut = "N"
           END IF
           IF mr_aviso_rec.ies_item_estoq = "N"          AND
              (gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
               (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                mr_nf_sup.ies_especie_nf = "NFS"))       THEN
              LET l_ies_item_cont_aut = "S"
           END IF

        WHEN "4"
           LET l_ies_item_cont_aut = "S"
           IF l_passou = FALSE THEN
              LET l_ies_item_insp_aut = "S"
           END IF
           IF mr_aviso_rec.ies_item_estoq = "N"          AND
              (gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
               (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                mr_nf_sup.ies_especie_nf = "NFS"))       THEN
              LET l_ies_item_cont_aut = "S"
           END IF

        OTHERWISE
           LET l_ies_item_cont_aut = "N"
           IF l_passou = FALSE THEN
              LET l_ies_item_insp_aut = "N"
           END IF
           IF mr_aviso_rec.ies_item_estoq = "N"         AND
              (gr_par_sup_compl.ies_conta_ok_n_est = "2" OR
               (gr_par_sup_compl.ies_conta_ok_n_est = "3" AND
                mr_nf_sup.ies_especie_nf = "NFS"))       THEN
              LET l_ies_item_cont_aut = "S"
           END IF

     END CASE

  END IF

 RETURN l_ies_item_cont_aut, l_ies_item_insp_aut

END FUNCTION


#--------------------------------------------------------#
 FUNCTION sup0552_busca_ies_liberacao_insp(l_cod_item,
                                           lr_ordem_sup,
                                           lr_item)
#--------------------------------------------------------#
 DEFINE l_cod_item          LIKE item.cod_item,
        l_ies_item_cont_aut CHAR(01),
        l_ies_item_insp_aut CHAR(01),
        l_ies_lib_insp      CHAR(01),
        lr_ordem_sup        RECORD LIKE ordem_sup.*,
        lr_item             RECORD LIKE item.*

 INITIALIZE  l_ies_item_cont_aut, l_ies_item_insp_aut, l_ies_lib_insp TO NULL

 CALL sup0552_verifica_cont_insp_automat(l_cod_item,
                                         lr_ordem_sup.*,
                                         lr_item.*)
      RETURNING l_ies_item_cont_aut, l_ies_item_insp_aut

 LET l_ies_lib_insp = l_ies_item_insp_aut

 RETURN l_ies_lib_insp

END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_verifica_itens_invent(l_cod_empresa)
#----------------------------------------#
 DEFINE l_cod_empresa LIKE empresa.cod_empresa,
        l_contador    SMALLINT

 LET l_contador = NULL
 SELECT COUNT(*)
   INTO l_contador
   FROM itens_invent
  WHERE itens_invent.cod_empresa = l_cod_empresa
    AND itens_invent.cod_item    = mr_aviso_rec.cod_item
 IF l_contador > 0 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

END FUNCTION

#----------------------------------------------------------------------------------#
 REPORT sup0552_relat_consistencia(mr_consistencia, l_is_cliente55,l_is_cliente357)
#----------------------------------------------------------------------------------#
 DEFINE mr_consistencia   RECORD
                          nota_fiscal       DECIMAL(7,0),
                          serie_nota_fiscal CHAR(03),
                          subserie_nf       DECIMAL(2,0),
                          espc_nota_fiscal  CHAR(03),
                          fornecedor        CHAR(15),
                          sequencia         DECIMAL(3,0),
                          txt_consistencia  CHAR(59),
                          arquivo           CHAR(100),
                          comprador         CHAR(08) #CHA786325
                          END RECORD

 DEFINE l_val_frete       LIKE frete_sup.val_frete,
        l_val_icms        LIKE frete_sup.val_tot_icms_frt_d,
        l_cidade          CHAR(13),
        l_dat_emis        LIKE frete_sup.dat_emis_conhec

 DEFINE l_den_empresa  LIKE empresa.den_empresa,
        l_last_row     SMALLINT,
        l_is_cliente55 SMALLINT,
        l_is_cliente357 SMALLINT

 OUTPUT LEFT   MARGIN  0
        TOP    MARGIN  0
        BOTTOM MARGIN  1

{
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
SUP0552          CONSISTENCIAS NA IMPORTACAO DE NOTAS FISCAIS           FL. ###&
                                         EXTRAIDO EM DD/MM/YYYY AS HH:MM:SS HRS.

NUM.NF S/SS ESP FORNECEDOR      SEQ CONSISTENCIA
------ ---- --- --------------- --- --------------------------------------------
999999 9/99 XXX XXXXXXXXXXXXXXX 999 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

#--- Relatório 2
NUM.NF S/SS ESP FORNECEDOR                                         SEQ CONSISTENCIA
------ ---- --- -------------------------------------------------- --- --------------------------------------------
999999 9/99 XXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 999 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

* * * ULTIMA FOLHA * * *
}
 FORMAT
 PAGE HEADER
      #PRINT log500_determina_cpp(80) CLIPPED;

     #CH786325
      IF m_lista_classif_descr_fornecedor = "N" THEN
         PRINT  log5211_retorna_configuracao(PAGENO,66,98) CLIPPED
      ELSE
         PRINT  log5211_retorna_configuracao(PAGENO,66,115) CLIPPED
      END IF
     #--------

      LET l_den_empresa = NULL
      SELECT empresa.den_empresa INTO l_den_empresa
        FROM empresa
       WHERE empresa.cod_empresa = p_cod_empresa
      WHENEVER ERROR STOP

      IF sqlca.sqlcode <> 0 THEN
         INITIALIZE l_den_empresa TO NULL
      END IF

      IF mr_consistencia.espc_nota_fiscal = "CON"
      OR mr_consistencia.espc_nota_fiscal = "COV" THEN
         IF l_is_cliente55 = TRUE OR l_is_cliente357 = TRUE THEN
            PRINT  log5211_retorna_configuracao(PAGENO,66,146) CLIPPED
            PRINT COLUMN 001, l_den_empresa
            PRINT COLUMN 001, "SUP0552                 CONSISTENCIAS NA IMPORTACAO DE NOTAS FISCAIS",
                  COLUMN 139, "FL. ",pageno USING "###&"
            PRINT COLUMN 108, "EXTRAIDO EM ", today, " AS ", time, " HRS."

         ELSE
            PRINT  log5211_retorna_configuracao(PAGENO,66,98) CLIPPED
            PRINT COLUMN 001, l_den_empresa
            PRINT COLUMN 001, "SUP0552                 CONSISTENCIAS NA IMPORTACAO DE NOTAS FISCAIS",
                  COLUMN 090, "FL. ",pageno USING "###&"
            PRINT COLUMN 060, "EXTRAIDO EM ", today, " AS ", time, " HRS."

         END IF
      ELSE
         PRINT  log5211_retorna_configuracao(PAGENO,66,98) CLIPPED
         PRINT COLUMN 001, l_den_empresa
         PRINT COLUMN 001, "SUP0552                 CONSISTENCIAS NA IMPORTACAO DE NOTAS FISCAIS",
               COLUMN 090, "FL. ",pageno USING "###&"
         PRINT COLUMN 060, "EXTRAIDO EM ", today, " AS ", time, " HRS."

      END IF
      SKIP 1 LINE

      IF mr_consistencia.espc_nota_fiscal = "CON"
      OR mr_consistencia.espc_nota_fiscal = "COV" THEN
         IF l_is_cliente55 = TRUE OR l_is_cliente357 = TRUE THEN
            PRINT COLUMN 001, "NUM.NF  S  /SS ESP FORNECEDOR      SEQ VAL FRETE   VAL ICMS    CIDADE        DATA EMIS  CONSISTENCIA "
            PRINT COLUMN 001, "------- ------ --- --------------- --- ----------- ----------- ------------- ---------- -----------------------------------------------------------"
         ELSE
           #CH786325
            IF m_lista_classif_descr_fornecedor = "N" THEN
               PRINT COLUMN 001, "NUM.NF  S  /SS ESP FORNECEDOR      SEQ CONSISTENCIA "
               PRINT COLUMN 001, "------- ------ --- --------------- --- -----------------------------------------------------------"
            ELSE
               PRINT COLUMN 001, "NUM.NF  S  /SS ESP FORNECEDOR                                         SEQ CONSISTENCIA"
               PRINT COLUMN 001, "------- ------ --- -------------------------------------------------- --- --------------------------------------------"
            END IF
           #--------
         END IF
      ELSE
        #CH786325
         IF m_lista_classif_descr_fornecedor = "N" THEN
            PRINT COLUMN 001, "NUM.NF  S  /SS ESP FORNECEDOR      SEQ CONSISTENCIA "
            PRINT COLUMN 001, "------- ------ --- --------------- --- -----------------------------------------------------------"
         ELSE
            PRINT COLUMN 001, "NUM.NF  S  /SS ESP FORNECEDOR                                         SEQ CONSISTENCIA"
            PRINT COLUMN 001, "------- ------ --- -------------------------------------------------- --- -----------------------------------------------------------"
         END IF
        #--------
      END IF

 ON EVERY ROW
    IF mr_consistencia.espc_nota_fiscal = "CON"
    OR mr_consistencia.espc_nota_fiscal = "COV" THEN
       IF l_is_cliente55 = TRUE OR l_is_cliente357 = TRUE THEN
          WHENEVER ERROR CONTINUE
          SELECT val_frete,
                 val_tot_icms_frt_d,
                 dat_emis_conhec
            INTO l_val_frete,
                 l_val_icms,
                 l_dat_emis
            FROM frete_sup
           WHERE cod_empresa  = p_frete_sup.cod_empresa
             AND num_conhec   = mr_consistencia.nota_fiscal
             AND cod_transpor = mr_consistencia.fornecedor
             AND ser_conhec   = mr_consistencia.serie_nota_fiscal
             AND ssr_conhec   = mr_consistencia.subserie_nf
          WHENEVER ERROR STOP

          IF sqlca.sqlcode <> 0 THEN
             INITIALIZE l_val_frete,
                        l_val_icms,
                        l_dat_emis TO NULL
          END IF

          WHENEVER ERROR CONTINUE
          SELECT cidades.den_cidade
            INTO l_cidade
            FROM cidades, frete_sup_compl
           WHERE frete_sup_compl.cod_empresa  = p_frete_sup.cod_empresa
             AND frete_sup_compl.num_conhec   = mr_consistencia.nota_fiscal
             AND frete_sup_compl.ser_conhec   = mr_consistencia.serie_nota_fiscal
             AND frete_sup_compl.ssr_conhec   = mr_consistencia.subserie_nf
             AND frete_sup_compl.cod_transpor = mr_consistencia.fornecedor
             AND frete_sup_compl.cod_cidade   = cidades.cod_cidade
          WHENEVER ERROR STOP

          IF sqlca.sqlcode <> 0 THEN
             INITIALIZE l_cidade TO NULL
          END IF

          PRINT COLUMN 001, mr_consistencia.nota_fiscal USING "######&",
                COLUMN 009, mr_consistencia.serie_nota_fiscal,
                COLUMN 012, "/",
                COLUMN 013, mr_consistencia.subserie_nf USING "#&",
                COLUMN 016, mr_consistencia.espc_nota_fiscal,
                COLUMN 020, mr_consistencia.fornecedor,
                COLUMN 036, mr_consistencia.sequencia USING "##&",
                COLUMN 040, l_val_frete USING "#######&.&&",
                COLUMN 052, l_val_icms  USING "#######&.&&",
                COLUMN 064, l_cidade CLIPPED,
                COLUMN 078, l_dat_emis,
                COLUMN 089, mr_consistencia.txt_consistencia
       ELSE
          PRINT COLUMN 001, mr_consistencia.nota_fiscal USING "######&",
                COLUMN 009, mr_consistencia.serie_nota_fiscal,
                COLUMN 012, "/",
                COLUMN 013, mr_consistencia.subserie_nf USING "#&",
                COLUMN 016, mr_consistencia.espc_nota_fiscal,
                COLUMN 020, mr_consistencia.fornecedor,
                COLUMN 036, mr_consistencia.sequencia USING "##&",
                COLUMN 040, mr_consistencia.txt_consistencia
       END IF
    ELSE
      #CH786325
       IF m_lista_classif_descr_fornecedor = "N" THEN
          PRINT COLUMN 001, mr_consistencia.nota_fiscal USING "######&",
                COLUMN 009, mr_consistencia.serie_nota_fiscal,
                COLUMN 012, "/",
                COLUMN 013, mr_consistencia.subserie_nf USING "#&",
                COLUMN 016, mr_consistencia.espc_nota_fiscal,
                COLUMN 020, mr_consistencia.fornecedor,
                COLUMN 036, mr_consistencia.sequencia USING "##&",
                COLUMN 040, mr_consistencia.txt_consistencia
       ELSE
          WHENEVER ERROR CONTINUE
            SELECT raz_social
              INTO m_raz_social
              FROM fornecedor
             WHERE cod_fornecedor = mr_consistencia.fornecedor
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql('SELECT','FORNECEDOR')
          END IF
          PRINT COLUMN 001, mr_consistencia.nota_fiscal USING "######&",
                COLUMN 009, mr_consistencia.serie_nota_fiscal,
                COLUMN 012, "/",
                COLUMN 013, mr_consistencia.subserie_nf USING "#&",
                COLUMN 016, mr_consistencia.espc_nota_fiscal,
                COLUMN 020, m_raz_social,
                COLUMN 071, mr_consistencia.sequencia USING "##&",
                COLUMN 075, mr_consistencia.txt_consistencia
       END IF
      #--------
    END IF

 ON LAST ROW
    LET l_last_row = TRUE

 PAGE TRAILER
   IF  l_last_row THEN
       PRINT "* * * ULTIMA FOLHA * * *"
   ELSE
       PRINT " "
   END IF

END REPORT

#-------------------------------------#
 REPORT sup0552_relat_nf_importadas(mr_importados)
#-------------------------------------#
 DEFINE mr_importados     RECORD
                          tipo_registro     CHAR(1),
                          nota_fiscal       DECIMAL(7,0),
                          serie_nota_fiscal CHAR(03),
                          subserie_nf       DECIMAL(2,0),
                          espc_nota_fiscal  CHAR(03),
                          fornecedor        CHAR(15),
                          num_nff_relac     DECIMAL(6,0),
                          arquivo           CHAR(100)
                          END RECORD

 DEFINE l_den_empresa  LIKE empresa.den_empresa,
        l_last_row     SMALLINT

 OUTPUT LEFT   MARGIN  0
        TOP    MARGIN  0
        BOTTOM MARGIN  1

{
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
SUP0552                     NOTAS FISCAIS IMPORTADAS                    FL. ###&
                                         EXTRAIDO EM DD/MM/YYYY AS HH:MM:SS HRS.

TIPO REGISTRO    NUM.NF S  /SS ESP FORNECEDOR      NOTA RELAC
---------------- ------ ------ --- --------------- ----------
NOTA/FRETE       999999 9/99   XXX XXXXXXXXXXXXXXX
RELAC.FR VENDxNF 999999 9/99   CON XXXXXXXXXXXXXXX    9999999
RELAC.FR COMPxNF 999999 9/99   CON XXXXXXXXXXXXXXX AR:9999999

* * * ULTIMA FOLHA * * *
}
 FORMAT
 PAGE HEADER
     #PRINT log500_determina_cpp(80) CLIPPED;
      PRINT  log5211_retorna_configuracao(PAGENO,66,98) CLIPPED

      LET l_den_empresa = NULL
      SELECT empresa.den_empresa INTO l_den_empresa
        FROM empresa
       WHERE empresa.cod_empresa = p_cod_empresa

      PRINT COLUMN 001, l_den_empresa
      PRINT COLUMN 001, "SUP0552                           NOTAS FISCAIS IMPORTADAS",
            COLUMN 080, "FL. ",pageno USING "###&"
      PRINT COLUMN 055, "EXTRAIDO EM ", today, " AS ", time, " HRS."

      SKIP 1 LINE

      PRINT COLUMN 001, "TIPO REGISTRO    NUM.NF  S  /SS ESP FORNECEDOR      NOTA RELAC"
      PRINT COLUMN 001, "---------------- ------- ------ --- --------------- ----------"

 ON EVERY ROW
    IF mr_importados.tipo_registro = "M" THEN
       PRINT COLUMN 001, "NOTA/FRETE";
    ELSE
       PRINT COLUMN 001, "RELAC.FR VENDxNF";
    END IF
    PRINT COLUMN 018, mr_importados.nota_fiscal USING "######&",
          COLUMN 026, mr_importados.serie_nota_fiscal,
          COLUMN 029, "/",
          COLUMN 030, mr_importados.subserie_nf USING "#&",
          COLUMN 033, mr_importados.espc_nota_fiscal,
          COLUMN 037, mr_importados.fornecedor;
    IF mr_importados.tipo_registro = "R" THEN
       PRINT COLUMN 053, mr_importados.num_nff_relac
    ELSE
       IF mr_importados.tipo_registro = "X" THEN
          PRINT COLUMN 052, "AR:",mr_importados.num_nff_relac USING "######&"
       ELSE
          PRINT
       END IF
    END IF

 ON LAST ROW
    LET l_last_row = TRUE

 PAGE TRAILER
   IF  l_last_row THEN
       PRINT "* * * ULTIMA FOLHA * * *"
   ELSE
       PRINT " "
   END IF

END REPORT

#------------------------------------#
 FUNCTION sup0552_busca_prim_digito()
#------------------------------------#
 DEFINE l_pais_emp    CHAR(05)
 DEFINE l_pais_for    CHAR(05)
 DEFINE l_prim_digito CHAR(01)
 DEFINE l_uf_nf       LIKE uni_feder.cod_uni_feder
 DEFINE lr_empresa    RECORD LIKE empresa.*

 INITIALIZE l_prim_digito ,
            l_pais_for,
            l_pais_emp,
            l_uf_nf,
            lr_empresa.* TO NULL

 SELECT empresa.*
   INTO lr_empresa.*
   FROM empresa
  WHERE empresa.cod_empresa = mr_w_sup0552_4.empresa

 CALL sup0552_busca_uni_feder_frete() RETURNING l_uf_nf

 IF l_uf_nf = lr_empresa.uni_feder THEN
    LET l_prim_digito = "1"
 END IF

 SELECT uni_feder.cod_pais
   INTO l_pais_emp
   FROM uni_feder
  WHERE uni_feder.cod_uni_feder = lr_empresa.uni_feder

 SELECT uni_feder.cod_pais
   INTO l_pais_for
   FROM uni_feder
  WHERE uni_feder.cod_uni_feder = l_uf_nf

 IF l_uf_nf <> lr_empresa.uni_feder AND
    l_pais_for = l_pais_emp        THEN
    LET l_prim_digito = "2"
 END IF

 IF l_pais_for <> l_pais_emp THEN
    LET l_prim_digito = "3"
 END IF

 RETURN l_prim_digito

END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_busca_uni_feder_frete()
#----------------------------------------#
 DEFINE l_cod_uf_ret  LIKE uni_feder.cod_uni_feder

 LET l_cod_uf_ret  = NULL
 WHENEVER ERROR CONTINUE
 SELECT cidades.cod_uni_feder
   INTO l_cod_uf_ret
   FROM fornecedor, cidades
  WHERE fornecedor.cod_fornecedor   = mr_w_sup0552_4.fornecedor
    AND cidades.cod_cidade          = fornecedor.cod_cidade
 WHENEVER ERROR STOP
 IF l_cod_uf_ret IS NULL OR
    sqlca.sqlcode <> 0 THEN
    LET l_cod_uf_ret  = "**"
 END IF

 RETURN l_cod_uf_ret

 END FUNCTION

#-------------------------------------#
 FUNCTION sup0552_divergencia_transp()
#-------------------------------------#
 DEFINE lr_pedido_sup      RECORD LIKE pedido_sup.*

 WHENEVER ERROR CONTINUE
 DELETE FROM ar_diverg
  WHERE ar_diverg.cod_empresa    = mr_aviso_rec.cod_empresa
    AND ar_diverg.num_aviso_rec  = mr_aviso_rec.num_aviso_rec
    AND ar_diverg.num_seq        = mr_aviso_rec.num_seq
    AND ar_diverg.ies_tip_diverg = "03"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","AR_DIVERG")
 END IF

 INITIALIZE lr_pedido_sup.* TO NULL

 WHENEVER ERROR CONTINUE
 SELECT pedido_sup.cod_empresa,
        pedido_sup.num_pedido,
        pedido_sup.num_versao,
        pedido_sup.ies_versao_atual,
        pedido_sup.ies_situa_ped,
        pedido_sup.dat_emis,
        pedido_sup.dat_liquidac,
        pedido_sup.cod_fornecedor,
        pedido_sup.cod_moeda,
        pedido_sup.cnd_pgto,
        pedido_sup.cod_mod_embar,
        pedido_sup.num_texto_loc_entr,
        pedido_sup.num_texto_loc_cobr,
        pedido_sup.cod_transpor,
        pedido_sup.val_tot_ped,
        pedido_sup.cod_comprador,
        pedido_sup.ies_impresso,
        pedido_sup.ies_ped_automatic
   INTO lr_pedido_sup.cod_empresa,
        lr_pedido_sup.num_pedido,
        lr_pedido_sup.num_versao,
        lr_pedido_sup.ies_versao_atual,
        lr_pedido_sup.ies_situa_ped,
        lr_pedido_sup.dat_emis,
        lr_pedido_sup.dat_liquidac,
        lr_pedido_sup.cod_fornecedor,
        lr_pedido_sup.cod_moeda,
        lr_pedido_sup.cnd_pgto,
        lr_pedido_sup.cod_mod_embar,
        lr_pedido_sup.num_texto_loc_entr,
        lr_pedido_sup.num_texto_loc_cobr,
        lr_pedido_sup.cod_transpor,
        lr_pedido_sup.val_tot_ped,
        lr_pedido_sup.cod_comprador,
        lr_pedido_sup.ies_impresso,
        lr_pedido_sup.ies_ped_automatic
   FROM pedido_sup
  WHERE pedido_sup.cod_empresa      = mr_aviso_rec.cod_empresa
    AND pedido_sup.num_pedido       = mr_aviso_rec.num_pedido
    AND pedido_sup.ies_versao_atual = "S"
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 0 THEN
    IF lr_pedido_sup.cod_transpor IS NOT NULL AND
       lr_pedido_sup.cod_transpor <> " " THEN
       IF mr_frete_sup.cod_transpor <> lr_pedido_sup.cod_transpor AND
          gr_par_sup.ies_diverg_trans_c = "S" THEN
          LET mr_ar_diverg.cod_empresa       = mr_aviso_rec.cod_empresa
          LET mr_ar_diverg.num_aviso_rec     = mr_aviso_rec.num_aviso_rec
          LET mr_ar_diverg.num_seq           = mr_aviso_rec.num_seq
          LET mr_ar_diverg.num_pedido        = mr_aviso_rec.num_pedido
          LET mr_ar_diverg.num_oc            = mr_aviso_rec.num_oc
          LET mr_ar_diverg.num_prog_entrega  = 0
          LET mr_ar_diverg.ies_tip_diverg    = "03"
          LET mr_ar_diverg.ies_bloq_pgto     = "S"
          LET mr_ar_diverg.num_versao_pedido = 0
          WHENEVER ERROR CONTINUE
          INSERT INTO ar_diverg(cod_empresa,
                                num_aviso_rec,
                                num_seq,
                                num_pedido,
                                num_oc,
                                num_prog_entrega,
                                ies_tip_diverg,
                                ies_bloq_pgto,
                                num_versao_pedido)

           VALUES (mr_ar_diverg.cod_empresa,
                   mr_ar_diverg.num_aviso_rec,
                   mr_ar_diverg.num_seq,
                   mr_ar_diverg.num_pedido,
                   mr_ar_diverg.num_oc,
                   mr_ar_diverg.num_prog_entrega,
                   mr_ar_diverg.ies_tip_diverg,
                   mr_ar_diverg.ies_bloq_pgto,
                   mr_ar_diverg.num_versao_pedido)
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET m_houve_erro = TRUE
             LET m_status_arquivo = 1
          END IF
       END IF
    END IF
 END IF

 END FUNCTION

#-----------------------------------------------------------------#
 FUNCTION sup0552_verifica_fechamento(l_data,l_conta_array, l_tipo,l_nova_msg)#578942
#-----------------------------------------------------------------#
 DEFINE l_data_par_sup  CHAR(10),
        l_dia           CHAR(2),
        l_mes           CHAR(2),
        l_ano           CHAR(4),
        l_dia_dec       DECIMAL(2,0),
        l_mes_dec       DECIMAL(2,0),
        l_ano_dec       DECIMAL(4,0),
        l_data          DATE,
        l_tipo          CHAR(05),
        #--inicio--OS 578942 #
        l_nova_msg           SMALLINT,
        l_empresa            CHAR(02),
        l_nota_fiscal        DECIMAL(7,0),
        l_serie_nota_fiscal  CHAR(03),
        l_subserie_nf        DECIMAL(2,0),
        l_fornecedor         CHAR(15)
        #---fim----OS 578942 #

 DEFINE l_dat_fech_ipi  LIKE par_sup.dat_fecha_ult_ipi,
        l_conta_array   SMALLINT

 INITIALIZE l_data_par_sup,l_dia,l_mes,l_ano,l_dia_dec TO NULL
 INITIALIZE l_mes_dec, l_ano_dec      TO NULL

 LET l_dat_fech_ipi = gr_par_sup.dat_fecha_ult_ipi
 LET l_dia = DAY(gr_par_sup.dat_fecha_ultimo)
 LET l_mes = MONTH(gr_par_sup.dat_fecha_ultimo)
 LET l_ano = YEAR(gr_par_sup.dat_fecha_ultimo)

 IF l_data <= gr_par_sup.dat_fecha_ultimo THEN
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
   #--inicio--OS 578942 #
    IF l_nova_msg = FALSE THEN
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Mes anterior ja encerrado."
    ELSE
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Mes anterior ja encerrado. NF ", mr_relac_nff.num_nff_relac USING "<<<<<<&"," nao relac."
    END IF
    #---fim----OS 578942 #
    RETURN FALSE
 END IF

 IF l_data <= l_dat_fech_ipi THEN
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    #--inicio--OS 578942 #
    IF l_nova_msg = FALSE THEN
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Periodo de fechamento do IPI ja encerrado."
    ELSE
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Periodo de fechamento do IPI encerrado. NF ", mr_relac_nff.num_nff_relac USING "<<<<<<&"," nao relac."
    END IF
    #---fim----OS 578942 #
    RETURN FALSE
 END IF

 IF l_tipo = "AR" THEN
    IF sup1473_documento_em_periodo_fiscal_fechado(mr_nf_sup.cod_empresa,
                                                   mr_nf_sup.num_aviso_rec,
                                                   l_data,
                                                   "","","","","","AR") THEN
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
           "Período fiscal de entradas já encerrado."
       RETURN FALSE
    END IF
 ELSE
    IF sup1473_documento_em_periodo_fiscal_fechado(mr_frete_sup.cod_empresa, "", "",
                                                   mr_frete_sup.num_conhec,
                                                   mr_frete_sup.ser_conhec,
                                                   mr_frete_sup.ssr_conhec,
                                                   mr_frete_sup.cod_transpor,
                                                   l_data,"FRETE") THEN
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       #--inicio--OS 578942 #
       IF l_nova_msg = FALSE THEN
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
              "Período fiscal de entradas já encerrado."
       ELSE
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Período fiscal de entradas já encerrado. NF ", mr_relac_nff.num_nff_relac USING "<<<<<<&"," nao relac."
       END IF
       #---fim----OS 578942 #
       RETURN FALSE
    END IF
 END IF

 RETURN TRUE

 END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_mostra_erro_aviso_rec()
#----------------------------------------#
 DEFINE l_texto            CHAR(75),
        l_ind              SMALLINT

 IF m_arg = FALSE THEN
    OPEN WINDOW w_erro AT 02,02 WITH 21 ROWS, 78 COLUMNS
         ATTRIBUTE(BORDER, PROMPT LINE LAST, MESSAGE LINE LAST)

     DISPLAY "                             A T E N Ç Ã O  ! ! !                             " AT 01,01 ATTRIBUTES(REVERSE)
    DISPLAY "                                                                 Página: 01/06" AT 02,01

     DISPLAY "Problema INCLUSÃO tabela AVISO_REC. Sqlca.Sqlcode: ",sqlca.sqlcode AT 03,02

    IF mr_aviso_rec.cod_empresa IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_empresa...........: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_empresa...........: ",mr_aviso_rec.cod_empresa AT 05,02
    END IF
    IF mr_aviso_rec.cod_empresa_estab IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_empresa_estab.....: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_empresa_estab.....: ",mr_aviso_rec.cod_empresa_estab AT 06,02
    END IF
    IF mr_aviso_rec.num_aviso_rec IS NULL THEN
        DISPLAY "mr_aviso_rec.num_aviso_rec.........: <NULO>" AT 07,02
    ELSE
        DISPLAY "mr_aviso_rec.num_aviso_rec.........: ",mr_aviso_rec.num_aviso_rec AT 07,02
    END IF
    IF mr_aviso_rec.num_seq IS NULL THEN
        DISPLAY "mr_aviso_rec.num_seq...............: <NULO>" AT 08,02
    ELSE
        DISPLAY "mr_aviso_rec.num_seq...............: ",mr_aviso_rec.num_seq AT 08,02
    END IF
    IF mr_aviso_rec.dat_inclusao_seq IS NULL THEN
        DISPLAY "mr_aviso_rec.dat_inclusao_seq......: <NULO>" AT 09,02
    ELSE
        DISPLAY "mr_aviso_rec.dat_inclusao_seq......: ",mr_aviso_rec.dat_inclusao_seq AT 09,02
    END IF
    IF mr_aviso_rec.ies_situa_ar IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_situa_ar..........: <NULO>" AT 10,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_situa_ar..........: ",mr_aviso_rec.ies_situa_ar AT 10,02
    END IF
    IF mr_aviso_rec.ies_incl_almox IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_incl_almox........: <NULO>" AT 11,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_incl_almox........: ",mr_aviso_rec.ies_incl_almox AT 11,02
    END IF
    IF mr_aviso_rec.ies_receb_fiscal IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_receb_fiscal......: <NULO>" AT 12,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_receb_fiscal......: ",mr_aviso_rec.ies_receb_fiscal AT 12,02
    END IF
    IF mr_aviso_rec.ies_liberacao_ar IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_liberacao_ar......: <NULO>" AT 13,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_liberacao_ar......: ",mr_aviso_rec.ies_liberacao_ar AT 13,02
    END IF
    IF mr_aviso_rec.ies_liberacao_cont IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_liberacao_cont....: <NULO>" AT 14,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_liberacao_cont....: ",mr_aviso_rec.ies_liberacao_cont AT 14,02
    END IF
    IF mr_aviso_rec.ies_liberacao_insp IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_liberacao_insp....: <NULO>" AT 15,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_liberacao_insp....: ",mr_aviso_rec.ies_liberacao_insp AT 15,02
    END IF
    IF mr_aviso_rec.ies_diverg_listada IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_diverg_listada....: <NULO>" AT 16,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_diverg_listada....: ",mr_aviso_rec.ies_diverg_listada AT 16,02
    END IF
    IF mr_aviso_rec.ies_item_estoq IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_item_estoq........: <NULO>" AT 17,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_item_estoq........: ",mr_aviso_rec.ies_item_estoq AT 17,02
    END IF
    IF mr_aviso_rec.ies_controle_lote IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_controle_lote.....: <NULO>" AT 18,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_controle_lote.....: ",mr_aviso_rec.ies_controle_lote AT 18,02
    END IF
    IF mr_aviso_rec.cod_comprador IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_comprador.........: <NULO>" AT 19,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_comprador.........: ",mr_aviso_rec.cod_comprador AT 19,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    LET l_texto = " "
    FOR l_ind = 05 TO 19
        DISPLAY l_texto AT l_ind,02
    END FOR

    DISPLAY "                                                                 Página: 02/06" AT 02,01

    IF mr_aviso_rec.num_pedido IS NULL THEN
        DISPLAY "mr_aviso_rec.num_pedido............: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_aviso_rec.num_pedido............: ",mr_aviso_rec.num_pedido AT 05,02
    END IF
    IF mr_aviso_rec.num_oc IS NULL THEN
        DISPLAY "mr_aviso_rec.num_oc................: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_aviso_rec.num_oc................: ",mr_aviso_rec.num_oc AT 06,02
    END IF
    IF mr_aviso_rec.cod_item IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_item..............: <NULO>" AT 07,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_item..............: ",mr_aviso_rec.cod_item AT 07,02
    END IF
    IF mr_aviso_rec.den_item IS NULL THEN
        DISPLAY "mr_aviso_rec.den_item..............: <NULO>" AT 08,02
    ELSE
        DISPLAY "mr_aviso_rec.den_item..............: ",mr_aviso_rec.den_item AT 08,02
    END IF
    IF mr_aviso_rec.cod_cla_fisc IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_cla_fisc..........: <NULO>" AT 09,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_cla_fisc..........: ",mr_aviso_rec.cod_cla_fisc AT 09,02
    END IF
    IF mr_aviso_rec.cod_unid_med_nf IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_unid_med_nf.......: <NULO>" AT 10,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_unid_med_nf.......: ",mr_aviso_rec.cod_unid_med_nf AT 10,02
    END IF
    IF mr_aviso_rec.pre_unit_nf IS NULL THEN
        DISPLAY "mr_aviso_rec.pre_unit_nf...........: <NULO>" AT 11,02
    ELSE
        DISPLAY "mr_aviso_rec.pre_unit_nf...........: ",mr_aviso_rec.pre_unit_nf AT 11,02
    END IF
    IF mr_aviso_rec.val_despesa_aces_i IS NULL THEN
        DISPLAY "mr_aviso_rec.val_despesa_aces_i....: <NULO>" AT 12,02
    ELSE
        DISPLAY "mr_aviso_rec.val_despesa_aces_i....: ",mr_aviso_rec.val_despesa_aces_i AT 12,02
    END IF
    IF mr_aviso_rec.ies_da_bc_ipi IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_da_bc_ipi.........: <NULO>" AT 13,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_da_bc_ipi.........: ",mr_aviso_rec.ies_da_bc_ipi AT 13,02
    END IF
    IF mr_aviso_rec.cod_incid_ipi IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_incid_ipi.........: <NULO>" AT 14,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_incid_ipi.........: ",mr_aviso_rec.cod_incid_ipi AT 14,02
    END IF
    IF mr_aviso_rec.ies_tip_incid_ipi IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_tip_incid_ipi.....: <NULO>" AT 15,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_tip_incid_ipi.....: ",mr_aviso_rec.ies_tip_incid_ipi AT 15,02
    END IF
    IF mr_aviso_rec.pct_direito_cred IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_direito_cred......: <NULO>" AT 16,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_direito_cred......: ",mr_aviso_rec.pct_direito_cred AT 16,02
    END IF
    IF mr_aviso_rec.pct_ipi_declarad IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_ipi_declarad......: <NULO>" AT 17,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_ipi_declarad......: ",mr_aviso_rec.pct_ipi_declarad AT 17,02
    END IF
    IF mr_aviso_rec.pct_ipi_tabela IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_ipi_tabela........: <NULO>" AT 18,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_ipi_tabela........: ",mr_aviso_rec.pct_ipi_tabela AT 18,02
    END IF
    IF mr_aviso_rec.ies_bitributacao IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_bitributacao......: <NULO>" AT 19,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_bitributacao......: ",mr_aviso_rec.ies_bitributacao AT 19,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    LET l_texto = " "
    FOR l_ind = 05 TO 19
        DISPLAY l_texto AT l_ind,02
    END FOR

    DISPLAY "                                                                 Página: 03/06" AT 02,01

    IF mr_aviso_rec.val_base_c_ipi_it IS NULL THEN
        DISPLAY "mr_aviso_rec.val_base_c_ipi_it.....: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_aviso_rec.val_base_c_ipi_it.....: ",mr_aviso_rec.val_base_c_ipi_it AT 05,02
    END IF
    IF mr_aviso_rec.val_base_c_ipi_da IS NULL THEN
        DISPLAY "mr_aviso_rec.val_base_c_ipi_da.....: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_aviso_rec.val_base_c_ipi_da.....: ",mr_aviso_rec.val_base_c_ipi_da AT 06,02
    END IF
    IF mr_aviso_rec.val_ipi_decl_item IS NULL THEN
        DISPLAY "mr_aviso_rec.val_ipi_decl_item.....: <NULO>" AT 07,02
    ELSE
        DISPLAY "mr_aviso_rec.val_ipi_decl_item.....: ",mr_aviso_rec.val_ipi_decl_item AT 07,02
    END IF
    IF mr_aviso_rec.val_ipi_calc_item IS NULL THEN
        DISPLAY "mr_aviso_rec.val_ipi_calc_item.....: <NULO>" AT 08,02
    ELSE
        DISPLAY "mr_aviso_rec.val_ipi_calc_item.....: ",mr_aviso_rec.val_ipi_calc_item AT 08,02
    END IF
    IF mr_aviso_rec.val_ipi_desp_aces IS NULL THEN
        DISPLAY "mr_aviso_rec.val_ipi_desp_aces.....: <NULO>" AT 09,02
    ELSE
        DISPLAY "mr_aviso_rec.val_ipi_desp_aces.....: ",mr_aviso_rec.val_ipi_desp_aces AT 09,02
    END IF
    IF mr_aviso_rec.val_desc_item IS NULL THEN
        DISPLAY "mr_aviso_rec.val_desc_item.........: <NULO>" AT 10,02
    ELSE
        DISPLAY "mr_aviso_rec.val_desc_item.........: ",mr_aviso_rec.val_desc_item AT 10,02
    END IF
    IF mr_aviso_rec.val_liquido_item IS NULL THEN
        DISPLAY "mr_aviso_rec.val_liquido_item......: <NULO>" AT 11,02
    ELSE
        DISPLAY "mr_aviso_rec.val_liquido_item......: ",mr_aviso_rec.val_liquido_item AT 11,02
    END IF
    IF mr_aviso_rec.val_contabil_item IS NULL THEN
        DISPLAY "mr_aviso_rec.val_contabil_item.....: <NULO>" AT 12,02
    ELSE
        DISPLAY "mr_aviso_rec.val_contabil_item.....: ",mr_aviso_rec.val_contabil_item AT 12,02
    END IF
    IF mr_aviso_rec.qtd_declarad_nf IS NULL THEN
        DISPLAY "mr_aviso_rec.qtd_declarad_nf.......: <NULO>" AT 13,02
    ELSE
        DISPLAY "mr_aviso_rec.qtd_declarad_nf.......: ",mr_aviso_rec.qtd_declarad_nf AT 13,02
    END IF
    IF mr_aviso_rec.qtd_recebida IS NULL THEN
        DISPLAY "mr_aviso_rec.qtd_recebida..........: <NULO>" AT 14,02
    ELSE
        DISPLAY "mr_aviso_rec.qtd_recebida..........: ",mr_aviso_rec.qtd_recebida AT 14,02
    END IF
    IF mr_aviso_rec.qtd_devolvid IS NULL THEN
        DISPLAY "mr_aviso_rec.qtd_devolvid..........: <NULO>" AT 15,02
    ELSE
        DISPLAY "mr_aviso_rec.qtd_devolvid..........: ",mr_aviso_rec.qtd_devolvid AT 15,02
    END IF
    IF mr_aviso_rec.dat_devoluc IS NULL THEN
        DISPLAY "mr_aviso_rec.dat_devoluc...........: <NULO>" AT 16,02
    ELSE
        DISPLAY "mr_aviso_rec.dat_devoluc...........: ",mr_aviso_rec.dat_devoluc AT 16,02
    END IF
    IF mr_aviso_rec.val_devoluc IS NULL THEN
        DISPLAY "mr_aviso_rec.val_devoluc...........: <NULO>" AT 17,02
    ELSE
        DISPLAY "mr_aviso_rec.val_devoluc...........: ",mr_aviso_rec.val_devoluc AT 17,02
    END IF
    IF mr_aviso_rec.num_nf_dev IS NULL THEN
        DISPLAY "mr_aviso_rec.num_nf_dev............: <NULO>" AT 18,02
    ELSE
        DISPLAY "mr_aviso_rec.num_nf_dev............: ",mr_aviso_rec.num_nf_dev AT 18,02
    END IF
    IF mr_aviso_rec.qtd_rejeit IS NULL THEN
        DISPLAY "mr_aviso_rec.qtd_rejeit............: <NULO>" AT 19,02
    ELSE
        DISPLAY "mr_aviso_rec.qtd_rejeit............: ",mr_aviso_rec.qtd_rejeit AT 19,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    LET l_texto = " "
    FOR l_ind = 05 TO 19
        DISPLAY l_texto AT l_ind,02
    END FOR

    DISPLAY "                                                                 Página: 04/06" AT 02,01

    IF mr_aviso_rec.qtd_liber IS NULL THEN
        DISPLAY "mr_aviso_rec.qtd_liber.............: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_aviso_rec.qtd_liber.............: ",mr_aviso_rec.qtd_rejeit AT 05,02
    END IF
    IF mr_aviso_rec.qtd_liber_excep IS NULL THEN
        DISPLAY "mr_aviso_rec.qtd_liber_excep.......: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_aviso_rec.qtd_liber_excep.......: ",mr_aviso_rec.qtd_liber_excep AT 06,02
    END IF
    IF mr_aviso_rec.cus_tot_item IS NULL THEN
        DISPLAY "mr_aviso_rec.cus_tot_item..........: <NULO>" AT 07,02
    ELSE
        DISPLAY "mr_aviso_rec.cus_tot_item..........: ",mr_aviso_rec.cus_tot_item AT 07,02
    END IF
    IF mr_aviso_rec.cod_fiscal_item IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_fiscal_item.......: <NULO>" AT 08,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_fiscal_item.......: ",mr_aviso_rec.cod_fiscal_item AT 08,02
    END IF
    IF mr_aviso_rec.gru_ctr_desp_item IS NULL THEN
        DISPLAY "mr_aviso_rec.gru_ctr_desp_item.....: <NULO>" AT 09,02
    ELSE
        DISPLAY "mr_aviso_rec.gru_ctr_desp_item.....: ",mr_aviso_rec.gru_ctr_desp_item AT 09,02
    END IF
    IF mr_aviso_rec.cod_local_estoq IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_local_estoq.......: <NULO>" AT 10,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_local_estoq.......: ",mr_aviso_rec.cod_local_estoq AT 10,02
    END IF
    IF mr_aviso_rec.num_lote IS NULL THEN
        DISPLAY "mr_aviso_rec.num_lote..............: <NULO>" AT 11,02
    ELSE
        DISPLAY "mr_aviso_rec.num_lote..............: ",mr_aviso_rec.num_lote AT 11,02
    END IF
    IF mr_aviso_rec.cod_operac_estoq IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_operac_estoq......: <NULO>" AT 12,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_operac_estoq......: ",mr_aviso_rec.cod_operac_estoq AT 12,02
    END IF
    IF mr_aviso_rec.val_base_c_item_d IS NULL THEN
        DISPLAY "mr_aviso_rec.val_base_c_item_d.....: <NULO>" AT 13,02
    ELSE
        DISPLAY "mr_aviso_rec.val_base_c_item_d.....: ",mr_aviso_rec.val_base_c_item_d AT 13,02
    END IF
    IF mr_aviso_rec.val_base_c_item_c IS NULL THEN
        DISPLAY "mr_aviso_rec.val_base_c_item_c.....: <NULO>" AT 14,02
    ELSE
        DISPLAY "mr_aviso_rec.val_base_c_item_c.....: ",mr_aviso_rec.val_base_c_item_c AT 14,02
    END IF
    IF mr_aviso_rec.pct_icms_item_d IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_icms_item_d.......: <NULO>" AT 15,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_icms_item_d.......: ",mr_aviso_rec.pct_icms_item_d AT 15,02
    END IF
    IF mr_aviso_rec.pct_icms_item_c IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_icms_item_c.......: <NULO>" AT 16,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_icms_item_c.......: ",mr_aviso_rec.pct_icms_item_c AT 16,02
    END IF
    IF mr_aviso_rec.pct_red_bc_item_d IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_red_bc_item_d.....: <NULO>" AT 17,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_red_bc_item_d.....: ",mr_aviso_rec.pct_red_bc_item_d AT 17,02
    END IF
    IF mr_aviso_rec.pct_red_bc_item_c IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_red_bc_item_c.....: <NULO>" AT 18,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_red_bc_item_c.....: ",mr_aviso_rec.pct_red_bc_item_c AT 18,02
    END IF
    IF mr_aviso_rec.pct_diferen_item_d IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_diferen_item_d....: <NULO>" AT 19,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_diferen_item_d....: ",mr_aviso_rec.pct_diferen_item_d AT 19,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    LET l_texto = " "
    FOR l_ind = 05 TO 19
        DISPLAY l_texto AT l_ind,02
    END FOR

    DISPLAY "                                                                 Página: 05/06" AT 02,01

    IF mr_aviso_rec.pct_diferen_item_c IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_diferen_item_c....: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_diferen_item_c....: ",mr_aviso_rec.pct_diferen_item_c AT 05,02
    END IF
    IF mr_aviso_rec.val_icms_item_d IS NULL THEN
        DISPLAY "mr_aviso_rec.val_icms_item_d.......: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_aviso_rec.val_icms_item_d.......: ",mr_aviso_rec.val_icms_item_d AT 06,02
    END IF
    IF mr_aviso_rec.val_icms_item_c IS NULL THEN
        DISPLAY "mr_aviso_rec.val_icms_item_c.......: <NULO>" AT 07,02
    ELSE
        DISPLAY "mr_aviso_rec.val_icms_item_c.......: ",mr_aviso_rec.val_icms_item_c AT 07,02
    END IF
    IF mr_aviso_rec.val_base_c_icms_da IS NULL THEN
        DISPLAY "mr_aviso_rec.val_base_c_icms_da....: <NULO>" AT 08,02
    ELSE
        DISPLAY "mr_aviso_rec.val_base_c_icms_da....: ",mr_aviso_rec.val_base_c_icms_da AT 08,02
    END IF
    IF mr_aviso_rec.val_icms_diferen_i IS NULL THEN
        DISPLAY "mr_aviso_rec.val_icms_diferen_i....: <NULO>" AT 09,02
    ELSE
        DISPLAY "mr_aviso_rec.val_icms_diferen_i....: ",mr_aviso_rec.val_icms_diferen_i AT 09,02
    END IF
    IF mr_aviso_rec.val_icms_desp_aces IS NULL THEN
        DISPLAY "mr_aviso_rec.val_icms_desp_aces....: <NULO>" AT 10,02
    ELSE
        DISPLAY "mr_aviso_rec.val_icms_desp_aces....: ",mr_aviso_rec.val_icms_item_d AT 10,02
    END IF
    IF mr_aviso_rec.ies_incid_icms_ite IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_incid_icms_ite....: <NULO>" AT 11,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_incid_icms_ite....: ",mr_aviso_rec.ies_incid_icms_ite AT 11,02
    END IF
    IF mr_aviso_rec.val_frete IS NULL THEN
        DISPLAY "mr_aviso_rec.val_frete.............: <NULO>" AT 12,02
    ELSE
        DISPLAY "mr_aviso_rec.val_frete.............: ",mr_aviso_rec.val_frete AT 12,02
    END IF
    IF mr_aviso_rec.val_icms_frete_d IS NULL THEN
        DISPLAY "mr_aviso_rec.val_icms_frete_d......: <NULO>" AT 13,02
    ELSE
        DISPLAY "mr_aviso_rec.val_icms_frete_d......: ",mr_aviso_rec.val_icms_frete_d AT 13,02
    END IF
    IF mr_aviso_rec.val_icms_frete_c IS NULL THEN
        DISPLAY "mr_aviso_rec.val_icms_frete_c......: <NULO>" AT 14,02
    ELSE
        DISPLAY "mr_aviso_rec.val_icms_frete_c......: ",mr_aviso_rec.val_icms_frete_c AT 14,02
    END IF
    IF mr_aviso_rec.val_base_c_frete_d IS NULL THEN
        DISPLAY "mr_aviso_rec.val_base_c_frete_d....: <NULO>" AT 15,02
    ELSE
        DISPLAY "mr_aviso_rec.val_base_c_frete_d....: ",mr_aviso_rec.val_base_c_frete_d AT 15,02
    END IF
    IF mr_aviso_rec.val_base_c_frete_c IS NULL THEN
        DISPLAY "mr_aviso_rec.val_base_c_frete_c....: <NULO>" AT 16,02
    ELSE
        DISPLAY "mr_aviso_rec.val_base_c_frete_c....: ",mr_aviso_rec.val_base_c_frete_d AT 16,02
    END IF
    IF mr_aviso_rec.val_icms_diferen_f IS NULL THEN
        DISPLAY "mr_aviso_rec.val_icms_diferen_f....: <NULO>" AT 17,02
    ELSE
        DISPLAY "mr_aviso_rec.val_icms_diferen_f....: ",mr_aviso_rec.val_icms_diferen_f AT 17,02
    END IF
    IF mr_aviso_rec.pct_icms_frete_d IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_icms_frete_d......: <NULO>" AT 18,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_icms_frete_d......: ",mr_aviso_rec.pct_icms_frete_d AT 18,02
    END IF
    IF mr_aviso_rec.pct_icms_frete_c IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_icms_frete_c......: <NULO>" AT 19,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_icms_frete_c......: ",mr_aviso_rec.pct_icms_frete_c AT 19,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    LET l_texto = " "
    FOR l_ind = 05 TO 19
        DISPLAY l_texto AT l_ind,02
    END FOR

    DISPLAY "                                                                 Página: 06/06" AT 02,01

    IF mr_aviso_rec.pct_red_bc_frete_d IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_red_bc_frete_d....: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_red_bc_frete_d....: ",mr_aviso_rec.pct_red_bc_frete_d AT 05,02
    END IF
    IF mr_aviso_rec.pct_red_bc_frete_c IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_red_bc_frete_c....: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_red_bc_frete_c....: ",mr_aviso_rec.pct_red_bc_frete_c AT 06,02
    END IF
    IF mr_aviso_rec.pct_diferen_fret_d IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_diferen_fret_d....: <NULO>" AT 07,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_diferen_fret_d....: ",mr_aviso_rec.pct_diferen_fret_d AT 07,02
    END IF
    IF mr_aviso_rec.pct_diferen_fret_c IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_diferen_fret_c....: <NULO>" AT 08,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_diferen_fret_c....: ",mr_aviso_rec.pct_diferen_fret_c AT 08,02
    END IF
    IF mr_aviso_rec.val_acrescimos IS NULL THEN
        DISPLAY "mr_aviso_rec.val_acrescimos........: <NULO>" AT 09,02
    ELSE
        DISPLAY "mr_aviso_rec.val_acrescimos........: ",mr_aviso_rec.val_acrescimos AT 09,02
    END IF
    IF mr_aviso_rec.val_enc_financ IS NULL THEN
        DISPLAY "mr_aviso_rec.val_enc_financ........: <NULO>" AT 10,02
    ELSE
        DISPLAY "mr_aviso_rec.val_enc_financ........: ",mr_aviso_rec.val_enc_financ AT 10,02
    END IF
    IF mr_aviso_rec.ies_contabil IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_contabil..........: <NULO>" AT 11,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_contabil..........: ",mr_aviso_rec.ies_contabil AT 11,02
    END IF
    IF mr_aviso_rec.ies_total_nf IS NULL THEN
        DISPLAY "mr_aviso_rec.ies_total_nf..........: <NULO>" AT 12,02
    ELSE
        DISPLAY "mr_aviso_rec.ies_total_nf..........: ",mr_aviso_rec.ies_total_nf AT 12,02
    END IF
    IF mr_aviso_rec.val_compl_estoque IS NULL THEN
        DISPLAY "mr_aviso_rec.val_compl_estoque.....: <NULO>" AT 13,02
    ELSE
        DISPLAY "mr_aviso_rec.val_compl_estoque.....: ",mr_aviso_rec.val_compl_estoque AT 13,02
    END IF
    IF mr_aviso_rec.dat_ref_val_compl IS NULL THEN
        DISPLAY "mr_aviso_rec.dat_ref_val_compl.....: <NULO>" AT 14,02
    ELSE
        DISPLAY "mr_aviso_rec.dat_ref_val_compl.....: ",mr_aviso_rec.dat_ref_val_compl AT 14,02
    END IF
    IF mr_aviso_rec.pct_enc_financ IS NULL THEN
        DISPLAY "mr_aviso_rec.pct_enc_financ........: <NULO>" AT 15,02
    ELSE
        DISPLAY "mr_aviso_rec.pct_enc_financ........: ",mr_aviso_rec.pct_enc_financ AT 15,02
    END IF
    IF mr_aviso_rec.cod_cla_fisc_nf IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_cla_fisc_nf.......: <NULO>" AT 16,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_cla_fisc_nf.......: ",mr_aviso_rec.cod_cla_fisc_nf AT 16,02
    END IF
    IF mr_aviso_rec.cod_tip_despesa IS NULL THEN
        DISPLAY "mr_aviso_rec.cod_tip_despesa.......: <NULO>" AT 17,02
    ELSE
        DISPLAY "mr_aviso_rec.cod_tip_despesa.......: ",mr_aviso_rec.cod_tip_despesa AT 17,02
    END IF
    IF mr_aviso_rec.observacao IS NULL THEN
        DISPLAY "mr_aviso_rec.observacao............: <NULO>" AT 18,02
    ELSE
        DISPLAY "mr_aviso_rec.observacao............: ",mr_aviso_rec.observacao AT 18,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    CLOSE WINDOW w_erro
 END IF

 END FUNCTION

#--------------------------------------------------------#
 FUNCTION sup0552_insere_relac_frete_nff(l_conta_div,
                                         l_conta_import,
                                         l_tipo)
#--------------------------------------------------------#
 DEFINE l_count_relac       SMALLINT,
        l_conta_div         SMALLINT,
        l_conta_import      SMALLINT,
        l_conta_array       SMALLINT,
        l_count             SMALLINT,
        l_status            SMALLINT,
        l_ies_frete         LIKE nf_mestre.ies_frete,
        l_trans_nf_fatura   LIKE frete_sup_x_nff.trans_nota_fiscal_fatura,
        l_dat_hor_emis_nf   LIKE frete_sup_x_nff.dat_hr_emis_nota_fiscal_fatura,
        l_msg               CHAR(60),
## OS 391495
        l_contador          SMALLINT,
        l_count_ser_branca  SMALLINT,
        l_tipo              CHAR(20),
        l_tabela            CHAR(50)

 LET l_count_relac = 0

 WHENEVER ERROR CONTINUE
 SELECT COUNT(*)
   INTO l_count_relac
   FROM w_sup0552_4
  WHERE tipo_registro = "F"
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0
 OR l_count_relac IS NULL THEN
    LET l_count_relac = 0
 END IF

 IF l_count_relac > 0 THEN
    IF m_arg = FALSE THEN
       OPEN WINDOW w_processo2 AT 10,10 WITH 08 ROWS, 58 COLUMNS
            ATTRIBUTE(BORDER, PROMPT LINE LAST, MESSAGE LINE LAST)

        DISPLAY "            INCLUINDO RELACIONAMENTO FRETE X NFF...                " AT 1,1 ATTRIBUTE(REVERSE)
        DISPLAY "Conhec.....: " AT 03,02
        DISPLAY "Serie......: " AT 04,02
        DISPLAY "Sub-Serie..: " AT 05,02
        DISPLAY "Transport..: " AT 06,02
        DISPLAY "Nota.......: " AT 07,02
        DISPLAY "Serie Nota.: " AT 08,02
        CALL LOG_refresh_display()
    END IF

    LET sql_stmt = "SELECT empresa,             ",
                   "       nota_fiscal,         ",
                   "       serie_nota_fiscal,   ",
                   "       subserie_nf,         ",
                   "       espc_nota_fiscal,    ",
                   "       fornecedor,          ",
                   "       num_conhec_frete,    ",
                   "       serie_conhec_frete,  ",
                   "       subserie_conh_fret,  ",
                   "       dat_emis_nf          ",
                   "  FROM w_sup0552_4 ",
                   " WHERE tipo_registro = 'F'  "

    WHENEVER ERROR CONTINUE
    PREPARE var_query18 FROM sql_stmt
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("PREPARE","VAR_QUERY18")
    END IF

    WHENEVER ERROR CONTINUE
    DECLARE cl_relac_frete_nff CURSOR WITH HOLD FOR var_query18
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DECLARE","W_SUP0552_4 13")
    END IF

    WHENEVER ERROR CONTINUE
    FOREACH cl_relac_frete_nff INTO mr_relac_nff.*
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("FOREACH","CL_RELAC_FRETE_NFF")
       END IF
       CALL sup0552_insere_consistencia(FALSE)
       INITIALIZE ma_array_consistencias TO NULL
       LET l_conta_array = 0
        IF m_arg = FALSE THEN
           DISPLAY mr_relac_nff.num_conhec        AT 03,15
           DISPLAY mr_relac_nff.serie_conhec      AT 04,15
           DISPLAY mr_relac_nff.subserie_conhec   AT 05,15
           DISPLAY mr_relac_nff.transportador     AT 06,15
           DISPLAY mr_relac_nff.num_nff_relac     AT 07,15
           DISPLAY mr_relac_nff.ser_nff_relac     AT 08,15
           CALL LOG_refresh_display()
        END IF

       IF mr_relac_nff.ser_nff_relac IS NULL THEN
          LET mr_relac_nff.ser_nff_relac = " "
       END IF

       WHENEVER ERROR CONTINUE
       SELECT frete_sup.*
         INTO p_frete_sup.*
         FROM frete_sup
        WHERE cod_empresa  = mr_relac_nff.empresa
          AND cod_transpor = mr_relac_nff.transportador
          AND num_conhec   = mr_relac_nff.num_conhec
          AND ser_conhec   = mr_relac_nff.serie_conhec
          AND ssr_conhec   = mr_relac_nff.subserie_conhec
       WHENEVER ERROR STOP

       IF sqlca.sqlcode <> 0 THEN
          LET l_conta_div = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1
          LET ma_array_consistencias[l_conta_array].nota_fiscal       =
              mr_relac_nff.num_conhec
          LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
              mr_relac_nff.serie_conhec
          LET ma_array_consistencias[l_conta_array].subserie_nf       =
              mr_relac_nff.subserie_conhec
          LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
              mr_relac_nff.especie
          LET ma_array_consistencias[l_conta_array].fornecedor        =
              mr_relac_nff.transportador
          LET ma_array_consistencias[l_conta_array].sequencia         = 0
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
              "Conhec. nao cadastrado. Nota: ",mr_relac_nff.num_nff_relac USING "<<<<<&"
          LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
          LET m_houve_erro     = TRUE
          CONTINUE FOREACH
       END IF

       #--inicio--OS 578942 #
       IF sup0552_verifica_fechamento(p_frete_sup.dat_entrada_conhec,l_conta_array,'FRETE',TRUE) = FALSE THEN
          CONTINUE FOREACH
       END IF

       WHENEVER ERROR CONTINUE
         SELECT empresa
           FROM w_verif_frete
          WHERE empresa           = p_frete_sup.cod_empresa
            AND nota_fiscal       = p_frete_sup.num_conhec
            AND serie_nota_fiscal = p_frete_sup.ser_conhec
            AND subserie_nf       = p_frete_sup.ssr_conhec
            AND fornecedor        = p_frete_sup.cod_transpor
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 OR
          sqlca.sqlcode = -284  THEN
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Conhec. de Frete já foi importado. Nota ", mr_relac_nff.num_nff_relac USING "<<<<<<&"," nao relac."
          CONTINUE FOREACH
       END IF
       #---fim----OS 578942 #

       WHENEVER ERROR CONTINUE
       SELECT num_nff
         FROM frete_sup_x_nff
        WHERE cod_empresa  = mr_relac_nff.empresa
          AND num_nff      = mr_relac_nff.num_nff_relac
          AND ser_nf_saida = mr_relac_nff.ser_nff_relac
          AND num_conhec   = mr_relac_nff.num_conhec
          AND ser_conhec   = mr_relac_nff.serie_conhec
          AND ssr_conhec   = mr_relac_nff.subserie_conhec
          AND cod_transpor = mr_relac_nff.transportador
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 OR sqlca.sqlcode = -284 THEN
          LET l_conta_div = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1
          LET ma_array_consistencias[l_conta_array].nota_fiscal       =
              mr_relac_nff.num_conhec
          LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
              mr_relac_nff.serie_conhec
          LET ma_array_consistencias[l_conta_array].subserie_nf       =
              mr_relac_nff.subserie_conhec
          LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
              mr_relac_nff.especie
          LET ma_array_consistencias[l_conta_array].fornecedor        =
              mr_relac_nff.transportador
          LET ma_array_consistencias[l_conta_array].sequencia         = 0
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
              "Relac. com Nota ",mr_relac_nff.num_nff_relac USING "<<<<<&",
              " já importado."
          LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis

          CALL sup0552_chama_sup7720_frete_venda(l_conta_div, l_conta_array,"N")

          CALL sup0552_calcula_piscofins_frvnd(l_conta_div, l_conta_array,"RELAC", l_tipo)
               RETURNING l_status
          LET m_houve_erro     = TRUE
          CONTINUE FOREACH
       END IF

       INITIALIZE l_ies_frete TO NULL

       IF m_ies_fat_unico THEN
          LET l_count = 0
          IF mr_relac_nff.dat_emis_nff_relac IS NOT NULL THEN
             IF vdpm95_fat_nf_mestre_leitura_indice(mr_relac_nff.empresa,
                                                    "FATPRDSV",
                                                    mr_relac_nff.ser_nff_relac,
                                                    mr_relac_nff.ssr_nff_relac,
                                                    mr_relac_nff.num_nff_relac,
                                                    mr_relac_nff.dat_emis_nff_relac,
                                                    FALSE,TRUE) THEN
                CALL vdpm95_fat_nf_mestre_get_trans_nota_fiscal()
                     RETURNING l_trans_nf_fatura
                CALL vdpm95_fat_nf_mestre_get_dat_hor_emissao()
                     RETURNING l_dat_hor_emis_nf
                CALL vdpm95_fat_nf_mestre_get_tip_frete()
                     RETURNING l_ies_frete
                LET l_count = 1
             ELSE
                IF vdpm301_fat_nf_mestre_hist_leitura_indice(mr_relac_nff.empresa,
                                                             "FATPRDSV",
                                                             mr_relac_nff.ser_nff_relac,
                                                             mr_relac_nff.ssr_nff_relac,
                                                             mr_relac_nff.num_nff_relac,
                                                             mr_relac_nff.dat_emis_nff_relac,
                                                             FALSE,TRUE) THEN
                   CALL vdpm301_fat_nf_mestre_hist_get_trans_nota_fiscal()
                        RETURNING l_trans_nf_fatura
                   CALL vdpm301_fat_nf_mestre_hist_get_dat_hor_emissao()
                        RETURNING l_dat_hor_emis_nf
                   CALL vdpm301_fat_nf_mestre_hist_get_tip_frete()
                        RETURNING l_ies_frete
                   LET l_count = 1
                END IF
             END IF
          ELSE
             IF mr_relac_nff.ser_nff_relac <> " " AND
                mr_relac_nff.ser_nff_relac IS NOT NULL THEN

                WHENEVER ERROR CONTINUE
                DECLARE cl_fat_nf_mestre1 CURSOR FOR
                 SELECT fat_nf_mestre.tip_frete,
                        fat_nf_mestre.trans_nota_fiscal,
                        fat_nf_mestre.subserie_nf,
                        fat_nf_mestre.dat_hor_emissao
                   FROM fat_nf_mestre
                  WHERE fat_nf_mestre.empresa            = mr_relac_nff.empresa
                    AND fat_nf_mestre.nota_fiscal        = mr_relac_nff.num_nff_relac
                    AND fat_nf_mestre.serie_nota_fiscal  = mr_relac_nff.ser_nff_relac
                    AND fat_nf_mestre.tip_nota_fiscal    = "FATPRDSV"
                    AND fat_nf_mestre.sit_nota_fiscal    = "N"
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("DECLARE","CL_FAT_NF_MESTRE1")
                   CLOSE cl_relac_frete_nff #764215#
                   EXIT FOREACH
                END IF

                WHENEVER ERROR CONTINUE
                FOREACH cl_fat_nf_mestre1 INTO l_ies_frete,
                                               l_trans_nf_fatura,
                                               mr_relac_nff.ssr_nff_relac,
                                               l_dat_hor_emis_nf
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("FOREACH","CL_FAT_NF_MESTRE1")
                      CLOSE cl_fat_nf_mestre1 #764215#
                      EXIT FOREACH
                   END IF
                   LET l_count = l_count + 1
                END FOREACH
                FREE cl_fat_nf_mestre1
                WHENEVER ERROR STOP

                IF l_count = 0 THEN
                   WHENEVER ERROR CONTINUE
                   DECLARE cl_fat_nf_mestreh1 CURSOR FOR
                    SELECT fat_nf_mestre_hist.tip_frete,
                           fat_nf_mestre_hist.trans_nota_fiscal,
                           fat_nf_mestre_hist.subserie_nf,
                           fat_nf_mestre_hist.dat_hor_emissao
                      FROM fat_nf_mestre_hist
                     WHERE fat_nf_mestre_hist.empresa            = mr_relac_nff.empresa
                       AND fat_nf_mestre_hist.nota_fiscal        = mr_relac_nff.num_nff_relac
                       AND fat_nf_mestre_hist.serie_nota_fiscal  = mr_relac_nff.ser_nff_relac
                       AND fat_nf_mestre_hist.tip_nota_fiscal    = "FATPRDSV"
                       AND fat_nf_mestre_hist.sit_nota_fiscal    = "N"
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("DECLARE","CL_FAT_NF_MESTREH1")
                      CLOSE cl_relac_frete_nff #764215#
                      EXIT FOREACH
                   END IF

                   WHENEVER ERROR CONTINUE
                   FOREACH cl_fat_nf_mestreh1 INTO l_ies_frete,
                                                   l_trans_nf_fatura,
                                                   mr_relac_nff.ssr_nff_relac,
                                                   l_dat_hor_emis_nf
                      IF sqlca.sqlcode <> 0 THEN
                         CALL log003_err_sql("FOREACH","CL_FAT_NF_MESTREH1")
                         CLOSE cl_fat_nf_mestreh1 #764215#
                         EXIT FOREACH
                      END IF
                      LET l_count = l_count + 1
                   END FOREACH
                   FREE cl_fat_nf_mestreh1
                   WHENEVER ERROR STOP
                END IF
             ELSE
                WHENEVER ERROR CONTINUE
                DECLARE cl_fat_nf_mestre2 CURSOR FOR
                 SELECT fat_nf_mestre.tip_frete,
                        fat_nf_mestre.trans_nota_fiscal,
                        fat_nf_mestre.subserie_nf,
                        fat_nf_mestre.dat_hor_emissao
                   FROM fat_nf_mestre
                  WHERE fat_nf_mestre.empresa            = mr_relac_nff.empresa
                    AND fat_nf_mestre.nota_fiscal        = mr_relac_nff.num_nff_relac
                    AND fat_nf_mestre.tip_nota_fiscal    = "FATPRDSV"
                    AND fat_nf_mestre.sit_nota_fiscal    = "N"
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("DECLARE","CL_FAT_NF_MESTRE2")
                   CLOSE cl_relac_frete_nff #764215#
                   EXIT FOREACH
                END IF

                WHENEVER ERROR CONTINUE
                FOREACH cl_fat_nf_mestre2 INTO l_ies_frete,
                                               l_trans_nf_fatura,
                                               mr_relac_nff.ssr_nff_relac,
                                               l_dat_hor_emis_nf
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("FOREACH","CL_FAT_NF_MESTRE2")
                      CLOSE cl_fat_nf_mestre2 #764215#
                      EXIT FOREACH
                   END IF
                   LET l_count = l_count + 1
                END FOREACH
                FREE cl_fat_nf_mestre2
                WHENEVER ERROR STOP

                IF l_count = 0 THEN
                   WHENEVER ERROR CONTINUE
                   DECLARE cl_fat_nf_mestreh2 CURSOR FOR
                    SELECT fat_nf_mestre_hist.tip_frete,
                           fat_nf_mestre_hist.trans_nota_fiscal,
                           fat_nf_mestre_hist.subserie_nf,
                           fat_nf_mestre_hist.dat_hor_emissao
                      FROM fat_nf_mestre_hist
                     WHERE fat_nf_mestre_hist.empresa            = mr_relac_nff.empresa
                       AND fat_nf_mestre_hist.nota_fiscal        = mr_relac_nff.num_nff_relac
                       AND fat_nf_mestre_hist.tip_nota_fiscal    = "FATPRDSV"
                       AND fat_nf_mestre_hist.sit_nota_fiscal    = "N"
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("DECLARE","CL_FAT_NF_MESTREH2")
                      CLOSE cl_relac_frete_nff #764215#
                      EXIT FOREACH
                   END IF

                   WHENEVER ERROR CONTINUE
                   FOREACH cl_fat_nf_mestre2 INTO l_ies_frete,
                                                  l_trans_nf_fatura,
                                                  mr_relac_nff.ssr_nff_relac,
                                                  l_dat_hor_emis_nf
                      IF sqlca.sqlcode <> 0 THEN
                         CALL log003_err_sql("FOREACH","CL_FAT_NF_MESTRE2")
                         CLOSE cl_fat_nf_mestre2 #764215#
                         EXIT FOREACH
                      END IF
                      LET l_count = l_count + 1
                   END FOREACH
                   FREE cl_fat_nf_mestre2
                   WHENEVER ERROR STOP
                END IF

                IF l_count <> 1 THEN
                   LET l_count_ser_branca = 0
                   WHENEVER ERROR CONTINUE
                   DECLARE cl_fat_nf_mestre3 CURSOR FOR
                    SELECT fat_nf_mestre.tip_frete,
                           fat_nf_mestre.trans_nota_fiscal,
                           fat_nf_mestre.subserie_nf,
                           fat_nf_mestre.dat_hor_emissao
                      FROM fat_nf_mestre
                     WHERE fat_nf_mestre.empresa            = mr_relac_nff.empresa
                       AND fat_nf_mestre.nota_fiscal        = mr_relac_nff.num_nff_relac
                       AND fat_nf_mestre.serie_nota_fiscal  = " "
                       AND fat_nf_mestre.tip_nota_fiscal    = "FATPRDSV"
                       AND fat_nf_mestre.sit_nota_fiscal    = "N"
                    WHENEVER ERROR STOP
                    IF sqlca.sqlcode <> 0 THEN
                       CALL log003_err_sql("DECLARE","CL_FAT_NF_MESTRE3")
                       CLOSE cl_relac_frete_nff #764215#
                       EXIT FOREACH
                    END IF

                    WHENEVER ERROR CONTINUE
                    FOREACH cl_fat_nf_mestre3 INTO l_ies_frete,
                                                   l_trans_nf_fatura,
                                                   mr_relac_nff.ssr_nff_relac,
                                                   l_dat_hor_emis_nf
                       IF sqlca.sqlcode <> 0 THEN
                          CALL log003_err_sql("FOREACH","CL_FAT_NF_MESTRE3")
                          CLOSE cl_fat_nf_mestre3 #764215#
                          EXIT FOREACH
                       END IF
                       LET l_count_ser_branca = l_count_ser_branca + 1
                    END FOREACH
                    FREE cl_fat_nf_mestre3
                    WHENEVER ERROR STOP

                    IF l_count_ser_branca = 0 THEN
                       WHENEVER ERROR CONTINUE
                       DECLARE cl_fat_nf_mestreh3 CURSOR FOR
                        SELECT fat_nf_mestre_hist.tip_frete,
                               fat_nf_mestre_hist.trans_nota_fiscal,
                               fat_nf_mestre_hist.subserie_nf,
                               fat_nf_mestre_hist.dat_hor_emissao
                          FROM fat_nf_mestre_hist
                         WHERE fat_nf_mestre_hist.empresa            = mr_relac_nff.empresa
                           AND fat_nf_mestre_hist.nota_fiscal        = mr_relac_nff.num_nff_relac
                           AND fat_nf_mestre_hist.serie_nota_fiscal  = " "
                           AND fat_nf_mestre_hist.tip_nota_fiscal    = "FATPRDSV"
                           AND fat_nf_mestre_hist.sit_nota_fiscal    = "N"
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode <> 0 THEN
                           CALL log003_err_sql("DECLARE","CL_FAT_NF_MESTREH3")
                           CLOSE cl_relac_frete_nff #764215#
                           EXIT FOREACH
                        END IF

                        WHENEVER ERROR CONTINUE
                        FOREACH cl_fat_nf_mestreh3 INTO l_ies_frete,
                                                        l_trans_nf_fatura,
                                                        mr_relac_nff.ssr_nff_relac,
                                                        l_dat_hor_emis_nf
                           IF sqlca.sqlcode <> 0 THEN
                              CALL log003_err_sql("FOREACH","CL_FAT_NF_MESTREH3")
                              CLOSE cl_fat_nf_mestreh3 #764215#
                              EXIT FOREACH
                           END IF
                           LET l_count_ser_branca = l_count_ser_branca + 1
                        END FOREACH
                        FREE cl_fat_nf_mestreh3
                        WHENEVER ERROR STOP
                    END IF
                    ##Se encontrar registro com série branco deverá considerar esta nota fiscal
                    ##senão deverá apresentar mensagem que foi encontrado mais de um registro
                    ##para a nota fiscal em questão
                    IF l_count_ser_branca > 0 THEN
                       LET l_count = l_count_ser_branca
                    END IF
                END IF
             END IF
          END IF

          IF l_count <> 1 THEN
             LET l_conta_div = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1
             LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                 mr_relac_nff.num_conhec
             LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                 mr_relac_nff.serie_conhec
             LET ma_array_consistencias[l_conta_array].subserie_nf       =
                 mr_relac_nff.subserie_conhec
             LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                 mr_relac_nff.especie
             LET ma_array_consistencias[l_conta_array].fornecedor        =
                 mr_relac_nff.transportador
             LET ma_array_consistencias[l_conta_array].sequencia         = 0
             LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
             LET m_houve_erro     = TRUE

             IF l_count = 0 THEN
                IF mr_relac_nff.dat_emis_nff_relac IS NOT NULL THEN
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                       "NF relac.: ",mr_relac_nff.num_nff_relac USING "<<<<<&",
                       " Data Emis.: ",mr_relac_nff.dat_emis_nff_relac,
                       " nao cadastrada"
                ELSE
                   LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                       "Nota relac.: ",mr_relac_nff.num_nff_relac USING "<<<<<&",
                       " nao cadastrada"
                END IF
             ELSE
                LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                    "Encontrado mais de um registro para NF de venda: ",
                    mr_relac_nff.num_nff_relac USING "<<<<<&"
             END IF

             CALL sup0552_chama_sup7720_frete_venda(l_conta_div, l_conta_array,"N")
             CALL sup0552_calcula_piscofins_frvnd(l_conta_div, l_conta_array,"RELAC", l_tipo)
                  RETURNING l_status
             CONTINUE FOREACH
          END IF

       ELSE
          WHENEVER ERROR CONTINUE
            SELECT ies_frete
              INTO l_ies_frete
              FROM nf_mestre_ser
             WHERE cod_empresa = mr_relac_nff.empresa
               AND num_nff     = mr_relac_nff.num_nff_relac
               AND ser_nff     = mr_relac_nff.ser_nff_relac
          WHENEVER ERROR STOP
          IF sqlca.sqlcode = NOTFOUND THEN
             WHENEVER ERROR CONTINUE
               SELECT tip_frete
                 INTO l_ies_frete
                 FROM fat_nf_mst_ser_h
                WHERE empresa           = mr_relac_nff.empresa
                  AND nota_fiscal       = mr_relac_nff.num_nff_relac
                  AND serie_nota_fiscal = mr_relac_nff.ser_nff_relac
             WHENEVER ERROR STOP
             IF sqlca.sqlcode = NOTFOUND THEN
                WHENEVER ERROR CONTINUE
                  SELECT ies_frete
                    INTO l_ies_frete
                    FROM nf_mestre
                   WHERE cod_empresa = mr_relac_nff.empresa
                     AND num_nff     = mr_relac_nff.num_nff_relac
                WHENEVER ERROR STOP
                IF sqlca.sqlcode = NOTFOUND THEN
                   WHENEVER ERROR CONTINUE
                     SELECT ies_frete
                       INTO l_ies_frete
                       FROM nf_mestre_hist
                      WHERE cod_empresa = mr_relac_nff.empresa
                        AND num_nff     = mr_relac_nff.num_nff_relac
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = NOTFOUND THEN
                      LET l_conta_div = l_conta_div + 1
                      LET l_conta_array = l_conta_array + 1
                      LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                          mr_relac_nff.num_conhec
                      LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                          mr_relac_nff.serie_conhec
                      LET ma_array_consistencias[l_conta_array].subserie_nf       =
                          mr_relac_nff.subserie_conhec
                      LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                          mr_relac_nff.especie
                      LET ma_array_consistencias[l_conta_array].fornecedor        =
                          mr_relac_nff.transportador
                      LET ma_array_consistencias[l_conta_array].sequencia         = 0
                      LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                          "Nota relac.: ",mr_relac_nff.num_nff_relac USING "<<<<<&",
                          " nao cadastrada "
                      LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
                      LET m_houve_erro     = TRUE

                      CALL sup0552_chama_sup7720_frete_venda(l_conta_div, l_conta_array,"N")
                      CALL sup0552_calcula_piscofins_frvnd(l_conta_div, l_conta_array,"RELAC", l_tipo)
                           RETURNING l_status
                      CONTINUE FOREACH
                   END IF
                END IF
             END IF
          END IF
       END IF

       WHENEVER ERROR CONTINUE
       SELECT num_nff
         FROM frete_sup_x_nff
        WHERE cod_empresa  = mr_relac_nff.empresa
          AND num_nff      = mr_relac_nff.num_nff_relac
          AND ser_nf_saida = mr_relac_nff.ser_nff_relac
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 OR sqlca.sqlcode = -284 THEN
          LET l_conta_div = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1
          LET ma_array_consistencias[l_conta_array].nota_fiscal       =
              mr_relac_nff.num_conhec
          LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
              mr_relac_nff.serie_conhec
          LET ma_array_consistencias[l_conta_array].subserie_nf       =
              mr_relac_nff.subserie_conhec
          LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
              mr_relac_nff.especie
          LET ma_array_consistencias[l_conta_array].fornecedor        =
              mr_relac_nff.transportador
          LET ma_array_consistencias[l_conta_array].sequencia         = 0
          LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
          LET m_houve_erro     = TRUE

          IF m_relac_unica_nff = "S" THEN
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "NF ",mr_relac_nff.num_nff_relac USING "<<<<<&",
                 " ja relacionada a outro conhecimento."
          ELSE
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "NF ",mr_relac_nff.num_nff_relac USING "<<<<<&",
                 " importada, porem ja relac. a outro conhecimento."
          END IF

          CALL sup0552_chama_sup7720_frete_venda(l_conta_div, l_conta_array,"N")

          CALL sup0552_calcula_piscofins_frvnd(l_conta_div, l_conta_array,"RELAC", l_tipo)
               RETURNING l_status

          IF m_relac_unica_nff = "S" THEN
             CONTINUE FOREACH
          END IF
       END IF

       WHENEVER ERROR CONTINUE
       SELECT fornecedor.cod_fornecedor
         FROM fornecedor
        WHERE fornecedor.cod_fornecedor   = mr_relac_nff.transportador
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET l_conta_div   = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1
          LET ma_array_consistencias[l_conta_array].nota_fiscal       =
              mr_relac_nff.num_conhec
          LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
              mr_relac_nff.serie_conhec
          LET ma_array_consistencias[l_conta_array].subserie_nf       =
              mr_relac_nff.subserie_conhec
          LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
              mr_relac_nff.especie
          LET ma_array_consistencias[l_conta_array].fornecedor        =
              mr_relac_nff.transportador
          LET ma_array_consistencias[l_conta_array].sequencia         = 0
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
              " Transportador ",mr_relac_nff.transportador CLIPPED," nao cadastrado "
          LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis

          CALL sup0552_chama_sup7720_frete_venda(l_conta_div, l_conta_array,"N")
          LET m_houve_erro     = TRUE
          CONTINUE FOREACH
       END IF


       IF m_perm_relac_frfob_frvnd = "N" AND
          l_ies_frete = 3 THEN

          LET l_conta_div = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1
          LET ma_array_consistencias[l_conta_array].nota_fiscal       =
              mr_relac_nff.num_conhec
          LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
              mr_relac_nff.serie_conhec
          LET ma_array_consistencias[l_conta_array].subserie_nf       =
              mr_relac_nff.subserie_conhec
          LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
              mr_relac_nff.especie
          LET ma_array_consistencias[l_conta_array].fornecedor        =
              mr_relac_nff.transportador
          LET ma_array_consistencias[l_conta_array].sequencia         = 0
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
              "Nota relac.: ",mr_relac_nff.num_nff_relac USING "<<<<<&"," possui frete FOB "
          LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
          LET m_houve_erro     = TRUE

          LET l_msg = "Nota Fiscal de Venda (",mr_relac_nff.num_nff_relac USING "<<<<<&",") possui frete FOB. "

          WHENEVER ERROR CONTINUE
          INSERT INTO frete_sup_erro (cod_empresa          ,
                                      cod_transpor         ,
                                      num_conhec           ,
                                      ser_conhec           ,
                                      ssr_conhec           ,
                                      des_pendencia        ,
                                      ies_origem_erro      ,
                                      ies_erro_grave)
                               VALUES(mr_relac_nff.empresa,
                                      mr_relac_nff.transportador,
                                      mr_relac_nff.num_conhec,
                                      mr_relac_nff.serie_conhec,
                                      mr_relac_nff.subserie_conhec,
                                      l_msg,
                                      "2",
                                      "N")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET m_houve_erro = TRUE
             LET l_conta_array = l_conta_array + 1
             CALL sup0552_carrega_chave_consiste(l_conta_array)
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da FRETE_SUP "
             LET m_status_arquivo = 1
          END IF

          WHENEVER ERROR CONTINUE
          UPDATE frete_sup
             SET ies_conhec_erro = "S"
           WHERE cod_empresa  = mr_relac_nff.empresa
             AND cod_transpor = mr_relac_nff.transportador
             AND num_conhec   = mr_relac_nff.num_conhec
             AND ser_conhec   = mr_relac_nff.serie_conhec
             AND ssr_conhec   = mr_relac_nff.subserie_conhec
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("MODIFICAÇÃO","FRETE_SUP")
          END IF

          CALL sup0552_chama_sup7720_frete_venda(l_conta_div, l_conta_array,"N")

       END IF

       IF m_empr_utiliz_mp66 = "S"
       OR m_empr_utiliz_mp66 = "R" THEN
          CALL sup1047_cria_temp()
       END IF

       WHENEVER ERROR CONTINUE
       CALL log085_transacao("BEGIN")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("BEGIN TRANSACTION","RELAC.FRETE")
          LET m_transacao_ativa = FALSE
          CLOSE cl_relac_frete_nff #764215#
          EXIT FOREACH
       END IF
       LET m_transacao_ativa = TRUE

       WHENEVER ERROR CONTINUE
       INSERT INTO frete_sup_x_nff(cod_empresa, num_nff, ser_nf_saida,
                                   num_conhec, ser_conhec, ssr_conhec,
                                   cod_transpor, trans_nota_fiscal_fatura,
                                   subserie_nota_fiscal_fatura,
                                   dat_hr_emis_nota_fiscal_fatura)
                             VALUES(mr_relac_nff.empresa,
                                    mr_relac_nff.num_nff_relac,
                                    mr_relac_nff.ser_nff_relac,
                                    mr_relac_nff.num_conhec,
                                    mr_relac_nff.serie_conhec,
                                    mr_relac_nff.subserie_conhec,
                                    mr_relac_nff.transportador,
                                    l_trans_nf_fatura,
                                    mr_relac_nff.ssr_nff_relac,
                                    l_dat_hor_emis_nf)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET m_houve_erro = TRUE
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da FRETE_SUP_X_NFF "
          LET m_status_arquivo = 1
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          LET m_transacao_ativa = FALSE
          CLOSE cl_relac_frete_nff #764215#
          EXIT FOREACH
       END IF

       IF m_empr_utiliz_mp66 = "S"
       OR m_empr_utiliz_mp66 = "R" THEN
          IF NOT sup1047_rateio_frete_venda() THEN
             LET l_conta_div = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1
                LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                    mr_relac_nff.num_conhec
                LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                    mr_relac_nff.serie_conhec
                LET ma_array_consistencias[l_conta_array].subserie_nf       =
                    mr_relac_nff.subserie_conhec
                LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                    mr_relac_nff.especie
                LET ma_array_consistencias[l_conta_array].fornecedor        =
                    mr_relac_nff.transportador
                LET ma_array_consistencias[l_conta_array].sequencia         = 0
             LET ma_array_consistencias[l_conta_array].txt_consistencia  =
                 "Probl.rateio frete venda calculo PIS/COFINS"
             LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
             LET m_houve_erro     = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             LET m_transacao_ativa = FALSE
             CLOSE cl_relac_frete_nff #764215#
             EXIT FOREACH
          END IF
       END IF

       INITIALIZE mr_importados.* TO NULL

       LET mr_importados.tipo_registro     = "R"
       LET mr_importados.nota_fiscal       = mr_relac_nff.num_conhec
       LET mr_importados.serie_nota_fiscal = mr_relac_nff.serie_conhec
       LET mr_importados.subserie_nf       = mr_relac_nff.subserie_conhec
       LET mr_importados.espc_nota_fiscal  = mr_relac_nff.especie
       LET mr_importados.fornecedor        = mr_relac_nff.transportador
       LET mr_importados.num_nff_relac     = mr_relac_nff.num_nff_relac
       LET mr_importados.arquivo           = m_nom_arquivo_consis

       INSERT INTO w_sup0552_2 (tipo_registro       ,
                                   nota_fiscal         ,
                                   serie_nota_fiscal   ,
                                   subserie_nf         ,
                                   espc_nota_fiscal    ,
                                   fornecedor          ,
                                   num_nff_relac       ,
                                   arquivo             )
                           VALUES (mr_importados.tipo_registro       ,
                                   mr_importados.nota_fiscal         ,
                                   mr_importados.serie_nota_fiscal   ,
                                   mr_importados.subserie_nf         ,
                                   mr_importados.espc_nota_fiscal    ,
                                   mr_importados.fornecedor          ,
                                   mr_importados.num_nff_relac       ,
                                   mr_importados.arquivo             )

       IF sqlca.sqlcode <> 0 THEN
          LET m_houve_erro = TRUE
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da W_SUP0552_2 "
          LET m_status_arquivo = 1
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          LET m_transacao_ativa = FALSE
          CLOSE cl_relac_frete_nff #764215#
          EXIT FOREACH
       END IF

       WHENEVER ERROR CONTINUE
       CALL log085_transacao("COMMIT")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("EFETIVACAO","FRETE_SUP_X_NFF")
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          LET m_transacao_ativa = FALSE
          CLOSE cl_relac_frete_nff #764215#
          EXIT FOREACH
       END IF

       WHENEVER ERROR CONTINUE
       CALL log085_transacao("BEGIN")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("CONSISTENCIA","FRETE_SUP_X_NFF")
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          LET m_transacao_ativa = FALSE
          CLOSE cl_relac_frete_nff #764215#
          EXIT FOREACH
       END IF
       LET m_transacao_ativa = TRUE

       CALL sup772_consiste_frete(p_frete_sup.*)
            RETURNING p_status, p_frete_sup.*

       IF p_status = FALSE THEN
          LET m_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          LET m_transacao_ativa = FALSE
          CLOSE cl_relac_frete_nff #764215#
          EXIT FOREACH
       END IF

       # Inicio chamado 739991
       IF p_frete_sup.tip_frete = "V" THEN
          LET p_frete_sup.val_base_c_frete_d = p_frete_sup.val_base_c_frete_c
       END IF
       # Fim chamado 739991

## OS 391495
       LET l_contador = 0
       SELECT COUNT(*)
         INTO l_contador
         FROM frete_sup_erro
        WHERE frete_sup_erro.cod_empresa  = p_frete_sup.cod_empresa
          AND frete_sup_erro.num_conhec   = p_frete_sup.num_conhec
          AND frete_sup_erro.ser_conhec   = p_frete_sup.ser_conhec
          AND frete_sup_erro.ssr_conhec   = p_frete_sup.ssr_conhec
          AND frete_sup_erro.cod_transpor = p_frete_sup.cod_transpor
          AND (frete_sup_erro.ies_origem_erro <> "4" AND
               frete_sup_erro.ies_origem_erro <> "5")
       IF l_contador > 0  THEN
          LET p_frete_sup.ies_conhec_erro = "S"
          UPDATE frete_sup
             SET frete_sup.* = p_frete_sup.*
           WHERE frete_sup.cod_empresa  = p_frete_sup.cod_empresa
             AND frete_sup.num_conhec   = p_frete_sup.num_conhec
             AND frete_sup.ser_conhec   = p_frete_sup.ser_conhec
             AND frete_sup.ssr_conhec   = p_frete_sup.ssr_conhec
             AND frete_sup.cod_transpor = p_frete_sup.cod_transpor
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("ATUALIZACAO","FRETE_SUP")
             LET m_houve_erro = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             LET m_transacao_ativa = FALSE
             CLOSE cl_relac_frete_nff #764215#
             EXIT FOREACH
          END IF

          #724885
          WHENEVER ERROR CONTINUE
            SELECT cod_empresa
              FROM frete_sup_erro
             WHERE cod_empresa  = p_frete_sup.cod_empresa
               AND cod_transpor = p_frete_sup.cod_transpor
               AND num_conhec   = p_frete_sup.num_conhec
               AND ser_conhec   = p_frete_sup.ser_conhec
               AND ssr_conhec   = p_frete_sup.ssr_conhec
          WHENEVER ERROR STOP
          IF sqlca.sqlcode = 0 OR
             sqlca.sqlcode = -284 THEN

             ### Para listar Fretes com consistencias
             LET l_conta_div = l_conta_div + 1
             LET l_conta_array = l_conta_array + 1
             LET ma_array_consistencias[l_conta_array].nota_fiscal       = p_frete_sup.num_conhec
             LET ma_array_consistencias[l_conta_array].serie_nota_fiscal = p_frete_sup.ser_conhec
             LET ma_array_consistencias[l_conta_array].subserie_nf       = p_frete_sup.ssr_conhec
             LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
             LET ma_array_consistencias[l_conta_array].fornecedor        = p_frete_sup.cod_transpor
             LET ma_array_consistencias[l_conta_array].sequencia         = 0
             LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Frete: ", p_frete_sup.num_conhec," - ",p_frete_sup.ser_conhec," - ", p_frete_sup.ssr_conhec ," importado.ver consistencias via sup0580"
             LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
          END IF
       ELSE
          LET p_frete_sup.ies_conhec_erro = "N"

          WHENEVER ERROR CONTINUE
          UPDATE frete_sup SET frete_sup.* = p_frete_sup.*
           WHERE frete_sup.cod_empresa  = p_frete_sup.cod_empresa
             AND frete_sup.num_conhec   = p_frete_sup.num_conhec
             AND frete_sup.ser_conhec   = p_frete_sup.ser_conhec
             AND frete_sup.ssr_conhec   = p_frete_sup.ssr_conhec
             AND frete_sup.cod_transpor = p_frete_sup.cod_transpor
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("ATUALIZACAO","FRETE_SUP")
             LET m_houve_erro = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             LET m_transacao_ativa = FALSE
             CLOSE cl_relac_frete_nff #764215#
             EXIT FOREACH
          END IF

          IF m_ies_grava_erro_4 = "S" THEN
## OS 391495
             IF NOT sup0552_grava_liberacao_frete(p_frete_sup.cod_empresa, p_frete_sup.num_conhec, p_frete_sup.ser_conhec, p_frete_sup.ssr_conhec, p_frete_sup.cod_transpor, l_conta_array) THEN
                LET l_conta_array = l_conta_array + 1
             END IF
          END IF

       END IF
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("COMMIT")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("EFETIVACAO","FRETE_SUP_X_NFF")
          CALL log085_transacao("ROLLBACK") #OS596059
          LET m_transacao_ativa = FALSE
          CLOSE cl_relac_frete_nff #764215#
          EXIT FOREACH
       END IF
       LET m_transacao_ativa = FALSE

       CALL sup1473_integra_nf_cap_livro_fiscal("","","","FRETE",
                                                p_frete_sup.num_conhec,
                                                p_frete_sup.ser_conhec,
                                                p_frete_sup.ssr_conhec,
                                                p_frete_sup.cod_empresa,
                                                p_frete_sup.cod_transpor,"","")

       IF NOT supr6_contabilizacao_por_documento(p_frete_sup.cod_empresa,
                                                 p_frete_sup.num_conhec,
                                                 p_frete_sup.ser_conhec,
                                                 p_frete_sup.ssr_conhec,
                                                 "CON",
                                                 p_frete_sup.cod_transpor,
                                                 p_frete_sup.dat_entrada_conhec,
                                                 0,TRUE) THEN
          LET m_msg = " EMP ",p_frete_sup.cod_empresa, " CONHEC ",p_frete_sup.num_conhec USING "<<<<<<"
          LET m_msg = m_msg CLIPPED," - ",log0030_mensagem_get_texto()
          LET l_conta_div = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1
          LET ma_array_consistencias[l_conta_array].nota_fiscal       = p_frete_sup.num_conhec
          LET ma_array_consistencias[l_conta_array].serie_nota_fiscal = p_frete_sup.ser_conhec
          LET ma_array_consistencias[l_conta_array].subserie_nf       = p_frete_sup.ssr_conhec
          LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
          LET ma_array_consistencias[l_conta_array].fornecedor        = p_frete_sup.cod_transpor
          LET ma_array_consistencias[l_conta_array].sequencia         = 0
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = m_msg
          LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
       END IF

       LET l_conta_import = l_conta_import + 1

    END FOREACH
    FREE cl_relac_frete_nff #764215#
    CALL sup0552_insere_consistencia(TRUE)
    CLOSE WINDOW w_processo2
 END IF

 RETURN l_conta_div, l_conta_import

 END FUNCTION

#-----------------------------------------------------#
 FUNCTION sup0552_verifica_conta_relac(l_conta_div,
                                       l_conta_array)
#-----------------------------------------------------#
 DEFINE l_conta_div   SMALLINT,
        l_conta_array SMALLINT

 CALL con088_verifica_cod_conta(mr_w_sup0552_4.empresa,
                                mr_dest_frete_sup.num_conta_deb_desp,
                                "S",
                                TODAY)
    RETURNING mr_plano_contas.*, p_status

 IF p_status = FALSE THEN
    LET l_conta_div = l_conta_div + 1
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  =
        "Conta ",mr_dest_frete_sup.num_conta_deb_desp CLIPPED," relacionada frete nao cadastrada"
    RETURN l_conta_div,l_conta_array,FALSE
 ELSE
    IF mr_plano_contas.ies_titulo <> "N" THEN
       LET l_conta_div   = l_conta_div + 1
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
           "Conta relacionada frete nao pode ser titulo"
       RETURN l_conta_div,l_conta_array,FALSE
    ELSE
       IF mr_plano_contas.ies_sit_conta <> "A" THEN
          LET l_conta_div = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
              "Conta relacionada frete nao esta ativa"
          RETURN l_conta_div,l_conta_array,FALSE
       END IF
    END IF
 END IF

 RETURN l_conta_div,l_conta_array,TRUE

 END FUNCTION

#------------------------------------------------------#
 FUNCTION sup0552_carrega_chave_consiste(l_conta_array)
#------------------------------------------------------#
 DEFINE l_conta_array SMALLINT

 LET ma_array_consistencias[l_conta_array].nota_fiscal       =
     mr_w_sup0552_4.nota_fiscal
 LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
     mr_w_sup0552_4.serie_nota_fiscal
 LET ma_array_consistencias[l_conta_array].subserie_nf       =
     mr_w_sup0552_4.subserie_nf
 LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
     mr_w_sup0552_4.espc_nota_fiscal
 LET ma_array_consistencias[l_conta_array].fornecedor        =
     mr_w_sup0552_4.fornecedor
 LET ma_array_consistencias[l_conta_array].sequencia         = 0
 LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
 LET m_status_arquivo = 1
 LET m_houve_erro     = TRUE

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_grava_ar_pis_cofins(l_funcao)
#----------------------------------------------#
 DEFINE l_num_aviso_rec      LIKE aviso_rec.num_aviso_rec,
        l_num_nf             LIKE nf_sup.num_nf,
        l_ser_nf             LIKE nf_sup.ser_nf,
        l_cod_operacao       LIKE nf_sup.cod_operacao,
        l_cod_fornecedor     LIKE nf_sup.cod_fornecedor,
        l_achou              SMALLINT,
        l_ies_especie_nf     LIKE nf_sup.ies_especie_nf,
        l_funcao             CHAR(05)

 IF m_empr_utiliz_mp66 = "S"
 OR m_empr_utiliz_mp66 = "R" THEN
    IF l_funcao = "FRETE" THEN
       WHENEVER ERROR CONTINUE
       DELETE FROM sup_fr_pis_cofins
        WHERE empresa           = p_frete_sup.cod_empresa
          AND conhec_transporte = p_frete_sup.num_conhec
          AND serie_conhec      = p_frete_sup.ser_conhec
          AND subserie_conhec   = p_frete_sup.ssr_conhec
          AND transportador     = p_frete_sup.cod_transpor
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("EXCLUSAO","SUP_FR_PIS_COFINS")
          RETURN FALSE
       END IF

       IF supr12_calcula_pis_cofins_nf_sup_sup_frete_x(p_frete_sup.cod_empresa,
                                                       p_frete_sup.num_conhec,
                                                       p_frete_sup.ser_conhec,
                                                       p_frete_sup.ssr_conhec,
                                                       p_frete_sup.cod_transpor) = FALSE THEN
          RETURN FALSE
       END IF
    ELSE
       IF NOT sup0552_calcula_pis_cofins_ar(mr_nf_sup.cod_empresa, mr_nf_sup.num_aviso_rec,
                                            mr_nf_sup.num_nf, mr_nf_sup.ser_nf, mr_nf_sup.ssr_nf,
                                            mr_nf_sup.cod_operacao, mr_nf_sup.cod_fornecedor,
                                            mr_nf_sup.ies_especie_nf, mr_nf_sup.dat_entrada_nf, l_funcao) THEN
          RETURN FALSE
       END IF
    END IF
 END IF

 RETURN TRUE

 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup0552_busca_pct_bc_pis(l_funcao,
                                   l_cod_empresa,
                                   l_data_entrada,
                                   l_tipo_doc,
                                   l_num_seq)
#-------------------------------------------------#

  DEFINE l_mes_aux                SMALLINT, # OS 410817 - Winston
         l_ano_aux                INTEGER,  # OS 410817 - Winston
         l_cod_empresa            LIKE nf_sup.cod_empresa,
         l_data_entrada           LIKE nf_sup.dat_entrada_nf,
         l_utiliza_perc_mes_atual CHAR(01),
         l_funcao                 CHAR(08),
         lr_frete_sup_erro        RECORD LIKE frete_sup_erro.*,
         l_tipo_doc               CHAR(05),
         lr_nf_sup_erro           RECORD LIKE nf_sup_erro.*,
         l_num_seq                LIKE aviso_rec.num_seq

  INITIALIZE m_pct_bc_pis TO NULL

  LET l_mes_aux = MONTH(l_data_entrada)
  LET l_ano_aux = YEAR(l_data_entrada)

  WHENEVER ERROR CONTINUE
    SELECT pct_bas_calc
      INTO m_pct_bc_pis
      FROM sup_pct_bc_imposto
     WHERE imposto = "1"
       AND empresa = l_cod_empresa
       AND mes     = l_mes_aux
       AND ano     = l_ano_aux
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("LEITURA","SUP_PCT_BC_IMPOSTO")
     RETURN FALSE
  END IF

  IF m_pct_bc_pis IS NULL THEN
     INITIALIZE l_utiliza_perc_mes_atual TO NULL
     CALL log2250_busca_parametro(l_cod_empresa,"utiliza_perc_mes_atual")
        RETURNING l_utiliza_perc_mes_atual, p_status

     IF l_utiliza_perc_mes_atual IS NULL
     OR l_utiliza_perc_mes_atual = " " THEN
        LET l_utiliza_perc_mes_atual = "0"
     END IF

     IF l_funcao = "REDUCAO" THEN
        IF m_eh_background = FALSE THEN
           ERROR "Não possui percentual de redução de base PIS/COFINS para o período (SUP0988)"
           CALL LOG_refresh_display()
        END IF
     ELSE
        IF l_tipo_doc = "FRETE" THEN
           WHENEVER ERROR CONTINUE
             SELECT num_conhec
               FROM frete_sup_erro
              WHERE cod_empresa   = mr_frete_sup.cod_empresa
                AND cod_transpor  = mr_frete_sup.cod_transpor
                AND num_conhec    = mr_frete_sup.num_conhec
                AND ser_conhec    = mr_frete_sup.ser_conhec
                AND ssr_conhec    = mr_frete_sup.ssr_conhec
                AND des_pendencia = "Nao possui PCT redução base PIS/COFINS p/ período (SUP0988)"
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> -284 THEN
              IF l_utiliza_perc_mes_atual = 1 OR l_utiliza_perc_mes_atual = 3 THEN
                 RETURN FALSE
              ELSE
                 LET lr_frete_sup_erro.cod_empresa     = mr_frete_sup.cod_empresa
                 LET lr_frete_sup_erro.cod_transpor    = mr_frete_sup.cod_transpor
                 LET lr_frete_sup_erro.num_conhec      = mr_frete_sup.num_conhec
                 LET lr_frete_sup_erro.ser_conhec      = mr_frete_sup.ser_conhec
                 LET lr_frete_sup_erro.ssr_conhec      = mr_frete_sup.ssr_conhec
                 LET lr_frete_sup_erro.ies_origem_erro = "2"
                 LET lr_frete_sup_erro.ies_erro_grave  = "N"
                 LET lr_frete_sup_erro.des_pendencia   =
                     "Nao possui PCT redução base PIS/COFINS p/ período (SUP0988)"

                 WHENEVER ERROR CONTINUE
                   INSERT INTO frete_sup_erro(cod_empresa,
                                              cod_transpor,
                                              num_conhec,
                                              ser_conhec,
                                              ssr_conhec,
                                              des_pendencia,
                                              ies_origem_erro,
                                              ies_err_grave)
                   VALUES (lr_frete_sup_erro.cod_empresa,
                           lr_frete_sup_erro.cod_transpor,
                           lr_frete_sup_erro.num_conhec,
                           lr_frete_sup_erro.ser_conhec,
                           lr_frete_sup_erro.ssr_conhec,
                           lr_frete_sup_erro.des_pendencia,
                           lr_frete_sup_erro.ies_origem_erro,
                           lr_frete_sup_erro.ies_err_grave)
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode <> 0 THEN
                    LET m_houve_erro = TRUE
                    LET m_status_arquivo = 1
                 END IF
              END IF
           END IF
        ELSE
           WHENEVER ERROR CONTINUE
             SELECT num_aviso_rec
               FROM nf_sup_erro
              WHERE empresa       = mr_nf_sup.cod_empresa
                AND num_aviso_rec = mr_nf_sup.num_aviso_rec
                AND num_seq       = l_num_seq
                AND des_pendencia = "Nao possui PCT redução base PIS/COFINS p/ período (SUP0988)"
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> -284 THEN
              IF l_utiliza_perc_mes_atual = 1 OR l_utiliza_perc_mes_atual = 3 THEN
                 RETURN FALSE
              ELSE
                 LET lr_nf_sup_erro.empresa            = mr_nf_sup.cod_empresa
                 LET lr_nf_sup_erro.num_aviso_rec      = mr_nf_sup.num_aviso_rec
                 LET lr_nf_sup_erro.num_seq            = l_num_seq
                 LET lr_nf_sup_erro.ies_origem_erro    = "1"
                 LET lr_nf_sup_erro.ies_erro_grave     = "N"
                 LET lr_nf_sup_erro.num_transac        = 0
                 LET lr_nf_sup_erro.des_pendencia_item =
                     "Nao possui PCT redução base PIS/COFINS p/ período (SUP0988)"

                 WHENEVER ERROR CONTINUE
                   INSERT INTO nf_sup_erro ( empresa, num_aviso_rec, num_seq, des_pendencia_item, ies_origem_erro, ies_erro_grave )
          VALUES ( lr_nf_sup_erro.empresa, lr_nf_sup_erro.num_aviso_rec, lr_nf_sup_erro.num_seq, lr_nf_sup_erro.des_pendencia_item, lr_nf_sup_erro.ies_origem_erro, lr_nf_sup_erro.ies_erro_grave)
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode <> 0 THEN
                    LET m_houve_erro = TRUE
                    LET m_status_arquivo = 1
                 END IF
              END IF
           END IF
        END IF
     END IF
     RETURN FALSE
  END IF

  RETURN TRUE

END FUNCTION

#-------------------------------------#
 FUNCTION sup0552_mostra_erro_nf_sup()
#-------------------------------------#

  DEFINE l_texto            CHAR(75),
         l_ind              SMALLINT

  IF m_arg = FALSE THEN
    OPEN WINDOW w_erro AT 02,02 WITH 21 ROWS, 78 COLUMNS
         ATTRIBUTE(BORDER, PROMPT LINE LAST, MESSAGE LINE LAST)

     DISPLAY "                             A T E N Ç Ã O  ! ! !                             " AT 01,01 ATTRIBUTES(REVERSE)
    DISPLAY "                                                                 Página: 01/03" AT 02,01

     DISPLAY "Problema INCLUSÃO tabela NF_SUP. Sqlca.Sqlcode: ",sqlca.sqlcode AT 03,02

    IF mr_nf_sup.cod_empresa IS NULL THEN
        DISPLAY "mr_nf_sup.cod_empresa...........: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_nf_sup.cod_empresa...........: ",mr_nf_sup.cod_empresa AT 05,02
    END IF
    IF mr_nf_sup.cod_empresa_estab IS NULL THEN
        DISPLAY "mr_nf_sup.cod_empresa_estab.....: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_nf_sup.cod_empresa_estab.....: ",mr_nf_sup.cod_empresa_estab AT 06,02
    END IF
    IF mr_nf_sup.num_nf IS NULL THEN
        DISPLAY "mr_nf_sup.num_nf................: <NULO>" AT 07,02
    ELSE
        DISPLAY "mr_nf_sup.num_nf................: ",mr_nf_sup.num_nf AT 07,02
    END IF
    IF mr_nf_sup.ser_nf IS NULL THEN
        DISPLAY "mr_nf_sup.ser_nf................: <NULO>" AT 08,02
    ELSE
        DISPLAY "mr_nf_sup.ser_nf................: ",mr_nf_sup.ser_nf AT 08,02
    END IF
    IF mr_nf_sup.ssr_nf IS NULL THEN
        DISPLAY "mr_nf_sup.ssr_nf................: <NULO>" AT 09,02
    ELSE
        DISPLAY "mr_nf_sup.ssr_nf................: ",mr_nf_sup.ssr_nf AT 09,02
    END IF
    IF mr_nf_sup.ies_especie_nf IS NULL THEN
        DISPLAY "mr_nf_sup.ies_especie_nf........: <NULO>" AT 10,02
    ELSE
        DISPLAY "mr_nf_sup.ies_especie_nf........: ",mr_nf_sup.ies_especie_nf AT 10,02
    END IF
    IF mr_nf_sup.cod_fornecedor IS NULL THEN
        DISPLAY "mr_nf_sup.cod_fornecedor........: <NULO>" AT 11,02
    ELSE
        DISPLAY "mr_nf_sup.cod_fornecedor........: ",mr_nf_sup.cod_fornecedor AT 11,02
    END IF
    IF mr_nf_sup.num_conhec IS NULL THEN
        DISPLAY "mr_nf_sup.num_conhec............: <NULO>" AT 12,02
    ELSE
        DISPLAY "mr_nf_sup.num_conhec............: ",mr_nf_sup.num_conhec AT 12,02
    END IF
    IF mr_nf_sup.ser_conhec IS NULL THEN
        DISPLAY "mr_nf_sup.ser_conhec............: <NULO>" AT 13,02
    ELSE
        DISPLAY "mr_nf_sup.ser_conhec............: ",mr_nf_sup.ser_conhec AT 13,02
    END IF
    IF mr_nf_sup.ssr_conhec IS NULL THEN
        DISPLAY "mr_nf_sup.ssr_conhec............: <NULO>" AT 14,02
    ELSE
        DISPLAY "mr_nf_sup.ssr_conhec............: ",mr_nf_sup.ssr_conhec AT 14,02
    END IF
    IF mr_nf_sup.cod_transpor IS NULL THEN
        DISPLAY "mr_nf_sup.cod_transpor..........: <NULO>" AT 15,02
    ELSE
        DISPLAY "mr_nf_sup.cod_transpor..........: ",mr_nf_sup.cod_transpor AT 15,02
    END IF
    IF mr_nf_sup.num_aviso_rec IS NULL THEN
        DISPLAY "mr_nf_sup.num_aviso_rec.........: <NULO>" AT 16,02
    ELSE
        DISPLAY "mr_nf_sup.num_aviso_rec.........: ",mr_nf_sup.num_aviso_rec AT 16,02
    END IF
    IF mr_nf_sup.dat_emis_nf IS NULL THEN
        DISPLAY "mr_nf_sup.dat_emis_nf...........: <NULO>" AT 17,02
    ELSE
        DISPLAY "mr_nf_sup.dat_emis_nf...........: ",mr_nf_sup.dat_emis_nf AT 17,02
    END IF
    IF mr_nf_sup.dat_entrada_nf IS NULL THEN
        DISPLAY "mr_nf_sup.dat_entrada_nf........: <NULO>" AT 18,02
    ELSE
        DISPLAY "mr_nf_sup.dat_entrada_nf........: ",mr_nf_sup.dat_entrada_nf AT 18,02
    END IF
    IF mr_nf_sup.cod_regist_entrada IS NULL THEN
        DISPLAY "mr_nf_sup.cod_regist_entrada....: <NULO>" AT 19,02
    ELSE
        DISPLAY "mr_nf_sup.cod_regist_entrada....: ",mr_nf_sup.cod_regist_entrada AT 19,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    LET l_texto = " "
    FOR l_ind = 05 TO 19
        DISPLAY l_texto AT l_ind,02
    END FOR

    DISPLAY "                                                                 Página: 02/03" AT 02,01

    IF mr_nf_sup.val_tot_nf_c IS NULL THEN
        DISPLAY "mr_nf_sup.val_tot_nf_c..........: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_nf_sup.val_tot_nf_c..........: ",mr_nf_sup.val_tot_nf_c AT 05,02
    END IF
    IF mr_nf_sup.val_tot_nf_d IS NULL THEN
        DISPLAY "mr_nf_sup.val_tot_nf_d..........: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_nf_sup.val_tot_nf_d..........: ",mr_nf_sup.val_tot_nf_d AT 06,02
    END IF
    IF mr_nf_sup.val_tot_icms_nf_c IS NULL THEN
        DISPLAY "mr_nf_sup.val_tot_icms_nf_c.....: <NULO>" AT 07,02
    ELSE
        DISPLAY "mr_nf_sup.val_tot_icms_nf_c.....: ",mr_nf_sup.val_tot_icms_nf_c AT 07,02
    END IF
    IF mr_nf_sup.val_tot_icms_nf_d IS NULL THEN
        DISPLAY "mr_nf_sup.val_tot_icms_nf_d.....: <NULO>" AT 08,02
    ELSE
        DISPLAY "mr_nf_sup.val_tot_icms_nf_d.....: ",mr_nf_sup.val_tot_icms_nf_d AT 08,02
    END IF
    IF mr_nf_sup.val_tot_desc IS NULL THEN
        DISPLAY "mr_nf_sup.val_tot_desc..........: <NULO>" AT 09,02
    ELSE
        DISPLAY "mr_nf_sup.val_tot_desc..........: ",mr_nf_sup.val_tot_desc AT 09,02
    END IF
    IF mr_nf_sup.val_tot_acresc IS NULL THEN
        DISPLAY "mr_nf_sup.val_tot_acresc........: <NULO>" AT 10,02
    ELSE
        DISPLAY "mr_nf_sup.val_tot_acresc........: ",mr_nf_sup.val_tot_acresc AT 10,02
    END IF
    IF mr_nf_sup.val_ipi_nf IS NULL THEN
        DISPLAY "mr_nf_sup.val_ipi_nf............: <NULO>" AT 11,02
    ELSE
        DISPLAY "mr_nf_sup.val_ipi_nf............: ",mr_nf_sup.val_ipi_nf AT 11,02
    END IF
    IF mr_nf_sup.val_ipi_calc IS NULL THEN
        DISPLAY "mr_nf_sup.val_ipi_calc..........: <NULO>" AT 12,02
    ELSE
        DISPLAY "mr_nf_sup.val_ipi_calc..........: ",mr_nf_sup.val_ipi_calc AT 12,02
    END IF
    IF mr_nf_sup.val_despesa_aces IS NULL THEN
        DISPLAY "mr_nf_sup.val_despesa_aces......: <NULO>" AT 13,02
    ELSE
        DISPLAY "mr_nf_sup.val_despesa_aces......: ",mr_nf_sup.val_despesa_aces AT 13,02
    END IF
    IF mr_nf_sup.val_adiant IS NULL THEN
        DISPLAY "mr_nf_sup.val_adiant............: <NULO>" AT 14,02
    ELSE
        DISPLAY "mr_nf_sup.val_adiant............: ",mr_nf_sup.val_adiant AT 14,02
    END IF
    IF mr_nf_sup.ies_tip_frete IS NULL THEN
        DISPLAY "mr_nf_sup.ies_tip_frete.........: <NULO>" AT 15,02
    ELSE
        DISPLAY "mr_nf_sup.ies_tip_frete.........: ",mr_nf_sup.ies_tip_frete AT 15,02
    END IF
    IF mr_nf_sup.cnd_pgto_nf IS NULL THEN
        DISPLAY "mr_nf_sup.cnd_pgto_nf...........: <NULO>" AT 16,02
    ELSE
        DISPLAY "mr_nf_sup.cnd_pgto_nf...........: ",mr_nf_sup.cnd_pgto_nf AT 16,02
    END IF
    IF mr_nf_sup.cod_mod_embar IS NULL THEN
        DISPLAY "mr_nf_sup.cod_mod_embar.........: <NULO>" AT 17,02
    ELSE
        DISPLAY "mr_nf_sup.cod_mod_embar.........: ",mr_nf_sup.cod_mod_embar AT 17,02
    END IF
    IF mr_nf_sup.ies_nf_com_erro IS NULL THEN
        DISPLAY "mr_nf_sup.ies_nf_com_erro.......: <NULO>" AT 18,02
    ELSE
        DISPLAY "mr_nf_sup.ies_nf_com_erro.......: ",mr_nf_sup.ies_nf_com_erro AT 18,02
    END IF
    IF mr_nf_sup.nom_resp_aceite_er IS NULL THEN
        DISPLAY "mr_nf_sup.nom_resp_aceite_er....: <NULO>" AT 19,02
    ELSE
        DISPLAY "mr_nf_sup.nom_resp_aceite_er....: ",mr_nf_sup.nom_resp_aceite_er AT 19,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    LET l_texto = " "
    FOR l_ind = 05 TO 19
        DISPLAY l_texto AT l_ind,02
    END FOR

    DISPLAY "                                                                 Página: 03/03" AT 02,01

    IF mr_nf_sup.ies_incl_cap IS NULL THEN
        DISPLAY "mr_nf_sup.ies_incl_cap..........: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_nf_sup.ies_incl_cap..........: ",mr_nf_sup.ies_incl_cap AT 05,02
    END IF
    IF mr_nf_sup.ies_incl_contab IS NULL THEN
        DISPLAY "mr_nf_sup.ies_incl_contab.......: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_nf_sup.ies_incl_contab.......: ",mr_nf_sup.ies_incl_contab AT 06,02
    END IF
    IF mr_nf_sup.cod_operacao IS NULL THEN
        DISPLAY "mr_nf_sup.cod_operacao..........: <NULO>" AT 07,02
    ELSE
        DISPLAY "mr_nf_sup.cod_operacao..........: ",mr_nf_sup.cod_operacao AT 07,02
    END IF
    IF mr_nf_sup.ies_calc_subst IS NULL THEN
        DISPLAY "mr_nf_sup.ies_calc_subst........: <NULO>" AT 08,02
    ELSE
        DISPLAY "mr_nf_sup.ies_calc_subst........: ",mr_nf_sup.ies_calc_subst AT 08,02
    END IF
    IF mr_nf_sup.val_bc_subst_d IS NULL THEN
        DISPLAY "mr_nf_sup.val_bc_subst_d........: <NULO>" AT 09,02
    ELSE
        DISPLAY "mr_nf_sup.val_bc_subst_d........: ",mr_nf_sup.val_bc_subst_d AT 09,02
    END IF
    IF mr_nf_sup.val_icms_subst_d IS NULL THEN
        DISPLAY "mr_nf_sup.val_icms_subst_d......: <NULO>" AT 10,02
    ELSE
        DISPLAY "mr_nf_sup.val_icms_subst_d......: ",mr_nf_sup.val_icms_subst_d AT 10,02
    END IF
    IF mr_nf_sup.val_bc_subst_c IS NULL THEN
        DISPLAY "mr_nf_sup.val_bc_subst_c........: <NULO>" AT 11,02
    ELSE
        DISPLAY "mr_nf_sup.val_bc_subst_c........: ",mr_nf_sup.val_bc_subst_c AT 11,02
    END IF
    IF mr_nf_sup.val_icms_subst_c IS NULL THEN
        DISPLAY "mr_nf_sup.val_icms_subst_c......: <NULO>" AT 12,02
    ELSE
        DISPLAY "mr_nf_sup.val_icms_subst_c......: ",mr_nf_sup.val_icms_subst_c AT 12,02
    END IF
    IF mr_nf_sup.cod_imp_renda IS NULL THEN
        DISPLAY "mr_nf_sup.cod_imp_renda.........: <NULO>" AT 13,02
    ELSE
        DISPLAY "mr_nf_sup.cod_imp_renda.........: ",mr_nf_sup.cod_imp_renda AT 13,02
    END IF
    IF mr_nf_sup.val_imp_renda IS NULL THEN
        DISPLAY "mr_nf_sup.val_imp_renda.........: <NULO>" AT 14,02
    ELSE
        DISPLAY "mr_nf_sup.val_imp_renda.........: ",mr_nf_sup.val_imp_renda AT 14,02
    END IF
    IF mr_nf_sup.ies_situa_import IS NULL THEN
        DISPLAY "mr_nf_sup.ies_situa_import......: <NULO>" AT 15,02
    ELSE
        DISPLAY "mr_nf_sup.ies_situa_import......: ",mr_nf_sup.ies_situa_import AT 15,02
    END IF
    IF mr_nf_sup.val_bc_imp_renda IS NULL THEN
        DISPLAY "mr_nf_sup.val_bc_imp_renda......: <NULO>" AT 16,02
    ELSE
        DISPLAY "mr_nf_sup.val_bc_imp_renda......: ",mr_nf_sup.val_bc_imp_renda AT 16,02
    END IF
    IF mr_nf_sup.ies_nf_aguard_nfe IS NULL THEN
        DISPLAY "mr_nf_sup.ies_nf_aguard_nfe.....: <NULO>" AT 17,02
    ELSE
        DISPLAY "mr_nf_sup.ies_nf_aguard_nfe.....: ",mr_nf_sup.ies_nf_aguard_nfe AT 17,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    CLOSE WINDOW w_erro
 END IF

END FUNCTION

#-----------------------------------------------------------------------------#
 FUNCTION sup0552_calcula_piscofins_frvnd(l_conta_div, l_conta_array,l_funcao, l_tipo)
#-----------------------------------------------------------------------------#
  DEFINE l_conta_div     SMALLINT,
         l_conta_array   SMALLINT,
         l_funcao        CHAR(06),
         l_tipo          CHAR(20)

  WHENEVER ERROR CONTINUE
  SELECT tipo_registro      ,
         empresa            ,
         empresa_estabel    ,
         nota_fiscal        ,
         serie_nota_fiscal  ,
         subserie_nf        ,
         espc_nota_fiscal   ,
         fornecedor         ,
         dat_emis_nf        ,
         dat_ent_nf         ,
         cond_pagto         ,
         modo_embarque      ,
         tip_nota_fiscal    ,
         num_conhec_frete   ,
         serie_conhec_frete ,
         subserie_conh_fret ,
         transportador      ,
         val_tot_decl_nf    ,
         val_tot_decl_icms  ,
         val_tot_decl_ipi   ,
         cfop               ,
         cfop_compl         ,
         processado         ,
         sequencia          ,
         pedido             ,
         ordem_compra       ,
         item               ,
         pre_unit_nf        ,
         qtd_decl_nf        ,
         pct_ipi            ,
         bas_calc_ipi       ,
         val_ipi            ,
         pct_icms           ,
         bas_calc_icms      ,
         val_icms           ,
         val_frete          ,
         pct_icms_frete     ,
         bc_icms_frete
    FROM w_sup0552_4
   WHERE w_sup0552_4.empresa           = mr_w_sup0552_4.empresa
     AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
     AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
     AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4.subserie_nf
     AND w_sup0552_4.fornecedor        = mr_w_sup0552_4.fornecedor
     AND w_sup0552_4.tipo_registro     = 'F'
  WHENEVER ERROR STOP

  IF (l_funcao = "CONHEC" AND sqlca.sqlcode = NOTFOUND) OR
      l_funcao = "RELAC" THEN
     IF m_empr_utiliz_mp66 = "S"
     OR m_empr_utiliz_mp66 = "R" THEN
        CALL sup1047_cria_temp()
        IF NOT sup1047_rateio_frete_venda() THEN
           LET l_conta_div = l_conta_div + 1
              LET l_conta_array = l_conta_array + 1
           IF l_funcao = "CONHEC" THEN
              CALL sup0552_carrega_chave_consiste(l_conta_array)
           ELSE
              LET ma_array_consistencias[l_conta_array].nota_fiscal       =
                  mr_relac_nff.num_conhec
              LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
                  mr_relac_nff.serie_conhec
              LET ma_array_consistencias[l_conta_array].subserie_nf       =
                  mr_relac_nff.subserie_conhec
              LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
                  mr_relac_nff.especie
              LET ma_array_consistencias[l_conta_array].fornecedor        =
                  mr_relac_nff.transportador
              LET ma_array_consistencias[l_conta_array].sequencia         = 0
           END IF
           LET ma_array_consistencias[l_conta_array].txt_consistencia  =
               "Probl.rateio frete venda calculo PIS/COFINS"
           LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
           LET m_houve_erro     = TRUE
           RETURN FALSE
        END IF
     END IF
  END IF
  RETURN TRUE
 END FUNCTION

#-----------------------------------------#
 FUNCTION sup0552_verifica_grupo_icms_st(l_conta_array)
#-----------------------------------------#
  DEFINE l_atualiza           SMALLINT,
         l_uni_feder_transp   LIKE fornecedor.cod_uni_feder,
         l_status             SMALLINT,
         l_cod_fornecedor     LIKE fornecedor.cod_fornecedor,
         l_uni_feder_forn     LIKE fornecedor.cod_uni_feder,
         l_conta_array        SMALLINT

  LET l_atualiza = FALSE

  INITIALIZE l_uni_feder_transp TO NULL
  LET l_uni_feder_transp = sup0552_verifica_fornec_x_transp(mr_frete_sup.cod_transpor)

  WHENEVER ERROR CONTINUE
  SELECT gru_ctr_desp
    FROM icms
   WHERE cod_empresa      = mr_frete_sup.cod_empresa
     AND gru_ctr_desp     = m_gru_ctr_desp_frt
     AND cod_uni_feder    = l_uni_feder_transp
     AND pct_icms         > 0
     AND ies_subst_tribut = 'S'
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> -284 THEN
     RETURN TRUE
  END IF

  IF mr_frete_sup.tip_frete = "C" THEN
     INITIALIZE l_cod_fornecedor TO NULL
     WHENEVER ERROR CONTINUE
     DECLARE cq_nf_sup CURSOR FOR
     SELECT cod_fornecedor
       FROM nf_sup
      WHERE cod_empresa  = mr_frete_sup.cod_empresa
        AND num_conhec   = mr_frete_sup.num_conhec
        AND ser_conhec   = mr_frete_sup.ser_conhec
        AND ssr_conhec   = mr_frete_sup.ssr_conhec
        AND cod_transpor = mr_frete_sup.cod_transpor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DECLARE","CQ_NF_SUP")
     END IF

     WHENEVER ERROR CONTINUE
     OPEN cq_nf_sup
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("OPEN","CQ_NF_SUP")
     END IF
     FETCH cq_nf_sup INTO l_cod_fornecedor
     CLOSE cq_nf_sup
     FREE cq_nf_sup
     WHENEVER ERROR STOP

     INITIALIZE l_uni_feder_forn TO NULL
     LET l_uni_feder_forn = sup0552_verifica_fornec_x_transp(l_cod_fornecedor)

     IF l_uni_feder_forn =  'SP' AND
        l_uni_feder_transp <> 'SP' THEN
        LET l_atualiza = TRUE
     END IF
  ELSE
     WHENEVER ERROR CONTINUE
     SELECT empresa.uni_feder
       FROM empresa
      WHERE empresa.cod_empresa = mr_frete_sup.cod_empresa
        AND empresa.uni_feder   = 'SP'
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 AND l_uni_feder_transp <> 'SP' THEN
        LET l_atualiza = TRUE
     END IF
  END IF

  IF l_atualiza THEN
     WHENEVER ERROR CONTINUE
     SELECT parametro_val
       FROM sup_par_frete
      WHERE empresa         = mr_frete_sup.cod_empresa
        AND num_conhec      = mr_frete_sup.num_conhec
        AND serie_conhec    = mr_frete_sup.ser_conhec
        AND subserie_conhec = mr_frete_sup.ssr_conhec
        AND transportadora  = mr_frete_sup.cod_transpor
        AND parametro       = 'grupo_frete_st'
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 THEN
        WHENEVER ERROR CONTINUE
        UPDATE sup_par_frete
           SET parametro_val   = m_gru_ctr_desp_frt
         WHERE empresa         = mr_frete_sup.cod_empresa
           AND num_conhec      = mr_frete_sup.num_conhec
           AND serie_conhec    = mr_frete_sup.ser_conhec
           AND subserie_conhec = mr_frete_sup.ssr_conhec
           AND transportadora  = mr_frete_sup.cod_transpor
           AND parametro       = 'grupo_frete_st'
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("MODIFICACAO","SUP_PAR_FRETE")
           RETURN FALSE
        END IF
     ELSE
        WHENEVER ERROR CONTINUE
        INSERT INTO sup_par_frete(empresa,
                                  num_conhec,
                                  serie_conhec,
                                  subserie_conhec,
                                  transportadora,
                                  parametro,
                                  par_ind_especial,
                                  parametro_texto,
                                  parametro_val,
                                  parametro_dat)
                           VALUES(mr_frete_sup.cod_empresa,
                                  mr_frete_sup.num_conhec,
                                  mr_frete_sup.ser_conhec,
                                  mr_frete_sup.ssr_conhec,
                                  mr_frete_sup.cod_transpor,
                                  'grupo_frete_st',
                                  NULL,
                                  NULL,
                                  m_gru_ctr_desp_frt,
                                  TODAY)
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           LET m_houve_erro = TRUE
           LET l_conta_array = l_conta_array + 1
           CALL sup0552_carrega_chave_consiste(l_conta_array)
           LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SUP_PAR_FRETE "
           LET m_status_arquivo = 1
           RETURN FALSE
        END IF
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#---------------------------------------------------------#
 FUNCTION sup0552_verifica_fornec_x_transp(l_forn_x_transp)
#---------------------------------------------------------#

  DEFINE l_cod_uni_feder     LIKE fornecedor.cod_uni_feder,
         l_forn_X_transp     LIKE fornecedor.cod_fornecedor

  INITIALIZE l_cod_uni_feder TO NULL

  WHENEVER ERROR CONTINUE
  SELECT cod_uni_feder
    INTO l_cod_uni_feder
    FROM fornecedor
   WHERE cod_fornecedor = l_forn_x_transp
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("SELECT","FORNECEDOR")
  END IF

  RETURN l_cod_uni_feder

 END FUNCTION

#---------------------------------#
 FUNCTION sup0552_informar()
#---------------------------------#
  DISPLAY p_cod_empresa TO cod_empresa

  CALL sup0552_localiza_par_sup_pad()
  IF m_versao_texto IS NOT NULL THEN
     LET m_nom_arquivo = p_cod_empresa, "SUP0552", m_versao_texto USING "&&&", ".REC"
  ELSE
     LET m_nom_arquivo = m_nom_arquivo_pad
  END IF

  LET int_flag = 0

  CALL log006_exibe_teclas('01 02 07' ,p_versao)
  CURRENT WINDOW IS w_sup0552

  INPUT m_nom_arquivo WITHOUT DEFAULTS FROM nom_arquivo

    AFTER FIELD nom_arquivo
       IF NOT sup0552_valida_arquivo() THEN
          CALL log0030_mensagem("Arquivo já processado.", "INFO")
          NEXT FIELD nom_arquivo
       END IF

    AFTER INPUT
       IF int_flag = 0 THEN
          IF m_nom_arquivo IS NULL THEN
             CALL log0030_mensagem(" Informe o nome do arquivo de importação. ", "info")
             NEXT FIELD nom_arquivo
          END IF
       END IF

    ON KEY (control-w)
       #lds IF NOT LOG_logix_versao5() THEN
       #lds CONTINUE INPUT
       #lds END IF
       #lds IF NOT LOG_logix_versao5() THEN
       #lds CONTINUE INPUT
       #lds END IF
       CALL sup0552_help()

  END INPUT

  LET m_nom_arquivo_pad = m_nom_arquivo

END FUNCTION

#----------------------#
 FUNCTION sup0552_help()
#----------------------#

   CASE
     WHEN infield(nom_arquivo)            CALL showhelp(101)
   END CASE

 END FUNCTION

#--------------------------------#
 FUNCTION sup0552_valida_arquivo()
#--------------------------------#

  IF m_nom_arquivo = m_nom_arquivo_pad THEN
     RETURN TRUE
  END IF

  WHENEVER ERROR CONTINUE
  SELECT dat_processamento
    FROM sup_ctr_nf_import
   WHERE empresa = p_cod_empresa
     AND nom_arq = m_nom_arquivo
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     RETURN FALSE
  ELSE
    IF sqlca.sqlcode < 0 THEN
       CALL log003_err_sql("LEITURA","SUP_CTR_NF_IMPORT")
       RETURN FALSE
    END IF
  END IF

  RETURN TRUE

 END FUNCTION

#--------------------------------------#
 FUNCTION sup0552_localiza_par_sup_pad()
#--------------------------------------#
   INITIALIZE m_versao_texto TO NULL
   WHENEVER ERROR CONTINUE
   SELECT par_val INTO m_versao_texto
     FROM par_sup_pad
    WHERE par_sup_pad.cod_empresa = p_cod_empresa
      AND par_sup_pad.cod_parametro = "val_versao_texto"
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("SELECT","PAR_SUP_PAD")
   END IF
END FUNCTION

#---------------------------------------#
 FUNCTION sup0552_atualiza_par_sup_pad()
#---------------------------------------#
   DEFINE l_nom_arquivo  LIKE sup_ctr_nf_import.nom_arq,
          l_erro         SMALLINT

   LET l_nom_arquivo = p_cod_empresa, "SUP0552", m_versao_texto USING "&&&", ".REC"

   IF m_versao_texto IS NULL OR
      (m_nom_arquivo <> l_nom_arquivo) THEN
      RETURN TRUE
   END IF

   LET l_erro = FALSE

   WHENEVER ERROR CONTINUE
   DECLARE cq_par_sup_pad CURSOR FOR
      SELECT par_val
        INTO m_versao_texto
        FROM par_sup_pad
       WHERE par_sup_pad.cod_empresa = p_cod_empresa
         AND par_sup_pad.cod_parametro = "val_versao_texto"
   FOR UPDATE
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("DECLARE","CQ_PAR_SUP_PAD")
   END IF

   WHENEVER ERROR CONTINUE
   OPEN cq_par_sup_pad
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("OPEN","CQ_PAR_SUP_PAD")
   END IF

   WHENEVER ERROR CONTINUE
   FETCH cq_par_sup_pad
   WHENEVER ERROR STOP

   CASE
      WHEN sqlca.sqlcode = 0
         EXIT CASE

      WHEN sqlca.sqlcode = 100
         CALL log0030_mensagem(" Registro não mais existe na tabela. Execute a consulta novamente. ","info")
         RETURN FALSE

      WHEN sqlca.sqlcode = -250
         CALL log0030_mensagem(" Registro sendo atualizado por outro usuário. Aguarde e tente novamente. ","info")
         RETURN FALSE

      OTHERWISE
         CALL log003_err_sql("UPDATE","PAR_SUP_PAD")
         RETURN FALSE
   END CASE

   LET m_versao_texto = m_versao_texto + 1

   WHENEVER ERROR CONTINUE

   UPDATE par_sup_pad SET par_sup_pad.par_val = m_versao_texto
    WHERE CURRENT OF cq_par_sup_pad

   WHENEVER ERROR STOP

   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("ATUALIZACAO","PAR_SUP_PAD")
      CLOSE cq_par_sup_pad
      FREE  cq_par_sup_pad #764215#
      RETURN FALSE
   ELSE
      CLOSE cq_par_sup_pad
      FREE  cq_par_sup_pad #764215#
      RETURN TRUE
   END IF
END FUNCTION

#--------------------------------------#
 FUNCTION sup0552_grupo_despesa_frete(l_tipo)
#--------------------------------------#
  DEFINE l_tipo_st_frete     CHAR(01),
         l_tipo              CHAR(20)

  INITIALIZE l_tipo_st_frete TO NULL
  WHENEVER ERROR CONTINUE
  SELECT w_sup0552_4.tip_nota_fiscal
    INTO l_tipo_st_frete
    FROM w_sup0552_4
   WHERE w_sup0552_4.empresa           = mr_w_sup0552_4.empresa
     AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
     AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
     AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4.subserie_nf
     AND w_sup0552_4.espc_nota_fiscal  = "COV"
     AND w_sup0552_4.fornecedor        = mr_w_sup0552_4.fornecedor
     AND w_sup0552_4.tipo_registro     = "L"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode < 0 THEN
     CALL log003_err_sql("LEITURA","W_SUP0552_4-TIPO L")
     RETURN m_cod_grp_despesa
  END IF

  IF l_tipo_st_frete IS NULL OR l_tipo_st_frete = " " THEN
     RETURN m_cod_grp_despesa
  ELSE
     IF l_tipo_st_frete = "M" THEN
        IF m_grp_desp_st_remet IS NOT NULL THEN
           RETURN m_grp_desp_st_remet
        ELSE
           RETURN m_cod_grp_despesa
        END IF
     ELSE
        RETURN m_cod_grp_despesa
     END IF
  END IF

 END FUNCTION

#--------------------------------------------------------#
 FUNCTION sup0552_calcula_pis_cofins_ar(l_cod_empresa,
                                        l_num_aviso_rec,
                                        l_num_nf,
                                        l_ser_nf,
                                        l_ssr_nf,
                                        l_cod_operacao,
                                        l_cod_fornecedor,
                                        l_ies_especie_nf,
                                        l_data_entrada,
                                        l_tipo_doc)
#--------------------------------------------------------#
  DEFINE l_cod_empresa        LIKE aviso_rec.cod_empresa,
         l_num_aviso_rec      LIKE aviso_rec.num_aviso_rec,
         l_num_nf             LIKE nf_sup.num_nf,
         l_ser_nf             LIKE nf_sup.ser_nf,
         l_ssr_nf             LIKE nf_sup.ssr_nf,
         l_cod_operacao       LIKE nf_sup.cod_operacao,
         l_num_seq            LIKE aviso_rec.num_seq,
         l_val_liquido_item   LIKE aviso_rec.val_liquido_item,
         l_cod_item           LIKE aviso_rec.cod_item,
         l_cod_fornecedor     LIKE nf_sup.cod_fornecedor,
         l_val_frete          LIKE aviso_rec.val_frete,
         l_cod_fiscal_compl   LIKE aviso_rec_compl.cod_fiscal_compl,
         l_ies_nf_transf      SMALLINT,
         l_ies_especie_nf     LIKE nf_sup.ies_especie_nf,
         l_status             SMALLINT,
         l_ies_tip_entrada    LIKE cod_fiscal_sup.ies_tip_entrada,
         l_ies_tip_incid_ipi  LIKE aviso_rec.ies_tip_incid_ipi,
         l_val_ipi_decl_item  LIKE aviso_rec.val_ipi_decl_item,
         l_val_ipi_calc_item  LIKE aviso_rec.val_ipi_calc_item,
         l_houve_erro         SMALLINT,
         l_data_entrada       LIKE nf_sup.dat_entrada_nf,
         l_ies_cred_pis       CHAR(01),
         l_tipo_doc           CHAR(05)

  INITIALIZE l_cod_fiscal_compl TO NULL
  WHENEVER ERROR CONTINUE
  SELECT cod_fiscal_compl
    INTO l_cod_fiscal_compl
    FROM aviso_rec_compl
   WHERE cod_empresa   = l_cod_empresa
     AND num_aviso_rec = l_num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("SELECT","AVISO_REC_COMPL")
  END IF

  LET l_houve_erro = FALSE

  INITIALIZE l_num_seq,
             l_val_liquido_item,
             l_cod_item,
             l_val_frete,
             l_ies_tip_incid_ipi,
             l_val_ipi_decl_item,
             l_val_ipi_calc_item TO NULL

 WHENEVER ERROR CONTINUE
  DECLARE cq_it_pis2 CURSOR WITH HOLD FOR
   SELECT num_seq,
          val_liquido_item,
          cod_item,
          val_frete,
          ies_tip_incid_ipi,
          val_ipi_decl_item,
          val_ipi_calc_item
     FROM aviso_rec
    WHERE cod_empresa   = l_cod_empresa
      AND num_aviso_rec = l_num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_IT_PIS2")
 END IF

  WHENEVER ERROR CONTINUE
  FOREACH cq_it_pis2 INTO l_num_seq,
                          l_val_liquido_item,
                          l_cod_item,
                          l_val_frete,
                          l_ies_tip_incid_ipi,
                          l_val_ipi_decl_item,
                          l_val_ipi_calc_item
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("FOREACH","CQ_IT_PIS2")
     END IF

     CALL sup0782_busca_param_item(l_cod_empresa,l_cod_item) RETURNING l_ies_cred_pis

     IF m_empr_utiliz_mp66 = "R" THEN
        IF NOT sup0552_busca_pct_bc_pis("REDUCAO", l_cod_empresa, l_data_entrada, l_tipo_doc, l_num_seq) THEN
           LET l_houve_erro = TRUE
           CLOSE cq_it_pis2 #764215#
           EXIT FOREACH
        END IF
        LET l_val_liquido_item = (l_val_liquido_item * m_pct_bc_pis)/100
        IF l_val_frete > 0 THEN
           LET l_val_frete = (l_val_frete * m_pct_bc_pis)/100
        END IF
     ELSE
        IF l_ies_cred_pis = "R" THEN
           IF sup0552_busca_pct_bc_pis("PARCIAL", l_cod_empresa, l_data_entrada, l_tipo_doc, l_num_seq) THEN
              LET l_val_liquido_item = (l_val_liquido_item * m_pct_bc_pis)/100

              IF l_val_frete > 0 THEN
                 LET l_val_frete = (l_val_frete * m_pct_bc_pis)/100
              END IF
           END IF
        END IF
     END IF

     LET l_ies_nf_transf = FALSE
     ### Verifica se a nota relacionada ao frete eh de transferencia
     IF sup0812_verifica_nota_transferencia(l_cod_empresa,
                                            l_num_aviso_rec,
                                            l_num_nf,
                                            l_ser_nf,
                                            l_ssr_nf,
                                            l_cod_fornecedor,
                                            l_cod_operacao,
                                            l_cod_fiscal_compl) THEN
        LET l_ies_nf_transf = TRUE
     END IF
     INITIALIZE l_ies_tip_entrada, l_status TO NULL
     CALL sup0686_retorna_tipo_entrada(l_cod_operacao,
                                       l_cod_fiscal_compl)
        RETURNING l_status,
                  l_ies_tip_entrada
     ### OS 282025 ###
     IF l_ies_tip_incid_ipi = "O" THEN
        IF l_val_ipi_decl_item > 0 THEN
           LET l_val_liquido_item = l_val_liquido_item + l_val_ipi_decl_item
        ELSE
           LET l_val_liquido_item = l_val_liquido_item + l_val_ipi_calc_item
        END IF
     END IF

     IF sup0782_grava_ar_pis_cofins(l_cod_empresa,
                                    l_num_aviso_rec,
                                    l_num_seq,
                                    l_val_liquido_item,
                                    l_cod_item,
                                    l_cod_fornecedor,
                                    l_val_frete,
                                    l_ies_especie_nf,
                                    l_ies_nf_transf,
                                    l_ies_tip_entrada) = FALSE THEN
        LET l_houve_erro = TRUE
        CLOSE cq_it_pis2 #764215#
        EXIT FOREACH
     END IF
  END FOREACH
  WHENEVER ERROR STOP
  FREE cq_it_pis2 #764215#

  IF l_houve_erro THEN
     RETURN FALSE
  END IF

  RETURN TRUE
 END FUNCTION

#--inicio--vanderlei OS 410113 #
#------------------------------------#
 FUNCTION sup0552_inclui_st_para_ar(l_tipo, l_conta_array)
#------------------------------------#
 DEFINE l_tipo            CHAR(30),
        l_conta_array     SMALLINT

 DEFINE lr_w_sup0552_4    RECORD
                             empresa              CHAR(02),
                             empresa_estabel      CHAR(02),
                             sequencia            SMALLINT,
                             tip_nota_fiscal      CHAR(01),
                             pct_ipi              DECIMAL(6,3),
                             val_tot_decl_nf      DECIMAL(17,2),
                             val_tot_decl_icms    DECIMAL(17,2),
                             val_tot_decl_ipi     DECIMAL(17,2)
                          END RECORD
 # -- Verifica se o AR do registro tipo "D" possui Substituição Tributária(registro tipo "S"). -- #
 WHENEVER ERROR CONTINUE
 SELECT w_sup0552_4.empresa,
        w_sup0552_4.empresa_estabel,
        w_sup0552_4.sequencia,
        w_sup0552_4.tip_nota_fiscal,
        w_sup0552_4.pct_ipi,
        w_sup0552_4.val_tot_decl_nf,
        w_sup0552_4.val_tot_decl_icms,
        w_sup0552_4.val_tot_decl_ipi
   INTO lr_w_sup0552_4.empresa,
        lr_w_sup0552_4.empresa_estabel,
        lr_w_sup0552_4.sequencia,
        lr_w_sup0552_4.tip_nota_fiscal,
        lr_w_sup0552_4.pct_ipi,
        lr_w_sup0552_4.val_tot_decl_nf,
        lr_w_sup0552_4.val_tot_decl_icms,
        lr_w_sup0552_4.val_tot_decl_ipi
   FROM w_sup0552_4
  WHERE w_sup0552_4.empresa           = mr_w_sup0552_4.empresa
    AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
    AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
    AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4.subserie_nf
    AND w_sup0552_4.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
    AND w_sup0552_4.fornecedor        = mr_w_sup0552_4.fornecedor
    AND w_sup0552_4.sequencia         = mr_aviso_rec.num_seq
    AND w_sup0552_4.tipo_registro     = "S"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql('LEITURA','W_SUP0552_4')
       RETURN FALSE
    END IF
 ELSE
    # -- Inclui a "ar_subst_tribut" para o AR em questão. -- #
    WHENEVER ERROR CONTINUE
    INSERT INTO ar_subst_tribut (
        cod_empresa,
        cod_empresa_estab,
        num_aviso_rec,
        num_seq,
        ies_tipo_icms,
        pct_agregado,
        val_base_calc_st,
        val_icms_st,
        val_icms_dev_ret)
    VALUES (        lr_w_sup0552_4.empresa,
        lr_w_sup0552_4.empresa_estabel,
        mr_aviso_rec.num_aviso_rec,
        lr_w_sup0552_4.sequencia,
        lr_w_sup0552_4.tip_nota_fiscal,
        lr_w_sup0552_4.pct_ipi,
        lr_w_sup0552_4.val_tot_decl_nf,
        lr_w_sup0552_4.val_tot_decl_icms,
        lr_w_sup0552_4.val_tot_decl_ipi)
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       LET m_houve_erro = TRUE
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da AR_SUBST_TRIBUT "
       LET m_status_arquivo = 1
       RETURN FALSE
    END IF
 END IF

 RETURN TRUE
 END FUNCTION
#---fim----vanderlei OS 410113 #

#--------------------------------#
 FUNCTION sup0552_deleta_tabelas()
#--------------------------------#

 WHENEVER ERROR CONTINUE
 DELETE FROM w_sup0552_3
  WHERE w_sup0552_3.empresa           = mr_nf_sup.cod_empresa
    AND w_sup0552_3.nota_fiscal       = mr_nf_sup.num_nf
    AND w_sup0552_3.serie_nota_fiscal = mr_nf_sup.ser_nf
    AND w_sup0552_3.subserie_nf       = mr_nf_sup.ssr_nf
    AND w_sup0552_3.espc_nota_fiscal  = mr_nf_sup.ies_especie_nf
    AND w_sup0552_3.fornecedor        = mr_nf_sup.cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql('EXCLUSÃO','W_SUP0552_3')
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM nf_sup
  WHERE cod_empresa   = mr_nf_sup.cod_empresa
    AND num_aviso_rec = mr_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","NF_SUP")
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM aviso_rec
  WHERE cod_empresa   = mr_nf_sup.cod_empresa
    AND num_aviso_rec = mr_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","AVISO_REC")
 END IF

 WHENEVER ERROR CONTINUE
   DELETE FROM nf_sup_erro
    WHERE empresa       = mr_nf_sup.cod_empresa
      AND num_aviso_rec = mr_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","NF_SUP_ERRO")
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM aviso_rec_compl
  WHERE cod_empresa   = mr_nf_sup.cod_empresa
    AND num_aviso_rec = mr_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","AVISO_REC_COMPL")
 END IF

 IF gr_par_con.ies_contab_aen <> "4" THEN

    WHENEVER ERROR CONTINUE
    DELETE FROM dest_aviso_rec
     WHERE cod_empresa   = mr_nf_sup.cod_empresa
       AND num_aviso_rec = mr_nf_sup.num_aviso_rec
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","DEST_AVISO_REC")
    END IF

 ELSE

    WHENEVER ERROR CONTINUE
    DELETE FROM dest_aviso_rec4
     WHERE cod_empresa   = mr_nf_sup.cod_empresa
       AND num_aviso_rec = mr_nf_sup.num_aviso_rec
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","DEST_AVISO_REC4")
    END IF

 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM sup_par_ar
  WHERE empresa       = mr_nf_sup.cod_empresa
    AND aviso_recebto = mr_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","SUP_PAR_AR")
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM ar_ped
  WHERE cod_empresa   = mr_nf_sup.cod_empresa
    AND num_aviso_rec = mr_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","AR_PED")
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM ar_diverg
  WHERE cod_empresa   = mr_nf_sup.cod_empresa
    AND num_aviso_rec = mr_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","AR_DIVERG")
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM aviso_rec_compl_sq
  WHERE cod_empresa   = mr_nf_sup.cod_empresa
    AND num_aviso_rec = mr_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","AVISO_REC_COMPL_SQ")
 END IF

 END FUNCTION

#---------------------------------------#
 FUNCTION sup0552_deleta_tabelas_fretes()
#---------------------------------------#

 WHENEVER ERROR CONTINUE
 DELETE FROM frete_sup
  WHERE cod_empresa = mr_w_sup0552_4.empresa
    AND num_conhec  = mr_w_sup0552_4.nota_fiscal
    AND ser_conhec  = mr_w_sup0552_4.serie_nota_fiscal
    AND ssr_conhec  = mr_w_sup0552_4.subserie_nf
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","FRETE_SUP")
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM sup_par_frete
  WHERE empresa         = mr_w_sup0552_4.empresa
    AND num_conhec      = mr_w_sup0552_4.nota_fiscal
    AND serie_conhec    = mr_w_sup0552_4.serie_nota_fiscal
    AND subserie_conhec = mr_w_sup0552_4.subserie_nf
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","SUP_PAR_FRETE")
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM frete_sup_compl
  WHERE cod_empresa = mr_w_sup0552_4.empresa
    AND num_conhec  = mr_w_sup0552_4.nota_fiscal
    AND ser_conhec  = mr_w_sup0552_4.serie_nota_fiscal
    AND ssr_conhec  = mr_w_sup0552_4.subserie_nf
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","FRETE_SUP_COMPL")
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM pedagio_frete
  WHERE cod_empresa   = mr_w_sup0552_4.empresa
    AND num_nf_conhec = mr_w_sup0552_4.nota_fiscal
    AND ser_nf_conhec = mr_w_sup0552_4.serie_nota_fiscal
    AND ssr_nf_conhec = mr_w_sup0552_4.subserie_nf
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","PEDAGIO_FRETE")
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM audit_frete
  WHERE cod_empresa = mr_w_sup0552_4.empresa
    AND num_conhec  = mr_w_sup0552_4.nota_fiscal
    AND ser_conhec  = mr_w_sup0552_4.serie_nota_fiscal
    AND ssr_conhec  = mr_w_sup0552_4.subserie_nf
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","AUDIT_FRETE")
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM frete_sup_erro
  WHERE cod_empresa = mr_w_sup0552_4.empresa
    AND num_conhec  = mr_w_sup0552_4.nota_fiscal
    AND ser_conhec  = mr_w_sup0552_4.serie_nota_fiscal
    AND ssr_conhec  = mr_w_sup0552_4.subserie_nf
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","FRETE_SUP_ERRO")
 END IF

 IF gr_par_con.ies_contab_aen <> "4" THEN
    WHENEVER ERROR CONTINUE
    DELETE FROM dest_frete_sup
     WHERE cod_empresa = mr_w_sup0552_4.empresa
       AND num_conhec  = mr_w_sup0552_4.nota_fiscal
       AND ser_conhec  = mr_w_sup0552_4.serie_nota_fiscal
       AND ssr_conhec  = mr_w_sup0552_4.subserie_nf
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","DEST_FRETE_SUP")
    END IF

 ELSE
    WHENEVER ERROR CONTINUE
    DELETE FROM dest_frete_sup4
     WHERE cod_empresa = mr_w_sup0552_4.empresa
       AND num_conhec  = mr_w_sup0552_4.nota_fiscal
       AND ser_conhec  = mr_w_sup0552_4.serie_nota_fiscal
       AND ssr_conhec  = mr_w_sup0552_4.subserie_nf
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","DEST_FRETE_SUP4")
    END IF
 END IF

 WHENEVER ERROR CONTINUE
 DELETE FROM frete_sup_x_nff
  WHERE cod_empresa = mr_w_sup0552_4.empresa
    AND num_conhec  = mr_w_sup0552_4.nota_fiscal
    AND ser_conhec  = mr_w_sup0552_4.serie_nota_fiscal
    AND ssr_conhec  = mr_w_sup0552_4.subserie_nf
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DELETE","FRETE_SUP_X_NFF")
 END IF


 END FUNCTION

#----------------------------------------------------------------------#
 FUNCTION sup0552_chama_sup7720_frete_venda(l_conta_div, l_conta_array, l_transacional)
#----------------------------------------------------------------------#
  DEFINE l_conta_div     SMALLINT,
         l_conta_array   SMALLINT,
         l_transacional  CHAR(1)

  CALL sup772_consiste_frete(p_frete_sup.*)
      RETURNING p_status, p_frete_sup.*

 IF p_status = TRUE THEN
    WHENEVER ERROR CONTINUE
    SELECT cod_empresa
      FROM frete_sup_erro
     WHERE frete_sup_erro.cod_empresa  = p_frete_sup.cod_empresa
       AND frete_sup_erro.num_conhec   = p_frete_sup.num_conhec
       AND frete_sup_erro.ser_conhec   = p_frete_sup.ser_conhec
       AND frete_sup_erro.ssr_conhec   = p_frete_sup.ssr_conhec
       AND frete_sup_erro.cod_transpor = p_frete_sup.cod_transpor
       AND (frete_sup_erro.ies_origem_erro <> "4" AND
            frete_sup_erro.ies_origem_erro <> "5")
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 OR sqlca.sqlcode = -284 THEN
       LET p_frete_sup.ies_conhec_erro = "S"
       WHENEVER ERROR CONTINUE
       UPDATE frete_sup
          SET frete_sup.cod_empresa          =  p_frete_sup.cod_empresa          ,
              frete_sup.cod_empresa_estab    =  p_frete_sup.cod_empresa_estab    ,
              frete_sup.cod_transpor         =  p_frete_sup.cod_transpor         ,
              frete_sup.num_conhec           =  p_frete_sup.num_conhec           ,
              frete_sup.ser_conhec           =  p_frete_sup.ser_conhec           ,
              frete_sup.ssr_conhec           =  p_frete_sup.ssr_conhec           ,
              frete_sup.dat_emis_conhec      =  p_frete_sup.dat_emis_conhec      ,
              frete_sup.dat_entrada_conhec   =  p_frete_sup.dat_entrada_conhec   ,
              frete_sup.cnd_pgto_frt         =  p_frete_sup.cnd_pgto_frt         ,
              frete_sup.cod_regist_entrada   =  p_frete_sup.cod_regist_entrada   ,
              frete_sup.cod_fiscal_frete     =  p_frete_sup.cod_fiscal_frete     ,
              frete_sup.gru_ctr_desp_frete   =  p_frete_sup.gru_ctr_desp_frete   ,
              frete_sup.ies_incid_icms_fre   =  p_frete_sup.ies_incid_icms_fre   ,
              frete_sup.val_frete            =  p_frete_sup.val_frete            ,
              frete_sup.val_base_c_frete_c   =  p_frete_sup.val_base_c_frete_c   ,
              frete_sup.val_tot_icms_frt_d   =  p_frete_sup.val_tot_icms_frt_d   ,
              frete_sup.val_tot_icms_frt_c   =  p_frete_sup.val_tot_icms_frt_c   ,
              frete_sup.val_icms_diferen     =  p_frete_sup.val_icms_diferen     ,
              frete_sup.pct_icms_frete_c     =  p_frete_sup.pct_icms_frete_c     ,
              frete_sup.pct_red_bc_frete_c   =  p_frete_sup.pct_red_bc_frete_c   ,
              frete_sup.pct_diferen_fret_c   =  p_frete_sup.pct_diferen_fret_c   ,
              frete_sup.val_adiant           =  p_frete_sup.val_adiant           ,
              frete_sup.ies_conhec_erro      =  p_frete_sup.ies_conhec_erro      ,
              frete_sup.nom_resp_aceite_er   =  p_frete_sup.nom_resp_aceite_er   ,
              frete_sup.ies_incl_cap         =  p_frete_sup.ies_incl_cap         ,
              frete_sup.ies_incl_contab      =  p_frete_sup.ies_incl_contab      ,
              frete_sup.cod_praca            =  p_frete_sup.cod_praca            ,
              frete_sup.ies_frt_contratado   =  p_frete_sup.ies_frt_contratado   ,
              frete_sup.tip_carga            =  p_frete_sup.tip_carga            ,
              frete_sup.cod_item_tab_frete   =  p_frete_sup.cod_item_tab_frete   ,
              frete_sup.pes_vol_frete        =  p_frete_sup.pes_vol_frete        ,
              frete_sup.val_frete_c          =  p_frete_sup.val_frete_c          ,
              frete_sup.ies_diverg_listada   =  p_frete_sup.ies_diverg_listada   ,
              frete_sup.ies_diverg_val_frt   =  p_frete_sup.ies_diverg_val_frt   ,
              frete_sup.ies_liberacao_frt    =  p_frete_sup.ies_liberacao_frt    ,
              frete_sup.ies_diverg_relac     =  p_frete_sup.ies_diverg_relac     ,
              frete_sup.ies_diverg_cnd_pgt   =  p_frete_sup.ies_diverg_cnd_pgt   ,
              frete_sup.cnd_pgto_tab         =  p_frete_sup.cnd_pgto_tab         ,
              frete_sup.tip_frete            =  p_frete_sup.tip_frete            ,
              frete_sup.cod_tip_despesa      =  p_frete_sup.cod_tip_despesa      ,
              frete_sup.ies_subst_tribut     =  p_frete_sup.ies_subst_tribut     ,
              frete_sup.val_base_c_frete_d   =  p_frete_sup.val_base_c_frete_d
        WHERE frete_sup.cod_empresa  = p_frete_sup.cod_empresa
          AND frete_sup.num_conhec   = p_frete_sup.num_conhec
          AND frete_sup.ser_conhec   = p_frete_sup.ser_conhec
          AND frete_sup.ssr_conhec   = p_frete_sup.ssr_conhec
          AND frete_sup.cod_transpor = p_frete_sup.cod_transpor
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ATUALIZACAO","FRETE_SUP")
          LET m_houve_erro = TRUE
          RETURN
       END IF

       #724885
       WHENEVER ERROR CONTINUE
         SELECT cod_empresa
           FROM frete_sup_erro
          WHERE cod_empresa  = p_frete_sup.cod_empresa
            AND cod_transpor = p_frete_sup.cod_transpor
            AND num_conhec   = p_frete_sup.num_conhec
            AND ser_conhec   = p_frete_sup.ser_conhec
            AND ssr_conhec   = p_frete_sup.ssr_conhec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 OR
          sqlca.sqlcode = -284 THEN
          ### Para listar Fretes com consistencias
          LET l_conta_div = l_conta_div + 1
          LET l_conta_array = l_conta_array + 1
          LET ma_array_consistencias[l_conta_array].nota_fiscal       = p_frete_sup.num_conhec
          LET ma_array_consistencias[l_conta_array].serie_nota_fiscal = p_frete_sup.ser_conhec
          LET ma_array_consistencias[l_conta_array].subserie_nf       = p_frete_sup.ssr_conhec
          LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
          LET ma_array_consistencias[l_conta_array].fornecedor        = p_frete_sup.cod_transpor
          LET ma_array_consistencias[l_conta_array].sequencia         = 0
          LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Frete: ",mr_frete_sup.num_conhec," - ",mr_frete_sup.ser_conhec," - ", mr_frete_sup.ssr_conhec ," importado.ver consistencias via sup0580"
          LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
          LET m_houve_erro     = TRUE
       END IF
    ELSE
       LET p_frete_sup.ies_conhec_erro = "N"

       WHENEVER ERROR CONTINUE
       UPDATE frete_sup SET frete_sup.* = p_frete_sup.*
        WHERE frete_sup.cod_empresa  = p_frete_sup.cod_empresa
          AND frete_sup.num_conhec   = p_frete_sup.num_conhec
          AND frete_sup.ser_conhec   = p_frete_sup.ser_conhec
          AND frete_sup.ssr_conhec   = p_frete_sup.ssr_conhec
          AND frete_sup.cod_transpor = p_frete_sup.cod_transpor
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ATUALIZACAO","FRETE_SUP")
          LET m_houve_erro = TRUE
          RETURN
       END IF
       IF m_ies_grava_erro_4 = "S" THEN
## OS 391495
          IF NOT sup0552_grava_liberacao_frete(p_frete_sup.cod_empresa, p_frete_sup.num_conhec, p_frete_sup.ser_conhec, p_frete_sup.ssr_conhec, p_frete_sup.cod_transpor,l_conta_array) THEN
             LET l_conta_array = l_conta_array + 1
          END IF
       END IF
    END IF
 ELSE
   LET m_houve_erro = TRUE
   RETURN
 END IF

 CALL sup1473_integra_nf_cap_livro_fiscal("","","","FRETE",
                                          p_frete_sup.num_conhec,
                                          p_frete_sup.ser_conhec,
                                          p_frete_sup.ssr_conhec,
                                          p_frete_sup.cod_empresa,
                                          p_frete_sup.cod_transpor,"","")

 IF NOT supr6_contabilizacao_por_documento(p_frete_sup.cod_empresa,
                                           p_frete_sup.num_conhec,
                                           p_frete_sup.ser_conhec,
                                           p_frete_sup.ssr_conhec,
                                           "CON",
                                           p_frete_sup.cod_transpor,
                                           p_frete_sup.dat_entrada_conhec,
                                           0,TRUE) THEN
    LET m_msg = " EMP ",p_frete_sup.cod_empresa, " CONHEC ",p_frete_sup.num_conhec USING "<<<<<<"
    LET m_msg = m_msg CLIPPED," - ",log0030_mensagem_get_texto()
    LET l_conta_div = l_conta_div + 1
    LET l_conta_array = l_conta_array + 1
    LET ma_array_consistencias[l_conta_array].nota_fiscal       = p_frete_sup.num_conhec
    LET ma_array_consistencias[l_conta_array].serie_nota_fiscal = p_frete_sup.ser_conhec
    LET ma_array_consistencias[l_conta_array].subserie_nf       = p_frete_sup.ssr_conhec
    LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
    LET ma_array_consistencias[l_conta_array].fornecedor        = p_frete_sup.cod_transpor
    LET ma_array_consistencias[l_conta_array].sequencia         = 0
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = m_msg
    LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
 END IF
 END FUNCTION

#--------------------------------------------------------#
 FUNCTION sup0552_atualiza_sup0552_4_proces(l_processado)
#--------------------------------------------------------#
 DEFINE l_processado       CHAR(01)

WHENEVER ERROR CONTINUE
 UPDATE w_sup0552_4 SET w_sup0552_4.processado = l_processado
  WHERE empresa           = mr_w_sup0552_4.empresa
    AND nota_fiscal       = mr_w_sup0552_4.nota_fiscal
    AND serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
    AND subserie_nf       = mr_w_sup0552_4.subserie_nf
    AND espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
    AND fornecedor        = mr_w_sup0552_4.fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("ATUALIZACAO","W_SUP0552_4 2 ")
    RETURN FALSE
 END IF

 RETURN TRUE
 END FUNCTION

#------------------------------------------------------#
 FUNCTION sup0552_grava_sup_par_ar(l_empresa,
                                   l_aviso_recebto,
                                   l_seq_aviso_recebto,
                                   l_parametro,
                                   l_par_ind_especial,
                                   l_parametro_texto,
                                   l_parametro_val,
                                   l_parametro_dat,
                                   l_conta_array)
#------------------------------------------------------#
 DEFINE l_empresa                       LIKE sup_par_ar.empresa,
        l_aviso_recebto                 LIKE sup_par_ar.aviso_recebto,
        l_seq_aviso_recebto             LIKE sup_par_ar.seq_aviso_recebto,
        l_parametro                     LIKE sup_par_ar.parametro,
        l_par_ind_especial              LIKE sup_par_ar.par_ind_especial,
        l_parametro_texto               LIKE sup_par_ar.parametro_texto,
        l_parametro_val                 LIKE sup_par_ar.parametro_val,
        l_parametro_dat                 LIKE sup_par_ar.parametro_dat,
        l_conta_array                   SMALLINT

  #--inicio--OS61267 Antonio#
  WHENEVER ERROR CONTINUE
  SELECT 1
    FROM sup_par_ar
   WHERE empresa           = l_empresa
     AND aviso_recebto     = l_aviso_recebto
     AND seq_aviso_recebto = l_seq_aviso_recebto
     AND parametro         = l_parametro
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     WHENEVER ERROR CONTINUE
     UPDATE sup_par_ar
       SET empresa           = l_empresa,
           aviso_recebto     = l_aviso_recebto,
           seq_aviso_recebto = l_seq_aviso_recebto,
           parametro         = l_parametro,
           par_ind_especial  = l_par_ind_especial,
           parametro_texto   = l_parametro_texto,
           parametro_val     = l_parametro_val,
           parametro_dat     = l_parametro_dat
     WHERE empresa           = l_empresa
       AND aviso_recebto     = l_aviso_recebto
       AND seq_aviso_recebto = l_seq_aviso_recebto
       AND parametro         = l_parametro
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        LET m_houve_erro = TRUE
        LET l_conta_array = l_conta_array + 1
        CALL sup0552_carrega_chave_consiste(l_conta_array)
        LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SUP_PAR_AR "
        LET m_status_arquivo = 1
        RETURN FALSE
     END IF
  ELSE
     IF sqlca.sqlcode = 100 THEN
        WHENEVER ERROR CONTINUE
        INSERT INTO sup_par_ar
                   (empresa,
                    aviso_recebto,
                    seq_aviso_recebto,
                    parametro,
                    par_ind_especial,
                    parametro_texto,
                    parametro_val,
                    parametro_dat)
        VALUES
                   (l_empresa,
                    l_aviso_recebto,
                    l_seq_aviso_recebto,
                    l_parametro,
                    l_par_ind_especial,
                    l_parametro_texto,
                    l_parametro_val,
                    l_parametro_dat)
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           LET m_houve_erro = TRUE
           LET l_conta_array = l_conta_array + 1
           CALL sup0552_carrega_chave_consiste(l_conta_array)
           LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SUP_PAR_AR "
           LET m_status_arquivo = 1
          RETURN FALSE
        END IF
     END IF
  END IF
#---fim----OS61267#

 RETURN TRUE
 END FUNCTION

#--inicio--OS 414316 #
#---------------------------------------------------#
 FUNCTION sup0552_existe_h_frete_sup(l_cod_empresa,
                                     l_cod_transpor,
                                     l_num_conhec,
                                     l_ser_conhec,
                                     l_ssr_conhec,
                                     l_dat_emis_conhec)
#---------------------------------------------------#
 DEFINE l_cod_empresa                 LIKE h_frete_sup.cod_empresa,
        l_cod_transpor                LIKE h_frete_sup.cod_transpor,
        l_num_conhec                  LIKE h_frete_sup.num_conhec,
        l_ser_conhec                  LIKE h_frete_sup.ser_conhec,
        l_ssr_conhec                  LIKE h_frete_sup.ssr_conhec,
        l_dat_emis_conhec             LIKE h_frete_sup.dat_emis_conhec

 WHENEVER ERROR CONTINUE
 SELECT cod_empresa
   FROM h_frete_sup
  WHERE cod_empresa     = l_cod_empresa
    AND cod_transpor    = l_cod_transpor
    AND num_conhec      = l_num_conhec
    AND ser_conhec      = l_ser_conhec
    AND ssr_conhec      = l_ssr_conhec
    AND dat_emis_conhec = l_dat_emis_conhec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql('LEITURA','H_FRETE_SUP')
    END IF
    RETURN ''
 END IF

 RETURN ' Em histórico.'
 END FUNCTION

#--------------------------------------------------#
 FUNCTION sup0552_existe_h_nf_sup(l_cod_empresa,
                                  l_num_nf,
                                  l_ser_nf,
                                  l_ssr_nf,
                                  l_ies_especie_nf,
                                  l_cod_fornecedor)
#--------------------------------------------------#
 DEFINE l_cod_empresa                  LIKE h_nf_sup.cod_empresa,
        l_num_nf                       LIKE h_nf_sup.num_nf,
        l_ser_nf                       LIKE h_nf_sup.ser_nf,
        l_ssr_nf                       LIKE h_nf_sup.ssr_nf,
        l_ies_especie_nf               LIKE h_nf_sup.ies_especie_nf,
        l_cod_fornecedor               LIKE h_nf_sup.cod_fornecedor

 WHENEVER ERROR CONTINUE
 SELECT cod_empresa
   FROM h_nf_sup
  WHERE cod_empresa    = l_cod_empresa
    AND num_nf         = l_num_nf
    AND ser_nf         = l_ser_nf
    AND ssr_nf         = l_ssr_nf
    AND ies_especie_nf = l_ies_especie_nf
    AND cod_fornecedor = l_cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql('LEITURA','H_NF_SUP')
    END IF
    RETURN ''
 END IF

 RETURN ' Em histórico.'
 END FUNCTION
#---fim----OS 414316 #

#---------------------------------------#
 FUNCTION sup0552_grava_dest_ordem_sup()
#---------------------------------------#
 DEFINE l_seq         SMALLINT,
        l_houve_erro  SMALLINT

 DEFINE lr_dest_ordem_sup4 RECORD LIKE dest_ordem_sup4.*,
        lr_dest_ordem_sup  RECORD LIKE dest_ordem_sup.*

 LET l_houve_erro = FALSE

 IF gr_par_con.ies_contab_aen <> "4" THEN

    WHENEVER ERROR CONTINUE
    DECLARE cq_dest_ordem CURSOR FOR
     SELECT cod_empresa         ,
            num_oc              ,
            cod_area_negocio    ,
            cod_lin_negocio     ,
            pct_particip_comp   ,
            num_conta_deb_desp  ,
            cod_secao_receb     ,
            qtd_particip_comp   ,
            num_docum           ,
            num_transac
       FROM dest_ordem_sup
      WHERE dest_ordem_sup.cod_empresa = mr_aviso_rec.cod_empresa
        AND dest_ordem_sup.num_oc      = mr_aviso_rec.num_oc
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log0030_processa_err_sql("DECLARE CURSOR","CQ_DEST_ORDEM",TRUE)
       LET m_msg_erro = log0030_mensagem_get_texto()
       RETURN FALSE
    END IF

    LET l_seq = 0

    WHENEVER ERROR CONTINUE
    FOREACH cq_dest_ordem INTO lr_dest_ordem_sup.*
       IF sqlca.sqlcode <> 0 THEN
          CALL log0030_processa_err_sql("FOREACH CURSOR","CQ_DEST_ORDEM",TRUE)
          LET m_msg_erro = log0030_mensagem_get_texto()
          LET l_houve_erro = TRUE
          CLOSE cq_dest_ordem #764215#
          EXIT FOREACH
       END IF

       LET l_seq = l_seq + 1

       INITIALIZE mr_dest_aviso_rec4.* TO NULL

       LET mr_dest_aviso_rec4.cod_empresa          = lr_dest_ordem_sup.cod_empresa
       LET mr_dest_aviso_rec4.num_aviso_rec        = mr_aviso_rec.num_aviso_rec
       LET mr_dest_aviso_rec4.num_seq              = mr_aviso_rec.num_seq #mr_w_sup0552_4_it.sequencia
       LET mr_dest_aviso_rec4.sequencia            = l_seq
       LET mr_dest_aviso_rec4.cod_area_negocio     = lr_dest_ordem_sup.cod_area_negocio
       LET mr_dest_aviso_rec4.cod_lin_negocio      = lr_dest_ordem_sup.cod_lin_negocio
       LET mr_dest_aviso_rec4.pct_particip_comp    = lr_dest_ordem_sup.pct_particip_comp
       LET mr_dest_aviso_rec4.num_conta_deb_desp   = lr_dest_ordem_sup.num_conta_deb_desp
       LET mr_dest_aviso_rec4.cod_secao_receb      = lr_dest_ordem_sup.cod_secao_receb
       LET mr_dest_aviso_rec4.qtd_recebida         = 0
       LET mr_dest_aviso_rec4.ies_contagem         = "N"
       LET mr_dest_aviso_rec4.num_docum            = lr_dest_ordem_sup.num_docum
       LET mr_dest_aviso_rec4.cod_seg_merc         = NULL
       LET mr_dest_aviso_rec4.cod_cla_uso          = NULL

       IF NOT sup0552_insert_dest_aviso_rec() THEN
          LET l_houve_erro = TRUE
          CLOSE cq_dest_ordem #764215#
          EXIT FOREACH
       END IF
    END FOREACH
    FREE cq_dest_ordem
    WHENEVER ERROR STOP

    IF l_houve_erro THEN
       RETURN FALSE
    END IF
 ELSE

    WHENEVER ERROR CONTINUE
    DECLARE cq_dest_ordem4 CURSOR FOR
     SELECT cod_empresa        ,
            num_oc             ,
            cod_area_negocio   ,
            cod_lin_negocio    ,
            pct_particip_comp  ,
            num_conta_deb_desp ,
            cod_secao_receb    ,
            qtd_particip_comp  ,
            num_docum          ,
            cod_seg_merc       ,
            cod_cla_uso        ,
            num_transac
       FROM dest_ordem_sup4
      WHERE dest_ordem_sup4.cod_empresa = mr_aviso_rec.cod_empresa
        AND dest_ordem_sup4.num_oc      = mr_aviso_rec.num_oc
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log0030_processa_err_sql("DECLARE CURSOR","CQ_DEST_ORDEM4",TRUE)
       LET m_msg_erro = log0030_mensagem_get_texto()
       RETURN FALSE
    END IF

    LET l_seq = 0

    WHENEVER ERROR CONTINUE
    FOREACH cq_dest_ordem4 INTO lr_dest_ordem_sup4.*
       IF sqlca.sqlcode <> 0 THEN
          CALL log0030_processa_err_sql("FOREACH CURSOR","CQ_DEST_ORDEM4",TRUE)
          LET m_msg_erro = log0030_mensagem_get_texto()
          LET l_houve_erro = TRUE
          CLOSE cq_dest_ordem4 #764215#
          EXIT FOREACH
       END IF

       LET l_seq = l_seq + 1

       INITIALIZE mr_dest_aviso_rec4.* TO NULL

       LET mr_dest_aviso_rec4.cod_empresa          = lr_dest_ordem_sup4.cod_empresa
       LET mr_dest_aviso_rec4.num_aviso_rec        = mr_aviso_rec.num_aviso_rec
       LET mr_dest_aviso_rec4.num_seq              = mr_aviso_rec.num_seq #mr_w_sup0552_4_it.sequencia
       LET mr_dest_aviso_rec4.sequencia            = l_seq
       LET mr_dest_aviso_rec4.cod_area_negocio     = lr_dest_ordem_sup4.cod_area_negocio
       LET mr_dest_aviso_rec4.cod_lin_negocio      = lr_dest_ordem_sup4.cod_lin_negocio
       LET mr_dest_aviso_rec4.pct_particip_comp    = lr_dest_ordem_sup4.pct_particip_comp
       LET mr_dest_aviso_rec4.num_conta_deb_desp   = lr_dest_ordem_sup4.num_conta_deb_desp
       LET mr_dest_aviso_rec4.cod_secao_receb      = lr_dest_ordem_sup4.cod_secao_receb
       LET mr_dest_aviso_rec4.qtd_recebida         = 0
       LET mr_dest_aviso_rec4.ies_contagem         = "N"
       LET mr_dest_aviso_rec4.num_docum            = lr_dest_ordem_sup4.num_docum
       LET mr_dest_aviso_rec4.cod_seg_merc         = NULL
       LET mr_dest_aviso_rec4.cod_cla_uso          = NULL
       LET mr_dest_aviso_rec4.cod_seg_merc         = lr_dest_ordem_sup4.cod_seg_merc
       LET mr_dest_aviso_rec4.cod_cla_uso          = lr_dest_ordem_sup4.cod_cla_uso

       IF NOT sup0552_insert_dest_aviso_rec() THEN
          LET l_houve_erro = TRUE
          CLOSE cq_dest_ordem4 #764215#
          EXIT FOREACH
       END IF
    END FOREACH
    FREE cq_dest_ordem4
    WHENEVER ERROR STOP

    IF l_houve_erro THEN
       RETURN FALSE
    END IF
 END IF

 RETURN TRUE

 END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_insert_dest_aviso_rec()
#----------------------------------------#

 WHENEVER ERROR CONTINUE
 INSERT INTO dest_aviso_rec(cod_empresa,
                            num_aviso_rec,
                            num_seq,
                            sequencia,
                            cod_area_negocio,
                            cod_lin_negocio,
                            pct_particip_comp,
                            num_conta_deb_desp,
                            cod_secao_receb,
                            qtd_recebida,
                            ies_contagem,
                            num_docum)
 VALUES (mr_dest_aviso_rec4.cod_empresa,
        mr_dest_aviso_rec4.num_aviso_rec,
        mr_dest_aviso_rec4.num_seq,
        mr_dest_aviso_rec4.sequencia,
        mr_dest_aviso_rec4.cod_area_negocio,
        mr_dest_aviso_rec4.cod_lin_negocio,
        mr_dest_aviso_rec4.pct_particip_comp,
        mr_dest_aviso_rec4.num_conta_deb_desp,
        mr_dest_aviso_rec4.cod_secao_receb,
        mr_dest_aviso_rec4.qtd_recebida,
        mr_dest_aviso_rec4.ies_contagem,
        mr_dest_aviso_rec4.num_docum)
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET m_houve_erro = TRUE
    LET m_msg_erro = "Erro na inclusão da DEST_AVISO_REC "
    RETURN FALSE
 END IF

 IF mr_dest_aviso_rec4.cod_seg_merc IS NOT NULL AND
    mr_dest_aviso_rec4.cod_cla_uso IS NOT NULL THEN

    WHENEVER ERROR CONTINUE
    INSERT INTO dest_aviso_rec4(cod_empresa,
                                num_aviso_rec,
                                num_seq,
                                sequencia,
                                cod_area_negocio,
                                cod_lin_negocio,
                                pct_particip_comp,
                                num_conta_deb_desp,
                                cod_secao_receb,
                                qtd_recebida,
                                ies_contagem,
                                num_docum,
                                cod_seg_merc,
                                cod_cla_uso)

     VALUES (mr_dest_aviso_rec4.cod_empresa,
             mr_dest_aviso_rec4.num_aviso_rec,
             mr_dest_aviso_rec4.num_seq,
             mr_dest_aviso_rec4.sequencia,
             mr_dest_aviso_rec4.cod_area_negocio,
             mr_dest_aviso_rec4.cod_lin_negocio,
             mr_dest_aviso_rec4.pct_particip_comp,
             mr_dest_aviso_rec4.num_conta_deb_desp,
             mr_dest_aviso_rec4.cod_secao_receb,
             mr_dest_aviso_rec4.qtd_recebida,
             mr_dest_aviso_rec4.ies_contagem,
             mr_dest_aviso_rec4.num_docum,
             mr_dest_aviso_rec4.cod_seg_merc,
             mr_dest_aviso_rec4.cod_cla_uso)
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       LET m_houve_erro = TRUE
       LET m_msg_erro  = "Erro na inclusão da DEST_AVISO_REC4 "
       RETURN FALSE
    END IF
 END IF

 RETURN TRUE

 END FUNCTION


#-------------------------------------#
FUNCTION sup0552_rateio(l_tabela)
#-------------------------------------#

 DEFINE l_cod_fiscal_compl_nf  LIKE aviso_rec_compl.cod_fiscal_compl,
        l_trocou_frete         SMALLINT,
        l_saldo_frete          LIKE frete_sup.val_frete,
        l_saldo_base_c_d       LIKE frete_sup.val_base_c_frete_d,
        l_saldo_icms           LIKE frete_sup.val_tot_icms_frt_d,
        l_conta                SMALLINT,
        l_val_base_diferen     LIKE aviso_rec.val_base_c_frete_c,
        l_valor_diferen        LIKE frete_sup.val_icms_diferen,
        l_val_frete_ant        LIKE frete_sup.val_frete,
        l_val_frete_acum       LIKE frete_sup.val_frete,
        l_val_base_c_acum      LIKE aviso_rec.val_base_c_frete_c,
        l_val_icms_fr_acum     LIKE aviso_rec.val_icms_frete_c,
        l_cod_fiscal_compl     LIKE item_sup_compl.cod_fiscal_compl,
        l_val_tot_liq          DECIMAL(17,2),
        l_quantos              SMALLINT,
        l_val_base             DECIMAL(17,2),
        l_uf_nf                LIKE uni_feder.cod_uni_feder,
        l_incidencia           LIKE frete_sup.ies_incid_icms_fre,
        l_status               SMALLINT,
        l_ies_obj_entrada_fisc LIKE cod_fiscal_sup.ies_obj_entrada,
        l_ies_obj_entrada      LIKE cod_fiscal_sup.ies_obj_entrada,
        l_grp_ctr_despesa      LIKE frete_sup.gru_ctr_desp_frete,
        l_ies_objetivo_ent     LIKE cod_fiscal_sup.ies_obj_entrada,
        l_pct_icms_frete_d     LIKE aviso_rec.pct_icms_frete_d,
        l_saldo_frete_ant      LIKE frete_sup.val_frete,
        l_saldo_basecd_ant     LIKE frete_sup.val_base_c_frete_d,
        l_saldo_icms_ant       LIKE frete_sup.val_tot_icms_frt_d,
        l_tabela               CHAR(01),
        sql_stmt               CHAR(1000)




 IF l_tabela = "1" THEN

    LET sql_stmt = " SELECT aviso_rec.*, nf_sup.* ,aviso_rec_compl.cod_fiscal_compl ",
                   " FROM nf_sup, aviso_rec, aviso_rec_compl, cod_fiscal_sup "
 ELSE
    LET sql_stmt = " SELECT aviso_rec.*, nf_sup.* ,aviso_rec_compl.cod_fiscal_compl ",
                   " FROM sup_frete_x_nf_entrada, nf_sup, aviso_rec, aviso_rec_compl, cod_fiscal_sup "
 END IF

 IF l_tabela = "1" THEN

    LET sql_stmt = sql_stmt CLIPPED,
    " WHERE nf_sup.cod_empresa      = """,mr_frete_sup.cod_empresa,""" ",
    " AND nf_sup.num_conhec         = """,mr_frete_sup.num_conhec,""" ",
    " AND nf_sup.ser_conhec         = """,mr_frete_sup.ser_conhec,""" ",
    " AND nf_sup.ssr_conhec         = """,mr_frete_sup.ssr_conhec,""" ",
    " AND nf_sup.cod_transpor       = """,mr_frete_sup.cod_transpor,""" ",
    " AND aviso_rec.cod_empresa     = nf_sup.cod_empresa ",
    " AND aviso_rec.num_aviso_rec   = nf_sup.num_aviso_rec ",
    " AND aviso_rec_compl.cod_empresa     = aviso_rec.cod_empresa ",
    " AND aviso_rec_compl.num_aviso_rec   = aviso_rec.num_aviso_rec ",
    " AND cod_fiscal_sup.cod_fiscal       = nf_sup.cod_operacao ",
    " AND cod_fiscal_sup.cod_fiscal_compl = aviso_rec_compl.cod_fiscal_compl ",
    " AND ((aviso_rec.ies_contabil  = ""S"" AND  aviso_rec.ies_incid_icms_ite <> ""I"") ",
    " OR (cod_fiscal_sup.ies_obj_entrada = ""99"" AND aviso_rec.ies_incid_icms_ite =""I"")) ",
    " AND aviso_rec.ies_contabil <> ""M"" "

 ELSE
    LET sql_stmt = sql_stmt CLIPPED,
    " WHERE sup_frete_x_nf_entrada.empresa       = """,mr_frete_sup.cod_empresa,""" ",
    " AND sup_frete_x_nf_entrada.conhec          = """,mr_frete_sup.num_conhec,""" ",
    " AND sup_frete_x_nf_entrada.serie_conhec    = """,mr_frete_sup.ser_conhec,""" ",
    " AND sup_frete_x_nf_entrada.subserie_conhec = """,mr_frete_sup.ssr_conhec,""" ",
    " AND sup_frete_x_nf_entrada.transportador   = """,mr_frete_sup.cod_transpor,""" ",
    " AND aviso_rec.cod_empresa     = nf_sup.cod_empresa ",
    " AND aviso_rec.num_aviso_rec   = nf_sup.num_aviso_rec ",
    " AND aviso_rec_compl.cod_empresa     = aviso_rec.cod_empresa ",
    " AND aviso_rec_compl.num_aviso_rec   = aviso_rec.num_aviso_rec ",
    " AND cod_fiscal_sup.cod_fiscal       = nf_sup.cod_operacao ",
    " AND cod_fiscal_sup.cod_fiscal_compl = aviso_rec_compl.cod_fiscal_compl ",
    " AND ((aviso_rec.ies_contabil  = ""S"" AND  aviso_rec.ies_incid_icms_ite <> ""I"") ",
    " OR (cod_fiscal_sup.ies_obj_entrada = ""99"" AND aviso_rec.ies_incid_icms_ite =""I"")) ",
    " AND aviso_rec.ies_contabil <> ""M"" "
 END IF

  LET l_trocou_frete     = FALSE
  LET l_saldo_frete      = mr_frete_sup.val_frete
  LET l_saldo_base_c_d   = mr_frete_sup.val_base_c_frete_d
  LET l_saldo_icms       = mr_frete_sup.val_tot_icms_frt_d
  LET l_conta            = 0
  LET l_val_base_diferen = 0
  LET l_valor_diferen    = 0

  IF l_trocou_frete = TRUE THEN
    LET mr_frete_sup.val_frete = l_val_frete_ant
  END IF

  LET l_val_frete_acum   = 0
  LET l_val_base_c_acum  = 0
  LET l_val_icms_fr_acum = 0


 WHENEVER ERROR CONTINUE
 PREPARE var_query2 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","VAR_QUERY2")
 END IF
 WHENEVER ERROR CONTINUE
 DECLARE cq_rateio_frete CURSOR FOR var_query2
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_RATEIO_FRETE")
 END IF

  WHENEVER ERROR CONTINUE
  FOREACH cq_rateio_frete INTO mr_aviso_rec.*, mr_nf_sup.*, l_cod_fiscal_compl_nf
  WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("FOREACH","CQ_RATEIO")
     END IF

     LET l_conta            = l_conta + 1

     LET l_cod_fiscal_compl = 0

     WHENEVER ERROR CONTINUE
     SELECT aviso_rec_compl_sq.cod_fiscal_compl
       INTO l_cod_fiscal_compl
       FROM aviso_rec_compl_sq
      WHERE aviso_rec_compl_sq.cod_empresa   = mr_aviso_rec.cod_empresa
        AND aviso_rec_compl_sq.num_aviso_rec = mr_aviso_rec.num_aviso_rec
        AND aviso_rec_compl_sq.num_seq       = mr_aviso_rec.num_seq
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("SELECT","AVISO_REC_COMPL_SQ")
     END IF
     IF l_val_tot_liq <> 0 THEN
        IF l_conta = l_quantos THEN
           LET mr_aviso_rec.val_frete = l_saldo_frete
           IF mr_frete_sup.val_base_c_frete_d > 0 AND
              mr_frete_sup.val_base_c_frete_d IS NOT NULL THEN
              LET mr_aviso_rec.val_base_c_frete_d = l_saldo_base_c_d
           END IF
        ELSE
           LET mr_aviso_rec.val_frete = (mr_frete_sup.val_frete *
                                         mr_aviso_rec.val_liquido_item) /
                                         l_val_tot_liq
           IF mr_frete_sup.val_base_c_frete_d > 0 AND
              mr_frete_sup.val_base_c_frete_d IS NOT NULL THEN
              LET mr_aviso_rec.val_base_c_frete_d = (mr_frete_sup.val_base_c_frete_d *
                                                     mr_aviso_rec.val_liquido_item) /
                                                     l_val_tot_liq
           END IF
        END IF

        LET mr_aviso_rec.pct_icms_frete_c   = 0
        LET mr_aviso_rec.pct_red_bc_frete_c = 0
        LET mr_aviso_rec.pct_diferen_fret_c = 0
        LET mr_aviso_rec.val_icms_frete_c   = 0
        LET l_val_base                      = 0

        CALL sup0552_busca_uni_feder_frete()
             RETURNING l_uf_nf

        IF l_uf_nf = "**" THEN
           WHENEVER ERROR CONTINUE
           SELECT fornecedor.cod_uni_feder
             INTO l_uf_nf
             FROM fornecedor
            WHERE fornecedor.cod_fornecedor = mr_nf_sup.cod_fornecedor
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("SELECT","FORNECEDOR")
           END IF
        END IF

        IF mr_nf_sup.cod_operacao[1] = "7" AND
           g_orig_uf_frt_nf_i = "2"       THEN
           CALL sup0552_busca_uni_feder_frete()
                RETURNING l_uf_nf
           IF l_uf_nf = "**" THEN
              WHENEVER ERROR CONTINUE
              SELECT fornecedor.cod_uni_feder
                INTO l_uf_nf
                FROM fornecedor
               WHERE fornecedor.cod_fornecedor   = mr_frete_sup.cod_transpor
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("SELECT","FORNECEDOR")
              END IF
           END IF
        END IF

        ### OS 207798 ###
        IF m_uf_trans_nfdr = "2" AND
          (mr_nf_sup.ies_especie_nf = "NFR" OR
           mr_nf_sup.ies_especie_nf = "NFD") THEN
           CALL sup0552_busca_uni_feder_frete() RETURNING l_uf_nf
           IF l_uf_nf = "**" THEN
              WHENEVER ERROR CONTINUE
              SELECT fornecedor.cod_uni_feder
                INTO l_uf_nf
                FROM fornecedor
               WHERE fornecedor.cod_fornecedor   = mr_frete_sup.cod_transpor
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("SELECT","FORNECEDOR")
              END IF
           END IF
        END IF

        IF mr_frete_sup.ies_incid_icms_fre <> " " THEN
           LET l_incidencia = mr_frete_sup.ies_incid_icms_fre
        ELSE
           LET l_incidencia = mr_aviso_rec.ies_incid_icms_ite
        END IF

        INITIALIZE l_status, l_ies_obj_entrada TO NULL
        CALL sup0686_retorna_objetivo_entrada(mr_nf_sup.cod_operacao,
                                              l_cod_fiscal_compl_nf)
                                              RETURNING l_status,
                                                        l_ies_obj_entrada

        IF l_incidencia <> "I" OR
           (l_ies_obj_entrada = "99" AND
            l_incidencia = "I" ) THEN
           WHENEVER ERROR CONTINUE
           SELECT pct_icms,
                  pct_red_base_calc,
                  pct_diferen_icms
             INTO mr_aviso_rec.pct_icms_frete_c,
                  mr_aviso_rec.pct_red_bc_frete_c,
                  mr_aviso_rec.pct_diferen_fret_c
             FROM icms
            WHERE icms.cod_empresa   = mr_frete_sup.cod_empresa
              AND icms.gru_ctr_desp  = mr_frete_sup.gru_ctr_desp_frete
              AND icms.cod_uni_feder = l_uf_nf
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("SELECT","ICMS")
           END IF

           LET l_grp_ctr_despesa = mr_frete_sup.gru_ctr_desp_frete
        END IF

        IF m_ies_grupo_desp_item = "S" THEN #Rafael - OS310614
           WHENEVER ERROR CONTINUE
           SELECT ies_obj_entrada
             INTO l_ies_objetivo_ent
             FROM grupo_ctr_desp
            WHERE cod_empresa = mr_aviso_rec.cod_empresa
              AND gru_ctr_desp = mr_aviso_rec.gru_ctr_desp_item
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("SELECT","GRUPO_CTR_DESP")
           END IF
           IF l_ies_objetivo_ent = "3" OR
              l_ies_objetivo_ent = "4" OR
              l_ies_objetivo_ent = "6" THEN
              LET l_grp_ctr_despesa = mr_aviso_rec.gru_ctr_desp_item
              WHENEVER ERROR CONTINUE
              SELECT pct_icms,
                     pct_red_base_calc,
                     pct_diferen_icms
                INTO mr_aviso_rec.pct_icms_frete_c,
                     mr_aviso_rec.pct_red_bc_frete_c,
                     mr_aviso_rec.pct_diferen_fret_c
                FROM icms
               WHERE icms.cod_empresa   = mr_frete_sup.cod_empresa
                 AND icms.gru_ctr_desp  = mr_aviso_rec.gru_ctr_desp_item
                 AND icms.cod_uni_feder = l_uf_nf
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 WHENEVER ERROR CONTINUE
                 SELECT pct_icms,
                        pct_red_base_calc,
                        pct_diferen_icms
                   INTO mr_aviso_rec.pct_icms_frete_c,
                        mr_aviso_rec.pct_red_bc_frete_c,
                        mr_aviso_rec.pct_diferen_fret_c
                   FROM icms
                  WHERE icms.cod_empresa   = mr_frete_sup.cod_empresa
                    AND icms.gru_ctr_desp  = mr_frete_sup.gru_ctr_desp_frete
                    AND icms.cod_uni_feder = l_uf_nf
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode <> 0 THEN
                    CALL log003_err_sql("SELECT","ICMS")
                 END IF
                 LET l_grp_ctr_despesa = mr_frete_sup.gru_ctr_desp_frete
              END IF
           END IF
        END IF

        ##OS 342752
        IF NOT sup1203_incid_icms_diferido(l_uf_nf, l_incidencia,
                                           l_grp_ctr_despesa, mr_frete_sup.*,
                                           mr_aviso_rec.num_aviso_rec,
                                           mr_aviso_rec.num_seq) THEN
           CLOSE cq_rateio_frete #764215#
           EXIT FOREACH
        END IF

        IF mr_frete_sup.ies_subst_tribut = "S" AND
           (mr_frete_sup_compl.ies_preco_efetivo = "N" OR
           mr_frete_sup_compl.ies_preco_efetivo IS NULL) THEN
           LET mr_aviso_rec.val_base_c_frete_c = (mr_aviso_rec.val_frete /
               (1 - (((mr_aviso_rec.pct_icms_frete_c * (100 - mr_aviso_rec.pct_red_bc_frete_c))
                / 100) /100))) * (100 - mr_aviso_rec.pct_red_bc_frete_c) / 100
        ELSE
           LET mr_aviso_rec.val_base_c_frete_c = (mr_aviso_rec.val_frete  *
               (100 - mr_aviso_rec.pct_red_bc_frete_c)/100)
        END IF

        IF mr_aviso_rec.pct_red_bc_frete_d > 0 THEN
           IF mr_frete_sup.ies_subst_tribut = "S" AND
             (mr_frete_sup_compl.ies_preco_efetivo = "N" OR
              mr_frete_sup_compl.ies_preco_efetivo IS NULL) THEN
              LET mr_aviso_rec.val_base_c_frete_d = (mr_aviso_rec.val_frete /
                  (1 - (((mr_aviso_rec.pct_icms_frete_c * (100 - mr_aviso_rec.pct_red_bc_frete_d))
                   / 100) /100))) * (100 - mr_aviso_rec.pct_red_bc_frete_d) / 100
           ELSE
              LET mr_aviso_rec.val_base_c_frete_d = (mr_aviso_rec.val_frete  *
                  (100 - mr_aviso_rec.pct_red_bc_frete_d)/100)
           END IF
        END IF

        IF mr_frete_sup.val_base_c_frete_d > 0 AND
           mr_frete_sup.val_base_c_frete_d IS NOT NULL THEN
           IF mr_aviso_rec.pct_icms_frete_d = 0 OR
              mr_aviso_rec.pct_icms_frete_d IS NULL THEN
              LET l_pct_icms_frete_d = mr_aviso_rec.pct_icms_frete_c
           ELSE
              LET l_pct_icms_frete_d = mr_aviso_rec.pct_icms_frete_d
           END IF
        END IF

        IF mr_frete_sup.val_tot_icms_frt_d > 0 THEN
            LET mr_aviso_rec.val_icms_frete_c = (mr_aviso_rec.val_base_c_frete_c *
                                                 mr_aviso_rec.pct_icms_frete_c)/100
            IF mr_aviso_rec.val_base_c_frete_d > 0 AND
               mr_aviso_rec.val_base_c_frete_d IS NOT NULL THEN
               LET mr_aviso_rec.val_icms_frete_d = (mr_aviso_rec.val_base_c_frete_d *
                                                    l_pct_icms_frete_d)/100
            END IF
        END IF

        IF mr_aviso_rec.val_base_c_frete_d > 0 AND
           mr_aviso_rec.val_base_c_frete_d IS NOT NULL THEN
           LET l_val_base = mr_aviso_rec.val_base_c_frete_d
        ELSE
           LET l_val_base = mr_aviso_rec.val_base_c_frete_c
        END IF

        LET mr_aviso_rec.val_icms_diferen_f = 0

        IF mr_aviso_rec.pct_diferen_fret_d > 0 THEN
           LET mr_aviso_rec.val_icms_diferen_f = l_val_base *
               (mr_aviso_rec.pct_diferen_fret_d/100)
           LET l_valor_diferen = l_valor_diferen +
               mr_aviso_rec.val_icms_diferen_f
        ELSE
           IF mr_aviso_rec.pct_diferen_fret_c > 0 THEN
              LET mr_aviso_rec.val_icms_diferen_f = l_val_base *
                  (mr_aviso_rec.pct_diferen_fret_c/100)
              LET l_valor_diferen = l_valor_diferen +
                  mr_aviso_rec.val_icms_diferen_f
           END IF
        END IF

        INITIALIZE l_ies_obj_entrada_fisc, l_status TO NULL
        CALL sup0686_retorna_objetivo_entrada(mr_aviso_rec.cod_fiscal_item,
                                              l_cod_fiscal_compl)
                                              RETURNING l_status,
                                                        l_ies_obj_entrada_fisc

        IF m_ies_grupo_desp_item = "S"  AND #Rafael - OS310614
          (l_ies_objetivo_ent    = "3"  OR
           l_ies_objetivo_ent    = "4"  OR
           l_ies_objetivo_ent    = "6") THEN
        ELSE
           IF (l_incidencia = "C" OR l_incidencia = "E") AND
              (l_ies_obj_entrada_fisc = "1" OR l_ies_obj_entrada_fisc = "2") THEN
              LET mr_aviso_rec.pct_diferen_fret_d = 0
              LET mr_aviso_rec.pct_diferen_fret_c = 0
              LET mr_aviso_rec.val_icms_diferen_f = 0
           ELSE
              LET l_val_base_diferen = l_val_base_diferen + l_val_base
              LET p_calcula_diferen = TRUE
           END IF
        END IF

        LET l_saldo_frete_ant  = l_saldo_frete
        LET l_saldo_basecd_ant = l_saldo_base_c_d
        LET l_saldo_icms_ant   = l_saldo_icms
        LET l_saldo_frete      = l_saldo_frete - mr_aviso_rec.val_frete
        IF mr_frete_sup.val_base_c_frete_d > 0 AND
           mr_frete_sup.val_base_c_frete_d IS NOT NULL THEN
           LET l_saldo_base_c_d = l_saldo_base_c_d - mr_aviso_rec.val_base_c_frete_d
        END IF

        IF mr_aviso_rec.val_icms_frete_d <> 0 THEN
           LET l_saldo_icms = l_saldo_icms - mr_aviso_rec.val_icms_frete_d
        ELSE
           LET l_saldo_icms = l_saldo_icms - mr_aviso_rec.val_icms_frete_c
        END IF

        IF l_saldo_frete < 0 THEN
           LET mr_aviso_rec.val_frete = l_saldo_frete_ant
           LET l_saldo_frete = 0
        END IF
        IF l_saldo_base_c_d < 0 THEN
           LET mr_aviso_rec.val_base_c_frete_d = l_saldo_basecd_ant
           LET l_saldo_base_c_d = 0
        END IF

        IF l_saldo_icms < 0 THEN
           LET mr_aviso_rec.val_icms_frete_d = l_saldo_icms_ant
           LET l_saldo_icms = 0
        END IF

        LET l_val_frete_acum   = l_val_frete_acum   + mr_aviso_rec.val_frete
        LET l_val_base_c_acum  = l_val_base_c_acum  + mr_aviso_rec.val_base_c_frete_c
        LET l_val_icms_fr_acum = l_val_icms_fr_acum + mr_aviso_rec.val_icms_frete_c

        #_# aqui vai ter que ter um IF que vai verificar qual tabela q eh pra fazer o update
        IF l_tabela = "1" THEN

           WHENEVER ERROR CONTINUE
           UPDATE aviso_rec
              SET aviso_rec.val_frete          = mr_aviso_rec.val_frete,
                  aviso_rec.val_base_c_frete_c = mr_aviso_rec.val_base_c_frete_c,
                  aviso_rec.val_base_c_frete_d = mr_aviso_rec.val_base_c_frete_d,
                  aviso_rec.val_icms_diferen_f = mr_aviso_rec.val_icms_diferen_f,
                  aviso_rec.val_icms_frete_c   = mr_aviso_rec.val_icms_frete_c,
                  aviso_rec.val_icms_frete_d   = mr_aviso_rec.val_icms_frete_d,
                  aviso_rec.pct_icms_frete_c   = mr_aviso_rec.pct_icms_frete_c,
                  aviso_rec.pct_red_bc_frete_c = mr_aviso_rec.pct_red_bc_frete_c,
                  aviso_rec.pct_diferen_fret_c = mr_aviso_rec.pct_diferen_fret_c
            WHERE aviso_rec.cod_empresa   = mr_aviso_rec.cod_empresa
              AND aviso_rec.num_aviso_rec = mr_aviso_rec.num_aviso_rec
              AND aviso_rec.num_seq       = mr_aviso_rec.num_seq
            WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("ATUALIZACAO","AVISO_REC")
              CLOSE cq_rateio_frete #764215#
              FREE cq_rateio_frete #764215#
              RETURN
           END IF
        ELSE
           CALL supm370_sup_frete_x_nf_entrada_leitura(mr_aviso_rec.cod_empresa,
                                                       mr_aviso_rec.num_aviso_rec,
                                                       mr_aviso_rec.num_seq,
                                                       mr_frete_sup.num_conhec,
                                                       mr_frete_sup.ser_conhec,
                                                       mr_frete_sup.ssr_conhec,
                                                       mr_frete_sup.cod_transpor,
                                                       TRUE,
                                                       FALSE)
              RETURNING l_status
           CALL supm370_sup_frete_x_nf_entrada_set_val_frete(mr_aviso_rec.val_frete)
           CALL supm370_sup_frete_x_nf_entrada_set_val_bas_calc_frete_declarado(mr_aviso_rec.val_base_c_frete_d)
           CALL supm370_sup_frete_x_nf_entrada_set_val_bas_calc_frete_calculado(mr_aviso_rec.val_base_c_frete_c)
           CALL supm370_sup_frete_x_nf_entrada_set_val_diferenc_icms_frete(mr_aviso_rec.val_icms_diferen_f)
           CALL supm370_sup_frete_x_nf_entrada_set_val_icms_frete_calculado(mr_aviso_rec.val_icms_frete_c)
           CALL supm370_sup_frete_x_nf_entrada_set_val_icms_frete_declarado(mr_aviso_rec.val_icms_frete_d)
           CALL supm370_sup_frete_x_nf_entrada_set_pct_icms_frete_calculado(mr_aviso_rec.pct_icms_frete_c)
           CALL supm370_sup_frete_x_nf_entrada_set_pct_red_bc_frete_calculado(mr_aviso_rec.pct_red_bc_frete_c)
           CALL supm370_sup_frete_x_nf_entrada_set_pct_diferenc_frete_calculado(mr_aviso_rec.pct_diferen_fret_c)
           CALL supt370_sup_frete_x_nf_entrada_modifica(TRUE, TRUE)
           RETURNING p_status
        END IF
     ELSE
        WHENEVER ERROR CONTINUE
        UPDATE aviso_rec SET aviso_rec.val_frete = 0
         WHERE aviso_rec.cod_empresa   = mr_aviso_rec.cod_empresa
           AND aviso_rec.num_aviso_rec = mr_aviso_rec.num_aviso_rec
           AND aviso_rec.num_seq       = mr_aviso_rec.num_seq
         WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("ATUALIZACAO","AVISO_REC")
           CLOSE cq_rateio_frete #764215#
           FREE cq_rateio_frete #764215#
           RETURN
        END IF
     END IF

     CALL sup0552_divergencia_transp()
  END FOREACH
  FREE cq_rateio_frete #764215#

END FUNCTION


#-----------------------------#
FUNCTION sup0552_compl_rateio()
#-----------------------------#

DEFINE l_cod_fiscal_compl_nf  LIKE aviso_rec_compl.cod_fiscal_compl,
       l_val_base             DECIMAL(17,2),
       l_valor_diferen        LIKE frete_sup.val_icms_diferen,
       l_cod_fiscal_compl     LIKE item_sup_compl.cod_fiscal_compl,
       l_val_base_diferen     LIKE aviso_rec.val_base_c_frete_c


 WHENEVER ERROR CONTINUE
 DECLARE cq_rateio1 CURSOR WITH HOLD FOR
 SELECT aviso_rec.cod_empresa           ,
        aviso_rec.cod_empresa_estab     ,
        aviso_rec.num_aviso_rec         ,
        aviso_rec.num_seq               ,
        aviso_rec.dat_inclusao_seq      ,
        aviso_rec.ies_situa_ar          ,
        aviso_rec.ies_incl_almox        ,
        aviso_rec.ies_receb_fiscal      ,
        aviso_rec.ies_liberacao_ar      ,
        aviso_rec.ies_liberacao_cont    ,
        aviso_rec.ies_liberacao_insp    ,
        aviso_rec.ies_diverg_listada    ,
        aviso_rec.ies_item_estoq        ,
        aviso_rec.ies_controle_lote     ,
        aviso_rec.cod_comprador         ,
        aviso_rec.num_pedido            ,
        aviso_rec.num_oc                ,
        aviso_rec.cod_item              ,
        aviso_rec.den_item              ,
        aviso_rec.cod_cla_fisc          ,
        aviso_rec.cod_unid_med_nf       ,
        aviso_rec.pre_unit_nf           ,
        aviso_rec.val_despesa_aces_i    ,
        aviso_rec.ies_da_bc_ipi         ,
        aviso_rec.cod_incid_ipi         ,
        aviso_rec.ies_tip_incid_ipi     ,
        aviso_rec.pct_direito_cred      ,
        aviso_rec.pct_ipi_declarad      ,
        aviso_rec.pct_ipi_tabela        ,
        aviso_rec.ies_bitributacao      ,
        aviso_rec.val_base_c_ipi_it     ,
        aviso_rec.val_base_c_ipi_da     ,
        aviso_rec.val_ipi_decl_item     ,
        aviso_rec.val_ipi_calc_item     ,
        aviso_rec.val_ipi_desp_aces     ,
        aviso_rec.val_desc_item         ,
        aviso_rec.val_liquido_item      ,
        aviso_rec.val_contabil_item     ,
        aviso_rec.qtd_declarad_nf       ,
        aviso_rec.qtd_recebida          ,
        aviso_rec.qtd_devolvid          ,
        aviso_rec.dat_devoluc           ,
        aviso_rec.val_devoluc           ,
        aviso_rec.num_nf_dev            ,
        aviso_rec.qtd_rejeit            ,
        aviso_rec.qtd_liber             ,
        aviso_rec.qtd_liber_excep       ,
        aviso_rec.cus_tot_item          ,
        aviso_rec.cod_fiscal_item       ,
        aviso_rec.gru_ctr_desp_item     ,
        aviso_rec.cod_local_estoq       ,
        aviso_rec.num_lote              ,
        aviso_rec.cod_operac_estoq      ,
        aviso_rec.val_base_c_item_d     ,
        aviso_rec.val_base_c_item_c     ,
        aviso_rec.pct_icms_item_d       ,
        aviso_rec.pct_icms_item_c       ,
        aviso_rec.pct_red_bc_item_d     ,
        aviso_rec.pct_red_bc_item_c     ,
        aviso_rec.pct_diferen_item_d    ,
        aviso_rec.pct_diferen_item_c    ,
        aviso_rec.val_icms_item_d       ,
        aviso_rec.val_icms_item_c       ,
        aviso_rec.val_base_c_icms_da    ,
        aviso_rec.val_icms_diferen_i    ,
        aviso_rec.val_icms_desp_aces    ,
        aviso_rec.ies_incid_icms_ite    ,
        aviso_rec.val_frete             ,
        aviso_rec.val_icms_frete_d      ,
        aviso_rec.val_icms_frete_c      ,
        aviso_rec.val_base_c_frete_d    ,
        aviso_rec.val_base_c_frete_c    ,
        aviso_rec.val_icms_diferen_f    ,
        aviso_rec.pct_icms_frete_d      ,
        aviso_rec.pct_icms_frete_c      ,
        aviso_rec.pct_red_bc_frete_d    ,
        aviso_rec.pct_red_bc_frete_c    ,
        aviso_rec.pct_diferen_fret_d    ,
        aviso_rec.pct_diferen_fret_c    ,
        aviso_rec.val_acrescimos        ,
        aviso_rec.val_enc_financ        ,
        aviso_rec.ies_contabil          ,
        aviso_rec.ies_total_nf          ,
        aviso_rec.val_compl_estoque     ,
        aviso_rec.dat_ref_val_compl     ,
        aviso_rec.pct_enc_financ        ,
        aviso_rec.cod_cla_fisc_nf       ,
        aviso_rec.cod_tip_despesa       ,
        aviso_rec.observacao            ,
        nf_sup.cod_empresa              ,
        nf_sup.cod_empresa_estab        ,
        nf_sup.num_nf                   ,
        nf_sup.ser_nf                   ,
        nf_sup.ssr_nf                   ,
        nf_sup.ies_especie_nf           ,
        nf_sup.cod_fornecedor           ,
        nf_sup.num_conhec               ,
        nf_sup.ser_conhec               ,
        nf_sup.ssr_conhec               ,
        nf_sup.cod_transpor             ,
        nf_sup.num_aviso_rec            ,
        nf_sup.dat_emis_nf              ,
        nf_sup.dat_entrada_nf           ,
        nf_sup.cod_regist_entrada       ,
        nf_sup.val_tot_nf_c             ,
        nf_sup.val_tot_nf_d             ,
        nf_sup.val_tot_icms_nf_d        ,
        nf_sup.val_tot_icms_nf_c        ,
        nf_sup.val_tot_desc             ,
        nf_sup.val_tot_acresc           ,
        nf_sup.val_ipi_nf               ,
        nf_sup.val_ipi_calc             ,
        nf_sup.val_despesa_aces         ,
        nf_sup.val_adiant               ,
        nf_sup.ies_tip_frete            ,
        nf_sup.cnd_pgto_nf              ,
        nf_sup.cod_mod_embar            ,
        nf_sup.ies_nf_com_erro          ,
        nf_sup.nom_resp_aceite_er       ,
        nf_sup.ies_incl_cap             ,
        nf_sup.ies_incl_contab          ,
        nf_sup.cod_operacao             ,
        nf_sup.ies_calc_subst           ,
        nf_sup.val_bc_subst_d           ,
        nf_sup.val_icms_subst_d         ,
        nf_sup.val_bc_subst_c           ,
        nf_sup.val_icms_subst_c         ,
        nf_sup.cod_imp_renda            ,
        nf_sup.val_imp_renda            ,
        nf_sup.ies_situa_import         ,
        nf_sup.val_bc_imp_renda         ,
        nf_sup.ies_nf_aguard_nfe        ,
        aviso_rec_compl.cod_fiscal_compl
   INTO mr_aviso_rec.cod_empresa           ,
        mr_aviso_rec.cod_empresa_estab     ,
        mr_aviso_rec.num_aviso_rec         ,
        mr_aviso_rec.num_seq               ,
        mr_aviso_rec.dat_inclusao_seq      ,
        mr_aviso_rec.ies_situa_ar          ,
        mr_aviso_rec.ies_incl_almox        ,
        mr_aviso_rec.ies_receb_fiscal      ,
        mr_aviso_rec.ies_liberacao_ar      ,
        mr_aviso_rec.ies_liberacao_cont    ,
        mr_aviso_rec.ies_liberacao_insp    ,
        mr_aviso_rec.ies_diverg_listada    ,
        mr_aviso_rec.ies_item_estoq        ,
        mr_aviso_rec.ies_controle_lote     ,
        mr_aviso_rec.cod_comprador         ,
        mr_aviso_rec.num_pedido            ,
        mr_aviso_rec.num_oc                ,
        mr_aviso_rec.cod_item              ,
        mr_aviso_rec.den_item              ,
        mr_aviso_rec.cod_cla_fisc          ,
        mr_aviso_rec.cod_unid_med_nf       ,
        mr_aviso_rec.pre_unit_nf           ,
        mr_aviso_rec.val_despesa_aces_i    ,
        mr_aviso_rec.ies_da_bc_ipi         ,
        mr_aviso_rec.cod_incid_ipi         ,
        mr_aviso_rec.ies_tip_incid_ipi     ,
        mr_aviso_rec.pct_direito_cred      ,
        mr_aviso_rec.pct_ipi_declarad      ,
        mr_aviso_rec.pct_ipi_tabela        ,
        mr_aviso_rec.ies_bitributacao      ,
        mr_aviso_rec.val_base_c_ipi_it     ,
        mr_aviso_rec.val_base_c_ipi_da     ,
        mr_aviso_rec.val_ipi_decl_item     ,
        mr_aviso_rec.val_ipi_calc_item     ,
        mr_aviso_rec.val_ipi_desp_aces     ,
        mr_aviso_rec.val_desc_item         ,
        mr_aviso_rec.val_liquido_item      ,
        mr_aviso_rec.val_contabil_item     ,
        mr_aviso_rec.qtd_declarad_nf       ,
        mr_aviso_rec.qtd_recebida          ,
        mr_aviso_rec.qtd_devolvid          ,
        mr_aviso_rec.dat_devoluc           ,
        mr_aviso_rec.val_devoluc           ,
        mr_aviso_rec.num_nf_dev            ,
        mr_aviso_rec.qtd_rejeit            ,
        mr_aviso_rec.qtd_liber             ,
        mr_aviso_rec.qtd_liber_excep       ,
        mr_aviso_rec.cus_tot_item          ,
        mr_aviso_rec.cod_fiscal_item       ,
        mr_aviso_rec.gru_ctr_desp_item     ,
        mr_aviso_rec.cod_local_estoq       ,
        mr_aviso_rec.num_lote              ,
        mr_aviso_rec.cod_operac_estoq      ,
        mr_aviso_rec.val_base_c_item_d     ,
        mr_aviso_rec.val_base_c_item_c     ,
        mr_aviso_rec.pct_icms_item_d       ,
        mr_aviso_rec.pct_icms_item_c       ,
        mr_aviso_rec.pct_red_bc_item_d     ,
        mr_aviso_rec.pct_red_bc_item_c     ,
        mr_aviso_rec.pct_diferen_item_d    ,
        mr_aviso_rec.pct_diferen_item_c    ,
        mr_aviso_rec.val_icms_item_d       ,
        mr_aviso_rec.val_icms_item_c       ,
        mr_aviso_rec.val_base_c_icms_da    ,
        mr_aviso_rec.val_icms_diferen_i    ,
        mr_aviso_rec.val_icms_desp_aces    ,
        mr_aviso_rec.ies_incid_icms_ite    ,
        mr_aviso_rec.val_frete             ,
        mr_aviso_rec.val_icms_frete_d      ,
        mr_aviso_rec.val_icms_frete_c      ,
        mr_aviso_rec.val_base_c_frete_d    ,
        mr_aviso_rec.val_base_c_frete_c    ,
        mr_aviso_rec.val_icms_diferen_f    ,
        mr_aviso_rec.pct_icms_frete_d      ,
        mr_aviso_rec.pct_icms_frete_c      ,
        mr_aviso_rec.pct_red_bc_frete_d    ,
        mr_aviso_rec.pct_red_bc_frete_c    ,
        mr_aviso_rec.pct_diferen_fret_d    ,
        mr_aviso_rec.pct_diferen_fret_c    ,
        mr_aviso_rec.val_acrescimos        ,
        mr_aviso_rec.val_enc_financ        ,
        mr_aviso_rec.ies_contabil          ,
        mr_aviso_rec.ies_total_nf          ,
        mr_aviso_rec.val_compl_estoque     ,
        mr_aviso_rec.dat_ref_val_compl     ,
        mr_aviso_rec.pct_enc_financ        ,
        mr_aviso_rec.cod_cla_fisc_nf       ,
        mr_aviso_rec.cod_tip_despesa       ,
        mr_aviso_rec.observacao            ,
        mr_nf_sup.cod_empresa              ,
        mr_nf_sup.cod_empresa_estab        ,
        mr_nf_sup.num_nf                   ,
        mr_nf_sup.ser_nf                   ,
        mr_nf_sup.ssr_nf                   ,
        mr_nf_sup.ies_especie_nf           ,
        mr_nf_sup.cod_fornecedor           ,
        mr_nf_sup.num_conhec               ,
        mr_nf_sup.ser_conhec               ,
        mr_nf_sup.ssr_conhec               ,
        mr_nf_sup.cod_transpor             ,
        mr_nf_sup.num_aviso_rec            ,
        mr_nf_sup.dat_emis_nf              ,
        mr_nf_sup.dat_entrada_nf           ,
        mr_nf_sup.cod_regist_entrada       ,
        mr_nf_sup.val_tot_nf_c             ,
        mr_nf_sup.val_tot_nf_d             ,
        mr_nf_sup.val_tot_icms_nf_d        ,
        mr_nf_sup.val_tot_icms_nf_c        ,
        mr_nf_sup.val_tot_desc             ,
        mr_nf_sup.val_tot_acresc           ,
        mr_nf_sup.val_ipi_nf               ,
        mr_nf_sup.val_ipi_calc             ,
        mr_nf_sup.val_despesa_aces         ,
        mr_nf_sup.val_adiant               ,
        mr_nf_sup.ies_tip_frete            ,
        mr_nf_sup.cnd_pgto_nf              ,
        mr_nf_sup.cod_mod_embar            ,
        mr_nf_sup.ies_nf_com_erro          ,
        mr_nf_sup.nom_resp_aceite_er       ,
        mr_nf_sup.ies_incl_cap             ,
        mr_nf_sup.ies_incl_contab          ,
        mr_nf_sup.cod_operacao             ,
        mr_nf_sup.ies_calc_subst           ,
        mr_nf_sup.val_bc_subst_d           ,
        mr_nf_sup.val_icms_subst_d         ,
        mr_nf_sup.val_bc_subst_c           ,
        mr_nf_sup.val_icms_subst_c         ,
        mr_nf_sup.cod_imp_renda            ,
        mr_nf_sup.val_imp_renda            ,
        mr_nf_sup.ies_situa_import         ,
        mr_nf_sup.val_bc_imp_renda         ,
        mr_nf_sup.ies_nf_aguard_nfe        ,
        l_cod_fiscal_compl_nf
   FROM nf_sup, aviso_rec, aviso_rec_compl, cod_fiscal_sup
  WHERE nf_sup.cod_empresa        = mr_frete_sup.cod_empresa
    AND nf_sup.num_conhec         = mr_frete_sup.num_conhec
    AND nf_sup.ser_conhec         = mr_frete_sup.ser_conhec
    AND nf_sup.ssr_conhec         = mr_frete_sup.ssr_conhec
    AND nf_sup.cod_transpor       = mr_frete_sup.cod_transpor
    AND aviso_rec.cod_empresa     = nf_sup.cod_empresa
    AND aviso_rec.num_aviso_rec   = nf_sup.num_aviso_rec
    AND aviso_rec_compl.cod_empresa     = aviso_rec.cod_empresa
    AND aviso_rec_compl.num_aviso_rec   = aviso_rec.num_aviso_rec
    AND cod_fiscal_sup.cod_fiscal       = nf_sup.cod_operacao
    AND cod_fiscal_sup.cod_fiscal_compl = aviso_rec_compl.cod_fiscal_compl
    AND ((aviso_rec.ies_contabil  = "S" AND
         aviso_rec.ies_incid_icms_ite <> "I")
     OR (cod_fiscal_sup.ies_obj_entrada = "99" AND
         aviso_rec.ies_incid_icms_ite = "I"))
    AND aviso_rec.ies_contabil <> "M"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_RATEIO1")
 END IF

    WHENEVER ERROR CONTINUE
    FOREACH cq_rateio1
    IF sqlca.sqlcode > 0 THEN
       CALL log003_err_sql("FOREACH","CQ_RATEIO1")
    END IF

       LET l_val_base = 0
       LET l_cod_fiscal_compl = 0
       WHENEVER ERROR CONTINUE
       SELECT aviso_rec_compl_sq.cod_fiscal_compl
         INTO l_cod_fiscal_compl
         FROM aviso_rec_compl_sq
        WHERE aviso_rec_compl_sq.cod_empresa   = mr_aviso_rec.cod_empresa
          AND aviso_rec_compl_sq.num_aviso_rec = mr_aviso_rec.num_aviso_rec
          AND aviso_rec_compl_sq.num_seq       = mr_aviso_rec.num_seq
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("SELECT","AVISO_REC_COMPL_SQ")
       END IF

       IF mr_aviso_rec.val_base_c_frete_d > 0 AND
          mr_aviso_rec.val_base_c_frete_d IS NOT NULL THEN
          LET l_val_base = mr_aviso_rec.val_base_c_frete_d
       ELSE
          LET l_val_base = mr_aviso_rec.val_base_c_frete_c
       END IF

       LET mr_aviso_rec.val_icms_diferen_f = 0

       IF mr_aviso_rec.pct_diferen_fret_d > 0 THEN
          LET mr_aviso_rec.val_icms_diferen_f = (l_valor_diferen * l_val_base)
                                                 / l_val_base_diferen
       ELSE
          IF mr_aviso_rec.pct_diferen_fret_c > 0 THEN
             LET mr_aviso_rec.val_icms_diferen_f = (l_valor_diferen * l_val_base)
                                                    / l_val_base_diferen
          END IF
       END IF

       WHENEVER ERROR CONTINUE
       UPDATE aviso_rec SET aviso_rec.val_icms_diferen_f =
                            mr_aviso_rec.val_icms_diferen_f
        WHERE aviso_rec.cod_empresa   = mr_aviso_rec.cod_empresa
          AND aviso_rec.num_aviso_rec = mr_aviso_rec.num_aviso_rec
          AND aviso_rec.num_seq       = mr_aviso_rec.num_seq
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("UPDATE","AVISO_REC")
       END IF

      IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql("ATUALIZACAO","AVISO_REC")
      CLOSE cq_rateio1 #764215#
      FREE cq_rateio1 #764215#
      RETURN FALSE
   END IF

 END FOREACH
 FREE cq_rateio1 #764215#

END FUNCTION




#------------------------------------------------------------------------------#
FUNCTION sup0552_realiza_ajustes_dif_maior_frete_rateado(l_conta,
                                                         l_quantos,
                                                         l_val_tot_liq_ant,
                                                         l_pct_icms_frete_d,
                                                         l_saldo_base_c_d,
                                                         l_saldo_icms,
                                                         l_saldo_frete,
                                                         l_saldo_basecd_ant,
                                                         l_saldo_icms_ant,
                                                         l_tabela)
#-------------------------------------------------------------------------------#

DEFINE l_conta                SMALLINT,
       l_quantos              SMALLINT,
       l_val_tot_liq_ant      DECIMAL(17,2),
       l_pct_icms_frete_d     LIKE aviso_rec.pct_icms_frete_d,
       l_saldo_base_c_d       LIKE frete_sup.val_base_c_frete_d,
       l_saldo_icms           LIKE frete_sup.val_tot_icms_frt_d,
       l_saldo_frete          LIKE frete_sup.val_frete,
       l_saldo_basecd_ant     LIKE frete_sup.val_base_c_frete_d,
       l_saldo_icms_ant       LIKE frete_sup.val_tot_icms_frt_d,
       l_saldo_frete_ant      LIKE frete_sup.val_frete,
       sql_stmt               CHAR(1000),
       l_tabela               CHAR(01)



 IF l_tabela = "1" THEN
    LET sql_stmt = " SELECT aviso_rec.* ",
                   " FROM nf_sup, aviso_rec "
 ELSE
    LET sql_stmt = " SELECT aviso_rec.* ",
                   " FROM sup_frete_x_nf_entrada, nf_sup, aviso_rec "
 END IF

 IF l_tabela = "1" THEN
    LET sql_stmt = sql_stmt CLIPPED,
    " WHERE nf_sup.cod_empresa     = """,mr_frete_sup.cod_empresa,""" ",
    "  AND nf_sup.num_conhec       = """,mr_frete_sup.num_conhec,""" ",
    "  AND nf_sup.ser_conhec       = """,mr_frete_sup.ser_conhec,""" ",
    "  AND nf_sup.ssr_conhec       = """,mr_frete_sup.ssr_conhec,""" ",
    "  AND nf_sup.cod_transpor     = """,mr_frete_sup.cod_transpor,""" ",
    "  AND aviso_rec.cod_empresa   = nf_sup.cod_empresa ",
    "  AND aviso_rec.num_aviso_rec = nf_sup.num_aviso_rec ",
    "  AND aviso_rec.ies_contabil  = ""S"" ",
    "  AND aviso_rec.ies_incid_icms_ite <> ""I"" "
 ELSE
    LET sql_stmt = sql_stmt CLIPPED,
    " WHERE sup_frete_x_nf_entrada.empresa         = """,mr_frete_sup.cod_empresa,""" ",
    "   AND sup_frete_x_nf_entrada.conhec          = """,mr_frete_sup.num_conhec,""" ",
    "   AND sup_frete_x_nf_entrada.serie_conhec    = """,mr_frete_sup.ser_conhec,""" ",
    "   AND sup_frete_x_nf_entrada.subserie_conhec = """,mr_frete_sup.ssr_conhec,""" ",
    "   AND sup_frete_x_nf_entrada.transportador   = """,mr_frete_sup.cod_transpor,""" ",
    "   AND aviso_rec.cod_empresa   = nf_sup.cod_empresa ",
    "   AND aviso_rec.num_aviso_rec = nf_sup.num_aviso_rec ",
    "   AND aviso_rec.ies_contabil  = ""S"" ",
    "   AND aviso_rec.ies_incid_icms_ite <> ""I"" "
 END IF

 WHENEVER ERROR CONTINUE
 PREPARE var_query12 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query12")
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_rat_val_frt CURSOR FOR var_query12
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_RAT_VAL_FRT")
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cq_rat_val_frt
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("FOREACH","CQ_RAT_VAL_FRT")
 END IF

   LET l_conta = l_conta + 1

   IF l_conta = l_quantos THEN
      LET mr_aviso_rec.val_frete = l_saldo_frete
      IF mr_frete_sup.val_base_c_frete_d > 0 AND
         mr_frete_sup.val_base_c_frete_d IS NOT NULL THEN
         LET mr_aviso_rec.val_base_c_frete_d = l_saldo_base_c_d
      END IF

      IF mr_frete_sup.val_tot_icms_frt_d > 0 THEN
         LET mr_aviso_rec.val_icms_frete_d = l_saldo_icms
      ELSE
         LET mr_aviso_rec.val_icms_frete_c = l_saldo_icms
      END IF
   ELSE
      IF l_val_tot_liq_ant <> 0 THEN
         LET mr_aviso_rec.val_frete = (mr_frete_sup.val_frete *
                                       mr_aviso_rec.val_liquido_item) /
                                       l_val_tot_liq_ant
         IF mr_aviso_rec.val_base_c_frete_d > 0 AND
            mr_aviso_rec.val_base_c_frete_d IS NOT NULL THEN
            IF mr_aviso_rec.pct_icms_frete_d = 0 OR
               mr_aviso_rec.pct_icms_frete_d IS NULL THEN
               LET l_pct_icms_frete_d = mr_aviso_rec.pct_icms_frete_c
            ELSE
               LET l_pct_icms_frete_d = mr_aviso_rec.pct_icms_frete_d
            END IF
         END IF

         IF mr_frete_sup.val_tot_icms_frt_d > 0 THEN
            IF l_pct_icms_frete_d > 0 THEN
               IF mr_aviso_rec.val_base_c_frete_d > 0 AND
                  mr_aviso_rec.val_base_c_frete_d IS NOT NULL THEN
                  LET mr_aviso_rec.val_icms_frete_d = (mr_aviso_rec.val_base_c_frete_d *
                                                       (l_pct_icms_frete_d / 100))
               ELSE
                  LET mr_aviso_rec.val_icms_frete_d = (mr_aviso_rec.val_frete *
                                                       (l_pct_icms_frete_d / 100))
               END IF
            ELSE
               IF mr_aviso_rec.val_base_c_frete_d > 0 AND
                  mr_aviso_rec.val_base_c_frete_d IS NOT NULL THEN
                  LET mr_aviso_rec.val_icms_frete_d = (mr_aviso_rec.val_base_c_frete_d *
                                                       (mr_aviso_rec.pct_icms_frete_c / 100))
               ELSE
                  LET mr_aviso_rec.val_icms_frete_d = (mr_aviso_rec.val_frete * (mr_aviso_rec.pct_icms_frete_c / 100))
               END IF
            END IF
         ELSE
            LET mr_aviso_rec.val_icms_frete_c = (mr_frete_sup.val_tot_icms_frt_c *
                                                 mr_aviso_rec.val_liquido_item) /
                                                 l_val_tot_liq_ant
         END IF
      ELSE
         LET mr_aviso_rec.val_frete        = 0
         LET mr_aviso_rec.val_icms_frete_d = 0
         LET mr_aviso_rec.val_icms_frete_c = 0
      END IF
   END IF

   IF mr_frete_sup.val_tot_icms_frt_d > 0 THEN

      LET l_saldo_frete_ant  = l_saldo_frete
      LET l_saldo_basecd_ant = l_saldo_base_c_d
      LET l_saldo_icms_ant   = l_saldo_icms
      LET l_saldo_frete      = l_saldo_frete    - mr_aviso_rec.val_frete
      LET l_saldo_base_c_d   = l_saldo_base_c_d - mr_aviso_rec.val_base_c_frete_d

      IF mr_aviso_rec.val_icms_frete_d <> 0 THEN
         LET l_saldo_icms = l_saldo_icms - mr_aviso_rec.val_icms_frete_d
      ELSE
         LET l_saldo_icms = l_saldo_icms - mr_aviso_rec.val_icms_frete_c
      END IF

      IF l_saldo_frete < 0 THEN
         LET mr_aviso_rec.val_frete = l_saldo_frete_ant
         LET l_saldo_frete = 0
      END IF

      IF l_saldo_base_c_d < 0 THEN
         LET mr_aviso_rec.val_base_c_frete_d = l_saldo_basecd_ant
         LET l_saldo_base_c_d = 0
      END IF

      IF l_saldo_icms < 0 THEN
         LET mr_aviso_rec.val_icms_frete_d = l_saldo_icms_ant
         LET l_saldo_icms = 0
      END IF

      UPDATE aviso_rec
         SET aviso_rec.val_frete     = mr_aviso_rec.val_frete
       WHERE aviso_rec.cod_empresa   = mr_aviso_rec.cod_empresa
         AND aviso_rec.num_aviso_rec = mr_aviso_rec.num_aviso_rec
         AND aviso_rec.num_seq       = mr_aviso_rec.num_seq
   ELSE
      UPDATE aviso_rec
         SET aviso_rec.val_frete     = mr_aviso_rec.val_frete
       WHERE aviso_rec.cod_empresa   = mr_aviso_rec.cod_empresa
         AND aviso_rec.num_aviso_rec = mr_aviso_rec.num_aviso_rec
         AND aviso_rec.num_seq       = mr_aviso_rec.num_seq
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("UPDATE","AVISO_REC")
        END IF
      LET l_saldo_frete    = l_saldo_frete    - mr_aviso_rec.val_frete
      LET l_saldo_base_c_d = l_saldo_base_c_d - mr_aviso_rec.val_base_c_frete_d
      LET l_saldo_icms     = l_saldo_icms     - mr_aviso_rec.val_icms_frete_c
   END IF

   CALL LOG_setVar("empresa",mr_aviso_rec.cod_empresa)
   IF NOT sup1031_grava_audit_ar(mr_aviso_rec.num_aviso_rec,
                                 mr_aviso_rec.num_seq,
                                 "SUP0552","4") THEN
       CLOSE cq_rat_val_frt #764215#
       FREE cq_rat_val_frt #764215#
      RETURN
   END IF
END FOREACH
WHENEVER ERROR STOP
FREE cq_rat_val_frt

END FUNCTION

#---------------------------------------------#
FUNCTION sup0552_cons_nf_duplicada(l_cod_fornec,
                                   l_ies_nf,
                                   l_num_nf,
                                   l_num_ser,
                                   l_num_ssr)
#---------------------------------------------#
DEFINE l_msg             CHAR(60),
       l_cod_fornec      LIKE nf_sup.cod_fornecedor,
       l_ies_nf          LIKE nf_sup.ies_especie_nf,
       l_num_nf          LIKE nf_sup.num_nf,
       l_num_ser         LIKE nf_sup.ser_nf,
       l_num_ssr         LIKE nf_sup.ssr_nf,
       l_achou           SMALLINT

LET l_achou = FALSE
WHENEVER ERROR CONTINUE
DECLARE cq_empresa CURSOR FOR
 SELECT nf_sup.cod_empresa
   FROM nf_sup
  WHERE nf_sup.cod_fornecedor = l_cod_fornec
    AND nf_sup.ies_especie_nf = l_ies_nf
    AND nf_sup.num_nf         = l_num_nf
    AND nf_sup.ser_nf         = l_num_ser
    AND nf_sup.ssr_nf         = l_num_ssr
WHENEVER ERROR STOP

IF sqlca.sqlcode <> 0 THEN
   CALL log003_err_sql("DECLARE","CQ_EMPRESA")
   RETURN FALSE
END IF

WHENEVER ERROR CONTINUE
OPEN cq_empresa
WHENEVER ERROR STOP
IF sqlca.sqlcode <> 0 THEN
   CALL log003_err_sql("OPEN","CQ_EMPRESA")
   RETURN FALSE
END IF

WHENEVER ERROR CONTINUE
FETCH cq_empresa INTO m_cod_empresa_aux
WHENEVER ERROR STOP
IF sqlca.sqlcode = 0 THEN
   LET l_achou = TRUE
END IF

WHENEVER ERROR CONTINUE
CLOSE cq_empresa
FREE cq_empresa
WHENEVER ERROR STOP

IF l_achou = TRUE THEN
   RETURN TRUE
ELSE
   RETURN FALSE
END IF
END FUNCTION


#--------------------------------------#
 FUNCTION sup0552_mostra_erro_ar_compl()
#--------------------------------------#
 DEFINE l_texto     CHAR(075),
        l_ind       SMALLINT

 IF m_arg = FALSE THEN
    OPEN WINDOW w_erro AT 02,02 WITH 21 ROWS, 78 COLUMNS
         ATTRIBUTE(BORDER, PROMPT LINE LAST, MESSAGE LINE LAST)

     DISPLAY "                             A T E N Ç Ã O  ! ! !                             " AT 01,01 ATTRIBUTES(REVERSE)
    DISPLAY "                                                                 Página: 01/02" AT 02,01

     DISPLAY "Problema INCLUSÃO tabela AVISO_REC_COMPL. Sqlca.Sqlcode: ",sqlca.sqlcode AT 03,02

    IF mr_aviso_rec_compl.cod_empresa IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.cod_empresa...........: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.cod_empresa...........: ",mr_aviso_rec_compl.cod_empresa AT 05,02
    END IF
    IF mr_aviso_rec_compl.num_aviso_rec IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.num_aviso_rec.........: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.num_aviso_rec.........: ",mr_aviso_rec_compl.num_aviso_rec AT 06,02
    END IF
    IF mr_aviso_rec_compl.cod_transpor IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.cod_transpor..........: <NULO>" AT 07,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.cod_transpor..........: ",mr_aviso_rec_compl.cod_transpor AT 07,02
    END IF
    IF mr_aviso_rec_compl.den_transpor IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.den_transpor..........: <NULO>" AT 08,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.den_transpor..........: ",mr_aviso_rec_compl.den_transpor AT 08,02
    END IF
    IF mr_aviso_rec_compl.num_placa_veic IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.num_placa_veic........: <NULO>" AT 09,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.num_placa_veic........: ",mr_aviso_rec_compl.num_placa_veic AT 09,02
    END IF
    IF mr_aviso_rec_compl.num_di IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.num_di................: <NULO>" AT 10,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.num_di................: ",mr_aviso_rec_compl.num_di AT 10,02
    END IF
    IF mr_aviso_rec_compl.ies_incl_import IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.ies_incl_import.......: <NULO>" AT 11,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.ies_incl_import.......: ",mr_aviso_rec_compl.ies_incl_import AT 11,02
    END IF
    IF mr_aviso_rec_compl.num_lote_pat IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.num_lote_pat..........: <NULO>" AT 12,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.num_lote_pat..........: ",mr_aviso_rec_compl.num_lote_pat AT 12,02
    END IF
    IF mr_aviso_rec_compl.cod_operacao IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.cod_operacao..........: <NULO>" AT 13,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.cod_operacao..........: ",mr_aviso_rec_compl.cod_operacao AT 13,02
    END IF
    IF mr_aviso_rec_compl.cod_empresa_orig IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.cod_empresa_orig......: <NULO>" AT 14,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.cod_empresa_orig......: ",mr_aviso_rec_compl.cod_empresa_orig AT 14,02
    END IF
    IF mr_aviso_rec_compl.cod_moeda_forn IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.cod_moeda_forn........: <NULO>" AT 15,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.cod_moeda_forn........: ",mr_aviso_rec_compl.cod_moeda_forn AT 15,02
    END IF
    IF mr_aviso_rec_compl.num_embarque IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.num_embarque..........: <NULO>" AT 16,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.num_embarque..........: ",mr_aviso_rec_compl.num_embarque AT 16,02
    END IF
    IF mr_aviso_rec_compl.ies_situacao IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.ies_situacao..........: <NULO>" AT 17,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.ies_situacao..........: ",mr_aviso_rec_compl.ies_situacao AT 17,02
    END IF
    IF mr_aviso_rec_compl.nom_usuario IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.nom_usuario...........: <NULO>" AT 18,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.nom_usuario...........: ",mr_aviso_rec_compl.nom_usuario AT 18,02
    END IF
    IF mr_aviso_rec_compl.dat_proces IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.dat_proces............: <NULO>" AT 19,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.dat_proces............: ",mr_aviso_rec_compl.dat_proces AT 19,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    LET l_texto = " "
    FOR l_ind = 05 TO 19
        DISPLAY l_texto AT l_ind,02
    END FOR

    DISPLAY "                                                                 Página: 02/02" AT 02,01

    IF mr_aviso_rec_compl.hor_operac IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.hor_operac............: <NULO>" AT 05,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.hor_operac............: ",mr_aviso_rec_compl.hor_operac AT 05,02
    END IF
    IF mr_aviso_rec_compl.cod_fiscal_compl IS NULL THEN
        DISPLAY "mr_aviso_rec_compl.cod_fiscal_compl......: <NULO>" AT 06,02
    ELSE
        DISPLAY "mr_aviso_rec_compl.cod_fiscal_compl......: ",mr_aviso_rec_compl.cod_fiscal_compl AT 06,02
    END IF

    PROMPT " Pressione qualquer tecla para continuar ... " FOR CHAR comando

    CLOSE WINDOW w_erro
 END IF

 END FUNCTION

 #--------------------------------------------------#
 FUNCTION sup0552_cons_conhec_duplicado(l_cod_trans,
                                        l_num_conhec,
                                        l_ser_conhec,
                                        l_ssr_conhec)
#----------------------------------------------------#
 DEFINE l_msg             CHAR(60),
        l_cod_trans       LIKE frete_sup.cod_transpor,
        l_num_conhec      LIKE frete_sup.num_conhec,
        l_ser_conhec      LIKE frete_sup.ser_conhec,
        l_ssr_conhec      LIKE frete_sup.ssr_conhec,
        l_achou           SMALLINT

LET l_achou = FALSE
WHENEVER ERROR CONTINUE
DECLARE cq_empresa2 CURSOR FOR
 SELECT frete_sup.cod_empresa
   FROM frete_sup
  WHERE frete_sup.cod_empresa     IS NOT NULL
    AND frete_sup.cod_transpor    = l_cod_trans
    AND frete_sup.num_conhec      = l_num_conhec
    AND frete_sup.ser_conhec      = l_ser_conhec
    AND frete_sup.ssr_conhec      = l_ssr_conhec
WHENEVER ERROR STOP
IF sqlca.sqlcode <> 0 THEN
   CALL log003_err_sql("DECLARE","CQ_EMPRESA2")
   RETURN FALSE
END IF

WHENEVER ERROR CONTINUE
OPEN cq_empresa2
WHENEVER ERROR STOP
IF sqlca.sqlcode <> 0 THEN
   CALL log003_err_sql("OPEN","CQ_EMPRESA2")
   RETURN FALSE
END IF

WHENEVER ERROR CONTINUE
FETCH cq_empresa2 INTO m_cod_empresa_aux
WHENEVER ERROR STOP

IF sqlca.sqlcode = 0 THEN
   LET l_achou = TRUE
END IF

WHENEVER ERROR CONTINUE
CLOSE cq_empresa2
FREE cq_empresa2
WHENEVER ERROR STOP

IF l_achou = TRUE THEN
   RETURN TRUE
ELSE
   RETURN FALSE
END IF
END FUNCTION


#-------------------------------------------#
 FUNCTION sup0552_atribui_valores_frete_sup()
#-------------------------------------------#
 DEFINE l_erro       CHAR(60)

 IF mr_w_sup0552_4.serie_conhec_frete[1] = "I" OR
    mr_w_sup0552_4.serie_conhec_frete[1] = "C" OR
    mr_w_sup0552_4.serie_conhec_frete[1] = "O" THEN
    LET mr_frete_sup.ies_incid_icms_fre = mr_w_sup0552_4.serie_conhec_frete
 ELSE
   IF mr_w_sup0552_4.item[1] = "I" OR
      mr_w_sup0552_4.item[1] = "C" OR
      mr_w_sup0552_4.item[1] = "O" THEN
      LET mr_frete_sup.ies_incid_icms_fre = mr_w_sup0552_4.item[1]
   ELSE
      IF mr_w_sup0552_4.espc_nota_fiscal = "COV" THEN
         WHENEVER ERROR CONTINUE
         SELECT par_ies
           INTO mr_frete_sup.ies_incid_icms_fre
           FROM par_sup_pad
          WHERE cod_empresa = mr_w_sup0552_4.empresa
            AND cod_parametro = 'incid_icms_frt_v'
         WHENEVER ERROR STOP
         IF sqlca.sqlcode < 0 THEN
            LET l_erro = "Erro ", sqlca.sqlcode," na LEITURA do parâmetro Incidencia do SUP8750."
            RETURN FALSE, l_erro
         END IF
      END IF
   END IF
 END IF

 LET mr_frete_sup.val_frete          = mr_w_sup0552_4.val_tot_decl_nf
 LET mr_frete_sup.val_base_c_frete_c = 0
 LET mr_frete_sup.val_tot_icms_frt_d = mr_w_sup0552_4.val_tot_decl_icms
 LET mr_frete_sup.val_tot_icms_frt_c = 0
 LET mr_frete_sup.val_icms_diferen   = 0
 LET mr_frete_sup.pct_icms_frete_c   = 0
 LET mr_frete_sup.pct_red_bc_frete_c = 0
 LET mr_frete_sup.pct_diferen_fret_c = 0
 LET mr_frete_sup.val_adiant         = 0
 LET mr_frete_sup.ies_conhec_erro    = "S"
 LET mr_frete_sup.nom_resp_aceite_er = NULL
 LET mr_frete_sup.ies_incl_cap       = "N"
 LET mr_frete_sup.ies_incl_contab    = "N"
 LET mr_frete_sup.cod_praca          = NULL
 LET mr_frete_sup.ies_frt_contratado = NULL
 LET mr_frete_sup.tip_carga          = NULL
 LET mr_frete_sup.cod_item_tab_frete = NULL
 LET mr_frete_sup.val_frete_c        = 0
 LET mr_frete_sup.ies_diverg_listada = "N"
 LET mr_frete_sup.ies_diverg_val_frt = "N"
 LET mr_frete_sup.ies_liberacao_frt  = 1
 LET mr_frete_sup.ies_diverg_relac   = "N"
 LET mr_frete_sup.ies_diverg_cnd_pgt = "N"
 LET mr_frete_sup.cnd_pgto_tab       = mr_w_sup0552_4.cond_pagto

 IF mr_w_sup0552_4.espc_nota_fiscal <> "COV" THEN
    LET mr_frete_sup.tip_frete          = "C"
 ELSE
    LET mr_frete_sup.tip_frete          = "V"
 END IF

 IF mr_frete_sup.ies_incid_icms_fre IS NULL THEN
    LET mr_frete_sup.ies_incid_icms_fre = " "
 END IF

 IF mr_frete_sup.tip_frete = "C" THEN
    IF gr_par_sup.ies_frete_estoque = "S" THEN
       LET mr_frete_sup.ies_diverg_relac = "S"
    END IF
    IF gr_par_sup.ies_frete_compras = "S" THEN
       IF gr_par_sup.ies_diverg_c_pgt_c = "S" THEN
          LET mr_frete_sup.ies_diverg_cnd_pgt = "S"
       END IF
       IF gr_par_sup.ies_diverg_preco_c = "S" THEN
          LET mr_frete_sup.ies_diverg_val_frt = "S"
       END IF
    END IF
    IF mr_frete_sup.ies_diverg_relac = "S"
    OR mr_frete_sup.ies_diverg_cnd_pgt = "S"
    OR mr_frete_sup.ies_diverg_val_frt = "S" THEN
       LET mr_frete_sup.ies_liberacao_frt = 1
    ELSE
       LET mr_frete_sup.ies_liberacao_frt = 2
    END IF
 END IF

 RETURN TRUE, " "

 END FUNCTION

#--------------------------------------#
 FUNCTION sup0552_edita_dir(l_diretorio)
#--------------------------------------#
 DEFINE l_diretorio  CHAR(100),
        l_ind        SMALLINT

 IF g_ies_ambiente = "U" THEN
 IF l_diretorio IS NOT NULL THEN
    LET l_ind = LENGTH(l_diretorio)
    IF l_diretorio[l_ind,l_ind] <> "/" THEN
       LET l_diretorio = l_diretorio CLIPPED,"/"
    END IF
 END IF
 END IF

 RETURN l_diretorio
 END FUNCTION


#-----------------------------------------#
 FUNCTION sup0552_grava_frete_em_transito(l_conta_array)
#-----------------------------------------#
 DEFINE l_conta_array       SMALLINT

 WHENEVER ERROR CONTINUE
 INSERT INTO sup_par_frete (empresa,          num_conhec,
                            serie_conhec,     subserie_conhec,
                            transportadora,   parametro,
                            par_ind_especial, parametro_texto,
                            parametro_val,    parametro_dat)
                    VALUES (mr_frete_sup.cod_empresa,             mr_frete_sup.num_conhec,
                            mr_frete_sup.ser_conhec,   mr_frete_sup.ssr_conhec,
                            mr_frete_sup.cod_transpor, "frete_transito",
                            "",                        "",
                            "",                        TODAY)
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    LET m_houve_erro = TRUE
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SUP_PAR_FRETE-1 "
    LET m_status_arquivo = 1
    RETURN FALSE
 END IF

 RETURN TRUE

 END FUNCTION

#---------------------------------------#
 FUNCTION sup0552_existe_frete_transito()
#---------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT empresa
   FROM sup_par_frete
  WHERE empresa         = mr_frete_sup.cod_empresa
    AND num_conhec      = mr_frete_sup.num_conhec
    AND serie_conhec    = mr_frete_sup.ser_conhec
    AND subserie_conhec = mr_frete_sup.ssr_conhec
    AND transportadora  = mr_frete_sup.cod_transpor
    AND parametro       = "frete_transito"
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 100 THEN
    RETURN FALSE
 ELSE
    RETURN TRUE
 END IF

 END FUNCTION

#---------------------------------#
 FUNCTION sup0552_grava_frete_edi(l_conta_array)
#---------------------------------#
 DEFINE l_conta_array    SMALLINT

 WHENEVER ERROR CONTINUE
 INSERT INTO sup_par_frete (empresa,          num_conhec,
                            serie_conhec,     subserie_conhec,
                            transportadora,   parametro,
                            par_ind_especial, parametro_texto,
                            parametro_val,    parametro_dat)
                    VALUES (mr_frete_sup.cod_empresa,             mr_frete_sup.num_conhec,
                            mr_frete_sup.ser_conhec,   mr_frete_sup.ssr_conhec,
                            mr_frete_sup.cod_transpor, "edi_sup0552_55",
                            "",                        "",
                            "",                        TODAY)
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    LET m_houve_erro = TRUE
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SUP_PAR_FRETE-2 "
    LET m_status_arquivo = 1
    RETURN FALSE
 END IF

 RETURN TRUE

 END FUNCTION

#---------------------------------------------#
 FUNCTION sup0552_cria_temp_carrega_arquivos()
#---------------------------------------------#

 WHENEVER ERROR CONTINUE
 CREATE TEMP TABLE w_arquivo_data
 (arquivo            CHAR(100)
 ) WITH NO LOG;
 WHENEVER ERROR STOP
 IF log0030_err_sql_tabela_duplicada() THEN
    WHENEVER ERROR CONTINUE
    DELETE FROM w_arquivo_data WHERE 1=1
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DELETE","W_ARQUIVO_DATA")
       RETURN FALSE
    END IF
 ELSE
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("CREATE","W_ARQUIVO_DATA")
       RETURN FALSE
    END IF
 END IF

 RETURN TRUE

END FUNCTION

#---------------------------------------------#
 FUNCTION sup0552_carrega_arquivos_importacao()
#---------------------------------------------#
 DEFINE l_arquivo_aux1    CHAR(200),
        l_arquivo_aux2    CHAR(200),
        l_temp            CHAR(200)

 CALL log150_procura_caminho("LST") RETURNING l_temp
 LET l_arquivo_aux1 = l_temp CLIPPED,"sup0552_",p_user CLIPPED,"_3.txt"
 LET l_arquivo_aux2 = l_temp CLIPPED,"sup0552_",p_user CLIPPED,"_4.txt"


 IF g_ies_ambiente = "U" THEN
    IF m_extensao_arq IS NOT NULL AND
       m_extensao_arq <> ' ' THEN
       LET m_comando = "ls  ",m_dir_arq_sup0552 CLIPPED, "*."
       LET m_comando = m_comando CLIPPED, m_extensao_arq CLIPPED
       LET m_comando = m_comando CLIPPED," > ", l_arquivo_aux1 CLIPPED
       RUN m_comando
    ELSE
       LET m_comando = "ls  ",m_dir_arq_sup0552 CLIPPED," > ",l_arquivo_aux1 CLIPPED
       RUN m_comando
    END IF
 ELSE
    IF m_extensao_arq IS NOT NULL AND
       m_extensao_arq <> ' ' THEN
       LET m_comando = 'dir /a /o:n /b ',m_dir_arq_sup0552 CLIPPED,'*.'
       LET m_comando = m_comando CLIPPED, m_extensao_arq CLIPPED
       LET m_comando = m_comando CLIPPED, ' > ',l_arquivo_aux1 CLIPPED #793073#
       RUN m_comando
       CALL sup0552_edita_arquivo_result_list_dir_win(l_arquivo_aux1,l_arquivo_aux2)
    ELSE
       #LET m_comando = "dir /a:a-h/o:d /4 ",m_dir_arq_sup0552 CLIPPED," > ",l_arquivo_aux1 CLIPPED
       LET m_comando = 'dir /a /o:n /b ',m_dir_arq_sup0552 CLIPPED,' > ',l_arquivo_aux1 CLIPPED #793073#
       RUN m_comando
       CALL sup0552_edita_arquivo_result_list_dir_win(l_arquivo_aux1,l_arquivo_aux2)
    END IF
 END IF

 WHENEVER ERROR CONTINUE
 LOAD FROM l_arquivo_aux1 DELIMITER "" INSERT INTO w_arquivo_data
 WHENEVER ERROR STOP

 IF SQLCA.SQLCODE <> 0 THEN
    LET m_texto = "Erro ",SQLCA.sqlcode USING "<<<<<<<<<<"," ao carregar informações do diretório para a temp w_arquivo_data"
    CALL errorlog(m_texto)
    RETURN FALSE
 END IF

 RETURN TRUE
 END FUNCTION


#---------------------------------------------------------------------------------#
 FUNCTION sup0552_edita_arquivo_result_list_dir_win(l_arquivo_aux1,l_arquivo_aux2)
#---------------------------------------------------------------------------------#

  DEFINE l_arquivo_aux1    CHAR(150),
         l_arquivo_aux2    CHAR(150),
         l_linha           CHAR(256)

  --# WHENEVER ERROR CONTINUE
  --# CALL log0010_channel_open_file("arq1",l_arquivo_aux1,"r")
  --# IF SQLCA.sqlcode <> 0 THEN
  --#    LET m_texto = "Erro ",SQLCA.sqlcode USING "<<<<<<<<<<"," ao abrir o arquivo ",l_arquivo_aux1 CLIPPED," como leitura (channel)"
  --#    CALL errorlog(m_texto)
  --# END IF
  --# CALL log0010_channel_open_file("arq2",l_arquivo_aux2,"w")
  --# IF SQLCA.sqlcode <> 0 THEN
  --#    LET m_texto = "Erro ",SQLCA.sqlcode USING "<<<<<<<<<<"," ao abrir o arquivo ",l_arquivo_aux2 CLIPPED," como escrita (channel)"
  --#    CALL errorlog(m_texto)
  --# END IF
  --# CALL log0010_channel_set_delimiter("arq1","")
  --# IF SQLCA.sqlcode <> 0 THEN
  --#    LET m_texto = "Erro ",SQLCA.sqlcode USING "<<<<<<<<<<"," ao setar delimitador no arquivo ",l_arquivo_aux1 CLIPPED," (channel)"
  --#    CALL errorlog(m_texto)
  --# END IF
  --# CALL log0010_channel_set_delimiter("arq2","")
  --# IF SQLCA.sqlcode <> 0 THEN
  --#    LET m_texto = "Erro ",SQLCA.sqlcode USING "<<<<<<<<<<"," ao setar delimitador no arquivo ",l_arquivo_aux2 CLIPPED," (channel)"
  --#    CALL errorlog(m_texto)
  --# END IF
  --# WHILE log0010_channel_read("arq1")
  --#    IF l_linha[1,1] IS NOT NULL AND
  --#       l_linha[1,1] <> " " THEN
  --#       CALL log0010_channel_write("arq2",l_linha)
  --#       IF SQLCA.sqlcode <> 0 THEN
  --#          LET m_texto = "Erro ",SQLCA.sqlcode USING "<<<<<<<<<<"," ao gravar no arquivo ",l_arquivo_aux2 CLIPPED," (channel)"
  --#          CALL errorlog(m_texto)
  --#       END IF
  --#    END IF
  --# END WHILE
  --# CALL log0010_channel_close("arq1")
  --# IF SQLCA.sqlcode <> 0 THEN
  --#    LET m_texto = "Erro ",SQLCA.sqlcode USING "<<<<<<<<<<"," ao fechar o arquivo ",l_arquivo_aux1 CLIPPED," (channel)"
  --#    CALL errorlog(m_texto)
  --# END IF
  --# CALL log0010_channel_close("arq2")
  --# IF SQLCA.sqlcode <> 0 THEN
  --#    LET m_texto = "Erro ",SQLCA.sqlcode USING "<<<<<<<<<<"," ao fechar o arquivo ",l_arquivo_aux2 CLIPPED," (channel)"
  --#    CALL errorlog(m_texto)
  --# END IF
  --# LET comando2 = "type ",l_arquivo_aux2 CLIPPED," > ",l_arquivo_aux1 CLIPPED
  --# RUN comando2
  --# WHENEVER ERROR STOP

END FUNCTION

#-----------------------------------------#
 FUNCTION sup0552_move_arquivo(l_diretorio)
#-----------------------------------------#
 DEFINE l_diretorio       CHAR(100),
        l_comando         CHAR(200)

 IF g_ies_ambiente = "W" THEN
    LET l_comando = "move /Y ", m_nome_arquivo CLIPPED, " ", l_diretorio CLIPPED
 ELSE
    LET l_comando = "mv ", m_nome_arquivo CLIPPED, " ", l_diretorio CLIPPED
 END IF

 RUN l_comando
 END FUNCTION


#--------------------------------#
 FUNCTION sup0552_envia_email_2()
#--------------------------------#
 DEFINE l_email_usuario     LIKE usuarios.e_mail,
        l_assunto           CHAR(200),
        l_nom_arq_corpo     CHAR(200),
        l_lista_destino     CHAR(200),
        l_comando           CHAR(200),
        l_cod_usuario       LIKE usuarios.cod_usuario,
        l_msg               CHAR(100)


 LET l_assunto = "Consistencias de processamento SUP0552 "

 LET l_nom_arq_corpo = log150_procura_caminho("LST")
 LET l_nom_arq_corpo = l_nom_arq_corpo CLIPPED, "sup0552_",p_user CLIPPED,".html"

 START REPORT sup0552_lst_html_corpo_2 TO l_nom_arq_corpo
 OUTPUT TO REPORT sup0552_lst_html_corpo_2()
 FINISH REPORT sup0552_lst_html_corpo_2

 WHENEVER ERROR CONTINUE
 SELECT e_mail
   INTO l_email_usuario
   FROM usuarios
  WHERE cod_usuario = p_user
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0
 OR l_email_usuario IS NULL THEN
    CALL errorlog("E-mail do usuario nao cadastrado.")
    RETURN
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_sup_usu_env_proc CURSOR FOR
  SELECT usuario
    FROM sup_usu_env_proc
   WHERE empresa = p_cod_empresa
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
    CALL errorlog("Ocorreram erros ao enviar email.(DECLARE - CQ_SUP_USU_ENV_PROC)")
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cq_sup_usu_env_proc INTO l_cod_usuario
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL errorlog("Ocorreram erros ao enviar email.(FOREACH - CQ_SUP_USU_ENV_PROC)")
 END IF
    WHENEVER ERROR CONTINUE
    SELECT e_mail
      INTO l_lista_destino
      FROM usuarios
     WHERE cod_usuario = l_cod_usuario
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0
    OR l_lista_destino IS NULL THEN
       LET l_msg = "E-mail do usuario ", l_cod_usuario CLIPPED, " nao cadastrado."
       CALL errorlog(l_msg)
       CONTINUE FOREACH
    END IF

    CALL log5600_envia_email_anexo(l_email_usuario,l_lista_destino,l_assunto,l_nom_arq_corpo,1,m_nome_arquivo_err)

 END FOREACH
 FREE cq_sup_usu_env_proc

 IF g_ies_ambiente = "W" THEN
    LET l_comando = "del ",l_nom_arq_corpo CLIPPED
    RUN l_comando CLIPPED
 ELSE
    LET l_comando = "rm -f ",l_nom_arq_corpo CLIPPED
    RUN l_comando CLIPPED
 END IF

 END FUNCTION

#--------------------------------------#
 REPORT sup0552_lst_html_corpo_2()
#--------------------------------------#
 DEFINE l_hora     CHAR(8)

 FORMAT
 FIRST PAGE HEADER
   PRINT COLUMN 001,'<html><head><title>Status da importa&ccedil;&atilde;o.</title>'
   PRINT COLUMN 001,'<style type="text/css">'
   PRINT COLUMN 001,'<!-- .campo {font-family: "Verdana", Courier; }'
   PRINT COLUMN 001,'.campo_upper {font-family: "Verdana", Courier;} -->'
   PRINT COLUMN 001,'</style>'

   PRINT COLUMN 001,'<body>'

   LET l_hora = TIME
   IF l_hora < "12:00:00" THEN
      PRINT COLUMN 001, ' <font size="3"> Bom dia,</font> <br><br>'
   ELSE
      IF l_hora < "18:00:00" THEN
         PRINT COLUMN 001, ' <font size="3"> Boa tarde,</font> <br><br>'
      ELSE
         PRINT COLUMN 001, ' <font size="3"> Boa noite,</font> <br><br>'
      END IF
   END IF

   PRINT COLUMN 004,'<font size="3"> Segue anexo relat&oacute;rio de consist&ecirc;ncia do processamento das Notas Fiscais efetuado atrav&eacute;s do SUP0552. <br>'

   PRINT COLUMN 004, '<br><br>','Atenciosamente,<br>'
   PRINT COLUMN 004, m_den_empresa CLIPPED ,'<br>'
 END REPORT

#-------------------------------------------------------#
 FUNCTION sup0552_envia_email(l_transportadora, l_funcao)
#-------------------------------------------------------#
 DEFINE l_transportadora    LIKE fornecedor.cod_fornecedor,
        l_funcao            CHAR(10),
        l_email_usuario     LIKE usuarios.e_mail,
        l_email_transpor    LIKE fornec_compl.e_mail,
        l_assunto           CHAR(200),
        l_nom_arq_corpo     CHAR(200),
        l_lista_destino     CHAR(200),
        l_comando           CHAR(200)

 WHENEVER ERROR CONTINUE
 SELECT e_mail
   INTO l_email_usuario
   FROM usuarios
  WHERE cod_usuario = p_user
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0
 OR l_email_usuario IS NULL THEN
    CALL errorlog("E-mail do usuario nao cadastrado.")
    RETURN
 END IF

 WHENEVER ERROR CONTINUE
 SELECT e_mail
   INTO l_email_transpor
   FROM fornec_compl
  WHERE cod_fornecedor = l_transportadora
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0
 OR l_email_transpor IS NULL THEN
    CALL errorlog("E-mail da transportadora nao cadastrado.")
    RETURN
 END IF

 IF l_funcao = "ERRO" THEN
    LET l_assunto = "Importação do arquivo ", m_nom_arquivo CLIPPED
 ELSE
    LET l_assunto = "Importação do arquivo ", m_nom_arquivo CLIPPED
 END IF

 LET l_nom_arq_corpo = log150_procura_caminho("LST")
 LET l_nom_arq_corpo = l_nom_arq_corpo CLIPPED, "sup0552_",p_user CLIPPED,".html"

 START REPORT sup0552_lst_html_corpo TO l_nom_arq_corpo
 OUTPUT TO REPORT sup0552_lst_html_corpo(l_funcao)
 FINISH REPORT sup0552_lst_html_corpo

 LET l_lista_destino = l_email_transpor

 IF  l_email_usuario IS NOT NULL
 AND l_email_usuario <> " " THEN
    LET l_lista_destino = l_lista_destino CLIPPED,",",l_email_usuario
 END IF

 IF l_funcao = "ERRO" THEN
    CALL log5600_envia_email_anexo(l_email_usuario,l_lista_destino,l_assunto,l_nom_arq_corpo,1,m_nome_arquivo_err)
 ELSE
    CALL log5600_envia_email(l_email_usuario,l_lista_destino,l_assunto,l_nom_arq_corpo,1)
 END IF

 IF g_ies_ambiente = "W" THEN
    LET l_comando = "del ",l_nom_arq_corpo CLIPPED
    RUN l_comando CLIPPED
 ELSE
    LET l_comando = "rm -f ",l_nom_arq_corpo CLIPPED
    RUN l_comando CLIPPED
 END IF


 END FUNCTION

#--------------------------------------#
 REPORT sup0552_lst_html_corpo(l_funcao)
#--------------------------------------#
 DEFINE l_funcao   CHAR(10),
        l_hora     CHAR(8)

 FORMAT
 FIRST PAGE HEADER
   PRINT COLUMN 001,'<html><head><title>Status do processamento de arquivo</title>'
   PRINT COLUMN 001,'<style type="text/css">'
   PRINT COLUMN 001,'<!-- .campo {font-family: "Verdana", Courier; }'
   PRINT COLUMN 001,'.campo_upper {font-family: "Verdana", Courier;} -->'
   PRINT COLUMN 001,'</style>'

   PRINT COLUMN 001,'<body>'

   LET l_hora = TIME
   IF l_hora < "12:00:00" THEN
      PRINT COLUMN 001, ' <font size="3"> Bom dia,</font> <br><br>'
   ELSE
      IF l_hora < "18:00:00" THEN
         PRINT COLUMN 001, ' <font size="3"> Boa tarde,</font> <br><br>'
      ELSE
         PRINT COLUMN 001, ' <font size="3"> Boa noite,</font> <br><br>'
      END IF
   END IF

   IF l_funcao = "ERRO" THEN
      PRINT COLUMN 004,'<font size="3"> O arquivo nao foi importado. Segue anexo arquivo de consistencias. <br>'
   ELSE
      PRINT COLUMN 004,'<font size="3"> O arquivo foi importado com sucesso. <br>'
   END IF

   PRINT COLUMN 004, '<br><br>','Atenciosamente,<br>'
   PRINT COLUMN 004, m_den_empresa CLIPPED ,'<br>'
 END REPORT


#---------------------------------#
 FUNCTION sup0552_grava_frete_imp(l_conta_array)
#---------------------------------#
 DEFINE l_situacao     CHAR(01),
        l_data         DATE,
        l_hora         CHAR(08),
        l_conta_array  SMALLINT

 LET l_situacao = "I" #Caso houver erro o programa vai para o proximo arquivo.
                      #Portanto a situacao será sempre I - Importado

 LET l_data = TODAY
 LET l_hora = TIME

 WHENEVER ERROR CONTINUE
 INSERT INTO sup_frete_import (empresa,
                               conhecimento_frete,
                               ser_conh_frete,
                               subserie_conh_fret,
                               transportador,
                               nom_arquivo,
                               sit_import,
                               data_import,
                               hor_import)
                        VALUES (mr_frete_sup.cod_empresa,
                                mr_frete_sup.num_conhec,
                                mr_frete_sup.ser_conhec,
                                mr_frete_sup.ssr_conhec,
                                mr_frete_sup.cod_transpor,
                                m_nom_arquivo,
                                l_situacao,
                                l_data,
                                l_hora)
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    LET m_houve_erro = TRUE
    LET l_conta_array = l_conta_array + 1
    CALL sup0552_carrega_chave_consiste(l_conta_array)
    LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SUP_FRETE_IMPORT "
    LET m_status_arquivo = 1
    RETURN FALSE
 END IF

 RETURN TRUE

 END FUNCTION


#--------------------------------------------------------------#
FUNCTION sup0552_relaciona_frete_x_nota_fiscal(l_conta_array)
#--------------------------------------------------------------#

DEFINE     l_dat_entrada_nf     LIKE nf_sup.dat_entrada_nf,
           l_ies_especie_nf     LIKE nf_sup.ies_especie_nf,
           l_cod_operacao       LIKE nf_sup.cod_operacao,
           l_num_ar             LIKE nf_sup.num_aviso_rec,
           l_cod_fiscal_compl   LIKE aviso_rec_compl.cod_fiscal_compl,
           l_ies_tip_entrada    LIKE cod_fiscal_sup.ies_tip_entrada,
           l_status             SMALLINT,
           l_ies_relac_frtv_nfd CHAR(01),
           l_msg                CHAR(100),
           lr_frete_sup         RECORD LIKE frete_sup.*,
           l_cod_mod_embar      LIKE modo_embarque.cod_mod_embar,
           l_ies_tip_frete      LIKE modo_embarque.ies_tip_frete,
           l_conta_array        SMALLINT,
           l_num_conhec         LIKE nf_sup.num_conhec,
           l_num_arr            LIKE nf_sup.num_aviso_rec

   WHENEVER ERROR CONTINUE
    SELECT nf_sup.num_aviso_rec
      INTO l_num_ar
      FROM nf_sup
     WHERE nf_sup.cod_empresa    = mr_w_sup0552_4.empresa
       AND nf_sup.num_nf         = mr_w_sup0552_4.num_conhec_frete
       AND nf_sup.ser_nf         = mr_w_sup0552_4.serie_conhec_frete
       AND nf_sup.ssr_nf         = mr_w_sup0552_4.subserie_conh_fret
       AND nf_sup.cod_fornecedor = mr_w_sup0552_4.transportador
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
       "Frete """,mr_frete_sup.num_conhec,""" não relac pois NF """,mr_w_sup0552_4.num_conhec_frete,""" não existe no sistema."
       RETURN FALSE, l_conta_array
    END IF
  WHENEVER ERROR CONTINUE
  SELECT nf_sup.cod_mod_embar
    INTO l_cod_mod_embar
    FROM nf_sup
   WHERE nf_sup.cod_empresa    = mr_w_sup0552_4.empresa
     AND nf_sup.num_nf         = mr_w_sup0552_4.num_conhec_frete
     AND nf_sup.ser_nf         = mr_w_sup0552_4.serie_conhec_frete
     AND nf_sup.ssr_nf         = mr_w_sup0552_4.subserie_conh_fret
     AND nf_sup.cod_fornecedor = mr_w_sup0552_4.transportador
  WHENEVER ERROR STOP
  IF sqlca.sqlcode < 0 THEN
     LET l_conta_array = l_conta_array + 1
     CALL sup0552_carrega_chave_consiste(l_conta_array)
     LET ma_array_consistencias[l_conta_array].txt_consistencia  =
     "Frete """,mr_frete_sup.num_conhec,""" não relacionado pois não existe modo de embarque cadastrado para NF """,mr_w_sup0552_4.num_conhec_frete,""" ."
     RETURN FALSE, l_conta_array
  END IF

  CALL supm82_modo_embarque_leitura(l_cod_mod_embar,
                                    TRUE,
                                    TRUE)
     RETURNING p_status, l_msg
  CALL supm82_modo_embarque_get_ies_tip_frete()
     RETURNING l_ies_tip_frete

  IF l_ies_tip_frete <> '2' THEN # 584469
     CALL supm20_nf_sup_leitura_ar(mr_w_sup0552_4.empresa,
                                 l_num_ar,
                                 TRUE,
                                 TRUE)
      RETURNING p_status, l_msg

     CALL supm20_nf_sup_set_cod_transpor("0")
     CALL supm20_nf_sup_set_num_conhec(0)
     CALL supm20_nf_sup_set_ser_conhec("0")
     CALL supm20_nf_sup_set_ssr_conhec(0)

     CALL supt20_nf_sup_modifica(TRUE,TRUE)
        RETURNING p_status, l_msg

     IF p_status = FALSE THEN
     		 CALL log0030_mensagem(l_msg,"exclamation")
 	      RETURN FALSE, l_conta_array
 	   END IF

     LET l_conta_array = l_conta_array + 1
     CALL sup0552_carrega_chave_consiste(l_conta_array) # 584469
     LET ma_array_consistencias[l_conta_array].txt_consistencia  =
     "Frete ",mr_frete_sup.num_conhec USING "<<<<<<<"," não relacionado. NF não possui frete à pagar."

     RETURN FALSE, l_conta_array
  END IF


  INITIALIZE l_ies_relac_frtv_nfd TO NULL

  CALL supm5_par_sup_pad_leitura(mr_w_sup0552_4.empresa ,
                                 "ies_relac_frtv_nfd",
                                 TRUE,
                                 TRUE)
     RETURNING p_status
  CALL supm5_par_sup_pad_get_par_ies()
     RETURNING l_ies_relac_frtv_nfd

  IF l_ies_relac_frtv_nfd = " " OR
     l_ies_relac_frtv_nfd IS NULL THEN
     LET l_ies_relac_frtv_nfd = "N"
  END IF


  CALL supm61_frete_sup_leitura(mr_frete_sup.cod_empresa,
                                mr_frete_sup.cod_transpor,
                                mr_frete_sup.num_conhec,
                                mr_frete_sup.ser_conhec,
                                mr_frete_sup.ssr_conhec,
                                TRUE,
                                TRUE)
     RETURNING p_status, l_msg

  CALL supm61_frete_sup_get_all()
     RETURNING lr_frete_sup.*

 IF p_status = FALSE THEN
    WHENEVER ERROR CONTINUE
    SELECT nf_sup.num_aviso_rec
      INTO l_num_arr
      FROM nf_sup
     WHERE nf_sup.cod_empresa    = mr_w_sup0552_4.empresa
       AND nf_sup.num_nf         = mr_w_sup0552_4.num_conhec_frete
       AND nf_sup.ser_nf         = mr_w_sup0552_4.serie_conhec_frete
       AND nf_sup.ssr_nf         = mr_w_sup0552_4.subserie_conh_fret
       AND nf_sup.cod_fornecedor = mr_w_sup0552_4.transportador
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       WHENEVER ERROR CONTINUE
       SELECT h_frete_sup.num_conhec
         FROM h_frete_sup
        WHERE h_frete_sup.cod_empresa  = mr_w_sup0552_4.empresa
          AND h_frete_sup.cod_transpor = mr_w_sup0552_4.num_conhec_frete
          AND h_frete_sup.num_conhec   = mr_w_sup0552_4.serie_conhec_frete
          AND h_frete_sup.ser_conhec   = mr_w_sup0552_4.subserie_conh_fret
          AND h_frete_sup.ssr_conhec   = mr_w_sup0552_4.transportador
          AND h_frete_sup.dat_emis_conhec  = mr_w_sup0552_4.dat_emis_nf
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          IF  mr_frete_sup.ser_conhec IS NULL OR
              mr_frete_sup.ser_conhec = " " THEN
             LET  mr_frete_sup.ser_conhec = "@"
          END IF
       ELSE
          CALL sup0552_carrega_chave_consiste(l_conta_array)
          LET ma_array_consistencias[l_conta_array].txt_consistencia  =
          "Frete """,mr_frete_sup.num_conhec,""" já se encontra em histórico."
          RETURN FALSE, l_conta_array
       END IF
    ELSE
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
       "Frete """,mr_frete_sup.num_conhec,""" não relacionado pois o conhecimento já está incluído como Nota Fiscal"
       RETURN FALSE, l_conta_array
    END IF
 ELSE
    IF (lr_frete_sup.ies_incl_contab = "S" OR lr_frete_sup.ies_incl_contab = "M") THEN
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
       "Frete """,mr_frete_sup.num_conhec,""" não relacionado pois o conhecimento já foi contabilizado"
       RETURN FALSE, l_conta_array
    END IF

    IF mr_frete_sup.ser_conhec = "@" THEN
       LET mr_frete_sup.ser_conhec = " "
    END IF

    CALL supm20_nf_sup_leitura_ar(mr_w_sup0552_4.empresa,
                                  l_num_ar,
                                  TRUE,
                                  TRUE)
       RETURNING p_status, l_msg
    CALL supm20_nf_sup_get_dat_entrada_nf()
       RETURNING l_dat_entrada_nf

    IF MONTH(l_dat_entrada_nf) <> MONTH(lr_frete_sup.dat_entrada_conhec) OR
       YEAR(l_dat_entrada_nf)  <> YEAR(lr_frete_sup.dat_entrada_conhec) THEN
       LET l_conta_array = l_conta_array + 1
       CALL sup0552_carrega_chave_consiste(l_conta_array)
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
       "Frete """,mr_frete_sup.num_conhec,""" não relacionado com NF """,mr_w_sup0552_4.num_conhec_frete,""", pois Mês/Ano de entrada do frete não confere com a nota"
       RETURN FALSE, l_conta_array
    END IF

    #--inicio--vanderlei OS 404565 #
    CALL sup0772_verifica_saldo_contas_fr_abat(lr_frete_sup.cod_empresa,
                                               lr_frete_sup.num_conhec,
                                               lr_frete_sup.ser_conhec,
                                               lr_frete_sup.ssr_conhec,
                                               lr_frete_sup.cod_transpor,
                                               lr_frete_sup.val_frete,
                                               lr_frete_sup.dat_entrada_conhec,
                                               sup0552_tip_frete(lr_frete_sup.tip_frete),
                                               "SUP4510",
                                               0)
          RETURNING p_status, l_msg

    IF NOT p_status THEN
      CALL log0030_mensagem(l_msg,"exclamation")
    END IF

    CALL supm20_nf_sup_leitura_ar(mr_w_sup0552_4.empresa,
                                  l_num_ar,
                                  TRUE,
                                  TRUE)
       RETURNING p_status, l_msg

    CALL supm20_nf_sup_get_num_conhec()
       RETURNING l_num_conhec

    IF l_num_conhec = 0 THEN

       CALL supm20_nf_sup_set_cod_transpor(lr_frete_sup.cod_transpor)
       CALL supm20_nf_sup_set_num_conhec(lr_frete_sup.num_conhec)
       CALL supm20_nf_sup_set_ser_conhec(lr_frete_sup.ser_conhec)
       CALL supm20_nf_sup_set_ssr_conhec(lr_frete_sup.ssr_conhec)

       CALL supt20_nf_sup_modifica(TRUE,TRUE)
          RETURNING p_status, l_msg

  	    IF p_status = FALSE THEN
       		 CALL log0030_mensagem(l_msg,"exclamation")
 		       RETURN FALSE, l_conta_array
 		    END IF
 		 ELSE
 		    #Caso ja tenha frete relacionado com a tabela nf_sup, insere na sup_frete_x_nf_entrada
 		    CALL supm370_sup_frete_x_nf_entrada_set_null()
       CALL supm370_sup_frete_x_nf_entrada_set_empresa(lr_frete_sup.cod_empresa)
       CALL supm370_sup_frete_x_nf_entrada_set_aviso_recebto(l_num_ar)
       CALL supm370_sup_frete_x_nf_entrada_set_seq_aviso_recebto(1)
       CALL supm370_sup_frete_x_nf_entrada_set_conhec(lr_frete_sup.num_conhec)
       CALL supm370_sup_frete_x_nf_entrada_set_serie_conhec(lr_frete_sup.ser_conhec)
       CALL supm370_sup_frete_x_nf_entrada_set_subserie_conhec(lr_frete_sup.ssr_conhec)
       CALL supm370_sup_frete_x_nf_entrada_set_transportador(lr_frete_sup.cod_transpor)
       CALL supm370_sup_frete_x_nf_entrada_set_val_frete(0)
       CALL supm370_sup_frete_x_nf_entrada_set_val_bas_calc_frete_declarado(0)
       CALL supm370_sup_frete_x_nf_entrada_set_val_bas_calc_frete_calculado(0)
       CALL supm370_sup_frete_x_nf_entrada_set_val_diferenc_icms_frete(0)
       CALL supm370_sup_frete_x_nf_entrada_set_val_icms_frete_declarado(0)
       CALL supm370_sup_frete_x_nf_entrada_set_val_icms_frete_calculado(0)
       CALL supm370_sup_frete_x_nf_entrada_set_pct_icms_frete_declarado(0)
       CALL supm370_sup_frete_x_nf_entrada_set_pct_icms_frete_calculado(0)
       CALL supm370_sup_frete_x_nf_entrada_set_pct_red_bc_frete_declarado(0)
       CALL supm370_sup_frete_x_nf_entrada_set_pct_red_bc_frete_calculado(0)
       CALL supm370_sup_frete_x_nf_entrada_set_pct_diferenc_frete_declarado(0)
       CALL supm370_sup_frete_x_nf_entrada_set_pct_diferenc_frete_calculado(0)

       CALL supt370_sup_frete_x_nf_entrada_inclui(TRUE, TRUE)
             RETURNING p_status
    END IF

 END IF

 RETURN TRUE, l_conta_array

 END FUNCTION

#---------------------------------------#
 FUNCTION sup0552_tip_frete(l_tip_frete)
#---------------------------------------#
 DEFINE l_tip_frete        LIKE frete_sup.tip_frete

 IF l_tip_frete = "C" THEN
   RETURN "FC"
 ELSE
   RETURN "FV"
 END IF
 END FUNCTION


 #-------------------------------#
 FUNCTION sup0552_busca_peso(l_tipo)
 #-------------------------------#
 DEFINE l_tipo        CHAR(30)

 DEFINE l_pes_vol_frete  LIKE frete_sup.pes_vol_frete

 WHENEVER ERROR CONTINUE
 SELECT w_sup0552_4.pre_unit_nf
   INTO l_pes_vol_frete
   FROM w_sup0552_4
  WHERE w_sup0552_4.empresa           = mr_w_sup0552_4.empresa
    AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
    AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
    AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4.subserie_nf
    AND w_sup0552_4.espc_nota_fiscal  = 'CON'
    AND w_sup0552_4.fornecedor        = mr_w_sup0552_4.fornecedor
    AND w_sup0552_4.tipo_registro     = 'L'
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET l_pes_vol_frete = 0
  END IF


 RETURN l_pes_vol_frete


END FUNCTION
#-----------------------------------------------------------------#
 FUNCTION sup0552_verifica_fornec_incl_regime_compex(l_cod_empresa,
                                                     l_dat_emis_nf,
                                                     l_fornecedor)
#-----------------------------------------------------------------#

  DEFINE l_cod_empresa     LIKE sup_par_fornecedor.empresa,
         l_dat_emis_nf     LIKE nf_sup.dat_entrada_nf,
         l_fornecedor      LIKE nf_sup.cod_fornecedor,
         l_parametro_texto LIKE sup_par_fornecedor.parametro_texto,
         l_dat_ini_mp      LIKE nf_sup.dat_entrada_nf,
         l_dat_fim_mp      LIKE nf_sup.dat_entrada_nf,
         l_dat_ini_ciap    LIKE nf_sup.dat_entrada_nf,
         l_dat_fim_ciap    LIKE nf_sup.dat_entrada_nf

  INITIALIZE l_parametro_texto TO NULL

  WHENEVER ERROR CONTINUE
  SELECT sup_par_fornecedor.parametro_texto
    INTO l_parametro_texto
    FROM sup_par_fornecedor
   WHERE sup_par_fornecedor.empresa    = l_cod_empresa
     AND sup_par_fornecedor.fornecedor = l_fornecedor
     AND sup_par_fornecedor.parametro  = "regime_espec_compex"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     RETURN FALSE
  END IF

  LET l_dat_ini_mp   = l_parametro_texto[1,10]
  LET l_dat_fim_mp   = l_parametro_texto[12,21]
  LET l_dat_ini_ciap = l_parametro_texto[23,32]
  LET l_dat_fim_ciap = l_parametro_texto[34,43]

  IF ((l_dat_ini_mp <= l_dat_emis_nf     AND
       l_dat_fim_mp >= l_dat_emis_nf)    OR
      (l_dat_ini_ciap <= l_dat_emis_nf   AND
       l_dat_fim_ciap >= l_dat_emis_nf)) THEN
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#----------------------------------------------------------------------#
 FUNCTION sup0552_verifica_regime_compex(l_cod_empresa, l_num_aviso_rec,
                                         l_num_seq, l_cod_item)
#----------------------------------------------------------------------#

  DEFINE l_ies_obj_entrada LIKE grupo_ctr_desp.ies_obj_entrada,
         l_cod_empresa     LIKE aviso_rec.cod_empresa,
         l_num_aviso_rec   LIKE aviso_rec.num_aviso_rec,
         l_num_seq         LIKE aviso_rec.num_seq,
         l_cod_item        LIKE aviso_rec.cod_item,
         l_parametro_val   LIKE sup_par_ar.parametro_val,
         l_confirmou_ciap  CHAR(01),
         l_confirmou_mp    CHAR(01)


  IF m_arg = TRUE THEN
     LET m_confirm_compex_mp = 'N'
     LET m_confirm_compex_ciap = 'N'
  END IF

  WHENEVER ERROR CONTINUE
  SELECT a.ies_obj_entrada
    INTO l_ies_obj_entrada
    FROM grupo_ctr_desp a, item_sup b
   WHERE a.cod_empresa  = l_cod_empresa
     AND a.gru_ctr_desp = b.gru_ctr_desp
     AND b.cod_empresa  = l_cod_empresa
     AND b.cod_item     = l_cod_item
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("SELECT","GRUPO_CTR_DESP")
  END IF

  IF l_ies_obj_entrada = "1" THEN
     LET l_parametro_val = 1
     IF m_confirm_compex_mp = "S" THEN
        IF NOT m_solicitou_mp THEN
           LET m_solicitou_mp = TRUE
           LET l_confirmou_mp = log0040_confirm(12,15,"Nota fiscal possui informação regime COMPEX para matéria prima?")
        END IF

        IF NOT l_confirmou_mp THEN
           LET l_parametro_val = 2
        END IF
     END IF

     CALL sup0552_inclui_sup_par_ar_compex("regime_compex_mp", l_cod_empresa,
                                           l_num_aviso_rec, l_num_seq, l_parametro_val)
  END IF

  IF l_ies_obj_entrada = "6" THEN
     LET l_parametro_val = 1
     IF m_confirm_compex_ciap = "S" THEN
        IF NOT m_solicitou_ciap THEN
           LET m_solicitou_ciap = TRUE
           LET l_confirmou_ciap = log0040_confirm(12,15,"Nota fiscal possui informação regime COMPEX para ativo imobilizado(CIAP)?")
        END IF

        IF NOT l_confirmou_ciap THEN
           LET l_parametro_val = 2
        END IF
     END IF

     CALL sup0552_inclui_sup_par_ar_compex("regime_compex_ciap", l_cod_empresa,
                                           l_num_aviso_rec, l_num_seq, l_parametro_val)
  END IF

 END FUNCTION


#--------------------------------------------------------------------#
 FUNCTION sup0552_inclui_sup_par_ar_compex(l_parametro, l_cod_empresa,
                                           l_num_aviso_rec, l_num_seq,
                                           l_parametro_val)
#--------------------------------------------------------------------#

  DEFINE l_parametro     LIKE sup_par_ar.parametro,
         l_cod_empresa   LIKE aviso_rec.cod_empresa,
         l_num_aviso_rec LIKE aviso_rec.num_aviso_rec,
         l_parametro_val LIKE sup_par_ar.parametro_val,
         l_num_seq       LIKE aviso_rec.num_seq

  WHENEVER ERROR CONTINUE
  SELECT sup_par_ar.empresa
    FROM sup_par_ar
   WHERE sup_par_ar.empresa           = l_cod_empresa
     AND sup_par_ar.aviso_recebto     = l_num_aviso_rec
     AND sup_par_ar.seq_aviso_recebto = l_num_seq
     AND sup_par_ar.parametro         = l_parametro
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     WHENEVER ERROR CONTINUE
     INSERT INTO sup_par_ar(empresa          ,
                            aviso_recebto    ,
                            seq_aviso_recebto,
                            parametro        ,
                            par_ind_especial ,
                            parametro_texto  ,
                            parametro_val    ,
                            parametro_dat)
                     VALUES(l_cod_empresa,
                            l_num_aviso_rec,
                            l_num_seq,
                            l_parametro,
                            "N",
                            NULL,
                            l_parametro_val,
                            TODAY)
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        LET m_houve_erro = TRUE
        LET m_status_arquivo = 1
     END IF
  ELSE
     WHENEVER ERROR CONTINUE
     UPDATE sup_par_ar
        SET sup_par_ar.par_ind_especial  = "N",
            sup_par_ar.parametro_val     = l_parametro_val
      WHERE sup_par_ar.empresa           = l_cod_empresa
        AND sup_par_ar.aviso_recebto     = l_num_aviso_rec
        AND sup_par_ar.seq_aviso_recebto = l_num_seq
        AND sup_par_ar.parametro         = l_parametro
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("UPDATE","SUP_PAR_AR")
     END IF
  END IF

 END FUNCTION

#--------------------------------------------#
 FUNCTION sup0552_valida_tipo_valor(l_empresa, l_tip_val)
#--------------------------------------------#

  DEFINE l_cod_parametro     LIKE par_sup_pad.cod_parametro,
         l_tip_val           LIKE tipo_valor.cod_tip_val,
         l_empresa           LIKE empresa.cod_empresa

  LET l_cod_parametro = "tip_val_ent_cana",l_tip_val USING "<<<"
  WHENEVER ERROR CONTINUE
  SELECT par_ies
    FROM par_sup_pad
   WHERE cod_empresa   = l_empresa
     AND cod_parametro = l_cod_parametro
     AND par_ies       = "S"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF sqlca.sqlcode <> 100 THEN
        CALL log003_err_sql("SELECT","PAR_SUP_PAD(1)")
     END IF
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#---------------------------------------------------------------#
 FUNCTION sup0552_busca_parametro_data_venci(l_empresa,l_tip_val,l_data_entrada)
#----------------------------------------------------------------#

  DEFINE l_cod_parametro     LIKE par_sup_pad.cod_parametro,
         l_dia               CHAR(02),
         l_data              DATE,
         l_tip_val           LIKE tipo_valor.cod_tip_val,
         l_empresa           LIKE empresa.cod_empresa,
         l_data_entrada      DATE,
         l_data_aux          DATE

  LET l_cod_parametro = "venci_imp_cana",l_tip_val USING "<<<"

  WHENEVER ERROR CONTINUE
  SELECT par_val
    INTO l_dia
    FROM par_sup_pad
   WHERE cod_empresa   = l_empresa
     AND cod_parametro = l_cod_parametro
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF sqlca.sqlcode <> 100 THEN
        CALL log003_err_sql("SELECT","PAR_SUP_PAD(2)")
     END IF
  END IF

  LET l_data_aux = MDY(MONTH(l_data_entrada),'01', YEAR(l_data_entrada))

  LET l_data = l_data_aux + 1 UNITS MONTH

  LET l_data = MDY(MONTH(l_data),l_dia,YEAR(l_data))

  LET l_data = cap3710_verifica_dia_util(l_data, '-')
  RETURN l_data

 END FUNCTION

#-------------------------------------------#
 FUNCTION sup0552_carrega_inss(l_empresa)
#-------------------------------------------#

   DEFINE l_ies_vencimento   CHAR(01),
          l_empresa          LIKE empresa.cod_empresa,
          l_tip_val_inss     LIKE tipo_valor.cod_tip_val,
          l_pct_ret_inss     LIKE par_cap_pad.par_val,
          l_pct_inss         LIKE reten_inss.val_base_calc_inss,
          l_val_inss         LIKE reten_inss.val_base_calc_inss

   IF sup0552_verifica_fornecedor_autonomo() THEN
      CALL sup0552_busca_data_competencia_inss_pf()
           RETURNING l_ies_vencimento
   ELSE
      CALL sup0552_busca_data_competencia_inss_pj()
           RETURNING l_ies_vencimento
   END IF

   IF l_ies_vencimento = "1" THEN
      LET mr_reten_inss.dat_reten = mr_w_sup0552_4.dat_emis_nf
   ELSE
      LET mr_reten_inss.dat_reten = mr_w_sup0552_4.dat_ent_nf
   END IF

   IF sup0552_verifica_fornecedor_autonomo() THEN
      WHENEVER ERROR CONTINUE
      SELECT par_num
        INTO l_tip_val_inss
        FROM par_cap_pad
       WHERE cod_empresa   = l_empresa
         AND cod_parametro = "tip_val_ret_inss_aut"
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
         CALL log003_err_sql("SELECT","PAR_CAP_PAD(3)")
      END IF

      WHENEVER ERROR CONTINUE
      SELECT par_val
        INTO l_pct_ret_inss
        FROM par_cap_pad
       WHERE cod_empresa   = l_empresa
         AND cod_parametro = "perc_ret_inss_aut"
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
         CALL log003_err_sql("SELECT","PAR_CAP_PAD(4)")
      END IF
   ELSE
      WHENEVER ERROR CONTINUE
      SELECT par_num
        INTO l_tip_val_inss
        FROM par_cap_pad
       WHERE cod_empresa   = l_empresa
         AND cod_parametro = "cod_tip_val_ret_inss"
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
         CALL log003_err_sql("SELECT","PAR_CAP_PAD")
      END IF

      WHENEVER ERROR CONTINUE
      SELECT par_val
        INTO l_pct_ret_inss
        FROM par_cap_pad
       WHERE cod_empresa   = l_empresa
         AND cod_parametro = "perc_ret_inss"
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
         CALL log003_err_sql("SELECT","PAR_CAP_PAD(2)")
      END IF
   END IF

   LET mr_reten_inss.cod_empresa         = mr_w_sup0552_4.empresa
   LET mr_reten_inss.num_ad_nf_orig      = mr_nf_sup.num_nf
   LET mr_reten_inss.ser_nf              = mr_w_sup0552_4.serie_nota_fiscal
   LET mr_reten_inss.ssr_nf              = mr_w_sup0552_4.subserie_nf
   LET mr_reten_inss.ies_especie_nf      = mr_w_sup0552_4.espc_nota_fiscal
   LET mr_reten_inss.cod_fornecedor      = mr_w_sup0552_4.fornecedor
   LET mr_reten_inss.ies_isencao_inss    = "R"
   LET mr_reten_inss.ies_pendente        = "N"
   LET mr_reten_inss.num_doc_recolh[1,5] = l_pct_ret_inss
   LET mr_reten_inss.num_doc_recolh[6,8] = l_tip_val_inss
   LET mr_reten_inss.val_base_calc_inss  = mr_w_sup0552_4.val_tot_decl_nf
   LET mr_reten_inss.val_reten_inss      = mr_w_sup0552_4.val_inss
   LET mr_reten_inss.cod_empresa_proc    = sup0552_verifica_empresa_proc(l_empresa)
   LET mr_reten_inss.num_lote_transf     = 0
   LET mr_reten_inss.dat_venc_inss       = cap371_verifica_data_util_imposto(mr_reten_inss.dat_reten ,
                                                                            mr_reten_inss.cod_empresa,
                                                                            "N",
                                                                            mr_reten_inss.cod_fornecedor)

   LET l_pct_inss  = mr_reten_inss.num_doc_recolh[1,5]
   IF l_pct_inss > 0 THEN
      LET l_val_inss  = mr_reten_inss.val_base_calc_inss * (l_pct_inss / 100)
   ELSE
      LET l_val_inss  = 0
   END IF

   RETURN l_val_inss

 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup0552_carrega_inss_funrural(l_empresa)
#-------------------------------------------------#
   DEFINE l_ies_vencimento        CHAR(01),
          l_empresa               LIKE empresa.cod_empresa,
          l_tip_val_inss_funrural LIKE tipo_valor.cod_tip_val,
          l_pct_ret_inss_funrural LIKE par_cap_pad.par_val,
          l_pct_inss_funrural     LIKE reten_inss.val_base_calc_inss,
          l_val_inss_funrural     LIKE reten_inss.val_base_calc_inss

   IF sup0552_verifica_fornecedor_autonomo() THEN
      CALL sup0552_busca_data_competencia_inss_pf()
           RETURNING l_ies_vencimento
   ELSE
      CALL sup0552_busca_data_competencia_inss_pj()
           RETURNING l_ies_vencimento
   END IF
   LET  l_pct_inss_funrural = 0
   IF l_ies_vencimento = "1" THEN
      LET mr_reten_inss_rur.dat_reten_rur = mr_w_sup0552_4.dat_emis_nf
   ELSE
      LET mr_reten_inss_rur.dat_reten_rur = mr_w_sup0552_4.dat_ent_nf
   END IF

   WHENEVER ERROR CONTINUE
   SELECT par_num
     INTO l_tip_val_inss_funrural
     FROM par_cap_pad
    WHERE cod_empresa   = l_empresa
      AND cod_parametro = "cod_tip_val_inss_rur"
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
      CALL log003_err_sql("SELECT","PAR_CAP_PAD(5)")
   END IF

   WHENEVER ERROR CONTINUE
   SELECT par_val
     INTO l_pct_inss_funrural
     FROM par_cap_pad
    WHERE cod_empresa   = l_empresa
      AND cod_parametro = "perc_ret_inss_rur"
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
      CALL log003_err_sql("SELECT","PAR_CAP_PAD(6)")
   END IF
   IF sqlca.sqlcode = 100 THEN
      LET  l_pct_inss_funrural = 0
   END IF

   LET mr_reten_inss_rur.cod_empresa         = mr_w_sup0552_4.empresa
   LET mr_reten_inss_rur.num_ad_nf_orig      = mr_nf_sup.num_nf
   LET mr_reten_inss_rur.ser_nf              = mr_w_sup0552_4.serie_nota_fiscal
   LET mr_reten_inss_rur.ssr_nf              = mr_w_sup0552_4.subserie_nf
   LET mr_reten_inss_rur.ies_especie_nf      = mr_w_sup0552_4.espc_nota_fiscal
   LET mr_reten_inss_rur.cod_fornecedor      = mr_w_sup0552_4.fornecedor
   #LET mr_reten_inss_rur.num_doc_recolh[1,5] = l_pct_ret_inss_funrural
   #LET mr_reten_inss_rur.num_doc_recolh[6,8] = l_tip_val_inss_funrural
   LET mr_reten_inss_rur.val_b_cal_inss_rur  = mr_w_sup0552_4.val_tot_decl_nf
   LET mr_reten_inss_rur.val_reten_inss_rur  = mr_w_sup0552_4.val_inss_funrural
   LET mr_reten_inss_rur.cod_empresa_proc    = sup0552_verifica_empresa_proc(l_empresa)
   LET mr_reten_inss_rur.num_lote_transf     = 0
   LET mr_reten_inss_rur.dat_venc_inss_rur   = cap371_verifica_data_util_imposto(mr_reten_inss_rur.dat_reten_rur ,
                                                                            mr_reten_inss_rur.cod_empresa,
                                                                            "N",
                                                                            mr_reten_inss_rur.cod_fornecedor)

   IF l_pct_inss_funrural > 0 THEN
      LET l_val_inss_funrural  = mr_reten_inss_rur.val_b_cal_inss_rur * (l_pct_inss_funrural / 100)
   ELSE
      LET l_val_inss_funrural = 0
   END IF

   RETURN l_val_inss_funrural

 END FUNCTION

#------------------------------------------------#
FUNCTION sup0552_busca_data_competencia_inss_pj()
#------------------------------------------------#

 DEFINE l_status      SMALLINT,
        l_flag_data   CHAR(01)

 CALL log2250_busca_parametro(p_cod_empresa,'data_compet_vencto_inss_pj')
      RETURNING l_flag_data, l_status

 IF NOT l_status THEN
    CALL log0030_mensagem("Falha ao ler parâmetro data competência vencimento INSS PJ.","exclamation")
 END IF

 RETURN l_flag_data

 END FUNCTION

#-----------------------------------------------------#
 FUNCTION sup0552_verifica_empresa_proc(l_cod_emp_orig)
#-----------------------------------------------------#
 DEFINE  l_cod_emp_orig      CHAR(02),
         l_cod_emp_destin    CHAR(02),
         l_cod_emp_matriz    LIKE par_cap_pad.cod_empresa,
         l_ies_tip_tran_cap  LIKE par_cap_pad.par_ies

 INITIALIZE     l_cod_emp_destin TO NULL # juliano

 WHENEVER ERROR CONTINUE
  SELECT par_ies
    INTO l_ies_tip_tran_cap
    FROM par_cap_pad
   WHERE par_cap_pad.cod_empresa   = l_cod_emp_orig
     AND par_cap_pad.cod_parametro = "ies_tip_tran_cap"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
    CALL log003_err_sql("SELECT","PAR_CAP_PAD(3)")
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_emp_orig_desti CURSOR FOR
  SELECT cod_empresa_destin
    FROM emp_orig_destino
   WHERE cod_empresa_orig   = l_cod_emp_orig
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE CURSOR","CQ_EMP_ORIG_DESTI")
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cq_emp_orig_desti INTO l_cod_emp_destin
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("FOREACH CURSOR","CQ_EMP_ORIG_DESTI")
 END IF
    CLOSE cq_emp_orig_desti #764215#
    EXIT FOREACH
 END FOREACH
 FREE cq_emp_orig_desti

 IF l_cod_emp_destin IS NULL THEN
    IF l_ies_tip_tran_cap = "2" THEN
       WHENEVER ERROR CONTINUE
       SELECT cod_empresa
         INTO l_cod_emp_matriz
         FROM par_cap_pad
        WHERE cod_parametro = "ies_emp_matriz"
          AND par_ies       = "S"
       WHENEVER ERROR STOP
       IF SQLCA.SQLCODE = 0 THEN
          LET l_cod_emp_destin = l_cod_emp_matriz
       ELSE
          LET l_cod_emp_destin = l_cod_emp_orig
       END IF
    ELSE
       LET l_cod_emp_destin = l_cod_emp_orig
    END IF
 END IF

 RETURN l_cod_emp_destin

END FUNCTION

#---------------------------------------------#
FUNCTION sup0552_verifica_fornecedor_autonomo()
#---------------------------------------------#

  DEFINE l_fornec_auton_imp   CHAR(01),
         l_status             SMALLINT

  CALL log2250_busca_parametro(mr_w_sup0552_4.empresa,"fornec_auton_imp")
     RETURNING l_fornec_auton_imp, l_status
  IF NOT l_status OR l_fornec_auton_imp IS NULL THEN
     LET l_fornec_auton_imp = "N"
  END IF

  IF l_fornec_auton_imp = 'N' THEN
     RETURN TRUE
  END IF

  WHENEVER ERROR CONTINUE
   SELECT cod_fornecedor
     FROM fornec_auton
    WHERE cod_fornecedor = mr_w_sup0552_4.fornecedor
  WHENEVER ERROR STOP
  IF SQLCA.SQLCODE = 0 THEN
     RETURN TRUE
  END IF

  RETURN FALSE

END FUNCTION

#------------------------------------------------#
FUNCTION sup0552_busca_data_competencia_inss_pf()
#------------------------------------------------#

 DEFINE l_status      SMALLINT,
        l_flag_data   CHAR(01)

 CALL log2250_busca_parametro(p_cod_empresa,'data_compet_vencto_inss_pf')
      RETURNING l_flag_data, l_status

 IF NOT l_status THEN
    CALL log0030_mensagem("Falha ao ler parâmetro data competência vencimento INSS PF.","exclamation")
 END IF

 RETURN l_flag_data

END FUNCTION

#-------------------------------------------------#
 FUNCTION sup0552_existe_dia_invalido(l_mes,l_dia30,l_dia31)
#-------------------------------------------------#

 DEFINE l_mes      CHAR(02),
        l_dia30    CHAR(02),
        l_dia31    CHAR(02)

 CASE l_mes
    WHEN 2
       IF (l_dia30 IS NOT NULL OR l_dia30 <> " ") AND l_dia30 <> 0 THEN
          RETURN TRUE
       END IF
       IF (l_dia31 IS NOT NULL OR l_dia31 <> " ") AND l_dia31 <> 0 THEN
          RETURN TRUE
       END IF
    WHEN 4
       IF (l_dia31 IS NOT NULL OR l_dia31 <> " ") AND l_dia31 <> 0 THEN
          RETURN TRUE
       END IF
    WHEN 6
       IF (l_dia31 IS NOT NULL OR l_dia31 <> " ") AND l_dia31 <> 0 THEN
          RETURN TRUE
       END IF
    WHEN 9
       IF (l_dia31 IS NOT NULL OR l_dia31 <> " ") AND l_dia31 <> 0 THEN
          RETURN TRUE
       END IF
    WHEN 11
       IF (l_dia31 IS NOT NULL OR l_dia31 <> " ") AND l_dia31 <> 0 THEN
          RETURN TRUE
       END IF
 END CASE

 RETURN FALSE

 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup0552_insere_sup_info_adic_nfe()
#-------------------------------------------------#

   WHENEVER ERROR CONTINUE
   INSERT INTO sup_info_adic_nfe (empresa       ,
                                  aviso_recebto ,
                                  dia_ent_nf    ,
                                  mes_ent_nf    ,
                                  ano_ent_nf    ,
                                  qtd_diaria )
                           VALUES(mr_sup_info_adic_nfe.empresa       ,
                                  mr_sup_info_adic_nfe.aviso_recebto ,
                                  mr_sup_info_adic_nfe.dia           ,
                                  mr_sup_info_adic_nfe.mes           ,
                                  mr_sup_info_adic_nfe.ano           ,
                                  mr_sup_info_adic_nfe.qtd_diaria )
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 THEN
      LET m_houve_erro = TRUE
      LET m_status_arquivo = 1
      RETURN FALSE
   END IF

  RETURN TRUE

  END FUNCTION


#-------------------------------------------------#
 FUNCTION sup0552_insere_sup_ar_imp_cana()
#-------------------------------------------------#

  WHENEVER ERROR CONTINUE
  INSERT INTO sup_ar_imp_cana(empresa          ,
                              aviso_recebto    ,
                              seq_aviso_recebto,
                              fornecedor,
                              tip_val          ,
                              val_imp_calculado,
                              val_imp_declarado,
                              val_bc_imp_calc  ,
                              val_bc_imp_decl  ,
                              aliq_imp_calculado ,
                              aliq_imp_declarado ,
                              tax_imp_calculado,
                              tax_imp_declarado,
                              venci_imp_cana   ,
                              ad_pagto_imp_cana,
                              dat_ret_imp_cana   )
                       VALUES(mr_sup_ar_imp_cana.empresa,
                              mr_sup_ar_imp_cana.num_aviso_rec,
                              mr_sup_ar_imp_cana.sequencia          ,
                              mr_w_sup0552_4.fornecedor,
                              mr_sup_ar_imp_cana.cond_pgto          ,
                              mr_sup_ar_imp_cana.val_tot_decl_nf    ,
                              mr_sup_ar_imp_cana.val_tot_decl_nf    ,
                              mr_sup_ar_imp_cana.val_tot_decl_icms  ,
                              mr_sup_ar_imp_cana.val_tot_decl_icms  ,
                              0                                     ,
                              0                                     ,
                              0                                     ,
                              0                                     ,
                              mr_sup_ar_imp_cana.venci_imp_cana,
                              ""                                    ,
                              mr_w_sup0552_4.dat_ent_nf)

  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET m_houve_erro = TRUE
     LET m_status_arquivo = 1
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION


#-------------------------------------------------#
 FUNCTION sup0552_insere_ins_estadual(l_conta_array)
#-------------------------------------------------#
 DEFINE l_conta_array      SMALLINT

  WHENEVER ERROR CONTINUE
  INSERT INTO sup_par_ar(empresa           ,
                         aviso_recebto     ,
                         seq_aviso_recebto ,
                         parametro         ,
                         par_ind_especial  ,
                         parametro_texto   ,
                         parametro_val     )
                 VALUES (mr_nf_sup.cod_empresa ,
                         mr_nf_sup.num_aviso_rec,
                         0,
                         "ins_estadual_ar",
                         "",
                         mr_w_sup0552_4.insc_estad,
                         mr_w_sup0552_4.seq_insc_estad)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET m_houve_erro = TRUE
     LET l_conta_array = l_conta_array + 1
     CALL sup0552_carrega_chave_consiste(l_conta_array)
     LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da SUP_PAR_AR2 "
     LET m_status_arquivo = 1
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION


#-------------------------------------------------#
 FUNCTION sup0552_insere_reten_inss(l_conta_array)
#-------------------------------------------------#
 DEFINE l_conta_array       SMALLINT

  WHENEVER ERROR CONTINUE
  INSERT INTO reten_inss(cod_empresa        ,
                         num_ad_nf_orig     ,
                         ser_nf             ,
                         ssr_nf             ,
                         ies_especie_nf     ,
                         cod_fornecedor     ,
                         num_doc_recolh     ,
                         dat_reten          ,
                         ies_isencao_inss   ,
                         login_resp_isencao ,
                         dat_aprov_isencao  ,
                         hor_aprov_isencao  ,
                         motivo_isencao     ,
                         ies_pendente       ,
                         val_base_calc_inss ,
                         val_reten_inss     ,
                         dat_venc_inss      ,
                         num_ad_pg_inss     ,
                         cod_empresa_proc   ,
                         num_lote_transf     )
                 VALUES(mr_reten_inss.cod_empresa        ,
                        mr_reten_inss.num_ad_nf_orig     ,
                        mr_reten_inss.ser_nf             ,
                        mr_reten_inss.ssr_nf             ,
                        mr_reten_inss.ies_especie_nf     ,
                        mr_reten_inss.cod_fornecedor     ,
                        mr_reten_inss.num_doc_recolh     ,
                        mr_reten_inss.dat_reten          ,
                        mr_reten_inss.ies_isencao_inss   ,
                        mr_reten_inss.login_resp_isencao ,
                        mr_reten_inss.dat_aprov_isencao  ,
                        mr_reten_inss.hor_aprov_isencao  ,
                        mr_reten_inss.motivo_isencao     ,
                        mr_reten_inss.ies_pendente       ,
                        mr_reten_inss.val_base_calc_inss ,
                        mr_reten_inss.val_reten_inss     ,
                        mr_reten_inss.dat_venc_inss      ,
                        mr_reten_inss.num_ad_pg_inss     ,
                        mr_reten_inss.cod_empresa_proc   ,
                        mr_reten_inss.num_lote_transf      )
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET m_houve_erro = TRUE
     LET l_conta_array = l_conta_array + 1
     CALL sup0552_carrega_chave_consiste(l_conta_array)
     LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da RETEN_INSS "
     LET m_status_arquivo = 1
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup0552_insere_reten_inss_rur(l_conta_array)
#-------------------------------------------------#
 DEFINE l_conta_array     SMALLINT

  WHENEVER ERROR CONTINUE
  INSERT INTO reten_inss_rur(cod_empresa        ,
                         num_ad_nf_orig     ,
                         ser_nf             ,
                         ssr_nf             ,
                         ies_especie_nf     ,
                         cod_fornecedor     ,
                         dat_reten_rur      ,
                         val_b_cal_inss_rur ,
                         val_reten_inss_rur ,
                         dat_venc_inss_rur  ,
                         num_ad_pg_inss_rur ,
                         cod_empresa_proc   ,
                         num_lote_transf     )
                 VALUES(mr_reten_inss_rur.cod_empresa        ,
                        mr_reten_inss_rur.num_ad_nf_orig     ,
                        mr_reten_inss_rur.ser_nf             ,
                        mr_reten_inss_rur.ssr_nf             ,
                        mr_reten_inss_rur.ies_especie_nf     ,
                        mr_reten_inss_rur.cod_fornecedor     ,
                        mr_reten_inss_rur.dat_reten_rur      ,
                        mr_reten_inss_rur.val_b_cal_inss_rur ,
                        mr_reten_inss_rur.val_reten_inss_rur ,
                        mr_reten_inss_rur.dat_venc_inss_rur  ,
                        mr_reten_inss_rur.num_ad_pg_inss_rur ,
                        mr_reten_inss_rur.cod_empresa_proc   ,
                        mr_reten_inss_rur.num_lote_transf      )
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET m_houve_erro = TRUE
     LET l_conta_array = l_conta_array + 1
     CALL sup0552_carrega_chave_consiste(l_conta_array)
     LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da RETEN_INSS_RUR "
     LET m_status_arquivo = 1
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup0552_insere_nfe_sup_compl(l_conta_array)
#-------------------------------------------------#
 DEFINE l_conta_array     SMALLINT

  WHENEVER ERROR CONTINUE
  INSERT INTO nfe_sup_compl (cod_empresa,
                                        num_aviso_rec,
                                        texto_compl1,
                                        texto_compl2,
                                        ies_nfe_emit)
                                  VALUES(mr_nfe_sup_compl.cod_empresa,
                                         mr_nfe_sup_compl.num_aviso_rec,
                                         mr_nfe_sup_compl.texto_compl1,
                                         mr_nfe_sup_compl.texto_compl2,
                                         mr_nfe_sup_compl.ies_nfe_emit)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET m_houve_erro = TRUE
     LET l_conta_array = l_conta_array + 1
     CALL sup0552_carrega_chave_consiste(l_conta_array)
     LET ma_array_consistencias[l_conta_array].txt_consistencia  = "Erro na inclusão da RETEN_INSS "
     LET m_status_arquivo = 1
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#---------------------------------------------------------------------------#
 FUNCTION sup0552_gera_inconsistencia_nota(l_conta_div, l_conta_array,l_txt)
#---------------------------------------------------------------------------#

  DEFINE l_conta_div        SMALLINT,
         l_conta_array      SMALLINT,
         l_txt              CHAR(59)

  CALL sup0552_carrega_chave_consiste(l_conta_array)
  LET ma_array_consistencias[l_conta_array].txt_consistencia  = l_txt
  LET m_status_arquivo = 1

 END FUNCTION


#---------------------------------------------------------------------------#
 FUNCTION sup0552_gera_inconsistencia_item(l_conta_div, l_conta_array,l_conta_itens_erro,l_txt)
#---------------------------------------------------------------------------#

 DEFINE l_conta_div        SMALLINT,
        l_conta_array      SMALLINT,
        l_conta_itens_erro SMALLINT,
        l_txt              CHAR(59)

  LET ma_array_consistencias[l_conta_array].nota_fiscal       =
      mr_w_sup0552_4_it.nota_fiscal
  LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
      mr_w_sup0552_4_it.serie_nota_fiscal
  LET ma_array_consistencias[l_conta_array].subserie_nf       =
      mr_w_sup0552_4_it.subserie_nf
  LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
      mr_w_sup0552_4_it.espc_nota_fiscal
  LET ma_array_consistencias[l_conta_array].fornecedor        =
      mr_w_sup0552_4_it.fornecedor
  LET ma_array_consistencias[l_conta_array].sequencia         =
      mr_w_sup0552_4_it.sequencia
  LET ma_array_consistencias[l_conta_array].txt_consistencia  = l_txt
  LET ma_array_consistencias[l_conta_array].arquivo           = m_nom_arquivo_consis
  LET m_status_arquivo = 1
  LET m_houve_erro     = TRUE

 END FUNCTION


#-------------------------------------------#
 FUNCTION sup0552_valida_serie_nota_fiscal()  #728632
#-------------------------------------------#
  DEFINE l_serie              LIKE par_sup_pad.par_txt,
         l_ser_nf_s_num       LIKE nf_sup.ser_nf,
         l_ser_nf             LIKE nf_sup.ser_nf

  IF sup0552_ies_utiliza_nfe(mr_w_sup0552_4.fornecedor) = "S" THEN
     CALL log0800_filter_number(l_ser_nf) RETURNING l_ser_nf_s_num

     IF l_ser_nf <> l_ser_nf_s_num AND
        l_ser_nf_s_num IS NOT NULL AND
        l_ser_nf_s_num <> " " THEN
        RETURN FALSE
     END IF
     RETURN TRUE
  END IF


  WHENEVER ERROR CONTINUE
  SELECT cod_parametro
    FROM par_sup_pad
   WHERE cod_empresa   = mr_w_sup0552_4.empresa
     AND cod_parametro LIKE 'serie_excecao%'
     AND par_txt       = mr_w_sup0552_4.serie_nota_fiscal
     AND par_ies       IN('A','F','N' )
  WHENEVER ERROR STOP
  IF sqlca.sqlcode  = 100 THEN
     IF mr_nf_sup.ies_especie_nf = "CON" THEN
        IF mr_w_sup0552_4.serie_nota_fiscal MATCHES "[BCU]" OR
           mr_w_sup0552_4.serie_nota_fiscal = "BU"          OR
           mr_w_sup0552_4.serie_nota_fiscal = "CU"          OR
           mr_w_sup0552_4.serie_nota_fiscal = " "           THEN
           RETURN TRUE
        END IF
     ELSE
        IF mr_w_sup0552_4.serie_nota_fiscal MATCHES "[1-9B-DU]" OR
           mr_w_sup0552_4.serie_nota_fiscal = "BU" OR
           mr_w_sup0552_4.serie_nota_fiscal = "CU" OR
           mr_w_sup0552_4.serie_nota_fiscal = "DU" OR
           mr_w_sup0552_4.serie_nota_fiscal = " " THEN
           RETURN TRUE
        END IF
     END IF

     RETURN FALSE
  END IF

 RETURN TRUE

 END FUNCTION

#------------------------------------#
 FUNCTION sup0552_valida_insc_estad()
#------------------------------------#

  IF mr_w_sup0552_4.insc_estad IS NOT NULL AND
     mr_w_sup0552_4.insc_estad <> " " THEN
     WHENEVER ERROR CONTINUE
     SELECT cod_fornecedor, ins_estadual
       FROM fornecedor
      WHERE cod_fornecedor = mr_w_sup0552_4.fornecedor
        AND ins_estadual   = mr_w_sup0552_4.insc_estad
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        IF mr_w_sup0552_4.seq_insc_estad IS NOT NULL THEN
           WHENEVER ERROR CONTINUE
           SELECT inscricao_estadual
             FROM sup_inscr_fornec
            WHERE fornecedor         = mr_w_sup0552_4.fornecedor
              AND inscricao_estadual = mr_w_sup0552_4.insc_estad
              AND seq_inscr_fornec   = mr_w_sup0552_4.seq_insc_estad
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              IF sqlca.sqlcode <> 100 THEN
                 CALL log003_err_sql("SELECT","SUP_INSC_FORNECEDOR")
              END IF
              RETURN FALSE
           END IF
        ELSE
           RETURN FALSE
        END IF
     END IF
  END IF

  RETURN TRUE

 END FUNCTION


#---------------------------------------------------------#
 FUNCTION sup0552_processa_sup_ar_imp_cana(l_num_aviso_rec)
#---------------------------------------------------------#

  DEFINE l_num_aviso_rec      LIKE aviso_rec.num_aviso_rec,
         l_houve_erro         SMALLINT,
         l_erro_consistencia  SMALLINT,
         l_txt_consistencia   CHAR(59)

  WHENEVER ERROR CONTINUE
  DECLARE cq_imp_cana2 CURSOR FOR
  SELECT empresa,
         cond_pagto,
         val_tot_decl_nf,
         val_tot_decl_icms,
         sequencia,
         item,
         qtd_decl_nf
    FROM w_sup0552_4
   WHERE w_sup0552_4.empresa           = mr_w_sup0552_4_it.empresa
     AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4_it.nota_fiscal
     AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4_it.serie_nota_fiscal
     AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4_it.subserie_nf
     AND w_sup0552_4.sequencia         = mr_w_sup0552_4_it.sequencia
     AND w_sup0552_4.tipo_registro     = "I"
  ORDER BY w_sup0552_4.empresa,
           w_sup0552_4.nota_fiscal,
           w_sup0552_4.serie_nota_fiscal,
           w_sup0552_4.subserie_nf
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE CURSOR","CQ_IMP_CANA2")
     RETURN TRUE,FALSE,""
  END IF

  INITIALIZE mr_sup_ar_imp_cana.* TO NULL

  WHENEVER ERROR CONTINUE
  FOREACH cq_imp_cana2 INTO mr_sup_ar_imp_cana.empresa,
                            mr_sup_ar_imp_cana.cond_pgto,
                            mr_sup_ar_imp_cana.val_tot_decl_nf,
                            mr_sup_ar_imp_cana.val_tot_decl_icms,
                            mr_sup_ar_imp_cana.sequencia,
                            mr_sup_ar_imp_cana.item,
                            mr_sup_ar_imp_cana.qtd_decl_nf
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("FOREACH CURSOR","CQ_IMP_CANA2")
     LET l_houve_erro = TRUE
     EXIT FOREACH
  END IF
     IF NOT m_sup_ar_imp_cana THEN
        LET l_erro_consistencia = TRUE
        LET l_txt_consistencia  = "Tabela 'sup_ar_imp_cana' não existe no banco de dados."
        EXIT FOREACH
     END IF

     WHENEVER ERROR CONTINUE
     SELECT empresa
       FROM sup_ar_imp_cana
      WHERE empresa            = mr_sup_ar_imp_cana.empresa
        AND aviso_recebto      = l_num_aviso_rec
        AND seq_aviso_recebto  = mr_sup_ar_imp_cana.sequencia
        AND tip_val            = mr_sup_ar_imp_cana.cond_pgto
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        IF sqlca.sqlcode <> 100 THEN
           CALL log003_err_sql("SELECT","SUP_AR_IMP_CANA(2)")
           LET l_houve_erro = TRUE
           EXIT FOREACH
        END IF
     ELSE
        LET l_erro_consistencia = TRUE
        LET l_txt_consistencia  = "Imposto de cana já cadastrado para esta nota fiscal."
        EXIT FOREACH
     END IF

     IF NOT sup0552_valida_tipo_valor(mr_sup_ar_imp_cana.empresa,mr_sup_ar_imp_cana.cond_pgto) THEN
        LET l_erro_consistencia = TRUE
        LET l_txt_consistencia  = "Tipo de valor não cadastrado no SUP1702."
        EXIT FOREACH
     END IF
  END FOREACH

  IF l_houve_erro THEN
     RETURN TRUE,FALSE,""
  END IF

  IF l_erro_consistencia THEN
     RETURN FALSE, l_erro_consistencia, l_txt_consistencia
  END IF

  INITIALIZE mr_sup_ar_imp_cana.* TO NULL

  WHENEVER ERROR CONTINUE
  FOREACH cq_imp_cana2 INTO  mr_sup_ar_imp_cana.empresa,
                             mr_sup_ar_imp_cana.cond_pgto,
                             mr_sup_ar_imp_cana.val_tot_decl_nf,
                             mr_sup_ar_imp_cana.val_tot_decl_icms,
                             mr_sup_ar_imp_cana.sequencia,
                             mr_sup_ar_imp_cana.item,
                             mr_sup_ar_imp_cana.qtd_decl_nf
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("FOREACH CURSOR","CQ_IMP_CANA2(2)")
     LET l_houve_erro = TRUE
     CLOSE cq_imp_cana2 #764215#
     EXIT FOREACH
  END IF
     LET mr_sup_ar_imp_cana.num_aviso_rec = l_num_aviso_rec

     CALL sup0552_busca_parametro_data_venci(mr_sup_ar_imp_cana.empresa,mr_sup_ar_imp_cana.cond_pgto,mr_w_sup0552_4.dat_ent_nf)
          RETURNING mr_sup_ar_imp_cana.venci_imp_cana

     IF NOT sup0552_insere_sup_ar_imp_cana() THEN
        LET l_houve_erro = TRUE
        CLOSE cq_imp_cana2 #764215#
        EXIT FOREACH
     END IF
  END FOREACH
  FREE cq_imp_cana2

  IF l_houve_erro THEN
     RETURN TRUE, FALSE,""
  END IF

  RETURN FALSE,FALSE,""

 END FUNCTION

#---------------------------------------------------------#
 FUNCTION sup0552_processa_sup_info_adic_nfe(l_num_aviso_rec)
#---------------------------------------------------------#

  DEFINE l_num_aviso_rec      LIKE aviso_rec.num_aviso_rec,
         l_houve_erro         SMALLINT,
         l_erro_consistencia  SMALLINT,
         l_txt_consistencia   CHAR(59),
         l_dat_ent_nf         DATE,
         l_dia2               DECIMAL(2,0),
         l_dia                CHAR(02),
         l_mes                CHAR(02),
         l_ano                CHAR(04)

  INITIALIZE mr_sup_info_adic_nfe.* TO NULL

  WHENEVER ERROR CONTINUE
  DECLARE cq_info_adic_nfe CURSOR FOR
   SELECT empresa,
          dat_ent_nf,
          qtd_decl_nf
     FROM w_sup0552_4
    WHERE w_sup0552_4.empresa           = mr_w_sup0552_4.empresa
      AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
      AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
      AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4.subserie_nf
      AND	 w_sup0552_4.tipo_registro     = "N"
   ORDER BY w_sup0552_4.empresa,
            w_sup0552_4.nota_fiscal,
            w_sup0552_4.serie_nota_fiscal,
            w_sup0552_4.subserie_nf
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE CURSOR","CQ_INFO_ADIC_NFE")
     RETURN TRUE,FALSE,""
  END IF

  WHENEVER ERROR CONTINUE
  FOREACH cq_info_adic_nfe INTO mr_sup_info_adic_nfe.empresa,
                                l_dat_ent_nf,
                                mr_sup_info_adic_nfe.qtd_diaria
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("FOREACH CURSOR","CQ_INFO_ADIC_NFE")
     LET l_houve_erro = TRUE
     CLOSE cq_info_adic_nfe #764215#
     EXIT FOREACH
  END IF

     IF NOT  m_sup_info_adic_nfe THEN
        LET l_erro_consistencia = TRUE
        LET l_txt_consistencia  = "Tabela 'sup_info_adic_nfe' não existe no banco de dados."
        CLOSE cq_info_adic_nfe #764215#
        EXIT FOREACH
     END IF

     IF mr_sup_info_adic_nfe.qtd_diaria IS NULL THEN
        LET l_erro_consistencia = TRUE
        LET l_txt_consistencia  = "Entrada cana: Quantidade do item não informada."
        CLOSE cq_info_adic_nfe #764215#
        EXIT FOREACH
     END IF

     IF l_dat_ent_nf IS NULL OR l_dat_ent_nf = " " THEN
        LET l_erro_consistencia = TRUE
        LET l_txt_consistencia  = "Entrada cana: Data de entrada da nota de cana não informada."
        CLOSE cq_info_adic_nfe #764215#
        EXIT FOREACH
     END IF

     LET l_dia = EXTEND(l_dat_ent_nf, DAY   TO DAY)
     LET l_mes = EXTEND(l_dat_ent_nf, MONTH TO MONTH)
     LET l_dia2 = l_dia

     WHENEVER ERROR CONTINUE
     SELECT empresa
       FROM sup_info_adic_nfe
      WHERE empresa       = mr_sup_info_adic_nfe.empresa
        AND aviso_recebto = l_num_aviso_rec
        AND dia_ent_nf    = l_dia2
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        IF sqlca.sqlcode <> 100 THEN
           CALL log003_err_sql("SELECT","SUP_INFO_ADIC_NFE")
           LET l_houve_erro = TRUE
           CLOSE cq_info_adic_nfe #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET l_erro_consistencia = TRUE
        LET l_txt_consistencia  = "Informações complementares da nota fiscal já cadastradas."
        CLOSE cq_info_adic_nfe #764215#
        EXIT FOREACH
     END IF

     IF l_dia = "30" THEN
        IF sup0552_existe_dia_invalido(l_mes,l_dia,"") THEN
           LET l_erro_consistencia = TRUE
           LET l_txt_consistencia  = "Dias informados não existentes para este mês."
           CLOSE cq_info_adic_nfe #764215#
           EXIT FOREACH
        END IF
     END IF

     IF l_dia = "31" THEN
        IF sup0552_existe_dia_invalido(l_mes,"",l_dia) THEN
           LET l_erro_consistencia = TRUE
           LET l_txt_consistencia  = "Dias informados não existentes para este mês."
           CLOSE cq_info_adic_nfe #764215#
           EXIT FOREACH
        END IF
     END IF

  END FOREACH

  IF l_houve_erro THEN
     RETURN TRUE,FALSE,""
  END IF

  IF l_erro_consistencia THEN
     RETURN FALSE,l_erro_consistencia,l_txt_consistencia
  END IF

  INITIALIZE l_dat_ent_nf           TO NULL
  INITIALIZE mr_sup_info_adic_nfe.* TO NULL
  INITIALIZE l_dia                  TO NULL
  INITIALIZE l_mes                  TO NULL
  INITIALIZE l_ano                  TO NULL

  WHENEVER ERROR CONTINUE
  FOREACH cq_info_adic_nfe INTO mr_sup_info_adic_nfe.empresa,
                                l_dat_ent_nf,
                                mr_sup_info_adic_nfe.qtd_diaria
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("FOREACH CURSOR","CQ_INFO_ADIC_NFE")
     LET l_houve_erro = TRUE
     CLOSE cq_info_adic_nfe #764215#
     EXIT FOREACH
  END IF

     LET mr_sup_info_adic_nfe.aviso_recebto  = l_num_aviso_rec
     LET l_dia = EXTEND(l_dat_ent_nf, DAY   TO DAY)
     LET l_mes = EXTEND(l_dat_ent_nf, MONTH TO MONTH)
     LET l_ano = EXTEND(l_dat_ent_nf, YEAR  TO YEAR)

     LET mr_sup_info_adic_nfe.dia  = l_dia
     LET mr_sup_info_adic_nfe.mes  = l_mes
     LET mr_sup_info_adic_nfe.ano  = l_ano

     IF NOT sup0552_insere_sup_info_adic_nfe() THEN
        LET l_houve_erro = TRUE
        CLOSE cq_info_adic_nfe #764215#
        EXIT FOREACH
     END IF


  END FOREACH
  FREE cq_info_adic_nfe

  IF l_houve_erro THEN
     RETURN TRUE,FALSE,""
  END IF

  RETURN FALSE,FALSE,""

 END FUNCTION

#---------------------------------------------------------#
 FUNCTION sup0552_carrega_compl_nota(l_num_aviso_rec)
#---------------------------------------------------------#

  DEFINE l_num_aviso_rec LIKE aviso_rec.num_aviso_rec

  INITIALIZE mr_nfe_sup_compl.*   TO NULL

  IF (mr_w_sup0552_4.compl_nota1 IS NOT NULL AND mr_w_sup0552_4.compl_nota1 <> " ") OR
     (mr_w_sup0552_4.compl_nota2 IS NOT NULL AND mr_w_sup0552_4.compl_nota2 <> " ") THEN
     LET mr_nfe_sup_compl.cod_empresa   = mr_w_sup0552_4.empresa
     LET mr_nfe_sup_compl.num_aviso_rec = l_num_aviso_rec
     LET mr_nfe_sup_compl.texto_compl1  = mr_w_sup0552_4.compl_nota1
     LET mr_nfe_sup_compl.texto_compl2  = mr_w_sup0552_4.compl_nota2
     LET mr_nfe_sup_compl.ies_nfe_emit  = "N"
  END IF

 END FUNCTION

#---------------------------------------------------------#
 FUNCTION sup0552_valida_banco_dados()
#---------------------------------------------------------#

  LET m_sup_ar_imp_cana = FALSE
  IF log0150_verifica_se_tabela_existe("sup_ar_imp_cana") THEN
     LET m_sup_ar_imp_cana = TRUE
  END IF

  LET m_sup_info_adic_nfe = FALSE
  IF log0150_verifica_se_tabela_existe("sup_info_adic_nfe") THEN
     LET m_sup_info_adic_nfe = TRUE
  END IF

 END FUNCTION
#--------------------------------#
 FUNCTION sup0552_integra_cre() #599526
#--------------------------------#
 DEFINE l_integra_cre CHAR(01)

  WHENEVER ERROR CONTINUE
    SELECT serie_conhec_frete
      INTO l_integra_cre
      FROM w_sup0552_4
     WHERE w_sup0552_4.empresa           = mr_w_sup0552_4.empresa
       AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
       AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
       AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4.subserie_nf
       AND w_sup0552_4.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
       AND w_sup0552_4.fornecedor        = mr_w_sup0552_4.fornecedor
       AND w_sup0552_4.tipo_registro     = "E"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN

     IF l_integra_cre IS NULL OR
        l_integra_cre = " " THEN
        LET l_integra_cre = "S"
     END IF


     WHENEVER ERROR CONTINUE
       INSERT INTO sup_par_ar
                  (empresa          ,
                   aviso_recebto    ,
                   seq_aviso_recebto,
                   parametro        ,
                   par_ind_especial ,
                   parametro_texto  ,
                   parametro_val    ,
                   parametro_dat)
             VALUES(mr_w_sup0552_4.empresa,
                    mr_nf_sup.num_aviso_rec,
                    0,
                    'integra_cre_nf_impor',
                    l_integra_cre,
                    NULL,
                    NULL,
                    TODAY)
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql('INSERT','sup_par_ar')
        RETURN FALSE
     END IF
  END IF

 RETURN TRUE

 END FUNCTION

#---------------------------------------------------------#
 FUNCTION sup0552_inclui_grade_dim_item(l_it_grade_dimens) ##OS 586613
#---------------------------------------------------------#
  DEFINE l_houve_erro      SMALLINT,
         l_qtd_recebida    LIKE aviso_rec.qtd_declarad_nf,
         lr_sup_ar_grade   RECORD LIKE sup_ar_grade.*,
         l_msg             CHAR(59),
         lr_item_ctr_grade RECORD LIKE item_ctr_grade.*,
         l_it_grade_dimens SMALLINT,
         l_tem_reg_grade   SMALLINT

  IF m_temp_grade = FALSE OR l_it_grade_dimens = FALSE THEN
     RETURN TRUE, ""
  END IF

  LET l_houve_erro    = FALSE
  LET l_qtd_recebida  = 0
  LET l_tem_reg_grade = FALSE

  WHENEVER ERROR CONTINUE
   DECLARE cq_grade_itens CURSOR FOR
    SELECT w_sup0552_4.dat_emis_nf,
           w_sup0552_4.dat_ent_nf,
           w_sup0552_4.cfop_compl,
           w_sup0552_4.sequencia,
           w_sup0552_4.item,
           w_sup0552_4.qtd_decl_nf,
           w_sup0552_4.seq_tabulacao,
           w_sup0552_4.grade_1,
           w_sup0552_4.grade_2,
           w_sup0552_4.grade_3,
           w_sup0552_4.grade_4,
           w_sup0552_4.grade_5,
           w_sup0552_4.num_peca,
           w_sup0552_4.serie_peca,
           w_sup0552_4.comprimento,
           w_sup0552_4.largura,
           w_sup0552_4.altura,
           w_sup0552_4.diametro,
           w_sup0552_4.local_estoq,
           w_sup0552_4.num_lote
      FROM w_sup0552_4
     WHERE w_sup0552_4.empresa           = mr_w_sup0552_4.empresa
       AND w_sup0552_4.nota_fiscal       = mr_w_sup0552_4.nota_fiscal
       AND w_sup0552_4.serie_nota_fiscal = mr_w_sup0552_4.serie_nota_fiscal
       AND w_sup0552_4.subserie_nf       = mr_w_sup0552_4.subserie_nf
       AND w_sup0552_4.espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
       AND w_sup0552_4.fornecedor        = mr_w_sup0552_4.fornecedor
       AND w_sup0552_4.sequencia         = mr_aviso_rec.num_seq
       AND w_sup0552_4.tipo_registro     = "G"
  ORDER BY w_sup0552_4.empresa,
           w_sup0552_4.nota_fiscal,
           w_sup0552_4.serie_nota_fiscal,
           w_sup0552_4.subserie_nf,
           w_sup0552_4.espc_nota_fiscal,
           w_sup0552_4.fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log0030_processa_err_sql("DECLARE CURSOR","CQ_GRADE_ITENS",TRUE)
     RETURN FALSE, log0030_mensagem_get_texto()
  END IF

  WHENEVER ERROR CONTINUE
  FOREACH cq_grade_itens INTO mr_w_sup0552_4.dat_emis_nf,
                              mr_w_sup0552_4.dat_ent_nf,
                              mr_w_sup0552_4.cfop_compl,
                              mr_w_sup0552_4.sequencia,
                              mr_w_sup0552_4.item,
                              mr_w_sup0552_4.qtd_decl_nf,
                              mr_w_sup0552_4.seq_tabulacao,
                              mr_w_sup0552_4.grade_1,
                              mr_w_sup0552_4.grade_2,
                              mr_w_sup0552_4.grade_3,
                              mr_w_sup0552_4.grade_4,
                              mr_w_sup0552_4.grade_5,
                              mr_w_sup0552_4.num_peca,
                              mr_w_sup0552_4.serie_peca,
                              mr_w_sup0552_4.comprimento,
                              mr_w_sup0552_4.largura,
                              mr_w_sup0552_4.altura,
                              mr_w_sup0552_4.diametro,
                              mr_w_sup0552_4.local_estoq,
                              mr_w_sup0552_4.num_lote

     IF sqlca.sqlcode <> 0 THEN
        CALL log0030_processa_err_sql("DECLARE CURSOR","CQ_GRADE_ITENS",TRUE)
        LET l_houve_erro = TRUE
        CLOSE cq_grade_itens #764215#
        EXIT FOREACH
     END IF

     CALL sup0063_verifica_controles(1,
                                     mr_aviso_rec.cod_item,
                                     "INCLUSAO",
                                     "SUP0530") RETURNING m_controles
     IF m_controles <> " " THEN
        CALL sup0063_grava_temp_controles(m_controles) RETURNING p_status
        IF p_status = FALSE THEN
           CALL log0030_processa_mensagem("Houve erro na gravacao da tabela W_CONTROLES.","exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     END IF

     INITIALIZE lr_sup_ar_grade.* TO NULL

     LET lr_sup_ar_grade.empresa           = mr_aviso_rec.cod_empresa
     LET lr_sup_ar_grade.aviso_recebto     = mr_aviso_rec.num_aviso_rec
     LET lr_sup_ar_grade.seq_aviso_recebto = mr_aviso_rec.num_seq
     LET lr_sup_ar_grade.seq_tabulacao     = mr_w_sup0552_4.seq_tabulacao
     LET lr_sup_ar_grade.origem            = "R" ##Recebimento

     WHENEVER ERROR CONTINUE
     SELECT num_grade_1,
            num_grade_2,
            num_grade_3,
            num_grade_4,
            num_grade_5
       INTO lr_item_ctr_grade.num_grade_1,
            lr_item_ctr_grade.num_grade_2,
            lr_item_ctr_grade.num_grade_3,
            lr_item_ctr_grade.num_grade_4,
            lr_item_ctr_grade.num_grade_5
       FROM item_ctr_grade
      WHERE cod_empresa = mr_aviso_rec.cod_empresa
        AND cod_item    = mr_aviso_rec.cod_item
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        LET l_msg = "Item ",mr_aviso_rec.cod_item," sem controle de grade."
        CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
        LET l_houve_erro = TRUE
        CLOSE cq_grade_itens #764215#
        EXIT FOREACH
     END IF

     IF sup0063_existe_controle("01") THEN
        IF (lr_item_ctr_grade.num_grade_1 IS NOT NULL AND lr_item_ctr_grade.num_grade_1 <> " ") AND
           (mr_w_sup0552_4.grade_1 IS NOT NULL AND mr_w_sup0552_4.grade_1 <> " ") THEN
            LET lr_sup_ar_grade.grade_1 = mr_w_sup0552_4.grade_1
            IF sup0552_verifica_grade(lr_item_ctr_grade.num_grade_1, mr_w_sup0552_4.grade_1) = FALSE THEN
               IF log0030_mensagem_get_texto() IS NULL OR
                  log0030_mensagem_get_texto() = " " THEN
                  LET l_msg = "Grade 1 (",mr_w_sup0552_4.grade_1,") nao cadastrada."
                  CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
               END IF
               LET l_houve_erro = TRUE
               CLOSE cq_grade_itens #764215#
               EXIT FOREACH
            END IF
        ELSE
           IF (lr_item_ctr_grade.num_grade_1 IS NOT NULL AND lr_item_ctr_grade.num_grade_1 <> " ") AND
              (mr_w_sup0552_4.grade_1 IS NULL OR mr_w_sup0552_4.grade_1 = " ") THEN
              LET l_msg = "Informe GRADE 1 para item ",mr_aviso_rec.cod_item CLIPPED
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           ELSE
              LET lr_sup_ar_grade.grade_1 = " "
           END IF
        END IF

        IF (lr_item_ctr_grade.num_grade_2 IS NOT NULL AND lr_item_ctr_grade.num_grade_2 <> " ") AND
           (mr_w_sup0552_4.grade_2 IS NOT NULL AND mr_w_sup0552_4.grade_2 <> " ") THEN
            LET lr_sup_ar_grade.grade_2 = mr_w_sup0552_4.grade_2
            IF sup0552_verifica_grade(lr_item_ctr_grade.num_grade_2, mr_w_sup0552_4.grade_2) = FALSE THEN
               IF log0030_mensagem_get_texto() IS NULL OR
                  log0030_mensagem_get_texto() = " " THEN
                  LET l_msg = "Grade 2 (",mr_w_sup0552_4.grade_2,") nao cadastrada."
                  CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
               END IF
               LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
               EXIT FOREACH
            END IF
        ELSE
           IF (lr_item_ctr_grade.num_grade_2 IS NOT NULL AND lr_item_ctr_grade.num_grade_2 <> " ") AND
              (mr_w_sup0552_4.grade_2 IS NULL OR mr_w_sup0552_4.grade_2 = " ") THEN
              LET l_msg = "Informe GRADE 2 para item ",mr_aviso_rec.cod_item CLIPPED
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           ELSE
              LET lr_sup_ar_grade.grade_2 = " "
           END IF
        END IF

        IF (lr_item_ctr_grade.num_grade_3 IS NOT NULL AND lr_item_ctr_grade.num_grade_3 <> " ") AND
           (mr_w_sup0552_4.grade_3 IS NOT NULL AND mr_w_sup0552_4.grade_3 <> " ") THEN
            LET lr_sup_ar_grade.grade_3 = mr_w_sup0552_4.grade_3
            IF sup0552_verifica_grade(lr_item_ctr_grade.num_grade_3, mr_w_sup0552_4.grade_3) = FALSE THEN
               IF log0030_mensagem_get_texto() IS NULL OR
                  log0030_mensagem_get_texto() = " " THEN
                  LET l_msg = "Grade 3 (",mr_w_sup0552_4.grade_3,") nao cadastrada."
                  CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
               END IF
               LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
               EXIT FOREACH
            END IF
        ELSE
           IF (lr_item_ctr_grade.num_grade_3 IS NOT NULL AND lr_item_ctr_grade.num_grade_3 <> " ") AND
              (mr_w_sup0552_4.grade_3 IS NULL OR mr_w_sup0552_4.grade_3 = " ") THEN
              LET l_msg = "Informe GRADE 3 para item ",mr_aviso_rec.cod_item CLIPPED
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           ELSE
              LET lr_sup_ar_grade.grade_3 = " "
           END IF
        END IF

        IF (lr_item_ctr_grade.num_grade_4 IS NOT NULL AND lr_item_ctr_grade.num_grade_4 <> " ") AND
           (mr_w_sup0552_4.grade_4 IS NOT NULL AND mr_w_sup0552_4.grade_4 <> " ") THEN
            LET lr_sup_ar_grade.grade_4 = mr_w_sup0552_4.grade_4
            IF sup0552_verifica_grade(lr_item_ctr_grade.num_grade_4, mr_w_sup0552_4.grade_4) = FALSE THEN
               IF log0030_mensagem_get_texto() IS NULL OR
                  log0030_mensagem_get_texto() = " " THEN
                  LET l_msg = "Grade 4 (",mr_w_sup0552_4.grade_4,") nao cadastrada."
                  CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
               END IF
               LET l_houve_erro = TRUE
               CLOSE cq_grade_itens #764215#
               EXIT FOREACH
            END IF
        ELSE
           IF (lr_item_ctr_grade.num_grade_4 IS NOT NULL AND lr_item_ctr_grade.num_grade_4 <> " ") AND
              (mr_w_sup0552_4.grade_4 IS NULL OR mr_w_sup0552_4.grade_4 = " ") THEN
              LET l_msg = "Informe GRADE 4 para item ",mr_aviso_rec.cod_item CLIPPED
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           ELSE
              LET lr_sup_ar_grade.grade_4 = " "
           END IF
        END IF

        IF (lr_item_ctr_grade.num_grade_5 IS NOT NULL AND lr_item_ctr_grade.num_grade_5 <> " ") AND
           (mr_w_sup0552_4.grade_5 IS NOT NULL AND mr_w_sup0552_4.grade_5 <> " ") THEN
            LET lr_sup_ar_grade.grade_5 = mr_w_sup0552_4.grade_5
            IF sup0552_verifica_grade(lr_item_ctr_grade.num_grade_5, mr_w_sup0552_4.grade_5) = FALSE THEN
               IF log0030_mensagem_get_texto() IS NULL OR
                  log0030_mensagem_get_texto() = " " THEN
                  LET l_msg = "Grade 5 (",mr_w_sup0552_4.grade_5,") nao cadastrada."
                  CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
               END IF
               LET l_houve_erro = TRUE
               CLOSE cq_grade_itens #764215#
               EXIT FOREACH
            END IF
        ELSE
           IF (lr_item_ctr_grade.num_grade_5 IS NOT NULL AND lr_item_ctr_grade.num_grade_5 <> " ") AND
              (mr_w_sup0552_4.grade_5 IS NULL OR mr_w_sup0552_4.grade_5 = " ") THEN
              LET l_msg = "Informe GRADE 5 para item ",mr_aviso_rec.cod_item CLIPPED
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           ELSE
              LET lr_sup_ar_grade.grade_5 = " "
           END IF
        END IF
     ELSE
        LET lr_sup_ar_grade.grade_1 = " "
        LET lr_sup_ar_grade.grade_2 = " "
        LET lr_sup_ar_grade.grade_3 = " "
        LET lr_sup_ar_grade.grade_4 = " "
        LET lr_sup_ar_grade.grade_5 = " "
     END IF

     IF sup0063_existe_controle("02") THEN
        IF mr_w_sup0552_4.item IS NOT NULL AND mr_w_sup0552_4.item <> " " THEN
           LET lr_sup_ar_grade.endereco    = mr_w_sup0552_4.item
           IF sup0552_verifica_endereco(mr_w_sup0552_4.item) = FALSE THEN
              LET l_msg = "Endereço (",mr_w_sup0552_4.item,") nao cadastrada."
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        ELSE
           LET l_msg = "Informe ENDERECO para item ",mr_aviso_rec.cod_item CLIPPED
           CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET lr_sup_ar_grade.endereco = " "
     END IF

     IF sup0063_existe_controle("03") THEN
        IF mr_w_sup0552_4.cfop_compl IS NOT NULL THEN
           LET lr_sup_ar_grade.num_volume  = mr_w_sup0552_4.cfop_compl
           IF sup0552_verifica_numero(mr_w_sup0552_4.cfop_compl) = FALSE THEN
              LET l_msg = "Volume (",mr_w_sup0552_4.cfop_compl,") invalido."
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        ELSE
           LET l_msg = "Informe VOLUME para item ",mr_aviso_rec.cod_item CLIPPED
           CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET lr_sup_ar_grade.num_volume = 0
     END IF

     IF sup0063_existe_controle("04") THEN
        IF mr_w_sup0552_4.dat_emis_nf IS NOT NULL THEN
           LET lr_sup_ar_grade.dat_hor_producao  = EXTEND(DATE(mr_w_sup0552_4.dat_emis_nf),YEAR TO SECOND)
           IF sup0552_verifica_data(mr_w_sup0552_4.dat_emis_nf) = FALSE THEN
              LET l_msg = "Data de producao (",mr_w_sup0552_4.dat_emis_nf,") invalida."
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        ELSE
           LET l_msg = "Informe DATA PRODUCAO para item ",mr_aviso_rec.cod_item CLIPPED
           CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET lr_sup_ar_grade.dat_hor_producao = "1900-01-01 00:00:00"
     END IF

     IF sup0063_existe_controle("05") THEN
        IF mr_w_sup0552_4.dat_ent_nf IS NOT NULL THEN
           LET lr_sup_ar_grade.dat_hor_valid  = EXTEND(DATE(mr_w_sup0552_4.dat_ent_nf),YEAR TO SECOND)
           IF sup0552_verifica_data(mr_w_sup0552_4.dat_ent_nf) = FALSE THEN
              LET l_msg = "Data de validade (",mr_w_sup0552_4.dat_ent_nf,") invalida."
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        ELSE
           LET l_msg = "Informe DATA VALIDADE para item ",mr_aviso_rec.cod_item CLIPPED
           CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET lr_sup_ar_grade.dat_hor_valid = "1900-01-01 00:00:00"
     END IF

     IF sup0063_existe_controle("06") THEN
        IF mr_w_sup0552_4.comprimento IS NOT NULL THEN
           LET lr_sup_ar_grade.comprimento  = mr_w_sup0552_4.comprimento
           IF sup0552_verifica_numero(mr_w_sup0552_4.comprimento) = FALSE THEN
              LET l_msg = "Comprimento (",mr_w_sup0552_4.comprimento,") invalido."
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        ELSE
           LET l_msg = "Informe COMPRIMENTO para item ",mr_aviso_rec.cod_item CLIPPED
           CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET lr_sup_ar_grade.comprimento = 0
     END IF

     IF sup0063_existe_controle("07") THEN
        IF mr_w_sup0552_4.largura IS NOT NULL THEN
           LET lr_sup_ar_grade.largura  = mr_w_sup0552_4.largura
           IF sup0552_verifica_numero(mr_w_sup0552_4.largura) = FALSE THEN
              LET l_msg = "Largura (",mr_w_sup0552_4.largura,") invalida."
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        ELSE
           LET l_msg = "Informe LARGURA para item ",mr_aviso_rec.cod_item CLIPPED
           CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET lr_sup_ar_grade.largura = 0
     END IF

     IF sup0063_existe_controle("08") THEN
        IF mr_w_sup0552_4.altura IS NOT NULL THEN
           LET lr_sup_ar_grade.altura  = mr_w_sup0552_4.altura
           IF sup0552_verifica_numero(mr_w_sup0552_4.altura) = FALSE THEN
              LET l_msg = "Altura (",mr_w_sup0552_4.altura,") invalida."
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        ELSE
           LET l_msg = "Informe ALTURA para item ",mr_aviso_rec.cod_item CLIPPED
           CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET lr_sup_ar_grade.altura = 0
     END IF

     IF sup0063_existe_controle("09") THEN
        IF mr_w_sup0552_4.diametro IS NOT NULL THEN
           LET lr_sup_ar_grade.diametro  = mr_w_sup0552_4.diametro
           IF sup0552_verifica_numero(mr_w_sup0552_4.diametro) = FALSE THEN
              LET l_msg = "Diametro (",mr_w_sup0552_4.diametro,") invalido."
              CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        ELSE
           LET l_msg = "Informe DIAMETRO para item ",mr_aviso_rec.cod_item CLIPPED
           CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET lr_sup_ar_grade.diametro = 0
     END IF

     IF sup0063_existe_controle("10") THEN
        IF mr_w_sup0552_4.num_peca IS NOT NULL AND mr_w_sup0552_4.num_peca <> " " THEN
           LET lr_sup_ar_grade.peca  = mr_w_sup0552_4.num_peca
           IF sup0552_verifica_peca(mr_w_sup0552_4.num_peca) THEN
              IF log0030_mensagem_get_texto() IS NULL OR
                 log0030_mensagem_get_texto() = " " THEN
                 LET l_msg = "Peca (",mr_w_sup0552_4.num_peca,") ja existente no estoque."
                 CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              END IF
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        ELSE
           LET l_msg = "Informe NR. PECA para item ",mr_aviso_rec.cod_item CLIPPED
           CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET lr_sup_ar_grade.peca = " "
     END IF

     IF sup0063_existe_controle("11") THEN
        IF mr_w_sup0552_4.serie_peca IS NOT NULL AND mr_w_sup0552_4.serie_peca <> " " THEN
           LET lr_sup_ar_grade.serie_peca  = mr_w_sup0552_4.serie_peca
           IF sup0552_verifica_serie(mr_w_sup0552_4.serie_peca) THEN
              IF log0030_mensagem_get_texto() IS NULL OR
                 log0030_mensagem_get_texto() = " " THEN
                 LET l_msg = "Numero de serie( ",mr_w_sup0552_4.serie_peca,") ja existente no estoque."
                 CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
              END IF
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        ELSE
           LET l_msg = "Informe NR. SERIE para item ",mr_aviso_rec.cod_item CLIPPED
           CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     ELSE
        LET lr_sup_ar_grade.serie_peca = " "
     END IF

    IF sup0063_existe_controle("12") THEN
       IF mr_w_sup0552_4.num_lote IS NULL OR
          mr_w_sup0552_4.num_lote = " " THEN
          INITIALIZE m_num_lote TO NULL
          WHENEVER ERROR CONTINUE
            SELECT parametro_texto
              INTO m_num_lote
              FROM sup_par_ar
             WHERE empresa           = mr_aviso_rec.cod_empresa
               AND aviso_recebto     = mr_aviso_rec.num_aviso_rec
               AND seq_aviso_recebto = 0
               AND parametro         = "replica_numero_lote"
          WHENEVER ERROR STOP
          IF sqlca.sqlcode = 0 THEN
             LET mr_w_sup0552_4.num_lote = m_num_lote
          ELSE
             IF m_ies_inf_dat_fabr = "N" THEN
                IF m_ies_lote_automat = "S" THEN
                   IF  mr_nf_sup.ies_especie_nf = 'NFR' AND
                       mr_nf_sup.ies_nf_aguard_nfe = '8' AND
                       m_considera_num_lote_emp_origem = 'S' THEN

                      IF sup0552_verifica_lote_origem(mr_aviso_rec.cod_empresa,
                                                      mr_aviso_rec.num_aviso_rec,
                                                      mr_aviso_rec.num_seq,
                                                      mr_nf_sup.cod_fornecedor) = TRUE THEN

                         LET mr_w_sup0552_4.num_lote = m_num_lote
                      ELSE
                         LET mr_w_sup0552_4.num_lote = NULL
                      END IF
                   ELSE
                      LET mr_w_sup0552_4.num_lote =
                          mr_aviso_rec.num_aviso_rec USING "&&&&&&","/",
                          mr_aviso_rec.num_seq USING "&&&",
                          lr_sup_ar_grade.seq_tabulacao USING "&&"
                   END IF
                ELSE
                   IF m_ies_lote_automat = "T" THEN
                      LET mr_w_sup0552_4.num_lote =
                          mr_aviso_rec.num_aviso_rec USING "&&&&&&","/",
                          mr_aviso_rec.num_seq USING "&&&"
                   ELSE
                      LET mr_w_sup0552_4.num_lote = NULL
                   END IF
                END IF
             ELSE
                LET mr_w_sup0552_4.num_lote = NULL
             END IF
          END IF
       END IF
    ELSE
       LET mr_w_sup0552_4.num_lote = NULL
    END IF

    IF sup0063_existe_controle("14") THEN
       IF mr_w_sup0552_4.local_estoq IS NOT NULL AND
          mr_w_sup0552_4.local_estoq <> " " THEN
          IF sup0552_verifica_local(mr_w_sup0552_4.local_estoq) = FALSE THEN
             LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
             EXIT FOREACH
          END IF
       ELSE
          LET mr_w_sup0552_4.local_estoq = " "
       END IF
    ELSE
       LET mr_w_sup0552_4.local_estoq = " "
    END IF

     LET lr_sup_ar_grade.dat_hor_reserva_1 = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
     LET lr_sup_ar_grade.dat_hor_reserva_2 = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
     LET lr_sup_ar_grade.dat_hor_reserva_3 = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
     LET lr_sup_ar_grade.qtd_reservada_1   = 0
     LET lr_sup_ar_grade.qtd_reservada_2   = 0
     LET lr_sup_ar_grade.qtd_reservada_3   = 0
     LET lr_sup_ar_grade.num_reserva_1     = 0
     LET lr_sup_ar_grade.num_reserva_2     = 0
     LET lr_sup_ar_grade.num_reserva_3     = 0
     LET lr_sup_ar_grade.texto_reservado   = " "

     WHENEVER ERROR CONTINUE
     INSERT INTO sup_ar_grade(empresa,
                              aviso_recebto,
                              seq_aviso_recebto,
                              seq_tabulacao,
                              origem,
                              endereco,
                              num_volume,
                              grade_1,
                              grade_2,
                              grade_3,
                              grade_4,
                              grade_5,
                              dat_hor_producao,
                              dat_hor_valid,
                              peca,
                              serie_peca,
                              comprimento,
                              largura,
                              altura,
                              diametro,
                              dat_hor_reserva_1,
                              dat_hor_reserva_2,
                              dat_hor_reserva_3,
                              qtd_reservada_1,
                              qtd_reservada_2,
                              qtd_reservada_3,
                              num_reserva_1,
                              num_reserva_2,
                              num_reserva_3,
                              texto_reservado)
                       VALUES(lr_sup_ar_grade.empresa,
                              lr_sup_ar_grade.aviso_recebto,
                              lr_sup_ar_grade.seq_aviso_recebto,
                              lr_sup_ar_grade.seq_tabulacao,
                              lr_sup_ar_grade.origem,
                              lr_sup_ar_grade.endereco,
                              lr_sup_ar_grade.num_volume,
                              lr_sup_ar_grade.grade_1,
                              lr_sup_ar_grade.grade_2,
                              lr_sup_ar_grade.grade_3,
                              lr_sup_ar_grade.grade_4,
                              lr_sup_ar_grade.grade_5,
                              lr_sup_ar_grade.dat_hor_producao,
                              lr_sup_ar_grade.dat_hor_valid,
                              lr_sup_ar_grade.peca,
                              lr_sup_ar_grade.serie_peca,
                              lr_sup_ar_grade.comprimento,
                              lr_sup_ar_grade.largura,
                              lr_sup_ar_grade.altura,
                              lr_sup_ar_grade.diametro,
                              lr_sup_ar_grade.dat_hor_reserva_1,
                              lr_sup_ar_grade.dat_hor_reserva_2,
                              lr_sup_ar_grade.dat_hor_reserva_3,
                              lr_sup_ar_grade.qtd_reservada_1,
                              lr_sup_ar_grade.qtd_reservada_2,
                              lr_sup_ar_grade.qtd_reservada_3,
                              lr_sup_ar_grade.num_reserva_1,
                              lr_sup_ar_grade.num_reserva_2,
                              lr_sup_ar_grade.num_reserva_3,
                              lr_sup_ar_grade.texto_reservado)
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log0030_processa_err_sql("INSERT","SUP_AR_GRADE",TRUE)
        LET l_houve_erro = TRUE
        CLOSE cq_grade_itens #764215#
        EXIT FOREACH
     END IF

     IF log0150_verifica_se_tabela_existe("sup_par_ar_grade") THEN
        IF mr_w_sup0552_4.num_lote IS NOT NULL AND
           mr_w_sup0552_4.num_lote <> " " THEN
           WHENEVER ERROR CONTINUE
           INSERT INTO sup_par_ar_grade(empresa,
                                        aviso_recebto,
                                        seq_aviso_recebto,
                                        seq_tabulacao,
                                        origem_grade,
                                        parametro,
                                        des_parametro,
                                        parametro_texto)
                                 VALUES(lr_sup_ar_grade.empresa,
                                        lr_sup_ar_grade.aviso_recebto,
                                        lr_sup_ar_grade.seq_aviso_recebto,
                                        lr_sup_ar_grade.seq_tabulacao,
                                        lr_sup_ar_grade.origem,
                                        "num_lote",
                                        "Numero do lote correspondente a grade",
                                        mr_w_sup0552_4.num_lote)
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log0030_processa_err_sql("INSERT","SUP_PAR_AR_GRADE",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        END IF

        IF mr_w_sup0552_4.local_estoq IS NOT NULL AND
           mr_w_sup0552_4.local_estoq <> " " THEN
           WHENEVER ERROR CONTINUE
           INSERT INTO sup_par_ar_grade(empresa,
                                        aviso_recebto,
                                        seq_aviso_recebto,
                                        seq_tabulacao,
                                        origem_grade,
                                        parametro,
                                        des_parametro,
                                        parametro_texto)
                                 VALUES(lr_sup_ar_grade.empresa,
                                        lr_sup_ar_grade.aviso_recebto,
                                        lr_sup_ar_grade.seq_aviso_recebto,
                                        lr_sup_ar_grade.seq_tabulacao,
                                        lr_sup_ar_grade.origem,
                                        "local_estoque",
                                        "Local de estoque correspondente a grade",
                                        mr_w_sup0552_4.local_estoq)
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log0030_processa_err_sql("INSERT","SUP_PAR_AR_GRADE",TRUE)
              LET l_houve_erro = TRUE
              CLOSE cq_grade_itens #764215#
              EXIT FOREACH
           END IF
        END IF

        WHENEVER ERROR CONTINUE
        INSERT INTO sup_par_ar_grade(empresa,
                                     aviso_recebto,
                                     seq_aviso_recebto,
                                     seq_tabulacao,
                                     origem_grade,
                                     parametro,
                                     des_parametro,
                                     parametro_qtd)
                              VALUES(lr_sup_ar_grade.empresa,
                                     lr_sup_ar_grade.aviso_recebto,
                                     lr_sup_ar_grade.seq_aviso_recebto,
                                     lr_sup_ar_grade.seq_tabulacao,
                                     lr_sup_ar_grade.origem,
                                     "qtd_recebida",
                                     "Quantidade recebida na grade",
                                     mr_w_sup0552_4.qtd_decl_nf)
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log0030_processa_err_sql("INSERT","SUP_PAR_AR_GRADE",TRUE)
           LET l_houve_erro = TRUE
           CLOSE cq_grade_itens #764215#
           EXIT FOREACH
        END IF
     END IF

     LET l_qtd_recebida  = l_qtd_recebida + mr_w_sup0552_4.qtd_decl_nf
     LET l_tem_reg_grade = TRUE

     WHENEVER ERROR CONTINUE
  END FOREACH
  FREE cq_grade_itens
  WHENEVER ERROR STOP

  IF l_houve_erro THEN
      RETURN FALSE, log0030_mensagem_get_texto()
  END IF

  IF l_tem_reg_grade THEN
     IF l_qtd_recebida <> mr_aviso_rec.qtd_declarad_nf THEN
        LET l_msg = "Soma da qtd. por grade difere da qtd. NF. "
        CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
         RETURN FALSE, log0030_mensagem_get_texto()
     END IF
  END IF

  RETURN TRUE, " "

 END FUNCTION

#--------------------------------------------------------------------#
 FUNCTION sup0552_verifica_apenas_controle_lote_automatico(l_cod_item)
#--------------------------------------------------------------------#
 DEFINE l_cod_item         LIKE item.cod_item

 IF m_ies_lote_automat  = 'T' THEN
    LET m_ies_lote_automat  = 'S'
 END IF

 INITIALIZE m_controles TO NULL
 CALL sup0063_verifica_controles(1,
                                 l_cod_item,
                                 "INCLUSAO",
                                 "SUP3760") RETURNING m_controles

 IF m_controles IS NULL OR
    m_controles = " " OR
   (m_controles = '001|12 001|13 001|14' AND
    m_ies_inf_dat_fabr = 'N' AND
    (m_ies_lote_automat  = 'S' OR
     m_ies_lote_automat = 'T')) THEN
    RETURN TRUE
 ELSE
     RETURN FALSE
 END IF

 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup0552_verifica_grade(l_grade, l_valor)
#-------------------------------------------------#
  DEFINE l_ind        SMALLINT,
         l_passou     SMALLINT,
         lr_ctr_grade RECORD LIKE ctr_grade.*,
         sql_stmt     CHAR(2000),
         l_grade      SMALLINT,
         l_valor      LIKE sup_ar_grade.grade_1,
         l_houve_erro SMALLINT

  LET l_passou     = FALSE
  LET l_houve_erro = FALSE

  INITIALIZE lr_ctr_grade.* TO NULL

  WHENEVER ERROR CONTINUE
  DECLARE cq_ctr_grade CURSOR FOR
   SELECT ctr_grade.nom_tabela_zoom,
          ctr_grade.descr_col_1_zoom,
          ctr_grade.ies_ctr_empresa
     FROM ctr_grade
    WHERE ctr_grade.cod_empresa = mr_aviso_rec.cod_empresa
      AND ctr_grade.cod_grade   = l_grade
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log0030_processa_err_sql("DECLARE CURSOR","CQ_CTR_GRADE",TRUE)
     RETURN FALSE
  END IF

  WHENEVER ERROR CONTINUE
  FOREACH cq_ctr_grade INTO lr_ctr_grade.nom_tabela_zoom,
                            lr_ctr_grade.descr_col_1_zoom,
                            lr_ctr_grade.ies_ctr_empresa

     IF sqlca.sqlcode <> 0 THEN
        CALL log0030_processa_err_sql("FOREACH","CQ_CTR_GRADE",TRUE)
        LET l_houve_erro = TRUE
        CLOSE cq_ctr_grade #764215#
        EXIT FOREACH
     END IF
     LET l_passou = TRUE
  END FOREACH
  FREE cq_ctr_grade
  WHENEVER ERROR STOP

  IF l_houve_erro THEN
     RETURN FALSE
  END IF

  IF l_passou = TRUE THEN
     LET sql_stmt = "SELECT ",lr_ctr_grade.nom_tabela_zoom CLIPPED,".* FROM ",
                              lr_ctr_grade.nom_tabela_zoom CLIPPED," WHERE "

     IF lr_ctr_grade.ies_ctr_empresa = "S" THEN
        LET sql_stmt = sql_stmt CLIPPED," ",lr_ctr_grade.nom_tabela_zoom CLIPPED,".cod_empresa = """,mr_aviso_rec.cod_empresa,""" ",
                       " AND ",lr_ctr_grade.nom_tabela_zoom CLIPPED,".",lr_ctr_grade.descr_col_1_zoom CLIPPED," = """,l_valor CLIPPED,""" "
     ELSE
        LET sql_stmt = sql_stmt CLIPPED," ",lr_ctr_grade.nom_tabela_zoom CLIPPED,".",lr_ctr_grade.descr_col_1_zoom CLIPPED," = """,l_valor CLIPPED,""" "
     END IF

     WHENEVER ERROR CONTINUE
     PREPARE var_ctr_grade FROM sql_stmt
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log0030_processa_err_sql("PREPARE SQL","VAR_CTR_GRADE",TRUE)
        RETURN FALSE
     END IF
     WHENEVER ERROR CONTINUE
     DECLARE cq_ctr_grade2 CURSOR FOR var_ctr_grade
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log0030_processa_err_sql("DECLARE CURSOR","CQ_CTR_GRADE2",TRUE)
        RETURN FALSE
     END IF

     WHENEVER ERROR CONTINUE
     OPEN cq_ctr_grade2
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log0030_processa_err_sql("OPEN CURSOR","CQ_CTR_GRADE2",TRUE)
        RETURN FALSE
     END IF

     WHENEVER ERROR CONTINUE
     FETCH cq_ctr_grade2
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        WHENEVER ERROR CONTINUE
        CLOSE cq_ctr_grade2
        FREE cq_ctr_grade2
        WHENEVER ERROR STOP
        RETURN FALSE
     END IF
     WHENEVER ERROR CONTINUE
     CLOSE cq_ctr_grade2
     FREE cq_ctr_grade2
     WHENEVER ERROR STOP
  END IF

  RETURN TRUE

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_verifica_endereco(l_endereco)
#----------------------------------------------#
 DEFINE l_conta        SMALLINT,
        l_endereco     LIKE sup_ar_grade.endereco

 LET l_conta = NULL

 WHENEVER ERROR CONTINUE
 SELECT COUNT(*)
   INTO l_conta
   FROM endereco
  WHERE endereco.cod_empresa = mr_aviso_rec.cod_empresa
    AND endereco.endereco    = l_endereco
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR
    l_conta IS NULL THEN
    LET l_conta = 0
 END IF

 IF l_conta = 0 THEN
    RETURN FALSE
 END IF

 RETURN TRUE

 END FUNCTION

#--------------------------------------#
 FUNCTION sup0552_verifica_numero(l_num)
#--------------------------------------#
 DEFINE l_num CHAR(20),
        l_ind SMALLINT

 FOR l_ind = 1 TO 20
    IF l_num[l_ind] < "0" OR
       l_num[l_ind] > "9" THEN
       IF l_num[l_ind] <> "." AND
          l_num[l_ind] <> "," AND
          l_num[l_ind] <> " " THEN
          RETURN FALSE
       END IF
    END IF
 END FOR

 RETURN TRUE

 END FUNCTION

#--------------------------------------#
 FUNCTION sup0552_verifica_data(l_data)
#--------------------------------------#
 DEFINE l_data CHAR(20),
        l_ano  DECIMAL(4,0)

 IF l_data[1,2] < "01" OR
    l_data[1,2] > "31" THEN
    RETURN FALSE
 END IF

 IF l_data[4,5] < "01" OR
    l_data[4,5] > "12" THEN
    RETURN FALSE
 END IF

 LET l_ano = l_data[7,10]

 IF l_ano < 1900 OR
    l_ano > 3000 THEN
    RETURN FALSE
 END IF

 IF l_data[3] <> "/" THEN
    RETURN FALSE
 END IF

 IF l_data[6] <> "/" THEN
    RETURN FALSE
 END IF

 IF l_data[11,20] <> " " THEN
    RETURN FALSE
 END IF

 IF l_data[4,5] = "02" THEN
    LET l_ano = l_data[7,10]
    IF (l_ano MOD 4) > 0 THEN
       IF l_data[1,2] > "28" THEN
          RETURN FALSE
       END IF
    ELSE
       IF l_data[1,2] > "29" THEN
          RETURN FALSE
       END IF
    END IF
 ELSE
    IF l_data[4,5] = "01" OR
       l_data[4,5] = "03" OR
       l_data[4,5] = "05" OR
       l_data[4,5] = "07" OR
       l_data[4,5] = "08" OR
       l_data[4,5] = "10" OR
       l_data[4,5] = "12" THEN
       IF l_data[1,2] > "31" THEN
          RETURN FALSE
       END IF
    ELSE
       IF l_data[4,5] = "04" OR
          l_data[4,5] = "06" OR
          l_data[4,5] = "09" OR
          l_data[4,5] = "11" THEN
          IF l_data[1,2] > "30" THEN
             RETURN FALSE
          END IF
       END IF
    END IF
 END IF

 RETURN TRUE

 END FUNCTION

#---------------------------------------#
 FUNCTION sup0552_verifica_peca(l_valor)
#---------------------------------------#
 DEFINE l_valor    CHAR(20),
        l_tipo     CHAR(01),
        l_contador SMALLINT

 ##OS490925
 IF m_ver_dupli_peca_serie = "N" THEN
    RETURN FALSE
 END IF
 ##OS490925

 IF mr_nf_sup.ies_especie_nf <> 'NFD'  AND
    mr_nf_sup.ies_nf_aguard_nfe <> 'D' AND
    mr_nf_sup.ies_nf_aguard_nfe <> 'X' THEN
    IF NOT sup0552_verifica_componente_oc() THEN  ### OS 523084
       WHENEVER ERROR CONTINUE
       DECLARE cq_peca CURSOR FOR
        SELECT estoque_lote_ender.num_peca
          FROM estoque_lote_ender
         WHERE estoque_lote_ender.cod_empresa = mr_aviso_rec.cod_empresa
           AND estoque_lote_ender.cod_item    = mr_aviso_rec.cod_item
           AND estoque_lote_ender.num_peca    = l_valor
           AND estoque_lote_ender.qtd_saldo  <> 0
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log0030_processa_err_sql("DECLARE CURSOR","CQ_PECA",TRUE)
          RETURN TRUE
       END IF

       WHENEVER ERROR CONTINUE
       OPEN cq_peca
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log0030_processa_err_sql("OPEN CURSOR","CQ_PECA",TRUE)
          RETURN TRUE
       END IF

       WHENEVER ERROR CONTINUE
       FETCH cq_peca
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 THEN
          WHENEVER ERROR CONTINUE
          CLOSE cq_peca
          FREE cq_peca
          WHENEVER ERROR STOP
          RETURN TRUE
       END IF
    END IF
 END IF

 RETURN FALSE

 END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_verifica_serie(l_valor)
#----------------------------------------#
 DEFINE l_valor    CHAR(20),
        l_tipo     CHAR(01),
        l_contador SMALLINT

 ##OS490925
 IF m_ver_dupli_peca_serie = "N" THEN
    RETURN FALSE
 END IF
 ##OS490925

 IF mr_nf_sup.ies_especie_nf <> 'NFD'  AND
    mr_nf_sup.ies_nf_aguard_nfe <> 'D' AND
    mr_nf_sup.ies_nf_aguard_nfe <> 'X' THEN
    IF NOT sup0552_verifica_componente_oc() THEN ### OS 523084
       WHENEVER ERROR CONTINUE
       DECLARE cq_num_serie CURSOR FOR
        SELECT estoque_lote_ender.num_serie
          FROM estoque_lote_ender
         WHERE estoque_lote_ender.cod_empresa = mr_aviso_rec.cod_empresa
           AND estoque_lote_ender.cod_item    = mr_aviso_rec.cod_item
           AND estoque_lote_ender.num_serie   = l_valor
           AND estoque_lote_ender.qtd_saldo  <> 0
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log0030_processa_err_sql("DECLARE CURSOR","CQ_NUM_SERIE",TRUE)
          RETURN TRUE
       END IF
       WHENEVER ERROR CONTINUE
       OPEN cq_num_serie
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log0030_processa_err_sql("OPEN CURSOR","CQ_NUM_SERIE",TRUE)
          RETURN TRUE
       END IF
       WHENEVER ERROR CONTINUE
       FETCH cq_num_serie
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 THEN
          WHENEVER ERROR CONTINUE
          CLOSE cq_num_serie
          FREE cq_num_serie
          WHENEVER ERROR STOP
          RETURN TRUE
       END IF
    END IF
 END IF

 RETURN FALSE

 END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_verifica_componente_oc()
#----------------------------------------#
 DEFINE l_count_estrut SMALLINT

 IF mr_aviso_rec.num_oc IS NOT NULL AND
    mr_aviso_rec.num_oc <> 0 THEN

    LET l_count_estrut = NULL

    WHENEVER ERROR CONTINUE
    SELECT COUNT(*)
      INTO l_count_estrut
      FROM estrut_ordem_sup
     WHERE estrut_ordem_sup.cod_empresa   = mr_aviso_rec.cod_empresa
       AND estrut_ordem_sup.num_oc        = mr_aviso_rec.num_oc
       AND estrut_ordem_sup.cod_item_comp = mr_aviso_rec.cod_item
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 OR
       l_count_estrut IS NULL THEN
       LET l_count_estrut = 0
    END IF

    IF  sup0552_verifica_tipo_entrada_benef() = FALSE THEN
       LET l_count_estrut  = 0
    END IF

    IF l_count_estrut > 0 THEN
       RETURN TRUE
    ELSE
       RETURN FALSE
    END IF
 END IF

 RETURN FALSE

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_verifica_tipo_entrada_benef()
#----------------------------------------------#
 DEFINE l_ies_tipo_entrada CHAR(01),
        l_cod_fiscal_c     LIKE aviso_rec.cod_fiscal_item,
        l_cod_fiscal_compl LIKE aviso_rec_compl.cod_fiscal_compl

 INITIALIZE l_cod_fiscal_compl TO NULL
 WHENEVER ERROR CONTINUE
 SELECT cod_fiscal_compl
   INTO l_cod_fiscal_compl
   FROM aviso_rec_compl
  WHERE cod_empresa   = mr_nf_sup.cod_empresa
    AND num_aviso_rec = m4_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_cod_fiscal_compl = 0
 END IF

 INITIALIZE l_cod_fiscal_c TO NULL
 LET l_cod_fiscal_c[2,5] = mr_nf_sup.cod_operacao[2,5]
 IF mr_nf_sup.cod_operacao[1] = "5" THEN
    LET l_cod_fiscal_c[1]    = "1"
 END IF
 IF mr_nf_sup.cod_operacao[1] = "6" THEN
    LET l_cod_fiscal_c[1]    = "2"
 END IF
 IF mr_nf_sup.cod_operacao[1] = "7" THEN
    LET l_cod_fiscal_c[1]    = "3"
 END IF

 LET l_ies_tipo_entrada = NULL
 CALL sup0686_retorna_tipo_entrada(l_cod_fiscal_c,
                                   l_cod_fiscal_compl)
      RETURNING p_status,
                l_ies_tipo_entrada

 IF (l_ies_tipo_entrada <> "6" AND
     l_ies_tipo_entrada <> "4") THEN
    RETURN FALSE
 ELSE
    RETURN TRUE
 END IF

 END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_verifica_local(l_local)
#----------------------------------------#
 DEFINE l_local LIKE local.cod_local,
        l_msg   CHAR(59)

 WHENEVER ERROR CONTINUE
 SELECT local.den_local
   FROM local
  WHERE local.cod_empresa = p_cod_empresa
    AND local.cod_local   = l_local
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_msg = "Local (",l_local,") nao cadastrado."
    CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
    RETURN FALSE
 ELSE
    IF sup0552_verifica_motivo_remessa(l_local) = FALSE THEN
       LET l_msg = "Local (",l_local,") utilizado para controle de itens em terceiros"
       CALL log0030_processa_mensagem(l_msg,"exclamation",TRUE)
       RETURN FALSE
    ELSE
       RETURN TRUE
    END IF
 END IF

 END FUNCTION

#-----------------------------------------------------#
 FUNCTION sup0552_verifica_motivo_remessa(l_cod_local)
#-----------------------------------------------------#
 DEFINE l_count               SMALLINT,
        l_cod_local           LIKE local.cod_local,
        l_ies_sit_orig_dest   LIKE estoque_trans.ies_sit_est_orig #O.S 470625

 IF m_contr_local_terc IS NOT NULL AND
    m_contr_local_terc <> " " THEN
    LET l_count = 0
    WHENEVER ERROR CONTINUE
    SELECT COUNT(*)
      INTO l_count
      FROM motivo_remessa
     WHERE cod_empresa       = mr_aviso_rec.cod_empresa
       AND cod_local_remessa = l_cod_local
       AND ies_situa_remessa = "L"
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("SELECT","MOTIVO_REMESSA")
    END IF

    IF l_count > 0 THEN
       RETURN FALSE
    END IF
 END IF

 RETURN TRUE

 END FUNCTION

#------------------------------------------------------#
 FUNCTION sup0552_verifica_lote_origem(l_cod_empresa,
                                       l_num_aviso_rec,
                                       l_num_seq,
                                       l_cod_fornecedor)
#------------------------------------------------------#
 DEFINE l_cod_fornecedor      LIKE fornecedor.cod_fornecedor,
        l_num_cgc             LIKE fornecedor.num_cgc_cpf,
        l_cod_empresa         LIKE empresa.cod_empresa,
        l_cod_emp_transf      LIKE empresa.cod_empresa,
        l_num_nff             LIKE ar_nf_item.num_nff,
        l_num_pedido          LIKE ar_nf_item.num_pedido,
        l_num_sequencia       LIKE ar_nf_item.num_sequencia,
        l_num_aviso_rec       LIKE aviso_rec.num_aviso_rec,
        l_num_seq             LIKE aviso_rec.num_seq,
        l_houve_erro          SMALLINT,
        lr_nf_item_transac    RECORD LIKE nf_item_transac.*

 LET l_houve_erro = FALSE

 INITIALIZE l_num_cgc TO NULL
 WHENEVER ERROR CONTINUE
 SELECT fornecedor.num_cgc_cpf
   INTO l_num_cgc
   FROM fornecedor
  WHERE fornecedor.cod_fornecedor   = l_cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    RETURN FALSE
 END IF

 INITIALIZE l_cod_emp_transf TO NULL
 WHENEVER ERROR CONTINUE
 DECLARE cq_emp_transf1 CURSOR FOR
 SELECT empresa.cod_empresa
   FROM empresa ,empresa_transf
  WHERE empresa.cod_empresa <> l_cod_empresa
    AND empresa.num_cgc = l_num_cgc
    AND ((empresa.cod_empresa = empresa_transf.cod_empresa
    AND empresa_transf.cod_empresa_transf = l_cod_empresa)
     OR (empresa.cod_empresa = empresa_transf.cod_empresa_transf
    AND empresa_transf.cod_empresa = l_cod_empresa))
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE CURSOR","CQ_EMP_TRANSF1")
    RETURN FALSE
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cq_emp_transf1 INTO l_cod_emp_transf
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_EMP_TRANSF1")
    END IF
    CLOSE cq_emp_transf1 #764215#
    EXIT FOREACH
 END FOREACH
 FREE cq_emp_transf1
 WHENEVER ERROR STOP

 INITIALIZE l_num_nff,
            l_num_pedido,
            l_num_sequencia TO NULL

 WHENEVER ERROR CONTINUE
 SELECT ar_nf_item.num_nff,
        ar_nf_item.num_pedido,
        ar_nf_item.num_sequencia
   INTO l_num_nff,
        l_num_pedido,
        l_num_sequencia
   FROM ar_nf_item
  WHERE ar_nf_item.cod_empresa   = l_cod_empresa
    AND ar_nf_item.num_aviso_rec = l_num_aviso_rec
    AND ar_nf_item.num_seq       = l_num_seq
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    RETURN FALSE
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_nf_item_trans1 CURSOR FOR
  SELECT nf_item_transac.cod_empresa,
         nf_item_transac.num_nff,
         nf_item_transac.num_pedido,
         nf_item_transac.num_sequencia,
         nf_item_transac.num_transac
    FROM nf_item_transac
   WHERE nf_item_transac.cod_empresa      = l_cod_emp_transf
     AND nf_item_transac.num_nff          = l_num_nff
     AND nf_item_transac.num_pedido       = l_num_pedido
     AND nf_item_transac.num_sequencia    = l_num_sequencia
   ORDER BY nf_item_transac.cod_empresa,
            nf_item_transac.num_nff,
            nf_item_transac.num_pedido,
            nf_item_transac.num_sequencia,
            nf_item_transac.num_transac
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE CURSOR","CQ_NF_ITEM_TRANS1")
    RETURN FALSE
 END IF
 WHENEVER ERROR CONTINUE
 FOREACH cq_nf_item_trans1 INTO lr_nf_item_transac.*
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_NF_ITEM_TRANS1")
       CLOSE cq_nf_item_trans1 #764215#
       EXIT FOREACH
    END IF
    INITIALIZE m_num_lote TO NULL
    WHENEVER ERROR CONTINUE
    SELECT estoque_trans.num_lote_orig
      INTO m_num_lote
      FROM estoque_trans
     WHERE estoque_trans.cod_empresa = l_cod_emp_transf
       AND estoque_trans.num_transac = lr_nf_item_transac.num_transac
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       WHENEVER ERROR CONTINUE
       SELECT h_estoque_trans.num_lote_orig
         INTO m_num_lote
         FROM h_estoque_trans
        WHERE h_estoque_trans.cod_empresa = l_cod_emp_transf
          AND h_estoque_trans.num_transac = lr_nf_item_transac.num_transac
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET l_houve_erro = TRUE
          CLOSE cq_nf_item_trans1 #764215#
          EXIT FOREACH
       END IF
    END IF
    WHENEVER ERROR CONTINUE
 END FOREACH
 WHENEVER ERROR CONTINUE
 FREE cq_nf_item_trans1
 WHENEVER ERROR STOP
 IF l_houve_erro = TRUE THEN
    RETURN FALSE
 ELSE
    RETURN TRUE
 END IF

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_reten_recol_imposto_nf() #724885 ok
#----------------------------------------------#

  IF mr_inf_compl_nf.reten_inss IS NULL OR
     mr_inf_compl_nf.reten_inss = " " THEN
     LET mr_inf_compl_nf.reten_inss = "N"
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_ar
               (empresa,
                aviso_recebto,
                seq_aviso_recebto,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_nf_sup.cod_empresa,
                mr_nf_sup.num_aviso_rec,
                0,
                "RETEN INSS",
                mr_inf_compl_nf.reten_inss,
                "Indica se a retencao de INSS",
                NULL,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_AR/RETEN INSS')
  END IF

  IF mr_inf_compl_nf.recolhimento_inss IS NULL OR
     mr_inf_compl_nf.recolhimento_inss = " " THEN
     LET mr_inf_compl_nf.recolhimento_inss = "N"
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_ar
               (empresa,
                aviso_recebto,
                seq_aviso_recebto,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_nf_sup.cod_empresa,
                mr_nf_sup.num_aviso_rec,
                0,
                "RECOLHIMENTO INSS",
                mr_inf_compl_nf.recolhimento_inss,
                "Indica se a recolhimento de INSS",
                NULL,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_AR/RETEN INSS')
  END IF


  IF mr_inf_compl_nf.reten_iss IS NULL OR
     mr_inf_compl_nf.reten_iss = " " THEN
     LET mr_inf_compl_nf.reten_iss = "N"
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_ar
               (empresa,
                aviso_recebto,
                seq_aviso_recebto,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_nf_sup.cod_empresa,
                mr_nf_sup.num_aviso_rec,
                0,
                "RETEN ISS",
                mr_inf_compl_nf.reten_iss,
                "Indica se a retencao de ISS",
                NULL,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_AR/RETEN INSS')
  END IF

  IF mr_inf_compl_nf.reten_sest_senat IS NULL OR
     mr_inf_compl_nf.reten_sest_senat = " " THEN
     LET mr_inf_compl_nf.reten_sest_senat = "N"
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_ar
               (empresa,
                aviso_recebto,
                seq_aviso_recebto,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_nf_sup.cod_empresa,
                mr_nf_sup.num_aviso_rec,
                0,
                "RETEN SEST/SENAT",
                mr_inf_compl_nf.reten_sest_senat,
                "Indica se a retencao de SEST/SENA",
                NULL,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_AR/RETEN INSS')
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_ar
               (empresa,
                aviso_recebto,
                seq_aviso_recebto,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_nf_sup.cod_empresa,
                mr_nf_sup.num_aviso_rec,
                0,
                "bc_retencao_inss",
                NULL,
                "base calculo retencao inss",
                m_bc_retencao_inss,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_AR/RETEN INSS')
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_ar
               (empresa,
                aviso_recebto,
                seq_aviso_recebto,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_nf_sup.cod_empresa,
                mr_nf_sup.num_aviso_rec,
                0,
                "bc_recolhimento_inss",
                NULL,
                "Base calculo recolhimento inss",
                m_bc_recolhimento_inss,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_AR/RETEN INSS')
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_ar
               (empresa,
                aviso_recebto,
                seq_aviso_recebto,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_nf_sup.cod_empresa,
                mr_nf_sup.num_aviso_rec,
                0,
                "perc_reten_inss",
                NULL,
                "Percentual retencao inss",
                m_perc_reten_inss,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_AR/RETEN INSS')
  END IF
  #Gravar percentual de ISS.

  WHENEVER ERROR CONTINUE
  INSERT INTO sup_par_ar
             (empresa,
              aviso_recebto,
              seq_aviso_recebto,
              parametro,
              par_ind_especial,
              parametro_texto,
              parametro_val,
              parametro_dat)
       VALUES(mr_nf_sup.cod_empresa,
              mr_nf_sup.num_aviso_rec,
              0,
              "perc_reten_iss",
              NULL,
              "Percentual retencao iss",
              m_perc_reten_iss,
              NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_AR/RETEN INSS')
  END IF


END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_busca_inf_compl_nf() #724885
#----------------------------------------------#
 DEFINE l_ind         SMALLINT,
        l_houve_erro  SMALLINT

  INITIALIZE mr_inf_compl_nf    TO NULL
  INITIALIZE m_regime_aduaneiro TO NULL
  LET m_registro_v = FALSE
  LET l_houve_erro = FALSE
  LET l_ind = 0


  WHENEVER ERROR CONTINUE
   DECLARE cq_inf_compl_nf  CURSOR WITH HOLD FOR
    SELECT tipo_registro,
           tip_nota_fiscal   ,
           serie_conhec_frete,
           val_tot_decl_nf   ,
           val_tot_decl_icms ,
           cfop              ,
           processado        ,
           item,
           pre_unit_nf,
           qtd_decl_nf,
           pct_icms,
           pct_icms_frete,   #campo do arquivo do sup0552 LINHA V onde constará o valor da base de cálculo do ISS    (posição 37 da linha V) 765795
           transportador     #Campo do arquivo do SUP0522 LINHA V onde constará o regime aduaneiro da NF CH A24579
      FROM w_sup0552_4
     WHERE empresa           =  mr_w_sup0552_4.empresa
       AND nota_fiscal       =  mr_w_sup0552_4.nota_fiscal
       AND serie_nota_fiscal =  mr_w_sup0552_4.serie_nota_fiscal
       AND subserie_nf       =  mr_w_sup0552_4.subserie_nf
       AND espc_nota_fiscal  =  mr_w_sup0552_4.espc_nota_fiscal
       AND fornecedor        =  mr_w_sup0552_4.fornecedor
       AND tipo_registro     = 'V'
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','cq_inf_compl_nf')
     RETURN FALSE
  END IF


  WHENEVER ERROR CONTINUE
   FOREACH cq_inf_compl_nf  INTO mr_inf_compl_nf.tipo_registro            ,
                                 mr_inf_compl_nf.registro_entrada         ,
                                 mr_inf_compl_nf.reten_inss               ,
                                 mr_inf_compl_nf.valor_despesa_acessoria  ,
                                 mr_inf_compl_nf.num_di                   ,
                                 mr_inf_compl_nf.recolhimento_inss        ,
                                 mr_inf_compl_nf.reten_iss                ,
                                 mr_inf_compl_nf.reten_sest_senat,
                                 m_bc_recolhimento_inss,
                                 m_bc_retencao_inss,
                                 m_perc_reten_inss,
                                 m_perc_reten_iss,  #definir variável igual a m_perc_reten_inss
                                 m_regime_aduaneiro #CH A24579
      IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql('FOREACH CURSOR','CQ_INF_COMPL_NF')
         LET l_houve_erro = TRUE
        CLOSE cq_inf_compl_nf #764215#
         EXIT FOREACH
      END IF

      LET l_ind = l_ind + 1

      IF l_ind > 1 THEN
         LET m_registro_v = TRUE
         LET l_houve_erro = TRUE
        CLOSE cq_inf_compl_nf #764215#
         EXIT FOREACH
      END IF


   END FOREACH
  FREE cq_inf_compl_nf
  WHENEVER ERROR STOP

  IF l_houve_erro = TRUE THEN
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_busca_inf_compl_item() #724885
#----------------------------------------------#
  DEFINE l_ind        SMALLINT,
         l_houve_erro SMALLINT

  INITIALIZE mr_inf_compl_item TO NULL
  INITIALIZE m_peso_item       TO NULL
  LET m_registro_t  = TRUE
  LET l_houve_erro  = FALSE
  LET l_ind = 0

  WHENEVER ERROR CONTINUE
   DECLARE cq_inf_compl_item CURSOR WITH HOLD FOR
    SELECT tipo_registro,
           tip_nota_fiscal,
           num_conhec_frete,
           pedido,
           val_tot_decl_ipi     #Campo do arquivo do SUP0522 LINHA T onde constará peso do item da NF CH A24579
      FROM w_sup0552_4
     WHERE empresa           =  mr_w_sup0552_4.empresa
       AND nota_fiscal       =  mr_w_sup0552_4.nota_fiscal
       AND serie_nota_fiscal =  mr_w_sup0552_4.serie_nota_fiscal
       AND subserie_nf       =  mr_w_sup0552_4.subserie_nf
       AND espc_nota_fiscal  =  mr_w_sup0552_4.espc_nota_fiscal
       AND fornecedor        =  mr_w_sup0552_4.fornecedor
       AND sequencia         =  mr_w_sup0552_4_it.sequencia
       AND tipo_registro     = 'T'
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','cq_inf_compl_item')
     RETURN FALSE
  END IF

  WHENEVER ERROR CONTINUE
   FOREACH cq_inf_compl_item  INTO mr_inf_compl_item.tipo_registro,
                                   mr_inf_compl_item.ies_da_bc_ipi,
                                   mr_inf_compl_item.grupo_despesa_item,
                                   mr_inf_compl_item.cod_tip_despesa,
                                   m_peso_item
      IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql('FOREACH CURSOR','cq_inf_compl_item')
         LET l_houve_erro = TRUE
         CLOSE cq_inf_compl_item #764215#
         EXIT FOREACH
      END IF

      LET l_ind = l_ind + 1

      IF l_ind > 1 THEN
         LET m_registro_t = TRUE
         LET l_houve_erro = TRUE
         CLOSE cq_inf_compl_item #764215#
         EXIT FOREACH
      END IF

   END FOREACH
  FREE cq_inf_compl_item
  WHENEVER ERROR STOP

  IF l_houve_erro = TRUE THEN
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF


 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_busca_inf_compl_fret() #724885
#----------------------------------------------#
  DEFINE l_ind        SMALLINT,
         l_houve_erro SMALLINT

  INITIALIZE mr_inf_compl_fret TO NULL
  LET m_registro_f = FALSE
  LET l_houve_erro = FALSE
  LET l_ind = 0

  WHENEVER ERROR CONTINUE
   DECLARE cq_inf_compl_fret CURSOR WITH HOLD FOR
    SELECT tipo_registro,
           processado,
           pedido,
           serie_conhec_frete,
           transportador     ,
           ordem_compra      ,
           item,
           bas_calc_ipi,
           pre_unit_nf,
           qtd_decl_nf
      FROM w_sup0552_4
     WHERE empresa           =  mr_w_sup0552_4.empresa
       AND nota_fiscal       =  mr_w_sup0552_4.nota_fiscal
       AND serie_nota_fiscal =  mr_w_sup0552_4.serie_nota_fiscal
       AND subserie_nf       =  mr_w_sup0552_4.subserie_nf
       AND espc_nota_fiscal  =  mr_w_sup0552_4.espc_nota_fiscal
       AND fornecedor        =  mr_w_sup0552_4.fornecedor
       AND tipo_registro     = 'L'
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','cq_inf_compl_fret')
     RETURN FALSE
  END IF

  WHENEVER ERROR CONTINUE
   FOREACH cq_inf_compl_fret  INTO mr_inf_compl_fret.tipo_registro          ,
                                   mr_inf_compl_fret.gerar_frete_con_como_ar,
                                   mr_inf_compl_fret.grupo_despesa_item_fr  ,
                                   mr_inf_compl_fret.reten_inss             ,
                                   mr_inf_compl_fret.recolhimento_inss      ,
                                   mr_inf_compl_fret.reten_sest_senat       ,
                                   mr_inf_compl_fret.reten_iss ,
                                   mr_inf_compl_fret.cod_tip_despesa,
                                   m_bc_recolhimento_inss_fret,
                                   m_bc_retencao_inss_fret

      IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql('FOREACH CURSOR','cq_inf_compl_fret')
         LET l_houve_erro = TRUE
         CLOSE cq_inf_compl_fret #764215#
         EXIT FOREACH
      END IF

      LET l_ind = l_ind + 1

     IF l_ind > 1 THEN
        LET m_registro_f  = TRUE
        LET l_houve_erro = TRUE
        CLOSE cq_inf_compl_fret #764215#
        EXIT FOREACH
     END IF

   END FOREACH
  FREE cq_inf_compl_fret
  WHENEVER ERROR STOP

  IF l_houve_erro = TRUE THEN
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF


 END FUNCTION

#----------------------------------------------#
 FUNCTION sup0552_reten_recol_imposto_frete() #724885 ok
#----------------------------------------------#

  IF mr_inf_compl_fret.reten_inss IS NULL OR
     mr_inf_compl_fret.reten_inss = " " THEN
     LET mr_inf_compl_fret.reten_inss = "N"
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_frete
               (empresa,
                num_conhec,
                serie_conhec,
                subserie_conhec,
                transportadora,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_frete_sup.cod_empresa,
                mr_frete_sup.num_conhec,
                mr_frete_sup.ser_conhec,
                mr_frete_sup.ssr_conhec,
                mr_frete_sup.cod_transpor,
                "RETEN INSS",
                mr_inf_compl_fret.reten_inss,
                "Indica se a retencao de INSS",
                NULL,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_FRETE/RETEN INSS')
  END IF

  IF mr_inf_compl_fret.recolhimento_inss IS NULL OR
     mr_inf_compl_fret.recolhimento_inss = " " THEN
     LET mr_inf_compl_fret.recolhimento_inss = "N"
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_frete
               (empresa,
                num_conhec,
                serie_conhec,
                subserie_conhec,
                transportadora,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_frete_sup.cod_empresa,
                mr_frete_sup.num_conhec,
                mr_frete_sup.ser_conhec,
                mr_frete_sup.ssr_conhec,
                mr_frete_sup.cod_transpor,
                "RECOLHIMENTO INSS",
                mr_inf_compl_fret.recolhimento_inss,
                "Indica se a recolhimento de INSS",
                NULL,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_FRETE/RETEN INSS')
  END IF

  IF mr_inf_compl_fret.reten_iss IS NULL OR
     mr_inf_compl_fret.reten_iss = " " THEN
     LET mr_inf_compl_fret.reten_iss = "N"
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_frete
               (empresa,
                num_conhec,
                serie_conhec,
                subserie_conhec,
                transportadora,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_frete_sup.cod_empresa,
                mr_frete_sup.num_conhec,
                mr_frete_sup.ser_conhec,
                mr_frete_sup.ssr_conhec,
                mr_frete_sup.cod_transpor,
                "RETEN ISS",
                mr_inf_compl_fret.reten_iss,
                "Indica se a retencao de ISS",
                NULL,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_FRETE/RETEN INSS')
  END IF

  IF mr_inf_compl_fret.reten_sest_senat IS NULL OR
     mr_inf_compl_fret.reten_sest_senat = " " THEN
     LET mr_inf_compl_fret.reten_sest_senat = "N"
  ELSE
     IF mr_inf_compl_fret.reten_sest_senat = '0' THEN
        LET mr_inf_compl_fret.reten_sest_senat = 'N'
     ELSE
        LET mr_inf_compl_fret.reten_sest_senat = 'S'
     END IF
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_frete
               (empresa,
                num_conhec,
                serie_conhec,
                subserie_conhec,
                transportadora,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_frete_sup.cod_empresa,
                mr_frete_sup.num_conhec,
                mr_frete_sup.ser_conhec,
                mr_frete_sup.ssr_conhec,
                mr_frete_sup.cod_transpor,
                "RETEN SEST/SENAT",
                mr_inf_compl_fret.reten_sest_senat,
                "Indica se a retencao de SEST/SENA",
                NULL,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_FRETE/RETEN INSS')
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_frete
               (empresa,
                num_conhec,
                serie_conhec,
                subserie_conhec,
                transportadora,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_frete_sup.cod_empresa,
                mr_frete_sup.num_conhec,
                mr_frete_sup.ser_conhec,
                mr_frete_sup.ssr_conhec,
                mr_frete_sup.cod_transpor,
                "bc_retencao_inss",
                NULL,
                "base calculo retencao inss",
                m_bc_retencao_inss_fret ,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_FRETE/RETEN INSS')
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_frete
               (empresa,
                num_conhec,
                serie_conhec,
                subserie_conhec,
                transportadora,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_frete_sup.cod_empresa,
                mr_frete_sup.num_conhec,
                mr_frete_sup.ser_conhec,
                mr_frete_sup.ssr_conhec,
                mr_frete_sup.cod_transpor,
                "bc_recolhimento_inss",
                NULL,
                "Base calculo recolhimento inss",
                m_bc_recolhimento_inss,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_FRETE/RETEN INSS')
  END IF

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_frete
               (empresa,
                num_conhec,
                serie_conhec,
                subserie_conhec,
                transportadora,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
         VALUES(mr_frete_sup.cod_empresa,
                mr_frete_sup.num_conhec,
                mr_frete_sup.ser_conhec,
                mr_frete_sup.ssr_conhec,
                mr_frete_sup.cod_transpor,
                "perc_reten_inss",
                NULL,
                "Percentual retencao inss",
                m_perc_reten_inss,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_FRETE/RETEN INSS')
  END IF


  WHENEVER ERROR CONTINUE
  INSERT INTO sup_par_frete
               (empresa,
                num_conhec,
                serie_conhec,
                subserie_conhec,
                transportadora,
                parametro,
                par_ind_especial,
                parametro_texto,
                parametro_val,
                parametro_dat)
       VALUES(mr_frete_sup.cod_empresa,
                mr_frete_sup.num_conhec,
                mr_frete_sup.ser_conhec,
                mr_frete_sup.ssr_conhec,
                mr_frete_sup.cod_transpor,
                "perc_reten_iss",
                NULL,
                "Percentual retencao iss",
                m_perc_reten_iss,
                NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','SUP_PAR_AR/RETEN INSS')
  END IF


 END FUNCTION


#---------------------------------------------------#
 FUNCTION sup0552_valida_grupo_despesa(l_cod_empresa,
                                       l_gru_ctr_desp) #724885
#---------------------------------------------------#
  DEFINE l_cod_empresa  LIKE grupo_ctr_desp.cod_empresa,
         l_gru_ctr_desp LIKE grupo_ctr_desp.gru_ctr_desp

  IF l_gru_ctr_desp IS NOT NULL THEN
     WHENEVER ERROR CONTINUE
       SELECT gru_ctr_desp
         FROM grupo_ctr_desp
        WHERE cod_empresa  = l_cod_empresa
          AND gru_ctr_desp = l_gru_ctr_desp
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#------------------------------------------------------#
 FUNCTION sup0552_valida_tipo_despesa(l_cod_empresa,
                                      l_cod_tip_despesa) #724885
#------------------------------------------------------#
  DEFINE l_cod_empresa     LIKE tipo_despesa.cod_empresa,
         l_cod_tip_despesa LIKE tipo_despesa.cod_tip_despesa

  IF l_cod_tip_despesa IS NOT NULL THEN
     WHENEVER ERROR CONTINUE
       SELECT cod_tip_despesa
         FROM tipo_despesa
        WHERE cod_empresa     = l_cod_empresa
          AND cod_tip_despesa = l_cod_tip_despesa
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#--------------------------------------------------------------------#
 FUNCTION sup0552_valida_cod_registro_entrada(l_cod_empresa,
                                              l_cod_registro_entrada) #724885
#--------------------------------------------------------------------#
  DEFINE l_cod_empresa          LIKE re.cod_empresa,
         l_cod_registro_entrada LIKE re.cod_regist_entrada

  IF l_cod_registro_entrada IS NOT NULL THEN
     WHENEVER ERROR CONTINUE
       SELECT cod_regist_entrada
         FROM re
        WHERE cod_empresa        = l_cod_empresa
          AND cod_regist_entrada = l_cod_registro_entrada
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        RETURN FALSE
     END IF
  END IF
  RETURN TRUE

 END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_subserie_nf_nula() #729321
#----------------------------------------#

  WHENEVER ERROR CONTINUE
   UPDATE w_sup0552_4
      SET subserie_nf = 0
    WHERE subserie_nf IS NULL
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('UPDATE','w_sup0552_4/subserie_nf')
  END IF

 END FUNCTION

#--------------------------------------------#
FUNCTION sup0552_lista_frete_consistencia(l_conta_array,
                                          l_txt_consistencia)
#--------------------------------------------#
  DEFINE l_conta_array      SMALLINT,
         l_sequencia         DECIMAL(3,0),
         l_txt_consistencia  CHAR(59)

  LET ma_array_consistencias[l_conta_array].nota_fiscal       = mr_frete_sup.num_conhec
  LET ma_array_consistencias[l_conta_array].serie_nota_fiscal = mr_frete_sup.ser_conhec
  LET ma_array_consistencias[l_conta_array].subserie_nf       = mr_frete_sup.ssr_conhec
  LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  = mr_w_sup0552_4.espc_nota_fiscal
  LET ma_array_consistencias[l_conta_array].fornecedor        = mr_frete_sup.cod_transpor
  LET ma_array_consistencias[l_conta_array].sequencia         = 0
  LET ma_array_consistencias[l_conta_array].txt_consistencia  = l_txt_consistencia

END FUNCTION

#------------------------------------------------------#
 FUNCTION sup0552_busca_tip_carga(l_conta_div,  #728008
                                  l_conta_array)
#------------------------------------------------------#
  DEFINE l_conta_div   SMALLINT,
         l_conta_array SMALLINT


  LET mr_frete_sup.tip_frete          = mr_w_sup0552_4.tip_nota_fiscal
  LET mr_frete_sup.ies_frt_contratado = 'S'

  IF mr_frete_sup.pes_vol_frete <= 8000 AND
     m_cod_unid_med_padrao <> 'M3' THEN
     LET mr_frete_sup.tip_carga = 'F'

     IF sup0552_verifica_item_parametro() = FALSE THEN
        IF mr_frete_sup.pes_vol_frete <= 1000 THEN
           LET mr_frete_sup.cod_item_tab_frete = '001000'
        ELSE
           LET mr_frete_sup.cod_item_tab_frete = '008000'
        END IF
     ELSE
        IF mr_frete_sup.pes_vol_frete <= 1000 THEN
           LET mr_frete_sup.cod_item_tab_frete = 'P-1000'
        ELSE
           LET mr_frete_sup.cod_item_tab_frete = 'P-8000'
        END IF
     END IF
  ELSE
     LET mr_frete_sup.tip_carga = 'L'
  END IF

  IF mr_frete_sup.pes_vol_frete <= 0 OR
     mr_frete_sup.pes_vol_frete IS NULL THEN
     LET l_conta_div   = l_conta_div + 1
     LET l_conta_array = l_conta_array + 1
     CALL sup0552_lista_frete_consistencia(l_conta_array,'Tab. de FRETES DE COMPRAS ativa. Valor infor. deve ser > 0')
  END IF

  IF gr_par_sup.ies_frete_compras = 'G' AND
     mr_w_sup0552_4.tip_nota_fiscal  = 'C' THEN
     IF mr_frete_sup.pes_vol_frete IS NULL OR
        mr_frete_sup.pes_vol_frete = ' ' THEN
        CALL sup0552_lista_frete_consistencia(l_conta_array,'Peso/volume do frete não informado.')
     END IF
  END IF

  RETURN l_conta_div,
         l_conta_array

 END FUNCTION

#---------------------------------------------------------------#
 FUNCTION sup0552_busca_cond_pagto_omc_emitente(l_conta_div,   #728008
                                                l_conta_array,
                                                l_transportador)
#---------------------------------------------------------------#
  DEFINE l_transportador  CHAR(15),
         l_num_cgc_cpf    LIKE fornecedor.num_cgc_cpf,
         l_cond_pagto_cap LIKE omc_emitente.cond_pagto_cap,
         l_msg            CHAR(59),
         l_conta_div      SMALLINT,
         l_conta_array    SMALLINT

  WHENEVER ERROR CONTINUE
    SELECT num_cgc_cpf
      INTO l_num_cgc_cpf
      FROM fornecedor
     WHERE cod_fornecedor   = l_transportador
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('SELECT','FORNECEDOR')
  END IF

  INITIALIZE l_cond_pagto_cap TO NULL
  WHENEVER ERROR CONTINUE
    SELECT cond_pagto_cap
      INTO l_cond_pagto_cap
      FROM omc_emitente
     WHERE num_cnpj_cpf  = l_num_cgc_cpf
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0      AND
     sqlca.sqlcode <> 100    THEN
     IF sqlca.sqlcode = -284 THEN
        LET l_conta_div   = l_conta_div + 1
        LET l_conta_array = l_conta_array + 1
        LET l_msg = 'Transp: ',l_transportador,' com CGC/CPF dupl OMC0003 - ', l_num_cgc_cpf
        CALL sup0552_lista_frete_consistencia(l_conta_array,l_msg)
     ELSE
        CALL log003_err_sql('SELECT','OMC_EMITENTE')
     END IF
  END IF

  RETURN l_conta_div, l_conta_array,l_cond_pagto_cap

 END FUNCTION

#-------------------------------------#
 FUNCTION sup0552_busca_tip_veiculo() #728008
#-------------------------------------#
  DEFINE l_tip_veiculo LIKE sup_par_frete.parametro_texto

  INITIALIZE l_tip_veiculo TO NULL

  WHENEVER ERROR CONTINUE
   DECLARE cq_sup_ctr_balanca CURSOR WITH HOLD FOR
    SELECT tip_veiculo_visual
      FROM sup_ctr_balanca
     WHERE empresa           = mr_frete_sup.cod_empresa
       AND num_docum         = mr_frete_sup.num_conhec
       AND serie_nota_fiscal = mr_frete_sup.ser_conhec
       AND subserie_nf       = mr_frete_sup.ssr_conhec
       AND fornecedor        = mr_w_sup0552_4.fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('LEITURA','CQ_SUP_CTR_BALANCA')
  END IF

  WHENEVER ERROR CONTINUE
      OPEN cq_sup_ctr_balanca
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('OPEN','CQ_SUP_CTR_BALANCA')
  END IF

  WHENEVER ERROR CONTINUE
     FETCH cq_sup_ctr_balanca INTO l_tip_veiculo
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql('FETCH','CQ_SUP_CTR_BALANCA')
  END IF

  WHENEVER ERROR CONTINUE
  CLOSE cq_sup_ctr_balanca
  FREE cq_sup_ctr_balanca
  WHENEVER ERROR STOP

  IF l_tip_veiculo IS NULL OR
     l_tip_veiculo = " " THEN
     RETURN FALSE
  ELSE
     WHENEVER ERROR CONTINUE
       INSERT INTO sup_par_frete
                   (empresa          ,
                    num_conhec       ,
                    serie_conhec     ,
                    subserie_conhec  ,
                    transportadora   ,
                    parametro        ,
                    par_ind_especial ,
                    parametro_texto  ,
                    parametro_val    ,
                    parametro_dat)
            VALUES (mr_frete_sup.cod_empresa ,
                    mr_frete_sup.num_conhec  ,
                    mr_frete_sup.ser_conhec  ,
                    mr_frete_sup.ssr_conhec  ,
                    mr_frete_sup.cod_transpor,
                    "tip_veiculo"            ,
                    NULL                     ,
                    l_tip_veiculo            ,
                    NULL                     ,
                    NULL )
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql('INSERT','SUP_PAR_FRETE')
        RETURN FALSE
     END IF

     RETURN TRUE
  END IF

 END FUNCTION

#------------------------------------------#
 FUNCTION sup0552_verifica_item_parametro() #728008
#------------------------------------------#
  DEFINE l_parametros LIKE  item_parametro.parametros

  WHENEVER ERROR CONTINUE
    SELECT item_parametro.parametros
      INTO l_parametros
      FROM item_parametro
     WHERE item_parametro.cod_empresa = mr_frete_sup.cod_empresa
       AND item_parametro.cod_item    = mr_frete_sup.cod_item_tab_frete
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0  THEN
     IF l_parametros[1,1] = 'S' THEN
        RETURN TRUE
     END IF
  END IF

  RETURN FALSE

 END FUNCTION


#-------------------------------------------------------#
 FUNCTION sup0552_inclui_dest_aviso_rec(l_tipo,
                                        l_cod_lin_prod,
                                        l_cod_lin_recei,
                                        l_cod_seg_merc,
                                        l_cod_cla_uso,
                                        l_num_conta_item)
#-------------------------------------------------------#
  DEFINE l_tipo                  CHAR(20),
         l_tot_pct               DECIMAL(6,3),
         l_houve_erro            SMALLINT,
         l_cod_lin_prod          LIKE item.cod_lin_prod,
         l_cod_lin_recei         LIKE item.cod_lin_recei,
         l_cod_seg_merc          LIKE item.cod_seg_merc,
         l_cod_cla_uso           LIKE item.cod_cla_uso,
         l_num_conta_item        LIKE item_sup.num_conta,
         l_seq                   SMALLINT,
         l_deb_dev_cli_merc_ext  LIKE dest_aviso_rec.num_conta_deb_desp,
         l_num_conta             LIKE dest_aviso_rec.num_conta_deb_desp,
         l_cod_parametro         CHAR(20),
         l_conta_merc_ext        LIKE par_sup_pad.par_txt

  LET l_houve_erro = FALSE
  LET l_tot_pct    = 0
  CALL sup0552_SUM_val_tot_decl_nf(l_tipo, TRUE, TRUE) RETURNING m_status, l_tot_pct
  IF NOT m_status THEN
     RETURN FALSE
  END IF

  IF l_tot_pct > 0 THEN
     IF l_tot_pct <> 100 THEN
        LET m_msg_erro = "Soma Registros tipo C nao totaliza 100%"
        RETURN FALSE
     ELSE

        LET sql_stmt =   " SELECT *                ",
                         "   FROM w_sup0552_4 ",
                         "  WHERE empresa           = '", mr_w_sup0552_4_it.empresa            ,"' ",
                         "    AND nota_fiscal       = '", mr_w_sup0552_4_it.nota_fiscal        ,"' ",
                         "    AND serie_nota_fiscal = '", mr_w_sup0552_4_it.serie_nota_fiscal  ,"' ",
                         "    AND subserie_nf       = '", mr_w_sup0552_4_it.subserie_nf        ,"' ",
                         "    AND fornecedor        = '", mr_w_sup0552_4_it.fornecedor         ,"' ",
                         "    AND espc_nota_fiscal  = '", mr_w_sup0552_4_it.espc_nota_fiscal   ,"' ",
                         "    AND sequencia         = '", mr_w_sup0552_4_it.sequencia          ,"' ",
                         "    AND tipo_registro     = 'C' "

        WHENEVER ERROR CONTINUE
        PREPARE var_query13 FROM sql_stmt
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log0030_processa_err_sql("PREPARE SQL","VAR_QUERY13",TRUE)
           LET m_msg_erro = log0030_mensagem_get_texto()
           RETURN FALSE
        END IF

        WHENEVER ERROR CONTINUE
        DECLARE cq_rateio_conta CURSOR FOR var_query13
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log0030_processa_err_sql("DECLARE CURSOR","CQ_RATEIO_CONTA",TRUE)
           LET m_msg_erro = log0030_mensagem_get_texto()
           RETURN FALSE
        END IF

        LET l_seq = 0

        WHENEVER ERROR CONTINUE
        FOREACH cq_rateio_conta INTO mr_w_sup0552_4_rat.*
           IF sqlca.sqlcode <> 0 THEN
              CALL log0030_processa_err_sql("FOREACH CURSOR","CQ_RATEIO_CONTA",TRUE)
              LET m_msg_erro = log0030_mensagem_get_texto()
              LET l_houve_erro = TRUE
              CLOSE cq_rateio_conta #764215#
              EXIT FOREACH
           END IF

           LET l_seq = l_seq + 1

           INITIALIZE mr_dest_aviso_rec4.* TO NULL

           LET mr_dest_aviso_rec4.cod_empresa          = mr_w_sup0552_4_rat.empresa
           LET mr_dest_aviso_rec4.num_aviso_rec        = mr_aviso_rec.num_aviso_rec
           LET mr_dest_aviso_rec4.num_seq              = mr_aviso_rec.num_seq #mr_w_sup0552_4_it.sequencia
           LET mr_dest_aviso_rec4.sequencia            = l_seq
           LET mr_dest_aviso_rec4.cod_area_negocio     = mr_w_sup0552_4_rat.cond_pagto
           LET mr_dest_aviso_rec4.cod_lin_negocio      = mr_w_sup0552_4_rat.modo_embarque
           LET mr_dest_aviso_rec4.pct_particip_comp    = mr_w_sup0552_4_rat.val_tot_decl_nf
           LET mr_dest_aviso_rec4.num_conta_deb_desp   = mr_w_sup0552_4_rat.transportador
           LET mr_dest_aviso_rec4.qtd_recebida         = 0
           LET mr_dest_aviso_rec4.ies_contagem         = "N"
           LET mr_dest_aviso_rec4.num_docum            = NULL
           LET mr_dest_aviso_rec4.cod_seg_merc         = NULL
           LET mr_dest_aviso_rec4.cod_cla_uso          = NULL

           IF mr_w_sup0552_4_rat.item IS NOT NULL THEN
              LET mr_dest_aviso_rec4.cod_secao_receb = mr_w_sup0552_4_rat.item
           ELSE
              LET mr_dest_aviso_rec4.cod_secao_receb = " "
           END IF

           IF gr_par_con.ies_contab_aen = "4" THEN

              LET mr_dest_aviso_rec4.cod_seg_merc      = mr_w_sup0552_4_rat.serie_conhec_frete
              LET mr_dest_aviso_rec4.cod_cla_uso       = mr_w_sup0552_4_rat.subserie_conh_fret

           END IF

           IF NOT sup0552_insert_dest_aviso_rec() THEN
              LET l_houve_erro = TRUE
              CLOSE cq_rateio_conta #764215#
              EXIT FOREACH
           END IF

        END FOREACH
        WHENEVER ERROR STOP
        FREE cq_rateio_conta #764215#

        IF l_houve_erro = TRUE THEN
           RETURN FALSE
        END IF
     END IF
  ELSE
     ##Início chamado 731658 ##
     ##Alterado para buscar a conta contábil para a NF de devolução, conforme é realizado
     ##no SUP3760.
     IF mr_nf_sup.ies_especie_nf = "NFD" OR m_ies_tip_entrada_nf = "5" THEN
        INITIALIZE mr_dest_aviso_rec4.* TO NULL

        LET mr_dest_aviso_rec4.cod_empresa          = mr_w_sup0552_4_it.empresa
        LET mr_dest_aviso_rec4.num_aviso_rec        = mr_aviso_rec.num_aviso_rec
        LET mr_dest_aviso_rec4.num_seq              = mr_aviso_rec.num_seq
        LET mr_dest_aviso_rec4.sequencia            = 1
        LET mr_dest_aviso_rec4.cod_area_negocio     = l_cod_lin_prod
        LET mr_dest_aviso_rec4.cod_lin_negocio      = l_cod_lin_recei
        LET mr_dest_aviso_rec4.pct_particip_comp    = 100

        IF gr_par_con.ies_contab_aen = "4" THEN
           LET mr_dest_aviso_rec4.cod_seg_merc     = l_cod_seg_merc
           LET mr_dest_aviso_rec4.cod_cla_uso      = l_cod_cla_uso
        ELSE
           LET mr_dest_aviso_rec4.cod_seg_merc     = 0
           LET mr_dest_aviso_rec4.cod_cla_uso      = 0
        END IF

        INITIALIZE l_cod_parametro TO NULL

        LET l_cod_parametro = mr_dest_aviso_rec4.cod_area_negocio USING "&&",
                              mr_dest_aviso_rec4.cod_lin_negocio  USING "&&",
                              mr_dest_aviso_rec4.cod_seg_merc     USING "&&",
                              mr_dest_aviso_rec4.cod_cla_uso      USING "&&",
                              "cta_mrc_ext"

        IF mr_nf_sup.cod_operacao[1] = "7" THEN
           INITIALIZE l_deb_dev_cli_merc_ext TO NULL
           WHENEVER ERROR CONTINUE
             SELECT par_sup_pad.par_txt
               INTO l_deb_dev_cli_merc_ext
               FROM par_sup_pad
              WHERE par_sup_pad.cod_empresa   = mr_aviso_rec.cod_empresa
                AND par_sup_pad.cod_parametro = "deb_dev_cli_merc_ext"
           WHENEVER ERROR STOP
           IF sqlca.sqlcode = 100 THEN
              INITIALIZE l_conta_merc_ext TO NULL
              WHENEVER ERROR CONTINUE
                SELECT par_sup_pad.par_txt
                  INTO l_conta_merc_ext
                  FROM par_sup_pad
                 WHERE par_sup_pad.cod_empresa   = mr_aviso_rec.cod_empresa
                   AND par_sup_pad.cod_parametro = l_cod_parametro
              WHENEVER ERROR STOP
              IF sqlca.sqlcode = 0  THEN
                 LET l_deb_dev_cli_merc_ext = l_conta_merc_ext
              END IF
           END IF

           IF l_deb_dev_cli_merc_ext IS NOT NULL AND
              l_deb_dev_cli_merc_ext <> " " THEN
              LET mr_dest_aviso_rec4.num_conta_deb_desp = l_deb_dev_cli_merc_ext
           END IF

        END IF

        IF mr_dest_aviso_rec4.num_conta_deb_desp IS NULL OR
           mr_dest_aviso_rec4.num_conta_deb_desp = " "   OR
           mr_dest_aviso_rec4.num_conta_deb_desp = "0" THEN
           CALL sup0552_busca_conta_devolucao()
              RETURNING mr_dest_aviso_rec4.num_conta_deb_desp
        END IF

        #513530
        IF (mr_nf_sup.cod_operacao = '5.503'  OR
            mr_nf_sup.cod_operacao = '6.503') AND
            m_ies_tip_entrada_nf   = "5"      THEN

            INITIALIZE l_conta_merc_ext  TO NULL

            WHENEVER ERROR CONTINUE
              SELECT par_sup_pad.par_txt
                INTO l_conta_merc_ext
                FROM par_sup_pad
               WHERE par_sup_pad.cod_empresa   = mr_aviso_rec.cod_empresa
                 AND par_sup_pad.cod_parametro = l_cod_parametro
            WHENEVER ERROR STOP
            IF sqlca.sqlcode = 100  THEN
               INITIALIZE l_conta_merc_ext TO NULL
            ELSE
              LET mr_dest_aviso_rec4.num_conta_deb_desp  = l_conta_merc_ext
            END IF
        END IF

        ### O.S. 82766 Krieger
        IF mr_dest_aviso_rec4.num_conta_deb_desp IS NULL OR
           mr_dest_aviso_rec4.num_conta_deb_desp = " "   OR
           mr_dest_aviso_rec4.num_conta_deb_desp = "0" THEN
           IF l_num_conta_item IS NULL THEN
              LET mr_dest_aviso_rec4.num_conta_deb_desp = " "
           ELSE
              LET mr_dest_aviso_rec4.num_conta_deb_desp = l_num_conta_item
           END IF
        END IF

        IF mr_dest_aviso_rec4.num_conta_deb_desp IS NULL OR
           mr_dest_aviso_rec4.num_conta_deb_desp = " "   OR
           mr_dest_aviso_rec4.num_conta_deb_desp = "0" THEN
           WHENEVER ERROR CONTINUE
             SELECT num_conta_estoque
               INTO mr_dest_aviso_rec4.num_conta_deb_desp
               FROM linha_prod
              WHERE cod_lin_prod  = mr_dest_aviso_rec4.cod_area_negocio
                AND cod_lin_recei = mr_dest_aviso_rec4.cod_lin_negocio
                AND cod_seg_merc  = mr_dest_aviso_rec4.cod_seg_merc
                AND cod_cla_uso   = mr_dest_aviso_rec4.cod_cla_uso
           WHENEVER ERROR STOP
           IF sqlca.sqlcode < 0 THEN
              CALL log0030_processa_err_sql("SELECT","LINHA_PROD",TRUE)
              LET m_msg_erro = log0030_mensagem_get_texto()
              RETURN FALSE
           END IF
        END IF

        IF mr_dest_aviso_rec4.num_conta_deb_desp IS NULL THEN
           LET mr_dest_aviso_rec4.num_conta_deb_desp = "0"
        END IF

        LET mr_dest_aviso_rec4.cod_secao_receb      = " "
        LET mr_dest_aviso_rec4.qtd_recebida         = 0
        LET mr_dest_aviso_rec4.ies_contagem         = "N"
        LET mr_dest_aviso_rec4.num_docum            = NULL

        IF NOT sup0552_insert_dest_aviso_rec() THEN
           RETURN FALSE
        END IF

        ##Fim chamado 731658 ##
     ELSE
        IF mr_w_sup0552_4_it.ordem_compra <> 0 THEN

           IF NOT sup0552_grava_dest_ordem_sup() THEN
              RETURN FALSE
           END IF
        ELSE

           INITIALIZE mr_dest_aviso_rec4.* TO NULL

           LET mr_dest_aviso_rec4.cod_empresa          = mr_w_sup0552_4_it.empresa
           LET mr_dest_aviso_rec4.num_aviso_rec        = mr_aviso_rec.num_aviso_rec
           LET mr_dest_aviso_rec4.num_seq              = mr_aviso_rec.num_seq
           LET mr_dest_aviso_rec4.sequencia            = 1
           LET mr_dest_aviso_rec4.cod_area_negocio     = l_cod_lin_prod
           LET mr_dest_aviso_rec4.cod_lin_negocio      = l_cod_lin_recei
           LET mr_dest_aviso_rec4.pct_particip_comp    = 100
           IF l_num_conta_item IS NULL THEN
              LET mr_dest_aviso_rec4.num_conta_deb_desp = " "
           ELSE
              LET mr_dest_aviso_rec4.num_conta_deb_desp = l_num_conta_item
           END IF
           LET mr_dest_aviso_rec4.cod_secao_receb      = " "
           LET mr_dest_aviso_rec4.qtd_recebida         = 0
           LET mr_dest_aviso_rec4.ies_contagem         = "N"
           LET mr_dest_aviso_rec4.num_docum            = NULL

           IF gr_par_con.ies_contab_aen = "4" THEN

              LET mr_dest_aviso_rec4.cod_seg_merc     = l_cod_seg_merc
              LET mr_dest_aviso_rec4.cod_cla_uso      = l_cod_cla_uso

           END IF

           IF NOT sup0552_insert_dest_aviso_rec() THEN
              RETURN FALSE
           END IF
        END IF
     END IF
  END IF
  RETURN TRUE

 END FUNCTION

#----------------------------------------#
 FUNCTION sup0552_busca_conta_devolucao()
#----------------------------------------#
  DEFINE l_num_conta_contab    LIKE plano_contas.num_conta,
         l_cont                SMALLINT,
         l_utiliza_nova_tabela SMALLINT

  INITIALIZE l_num_conta_contab TO NULL

  LET l_utiliza_nova_tabela = TRUE

  IF log0150_verifica_se_tabela_existe("sup_cta_devol_cli") THEN
     LET l_cont = 0
     WHENEVER ERROR CONTINUE
     SELECT COUNT(*)
       INTO l_cont
       FROM sup_cta_devol_cli
      WHERE empresa = mr_aviso_rec.cod_empresa
     WHENEVER ERROR STOP

     IF l_cont <= 0 THEN
        LET l_utiliza_nova_tabela = FALSE
     END IF
  ELSE
     LET l_utiliza_nova_tabela = FALSE
  END IF

  IF l_utiliza_nova_tabela = TRUE THEN
     WHENEVER ERROR CONTINUE
     SELECT sup_cta_devol_cli.conta_contab
       INTO l_num_conta_contab
       FROM item, sup_cta_devol_cli
      WHERE item.cod_empresa                 = mr_aviso_rec.cod_empresa
        AND item.cod_item                    = mr_aviso_rec.cod_item
        AND sup_cta_devol_cli.empresa        = mr_aviso_rec.cod_empresa
        AND sup_cta_devol_cli.linha_produto  = item.cod_lin_prod
        AND sup_cta_devol_cli.linha_receita  = item.cod_lin_recei
        AND sup_cta_devol_cli.segmto_mercado = item.cod_seg_merc
        AND sup_cta_devol_cli.classe_uso     = item.cod_cla_uso
     WHENEVER ERROR STOP
  ELSE
     WHENEVER ERROR CONTINUE
     SELECT conta_dev_clientes.cod_conta
       INTO l_num_conta_contab
       FROM item, conta_dev_clientes
      WHERE item.cod_empresa                 = mr_aviso_rec.cod_empresa
        AND item.cod_item                    = mr_aviso_rec.cod_item
        AND conta_dev_clientes.cod_lin_prod  = item.cod_lin_prod
        AND conta_dev_clientes.cod_lin_recei = item.cod_lin_recei
        AND conta_dev_clientes.cod_seg_merc  = item.cod_seg_merc
        AND conta_dev_clientes.cod_cla_uso   = item.cod_cla_uso
     WHENEVER ERROR STOP
  END IF

  RETURN l_num_conta_contab

 END FUNCTION


 #732596#
#----------------------------------------#
 FUNCTION sup0552_incl_sup_compl_nf_sup()
#----------------------------------------#
   DEFINE l_parametro_texto LIKE sup_par_fornecedor.parametro_texto,
          l_reservado       LIKE sup_compl_nf_sup.reservado

   IF m_exigir_modelo_nota_fiscal_ent = "S" THEN
      WHENEVER ERROR CONTINUE
      SELECT parametro_texto
        INTO l_parametro_texto
        FROM sup_par_fornecedor
       WHERE empresa    = 'SE'
         AND parametro  = 'modelo_nf_fornec'
         AND fornecedor = mr_nf_sup.cod_fornecedor
      WHENEVER ERROR STOP
      IF sqlca.sqlcode = 0 THEN
         WHENEVER ERROR CONTINUE
         SELECT reservado
           INTO l_reservado
           FROM sup_compl_nf_sup
          WHERE sup_compl_nf_sup.empresa       = mr_nf_sup.cod_empresa
            AND sup_compl_nf_sup.aviso_recebto = mr_nf_sup.num_aviso_rec
         WHENEVER ERROR STOP
         IF sqlca.sqlcode = NOTFOUND THEN
            LET l_reservado = ' '
            LET l_reservado[5,6]  = l_parametro_texto[1,2]
            WHENEVER ERROR CONTINUE
            INSERT INTO sup_compl_nf_sup (empresa,
                                          aviso_recebto,
                                          reservado)
                                  VALUES (mr_nf_sup.cod_empresa,
                                          mr_nf_sup.num_aviso_rec,
                                          l_reservado)

            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql('INCLUSAO','SUP_COMPL_NF_SUP')
               RETURN FALSE
            END IF
         ELSE
            LET l_reservado[5,6] =  l_parametro_texto[1,2]
            WHENEVER ERROR CONTINUE
            UPDATE sup_compl_nf_sup SET sup_compl_nf_sup.reservado = l_reservado
             WHERE sup_compl_nf_sup.empresa       = mr_nf_sup.cod_empresa
               AND sup_compl_nf_sup.aviso_recebto = mr_nf_sup.num_aviso_rec
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql('ATUALIZACAO','SUP_COMPL_NF_SUP')
               RETURN FALSE
            END IF
         END IF
      ELSE
         IF sqlca.sqlcode <> NOTFOUND THEN
            CALL log003_err_sql('LEITURA','SUP_PAR_FORNECEDOR')
            RETURN FALSE
         END IF
      END IF
   END IF

   IF m_exigir_modelo_nota_fiscal_ent = "D" THEN
      WHENEVER ERROR CONTINUE
        SELECT par_txt
          INTO m_modelo_nf_param
          FROM par_sup_pad
         WHERE par_sup_pad.cod_empresa   = mr_nf_sup.cod_empresa
           AND par_sup_pad.cod_parametro = "modelo_nf"
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 THEN
         LET m_modelo_nf_param = " "
      END IF
      IF sqlca.sqlcode = 0 THEN
         WHENEVER ERROR CONTINUE
         SELECT reservado
           INTO l_reservado
           FROM sup_compl_nf_sup
          WHERE sup_compl_nf_sup.empresa       = mr_nf_sup.cod_empresa
            AND sup_compl_nf_sup.aviso_recebto = mr_nf_sup.num_aviso_rec
         WHENEVER ERROR STOP
         IF sqlca.sqlcode = NOTFOUND THEN
            LET l_reservado = ' '
            LET l_reservado[5,6]  = m_modelo_nf_param[1,2]
            WHENEVER ERROR CONTINUE
            INSERT INTO sup_compl_nf_sup (empresa,
                                          aviso_recebto,
                                          reservado)
                                  VALUES (mr_nf_sup.cod_empresa,
                                          mr_nf_sup.num_aviso_rec,
                                          l_reservado)

            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql('INCLUSAO','SUP_COMPL_NF_SUP')
               RETURN FALSE
            END IF
         ELSE
            LET l_reservado[5,6] =  m_modelo_nf_param[1,2]
            WHENEVER ERROR CONTINUE
            UPDATE sup_compl_nf_sup SET sup_compl_nf_sup.reservado = l_reservado
             WHERE sup_compl_nf_sup.empresa       = mr_nf_sup.cod_empresa
               AND sup_compl_nf_sup.aviso_recebto = mr_nf_sup.num_aviso_rec
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql('ATUALIZACAO','SUP_COMPL_NF_SUP')
               RETURN FALSE
            END IF
         END IF
      ELSE
         IF sqlca.sqlcode <> NOTFOUND THEN
            CALL log003_err_sql('LEITURA','SUP_PAR_FORNECEDOR')
            RETURN FALSE
         END IF
      END IF
   END IF

   RETURN TRUE

 END FUNCTION
 #---fim--- 732596#

#---------------------------------------------#
 FUNCTION sup0552_ies_utiliza_nfe(l_fornecedor)
#---------------------------------------------#
  DEFINE  l_fornecedor        LIKE fornecedor.cod_fornecedor,
          l_ies_utiliza_nfe   CHAR(01)

 INITIALIZE l_ies_utiliza_nfe TO NULL
 WHENEVER ERROR CONTINUE
 SELECT parametro_booleano
   INTO l_ies_utiliza_nfe
   FROM sup_par_fornecedor
  WHERE empresa    = 'SE'
    AND fornecedor = l_fornecedor
    AND parametro  = "ies_utiliza_NFe"
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    LET l_ies_utiliza_nfe = "N"
 END IF

 IF l_ies_utiliza_nfe IS NULL THEN
    LET l_ies_utiliza_nfe = "N"
 END IF

 RETURN l_ies_utiliza_nfe
 END FUNCTION

#-------------------------------#
 FUNCTION sup0552_job(l_rotina)
#-------------------------------#
 DEFINE l_rotina           CHAR(06),
        l_status           SMALLINT


  IF LOG_initAPP("SUPRIMEN") > 0 THEN
     RETURN 1 #Falha na permissão para executar a rotina.
  END IF

  CALL JOB_get_parametro_gatilho_tarefa(1,0)
     RETURNING l_status, p_cod_empresa

  CALL JOB_get_parametro_gatilho_tarefa(2,0)
     RETURNING l_status, p_user

  CALL JOB_setCompany(p_cod_empresa)
  CALL JOB_setUser(p_user)


  IF p_cod_empresa IS NOT NULL AND p_cod_empresa <> " " THEN
     LET m_import_auto   = FALSE

     IF find4GLFunction('supy75_verifica_cliente_859') THEN
        IF supy75_verifica_cliente_859() THEN
           LET m_import_auto = TRUE
        END IF
     END IF

     LET m_arg           = TRUE
     LET m_eh_background = TRUE

     CALL sup0552_controle()
  ELSE
     CALL JOB_outputlog("Código da empresa não parametrizado na rotina de JOB")
     RETURN 1
  END IF

  RETURN 0

 END FUNCTION

#---------------------------------------------------------------------------------------------#
 FUNCTION sup0552_verifica_item_arquivo(l_conta_div, l_conta_array, l_conta_itens_erro, l_tipo)
#---------------------------------------------------------------------------------------------#

 DEFINE l_conta_div        INTEGER,
        l_conta_array      INTEGER,
        l_conta_itens_erro INTEGER,
        l_tipo             CHAR(02)

 IF l_tipo = 'OC' THEN
    WHENEVER ERROR CONTINUE
    SELECT ordem_sup.cod_item
      FROM ordem_sup
     WHERE ordem_sup.cod_empresa      = mr_w_sup0552_4_it.empresa
       AND ordem_sup.num_oc           = mr_w_sup0552_4_it.ordem_compra
       AND ordem_sup.cod_item         = mr_w_sup0552_4_it.item
       AND ordem_sup.ies_versao_atual = "S"
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       LET l_conta_div        = l_conta_div + 1
       LET l_conta_array      = l_conta_array + 1
       LET ma_array_consistencias[l_conta_array].nota_fiscal       =
           mr_w_sup0552_4_it.nota_fiscal
       LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
           mr_w_sup0552_4_it.serie_nota_fiscal
       LET ma_array_consistencias[l_conta_array].subserie_nf       =
           mr_w_sup0552_4_it.subserie_nf
       LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
           mr_w_sup0552_4_it.espc_nota_fiscal
       LET ma_array_consistencias[l_conta_array].fornecedor        =
           mr_w_sup0552_4_it.fornecedor
       LET ma_array_consistencias[l_conta_array].sequencia         =
           mr_w_sup0552_4_it.sequencia
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
           "ITEM ",mr_w_sup0552_4_it.item CLIPPED," NAO E O MESMO DA OC."
       LET l_conta_itens_erro = l_conta_itens_erro + 1
       LET m_houve_nc_nf = TRUE
    END IF
 ELSE
   WHENEVER ERROR CONTINUE
     SELECT ordem_sup.cod_item
       FROM ordem_sup
      WHERE ordem_sup.cod_empresa      = mr_w_sup0552_4_it.empresa
        AND ordem_sup.num_pedido       = mr_w_sup0552_4_it.pedido
        AND ordem_sup.cod_item         = mr_w_sup0552_4_it.item
        AND ordem_sup.ies_versao_atual = "S"
   WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       LET l_conta_div        = l_conta_div + 1
       LET l_conta_array      = l_conta_array + 1
       LET ma_array_consistencias[l_conta_array].nota_fiscal       =
           mr_w_sup0552_4_it.nota_fiscal
       LET ma_array_consistencias[l_conta_array].serie_nota_fiscal =
           mr_w_sup0552_4_it.serie_nota_fiscal
       LET ma_array_consistencias[l_conta_array].subserie_nf       =
           mr_w_sup0552_4_it.subserie_nf
       LET ma_array_consistencias[l_conta_array].espc_nota_fiscal  =
           mr_w_sup0552_4_it.espc_nota_fiscal
       LET ma_array_consistencias[l_conta_array].fornecedor        =
           mr_w_sup0552_4_it.fornecedor
       LET ma_array_consistencias[l_conta_array].sequencia         =
           mr_w_sup0552_4_it.sequencia
       LET ma_array_consistencias[l_conta_array].txt_consistencia  =
           "ITEM ",mr_w_sup0552_4_it.item CLIPPED," NAO E O MESMO DO PEDIDO DE COMPRA."
       LET l_conta_itens_erro = l_conta_itens_erro + 1
       LET ma_array_consistencias[l_conta_array].cod_campo = "I015"
       LET m_houve_nc_nf = TRUE
    END IF
 END IF

 RETURN l_conta_div, l_conta_array, l_conta_itens_erro
 END FUNCTION



#-------------------------------------------#
FUNCTION sup0552_insere_erro_transito_nf(lr_nf_sup)
#-------------------------------------------#
DEFINE lr_nf_sup    RECORD LIKE nf_sup.*

 WHENEVER ERROR CONTINUE
 DELETE FROM nf_sup_erro
 WHERE empresa       = lr_nf_sup.cod_empresa
   AND num_aviso_rec = lr_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP

 WHENEVER ERROR CONTINUE
 INSERT INTO nf_sup_erro (empresa,
                          num_aviso_rec,
                          num_seq,
                          des_pendencia_item,
                          ies_origem_erro,
                          ies_erro_grave )
                 VALUES ( lr_nf_sup.cod_empresa,
                          lr_nf_sup.num_aviso_rec,
                          0,
                          'Material em transito',
                          '1',
                          'S')
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("INCLUSAO","NF_SUP_ERRO_1")
 END IF


END FUNCTION


#-------------------------------#
 FUNCTION sup0552_version_info()
#-------------------------------#

  RETURN "$Archive: /logix10R2/suprimentos/suprimentos/programas/sup0552.4gl $|$Revision: 38 $|$Date: 21/03/11 15:18 $|$Modtime: 17/03/11 18:18 $" #Informações do controle de versão do SourceSafe - Não remover esta linha (FRAMEWORK)

 END FUNCTION
