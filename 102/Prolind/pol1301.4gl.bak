#-------------------------------------------------------------------#
# SISTEMA.: LOGIX                                                   #
# PROGRAMA: pol1301                                                 #
# OBJETIVO: APONTAMENTO DE PRODUÇÃO POR OPERAÇÃO                    #
# AUTOR...: IVO                                                     #
# DATA....: 06/11/15                                                #
#-------------------------------------------------------------------#

DATABASE logix

GLOBALS
    DEFINE p_cod_empresa   LIKE empresa.cod_empresa,
           p_user          LIKE usuarios.cod_usuario,
           p_status        SMALLINT,
           p_den_empresa   VARCHAR(36),
           p_versao        CHAR(18)
END GLOBALS

DEFINE m_dialog          VARCHAR(10),
       m_statusbar       VARCHAR(10),
       m_cent_trab       VARCHAR(10),
       m_cod_operac      VARCHAR(10),
       m_datini          VARCHAR(10),
       m_datfim          VARCHAR(10),
       m_dat_pesquisa    VARCHAR(10),
       m_semana          VARCHAR(10),
       m_ordem           VARCHAR(10),
       m_docum           VARCHAR(10),
       m_ies_data        VARCHAR(10),
       m_lupa_cent_trab  VARCHAR(10),
       m_lupa_operac     VARCHAR(10),
       m_lupa_cliente    VARCHAR(10),
       m_zoom_cent_trab  VARCHAR(10),
       m_zoom_operac     VARCHAR(10),       
       m_zoom_item       VARCHAR(10),       
       m_browse          VARCHAR(10),
       m_bz_item         VARCHAR(10),
       m_bz_familia      VARCHAR(10),
       m_janela          VARCHAR(10),
       m_bar_mem         VARCHAR(10)


DEFINE m_ies_info        SMALLINT,
       m_ies_mod         SMALLINT,
       m_count           INTEGER,
       m_msg             VARCHAR(150),
       m_ind             INTEGER,
       m_checa_linha     SMALLINT,
       m_data            DATE,
       m_qtd_linha       INTEGER

DEFINE m_saldo          LIKE ord_oper.qtd_boas,
       m_qtd_apont      LIKE ord_oper.qtd_boas,
       m_den_item       LIKE item.den_item

DEFINE mr_dados          RECORD
       cod_empresa       CHAR(02),
       ano               CHAR(04),
       mes               CHAR(02),
       semana            DECIMAL(2,0),       
       cod_item          CHAR(15),
       den_item          CHAR(18),
       num_ordem         DECIMAL(9,0),
       num_docum         CHAR(10),
       cod_operac        CHAR(05),
       cod_cent_trab     CHAR(05),
       ies_oper_final    CHAR(01),
       num_seq_operac    DECIMAL(3,0),
       qtd_planejada     DECIMAL(6,0),
       qtd_boas          DECIMAL(6,0),
       qtd_refugo        DECIMAL(6,0),
       qtd_sucata        DECIMAL(6,0),
       qtd_saldo         DECIMAL(6,0),
       data              DATE,
       item_sucata       CHAR(15),
       motivo            CHAR(40)
END RECORD
       
DEFINE mr_parametro      RECORD
       cod_cent_trab     CHAR(05),
       den_cent_trab     CHAR(30),
       cod_operac        CHAR(05),
       den_operac        CHAR(30),
       num_ordem         DECIMAL(9,0),
       num_docum         CHAR(10),
       num_semana        DECIMAL(2,0),
       dat_ini           DATE,
       dat_fim           DATE,
       dat_pesquisa      CHAR(01)      
END RECORD

#ARRAY que armazenará os dados da grade

DEFINE ma_operacao     ARRAY[5000] OF RECORD
       cod_empresa       char(02),
       ano               CHAR(04),
       mes               CHAR(02),
       semana            DECIMAL(2,0),
       cod_item          CHAR(15),
       den_item          CHAR(18),
       num_ordem         DECIMAL(9,0),
       num_docum         CHAR(10),
       cod_operac        CHAR(05),
       cod_cent_trab     CHAR(05),
       ies_oper_final    CHAR(01),
       num_seq_operac    DECIMAL(3,0),
       qtd_planejada     DECIMAL(6,0),
       qtd_boas          DECIMAL(6,0),
       qtd_refugo        DECIMAL(6,0),
       qtd_sucata        DECIMAL(6,0),
       qtd_saldo         DECIMAL(6,0),
       data              DATE,
       item_sucata       CHAR(15),
       motivo            CHAR(40)
       
END RECORD

DEFINE ma_item           ARRAY[50] OF RECORD
       cod_item          LIKE item.cod_item,
       den_item          LIKE item.den_item
END RECORD

DEFINE ma_familia        ARRAY[50] OF RECORD
       cod_familia       LIKE familia.cod_familia,
       den_familia       LIKE familia.den_familia
END RECORD

#-----------------#
FUNCTION pol1301()#
#-----------------#
          
   IF LOG_initApp("PADRAO") <> 0 THEN
      RETURN
   END IF

   #CALL LOG_connectDatabase("DEFAULT")

   WHENEVER ANY ERROR CONTINUE

   LET p_versao = "pol1301-12.00.00  "
   CALL func002_versao_prg(p_versao)
    
   CALL pol1301_menu()
    
END FUNCTION

#----------------------#
FUNCTION pol1301_menu()#
#----------------------#

    DEFINE l_menubar     VARCHAR(10),
           l_panel       VARCHAR(10),
           l_pesquisa    VARCHAR(10)
    
    CALL pol1301_limpa_campos()

    LET m_ies_info = FALSE
    LET m_ies_mod = FALSE

       #Criação da janela do programa
    LET m_dialog = _ADVPL_create_component(NULL,"LDIALOG")
    CALL _ADVPL_set_property(m_dialog,"SIZE",640,480)
    CALL _ADVPL_set_property(m_dialog,"TITLE","APONTAMENTO POR OPERAÇÃO")

       #Criação da barra de status
    LET m_statusbar = _ADVPL_create_component(NULL,"LSTATUSBAR",m_dialog)

       #Criação da barra de menu
    LET l_menubar = _ADVPL_create_component(NULL,"LMENUBAR",m_dialog)
    CALL _ADVPL_set_property(l_menubar,"HELP_VISIBLE",FALSE)

       #Criação do botão informar
    LET l_pesquisa = _ADVPL_create_component(NULL,"LFINDBUTTON",l_menubar)
    CALL _ADVPL_set_property(l_pesquisa,"EVENT","pol1301_pesquisar")
    CALL _ADVPL_set_property(l_pesquisa,"CONFIRM_EVENT","pol1301_confirmar")
    CALL _ADVPL_set_property(l_pesquisa,"CANCEL_EVENT","pol1301_cancelar")

       #Criação do botão sair
    CALL _ADVPL_create_component(NULL,"LQUITBUTTON",l_menubar)

    {#Criação de um painel, para organizar os campos de pesquisa.    
    LET l_panel = _ADVPL_create_component(NULL,"LPANEL",m_dialog)
    CALL _ADVPL_set_property(l_panel,"ALIGN","CENTER")}

    #Chama FUNCTION para criação dos campos
    CALL pol1301_cria_campos(m_dialog)

    CALL pol1301_ativa_desativa(FALSE)

       #Exibe a janela do programa
    CALL _ADVPL_set_property(m_dialog,"ACTIVATE",TRUE)

END FUNCTION

#-------------------------------------#
FUNCTION pol1301_cria_campos(l_dialog)#
#-------------------------------------#

    DEFINE l_dialog          VARCHAR(10),
           l_layout          VARCHAR(10),
           l_den_cent_trab   VARCHAR(10),
           l_den_operac      VARCHAR(10),           
           l_panel_esquerdo  VARCHAR(10),
           l_panel_centro    VARCHAR(10),
           l_panel_dados     VARCHAR(10),
           l_panel_familia   VARCHAR(10),
           l_panel_item      VARCHAR(10),
           l_tabcolumn       VARCHAR(10),
           l_label           VARCHAR(10)

    #criação de painel da esquerda utilizado como margem esquerda
    LET l_panel_esquerdo = _ADVPL_create_component(NULL,"LPANEL",l_dialog)
    CALL _ADVPL_set_property(l_panel_esquerdo,"ALIGN","LEFT")
    CALL _ADVPL_set_property(l_panel_esquerdo,"WIDTH",600)

    LET l_panel_dados = _ADVPL_create_component(NULL,"LPANEL",l_panel_esquerdo)
    CALL _ADVPL_set_property(l_panel_dados,"ALIGN","TOP")
    CALL _ADVPL_set_property(l_panel_dados,"WIDTH",170)
    
    #criação um LLAYOUT c/ 4 colunas, para distribuiçao dos campos com popup 
    
    LET l_layout = _ADVPL_create_component(NULL,"LLAYOUTMANAGER",l_panel_dados)
    CALL _ADVPL_set_property(l_layout,"COLUMNS_COUNT",4)

    #criação do campo para entrada do centro de trabalho
    LET l_label = _ADVPL_create_component(NULL,"LLABEL",l_layout)
    CALL _ADVPL_set_property(l_label,"TEXT","Centro de trabalho:")    

    LET m_cent_trab = _ADVPL_create_component(NULL,"LTEXTFIELD",l_layout)
    CALL _ADVPL_set_property(m_cent_trab,"LENGTH",5)
    CALL _ADVPL_set_property(m_cent_trab,"VARIABLE",mr_parametro,"cod_cent_trab")
    CALL _ADVPL_set_property(m_cent_trab,"PICTURE","@!")
    #FUNCTION para validação da entrada. Se retornar TRUE, a entrada será válida. Se 
    #retornar FALSE, o usuário terá que re-digitar a informação
    CALL _ADVPL_set_property(m_cent_trab,"VALID","pol1301_checa_cent_traba")

    #criação/definição do icone do zoom do centro de trabalho
    LET m_lupa_cent_trab = _ADVPL_create_component(NULL,"LIMAGEBUTTON",l_layout)
    CALL _ADVPL_set_property(m_lupa_cent_trab,"IMAGE","BTPESQ")
    CALL _ADVPL_set_property(m_lupa_cent_trab,"SIZE",24,20)
    CALL _ADVPL_set_property(m_lupa_cent_trab,"CLICK_EVENT","pol1301_zoom_cent_trab")

    #criação/definição do campos para exibir o nome do centro de tabalho
    LET l_den_cent_trab = _ADVPL_create_component(NULL,"LTEXTFIELD",l_layout)
    CALL _ADVPL_set_property(l_den_cent_trab,"LENGTH",30) 
    CALL _ADVPL_set_property(l_den_cent_trab,"EDITABLE",FALSE) #não permite edição do conteúdo
    CALL _ADVPL_set_property(l_den_cent_trab,"VARIABLE",mr_parametro,"den_cent_trab")

    CALL _ADVPL_set_property(l_layout,"ADD_EMPTY_ROW")

    #criação do campo para entrada da operação
    LET l_label = _ADVPL_create_component(NULL,"LLABEL",l_layout)
    CALL _ADVPL_set_property(l_label,"TEXT","Operação:")    

    LET m_cod_operac = _ADVPL_create_component(NULL,"LTEXTFIELD",l_layout)
    CALL _ADVPL_set_property(m_cod_operac,"VARIABLE",mr_parametro,"cod_operac")
    CALL _ADVPL_set_property(m_cod_operac,"LENGTH",5)
    CALL _ADVPL_set_property(m_cod_operac,"PICTURE","@!")
    CALL _ADVPL_set_property(m_cod_operac,"VALID","pol1301_checa_operacao")

    #criação/definição do icone do zoom
    LET m_lupa_operac = _ADVPL_create_component(NULL,"LIMAGEBUTTON",l_layout)
    CALL _ADVPL_set_property(m_lupa_operac,"IMAGE","BTPESQ")
    CALL _ADVPL_set_property(m_lupa_operac,"SIZE",24,20)
    CALL _ADVPL_set_property(m_lupa_operac,"CLICK_EVENT","pol1301_zoom_operacao")

    #criação/definição do campos para exibir o nome da operação
    LET l_den_operac = _ADVPL_create_component(NULL,"LTEXTFIELD",l_layout)
    CALL _ADVPL_set_property(l_den_operac,"LENGTH",30) 
    CALL _ADVPL_set_property(l_den_operac,"EDITABLE",FALSE) #não permite edição do conteúdo
    CALL _ADVPL_set_property(l_den_operac,"VARIABLE",mr_parametro,"den_operac")

    CALL _ADVPL_set_property(l_layout,"ADD_EMPTY_ROW")

    #criação do campo para entrada do numero do documento
    LET l_label = _ADVPL_create_component(NULL,"LLABEL",l_layout)
    CALL _ADVPL_set_property(l_label,"TEXT","Documento:")    
    
    LET m_docum = _ADVPL_create_component(NULL,"LTEXTFIELD",l_layout)
    CALL _ADVPL_set_property(m_docum,"VARIABLE",mr_parametro,"num_docum")
    CALL _ADVPL_set_property(m_docum,"LENGTH",10)
    CALL _ADVPL_set_property(m_docum,"PICTURE","@!")
    CALL _ADVPL_set_property(m_docum,"VALID","pol1301_checa_docum")

    #criação do campo para entrada do numero da ordem
    LET l_label = _ADVPL_create_component(NULL,"LLABEL",l_layout)
    CALL _ADVPL_set_property(l_label,"TEXT","Ordem:")    
    
    LET m_ordem = _ADVPL_create_component(NULL,"LNUMERICFIELD",l_layout)
    CALL _ADVPL_set_property(m_ordem,"VARIABLE",mr_parametro,"num_ordem")
    CALL _ADVPL_set_property(m_ordem,"LENGTH",9,0)
    CALL _ADVPL_set_property(m_ordem,"PICTURE","@E #########")
    CALL _ADVPL_set_property(m_ordem,"VALID","pol1301_checa_ordem")

    CALL _ADVPL_set_property(l_layout,"ADD_EMPTY_ROW")
    
    #criação do campo para entrada do periodo p/ pesquisa
    LET l_label = _ADVPL_create_component(NULL,"LLABEL",l_layout)
    CALL _ADVPL_set_property(l_label,"TEXT","Data de:")
    
    LET m_datini = _ADVPL_create_component(NULL,"LDATEFIELD",l_layout)
    CALL _ADVPL_set_property(m_datini,"VARIABLE",mr_parametro,"dat_ini")

    LET l_label = _ADVPL_create_component(NULL,"LLABEL",l_layout)
    CALL _ADVPL_set_property(l_label,"TEXT","  Até:")
    
    LET m_datfim = _ADVPL_create_component(NULL,"LDATEFIELD",l_layout)
    CALL _ADVPL_set_property(m_datfim,"VARIABLE",mr_parametro,"dat_fim")

    CALL _ADVPL_set_property(l_layout,"ADD_EMPTY_ROW")

    LET l_label = _ADVPL_create_component(NULL,"LLABEL",l_layout)
    CALL _ADVPL_set_property(l_label,"TEXT","Dat p/ pesquisa:")
    
    LET m_dat_pesquisa = _ADVPL_create_component(NULL,"LCOMBOBOX",l_layout)    
    CALL _ADVPL_set_property(m_dat_pesquisa,"ADD_ITEM","A","Abertura")     
    CALL _ADVPL_set_property(m_dat_pesquisa,"ADD_ITEM","E","Entrega")     
    CALL _ADVPL_set_property(m_dat_pesquisa,"ADD_ITEM","L","Liberação")     
    CALL _ADVPL_set_property(m_dat_pesquisa,"VARIABLE",mr_parametro,"dat_pesquisa")

    #criação do campo para entrada do numero da semana
    LET l_label = _ADVPL_create_component(NULL,"LLABEL",l_layout)
    CALL _ADVPL_set_property(l_label,"TEXT","Semana:")
    
    LET m_semana = _ADVPL_create_component(NULL,"LNUMERICFIELD",l_layout)
    CALL _ADVPL_set_property(m_semana,"VARIABLE",mr_parametro,"num_semana")
    CALL _ADVPL_set_property(m_semana,"LENGTH",2,0)
    CALL _ADVPL_set_property(m_semana,"PICTURE","@E ##")

    # criação do painel para entrada das familias
    
    LET l_panel_familia = _ADVPL_create_component(NULL,"LPANEL",l_panel_esquerdo)
    CALL _ADVPL_set_property(l_panel_familia,"ALIGN","BOTTOM")
    CALL _ADVPL_set_property(l_panel_familia,"WIDTH",130)

    LET l_layout = _ADVPL_create_component(NULL,"LLAYOUTMANAGER",l_panel_familia)
    CALL _ADVPL_set_property(l_layout,"COLUMNS_COUNT",1) #número de colunas
    CALL _ADVPL_set_property(l_layout,"EXPANSIBLE",TRUE) 
    
    LET m_bz_familia = _ADVPL_create_component(NULL,"LBROWSEEX",l_layout)
    CALL _ADVPL_set_property(m_bz_familia,"ALIGN","CENTER")
    
    CALL _ADVPL_set_property(m_bz_familia,"AFTER_ROW_EVENT","pol1301_row_familia")
    
    # código da familia

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_bz_familia)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Familia")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",TRUE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",50)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_COMPONENT","LTEXTFIELD")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","LENGTH",5)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","PICTURE","@!")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","VALID","pol1301_checa_familia")
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","cod_familia")

    # zoom da familia
    
    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_bz_familia)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER"," ")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",TRUE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",20)
    CALL _ADVPL_set_property(l_tabcolumn,"NO_VARIABLE")
    CALL _ADVPL_set_property(l_tabcolumn,"IMAGE_RENDERER","BTPESQ")
    CALL _ADVPL_set_property(l_tabcolumn,"BEFORE_EDIT_EVENT","pol1301_zoom_br_familia")

    #descrição da familia
    
    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_bz_familia)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Descrição da familia")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","den_familia")

    CALL _ADVPL_set_property(m_bz_familia,"SET_ROWS",ma_familia,1)

 
     LET l_panel_centro = _ADVPL_create_component(NULL,"LPANEL",l_dialog)
     CALL _ADVPL_set_property(l_panel_centro,"ALIGN","CENTER")
 
     LET l_panel_item = _ADVPL_create_component(NULL,"LPANEL",l_panel_centro)
     CALL _ADVPL_set_property(l_panel_item,"ALIGN","BOTTOM")
     #CALL _ADVPL_set_property(l_panel_item,"HEIGHT",480)

 
 
    LET l_layout = _ADVPL_create_component(NULL,"LLAYOUTMANAGER",l_panel_item)
    CALL _ADVPL_set_property(l_layout,"COLUMNS_COUNT",1) #número de colunas
    CALL _ADVPL_set_property(l_layout,"EXPANSIBLE",TRUE) 
    
    LET m_bz_item = _ADVPL_create_component(NULL,"LBROWSEEX",l_layout)
    CALL _ADVPL_set_property(m_bz_item,"ALIGN","CENTER")
    
    CALL _ADVPL_set_property(m_bz_item,"AFTER_ROW_EVENT","pol1301_row_item")
    
    # código do item

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_bz_item)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Item")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",TRUE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",100)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_COMPONENT","LTEXTFIELD")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","LENGTH",15)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","PICTURE","@!")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","VALID","pol1301_checa_item")
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","cod_item")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_bz_item)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER"," ")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",TRUE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",20)
    CALL _ADVPL_set_property(l_tabcolumn,"NO_VARIABLE")
    CALL _ADVPL_set_property(l_tabcolumn,"IMAGE_RENDERER","BTPESQ")
    CALL _ADVPL_set_property(l_tabcolumn,"BEFORE_EDIT_EVENT","pol1301_zoom_br_item")

    #descrição do item
    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_bz_item)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Descrição do item")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","den_item")

    CALL _ADVPL_set_property(m_bz_item,"SET_ROWS",ma_item,1)
 

END FUNCTION


#habilita/desabilita os campos de tela

#----------------------------------------#
FUNCTION pol1301_ativa_desativa(l_status)#
#----------------------------------------#

   DEFINE l_status SMALLINT
    
   CALL _ADVPL_set_property(m_cent_trab,"EDITABLE",l_status)
   CALL _ADVPL_set_property(m_lupa_cent_trab,"EDITABLE",l_status)
   CALL _ADVPL_set_property(m_cod_operac,"EDITABLE",l_status)
   CALL _ADVPL_set_property(m_lupa_operac,"EDITABLE",l_status)
   CALL _ADVPL_set_property(m_docum,"EDITABLE",l_status)
   CALL _ADVPL_set_property(m_ordem,"EDITABLE",l_status)
   CALL _ADVPL_set_property(m_datini,"EDITABLE",l_status)
   CALL _ADVPL_set_property(m_datfim,"EDITABLE",l_status)
   CALL _ADVPL_set_property(m_dat_pesquisa,"EDITABLE",l_status)
   CALL _ADVPL_set_property(m_semana,"EDITABLE",l_status)
   CALL _ADVPL_set_property(m_bz_item,"EDITABLE",l_status)

END FUNCTION

#---------------------------#
FUNCTION pol1301_pesquisar()#
#---------------------------#

   SELECT COUNT(*)
     INTO m_count
     FROM pol1301_1054
    WHERE cod_empresa = p_cod_empresa
   
   IF m_count > 0 THEN
      LET m_msg = 'Sua ultima pesquisa não foi apontada\n',
                  'e está salva. Deseja reutilizá-la?'
      IF LOG_question(m_msg) THEN
         CALL pol1301_sel_operacao() RETURNING p_status
         RETURN FALSE
      END IF
      DELETE FROM pol1301_1054 WHERE cod_empresa = p_cod_empresa
   END IF
   
   CALL pol1301_ativa_desativa(TRUE)
   CALL pol1301_limpa_campos()
   
   LET m_ies_info = FALSE
   LET m_ies_mod = FALSE
   
   RETURN TRUE 
    
END FUNCTION

#-----------------------------#
FUNCTION pol1301_limpa_campos()
#-----------------------------#

   INITIALIZE mr_parametro.* TO NULL
    
END FUNCTION

#----------------------------------#
FUNCTION pol1301_checa_cent_traba()#
#----------------------------------#

   CALL _ADVPL_set_property(m_statusbar,"CLEAR_TEXT")
   
   INITIALIZE mr_parametro.den_cent_trab TO NULL
   
   IF mr_parametro.cod_cent_trab IS NULL THEN
      RETURN TRUE
   END IF
   
   SELECT den_cent_trab
     INTO mr_parametro.den_cent_trab
     FROM cent_trabalho
    WHERE cod_empresa = p_cod_empresa
      AND cod_cent_trab = mr_parametro.cod_cent_trab
   
   IF STATUS = 100 THEN
      CALL _ADVPL_set_property(m_statusbar,"ERROR_TEXT",
             "Centro de trabalho inexistente.")
      RETURN FALSE
   END IF

   IF STATUS <> 0 THEN
      CALL log003_err_sql('SELECT','cent_trabalho')
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION

#--------------------------------#
FUNCTION pol1301_zoom_cent_trab()#
#--------------------------------#

    DEFINE l_cod_cent_trab       LIKE cent_trabalho.cod_cent_trab,
           l_den_cent_trab       LIKE cent_trabalho.den_cent_trab
    
    IF  m_zoom_cent_trab IS NULL THEN
        LET m_zoom_cent_trab = _ADVPL_create_component(NULL,"LZOOMMETADATA")
        CALL _ADVPL_set_property(m_zoom_cent_trab,"ZOOM","zoom_cent_trabalho")
    END IF
    
    #exibe a janela do zoom
    CALL _ADVPL_get_property(m_zoom_cent_trab,"ACTIVATE")
    
    #obtém o código e nome do ct da linha atual da grade de zoom
    LET l_cod_cent_trab = _ADVPL_get_property(m_zoom_cent_trab,"RETURN_BY_TABLE_COLUMN","cent_trabalho","cod_cent_trab")
    LET l_den_cent_trab = _ADVPL_get_property(m_zoom_cent_trab,"RETURN_BY_TABLE_COLUMN","cent_trabalho","den_cent_trab")

    IF  l_cod_cent_trab IS NOT NULL THEN
        LET mr_parametro.cod_cent_trab = l_cod_cent_trab
        LET mr_parametro.den_cent_trab = l_den_cent_trab
    END IF

END FUNCTION
      
#--------------------------------#
FUNCTION pol1301_checa_operacao()#
#--------------------------------#

   CALL _ADVPL_set_property(m_statusbar,"CLEAR_TEXT")
   
   INITIALIZE mr_parametro.den_operac TO NULL

   IF mr_parametro.cod_operac IS NULL THEN
      RETURN TRUE
   END IF

   SELECT den_operac
     INTO mr_parametro.den_operac
     FROM operacao
    WHERE cod_empresa = p_cod_empresa
      AND cod_operac = mr_parametro.cod_operac
   
   IF STATUS = 100 THEN
      CALL _ADVPL_set_property(m_statusbar,"ERROR_TEXT",
             "Operação inexistente.")
      RETURN FALSE
   END IF

   IF STATUS <> 0 THEN
      CALL log003_err_sql('SELECT','operacao')
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION

#-------------------------------#
FUNCTION pol1301_zoom_operacao()#
#-------------------------------#

    DEFINE l_cod_operac       LIKE operacao.cod_operac,
           l_den_operac       LIKE operacao.den_operac
    
    IF  m_zoom_operac IS NULL THEN
        LET m_zoom_operac = _ADVPL_create_component(NULL,"LZOOMMETADATA")
        CALL _ADVPL_set_property(m_zoom_operac,"ZOOM","zoom_operacao")
    END IF
    
    CALL _ADVPL_get_property(m_zoom_operac,"ACTIVATE")
    
    LET l_cod_operac = _ADVPL_get_property(m_zoom_operac,"RETURN_BY_TABLE_COLUMN","operacao","cod_operac")
    LET l_den_operac = _ADVPL_get_property(m_zoom_operac,"RETURN_BY_TABLE_COLUMN","operacao","den_operac")

    IF  l_cod_operac IS NOT NULL THEN
        LET mr_parametro.cod_operac = l_cod_operac
        LET mr_parametro.den_operac = l_den_operac
    END IF

END FUNCTION      

#-----------------------------#
FUNCTION pol1301_checa_docum()#
#-----------------------------#

   CALL _ADVPL_set_property(m_statusbar,"CLEAR_TEXT")
   
   IF mr_parametro.num_docum IS NULL THEN
      RETURN TRUE
   END IF
   
   SELECT COUNT(num_docum)   
     INTO m_count
     FROM ordens
    WHERE cod_empresa = p_cod_empresa
      AND num_docum = mr_parametro.num_docum
      AND ies_situa = '4'

   IF STATUS <> 0 THEN
      CALL log003_err_sql('SELECT','ordens')
      RETURN FALSE
   END IF
   
   IF m_count = 0 THEN
      CALL _ADVPL_set_property(m_statusbar,"ERROR_TEXT",
             "Não existem ordens liberadas p/ o documento informado")
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION

#-----------------------------#
FUNCTION pol1301_checa_ordem()#
#-----------------------------#

   CALL _ADVPL_set_property(m_statusbar,"CLEAR_TEXT")
   
   IF mr_parametro.num_ordem IS NULL THEN
      RETURN TRUE
   END IF
   
   SELECT COUNT(num_docum)   
     INTO m_count
     FROM ordens
    WHERE cod_empresa = p_cod_empresa
      AND num_ordem = mr_parametro.num_ordem
      AND ies_situa = '4'

   IF STATUS <> 0 THEN
      CALL log003_err_sql('SELECT','ordens')
      RETURN FALSE
   END IF
   
   IF m_count = 0 THEN
      CALL _ADVPL_set_property(m_statusbar,"ERROR_TEXT",
             "A ordem infromada não existe ou não está liberada")
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION


#--------------------------#
FUNCTION pol1301_row_item()#
#--------------------------#

   DEFINE l_lin_atu       SMALLINT
      
   LET l_lin_atu = _ADVPL_get_property(m_bz_item,"ROW_SELECTED")
   
   IF l_lin_atu > 0 THEN
      IF ma_item[l_lin_atu].cod_item IS NULL OR 
         ma_item[l_lin_atu].cod_item = ' ' THEN
         RETURN FALSE
      END IF
   END IF
   
   RETURN TRUE

END FUNCTION

#----------------------------#
FUNCTION pol1301_checa_item()#
#----------------------------#

   DEFINE l_lin_atu       SMALLINT
   
   LET l_lin_atu = _ADVPL_get_property(m_bz_item,"ROW_SELECTED")
      
   LET ma_item[l_lin_atu].den_item = ''
   
   IF ma_item[l_lin_atu].cod_item IS NULL THEN
      RETURN TRUE
   END IF

   IF NOT pol1301_le_item(ma_item[l_lin_atu].cod_item) THEN
      LET m_msg = 'Item não existe.'
      CALL log0030_mensagem(m_msg,'excl')
      RETURN FALSE
   END IF
   
   LET ma_item[l_lin_atu].den_item = m_den_item
      
   RETURN TRUE

END FUNCTION

#--------------------------#
FUNCTION pol1301_cancelar()#
#--------------------------#

    CALL pol1301_limpa_campos()
    CALL pol1301_ativa_desativa(FALSE)
    RETURN TRUE

END FUNCTION

#---------------------------#
FUNCTION pol1301_confirmar()#
#---------------------------#
   
   IF mr_parametro.dat_fim IS NOT NULL AND
        mr_parametro.dat_ini IS NOT NULL THEN
      IF mr_parametro.dat_fim < mr_parametro.dat_ini THEN
         CALL _ADVPL_set_property(m_statusbar,"ERROR_TEXT","Período inválido!")
         CALL _ADVPL_set_property(m_datini,"GET_FOCUS")
         RETURN FALSE      
      END IF
   END IF

   CALL _ADVPL_set_property(m_statusbar,"ERROR_TEXT", "Aguarde! Lendo ordens...")           
   
   LET p_status = pol1280_le_ordens()
     
   IF NOT p_status THEN 
      CALL _ADVPL_set_property(m_statusbar,"ERROR_TEXT",
                "Operação cancelada")           
   ELSE
      CALL _ADVPL_set_property(m_statusbar,"ERROR_TEXT",
             "Operação efetuada com sucesso.")
   END IF

   CALL pol1301_ativa_desativa(FALSE)
   
   LET m_ies_info = TRUE
   LET m_ies_mod = FALSE
                  
   RETURN TRUE
   
END FUNCTION
            
#---------------------------#
FUNCTION pol1280_le_ordens()#
#---------------------------#
   
   DEFINE sql_stmt        VARCHAR(5000),
          l_progres       SMALLINT,
          l_dat_abert     DATE,
          l_dat_entrega   DATE, 
          l_dat_liberac   DATE
   
   LET sql_stmt =
       " SELECT num_ordem, cod_item, num_docum, dat_abert, dat_entrega, dat_liberac ",
       "   FROM ordens  ",
       "  WHERE cod_empresa = '",p_cod_empresa,"' ",
       "    AND ies_situa  = '4' ",
       "    AND qtd_planej > (qtd_boas + qtd_refug + qtd_sucata) "

   IF mr_parametro.num_ordem IS NOT NULL THEN
      LET sql_stmt = sql_stmt CLIPPED, " AND num_ordem = ", mr_parametro.num_ordem
   END IF

   IF mr_parametro.num_docum IS NOT NULL THEN
      LET sql_stmt = sql_stmt CLIPPED, " AND num_docum = '",mr_parametro.num_docum,"' "
   END IF

   IF mr_parametro.dat_ini IS NOT NULL THEN
      IF mr_parametro.dat_pesquisa = 'A' THEN
         LET sql_stmt = sql_stmt CLIPPED, " AND dat_abert >= '",mr_parametro.dat_ini,"' "
      END IF
      IF mr_parametro.dat_pesquisa = 'E' THEN
         LET sql_stmt = sql_stmt CLIPPED, " AND dat_entrega >= '",mr_parametro.dat_ini,"' "
      END IF
      IF mr_parametro.dat_pesquisa = 'L' THEN
         LET sql_stmt = sql_stmt CLIPPED, " AND dat_liberac >= '",mr_parametro.dat_ini,"' "
      END IF      
   END IF

   IF mr_parametro.dat_fim IS NOT NULL THEN
      IF mr_parametro.dat_pesquisa = 'A' THEN
         LET sql_stmt = sql_stmt CLIPPED, " AND dat_abert <= '",mr_parametro.dat_fim,"' "
      END IF
      IF mr_parametro.dat_pesquisa = 'E' THEN
         LET sql_stmt = sql_stmt CLIPPED, " AND dat_entrega <= '",mr_parametro.dat_fim,"' "
      END IF
      IF mr_parametro.dat_pesquisa = 'L' THEN
         LET sql_stmt = sql_stmt CLIPPED, " AND dat_liberac <= '",mr_parametro.dat_fim,"' "
      END IF      
   END IF
  
   PREPARE var_ordem FROM sql_stmt   

   IF STATUS <> 0 THEN
      CALL log003_err_sql("PREPARE","var_ordem")  
      RETURN FALSE          
   END IF 
   
   LET m_count = 0
   
   DECLARE cq_ordem CURSOR FOR var_ordem

   FOREACH cq_ordem INTO 
      mr_dados.num_ordem, 
      mr_dados.cod_item, 
      mr_dados.num_docum,  
      l_dat_abert,  
      l_dat_entrega,
      l_dat_liberac      
      
      IF STATUS <> 0 THEN
         CALL log003_err_sql('FOREACH','ORDENS:CQ_ORDEM')
         RETURN FALSE
      END IF

      IF mr_parametro.dat_pesquisa = 'A' THEN
         LET mr_dados.data = l_dat_abert
      END IF
      IF mr_parametro.dat_pesquisa = 'E' THEN
         LET mr_dados.data = l_dat_entrega
      END IF
      IF mr_parametro.dat_pesquisa = 'L' THEN
         LET mr_dados.data = l_dat_liberac
      END IF                  

      LET mr_dados.cod_empresa = p_cod_empresa
      LET mr_dados.ano = YEAR(mr_dados.data)
      LET mr_dados.mes = MONTH(mr_dados.data)
      #LET mr_dados.Semana = week_of_year(mr_dados.data)

      SELECT den_item_reduz
        INTO mr_dados.den_item
        FROM item
       WHERE cod_empresa = p_cod_empresa
         AND cod_item = mr_dados.cod_item
         
      IF STATUS <> 0 THEN
         CALL log003_err_sql('SELECT','ITEM')
         RETURN FALSE
      END IF      
      
      LET sql_stmt =
       " SELECT cod_operac, num_seq_operac, cod_cent_trab, ies_oper_final, ",
       " qtd_planejada, qtd_boas, qtd_refugo, qtd_sucata FROM ord_oper    ",
       "  WHERE cod_empresa = '",p_cod_empresa,"' ",
       "    AND num_ordem = ",mr_dados.num_ordem,
       "    AND qtd_planejada > (qtd_boas + qtd_refugo + qtd_sucata) "
      
      IF mr_parametro.cod_cent_trab IS NOT NULL THEN
         LET sql_stmt = sql_stmt CLIPPED, " AND cod_cent_trab = '",mr_parametro.cod_cent_trab,"' "
      END IF
      
      IF mr_parametro.cod_operac IS NOT NULL THEN
         LET sql_stmt = sql_stmt CLIPPED, " AND cod_operac = '",mr_parametro.cod_operac,"' "
      END IF
      
      PREPARE var_oper FROM sql_stmt   

      IF STATUS <> 0 THEN
         CALL log003_err_sql("PREPARE","var_oper")  
         RETURN FALSE          
      END IF 
      
      DECLARE cq_oper CURSOR FOR var_oper

      FOREACH cq_oper INTO 
         mr_dados.cod_operac, 
         mr_dados.num_seq_operac, 
         mr_dados.cod_cent_trab, 
         mr_dados.ies_oper_final,
         mr_dados.qtd_planejada,
         mr_dados.qtd_boas, 
         mr_dados.qtd_refugo, 
         mr_dados.qtd_sucata
      
         IF STATUS <> 0 THEN
            CALL log003_err_sql('FOREACH','ORDENS:CQ_OPER')
            RETURN FALSE
         END IF      
                     
         LET mr_dados.qtd_saldo = mr_dados.qtd_planejada -
              (mr_dados.qtd_boas + mr_dados.qtd_refugo + mr_dados.qtd_sucata)
         LET mr_dados.qtd_boas = mr_dados.qtd_saldo
         LET mr_dados.qtd_refugo = 0
         LET mr_dados.qtd_sucata = 0

         INSERT INTO pol1301_1054 VALUES(mr_dados.*)

         IF STATUS <> 0 THEN
            CALL log003_err_sql('INSERT','pol1301_1054')
            RETURN FALSE
         END IF      

         LET m_count = m_count + 1         
         
      END FOREACH
            
   END FOREACH
   
   IF m_count = 0 THEN
      LET m_msg = 'Nenhum registro foi encontrado,\n',
                  'para os parâmetros informados.'
      CALL log0030_mensagem(m_msg,'info')
      RETURN FALSE 
   END IF 
   
   LET m_checa_linha = FALSE

   CALL _ADVPL_set_property(m_statusbar,"ERROR_TEXT", "")   

   IF NOT pol1301_sel_operacao() THEN
      RETURN FALSE
   END IF      
   
   RETURN TRUE   

END FUNCTION

#------------------------------#
FUNCTION pol1301_sel_operacao()#
#------------------------------#

    DEFINE l_menubar       VARCHAR(10),
           l_panel         VARCHAR(10),
           l_modifica      VARCHAR(10),
           l_print         VARCHAR(10),
           l_proces        VARCHAR(10)

    LET m_janela = _ADVPL_create_component(NULL,"LDIALOG")
    CALL _ADVPL_set_property(m_janela,"SIZE",1300,500)
    CALL _ADVPL_set_property(m_janela,"TITLE","SELEÇÃO DE OPERAÇÕES")

    LET m_bar_mem = _ADVPL_create_component(NULL,"LSTATUSBAR",m_janela)

    LET l_menubar = _ADVPL_create_component(NULL,"LMENUBAR",m_janela)
    CALL _ADVPL_set_property(l_menubar,"HELP_VISIBLE",FALSE)

    LET l_modifica = _ADVPL_create_component(NULL,"LUPDATEBUTTON",l_menubar)
    CALL _ADVPL_set_property(l_modifica,"EVENT","pol1301_modifica")
    CALL _ADVPL_set_property(l_modifica,"CONFIRM_EVENT","pol1301_conf_mod")
    CALL _ADVPL_set_property(l_modifica,"CANCEL_EVENT","pol1301_canc_mod")

    LET l_proces = _ADVPL_create_component(NULL,"LPROCESSBUTTON",l_menubar)
    CALL _ADVPL_set_property(l_proces,"EVENT","pol1301_processar")

    CALL _ADVPL_create_component(NULL,"LQUITBUTTON",l_menubar)

    LET l_panel = _ADVPL_create_component(NULL,"LPANEL",m_janela)
    CALL _ADVPL_set_property(l_panel,"ALIGN","CENTER")
    CALL _ADVPL_set_property(l_panel,"BACKGROUND_COLOR",225,232,232) #vermelho,verde,azul

    CALL pol1301_cria_grade(l_panel)

    IF NOT pol1301_le_operacao() THEN
       RETURN FALSE
    END IF

    CALL _ADVPL_set_property(m_browse,"CAN_ADD_ROW",FALSE)
    CALL _ADVPL_set_property(m_browse,"CAN_REMOVE_ROW",FALSE)
    CALL _ADVPL_set_property(m_browse,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(m_janela,"ACTIVATE",TRUE)

   RETURN TRUE
  
END FUNCTION

#---------------------------------------#
FUNCTION pol1301_cria_grade(l_container)#
#---------------------------------------#

    DEFINE l_container           VARCHAR(10),
           l_panel               VARCHAR(10),
           l_layout              VARCHAR(10),
           l_label               VARCHAR(10),
           l_field               VARCHAR(10),
           l_tabcolumn           VARCHAR(10)

    LET l_panel= _ADVPL_create_component(NULL,"LPANEL",l_container)
    CALL _ADVPL_set_property(l_panel,"ALIGN","CENTER")

    LET l_layout = _ADVPL_create_component(NULL,"LLAYOUTMANAGER",l_panel)
    CALL _ADVPL_set_property(l_layout,"COLUMNS_COUNT",1) #número de colunas
    CALL _ADVPL_set_property(l_layout,"EXPANSIBLE",TRUE) 
    
    LET m_browse = _ADVPL_create_component(NULL,"LBROWSEEX",l_layout)
    CALL _ADVPL_set_property(m_browse,"ALIGN","CENTER")
    
    CALL _ADVPL_set_property(m_browse,"AFTER_ROW_EVENT","pol1301_checa_linha")
    
    # colunas da grade

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Ano")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",30)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","ano")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Mês")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",30)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","mes")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Sem")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",30)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","semana")
    
    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Item")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",60)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","cod_item")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Descrição")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",100)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","den_item")
    
    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Ordem")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",60)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","num_ordem")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Documento")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",50)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","num_docum")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","C Trab")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",40)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","cod_cent_trab")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Operac")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",40)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","cod_operac")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Seq")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",20)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","num_seq_operac")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Final")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",20)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","ies_oper_final")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Planej")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",50)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","qtd_planejada")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Saldo")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",FALSE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",50)
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","qtd_saldo")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Apontar")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",TRUE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",50)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_COMPONENT","LNUMERICFIELD")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","LENGTH",6,0)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","PICTURE","@E ######")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","VALID","pol1301_boas_valid")
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","qtd_boas")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Refugar")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",TRUE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",50)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_COMPONENT","LNUMERICFIELD")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","LENGTH",6,0)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","PICTURE","@E ######")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","VALID","pol1301_refugo_valid")
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","qtd_refugo")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Sucatear")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",TRUE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",50)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_COMPONENT","LNUMERICFIELD")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","LENGTH",6,0)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","PICTURE","@E ######")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","VALID","pol1301_sucata_valid")
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","qtd_sucata")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Cod item sucata")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",TRUE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",100)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_COMPONENT","LTEXTFIELD")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","LENGTH",15)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","PICTURE","@!")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","VALID","pol1301_item_valid")
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","item_sucata")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER"," ")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",TRUE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",20)
    CALL _ADVPL_set_property(l_tabcolumn,"NO_VARIABLE")
    CALL _ADVPL_set_property(l_tabcolumn,"IMAGE_RENDERER","BTPESQ")
    CALL _ADVPL_set_property(l_tabcolumn,"BEFORE_EDIT_EVENT","pol1301_zoom_item_sucata")

    LET l_tabcolumn = _ADVPL_create_component(NULL,"LTABLECOLUMNEX",m_browse)
    CALL _ADVPL_set_property(l_tabcolumn,"HEADER","Motivo")
    CALL _ADVPL_set_property(l_tabcolumn,"EDITABLE",TRUE)
    CALL _ADVPL_set_property(l_tabcolumn,"COLUMN_WIDTH",150)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_COMPONENT","LTEXTFIELD")
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","LENGTH",40)
    CALL _ADVPL_set_property(l_tabcolumn,"EDIT_PROPERTY","PICTURE","@!")
    CALL _ADVPL_set_property(l_tabcolumn,"VARIABLE","motivo")
        
    CALL _ADVPL_set_property(m_browse,"SET_ROWS",ma_operacao,1)
        
END FUNCTION

#----------------------------------#
FUNCTION pol1301_zoom_item_sucata()#
#----------------------------------#
    
   DEFINE l_item     LIKE item.cod_item,
          l_lin_atu  INTEGER

   LET l_lin_atu = _ADVPL_get_property(m_browse,"ROW_SELECTED")

   IF ma_operacao[l_lin_atu].qtd_sucata = 0 THEN
      LET ma_operacao[l_lin_atu].item_sucata = ''
      RETURN
   END IF
           
   IF  m_zoom_item IS NULL THEN
       LET m_zoom_item = _ADVPL_create_component(NULL,"LZOOMMETADATA")
       CALL _ADVPL_set_property(m_zoom_item,"ZOOM","zoom_item")
   END IF

   CALL _ADVPL_get_property(m_zoom_item,"ACTIVATE")

   LET l_item = _ADVPL_get_property(m_zoom_item,"RETURN_BY_TABLE_COLUMN","item","cod_item")

   IF l_item IS NOT NULL THEN
      LET ma_operacao[l_lin_atu].item_sucata = l_item
   END IF
    
END FUNCTION

#------------------------------#
FUNCTION pol1301_zoom_br_item()#
#------------------------------#
    
   DEFINE l_item        LIKE item.cod_item,
          l_lin_atu     INTEGER
          
   IF  m_zoom_item IS NULL THEN
       LET m_zoom_item = _ADVPL_create_component(NULL,"LZOOMMETADATA")
       CALL _ADVPL_set_property(m_zoom_item,"ZOOM","zoom_item")
   END IF

   CALL _ADVPL_get_property(m_zoom_item,"ACTIVATE")

   LET l_item      = _ADVPL_get_property(m_zoom_item,"RETURN_BY_TABLE_COLUMN","item","cod_item")

   IF l_item IS NOT NULL THEN
      LET l_lin_atu = _ADVPL_get_property(m_bz_item,"ROW_SELECTED")
      LET ma_item[l_lin_atu].cod_item = l_item
      CALL pol1301_le_item(l_item) RETURNING p_status
      LET ma_item[l_lin_atu].den_item = m_den_item   
   END IF
    
END FUNCTION

#-----------------------------#
FUNCTION pol1301_le_operacao()#
#-----------------------------#
   
   DEFINE l_ind     INTEGER
   
   INITIALIZE ma_operacao TO NULL
   
   LET l_ind = 1
   
   DECLARE cq_le_oper CURSOR FOR
    SELECT *
      FROM pol1301_1054
     WHERE cod_empresa = p_cod_empresa
     ORDER BY cod_item, num_ordem, num_seq_operac
   
   FOREACH cq_le_oper INTO ma_operacao[l_ind].*      
      
      IF STATUS <> 0 THEN
         CALL log003_err_sql('FOREACH','cq_le_oper')
         RETURN FALSE
      END IF
            
      LET l_ind = l_ind + 1
      
      IF l_ind > 5000 THEN
         CALL log0030_mensagem("Limite de linhas da grade ultrapassou!","excl")
         EXIT FOREACH
      END IF
   
   END FOREACH
   
   FREE cq_le_oper
   
   LET m_qtd_linha = l_ind - 1

   CALL _ADVPL_set_property(m_browse,"ITEM_COUNT", m_qtd_linha)

END FUNCTION

#--------------------------#
FUNCTION pol1301_modifica()#
#--------------------------#
   
   LET m_checa_linha = TRUE
   
   CALL _ADVPL_set_property(m_bar_mem,"ERROR_TEXT", 
          "Informe a qtd a apontar, refugar e sucaterar.")   
          
   CALL _ADVPL_set_property(m_browse,"EDITABLE",TRUE)
   CALL _ADVPL_set_property(m_browse,"SELECT_ITEM",1,14)

END FUNCTION

#----------------------------#
FUNCTION pol1301_boas_valid()#
#----------------------------#
   
   DEFINE l_lin_atu       SMALLINT
   
   LET l_lin_atu = _ADVPL_get_property(m_browse,"ROW_SELECTED")

   IF l_lin_atu > 0 THEN
      IF ma_operacao[l_lin_atu].qtd_boas IS NULL OR
           ma_operacao[l_lin_atu].qtd_boas < 0 THEN
         LET ma_operacao[l_lin_atu].qtd_boas = 0
      END IF
   END IF
   
   RETURN TRUE

END FUNCTION

#------------------------------#
FUNCTION pol1301_refugo_valid()#
#------------------------------#
   
   DEFINE l_lin_atu       SMALLINT
   
   LET l_lin_atu = _ADVPL_get_property(m_browse,"ROW_SELECTED")

   IF l_lin_atu > 0 THEN
      IF ma_operacao[l_lin_atu].qtd_refugo IS NULL OR
           ma_operacao[l_lin_atu].qtd_refugo < 0 THEN
         LET ma_operacao[l_lin_atu].qtd_refugo = 0
      END IF
   END IF
   
   RETURN TRUE

END FUNCTION

#------------------------------#
FUNCTION pol1301_sucata_valid()#
#------------------------------#
   
   DEFINE l_lin_atu       SMALLINT
   
   LET l_lin_atu = _ADVPL_get_property(m_browse,"ROW_SELECTED")

   IF l_lin_atu > 0 THEN
      IF ma_operacao[l_lin_atu].qtd_sucata IS NULL OR
           ma_operacao[l_lin_atu].qtd_sucata < 0 THEN
         LET ma_operacao[l_lin_atu].qtd_sucata = 0
      END IF
      IF ma_operacao[l_lin_atu].qtd_sucata = 0 THEN
         LET ma_operacao[l_lin_atu].item_sucata = ''
         LET ma_operacao[l_lin_atu].motivo = ''
      END IF
   END IF
   
   RETURN TRUE

END FUNCTION

#----------------------------#
FUNCTION pol1301_item_valid()#
#----------------------------#

   DEFINE l_lin_atu       SMALLINT
   
   LET l_lin_atu = _ADVPL_get_property(m_browse,"ROW_SELECTED")

   IF l_lin_atu > 0 THEN
      IF ma_operacao[l_lin_atu].qtd_sucata = 0 THEN
         LET ma_operacao[l_lin_atu].item_sucata = ''
      ELSE
         IF ma_operacao[l_lin_atu].item_sucata IS NULL OR
               ma_operacao[l_lin_atu].item_sucata = ' ' THEN
            LET m_msg = 'Informe o item sucata.'
            CALL log0030_mensagem(m_msg,'excl')
            RETURN FALSE
         ELSE
            IF NOT pol1301_le_item(ma_operacao[l_lin_atu].item_sucata) THEN
               LET m_msg = 'Item sucata não existe.'
               CALL log0030_mensagem(m_msg,'excl')
               RETURN FALSE
            END IF
         END IF
      END IF
   END IF
   
   RETURN TRUE

END FUNCTION

#-----------------------------------#
FUNCTION pol1301_le_item(l_cod_item)#
#-----------------------------------#
   
   DEFINE l_cod_item       LIKE item.cod_item

   SELECT den_item
     INTO m_den_item
     FROM item
    WHERE cod_empresa = p_cod_empresa
      AND cod_item = l_cod_item
   
   IF STATUS <> 0 THEN
      RETURN FALSE
   END IF

   RETURN TRUE

END FUNCTION
            
#-----------------------------#
FUNCTION pol1301_checa_linha()#
#-----------------------------#
   
   DEFINE l_lin_atu       SMALLINT,
          l_tot_apo       DECIMAL(10,3)
   
   IF NOT m_checa_linha THEN
      RETURN TRUE
   END IF       

   LET l_lin_atu = _ADVPL_get_property(m_browse,"ROW_SELECTED")
   
   IF l_lin_atu > 0 THEN

      IF ma_operacao[l_lin_atu].qtd_sucata = 0 THEN
         LET ma_operacao[l_lin_atu].item_sucata = ''
         LET ma_operacao[l_lin_atu].motivo = ''
      ELSE
         IF ma_operacao[l_lin_atu].item_sucata IS NULL OR
             ma_operacao[l_lin_atu].item_sucata = ' ' THEN
            LET m_msg = 'Informe o item sucata.'
            CALL log0030_mensagem(m_msg,'excl')
            RETURN FALSE
         END IF
      END IF
   
      LET l_tot_apo = ma_operacao[l_lin_atu].qtd_boas +
            ma_operacao[l_lin_atu].qtd_refugo + ma_operacao[l_lin_atu].qtd_sucata
            
      IF l_tot_apo > ma_operacao[l_lin_atu].qtd_saldo THEN
         LET m_msg = ' Quantidade total informada\n',
                     'supera o saldo da operação.'
         CALL log0030_mensagem(m_msg,'excl')
         RETURN FALSE
      END IF      

   END IF   
   
   RETURN TRUE

END FUNCTION

#--------------------------#
FUNCTION pol1301_canc_mod()#
#--------------------------#

   CALL pol1301_le_operacao() RETURNING p_status
   CALL _ADVPL_set_property(m_browse,"EDITABLE",FALSE)

   CALL _ADVPL_set_property(m_bar_mem,"ERROR_TEXT", 
          "Operação cancelada.")   
   
   LET m_checa_linha = FALSE
   LET m_ies_mod = FALSE
   
   RETURN TRUE

END FUNCTION

#--------------------------#
FUNCTION pol1301_conf_mod()#
#--------------------------#
    
   LET m_count = _ADVPL_get_property(m_browse,"ITEM_COUNT")
   LET m_msg = NULL
   
   IF NOT pol1301_checa_linha() THEN
      RETURN FALSE
   END IF
   
   CALL log085_transacao("BEGIN")
    
   FOR m_ind = 1 TO m_count
       IF NOT pol1301_gra_modifi() THEN
          CALL log085_transacao("ROLLBACK")
          LET m_msg = 'Modificação cancelada.'
          EXIT FOR
       END IF
   END FOR
    
   IF m_msg IS NULL THEN
      CALL log085_transacao("COMMIT")
      LET m_msg = 'Sua modificação foi salva em um lote\n',
                  'e poderá ser utilizada no futuro.'
      CALL log0030_mensagem(m_msg,'info')
   END IF
    
   CALL _ADVPL_set_property(m_browse,"EDITABLE",FALSE)

   CALL _ADVPL_set_property(m_bar_mem,"ERROR_TEXT", m_msg)
   
   LET m_checa_linha = FALSE
   LET m_ies_mod = TRUE
   
   RETURN TRUE
   
END FUNCTION

#----------------------------#
FUNCTION pol1301_gra_modifi()#
#----------------------------#
   
   IF ma_operacao[m_ind].qtd_sucata = 0 THEN
      LET ma_operacao[m_ind].item_sucata = ''
      LET ma_operacao[m_ind].motivo = ''
   END IF
   
   UPDATE pol1301_1054
      SET qtd_boas = ma_operacao[m_ind].qtd_boas,
          qtd_refugo = ma_operacao[m_ind].qtd_refugo,
          qtd_sucata = ma_operacao[m_ind].qtd_sucata,
          item_sucata = ma_operacao[m_ind].item_sucata,
          motivo = ma_operacao[m_ind].motivo
    WHERE cod_empresa = p_cod_empresa
      AND num_ordem = ma_operacao[m_ind].num_ordem
      AND cod_operac = ma_operacao[m_ind].cod_operac
      AND num_seq_operac = ma_operacao[m_ind].num_seq_operac

   IF STATUS <> 0 THEN
      CALL log003_err_sql('UPDATE','pol1301_1054')
      RETURN FALSE
   END IF
   
   RETURN TRUE

END FUNCTION

#---------------------------#
FUNCTION pol1301_processar()#
#---------------------------#

   DEFINE l_qtd_info       LIKE ord_oper.qtd_boas
      
   {IF NOT m_ies_mod THEN
      LET m_msg = 'Antes de apontar, você precisa clicar em Modificar\n',
                  'informar as quantidades e confirmar.'
      CALL log0030_mensagem(m_msg,'info')
      RETURN FALSE
   END IF}
   
   LET l_qtd_info = 0
   
   FOR m_ind = 1 TO m_qtd_linha
       SELECT (qtd_planejada - qtd_boas - qtd_refugo - qtd_sucata)
         INTO m_saldo
         FROM ord_oper
        WHERE cod_empresa = p_cod_empresa
          AND num_ordem = ma_operacao[m_ind].num_ordem
          AND cod_operac = ma_operacao[m_ind].cod_operac
          AND num_seq_operac =  ma_operacao[m_ind].num_seq_operac
       
       IF STATUS <> 0 THEN
          CALL log003_err_sql('SELECT','ord_oper')
          RETURN FALSE
       END IF
       
       LET m_qtd_apont = ma_operacao[m_ind].qtd_boas + 
              ma_operacao[m_ind].qtd_refugo + ma_operacao[m_ind].qtd_sucata
       
       IF m_qtd_apont > m_saldo THEN
          LET m_msg = 'Ordem: ', ma_operacao[m_ind].num_ordem,'\n',
                      'Operação: ', ma_operacao[m_ind].cod_operac,'\n',
                      'Sequência: ', ma_operacao[m_ind].num_seq_operac,'\n\n',
                      'SEM SALDO PARA APONTAR\n AS QUANTIDADES INFORMADAS.\n\n',
                      'Deseja manter o lote ?'
          
          IF NOT LOG_question(m_msg) THEN
             RETURN FALSE
          END IF

       END IF

       LET l_qtd_info = l_qtd_info + m_qtd_apont
       
   END FOR
   
   IF l_qtd_info = 0 THEN
      LET m_msg = 'Você precisa informar as quantidades\n',
                  'de pelomenos uma ordem/operação.'
      CALL log0030_mensagem(m_msg,'info')
      RETURN FALSE
   END IF
   
   
   
   
   RETURN TRUE

END FUNCTION

{

DEFINE ma_operacao     ARRAY[5000] OF RECORD
       cod_empresa       char(02),
       ano               CHAR(04),
       mes               CHAR(02),
       semana            DECIMAL(2,0),
       cod_item          CHAR(15),
       den_item          CHAR(18),
       num_ordem         DECIMAL(9,0),
       num_docum         CHAR(10),
       cod_operac        CHAR(05),
       cod_cent_trab     CHAR(05),
       ies_oper_final    CHAR(01),
       num_seq_operac    DECIMAL(3,0),
       qtd_planejada     DECIMAL(6,0),
       qtd_boas          DECIMAL(6,0),
       qtd_refugo        DECIMAL(6,0),
       qtd_sucata        DECIMAL(6,0),
       qtd_saldo         DECIMAL(6,0),
       data              DATE,
       item_sucata       CHAR(15),
       motivo            CHAR(40)
       
END RECORD
