###PARSER-Não remover esta linha(Framework Logix)###
#lds USING PROGRAM sup3762 # Não remover esta linha - TOTVSTEC
###############################################################################
### ATENCAO ATENCAO ATENCAO ATENCAO ATENCAO ATENCAO ATENCAO ATENCAO ATENCAO ###
###############################################################################
###                                                                         ###
### Por motivos de tamanho deste arquivo fonte, os comandos de  selecao em  ###
### tabelas (SELECT), que eram identicos em diversas partes do mesmo foram  ###
### unificados. Para manter este principio, procure a seguinte string:      ###
###                      "busca_" + <nome da tabela>                        ###
### Exemplo: Para verificar se ja existe uma selecao que possa ser          ###
###         utilizada para a tabela ORDEM_SUP, procure "busca_ordem_sup".   ###
###                                                                         ###
###############################################################################

#-------------------------------------------------------------------#
# SISTEMA.: SUPRIMENTOS                                             #
# PROGRAMA: SUP3760                                                 #
# MODULOS.: SUP3760 LOG0010 LOG0030 LOG0040 LOG0050 LOG0060 SUP0520 #
# OBJETIVO: MANUTENCAO DE NOTAS FISCAIS                             #
# AUTOR...: TATIANE WIESE                                           #
# DATA....: 18/11/1994                                              #
#                                                                   #
# ******************** A T E N C A O  ! ! ! ! ********************* #
# FAVOR MANTER A IDENTACAO NESTE  PROGRAMA (TRES COLUNAS),  PARA  O #
# MELHOR ENTENDIMENTO DO PROGRAMA NAS MANUTENCOES POSTERIORES.      #
# ***************************************************************** #
#-------------------------------------------------------------------#
DATABASE logix
GLOBALS "sup3761.4gl"

 DEFINE m_msg                             CHAR(200)

 DEFINE m_num_nf_cap                      CHAR(07),
        m_informou_grade                  SMALLINT,
        m_ies_fat_unico                   SMALLINT

 DEFINE m_mes_fecha_01                    LIKE par_sup_pad.par_ies,
        p_ies_pagamento1                  LIKE cond_pgto_cap.ies_pagamento,
        m_log004                          SMALLINT,
        m_existe_tab_oc_nf                SMALLINT,
        m_tem_valid_fim                   SMALLINT,
        m_ind_transf_estoq                SMALLINT,
        m_ies_obj_entrada                 LIKE cod_fiscal_sup.ies_obj_entrada,
        m_ies_bloq_cc_os                  CHAR(01),
        m_controla_gao                    CHAR(01),
        m_orcamento_periodo               CHAR(01),
        m_usa_cond_pagto                  CHAR(01),
        m_transf_estoq                    LIKE par_sup_pad.par_ies,
        m_serie_branca                    LIKE par_sup_pad.par_ies,
        p_ies_pagamento2                  LIKE cond_pgto_cap.ies_pagamento,
        p_par_cap                         RECORD LIKE par_cap.*,
        g_ies_audit                       CHAR(01),
        p_msg                             CHAR(100),
        m_perm_copia_nf                   CHAR(01),
        m_perm_alt_cnd_emb                CHAR(01),
        m_mod_emb_nf_transf               CHAR(01),
        m_num_ar_ant                      LIKE aviso_rec.num_aviso_rec,
        m_cod_operacao_ant                LIKE cod_fiscal_sup.cod_fiscal,
        m_ies_custo_medio                 LIKE par_estoque.ies_custo_medio,
        m_contr_pes_rec                   LIKE par_sup_pad.par_ies,
        m_num_pesagem                     SMALLINT,
        m_ies_armaz_itau                  LIKE par_sup_pad.par_ies,
        m_pc_nf_consig                    CHAR(01),
        m_gera_rsv_transf                 CHAR(01),
        m_pedido_venda                    LIKE pedidos.num_pedido,
        m_ped_venda_dest                  LIKE pedidos.num_pedido_cli,
        m_num_ped_fornec                  LIKE prog_ordem_sup.num_pedido_fornec,
        m_pedido_venda1                   LIKE pedidos.num_pedido,
        m_cod_empresa_orig                LIKE aviso_rec_compl.cod_empresa_orig,
        m_dat_fim_valid                   LIKE par_sup_pad.par_data,
        m_ver_aviso_rec                   SMALLINT,
        m_ies_alt_nfe_emit                CHAR(01),   #eduardo o.s.288854
        m_exst_rel_fre_indt               SMALLINT,
        m_existe_despprit                 SMALLINT,
        m_cred_st_fat                     CHAR(01),
        m_classif_nfc                     CHAR(01),
        m_transf_incid_its                CHAR(01), #769302#
        m_informa_cliente_triang_con      CHAR(01),
        m_pre_unit_oc                     LIKE sup_par_oc.parametro_num, #540132
        m_segmento                        CHAR(01),
        m_wms_q04                         INTEGER,
        m_wms_gravou_q04                  SMALLINT,
        m_valida_nf_frete_filiais         CHAR(01),
        m_alter_den_item_nf               CHAR(01),
        m_ies_relac_nf_benef CHAR(1),
        m_utiliz_totvs_colab              CHAR(01),#796313 - Espindola - Projeto Totvs Colaboracao
        m_exigir_duplicata_nfs            CHAR(01) #CH783559

 DEFINE m_dados_copia                     RECORD
           num_nf_dest                       LIKE nf_sup.num_nf,
           ser_nf_dest                       LIKE nf_sup.ser_nf,
           ssr_nf_dest                       LIKE nf_sup.ssr_nf,
           fornec_dest                       LIKE nf_sup.cod_fornecedor,
           ies_nf_aguard_nfe_dest            LIKE nf_sup.ies_nf_aguard_nfe
                                          END RECORD,
        m_permite_alterar_nfs_transito    CHAR(01)

 DEFINE p_orig_uf_frt_nf_i                LIKE par_sup_pad.par_ies,
        p_ies_forn_dif_pc                 LIKE par_sup_pad.par_ies,
        p_cod_fiscal_c                    LIKE cod_fiscal_sup.cod_fiscal,
        p_ies_orig_oper                   LIKE estoque_operac.ies_origem,
        p_cod_oper_ent_comp               CHAR(04),
        p_contador                        SMALLINT,
        p_cod_local_rec                   CHAR(10),
        p_ies_rec_item_cancel             CHAR(01),
        p_ies_contagem                    CHAR(01),
        p_ies_custo_grade                 CHAR(01),
        p_ies_bloq_cont                   CHAR(01),
        p_ies_prim_cnd                    SMALLINT,
        p_cod_gru_desp                    LIKE aviso_rec.gru_ctr_desp_item,
        p_ies_passou                      SMALLINT,
        p_tem_erro                        SMALLINT,
        p_cont_erros                      SMALLINT,
        p_ar_iss                          RECORD LIKE ar_iss.*,
        p_nf_sup_erro                     RECORD
           empresa                           LIKE nf_sup_erro.empresa,
           num_aviso_rec                     LIKE nf_sup_erro.num_aviso_rec,
           num_seq                           LIKE nf_sup_erro.num_seq,
           des_pendencia_item                LIKE nf_sup_erro.des_pendencia_item,
           ies_origem_erro                   LIKE nf_sup_erro.ies_origem_erro,
           ies_erro_grave                    LIKE nf_sup_erro.ies_erro_grave
                                          END RECORD

 DEFINE comando_cap                       CHAR(150),
        p_ies_mod_contrato                LIKE par_sup_pad.par_ies,
        p_ies_grava_erro_4                LIKE par_sup_pad.par_ies,
        p_ies_situa_ar                    LIKE aviso_rec.ies_situa_ar,
        p_alt_val_nf_frt                  CHAR(01),
        p_nom_resp_aceite                 CHAR(08),
        p_mot_remes_terc                  LIKE motivo_remessa.cod_motivo_remessa,
        p_ies_transf_unid                 LIKE par_sup_pad.par_ies,
        p_ies_cfop99                      LIKE par_sup_pad.par_ies,
        m_cod_tip_desp_cons               LIKE tipo_despesa.cod_tip_despesa,
        m_cod_grp_desp_fat                LIKE grupo_ctr_desp.gru_ctr_desp

 DEFINE p_ies_item_estoq                  LIKE ordem_sup.ies_item_estoq,
        p_ies_insp_recebto                LIKE ordem_sup.ies_insp_recebto

 DEFINE p_stat_88                         SMALLINT,
        p_ies_imp_rendar                  CHAR(01),
        p_ies_imp_issr                    CHAR(01),
        p_ies_imp_ret_inssr               CHAR(01),
        p_ies_imp_inss_rurr               CHAR(01),
        m_controles                       CHAR(300),
        p_ies_busca_loclib                CHAR(01),
        p_ies_wis_instalado               CHAR(01)

 DEFINE p_base_ipi                        ARRAY[999] OF RECORD
           val_liquido_item                  DECIMAL(15,2)
                                          END RECORD ,
        p_ies_canc_nc                     SMALLINT,
        p_ies_canc                        SMALLINT,
        p_ies_nfe_emit                    CHAR(01),
        p_aviso_rec_compl_sq              RECORD LIKE aviso_rec_compl_sq.*,
        p_val_imposto                     LIKE nf_sup.val_ipi_nf,
        p_num_nf_dev                      LIKE nf_consig_item.num_nff,
        p_num_seq_dev                     LIKE nf_consig_item.num_sequencia,
        p_qtd_devolvida                   LIKE nf_consig_dev.qtd_devolvida

 DEFINE p_cod_oper_ent_ind                LIKE par_sup_pad.par_txt,
        p_oper_ent_ind_g                  LIKE par_sup_pad.par_txt

 DEFINE p_qtd_dig_cfop                    CHAR(01),
        m_count_seq                       SMALLINT,
        m_num_processo                    LIKE processo_imp.num_processo,
        m_ies_utiliz_provisao             CHAR(01),
        m_utiliz_nfm_import               CHAR(01),
        m_inicio_provisao                 DECIMAL(6,0),
        m_tipo_nf                         LIKE nf_sup.ies_nf_aguard_nfe,
        m_data_ent                        LIKE nf_sup.dat_entrada_nf,
        m_grupo_despesa_nfr               CHAR(01),
        m_exporta_nf                      CHAR(01),
        m_bloq_entr_data                  CHAR(01),
        m_bloq_entr_preco                 CHAR(01),
        m_consis_diverg_preco             LIKE sup_par_divg_rec.par_ind_especial, #733238#
        m_parametro_val                   LIKE sup_par_divg_rec.parametro_val,    #733238#
        m_qtd_dias_nf_venc                DECIMAL(3,0),
        m_cod_emp_orig                    LIKE empresa.cod_empresa,
        m_nfr_import                      SMALLINT,
        m_ind_mark                        SMALLINT

 DEFINE ma_inf_ar                         ARRAY[999] OF RECORD
           num_seq                           LIKE aviso_rec.num_seq,
           num_pedido                        LIKE aviso_rec.num_pedido,
           num_oc                            LIKE aviso_rec.num_oc
                                          END RECORD

 DEFINE m_cod_empresa_uni                 CHAR(02),
        m_cod_parametro                   CHAR(18),
        m_arq_help                        CHAR(150)

 DEFINE m_ies_control_consig              CHAR(01)

 DEFINE m_ies_cnpj_insc                   CHAR(01),
        m_num_cgc_cpf                     LIKE fornecedor.num_cgc_cpf,
        m_ins_estadual                    LIKE fornecedor.ins_estadual,
        m_cnpj_nf_com_pc                  CHAR(01),
        m_cfop_nfr                        CHAR(01),
        m_cfop_nfs                        CHAR(01),
        m_serie_nfs                       CHAR(01),
        m_cont_insp_especial              CHAR(01),
        m_consiste_nf_integr              CHAR(01) #OS359707

 DEFINE m_incid_icms_nfs                  CHAR(01),
        m_ies_anexa_dupl                  CHAR(01),
        m_prog_nfe                        LIKE par_sup_pad.par_txt,
        m_ies_cit_item                    CHAR(01),
        m_empr_utiliz_mp66                LIKE par_sup_pad.par_ies,
        m_pct_bc_pis                      LIKE sup_pct_bc_imposto.pct_bas_calc,
        m_transf_saida                    CHAR(01),
        m_dat_hor_proces                  LIKE audit_ar.dat_hor_proces,
        m_atualiza_nf_trans               CHAR(01)

DEFINE m_ies_inf_aut_barra                LIKE par_sup_pad.par_ies,
       m_consulta_ord_descres             CHAR(01),
       m_ent_manual_transf                CHAR(01), #OS372636
       m_proc_imp_rec_nfr_consig          CHAR(01),
       m_prog_conhec_frete                CHAR(08)

DEFINE m_grava_sup0964                    SMALLINT,
       m_nf_aguard_nfe_ant                LIKE nf_sup.ies_nf_aguard_nfe,
       m_trata_nf_em_transito             CHAR(01),
       m_executou_sup3771                 SMALLINT,
       m_contr_terc_no_dep                CHAR(01),
       m_gerar_os_recb_mat_terc           CHAR(01),
       m_recalcula_impostos_nf_imp        CHAR(01),
       m_cons_dat_emis_ped                CHAR(01),
       m_utiliza_dds_fortaleza            CHAR(01),
       m_natureza                         CHAR(01),
       m_num_prog_arg                     CHAR(08),
       m_alterou_preco                    SMALLINT,
       m_solicitou_mp                     SMALLINT,
       m_solicitou_ciap                   SMALLINT,
       m_confirmou_mp                     SMALLINT,
       m_confirmou_ciap                   SMALLINT,
       m_confirm_compex_mp                CHAR(01),
       m_confirm_compex_ciap              CHAR(01),
       m_cnd_pgto_sem_intr_cap            LIKE cond_pgto_cap.cnd_pgto,
       m_nfp_incl_apos_encerr             SMALLINT,
       m_integracao_cre                   SMALLINT,
       m_via_transporte_nota              LIKE via_transporte.cod_via_transporte,
       m_diver_nf                         CHAR(01),
       m_pct_toler_nf                     DECIMAL(6,3),
       m_diver_custo                      CHAR(01),
       m_pct_toler_custo                  DECIMAL(6,3),
       m_env_email_solic_rec_pc           CHAR(01),
       m_mov_qtd_ser                      CHAR(01),
       m_cfop_compl_dic_se                CHAR(1),   # 409509
       m_cons_modific                     CHAR(01),
       m_informa_peso_entrada_nf          CHAR(01),
       m_ies_msg_contr_terc               CHAR(01), # 472270
       m_ies_local_insp                   LIKE par_sup_pad.par_ies,
       m_visualizar_notas_em_transito     CHAR(01), #OS477406
       m_permite_transf_duplicada_emp     CHAR(01),
       m_den_item                         LIKE item.den_item, #OS477994
       m_peso_nf                          LIKE sup_par_ar.parametro_val ,
       m_funcao                           CHAR(30),
       m_consistir_oc_estrutura           CHAR(01),
       m_wms_instal                       CHAR(1),  # WMS - Columbia
       m_segmto_utilizacao                CHAR(1),  # WMS - Columbia
       m_utiliza_codf_deposit             CHAR(1),  # WMS - Columbia
       m_horario_alteracao_wms            DATETIME YEAR TO SECOND, # WMS - Columbia
       m_tempo_gasto_ditacao_nota         CHAR(10), # WMS - Columbia
       m_wms_depositante                  CHAR(15), # WMS - Columbia
       m_cfop_nota_fiscal_provis          CHAR(5),  # WMS - Columbia
       m_cfop_nota_fiscal_definit         CHAR(5),  # WMS - Columbia
       m_cfop_compl_nota_fiscal_provis    CHAR(5),  # WMS - Columbia
       m_cfop_compl_nota_fiscal_definit   CHAR(5),  # WMS - Columbia
       m_tipo_documento                   CHAR(1),  # WMS - Columbia
       m_tipo_documento_old               CHAR(1),  # WMS - Columbia,
       m_item_interno                     LIKE sup_par_itforn.item, # WMS - Columbia
       m_alterou_tipo_modif               SMALLINT,
       m_grupo_desp_nfp_com_cred_nfm      LIKE grupo_ctr_desp.gru_ctr_desp,
       m_utiliz_regulariz_fiscal          CHAR(01),
       m_nf_tipo_x                        SMALLINT, ### OS 511148
       m_devol_consig_venda_parcial       CHAR(01), ### OS 512218
       m_devol_cliente_parcial            CHAR(01),  ### OS 509930
       m_num_ar_relac                     LIKE aviso_rec.num_aviso_rec, #OS450170
       m_comando                          CHAR(30), #OS450170
       m_cfop_serv                        SMALLINT, #OS450170
       #m_aviso_recebto                   SMALLINT, #OS450170
       m_devol_nf_parcial                 SMALLINT, ### OS 511148
       m_alterar                          SMALLINT,
       m_devol_nf_parcial_venda           SMALLINT,
       m_inclui_observacao_item_ar        CHAR(01),
       m_abre_aut_tela_erros              CHAR(01), #O.S. 529316
       m_icms_ret_base_calc_pis_cofins    CHAR(01), #542889
       m_utiliza_nf_eletronica            CHAR(01), #O.S 534866
       m_validou_cfop                     SMALLINT, #OS 550997
       m_exigir_dupl_nff_vencto_pc        CHAR(01),  #OS 561.763
       m_emitente_nf_filial               LIKE fornecedor.cod_fornecedor, #OS 603111
       m_possui_regime_filial             SMALLINT

 #OS490902
 DEFINE ma_nf_erro                        ARRAY[500] OF RECORD
           seleciona                         CHAR(01),
           dat_emis_nf                       LIKE nf_sup.dat_emis_nf,
           num_nf                            LIKE nf_sup.num_nf,
           ser_nf                            LIKE nf_sup.ser_nf,
           ssr_nf                            LIKE nf_sup.ssr_nf,
           cod_item                          LIKE aviso_rec.cod_item
                                          END RECORD

 DEFINE ma_aviso_rec                      ARRAY[500] OF RECORD
           num_aviso_rec                     LIKE aviso_rec.num_aviso_rec,
           num_seq                           LIKE aviso_rec.num_seq
                                          END RECORD

 DEFINE m_data                            DATE,
        m_user                            LIKE usuario.nom_usuario,
        m_altera_cndpgto_mod_nf_transito  CHAR(01),
        m_permite_ent_mesma_nfe_emp_dif   CHAR(01), #555962
        m_cod_item_cred_transf_icms       CHAR(15),  #502143
        m_dat_entrada_ant                 DATE,
        m_reg_entr_doc_rec                LIKE re.cod_regist_entrada, #778903
        m_utiliza_num_nfe                 CHAR(01), #762211
        m_num_nf_eletronica               DECIMAL(9,0) #762211

 #OS490902
 DEFINE m_qtd_dias_final_export           SMALLINT #OS 514411
 DEFINE m_cons_val_ret_rem                CHAR(01) #-- OS 548208
 #-- OS 562700 inicio --#
 DEFINE mr_tela                           RECORD
           num_nff                           LIKE nf_sup.num_nf,
           ser_nff                           LIKE nf_sup.ser_nf,
           ssr_nff                           LIKE nf_sup.ssr_nf
                                          END RECORD
 DEFINE mr_tela_relac_nf_rem_retorno      RECORD
           num_aviso_rec                     LIKE aviso_rec.num_aviso_rec,
           num_seq                           LIKE aviso_rec.num_seq,
           cod_fornecedor                    LIKE item_em_terc.cod_fornecedor,
           raz_social_reduz                  LIKE fornecedor.raz_social_reduz,
           cod_item                          LIKE item_em_terc.cod_item,
           den_item_reduz                    LIKE item.den_item_reduz,
           qtd_declarad_nf                   LIKE aviso_rec.qtd_declarad_nf
                                          END RECORD
 DEFINE ma_tela_relac_nf_rem_retorno      ARRAY[500] OF RECORD
           dat_emis_nf                       LIKE item_em_terc.dat_emis_nf,
           num_nf                            LIKE item_em_terc.num_nf,
           num_sequencia                     LIKE item_em_terc.num_sequencia,
           qtd_saldo                         LIKE item_em_terc.qtd_tot_remessa,
           qtd_devolvida                     LIKE aviso_rec.qtd_declarad_nf
                                          END RECORD
 DEFINE ma_tela_relac_nf_compl            ARRAY[100] OF RECORD
           ies_incl_contab                   LIKE item_em_terc.ies_incl_contab
                                          END RECORD

 DEFINE m_den_endereco                    CHAR(15),
        m_den_volume                      CHAR(15),
        m_den_dat_prod                    CHAR(15),
        m_den_dat_valid                   CHAR(15),
        m_den_peca                        CHAR(15),
        m_den_serie                       CHAR(15),
        m_den_comprimento                 CHAR(15),
        m_den_largura                     CHAR(15),
        m_den_altura                      CHAR(15),
        m_den_diametro                    CHAR(15),
        m_tot_qtd_devolvida               LIKE item_em_terc.qtd_tot_recebida,
        m_nf_eletronica_impr              SMALLINT,#595717
        m_dat_alteracao_local_rem_ret     DATE,     #732879 Antonio
        m_emp_trabalha_com_patr           CHAR(02), #Ch 721708
        m_indicador_aduaneiro             CHAR(01), #A24579
        m_criou_temp_peso                 SMALLINT  #A24579


 DEFINE mr_dados_tela_ant                 RECORD #562142
           ser_nf                            LIKE nf_sup.ser_nf,
           ssr_nf                            LIKE nf_sup.ssr_nf,
           ies_nf_aguard_nfe                 LIKE nf_sup.ies_nf_aguard_nfe,
           cod_operac_estoq                  LIKE aviso_rec.cod_operac_estoq ,
           cod_operacao                      LIKE nf_sup.cod_operacao     ,
           cod_fiscal_compl                  LIKE aviso_rec_compl.cod_fiscal_compl ,
           dat_emis_nf                       LIKE nf_sup.dat_emis_nf      ,
           dat_entrada_nf                    LIKE nf_sup.dat_entrada_nf   ,
           cnd_pgto_nf                       LIKE nf_sup.cnd_pgto_nf      ,
           cod_mod_embar                     LIKE nf_sup.cod_mod_embar    ,
           num_nf                            LIKE nf_sup.num_nf           , ##OS 587470
           ies_especie_nf                    LIKE nf_sup.ies_especie_nf     ##OS 587470
                                          END RECORD

 DEFINE m_dat_prx_fecha_est               DATE,
        m_eh_modificacao                  SMALLINT

 DEFINE ma_array                          ARRAY[50] OF RECORD
           den_controle                      CHAR(30),
           valor                             CHAR(20)
                                          END RECORD

 DEFINE ma_array_compl                    ARRAY[50] OF RECORD
           ies_controle                      CHAR(02),
           ies_grade                         CHAR(02)
                                          END RECORD

 DEFINE ma_grades                         ARRAY[05] OF RECORD
           num_seq_controle                  SMALLINT,
           ies_grade                         CHAR(02),
           cod_grade                         LIKE grade.cod_grade
                                          END RECORD

 DEFINE mr_dados_tela                     RECORD
           qtd_total                         DECIMAL(15,3),
           seq_tabulacao                     SMALLINT,
           qtd_remessa                       DECIMAL(15,3),
           qtd_recebida                      DECIMAL(15,3),
           qtd_devolvida                     DECIMAL(15,3)
                                          END RECORD

 DEFINE mr_dados_telar                    RECORD
           qtd_total                         DECIMAL(15,3),
           seq_tabulacao                     SMALLINT,
           qtd_remessa                       DECIMAL(15,3),
           qtd_recebida                      DECIMAL(15,3),
           qtd_devolvida                     DECIMAL(15,3)
                                          END RECORD

 DEFINE mr_sup_itterc_grade               RECORD LIKE sup_itterc_grade.*,
        m_ies_nf_remessa_x_especie        SMALLINT
  #-- OS 562700 fim --#

 DEFINE m_informa_controles_sup3760       CHAR(01), #OS544582
        m_transf_ativo_imob               SMALLINT  ##OS 612894

 DEFINE m_contagem_automatica             CHAR(01) #727947 Antonio

 # CH 739942 - Rafael F. B. - 11/01/2010 #
 DEFINE m_permite_alt_inf_compl_nf_cap    CHAR(500),
        m_existe_cap                      SMALLINT,
        m_altera_nfm_7_para_6_aut         CHAR(01),
        m_mod_embarque_nfm_importacao     LIKE modo_embarque.cod_mod_embar
 DEFINE m_emissao_nf_tipo_7               CHAR(1),
        m_selec_itens_nfp_importacao      CHAR(1),
        m_credito_pis_cofins              LIKE sup_obj_fiscal_196.credito_pis_cofins

MAIN

   CALL log0180_conecta_usuario()

   --# CALL fgl_init4js()
   CALL fgl_setenv("VERSION_INFO","L10-SUP3760-10.02.$Revision: 88 $p") #Informacao da versao do programa controlado pelo SourceSafe - Nao remover esta linha.
   LET p_versao = "SUP3760-10.02.B9p"
   #Favor nao alterar esta linha (SUPORTE)
   WHENEVER ERROR CONTINUE
   CALL log1400_isolation()
   SET LOCK MODE TO WAIT
   WHENEVER ERROR STOP

   DEFER INTERRUPT
   CALL log140_procura_caminho("sup3760.iem") RETURNING m_arq_help
   OPTIONS
      HELP FILE m_arq_help,
      NEXT KEY control-f,
      PREVIOUS KEY control-b

   CALL log001_acessa_usuario("SUPRIMEN","LOGERP;LOGLQ2;LOGWMS")
      RETURNING p_status, p_cod_empresa, p_user

   LET m_cod_empresa_orig = p_cod_empresa
   LET p_cons_arg = FALSE
   LET m_devol_nf_parcial = FALSE ### OS 511148

   IF NUM_ARGS() > 0  THEN
      LET m_num_prog_arg      = ARG_VAL(1)
      LET p_cod_empresa_arg   = ARG_VAL(2)
      LET p_num_aviso_rec_arg = ARG_VAL(3)
      LET p_cod_empresa = p_cod_empresa_arg
      IF NOT log005_seguranca(p_user,"SUPRIMEN","SUP3760","CO") THEN
         EXIT PROGRAM
      END IF
   ELSE
      LET m_num_prog_arg      = NULL
      LET p_cod_empresa_arg   = NULL
      LET p_num_aviso_rec_arg = NULL
   END IF

   IF m_num_prog_arg = "SUP0480X" THEN
      INITIALIZE p_nf_sup TO NULL
      LET p_nf_sup.num_aviso_rec = p_num_aviso_rec_arg
      CALL sup3760_assume_erros_nf()
      EXIT PROGRAM
   END IF

   INITIALIZE m_dat_entrada_ant  TO NULL #798726#
   INITIALIZE p_cod_empresa_dest TO NULL
   WHENEVER ERROR CONTINUE
   SELECT cod_empresa_destin
     INTO p_cod_empresa_dest
     FROM emp_orig_destino
    WHERE emp_orig_destino.cod_empresa_orig = p_cod_empresa
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0         OR
      p_cod_empresa_dest IS NULL OR
      p_cod_empresa_dest = "  "  THEN
      LET p_cod_empresa_dest = p_cod_empresa
   END IF

   CALL sup3762_m_versao_funcao()

   IF p_status = 0 THEN
      CALL sup3760_controle()
   END IF

END MAIN

#--------------------------#
 FUNCTION sup3760_controle()
#--------------------------#
 DEFINE l_num_prog_imp_ar  LIKE par_sup_pad.par_txt,
        l_ies_armaz_itau   LIKE par_sup_pad.par_ies,
        l_count            SMALLINT,
        l_cont             SMALLINT,
        l_ind              SMALLINT,
        l_num_oc_ar        LIKE aviso_rec.num_oc,
        l_prog_contagem    LIKE par_sup_pad.par_txt,
        l_num_nf           LIKE nf_sup.num_nf,
        l_parametro_ind    LIKE obf_par_grp_desp.parametro_ind,
        l_gru_ctr_desp_item LIKE aviso_rec.gru_ctr_desp_item,
        l_item_triang      SMALLINT,
        l_val_frete        LIKE aviso_rec.val_despesa_aces_i,
        l_grp_desp_st      LIKE frete_sup.gru_ctr_desp_frete,
        l_triang_em_terc   SMALLINT,                            #Vanderlei - OS 402676 #
        l_status           SMALLINT,
        l_is_clie_319      SMALLINT,
        l_mensagem         CHAR(200), # WMS - Columbia
        l_continua         SMALLINT,  # WMS - Columbia
        l_altera_tipo      SMALLINT   # WMS - Columbia
 DEFINE l_ies_tem_inspecao   LIKE item_pend.ies_tem_inspecao, #732912 Antonio
        l_continua_item_pend SMALLINT,                        #732912 Antonio
        l_regime_aduaneiro   CHAR(03)

 ## 407088
 DEFINE l_cod_fornecedor   LIKE nf_sup.cod_fornecedor
 DEFINE l_data             DATETIME YEAR TO SECOND
 # CH 739942 - Rafael F. B. - 11/01/2010 #
 DEFINE l_permite_modificar  SMALLINT

 LET m_log004 = TRUE

 CALL log006_exibe_teclas("01", p_versao)
 CALL sup376_inicializa_variaveis_globais()

 LET m_ind_transf_estoq   = FALSE
 LET m_num_processo       = -1
 LET p_inclu_item         = "N"
 LET p_ord_forn           = TRUE
 LET p_cons_data          = FALSE
 LET p_ies_achou_itsup    = FALSE
 LET p_ies_canc_nc        = FALSE
 LET p_qtd_dias_emis_doc  = 0
 LET m_ver_aviso_rec      = FALSE
 LET m_criou_temp_peso    = FALSE
 INITIALIZE p_val_imposto TO NULL

 IF NOT sup3760_leitura_parametro() THEN
    RETURN
 END IF

 #--------------------------#
 # Alteração WMS OS: 450083 #
 #--------------------------#
 # Passo 1                  #
 IF m_wms_instal = 'S' AND m_utiliza_codf_deposit = 'S' THEN
    CALL log130_procura_caminho("sup3760o") RETURNING comando3
    OPEN WINDOW w_sup37601 AT 2,2 WITH FORM comando3
         ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, COMMENT LINE LAST)
 ELSE
    CALL log130_procura_caminho("sup37601") RETURNING comando3
    OPEN WINDOW w_sup37601 AT 2,2 WITH FORM comando3
         ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, COMMENT LINE LAST)
 END IF
 #----------------#

 DISPLAY "                                                                               " AT 19,01

 IF p_num_aviso_rec_arg IS NOT NULL THEN
    LET p_dados_tela.num_aviso_rec = p_num_aviso_rec_arg
    INITIALIZE p_cod_oper_ant TO NULL
    WHENEVER ERROR CONTINUE
    SELECT cod_operacao
      INTO p_cod_oper_ant
      FROM aviso_rec_compl
     WHERE aviso_rec_compl.cod_empresa   = p_cod_empresa
       AND aviso_rec_compl.num_aviso_rec = p_num_aviso_rec_arg
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       IF sqlca.sqlcode <> 100 THEN
          CALL log003_err_sql("LEITURA","AVISO_REC_COMPL")
       END IF
    END IF
    CALL sup376_busca_argumen()

    IF p_entrou = 1 THEN
        DISPLAY p_cod_oper_ant AT 6,74
       LET p_cod_oper_ant = NULL
    END IF
 END IF
 WHENEVER ERROR CONTINUE
 SELECT cod_empresa,
        den_empresa,
        den_reduz,
        end_empresa,
        den_bairro,
        den_munic,
        uni_feder,
        ins_estadual,
        num_cgc,
        num_caixa_postal,
        cod_cep,
        num_telefone,
        num_telex,
        num_fax,
        end_telegraf,
        num_reg_junta,
        dat_inclu_junta,
        ies_filial,
        dat_fundacao,
        cod_cliente
   INTO p_empresa.cod_empresa,
        p_empresa.den_empresa,
        p_empresa.den_reduz,
        p_empresa.end_empresa,
        p_empresa.den_bairro,
        p_empresa.den_munic,
        p_empresa.uni_feder,
        p_empresa.ins_estadual,
        p_empresa.num_cgc,
        p_empresa.num_caixa_postal,
        p_empresa.cod_cep,
        p_empresa.num_telefone,
        p_empresa.num_telex,
        p_empresa.num_fax,
        p_empresa.end_telegraf,
        p_empresa.num_reg_junta,
        p_empresa.dat_inclu_junta,
        p_empresa.ies_filial,
        p_empresa.dat_fundacao,
        p_empresa.cod_cliente
   FROM empresa
  WHERE empresa.cod_empresa  = p_cod_empresa
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("LEITURA","EMPRESA")
 END IF
 CALL sup376_busca_uni_feder(p_empresa.uni_feder)
 LET p_cod_pais_emp = gr_uni_feder.cod_pais

 LET p_ies_cod_operac = sup376_busca_par_sup_pad("ies_cod_operac_estoq",1)
 IF p_ies_cod_operac IS NULL OR
    p_ies_cod_operac = " " OR
    p_ies_cod_operac = "N" THEN
     DISPLAY "                " AT 6,63
 END IF
 DISPLAY "    " AT 7,70

 INITIALIZE m_informa_peso_entrada_nf TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"informa_peso_entrada_nf") RETURNING m_informa_peso_entrada_nf, l_status
 IF l_status = FALSE OR
    m_informa_peso_entrada_nf      IS NULL OR
    m_informa_peso_entrada_nf     = " "   THEN
    LET m_informa_peso_entrada_nf = "N"
 END IF

 CALL log2250_busca_parametro(p_cod_empresa, "ies_informa_cliente_triang_con")
     RETURNING m_informa_cliente_triang_con, p_status
 if m_informa_cliente_triang_con is null then
    let m_informa_cliente_triang_con = "N"
 end if

 #542889
 CALL log2250_busca_parametro(p_cod_empresa,"icms_ret_base_calc_pis_cofins")
                              RETURNING m_icms_ret_base_calc_pis_cofins, l_status
 IF l_status = FALSE OR
    m_icms_ret_base_calc_pis_cofins IS NULL OR
    m_icms_ret_base_calc_pis_cofins = " " THEN
    LET m_icms_ret_base_calc_pis_cofins = "S"
 END IF

#--inicio ch732879--# Antonio
  INITIALIZE m_dat_alteracao_local_rem_ret TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"dat_alteracao_local_rem_ret")
  RETURNING m_dat_alteracao_local_rem_ret, p_status
  IF m_dat_alteracao_local_rem_ret = ' ' OR
     m_dat_alteracao_local_rem_ret IS NULL THEN
     LET m_dat_alteracao_local_rem_ret = TODAY
  END IF
#--fim ch732879-----#

  INITIALIZE m_dat_alteracao_local_rem_ret TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"dat_alteracao_local_rem_ret")
  RETURNING m_dat_alteracao_local_rem_ret, p_status
  IF m_dat_alteracao_local_rem_ret = ' ' OR
     m_dat_alteracao_local_rem_ret IS NULL THEN
     LET m_dat_alteracao_local_rem_ret = TODAY
  END IF

  INITIALIZE m_reg_entr_doc_rec TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"registro_entrada_rec_doc_852")
  RETURNING m_reg_entr_doc_rec, p_status
  IF m_reg_entr_doc_rec = ' ' OR
     m_reg_entr_doc_rec IS NULL THEN
     LET m_reg_entr_doc_rec = 0
  END IF

 MENU "OPCAO"
    BEFORE MENU
       IF LOG_existe_epl("supy163_verifica_cliente") THEN
       ELSE
          HIDE OPTION ":Consulta_seriais"
       END IF
       #-- OS 562700 inicio --#
       IF m_ies_nf_remessa_x_especie <> "0" THEN
       ELSE
          HIDE OPTION "(_relac_nf_remessa_retorno"
       END IF
       #-- OS 562700 fim --#
       IF g_ies_wis_instalado = "S" THEN
       ELSE
          HIDE OPTION "-Libera_WIS"
       END IF
       IF m_perm_copia_nf = "S" THEN
       ELSE
          HIDE OPTION "@_Copia_NF"
       END IF
       IF m_ies_control_consig = "S" THEN
       ELSE
          HIDE OPTION "%_fatur_x_reajuste"
       END IF
       IF m_contr_pes_rec = "S" THEN
       ELSE
          HIDE OPTION "<pesagens"
       END IF
       IF m_exporta_nf = "D" THEN
          HIDE OPTION "/_cta_deb_fornec"
       END IF
       {IF m_ies_bloq_cc_os <> "5" AND
          m_controla_gao = "N" THEN
          HIDE OPTION "*_orcamento_contas"
       END IF}
       IF find4GLFunction('supy9_verifica_bxa_est_aut') THEN
          IF supy9_verifica_bxa_est_aut() THEN
             SHOW OPTION "[_Efetua_baixa_aut"
          ELSE
             HIDE OPTION "[_Efetua_baixa_aut"
          END IF
       ELSE
          HIDE OPTION "[_Efetua_baixa_aut"
       END IF

       # CHAMADO 729881 - WMS
       IF find4GLFunction('wmsy18_vincula_q04') THEN
          SHOW OPTION "}_Desvincula_Q04"
       ELSE
          HIDE OPTION "}_Desvincula_Q04"
       END IF
       # FIM CHAMADO 729881

       IF m_permite_alterar_nfs_transito = "S" THEN
          SHOW OPTION "]_altera_ordem/pedido"
       ELSE
          HIDE OPTION "]_altera_ordem/pedido"
       END IF
       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       # Passo 22                 #
       IF m_wms_instal = "S" THEN
          HIDE OPTION "5-Relac_Depos_Fornec"
       END IF
       #---------------#

       IF find4GLFunction('supy64_cliente_915') THEN
          IF NOT supy64_cliente_915() THEN #OS490902
              HIDE OPTION "J_aprova_erro_qtd_dias"
          END IF
       ELSE
          HIDE OPTION "J_aprova_erro_qtd_dias"
       END IF

       # Inicio chamado 759.393
       IF find4GLFunction('y_sup3760_validacoes_apos_consistencias_nf') = FALSE THEN
          HIDE OPTION "Integrar"
       END IF
       # Fim chamado 759.393

       IF m_ies_relac_nf_benef = "N" THEN
          HIDE OPTION "+_relac_rem_x_ret"
       END IF

       IF m_utiliz_totvs_colab = "S" THEN
          SHOW OPTION ".Consul_chave_acesso"
       ELSE
          HIDE OPTION ".Consul_chave_acesso"
       END IF

    COMMAND "Incluir" "Inclui Nota Fiscal "
       HELP 001
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       DISPLAY "   " AT 4,54
       MESSAGE ""
       LET p_cod_empresa = m_cod_empresa_orig
       IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","IN")  THEN
          LET m_devol_nf_parcial       = FALSE ### OS 511148
          LET m_alterar                = FALSE
          LET m_devol_nf_parcial_venda = FALSE

          CALL sup376_inclusao_aviso_rec()
          #A24579
          IF m_wms_instal = 'S' THEN
             IF find4GLFunction('wms6612_consulta_sup_par_ar') THEN
                IF p_dados_tela.num_aviso_rec IS NOT NULL AND
                   p_dados_tela.num_aviso_rec <> 0 THEN
                   CALL wms6612_atualiza_sup_par_ar(p_dados_tela.num_aviso_rec,
                                                    m_indicador_aduaneiro,
                                                    m_tipo_documento)
                END IF
                CALL wms6612_consulta_sup_par_ar(p_dados_tela.num_aviso_rec)
                     RETURNING l_regime_aduaneiro
                DISPLAY l_regime_aduaneiro AT 4,54 ATTRIBUTE(REVERSE)
             END IF
          END IF

          IF g_nao_inclui THEN #750633#
             CALL sup376_modificacao_aviso_rec()
          END IF

          CALL sup3762_inicializa_variaveis()
          LET m_devol_nf_parcial       = FALSE
          LET m_alterar                = FALSE
          LET m_devol_nf_parcial_venda = FALSE

       END IF
       LET int_flag = 0

    COMMAND KEY("L") "incL.itens" "Inclui um novo item na Nota Fiscal "
       HELP 009
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       # Passo 33                 #
       LET l_continua = TRUE
       IF m_wms_instal = "S" THEN
          CALL wms6135_permissao_alteracao_nf_receb(p_cod_empresa,
                                                    p_dados_tela.num_aviso_rec,
                                                    TRUE) RETURNING l_status, l_mensagem
          IF NOT l_status THEN
             CALL log0030_processa_mensagem(l_mensagem CLIPPED,"exclamation",0)
             LET l_continua = FALSE
          END IF
       END IF
       #---------------#
       #WMS - Início Chamado 763456
       IF find4GLFunction('wmsy18_permite_modificacao_item_nf_sup') THEN
          IF NOT wmsy18_permite_modificacao_item_nf_sup(p_cod_empresa,
                                                        p_dados_tela.num_aviso_rec, 0) THEN
             LET l_continua = FALSE
          END IF
       END IF
       #WMS - Fim Chamado 763456

       ##OS 578941
       IF sup3760_nf_dev_relac_nf_saida(p_cod_empresa,
                                        p_dados_tela.num_aviso_rec,
                                        "INCLUSAO") THEN
          CALL log0030_mensagem("NF de devolução cliente relacionada a NF de venda. Não é permitido incluir novos itens.","exclamation")
          LET l_continua = FALSE
       END IF

       #--inicio--OS 502143 #
       LET l_is_clie_319 = FALSE
       IF find4GLFunction('supy101_cliente_319') THEN
         LET l_is_clie_319 = supy101_cliente_319()
       END IF

       IF find4GLFunction("supy117_nfe_transito_ja_impressa") THEN
          IF supy117_nfe_transito_ja_impressa(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              p_nf_sup.ies_nf_aguard_nfe,
                                              p_nf_sup.ies_especie_nf, TRUE) THEN
             LET l_continua = FALSE
          END IF
       END IF

       IF l_is_clie_319 = TRUE  AND
          (p_dados_tela.cod_operacao = '5.601'  OR
           p_dados_tela.cod_operacao = '6.601') AND
           m_cod_item_cred_transf_icms = p_array[1].cod_item THEN
           CALL log0030_mensagem('Nota fiscal de transferência de ICMS deverá ter apenas um item.','exclamation')
       ELSE
          IF l_continua THEN
             IF p_dados_tela.num_nf  IS NOT NULL THEN
                IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","IN")  THEN
                   IF sup376_verifica_fechamento() THEN
                      IF sup3760_isProcesso_importacao() THEN
                         CALL log0030_mensagem("Ação não permitida. Nota fiscal complementar gerada através do processo de importação.","exclamation")
                      ELSE
                         CALL sup376_consulta_dados()
                         IF p_ies_canc = FALSE  THEN
                            IF sup376_nfe_emitida() THEN
                               CALL log0030_mensagem(" Nota fiscal ja impressa nao pode ser alterada ","exclamation")
                            ELSE
                               ### OS 511148
                               IF sup3762_verifica_devol_nf_consig(p_nf_sup.ies_especie_nf,
                                                                   p_nf_sup.ies_nf_aguard_nfe,
                                                                   p_nf_sup.cod_empresa,
                                                                   p_nf_sup.num_nf,
                                                                   p_nf_sup.cod_fornecedor,
                                                                   " ") THEN
                                  IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                                                    "N") THEN
                                     IF NOT p_ies_incl_cap THEN
                                        IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
                                           IF sup0631_verifica_relac("NF",
                                                                     p_nf_sup.num_nf,
                                                                     p_nf_sup.ser_nf,
                                                                     p_nf_sup.ssr_nf,
                                                                     p_nf_sup.cod_fornecedor) = TRUE THEN
                                           ELSE
                                              IF p_dados_tela.ies_especie_nf = "TCK" AND
                                                 sup376_existe_frete_relac() THEN
                                                 CALL log0030_mensagem( " Ticket com frete nao pode ser alterado ","exclamation")
                                              ELSE
                                                 CALL sup376_inclusao_item_aviso_rec()
                                              END IF
                                           END IF
                                        ELSE
                                           CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
                                        END IF
                                     END IF
                                  END IF
                               END IF
                            END IF
                         ELSE
                            CALL log0030_mensagem("Nota Fiscal Cancelada.","exclamation")
                         END IF
                      END IF
                   ELSE
                      CALL log0030_exibe_ultima_mensagem()
                   END IF
                END IF
             ELSE
                CALL log0030_mensagem(" Consulte previamente para incluir itens ","exclamation")
             END IF
          END IF
          IF m_wms_instal = 'S' THEN
             IF find4GLFunction('wms6612_atualiza_sup_par_ar') THEN
                IF p_dados_tela.num_aviso_rec IS NOT NULL AND
                   p_dados_tela.num_aviso_rec <> 0 THEN
                   IF m_indicador_aduaneiro IS NULL OR m_indicador_aduaneiro = ' ' THEN
                      LET m_indicador_aduaneiro = wms6612_retorna_indicador_aduaneiro_ar(p_cod_empresa, p_dados_tela.num_aviso_rec)
                   END IF
                   CALL wms6612_atualiza_sup_par_ar(p_dados_tela.num_aviso_rec,
                                                    m_indicador_aduaneiro,
                                                    m_tipo_documento)
                END IF
             END IF
          END IF
       END IF

    COMMAND "Consultar" "Consulta Nota Fiscal"
       HELP 004
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       LET int_flag = 0
       LET p_cod_empresa = m_cod_empresa_orig
       IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","CO")  THEN
          LET p_cons_arg = FALSE
          CALL sup376_consulta_aviso_rec("NORMAL")
          IF sup3762_busca_frete_sup() = FALSE THEN
             LET p_frete_sup.num_conhec = 0
          END IF
          IF p_ies_cons THEN
             NEXT OPTION "Seguinte"
          END IF
       END IF
       LET int_flag = 0

    COMMAND "Seguinte"   "Exibe o proximo item encontrado na consulta"
       HELP 005
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       CALL sup376_paginacao("SEGUINTE")

    COMMAND "Anterior"   "Exibe o item anterior encontrado na consulta"
       HELP 006
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       CALL sup376_paginacao("ANTERIOR")
       CALL sup376_consulta_dados()

    COMMAND KEY("@") "@_Copia_NF" "Permite copia de nota fiscal "
       HELP 010
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       IF p_dados_tela.num_nf IS NOT NULL THEN
          IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","EX")  THEN
             CALL sup376_copia_nf()
          END IF
       ELSE
          ERROR " Consulte previamente para executar esta funcao"
       END IF

    COMMAND "Exclui_item"  "Exclui um item da nota fiscal  "
       HELP 011
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11

       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       # Passo 33                 #
       LET l_continua = TRUE
       IF m_wms_instal = "S" THEN
          CALL wms6135_valida_exclusao_nf_wms(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              TRUE) RETURNING l_status, l_mensagem
          IF NOT l_status THEN
             CALL log0030_processa_mensagem(l_mensagem CLIPPED,"exclamation",0)
             LET l_continua = FALSE
          END IF
       END IF
       #---------------#

       IF find4GLFunction("supy117_nfe_transito_ja_impressa") THEN
          IF supy117_nfe_transito_ja_impressa(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              p_nf_sup.ies_nf_aguard_nfe,
                                              p_nf_sup.ies_especie_nf, TRUE) THEN
             LET l_continua = FALSE
          END IF
       END IF

       IF l_continua THEN
          IF p_dados_tela.num_nf IS NOT NULL THEN
             IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","EX")  THEN
                IF sup3760_isProcesso_importacao() THEN
                   CALL log0030_mensagem("Ação não permitida. Nota fiscal complementar gerada através do processo de importação.","exclamation")
                ELSE
                   IF sup376_verifica_fechamento() THEN
                      CALL sup376_consulta_dados()
                      IF p_ies_canc = FALSE THEN
                         IF sup376_nfe_emitida() THEN
                            CALL log0030_mensagem(" Esta Nota ja foi impressa, deve ser cancelada.","exclamation")
                            LET p_ies_canc = TRUE
                         END IF
                         IF p_ies_canc = FALSE THEN
                            IF (p_nf_sup.ies_incl_contab = "S" OR p_nf_sup.ies_incl_contab = "M") THEN
                               CALL sup376_verifica_lancamentos()
                            END IF

                            IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, p_conta_lanc,
                                                                              "1", "N") THEN
                               IF sup0631_verifica_relac("NF",
                                                         p_nf_sup.num_nf,
                                                         p_nf_sup.ser_nf,
                                                         p_nf_sup.ssr_nf,
                                                         p_nf_sup.cod_fornecedor) = TRUE THEN
                               ELSE
                                  IF sup376_verifica_carta_correcao() = FALSE AND
                                     sup3760_existe_nota_debito_automatica() = FALSE  THEN
                                     CALL sup376_deleta_ar_frete_cesta()
                                     IF sup3760_verifica_devolucao("EXCL_ITEM") = FALSE THEN
                                        IF m_gera_rsv_transf = "S" THEN
                                           ### OS 182871 ###
                                           IF p_dados_tela.ies_nf_aguard_nfe = "8" THEN
                                              #exclui item
                                              FOR l_ind = 1 TO 999

                                                 INITIALIZE l_num_oc_ar TO NULL
                                                 SELECT num_oc
                                                   INTO l_num_oc_ar
                                                   FROM aviso_rec
                                                  WHERE cod_empresa   = p_cod_empresa
                                                    AND num_aviso_rec = p_dados_tela.num_aviso_rec
                                                    AND num_seq       = l_ind
                                                 IF sqlca.sqlcode <> 0 THEN
                                                    # Nao tem mais sequencia.
                                                    EXIT FOR
                                                 END IF

                                                 SELECT num_pedido_fornec
                                                   INTO m_num_ped_fornec
                                                   FROM prog_ordem_sup
                                                  WHERE cod_empresa      = p_cod_empresa
                                                    AND num_oc           = l_num_oc_ar
                                                    AND num_versao       = 001
                                                    AND num_prog_entrega = 001

                                                 LET m_pedido_venda = m_num_ped_fornec[1,6]
                                                 IF sup3760_busca_ped_venda() THEN
                                                 ELSE
                                                    ERROR " Problemas na busca do pedido de venda"
                                                    SLEEP 2
                                                    RETURN
                                                 END IF

                                                 LET l_cont = 0
                                                 SELECT COUNT(*)
                                                   INTO l_cont
                                                   FROM ordem_montag_item, ordem_montag_mest
                                                  WHERE ordem_montag_item.cod_empresa = p_cod_emp_transf
                                                    AND ordem_montag_item.num_pedido  = m_pedido_venda1
                                                    AND ordem_montag_mest.cod_empresa = p_cod_emp_transf
                                                    AND ordem_montag_mest.num_om      = ordem_montag_item.num_om
                                                    AND ordem_montag_mest.ies_sit_om  = "N"
                                                 IF sqlca.sqlcode <> 0 OR l_cont IS NULL THEN
                                                    LET l_cont = 0
                                                 END IF
                                                 IF l_cont > 0 THEN
                                                    MESSAGE " Opcao nao permitida, existe ordem de montagem p/ped origem" ATTRIBUTE(reverse)
                                                    RETURN
                                                 END IF
                                              END FOR
                                              IF sup3760_verifica_nota_integrada_wms() = FALSE THEN #1
                                                 CALL sup376_exclusao_aviso_rec()
                                              ELSE
                                                 CALL log0030_mensagem(" Este Item ja foi incluido na WMS","exclamation")
                                              END IF
                                              CALL sup376_consulta_dados()
                                              CALL sup376_exibe_dados()
                                              CALL sup376_exibe_array()
                                           END IF
                                        ELSE
                                           IF sup3760_verifica_nota_integrada_wms() = FALSE THEN #1
                                              CALL sup376_exclusao_aviso_rec()
                                           ELSE
                                              CALL log0030_mensagem(" Este Item ja foi incluido na WMS","exclamation")
                                           END IF
                                           CALL sup376_consulta_dados()
                                           CALL sup376_exibe_dados()
                                           CALL sup376_exibe_array()
                                        END IF
                                     ##OS 511240
                                     IF p_dados_tela.ies_especie_nf = 'NFD' OR
                                        p_ies_tip_entrada = '5'             THEN
                                        CALL sup3762_delete_ar_nf_item(p_cod_empresa,
                                                                       p_dados_tela.num_aviso_rec,
                                                                       l_ind)
                                     END IF
                                     END IF
                                  ELSE
                                     CALL log0030_mensagem("Antes de excluir o aviso de recebimento\n deve-se excluir a Carta de Correcao ","exclamation")
                                  END IF
                               END IF
                            END IF
                         END IF
                      ELSE
                         CALL log0030_mensagem("Nota Fiscal Cancelada","exclamation")
                      END IF
                   ELSE
                      CALL log0030_exibe_ultima_mensagem()
                   END IF
                END IF
             END IF
          ELSE
             CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
          END IF
       END IF

    COMMAND KEY("6") "6-exclui_nota"  "Exclui nota fiscal  "
       HELP 012
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11

       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       # Passo 34                 #
       LET l_continua = TRUE
       IF m_wms_instal = "S" THEN
          CALL wms6135_valida_exclusao_nf_wms(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              FALSE) RETURNING l_status, l_mensagem
          IF NOT l_status THEN
             CALL log0030_processa_mensagem(l_mensagem CLIPPED,"exclamation",0)
             LET l_continua = FALSE
          END IF
       END IF
       #---------------#
       IF find4GLFunction("supy117_nfe_transito_ja_impressa") THEN
          IF supy117_nfe_transito_ja_impressa(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              p_nf_sup.ies_nf_aguard_nfe,
                                              p_nf_sup.ies_especie_nf, TRUE) THEN
             LET l_continua = FALSE
          END IF
       END IF

       IF l_continua THEN
          IF p_dados_tela.num_nf IS NOT NULL THEN
             IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","EX")  THEN
                #--inicio--ch732912 Antonio#
                LET l_continua_item_pend = TRUE
                FOR l_ind = 1 TO 999
                   IF p_array[l_ind].cod_item IS NULL THEN
                      EXIT FOR
                   ELSE
                      INITIALIZE l_ies_tem_inspecao TO NULL
                      WHENEVER ERROR CONTINUE
                      SELECT item_pend.ies_tem_inspecao
                        INTO l_ies_tem_inspecao
                        FROM item_pend
                       WHERE item_pend.cod_empresa = p_cod_empresa
                         AND item_pend.cod_item    = p_array[l_ind].cod_item
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode <> 0 AND
                         sqlca.sqlcode <> 100 THEN
                         CALL log003_err_sql('LEITURA','item_pend')
                      ELSE
                         IF l_ies_tem_inspecao = 'S' THEN
                            IF NOT log0040_confirm(19,22,"Item com controle de inspeção. Favor contatar qualidade previamente. Confirma exclusão?") THEN
                               LET l_continua_item_pend = FALSE
                               EXIT FOR
                            END IF
                         END IF
                      END IF
                   END IF
                END FOR
                #---fim----ch732912#
                IF sup376_verifica_fechamento() AND l_continua_item_pend = TRUE  THEN #732912 Antonio
                   CALL sup376_consulta_dados()
                   IF p_ies_canc = FALSE THEN
                      LET p_ies_nfe_emit = "N"
                      WHENEVER ERROR CONTINUE
                      SELECT ies_nfe_emit
                        INTO p_ies_nfe_emit
                        FROM nfe_sup_compl
                       WHERE cod_empresa   = p_nf_sup.cod_empresa
                         AND num_aviso_rec = p_nf_sup.num_aviso_rec
                      WHENEVER ERROR STOP
                      IF p_ies_nfe_emit = "S" THEN
                         IF m_utiliza_nf_eletronica = 'S' THEN
                            CALL obf3760_verifica_sup_nf_eletronica(p_nf_sup.cod_empresa,
                                                                  p_nf_sup.num_aviso_rec,
                                                                  "EXCLUIR") RETURNING p_status, m_msg
                            IF p_status THEN
                               CALL log0030_mensagem(m_msg,"excl")
                               LET p_ies_canc = TRUE
                            END IF
                         ELSE
                            CALL log0030_mensagem("Esta Nota deve ser cancelada.","exclamation")
                            LET p_ies_canc = TRUE
                         END IF
                      ELSE
                      #--inicio--OS 534866 #
                         IF m_utiliza_nf_eletronica = 'S' THEN
                            CALL obf3760_verifica_sup_nf_eletronica(p_nf_sup.cod_empresa,
                                                                  p_nf_sup.num_aviso_rec,
                                                                  "EXCLUIR") RETURNING p_status, m_msg

                            IF p_status THEN
                               CALL log0030_mensagem(m_msg,"excl")
                               LET p_ies_canc = TRUE
                            END IF
                         END IF
                         #---fim----OS 534866 #
                      END IF
                     IF p_ies_canc = FALSE THEN
                       IF (p_nf_sup.ies_incl_contab = "S" OR p_nf_sup.ies_incl_contab = "M") THEN
                          CALL sup376_verifica_lancamentos()
                       END IF

                       IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, p_conta_lanc,
                                                                         "1", "N") THEN
                          IF sup0631_verifica_relac("NF",
                                                    p_nf_sup.num_nf,
                                                    p_nf_sup.ser_nf,
                                                    p_nf_sup.ssr_nf,
                                                    p_nf_sup.cod_fornecedor) = TRUE THEN
                          ELSE
                             IF sup376_verifica_carta_correcao() = FALSE AND
                                sup3760_existe_nota_debito_automatica() = FALSE  THEN
                                CALL sup376_deleta_ar_frete_cesta()
                                IF sup3760_verifica_devolucao("EXCL") = FALSE THEN
                                   IF m_gera_rsv_transf = "S" THEN
                                      IF p_dados_tela.ies_nf_aguard_nfe = "8" THEN
                                         #exclui nota
                                         FOR l_ind = 1 TO 999

                                            INITIALIZE l_num_oc_ar TO NULL
                                            SELECT num_oc
                                              INTO l_num_oc_ar
                                              FROM aviso_rec
                                             WHERE cod_empresa   = p_cod_empresa
                                               AND num_aviso_rec = p_dados_tela.num_aviso_rec
                                               AND num_seq       = l_ind
                                            IF sqlca.sqlcode <> 0 THEN
                                               # Nao tem mais sequencia.
                                               EXIT FOR
                                            END IF

                                            SELECT num_pedido_fornec
                                              INTO m_num_ped_fornec
                                              FROM prog_ordem_sup
                                             WHERE cod_empresa      = p_cod_empresa
                                               AND num_oc           = l_num_oc_ar
                                               AND num_versao       = 001
                                               AND num_prog_entrega = 001

                                            LET m_pedido_venda = m_num_ped_fornec[1,6]

                                            IF sup3760_busca_ped_venda() THEN
                                            ELSE
                                               ERROR " Problemas na busca do pedido de venda"
                                               SLEEP 2
                                               RETURN
                                            END IF

                                            LET l_cont = 0
                                            DECLARE cq_busca_ped_orig CURSOR FOR
                                               SELECT num_pedido_cli
                                                 FROM pedidos
                                                WHERE cod_empresa = p_cod_emp_transf
                                                  AND num_pedido  = m_pedido_venda1
                                            FOREACH cq_busca_ped_orig INTO m_ped_venda_dest
                                               SELECT COUNT(*)
                                                 INTO l_cont
                                                 FROM ordem_montag_item, ordem_montag_mest
                                                WHERE ordem_montag_item.cod_empresa = p_cod_empresa
                                                  AND ordem_montag_item.num_pedido  = m_ped_venda_dest
                                                  AND ordem_montag_mest.cod_empresa = p_cod_empresa
                                                  AND ordem_montag_mest.num_om      = ordem_montag_item.num_om
                                                  AND ordem_montag_mest.ies_sit_om  = "N"

                                               IF sqlca.sqlcode <> 0 OR l_cont IS NULL THEN
                                                  LET l_cont = 0
                                               END IF
                                               IF l_cont > 0 THEN
                                                  EXIT FOREACH
                                               END IF
                                            END FOREACH
                                            FREE cq_busca_ped_orig
                                            CLOSE cq_busca_ped_orig
                                         END FOR
                                         IF l_cont > 0 THEN
                                            ERROR " Opcao nao permitida, existe ordem de montagem p/pedido ",m_ped_venda_dest CLIPPED  ATTRIBUTE(REVERSE)
                                            SLEEP 2
                                         ELSE
                                            IF sup3760_verifica_nota_integrada_wms() = FALSE THEN #2
                                               CALL sup376_exclusao_nota()
                                            ELSE
                                               CALL log0030_mensagem("Esta Nota Fiscal ja foi incluida na WMS","exlclamation")
                                            END IF
                                         END IF
                                      ELSE
                                         IF sup3760_verifica_nota_integrada_wms() = FALSE THEN #2
                                            CALL sup376_exclusao_nota()
                                         ELSE
                                            CALL log0030_mensagem("Esta Nota Fiscal ja foi incluida na WMS","exlclamation")
                                         END IF
                                      END IF
                                   ELSE
                                      IF sup3760_verifica_nota_integrada_wms() = FALSE THEN #2
                                         CALL sup376_exclusao_nota()
                                      ELSE
                                         CALL log0030_mensagem("Esta Nota Fiscal ja foi incluida na WMS","exlclamation")
                                      END IF
                                   END IF
                                END IF
                             ELSE
                                CALL log0030_mensagem(" Antes de excluir o aviso de recebimento,\n deve-se excluir a Carta de Correcao ","exclamation")
                             END IF
                          END IF
                        END IF
                      END IF
                   ELSE
                      CALL log0030_mensagem("Nota Fiscal Cancelada","exclamation")
                   END IF
                ELSE
                   CALL log0030_exibe_ultima_mensagem()
                END IF
             END IF
          ELSE
             CALL log0030_mensagem("Consulte previamente para executar esta funcao","exclamation")
          END IF
       END IF

    COMMAND KEY("2") "2-Cancelar"  "Cancela Notas Fiscais de Entrada."
       HELP 013
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       LET l_continua = TRUE
       IF find4GLFunction("supy117_nfe_transito_ja_impressa") THEN
          IF supy117_nfe_transito_ja_impressa(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              p_nf_sup.ies_nf_aguard_nfe,
                                              p_nf_sup.ies_especie_nf, TRUE) THEN
             LET l_continua = FALSE
          END IF
       END IF

       IF p_dados_tela.num_nf IS NOT NULL THEN
          IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","EX")  THEN
             IF sup376_verifica_fechamento() THEN
                IF l_continua THEN
                   CALL sup376_consulta_dados()
                   IF p_ies_canc = FALSE THEN
                      LET p_ies_canc = TRUE
                      LET p_ies_nfe_emit = "N"
                      WHENEVER ERROR CONTINUE
                      SELECT ies_nfe_emit
                        INTO p_ies_nfe_emit
                        FROM nfe_sup_compl
                       WHERE cod_empresa   = p_nf_sup.cod_empresa
                         AND num_aviso_rec = p_nf_sup.num_aviso_rec
                      WHENEVER ERROR STOP
                      IF p_ies_nfe_emit <> "S" THEN
                         IF m_utiliza_nf_eletronica = 'S' THEN
                            CALL obf3760_verifica_sup_nf_eletronica(p_nf_sup.cod_empresa,
                                                                     p_nf_sup.num_aviso_rec,
                                                                     "CANCELAR") RETURNING p_status, m_msg

                            IF p_status THEN
                               CALL log0030_mensagem(m_msg,"excl")
                               LET p_ies_canc = FALSE
                            END IF

                            #IF p_dados_tela.ies_nf_aguard_nfe = "6" THEN
                            #   CALL log0030_mensagem("Nota ainda não processada pela Sefaz.","exclamation")
                            #   LET p_ies_canc = FALSE
                            #ELSE
                            #   CALL log0030_mensagem("Nota ainda não processada pela Sefaz.","exclamation")
                            #   LET p_ies_canc = FALSE
                            #END IF
                         ELSE
                         #---fim----OS 534866 #
                            IF p_dados_tela.ies_nf_aguard_nfe = "6" THEN
                               CALL log0030_mensagem("Nota ainda não impressa, deve ser excluida","exclamation")
                               LET p_ies_canc = FALSE
                            ELSE
                               CALL log0030_mensagem("Nota fiscal deve ser excluída","exclamation")
                               LET p_ies_canc = FALSE
                            END IF
                         END IF
                      ELSE
                         IF m_utiliza_nf_eletronica = 'S' THEN
                            CALL obf3760_verifica_sup_nf_eletronica(p_nf_sup.cod_empresa,
                                                                     p_nf_sup.num_aviso_rec,
                                                                     "CANCELAR") RETURNING p_status, m_msg


                            IF p_status THEN
                               CALL log0030_mensagem(m_msg,"excl")
                               LET p_ies_canc = FALSE
                            END IF

                            #IF p_dados_tela.ies_nf_aguard_nfe = "6" THEN
                            #   CALL log0030_mensagem("Nota ainda não processada pela Sefaz.","exclamation")
                            #   LET p_ies_canc = FALSE
                            #ELSE
                            #   CALL log0030_mensagem("Nota ainda não processada pela Sefaz.","exclamation")
                            #   LET p_ies_canc = FALSE
                            #END IF
                         END IF
                      END IF
                   ELSE
                      CALL log0030_mensagem("Nota Fiscal Cancelada","exclamation")
                      LET p_ies_canc = FALSE
                   END IF

                   IF p_ies_canc = TRUE THEN
                      IF (p_nf_sup.ies_incl_contab = "S" OR p_nf_sup.ies_incl_contab = "M") THEN
                         CALL sup376_verifica_lancamentos()
                      END IF

                      IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, p_conta_lanc,
                                                                        "1", "N") THEN
                          IF sup0631_verifica_relac("NF",
                                                    p_nf_sup.num_nf,
                                                    p_nf_sup.ser_nf,
                                                    p_nf_sup.ssr_nf,
                                                    p_nf_sup.cod_fornecedor) = TRUE THEN
                          ELSE
                             IF NOT sup3762_ies_nf_cancl_possui_erro(p_nf_sup.cod_empresa, p_nf_sup.num_aviso_rec) THEN
                                IF sup376_verifica_carta_correcao() = FALSE AND
                                   sup3760_existe_nota_debito_automatica() = FALSE  THEN
                                   ##Colocado em comentário, pois na função verifica_devolucao já
                                   ##está verificando se há abatimentos na duplicata ou se tem NC
                                   ##já utilizada. Quando tem abatimento ou NC já utilizada
                                   ##não é permitido o cancelamento da NF, senão é feito o
                                   ##cancelamento da NF, da NC e eliminado as tabelas
                                   ##sup_nf_devol_cli, dev_mestre e dev_item. No caso do
                                   ##cliente não ter interface com o CRE, será apenas eliminado
                                   ##o registro das tabelas sup_nf_devol_cli, dev_mestre e dev_item.
                                   ##OS 400008
                                   #IF sup376_verifica_relacionamento_nfs() = FALSE THEN
                                      CALL sup376_deleta_ar_frete_cesta()
                                      IF sup3760_verifica_devolucao("CANCEL") = FALSE THEN
                                         CALL sup376_cancela_nota_fiscal()
                                      END IF
                                   #ELSE
                                      #CALL log0030_mensagem(" Antes de Cancelar a Nota, voce deve excluir relacionamento no SUP5240","exclamation")
                                   #END IF
                                ELSE
                                   CALL log0030_mensagem(" Antes de Cancelar a Nota, voce deve excluir a Carta de Correcao ","exclamation")
                                END IF
                             ELSE
                                CALL log0030_mensagem("Favor assumir erro da Nota Fiscal antes de cancelar a mesma.","exclamation")
                             END IF
                          END IF
#                         END IF
                      END IF
                   END IF
                END IF
             ELSE
                CALL log0030_exibe_ultima_mensagem()
             END IF
          END IF
       ELSE
          CALL log0030_mensagem("Consulte previamente para executar esta funcao","exclamation")
       END IF
    COMMAND "Modificar" "Modifica Nota Fiscal"
       HELP 002
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11

       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       # Passo 33                 #
       LET l_continua = TRUE
       IF m_wms_instal = "S" THEN
          CALL wms6135_permissao_alteracao_nf_receb(p_cod_empresa,
                                                    p_dados_tela.num_aviso_rec,
                                                    TRUE) RETURNING l_status, l_mensagem
          IF NOT l_status THEN
             CALL log0030_processa_mensagem(l_mensagem CLIPPED,"exclamation",0)
             LET l_continua = FALSE
          END IF
       END IF
       #---------------#

       IF l_continua THEN
          IF p_dados_tela.num_nf IS NOT NULL  THEN
             IF p_par_sup.ies_carta_correcao = "5" AND
                sup3760_existe_nota_debito_automatica() = TRUE AND
                sup376_verifica_carta_correcao() = TRUE THEN
                CALL log0030_mensagem("Antes de modificar o aviso de recebimento\n deve-se excluir a Carta de Correcao e/ou Nota de Débito. ","exclamation")
             ELSE
                IF sup3760_isProcesso_importacao() THEN
                   CALL log0030_mensagem("Ação não permitida. Nota fiscal complementar gerada através do processo de importação.","exclamation")
                ELSE
                   IF NOT sup3760_usa_orcamento_online() THEN
                      IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","MO")  THEN
                         LET p_ies_aguard_nfe = " "
                         CALL sup376_busca_nf_sup(p_dados_tela.num_aviso_rec)
                         LET p_ies_aguard_nfe = p_nf_sup.ies_nf_aguard_nfe
                         IF sup376_verifica_fechamento() OR
                            p_ies_aguard_nfe = "7" THEN
                            CALL sup376_consulta_dados()
                            IF p_ies_canc = FALSE THEN
                               # CH 739942 - Rafael F. B. - 11/01/2010 #
                               LET l_permite_modificar = FALSE

                               IF m_permite_alt_inf_compl_nf_cap = "S" THEN
                                  IF sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2", "N") THEN
                                     LET m_existe_cap = TRUE
                                  ELSE
                                     LET m_existe_cap = FALSE
                                  END IF

                                  IF p_nf_sup.ies_incl_contab <> "S" AND p_nf_sup.ies_incl_contab <> "M" THEN
                                     LET l_permite_modificar = TRUE
                                  END IF
                               ELSE
                                  IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2", "N") THEN
                                     LET l_permite_modificar = TRUE
                                  ELSE
                                     LET l_permite_modificar = FALSE
                                  END IF
                               END IF

                               IF l_permite_modificar THEN
                                  #--inicio--vanderlei OS 393937 #
                                  IF NOT sup3760_nf_dev_relac_nf_saida(p_cod_empresa,
                                                                       p_dados_tela.num_aviso_rec,
                                                                       "MODIFICACAO") THEN
                                     #---fim----vanderlei OS 393937 #
                                     IF sup0631_verifica_relac("NF",
                                                               p_nf_sup.num_nf,
                                                               p_nf_sup.ser_nf,
                                                               p_nf_sup.ssr_nf,
                                                               p_nf_sup.cod_fornecedor) = TRUE THEN
                                     ELSE
                                        IF sup376_nfe_emitida() THEN
                                          IF NOT sup3760_verifica_inspecao() THEN
                                              IF p_dados_tela.ies_especie_nf = "TCK" AND
                                                 sup376_existe_frete_relac() THEN
                                                 CALL log0030_mensagem( " Ticket com frete nao pode ser alterado ","exclamation")
                                              ELSE
                                                 CALL sup376_modificacao_aviso_rec()
                                                 IF m_wms_instal = "S" THEN
                                                    IF find4GLFunction('wms6612_atualiza_sup_par_ar') THEN
                                                       IF p_dados_tela.num_aviso_rec IS NOT NULL AND
                                                          p_dados_tela.num_aviso_rec <> 0 THEN

                                                             CALL wms6612_atualiza_sup_par_ar(p_dados_tela.num_aviso_rec,
                                                                                              m_indicador_aduaneiro,
                                                                                              m_tipo_documento)

                                                       END IF
                                                    END IF
                                                 END IF
                                              END IF
                                           ELSE
                                              ERROR "NF ja impressa e efetuada contagem nao pode ser alterada"
                                           END IF
                                        ELSE
                                           IF p_dados_tela.ies_especie_nf = "TCK" AND
                                              sup376_existe_frete_relac() THEN
                                              CALL log0030_mensagem( " Ticket com frete nao pode ser alterado ","exclamation")
                                           ELSE
                                              CALL sup376_modificacao_aviso_rec()
                                              IF m_wms_instal = "S" THEN
                                                 IF find4GLFunction('wms6612_atualiza_sup_par_ar') THEN
                                                    IF p_dados_tela.num_aviso_rec IS NOT NULL AND
                                                       p_dados_tela.num_aviso_rec <> 0 THEN
                                                       CALL wms6612_atualiza_sup_par_ar(p_dados_tela.num_aviso_rec,
                                                                                        m_indicador_aduaneiro,
                                                                                        m_tipo_documento)
                                                    END IF
                                                 END IF
                                              END IF
                                           END IF
                                        END IF
                                     END IF
                                  #--inicio--vanderlei OS 393937 #
                                  ELSE
                                     CALL log0030_mensagem("NF de devolução cliente relacionada a NF de venda, não pode ser modificada.","exclamation")
                                  END IF
                                  #---fim----vanderlei OS 393937 #
                               END IF
                            ELSE
                               CALL log0030_mensagem("Nota Fiscal Cancelada","exclamation")
                            END IF
                            IF p_ies_bloq_cont = "S" THEN
                               SELECT ies_liberacao_cont
                                 FROM nf_sup
                                WHERE cod_empresa      = p_cod_empresa
                                  AND nf_sup.aviso_rec = p_aviso_rec.num_aviso_rec
                                  AND aviso_rec.ies_liberacao_cont = "S"
                                  AND par_estoque.ies_custo_medio  = "D"
                                  AND aviso_rec.ies_situa_ar       = "E"
                                   IF sqlca.sqlcode = 0 THEN
                                      CALL log0030_mensagem("Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada","exclamation")
                                   END IF
                            END IF
                         ELSE
                            CALL log0030_exibe_ultima_mensagem()
                         END IF
                      END IF
                   ELSE
                      CALL log0030_mensagem("Orcamento online instalado, favor excluir contagem ","exclamation")
                   END IF
                END IF
             END IF
          ELSE
             CALL log0030_mensagem(" Consulte previamente para fazer a modificacao","exclamation")
          END IF
       END IF

    COMMAND KEY ("?") "?_relac_nfm_nfp" "Relacionamento de NFM x NFP "
       HELP 014
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       IF p_dados_tela.num_nf        IS NOT NULL THEN
          CALL log120_procura_caminho("sup2570") RETURNING comando3
          LET comando3 = comando3 CLIPPED   ," ",
                         p_cod_empresa      ," ",
                         p_dados_tela.num_aviso_rec
          RUN comando3 RETURNING p_cancel
       ELSE
          CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
       END IF

    COMMAND KEY ("Q")"Q-Impostos" "Abre o programa de manutencao dos impostos. "
       HELP 016
       MESSAGE ""
        DISPLAY "                                                                               " AT 19,01
        DISPLAY "                                                             "  AT 9,11
       LET p_sup449_cap = FALSE
       LET p_sup449_mes = FALSE
       IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
          IF sup376_verifica_fechamento() THEN
             CALL sup376_consulta_dados()
             IF sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                           "N") THEN
                LET p_sup449_cap = TRUE
             ELSE
                IF sup0631_verifica_relac("NF",
                                          p_nf_sup.num_nf,
                                          p_nf_sup.ser_nf,
                                          p_nf_sup.ssr_nf,
                                          p_nf_sup.cod_fornecedor) = TRUE THEN
                END IF
             END IF
          ELSE
             LET p_sup449_mes = TRUE
          END IF
          CALL log120_procura_caminho('SUP4490') RETURNING comando3
          IF (p_cod_ret_imp IS NULL OR p_cod_ret_imp = " ") THEN
             LET p_ies_imp_renda = "N"
          ELSE
             LET p_ies_imp_renda = "S"
          END IF
          IF p_dados_tela.ser_nf = " " OR
             p_dados_tela.ser_nf IS NULL THEN
             LET p_dados_tela.ser_nf = "@"
          END IF
          LET comando3 = comando3 CLIPPED," ",
                         p_cod_empresa,   " ",
                         p_dados_tela.num_nf,  " ",
                         p_dados_tela.ser_nf,  " ",
                         p_dados_tela.ssr_nf,  " ",
                         p_dados_tela.ies_especie_nf, " ",
                         p_sup449_mes, " ",
                         p_sup449_cap," ",
                         p_dados_tela.dat_entrada_nf ," ",
                         p_ies_imp_renda," ",
                         p_dados_tela.num_aviso_rec
          RUN comando3 RETURNING p_cancel
          IF p_dados_tela.ser_nf = "@" THEN
             LET p_dados_tela.ser_nf = " "
          END IF

          IF p_sup449_mes = FALSE AND p_sup449_cap = FALSE THEN
             IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","MO") THEN
                IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                                  m_consiste_nf_integr) THEN
                   IF p_par_estoque.ies_custo_medio = "D" THEN
                      CALL sup0047_rateio_frete()
                   END IF

                   #752783#
                   LET l_data = EXTEND(CURRENT, YEAR TO SECOND)
                   LET l_data = l_data - 1 UNITS HOUR

                   WHENEVER ERROR CONTINUE
                   SELECT dat_hor_proces
                     FROM audit_ar
                    WHERE cod_empresa        = p_cod_empresa
                      AND num_aviso_rec      = p_dados_tela.num_aviso_rec
                      AND ies_tipo_auditoria = '4'
                      AND dat_hor_proces     >= l_data
                      AND num_prog           IN ("SUP3790",
                                                 "SUP3800",
                                                 "SUP4040",
                                                 "SUP9060",
                                                 "SUP0212",
                                                 "SUP0105",
                                                 "SUP1083",
                                                 "SUP0819",
                                                 "SUP3810",
                                                 "SUP1255",
                                                 "SUP4491",
                                                 "SUP1478",
                                                 "SUP1701")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 OR sqlca.sqlcode = -284 THEN
                      IF m_cons_modific = "S" THEN
                         CALL sup376_processa_consistencia("S")
                      ELSE
                         IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
                         END IF
                      END IF
                   END IF
                   #---fim--- 752783#

                   CALL sup0047_rateio_frete()
                END IF
             END IF
          END IF
       ELSE
          CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
          CALL sup3760_mostra_conhec_sup_frete_x()
       END IF
       IF p_ies_canc = TRUE THEN
           DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF

    COMMAND KEY ("N")"coNsiste"  "Efetua consistencia dos valores da N.F."
       HELP 017
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       IF p_dados_tela.num_nf        IS NOT NULL THEN
          IF sup376_verifica_fechamento() THEN
             CALL sup376_consulta_dados()
             IF p_ies_canc = FALSE THEN
                IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","MO") THEN
                   IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                                     m_consiste_nf_integr) THEN
                      IF p_par_estoque.ies_custo_medio = "D" THEN
                         CALL sup0047_rateio_frete()
                      END IF
                      CALL sup376_processa_consistencia("S")
                      CALL sup0047_rateio_frete()
                   END IF
                END IF
             ELSE
                CALL log0030_mensagem("Nota Fiscal Cancelada","exclamation")
             END IF
          ELSE
             CALL log0030_exibe_ultima_mensagem()
          END IF
       ELSE
          CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
        DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
          CALL sup3760_mostra_conhec_sup_frete_x()
       END IF
       IF p_ies_canc = TRUE THEN
           DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF
    COMMAND KEY ("R")"eRros"    "Consulta erros detectados na funcao consiste"
       HELP 018
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       IF p_dados_tela.num_nf        IS NOT NULL THEN
          CALL sup376_busca_nf_sup(p_dados_tela.num_aviso_rec)
          LET p_nom_resp_aceite_er = p_nf_sup.nom_resp_aceite_er
          CALL sup377_zoom_erros(p_cod_empresa, p_dados_tela.num_aviso_rec, p_nom_resp_aceite_er)
       ELSE
          CALL log0030_mensagem("Consulte previamente para executar esta funcao ","exclamation")
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
           DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
           CALL sup3760_mostra_conhec_sup_frete_x()
       END IF
       CALL sup376_consulta_dados()
       IF p_ies_canc = TRUE THEN
          DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF

    COMMAND KEY ("U") "assUmir erros" "Assumir erros que foram detectados"
       HELP 019
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       IF p_dados_tela.num_nf IS NULL THEN
          CALL log0030_mensagem(" Consulte previamente para executar esta função","exclamation")
       ELSE
          CALL sup3760_assume_erros_nf()
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
        DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
          CALL sup3760_mostra_conhec_sup_frete_x()
       END IF
       CALL sup376_consulta_dados()
       IF p_ies_canc = TRUE THEN
           DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF

    COMMAND KEY ("G") "contaGem" "Chama programa de contagem dos itens "
       HELP 020
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       ### OS237529 ###
       INITIALIZE l_prog_contagem TO NULL
       SELECT par_txt
         INTO l_prog_contagem
         FROM par_sup_pad
        WHERE par_sup_pad.cod_empresa   = p_cod_empresa
          AND par_sup_pad.cod_parametro = "prog_contagem"
       IF sqlca.sqlcode <> 0 OR
          l_prog_contagem IS NULL THEN
          LET l_prog_contagem = " "
       END IF

       IF l_prog_contagem = "sup0799" THEN
          IF p_dados_tela.num_nf IS NULL THEN
             CALL log120_procura_caminho("sup0799") RETURNING comando3
             LET comando3 = comando3 CLIPPED
             RUN comando3 RETURNING p_cancel
          ELSE
             CALL log120_procura_caminho("sup0799") RETURNING comando3
             LET comando3 = comando3 CLIPPED, " ",p_cod_empresa, " ",
                                                  p_dados_tela.num_aviso_rec
             RUN comando3 RETURNING p_cancel
          END IF
       ELSE
          IF p_dados_tela.num_nf IS NULL THEN
             CALL log120_procura_caminho("sup0530") RETURNING comando3
             LET comando3 = comando3 CLIPPED
             RUN comando3 RETURNING p_cancel
          ELSE
             CALL log120_procura_caminho("sup0530") RETURNING comando3
             LET comando3 = comando3 CLIPPED, " ",  p_cod_empresa, " ",
                                                  p_dados_tela.num_aviso_rec,
                                                  " 0 ", 3760
             RUN comando3 RETURNING p_cancel
          END IF
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
          CALL sup3760_mostra_conhec_sup_frete_x()
       END IF
       CALL sup376_consulta_dados()
       IF p_ies_canc = TRUE THEN
          DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF

    COMMAND KEY ("O") "O_lancamentos" "Chama programa de lancamentos contabeis Manuais "
       HELP 024
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       IF p_dados_tela.num_nf IS NOT NULL THEN
          LET p_cod_fornec144 = p_dados_tela.cod_fornecedor
          FOR p_ind8 = 1 TO 10
              IF p_dados_tela.cod_fornecedor[p_ind8] = " " THEN
                 LET p_cod_fornec144[p_ind8] = "y"
              END IF
          END FOR
          IF p_dados_tela.ser_nf IS NULL OR
             p_dados_tela.ser_nf = " " THEN
             LET p_dados_tela.ser_nf = "@"
          END IF
          CALL log120_procura_caminho("sup1440") RETURNING comando3
          LET comando3 = comando3 CLIPPED," ",  p_dados_tela.num_nf, " ",
                                                p_dados_tela.ser_nf, " ",
                                                p_dados_tela.ssr_nf, " ",
                                                p_dados_tela.ies_especie_nf, " ",
                                                p_cod_fornec144, " ",
                                                p_dados_tela.num_aviso_rec, " ",
                                                p_cod_empresa
          RUN comando3 RETURNING p_cancel
          IF p_dados_tela.ser_nf = "@" THEN
             LET p_dados_tela.ser_nf = " "
          END IF
       ELSE
          CALL log120_procura_caminho("sup1440") RETURNING comando3
          LET comando3 = comando3 CLIPPED
          RUN comando3 RETURNING p_cancel
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
          CALL sup3760_mostra_conhec_sup_frete_x()
       END IF
       CALL sup376_consulta_dados()
       IF p_ies_canc = TRUE THEN
          DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF

    COMMAND KEY("1") "1_conta_aen" "Chama programa de distribuicao por Conta/Area/Linha de negocio"
       HELP 027
       MESSAGE ""
       IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
          IF sup376_verifica_fechamento() THEN
             CALL sup376_consulta_dados()
             CALL log120_procura_caminho("sup2370") RETURNING comando3
             LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_aviso_rec, " ",
                                                  p_array[1].seq, " ",
                                                  p_cod_empresa
             RUN comando3 RETURNING p_cancel
          ELSE
             CALL log120_procura_caminho("sup2370") RETURNING comando3
             LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_aviso_rec, " ", #792485#
                                                  p_array[1].seq, " ",
                                                  p_cod_empresa
             RUN comando3 RETURNING p_cancel
          END IF
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
          CALL sup3760_mostra_conhec_sup_frete_x()
       END IF
       CALL sup376_consulta_dados()
       IF p_ies_canc = TRUE THEN
          DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF

    COMMAND KEY("Y") "Y-tot_nf_calc" "Consulta valores calculados."
       HELP 028
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       IF p_dados_tela.num_nf IS NOT NULL THEN
          CALL sup382_consulta_valores_calculados(p_cod_empresa, p_dados_tela.num_nf, p_dados_tela.ser_nf, p_dados_tela.ssr_nf, p_dados_tela.cod_fornecedor, p_dados_tela.num_aviso_rec)
       ELSE
          CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
          CALL sup3760_mostra_conhec_sup_frete_x()
       END IF
       CALL sup376_consulta_dados()
       IF p_ies_canc = TRUE THEN
          DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF

    COMMAND  KEY("7") "7_inf_compl_nf" "Consulta informacoes complementares da NF."
       HELP 029
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       LET p_sup_cap = FALSE
       LET p_sup_mes = FALSE
       IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
          IF sup376_verifica_fechamento() THEN
             CALL sup376_consulta_dados()
             IF ((p_nf_sup.ies_incl_cap = "S"  OR p_nf_sup.ies_incl_cap = "B")
                  AND p_ies_pagamento = "2") OR
                 (p_nf_sup.ies_incl_contab = "S" OR p_nf_sup.ies_incl_contab = "M") THEN
                LET p_sup_cap = TRUE
             END IF
             IF sup0631_verifica_relac("NF",
                                       p_nf_sup.num_nf,
                                       p_nf_sup.ser_nf,
                                       p_nf_sup.ssr_nf,
                                       p_nf_sup.cod_fornecedor) = TRUE THEN
             END IF
          ELSE
             LET p_sup_mes = TRUE
          END IF
          CALL log120_procura_caminho("sup3840") RETURNING comando3
          LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec," ",
                                           p_sup_mes, " ",
                                           p_sup_cap, " ",
                                           p_cod_empresa
          RUN comando3 RETURNING p_cancel
       ELSE
          CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)

       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
          CALL sup3760_mostra_conhec_sup_frete_x()
       END IF

       #OS546681
       #Retirado comentários da chamada sup376_busca_argumen()
       #Quando é feito entrada de valores de frete através da opcao 7_inf_compl_nf e voltando
       #a tela principal, não estava atualizando os valores de frete ja calculados.
       LET p_cod_empresa_arg   = p_cod_empresa
       LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
       CALL sup376_busca_argumen()

       #Atribuido false para p_cons_arg para que não cancele a paginação nesse caso conforme
       #comentário acima
       LET p_cons_arg = FALSE
       #FIM OS546681

       CALL sup376_consulta_dados()

       INITIALIZE l_val_frete TO NULL
       WHENEVER ERROR CONTINUE
       SELECT parametro_val
         INTO l_val_frete
         FROM sup_par_ar
        WHERE empresa           = p_cod_empresa
          AND aviso_recebto     = p_dados_tela.num_aviso_rec
          AND seq_aviso_recebto = 0
          AND parametro         = "val_frete"
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 OR
          l_val_frete IS NULL THEN
          LET l_val_frete = 0
       END IF

       INITIALIZE l_grp_desp_st TO NULL
       WHENEVER ERROR CONTINUE
       SELECT parametro_val
         INTO l_grp_desp_st
         FROM sup_par_ar
        WHERE empresa         = p_cod_empresa
          AND aviso_recebto   = p_dados_tela.num_aviso_rec
          AND parametro       = 'grupo_frete_st'
       WHENEVER ERROR STOP

       IF l_grp_desp_st IS NOT NULL OR l_val_frete > 0 THEN
          IF sup376_verifica_fechamento() THEN
             IF p_ies_canc = FALSE THEN
                IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","MO") THEN
                   IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                                     m_consiste_nf_integr) THEN

                      #752783#
                      LET l_data = EXTEND(CURRENT, YEAR TO SECOND)
                      LET l_data = l_data - 1 UNITS HOUR

                      WHENEVER ERROR CONTINUE
                      SELECT dat_hor_proces
                        FROM audit_ar
                       WHERE cod_empresa        = p_cod_empresa
                         AND num_aviso_rec      = p_dados_tela.num_aviso_rec
                         AND ies_tipo_auditoria = '4'
                         AND dat_hor_proces     >= l_data
                         AND num_prog           = "SUP3840"
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode = 0 OR sqlca.sqlcode = -284 THEN
                         IF m_cons_modific = "S" THEN
                            CALL sup376_processa_consistencia("I")
                         ELSE
                            IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
                            END IF
                         END IF
                      END IF
                      #---fim--- 752783#
                   END IF
                END IF
             END IF
          END IF
       END IF

       IF p_ies_canc = TRUE THEN
          DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF

    COMMAND KEY("P")  "inf_comPl_item" "Manutencao dos dados dos itens da N.F."
       HELP 030
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       IF p_dados_tela.num_nf   IS NOT NULL THEN
          CALL sup376_consulta_dados()
          CALL log120_procura_caminho("sup0740") RETURNING comando3
          LET comando3 = comando3 CLIPPED, " ",p_cod_empresa, " ",
                                             p_dados_tela.num_aviso_rec
          RUN comando3 RETURNING p_cancel
# OS 415085 - Winston
#         LET p_cod_empresa_arg = p_cod_empresa
#         LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
#         CALL sup376_busca_argumen()

          CALL sup376_exibe_array() # OS 415085 - Winston

          CALL sup376_consulta_dados()
          LET int_flag = 0
          IF sup376_verifica_fechamento() THEN
             IF p_ies_canc = FALSE THEN
                IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","MO") THEN
                   IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                                     m_consiste_nf_integr) THEN
                      IF p_par_estoque.ies_custo_medio = "D" THEN
                         CALL sup0047_rateio_frete()
                      END IF

                      #752783#
                      LET l_data = EXTEND(CURRENT, YEAR TO SECOND)
                      LET l_data = l_data - 1 UNITS HOUR

                      WHENEVER ERROR CONTINUE
                      SELECT dat_hor_proces
                        FROM audit_ar
                       WHERE cod_empresa        = p_cod_empresa
                         AND num_aviso_rec      = p_dados_tela.num_aviso_rec
                         AND ies_tipo_auditoria = '4'
                         AND dat_hor_proces     >= l_data
                         AND num_prog           = "SUP0740"
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode = 0 OR sqlca.sqlcode = -284 THEN
                         IF m_cons_modific = "S" THEN
                            CALL sup376_processa_consistencia("N")
                         ELSE
                            IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
                            END IF
                         END IF
                      END IF
                      #---fim--- 752783#
                      CALL sup0047_rateio_frete()
                   END IF
                END IF
             END IF
          ELSE
             IF m_inclui_observacao_item_ar = "N" THEN #-- OS 521861 --#
                CALL log0030_exibe_ultima_mensagem()
             END IF
          END IF
       ELSE
          CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
          CALL sup3760_mostra_conhec_sup_frete_x()
       END IF
       CALL sup376_consulta_dados()
       IF p_ies_canc = TRUE THEN
          DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF

    COMMAND KEY("X") "X-info_fiscal_item" "Manutencao das informacoes do item "
       HELP 031
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       LET p_sup_cap = FALSE
       LET p_sup_mes = FALSE
       IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
          IF sup376_verifica_fechamento() THEN
             CALL sup376_consulta_dados()

             IF p_nf_sup.ies_incl_contab = "S" OR
                p_nf_sup.ies_incl_contab = "M"
             THEN
                LET p_ies_incl_cap = TRUE
             ELSE
                LET p_ies_incl_cap = FALSE
             END IF
             IF p_ies_incl_cap = TRUE THEN
                LET p_sup_cap = TRUE
             ELSE
                IF sup0631_verifica_relac("NF",
                                          p_nf_sup.num_nf,
                                          p_nf_sup.ser_nf,
                                          p_nf_sup.ssr_nf,
                                          p_nf_sup.cod_fornecedor) = TRUE THEN
                END IF
             END IF
          ELSE
             LET p_sup_mes = TRUE
          END IF
          CALL log120_procura_caminho("sup3870") RETURNING comando3
          LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec," ",
                                           p_sup_mes, " ",
                                           p_sup_cap, " ",
                                           p_cod_empresa
          RUN comando3 RETURNING p_cancel
          #809554
          LET l_data = EXTEND(CURRENT, YEAR TO SECOND)
          LET l_data = l_data - 1 UNITS HOUR

          WHENEVER ERROR CONTINUE
          SELECT dat_hor_proces
            FROM audit_ar
           WHERE cod_empresa        = p_cod_empresa
             AND num_aviso_rec      = p_dados_tela.num_aviso_rec
             AND ies_tipo_auditoria = '4'
             AND dat_hor_proces     >= l_data
             AND num_prog           = "SUP3870"
          WHENEVER ERROR STOP
          IF sqlca.sqlcode = 0 OR sqlca.sqlcode = -284 THEN
             IF m_cons_modific = "S" THEN
                CALL sup376_processa_consistencia("S")
             ELSE
                IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
                END IF
             END IF
          END IF
          #---fim--- 809554#
       ELSE
          CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
       END IF
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       ERROR " "
       DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
          CALL sup3760_mostra_conhec_sup_frete_x()
       END IF
       CALL sup376_consulta_dados()
       IF p_ies_canc = TRUE THEN
          DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
       END IF
    COMMAND KEY("K") "K-imprime_ar" "Imprime aviso de recebimento "
      HELP 032
      MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
      WHENEVER ERROR CONTINUE
      LET l_num_prog_imp_ar = sup376_busca_par_sup_pad("num_progr_imp_ar",3)
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 OR
         l_num_prog_imp_ar IS NULL OR
         l_num_prog_imp_ar = " "   THEN
         LET l_num_prog_imp_ar = "sup1542"
      END IF
      IF p_dados_tela.num_nf   IS NOT NULL  THEN
         CALL log120_procura_caminho(l_num_prog_imp_ar) RETURNING comando3
         LET comando3 = comando3 CLIPPED," ",p_dados_tela.num_aviso_rec, " ",
                                             p_cod_empresa
         RUN comando3 RETURNING p_cancel
      ELSE
         CALL log120_procura_caminho(l_num_prog_imp_ar) RETURNING comando3
         LET comando3 = comando3 CLIPPED
         RUN comando3 RETURNING p_cancel
      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF
   COMMAND KEY("=") "=_Lista_nfe" "Impressao de nota fiscal de entrada "
      HELP 052
      MESSAGE ""
      DISPLAY "                                                                               " AT 19,01
      INITIALIZE m_prog_nfe TO NULL
      WHENEVER ERROR CONTINUE
      SELECT par_txt
        INTO m_prog_nfe
        FROM par_sup_pad
       WHERE cod_empresa   = p_cod_empresa
         AND cod_parametro = "num_progr_nfe"
      WHENEVER ERROR STOP
      IF sqlca.sqlcode = 0 AND
         m_prog_nfe IS NOT NULL AND
         m_prog_nfe <> "  " THEN
         CALL log120_procura_caminho(m_prog_nfe) RETURNING comando3
         RUN comando3 RETURNING p_cancel
      ELSE
         ERROR " Programa de impressao NFE nao parametrizado(SUP7670) "
      END IF
   COMMAND KEY ("H") "H-mat_terceiros"  "Controle/Manutencao de Materiais DE/EM terceiros"
      HELP 033
      MESSAGE ""
      IF p_dados_tela.ser_nf IS NULL OR
         p_dados_tela.ser_nf = " " THEN
         LET p_dados_tela.ser_nf = "@"
      END IF
   ## OS 40708
      CALL sup3762_busca_fornecedor_triangulacao(p_dados_tela.num_aviso_rec, p_array[1].seq) RETURNING l_cod_fornecedor
      CALL log120_procura_caminho("sup3763") RETURNING comando3
      LET comando3 = comando3 CLIPPED," ", p_dados_tela.num_nf, " ",
                                         p_dados_tela.ser_nf, " ",
                                         p_dados_tela.ssr_nf, " ",
                                         p_dados_tela.ies_especie_nf, " ",
                                         l_cod_fornecedor, " ",
                                         p_dados_tela.num_aviso_rec, " ",
                                         p_array[1].seq, " ",
                                         p_cod_empresa
      RUN comando3 RETURNING p_cancel
      IF p_dados_tela.ser_nf = "@" THEN
         LET p_dados_tela.ser_nf = " "
      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF

    COMMAND KEY ("V") "V_nf_vendas"  "Chama programa para inclusao de Nota de Saida para NF's de Devolucao"
      HELP 034
      MESSAGE ""
      IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
         IF (p_dados_tela.ies_especie_nf = "NFR"  OR
             p_dados_tela.ies_especie_nf = "NFE") AND ### OS 511148
             p_dados_tela.ies_nf_aguard_nfe = "X" THEN
            CALL log120_procura_caminho("sup5241") RETURNING comando3
            LET comando3 = comando3 CLIPPED," ", p_dados_tela.num_aviso_rec, " ",
                                                 p_cod_empresa
            RUN comando3 RETURNING p_cancel
         ELSE
            #--inicio--vanderlei OS 364766 #
            IF p_dados_tela.ies_especie_nf = "NFR" AND
              (p_dados_tela.ies_nf_aguard_nfe = "1" OR p_dados_tela.ies_nf_aguard_nfe = "6") AND
               log0150_verifica_se_tabela_existe('sup_relc_ftre_indt') THEN
               CALL log120_procura_caminho("sup5242") RETURNING comando3
               LET comando3 = comando3 CLIPPED," ", p_dados_tela.num_aviso_rec, " ",
                                                    p_cod_empresa
               RUN comando3 RETURNING p_cancel
            ELSE
               IF  p_dados_tela.ies_especie_nf   <> "NFD"
               AND p_ies_tip_entrada             <> '5'
               AND p_dados_tela.ies_nf_aguard_nfe = "6" THEN
                  CALL log120_procura_caminho("obf9000") RETURNING comando3
                  LET comando3 = comando3 CLIPPED," ", p_dados_tela.num_aviso_rec, " ",
                                                       p_cod_empresa
                  RUN comando3 RETURNING p_cancel
               ELSE
                  CALL log120_procura_caminho("sup5240") RETURNING comando3
                  LET comando3 = comando3 CLIPPED," ", p_dados_tela.num_aviso_rec, " ",
                                                       p_cod_empresa
                  RUN comando3 RETURNING p_cancel
               END IF
            END IF
            #---fim----vanderlei OS 364766 #
         END IF

         #760363
         IF find4GLFunction('supy62_nf_dev_saida') THEN
            CALL supy62_nf_dev_saida(p_dados_tela.cod_empresa,
                                     p_dados_tela.num_aviso_rec,
                                     m_utiliza_nf_eletronica,
                                     m_ies_fat_unico,
                                     FALSE)
         END IF
         #760363
      ELSE
         CALL log0030_mensagem(" Consulte previamente ","exclamation")
      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF
    COMMAND KEY("8") "8_OS_investimento" "Inclui registros na tabela AR_OS"
      HELP  035
      MESSAGE ""
      DISPLAY "                                                                               " AT 19,01
      DISPLAY "                                                             "  AT 9,11
      IF p_par_sup_compl.ies_pat_instalado = "S" THEN
         IF p_dados_tela.num_nf   IS NOT NULL  THEN
            CALL log120_procura_caminho("sup5380") RETURNING comando3
            LET comando3 = comando3 CLIPPED," ",p_cod_empresa, " ",
                                              p_dados_tela.num_aviso_rec
            RUN comando3 RETURNING p_cancel
         ELSE
            CALL log120_procura_caminho("sup5380") RETURNING comando3
            LET comando3 = comando3 CLIPPED
            RUN comando3 RETURNING p_cancel
         END IF
      ELSE
         CALL log0030_mensagem("Modulo de patrimonio nao instalado","exclamation")
      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF
    COMMAND KEY("W") "W_relaciona_nfe" "Relacionamento de NF de entrada(NFE) com NF"
      HELP 036
      MESSAGE ""
      DISPLAY "                                                                               " AT 19,01
      DISPLAY "                                                             "  AT 9,11
      IF p_dados_tela.num_nf     IS NOT NULL THEN
         LET p_num_ar376 = p_dados_tela.num_aviso_rec
        CALL sup376_consulta_dados()
        IF p_ies_canc = FALSE THEN
         IF p_nf_sup.ies_especie_nf = "NFE" THEN
            IF sup376_nfe_emitida() THEN
               CALL log0030_mensagem(" ATENCAO !!! Nota fiscal ja impressa nao pode ser alterada ","exclamation")
            ELSE
               IF sup0631_verifica_relac("NF",
                                         p_nf_sup.num_nf,
                                         p_nf_sup.ser_nf,
                                         p_nf_sup.ssr_nf,
                                         p_nf_sup.cod_fornecedor) = TRUE THEN
               ELSE
                  IF p_dados_tela.ies_especie_nf = "TCK" AND
                     sup376_existe_frete_relac() THEN
                     CALL log0030_mensagem( " Ticket com frete nao pode ser alterado ","exclamation")
                  ELSE
                     IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                                       "N") THEN
                        IF p_nf_sup.ies_nf_com_erro = "N" OR
                          (p_nf_sup.ies_nf_com_erro = "S" AND
                           (p_nf_sup.nom_resp_aceite_er IS NOT NULL AND
                            p_nf_sup.nom_resp_aceite_er <> " ")) THEN
                           CALL log120_procura_caminho("sup5400") RETURNING comando3
                           LET comando3 = comando3 CLIPPED," ",p_dados_tela.num_aviso_rec
                           RUN comando3 RETURNING p_cancel
                           IF sup376_verifica_fechamento() THEN
                              IF p_par_estoque.ies_custo_medio = "D" THEN
                                 CALL sup0047_rateio_frete()
                              END IF

                           IF m_cons_modific = "S" THEN
                              CALL sup376_processa_consistencia("N")
                           ELSE
                              IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
                              END IF
                           END IF

                           END IF
                           SELECT COUNT(*)
                             INTO p_tem_erro
                             FROM nf_sup_erro
                            WHERE nf_sup_erro.empresa = p_cod_empresa
                              AND nf_sup_erro.num_aviso_rec = p_dados_tela.num_aviso_rec
                              AND nf_sup_erro.ies_origem_erro <> "4"
                           IF p_tem_erro > 0 THEN
                              CALL log0030_mensagem(" Foram detectados erros na consistencia da Nota Fiscal ","exclamation")
                              #O.S. 529316
                              IF p_dados_tela.num_nf IS NOT NULL
                              AND m_abre_aut_tela_erros = "S" THEN
                                 CALL sup376_busca_nf_sup(p_dados_tela.num_aviso_rec)
                                 LET p_nom_resp_aceite_er = p_nf_sup.nom_resp_aceite_er
                                 CALL sup377_zoom_erros(p_cod_empresa, p_dados_tela.num_aviso_rec, p_nom_resp_aceite_er)
                              END IF
                              #O.S. 529316
                           ELSE
                              CALL log0030_mensagem(" Nao foram detectados erros na consistencia da Nota Fiscal ","exclamation")
                           END IF
                        ELSE
                           CALL log0030_mensagem("Funcao nao permitida. NFE com erro.","exclamation")
                        END IF
                        CALL sup376_consulta_dados()
                        LET p_dados_tela.ies_nf_aguard_nfe = p_nf_sup.ies_nf_aguard_nfe
                        CALL log006_exibe_teclas("01 02 03 07", p_versao)
                        CURRENT WINDOW IS w_sup37601
                        DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
                     END IF
                  END IF
               END IF
            END IF
         ELSE
            CALL log0030_mensagem("Nota fiscal nao e' de ENTRADA (NFE)","exclamation")
         END IF
        ELSE CALL log0030_mensagem("Nota Fiscal Cancelada","exclamation")
        END IF
      ELSE
         CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF
    COMMAND KEY ("!")
      PROMPT "Digite o comando : " FOR comando3
      RUN comando3
      PROMPT "\nTecle ENTER para continuar" FOR CHAR comando3
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF
    COMMAND KEY("9") "9_compl_nfe" "Informacoes complementares da NFE"
      HELP  037
      MESSAGE ""
      DISPLAY "                                                                               " AT 19,01
      DISPLAY "                                                             "  AT 9,11
      CALL log120_procura_caminho("sup7540") RETURNING comando3
      LET comando3 = comando3 CLIPPED," ",p_cod_empresa, " ",p_dados_tela.num_aviso_rec

      RUN comando3 RETURNING p_cancel
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF

    COMMAND "Duplicatas" "Relaciona as duplicatas com NFF"
      HELP 023
      MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
      LET p_nf_sup.cod_empresa = p_cod_empresa
      LET p_nf_sup.num_nf      = p_dados_tela.num_nf
      LET p_nf_sup.ser_nf      = p_dados_tela.ser_nf
      LET p_nf_sup.ssr_nf      = p_dados_tela.ssr_nf
      LET p_nf_sup.cod_fornecedor = p_dados_tela.cod_fornecedor
      IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
         CALL sup376_consulta_dados()
         IF p_ies_pagamento <> "3" THEN
            IF (p_nf_sup.ies_incl_cap = "S" OR p_nf_sup.ies_incl_cap = "B")
               AND p_ies_pagamento = "2"
            THEN
                LET p_ies_incl_cap = TRUE
            ELSE
                LET p_ies_incl_cap = FALSE
            END IF
            IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
               CALL log120_procura_caminho("sup0990") RETURNING comando3
               LET comando3 = comando3 CLIPPED, " ", p_nf_sup.num_aviso_rec, " ",
                                                p_ies_incl_cap, " ",
                                                p_cod_empresa
               RUN comando3 RETURNING p_cancel
               OPTIONS HELP FILE m_arq_help
            ELSE
               CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
            END IF
         ELSE
            CALL log0030_mensagem(" Nota fiscal sem pagamento ","exclamation")
         END IF
      ELSE
         CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF

    COMMAND KEY ("0") "0-ar_ae" "Chama programa de manutencao da AVISO_REC_AE"
      HELP 038
      MESSAGE ""
      DISPLAY "                                                                               " AT 19,01
      DISPLAY "                                                             "  AT 9,11
      IF p_ies_usa_ae = "S" THEN
         IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
            CALL log120_procura_caminho("cto0130") RETURNING comando3
            LET comando3 = comando3 CLIPPED, " ",  p_dados_tela.num_aviso_rec
            RUN comando3 RETURNING p_cancel
            IF p_dados_tela.num_nf IS NOT NULL THEN
               IF sup376_verifica_fechamento() THEN
                  CALL sup376_consulta_dados()
                  IF p_ies_canc = FALSE THEN
                     IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                                       m_consiste_nf_integr) THEN
                        IF p_par_estoque.ies_custo_medio = "D" THEN
                           CALL sup0047_rateio_frete()
                        END IF

                        IF m_cons_modific = "S" THEN
                           CALL sup376_processa_consistencia("N")
                        ELSE
                           IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
                           END IF
                        END IF

                        CALL sup0047_rateio_frete()
                     END IF
                  ELSE
                     CALL log0030_mensagem("Nota Fiscal Cancelada","exclamation")
                  END IF
               ELSE
                  CALL log0030_exibe_ultima_mensagem()
               END IF
            ELSE
               CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
            END IF
         ELSE
            CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
         END IF
      ELSE
         CALL log0030_mensagem(" Empresa nao utiliza Aviso de Entrada","exclamation")
      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
       DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
       IF p_nf_sup.num_conhec <> 0 THEN
          DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF
    COMMAND KEY("#") "#_datas_fabricacao" "Chama o programa de manutencao das datas de fabricacao. "
      HELP 039
      IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
         LET p_ies_dat_fabr_ar = sup376_busca_par_sup_pad("ies_dat_fabr_ar",1)
         IF p_ies_dat_fabr_ar = "S" THEN
            CALL log120_procura_caminho("sup8030") RETURNING comando3
            LET comando3 = comando3 CLIPPED," ", p_cod_empresa,
                                          " ", p_dados_tela.num_aviso_rec,
                                          " ", "C"
            RUN comando3 RETURNING p_cancel
         ELSE
            CALL log0030_mensagem(" Funcao nao permitida. Verifique o programa SUP8740. ","exclamation")
         END IF
      ELSE
         CALL log0030_mensagem(" Consulte previamente antes de executar esta funcao. ","exclamation")
      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF
    COMMAND KEY("$") "$-Nf c/ contrato" "Inclui Nota Fiscal com Contrato"
      HELP 044
      DISPLAY "                                                                               " AT 19,01
      DISPLAY "                                                             "  AT 9,11
      MESSAGE ""
      IF p_ies_mod_contrato = "N" THEN
         CALL log0030_mensagem(" Modulo de Contratos de Servicos nao instalado. ","exclamation")
      ELSE
         IF log005_seguranca(p_user,"SUPRIMEN","SUP8720","IN")  THEN
            CALL log120_procura_caminho("sup8720") RETURNING comando3
            RUN comando3 RETURNING p_cancel
         END IF
      END IF
      LET int_flag = 0
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF
    COMMAND KEY("&") "&_desconto_acrescimo" "Manutencao dos descontos/acrescimos dos itens"
      HELP 040
      MESSAGE ""
      IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
         MENU "OPCAO"
           COMMAND KEY("&") "&_desconto_acrescimo" "Chama o programa de manutencao dos descontos/acrescimos dos itens"
             HELP 062
             MESSAGE ""
             #CALL log120_procura_caminho("sup9010") RETURNING comando3
             #LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
             #RUN comando3 RETURNING p_cancel
             CASE p_dados_tela_f.ies_desc_acres
               WHEN "T"
                   CALL log120_procura_caminho("sup2490") RETURNING comando3
                   LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
                   RUN comando3 RETURNING p_cancel
                   CALL log006_exibe_teclas("01", p_versao)
                   CURRENT WINDOW IS w_sup37601
                   LET p_cod_empresa_arg = p_cod_empresa
                   LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
                   CALL sup376_busca_argumen()
               WHEN "I"
                   CALL log120_procura_caminho("sup9010") RETURNING comando3
                   LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
                   RUN comando3 RETURNING p_cancel
                   CALL log006_exibe_teclas("01", p_versao)
                   CURRENT WINDOW IS w_sup37601
                   LET p_cod_empresa_arg = p_cod_empresa
                   LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
                   CALL sup376_busca_argumen()
               WHEN "S"
                   CALL log120_procura_caminho("sup9010") RETURNING comando3
                   LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
                   RUN comando3 RETURNING p_cancel
                   CALL log006_exibe_teclas("01", p_versao)
                   CURRENT WINDOW IS w_sup37601
                   LET p_cod_empresa_arg = p_cod_empresa
                   LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
                   CALL sup376_busca_argumen()
              OTHERWISE
                  CALL log120_procura_caminho("sup9010") RETURNING comando3
                  LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
                  RUN comando3 RETURNING p_cancel
                  CALL log006_exibe_teclas("01", p_versao)
                  CURRENT WINDOW IS w_sup37601
                  LET p_cod_empresa_arg = p_cod_empresa
                  LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
                  CALL sup376_busca_argumen()
             END CASE
             IF sup1149_efetua_rateio_contabil() THEN
                CALL sup1149_rateio_pela_dest_ordem_sup("SUP3760") RETURNING p_status
             END IF
             IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                               "N") THEN
                IF m_cons_modific = "S" THEN
                   CALL sup376_processa_consistencia("N")
                ELSE
                   IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
                   END IF
                END IF

                CALL sup0047_rateio_frete()
             END IF
    # OS  415085 - Winston
    #         LET p_cod_empresa_arg = p_cod_empresa
    #         LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
    #         CALL sup376_busca_argumen()
              CALL sup376_exibe_array() # OS 415085 - Winston
            COMMAND KEY("D") "Descontos_contábeis" "Chama o programa de manutencao dos descontos contábeis dos itens"
              HELP 063
              MESSAGE ""
              CALL log120_procura_caminho("sup1545") RETURNING comando3
              LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
              RUN comando3 RETURNING p_cancel
              IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                               "N") THEN
                #543061
                IF m_cons_modific = "S" THEN
                   CALL sup376_processa_consistencia("N")
                ELSE
                   CALL sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec)RETURNING p_status
                END IF

                CALL sup0047_rateio_frete()
             END IF
             CALL sup376_exibe_array()
           COMMAND "Fim"        "Retorna ao Menu Anterior"
             HELP 008
             EXIT MENU


  #lds COMMAND KEY ("F11") "Sobre" "Informações sobre a aplicação (F11)."
  #lds CALL LOG_info_sobre(sourceName(),p_versao)

          END MENU
      ELSE
         CALL log0030_mensagem(" Consulte previamente antes de executar esta funcao ","exclamation")
      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF
   COMMAND KEY("3") "3-Pedagio" "Pedagio sobre o Frete"
      HELP 041
      MESSAGE ""
      IF p_dados_tela.num_nf        IS NOT NULL THEN
         IF p_dados_tela.ies_especie_nf = "CON" THEN
            IF p_nf_sup.ser_nf IS NULL OR
               p_nf_sup.ser_nf = " " THEN
               LET p_nf_sup.ser_nf = "@"
            END IF
            CALL log120_procura_caminho("sup9204") RETURNING comando3
            LET comando3 = comando3 CLIPPED ," ",
                           p_nf_sup.cod_empresa      ," ",
                           p_nf_sup.num_nf           ," ",
                           p_nf_sup.ser_nf           ," ",
                           p_nf_sup.ssr_nf           ," ",
                           p_nf_sup.ies_especie_nf   ," ",
                           p_nf_sup.cod_fornecedor   ," "
            RUN comando3 RETURNING p_cancel
            CALL log006_exibe_teclas("01", p_versao)
            CURRENT WINDOW IS w_sup37601
            IF p_nf_sup.ser_nf = "@" THEN
               LET p_nf_sup.ser_nf = " "
            END IF
         ELSE
            CALL log0030_mensagem(" Controle Exclusivo para Notas de Conhecimento de Frete ","exclamation")
         END IF
      ELSE
         CALL log0030_mensagem(" Consulte Previamente para executar essa funcao ","exclamation")
      END IF

   COMMAND KEY("4") "4-Depositante" "Dados do Depositante da Nota "
      HELP 042
      MESSAGE ""
      IF p_dados_tela.num_nf        IS NOT NULL THEN
      WHENEVER ERROR CONTINUE
         SELECT ar_depos.cod_depositante
              FROM ar_depos
             WHERE ar_depos.cod_empresa   = p_cod_empresa AND
                   ar_depos.num_aviso_rec = p_nf_sup.num_aviso_rec
      WHENEVER ERROR STOP
         IF sqlca.sqlcode = 0 OR
            p_dados_tela.ies_nf_aguard_nfe = "A" THEN
             SELECT par_sup_pad.par_ies
               INTO l_ies_armaz_itau
               FROM par_sup_pad
              WHERE par_sup_pad.cod_empresa   = p_cod_empresa
                AND par_sup_pad.cod_parametro = "ies_armaz_itau"
             IF sqlca.sqlcode <> 0 OR
                l_ies_armaz_itau IS NULL OR
                l_ies_armaz_itau = " " THEN
                LET l_ies_armaz_itau = "N"
             END IF

             IF l_ies_armaz_itau = "S" THEN
                IF p_dados_tela.ies_nf_aguard_nfe = "A" OR
                   p_dados_tela.ies_nf_aguard_nfe = "4" THEN
                   CALL log120_procura_caminho("sup9205") RETURNING comando3
                   LET comando3 = comando3 CLIPPED ," ",
                                  p_nf_sup.cod_empresa      ," ",
                                  p_nf_sup.num_aviso_rec    ," "
                   RUN comando3 RETURNING p_cancel
                END IF
             ELSE
                IF p_dados_tela.ies_nf_aguard_nfe = "A" THEN
                   CALL log120_procura_caminho("sup9205") RETURNING comando3
                   LET comando3 = comando3 CLIPPED ," ",
                                  p_nf_sup.cod_empresa      ," ",
                                  p_nf_sup.num_aviso_rec    ," "
                   RUN comando3 RETURNING p_cancel
                END IF
             END IF
         ELSE
            #--------------------------#
            # Alteração WMS OS: 450083 #
            #--------------------------#
            # Passo 21                 #
            IF m_wms_instal = "S" AND m_segmto_utilizacao = "O" THEN
               CALL log0030_mensagem("Opção disponível somente para documentos Provisórios.","exclamation")
            ELSE
               CALL log0030_mensagem(" Opcao exclusiva para notas com origem Fornecedor. ","exclamation")
            END IF
         END IF
      ELSE
         CALL log0030_mensagem(" Consulte Previamente para executar essa funcao","exclamation")
      END IF

    COMMAND KEY("5") "5-Relac_Depos_Fornec" "Relaciona Depositante com o Fornecedor "
      HELP 043
      MESSAGE ""
      IF p_dados_tela.num_nf IS NOT NULL THEN
         WHENEVER ERROR CONTINUE
         SELECT ar_fornec_depos.num_ar_depos
           FROM ar_fornec_depos
          WHERE ar_fornec_depos.cod_empresa   = p_cod_empresa AND
                ar_fornec_depos.num_ar_fornec = p_nf_sup.num_aviso_rec
         WHENEVER ERROR STOP
         IF sqlca.sqlcode = 0 OR
            p_dados_tela.ies_nf_aguard_nfe = "B" THEN
            CALL log120_procura_caminho("sup9206") RETURNING comando3
            LET comando3 = comando3 CLIPPED ," ",
                           p_nf_sup.cod_empresa      ," ",
                           p_nf_sup.num_aviso_rec    ," "
            RUN comando3 RETURNING p_cancel
            CALL log006_exibe_teclas("01", p_versao)
            CURRENT WINDOW IS w_sup37601
         ELSE
            CALL log0030_mensagem("Opcao exclusiva para notas com origem Depositante ","exclamation")
         END IF
      ELSE
         CALL log0030_mensagem(" Consulte Previamente para executar essa funcao ","exclamation")
      END IF

    #eduardo o.s.331540
    COMMAND KEY("*") "*forncedor_triangulacao" "Relaciona o fornecedor ao item enviado."
      HELP 059
      MESSAGE ""
      IF p_dados_tela.num_nf IS NOT NULL THEN
         #LET l_item_triang = FALSE
         #INITIALIZE l_parametro_ind, l_gru_ctr_desp_item TO NULL
         #
         #WHENEVER ERROR CONTINUE
         #DECLARE cq_ar1 CURSOR FOR
         #SELECT gru_ctr_desp_item
         #  FROM aviso_rec
         # WHERE cod_empresa   = p_cod_empresa
         #   AND num_aviso_rec = p_dados_tela.num_aviso_rec
         #FOREACH cq_ar1 INTO l_gru_ctr_desp_item
         #
         #   WHENEVER ERROR CONTINUE
         #   SELECT parametro_ind
         #     INTO l_parametro_ind
         #     FROM obf_par_grp_desp
         #    WHERE obf_par_grp_desp.empresa         = p_cod_empresa
         #      AND obf_par_grp_desp.grp_ctr_despesa = l_gru_ctr_desp_item
         #      AND obf_par_grp_desp.unid_federal    = " "    #a U.F será sempre em branco para este parametro neste caso
         #      AND obf_par_grp_desp.parametro       = "relac_terceirizacao"
         #   WHENEVER ERROR STOP
         #
         #   #--inicio--vanderlei OS 402676 #
         #   LET l_triang_em_terc = 0
         #   #-- "T" - Fornecedor triangulação(Itens de terceiros)  "R" - Fornecedor triangulação(Itens em terceiros) --#
         #   IF l_parametro_ind = "T" OR l_parametro_ind = "R" THEN
         #      LET l_item_triang = TRUE
         #
         #      IF l_parametro_ind = "R" THEN
         #         LET l_triang_em_terc = 1
         #      END IF
         #   END IF
         #   #---fim----vanderlei OS 402676 #
         #
         #END FOREACH
         #WHENEVER ERROR STOP

         CALL sup3760_fornecedor_relac_triangulacao(p_cod_empresa, p_dados_tela.num_aviso_rec, ' ')
            RETURNING l_item_triang, l_triang_em_terc

         IF l_item_triang = TRUE THEN
            CALL sup3760_fornecedor_triangulacao(l_triang_em_terc, FALSE)
            CURRENT WINDOW IS w_sup37601
         ELSE
            CALL log0030_mensagem('O relacionamento no controle de terceiros não é Triangulação.\n Função não permitida','exclamation')
         END IF
         #---fim----vanderlei OS 402676 #
      END IF

    COMMAND KEY("-") "-Libera_WIS" "Permite liberacao da AR consultada para Interface WIS "
      HELP 045
      IF p_dados_tela.num_nf        IS NOT NULL THEN
         IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","EX")  THEN
            IF sup376_verifica_dados_wis() THEN
            ELSE
               CALL sup376_libera_wis()
            END IF
         ELSE
            CALL log0030_mensagem(" Consulte previamente para executar essa funcao ","exclamation")
         END IF
      END IF
   COMMAND KEY("%") "%_fatur_x_reajuste" "Relaciona remessa para faturamento e reajuste consignacao."
      HELP 046
         IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","IN")  THEN
            CALL log120_procura_caminho("sup1344") RETURNING comando3
            LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
            RUN comando3 RETURNING p_cancel
            CALL log006_exibe_teclas("01", p_versao)
            CURRENT WINDOW IS w_sup37601
         END IF

   ### OS 159597 ###
   COMMAND KEY("<") "<pesagens" "Exibe dados relativos as pesagens efetuadas."
      HELP 056
      IF p_dados_tela.num_nf        IS NOT NULL THEN
         IF m_contr_pes_rec = 'S' THEN #eduardo - o.s.290538 19/11/03
            IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","IN")  THEN
               WHENEVER ERROR CONTINUE
               LET m_num_pesagem = 0
               SELECT COUNT(*)
                 INTO m_num_pesagem
                 FROM sup_ctr_balanca
                WHERE empresa           = p_cod_empresa
                  AND num_docum         = p_nf_sup.num_nf
                  AND serie_nota_fiscal = p_nf_sup.ser_nf
                  AND subserie_nf       = p_nf_sup.ssr_nf
                  AND fornecedor        = p_nf_sup.cod_fornecedor
                  AND seq_nota_fiscal   > 0
                  AND tip_pesagem       = "1"
                  AND aviso_recebto     IS NOT NULL
               IF m_num_pesagem > 0 THEN
                  CALL sup376_exibe_dados_pesagem()
               ELSE
                  ERROR " Nao existem pesagens relativas a essa NF "
               END IF
               WHENEVER ERROR STOP
            END IF
         END IF
      ELSE
         CALL log0030_mensagem(" Consulte previamente para fazer a modificacao","exclamation")
      END IF

   COMMAND KEY("/") "/_cta_deb_fornec" "Relaciona banco/agencia/conta para a nota fiscal."
      HELP 049
         IF p_dados_tela.num_nf IS NOT NULL THEN
            IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","MO")  THEN
               CALL sup3762_inf_conta_corrente("M") RETURNING p_status
            END IF
         ELSE
            CALL log0030_mensagem(" Consulte previamente para executar essa funcao ","exclamation")
         END IF

#O.S 210882
   COMMAND KEY(">") ">_nota_origem" "Relaciona nota origem para a nota fiscal complementar."
      HELP 050
         IF p_dados_tela.num_nf IS NOT NULL THEN
            IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","MO")  THEN
               CALL sup3762_inf_nota_origem("MENU")
               IF sup376_verifica_fechamento() THEN
                  IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                                    m_consiste_nf_integr) THEN

                     IF m_cons_modific = "S" THEN
                        CALL sup376_processa_consistencia("N")
                     ELSE
                        IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
                        END IF
                     END IF

                  END IF
               END IF
            END IF
         ELSE
            CALL log0030_mensagem(" Consulte previamente para executar essa funcao ","exclamation")
         END IF

   {COMMAND KEY ("*") "*_orcamento_contas" "Consulta Orcamento das Contas"
      HELP 053
      MESSAGE ""
      IF m_controla_gao = "S" THEN
         CALL log120_procura_caminho("gao0008") RETURNING comando
      ELSE
         CALL log120_procura_caminho("oln0300") RETURNING comando
      END IF
      RUN comando RETURNING p_cancel
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601}

   COMMAND KEY (")") ")_textos_ar" "Incluir Textos relacionados ao A.R"
      HELP 054
      MESSAGE ""
      IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
         CALL log120_procura_caminho("sup1065") RETURNING comando3
         LET comando3 = comando3 CLIPPED   ," ",
                        p_cod_empresa      ," ",
                        p_dados_tela.num_aviso_rec
         RUN comando3 RETURNING p_cancel
         CURRENT WINDOW IS w_sup37601
      ELSE
         CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
      END IF
   ### OS277425 ###
   COMMAND KEY ("{") "{_AR_grade" "Consulta grades/dimensional do aviso de recebimento"
      HELP 055
      MESSAGE ""
      IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
         IF sup3766_consulta_grade(p_cod_empresa,
                                   p_dados_tela.num_aviso_rec) = FALSE THEN
            CALL log0030_mensagem(" Problemas na consulta das grades/dimensional ","exclamation")
         END IF
         CURRENT WINDOW IS w_sup37601
      ELSE
         CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
      END IF
   ### FIM OS277425 ###

   #OS. 423753
   COMMAND KEY ("[") "[_Efetua_baixa_aut" "Efetua a baixa automática da(s) família(s)."
      HELP 061
      MESSAGE ""
      IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
         IF find4GLFunction('supy9_efetua_bxa_est_aut') THEN
            IF NOT supy9_efetua_bxa_est_aut() THEN
               CALL log0030_mensagem("Efetuação de baixa automática cancelada.","exclamation")
            END IF
         END IF
         CURRENT WINDOW IS w_sup37601
      ELSE
         CALL log0030_mensagem("Consulte previamente para executar esta função.","exclamation")
      END IF
    #OS. 423753

   COMMAND KEY ("]") "]_altera_ordem/pedido" "Altera OC/PC de notas fiscais em trânsito."
      HELP 061
      MESSAGE ""
      IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
         IF p_dados_tela.ies_nf_aguard_nfe = "7" THEN
            CALL sup3760_modifica_oc_pc()
            CURRENT WINDOW IS w_sup37601
         ELSE
            CALL log0030_mensagem('Nota fiscal não está em trânsito.','exclamation')
         END IF
      ELSE
         CALL log0030_mensagem("Consulte previamente para executar esta função.","exclamation")
      END IF

   ### CHAMADO 729881 - WMS ###
   COMMAND KEY ("}") "}_Desvincula_Q04" "Desvincula documento Q04 do AR"
      MESSAGE ""
      IF find4GLFunction('wmsy18_desvincula_q04') THEN
         IF p_dados_tela.ies_especie_nf <> 'NFD' THEN
            CALL log0030_mensagem("Opção válida apenas para notas fiscais de devolução (NFD).","exclamation")
         ELSE
            IF NOT wmsy18_desvincula_q04(p_cod_empresa, p_dados_tela.num_aviso_rec,'AR') THEN
            END IF
         END IF
      END IF

   COMMAND "Zoom" "Consulta as informações relacionadas a nota fiscal"  #Rafael - OS312341
      HELP 057
      IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","CO")  THEN
         CALL sup3760_zoom()
      END IF
      CALL log006_exibe_teclas("01",p_versao)
      CURRENT WINDOW IS w_sup37601

 COMMAND KEY ("T")"freTe" "Consulta informações relacionadas ao frete"
    IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","CO")  THEN
        CALL sup3760_fretes()
    END IF

  COMMAND KEY("B") "B_relaciona_nf" "Relaciona notas fiscais." #OS450170
     HELP 64
     MESSAGE " "
     IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","CO") THEN
        CALL sup3760_relaciona_nf()
     END IF

     CALL log006_exibe_teclas("01",p_versao)
     CURRENT WINDOW IS w_sup37601

   COMMAND KEY(":") ":Consulta_seriais"
      HELP 074
      CALL log120_procura_caminho("sup8028") RETURNING comando3
      LET comando3 = comando3 CLIPPED   ," ",
                     p_cod_empresa      ," ",
                     p_dados_tela.num_nf," ",
                     p_dados_tela.ser_nf," ",
                     p_dados_tela.ssr_nf," ",
                     p_dados_tela.ies_especie_nf," ",
                     p_dados_tela.cod_fornecedor
      RUN comando3 RETURNING p_cancel
      CURRENT WINDOW IS w_sup37601

   COMMAND KEY("J") "J_aprova_erro_qtd_dias" "Aprova erro quantidade de dias. " #OS490902
     HELP 69
     MESSAGE " "

     IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","IN") THEN
        IF sup3760_verifica_usuario() THEN
           CALL sup3760_aprova_erro_qtd_dias()
        ELSE
           CALL log0030_mensagem('Usuário não tem permissão para aprovação de erro.','exclamation')
        END IF
     END IF

     CALL log006_exibe_teclas("01",p_versao)
     CURRENT WINDOW IS w_sup37601

   #-- OS 562700 inicio --#
   COMMAND KEY("(") "(_relac_nf_remessa_retorno" "Relaciona NF(NFE ou NFR) com NF de remessa."
     HELP  070
     MESSAGE ""
     CALL sup3760_controla_nf_remessa_retorno()
   #-- OS 562700 fim --#

   # Inicio chamado 759.393
   COMMAND KEY("_") "Integrar" "Efetua a integração da nota fiscal."
     HELP  072
     MESSAGE ""
     IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
        IF find4GLFunction('y_sup3760_validacoes_apos_consistencias_nf') THEN
           CALL y_sup3760_validacoes_apos_consistencias_nf(p_cod_empresa, p_dados_tela.num_aviso_rec, "I")
        END IF
     ELSE
        CALL log0030_mensagem("Consulte previamente para executar esta função.","exclamation")
     END IF
     # Fim chamado 759.393

   COMMAND KEY("+") "+_relac_rem_x_ret" "Relaciona AR de remessa com  AR de retorno"
     HELP  073
     MESSAGE ""
     IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
        CALL sup1277_seleciona_nf_remessa(p_cod_empresa,
                                          p_dados_tela.num_aviso_rec,
                                          0,
                                          FALSE)
     ELSE
        CALL log0030_mensagem("Consulte previamente para executar esta função.","exclamation")
     END IF

    COMMAND KEY(".") ".Consul_chave_acesso" "Consulta as NFs de fornecedores pela chave de acesso."
       HELP 004
       MESSAGE ""
       DISPLAY "                                                                               " AT 19,01
       DISPLAY "                                                             "  AT 9,11
       LET int_flag = 0
       LET p_cod_empresa = m_cod_empresa_orig
       IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","CO")  THEN
          LET p_cons_arg = FALSE
          CALL sup376_consulta_aviso_rec("CHAVE_ACESSO")
          IF sup3762_busca_frete_sup() = FALSE THEN
             LET p_frete_sup.num_conhec = 0
          END IF
          IF p_ies_cons THEN
             NEXT OPTION "Seguinte"
          END IF
       END IF
       LET int_flag = 0

   COMMAND "Fim" "Retorna ao Menu Anterior"
      HELP 008
      EXIT MENU

  #lds COMMAND KEY ("F11") "Sobre" "Informações sobre a aplicação (F11)."
  #lds CALL LOG_info_sobre(sourceName(),p_versao)

 END MENU

 CLOSE WINDOW w_sup37601
 END FUNCTION

#-------------------------------------#
 FUNCTION sup376_inclusao_aviso_rec()
#-------------------------------------#
 DEFINE p_ind_insert        SMALLINT,
        p_par_forn          CHAR(01),
        l_sucesso           SMALLINT,
        l_item_wms          SMALLINT,
        l_grupo_desp        LIKE item_sup.gru_ctr_desp,
        l_ies_pagamento     LIKE cond_pgto_cap.ies_pagamento,
        l_ind               SMALLINT,
        l_ies_obj_entrada   LIKE cod_fiscal_sup.ies_obj_entrada,
        l_insp_ret_benef    CHAR(01),
        l_status            SMALLINT,
        l_uni_feder         LIKE empresa.uni_feder,
        l_cod_uni_feder     LIKE fornecedor.cod_uni_feder,
        l_tran_unid_cod     CHAR(01),
        l_cod_fiscal1       LIKE item_sup.cod_fiscal,
        l_cfop_destino      LIKE aviso_rec.cod_fiscal_item,
        l_achou_item        SMALLINT,
        l_fornec_compex     SMALLINT,
        l_is_clie_319       SMALLINT ,
        l_contrato          LIKE wms_contrato.contrato,       # WMS - Columbia
        l_trans_contrato    LIKE wms_contrato.trans,          # WMS - Columbia
        l_tip_estoque       LIKE wms_tip_estoque.tip_estoque, # WMS - Columbia
        l_comando           CHAR(100),
        l_sqlcode           SMALLINT, # WMS - Columbia
        l_item_triang                 SMALLINT,
        l_triang_em_terc              SMALLINT,
        l_informa_cliente_triang_con  CHAR(01),
        l_msg                         varCHAR(200)

 INITIALIZE l_uni_feder,l_cod_uni_feder,l_tran_unid_cod,l_cod_fiscal1 TO NULL

 LET p_ind_insert = 0
 LET int_flag = 0
 LET p_houve_erro = 0
 LET g_ies_transf_benef = FALSE

 INITIALIZE p_aviso_rec_compl.*, g_cod_forn_sup3850 TO NULL
 INITIALIZE p_array, p_array_dev_trans, p_array_wms TO NULL
 INITIALIZE p_array_compl TO NULL
 INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
 INITIALIZE m_dat_entrada_ant             TO NULL

 LET p_ind           = 0
 LET p_formonlyr.*   = p_formonly.*
 LET p_dados_telar.* = p_dados_tela.*
 LET p_ies_imp_renda = "N"
 LET g_nao_inclui    = FALSE #OS477406

 INITIALIZE p_array_it_prg_entr TO NULL

 #--------------------------#
 # Alteração WMS OS: 450083 #
 #--------------------------#
 # Passo 12                 #
 IF m_wms_instal = "S" THEN
    CALL wms6133_cria_tt_valid_prim_nf_dep()
 END IF
 #---------------#

 CALL log085_transacao("BEGIN")
 IF sup376_obtem_num_aviso_rec() = FALSE THEN
    CALL log0030_mensagem(" Parametros não encontrados","exclamation")
    CALL log085_transacao("ROLLBACK")
    RETURN
 ELSE
    WHENEVER ERROR CONTINUE
        CALL log085_transacao("COMMIT")
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       INITIALIZE p_msg TO NULL
       LET p_msg = "Erro na efetivação dos dados. SQLCA.SQLCODE = ", sqlca.SQLCODE CLIPPED
       CALL log0030_mensagem(p_msg,"stop")
       CALL log085_transacao("ROLLBACK") #OS596059
       RETURN
    END IF
 END IF

 INITIALIZE p_formonly.*, p_codigos TO NULL

 CALL sup376_inicializa_campos_nf()
# OS 278154
 INITIALIZE l_status, p_ies_tip_entrada, m_ies_obj_entrada TO NULL
# OS 463501
 LET m_ind_transf_estoq   = FALSE
 CLEAR FORM
 LET p_houve_erro = FALSE

 WHILE TRUE
    IF sup3760_entrada_dados("INCLUSAO") THEN
       IF g_nao_inclui = FALSE THEN #OS477406
          MESSAGE " Aguarde ... Efetuando Inclusao da Nota Fiscal ... "
                  ATTRIBUTE(REVERSE)

          #534641
          IF p_dados_tela.ies_especie_nf = "NFR" AND
             p_dados_tela.ies_nf_aguard_nfe = "A" THEN
             CALL sup3760_informa_nf_cobraca()
             CURRENT WINDOW IS w_sup37601
          END IF
          #534641
          ### OS 511148
          IF m_devol_consig_venda_parcial = "S" OR
             m_devol_cliente_parcial      = "S" THEN
             IF m_devol_nf_parcial = TRUE THEN
                INITIALIZE p_array,
                           p_array_imp,
                           p_array_dev_trans,
                           p_array_compl TO NULL

                IF m_alterar = TRUE THEN
                   CALL sup3762_busca_items_devol_parcial() # busca os item selecionado na nota.
                ELSE
                   LET m_nf_tipo_x = FALSE ##OS587025
                   IF sup376_insere_array("INCLUSAO") = FALSE THEN #entrada de dado, permite digitar os itens.
                      CALL log0030_mensagem("Não foi incluído item para nota","excla")
                      ERROR " Inclusao Cancelada. "
                      CLEAR FORM
                      RETURN
                   END IF
                END IF

                CALL set_count(999)
                FOR l_ind = 1 TO 4
                    DISPLAY  p_array[l_ind].* TO s_sup37601[l_ind].*
                END FOR

                CALL sup376_insere_totais("INCLUSAO") RETURNING l_status # inclui totais da nota

                IF m_devol_nf_parcial_venda = TRUE THEN
                   IF p_dados_tela_f.val_ipi_nf         = 0 AND
                      p_dados_tela_f.val_tot_icms_nf_d  = 0 AND
                      p_dados_tela_f.val_tot_nf_d       = 0 THEN

                      INSERT INTO sup_par_ar
                                 (empresa,
                                  aviso_recebto,
                                  seq_aviso_recebto,
                                  parametro,
                                  par_ind_especial,
                                  parametro_texto,
                                  parametro_val,
                                  parametro_dat)
                          VALUES (p_cod_empresa,
                                  p_dados_tela.num_aviso_rec,
                                  0,
                                  'devol_parcial_venda',
                                  NULL,
                                  NULL,
                                  NULL,
                                  TODAY)
                   END IF
                END IF

                LET p_nf_sup.val_tot_nf_d      = p_dados_tela_f.val_tot_nf_d
                LET p_nf_sup.val_tot_icms_nf_d = p_dados_tela_f.val_tot_icms_nf_d
                LET p_nf_sup.val_ipi_nf        = p_dados_tela_f.val_ipi_nf

                DISPLAY BY NAME p_dados_tela_f.*
             END IF

             IF m_devol_consig_venda_parcial = "N" AND
                m_devol_cliente_parcial      = "S" THEN
                 LET  m_nf_tipo_x  = FALSE
             END IF
          ELSE
             LET  m_nf_tipo_x  = FALSE
          END IF

          CALL log085_transacao("BEGIN")

          IF m_integracao_cre = TRUE THEN
             WHENEVER ERROR CONTINUE
             INSERT INTO sup_par_ar VALUES(p_cod_empresa,
                                           p_dados_tela.num_aviso_rec,
                                           0,
                                           "integra_cre",
                                           "S",
                                           NULL,
                                           NULL,
                                           NULL)
             WHENEVER ERROR STOP

             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("INCLUSAO","SUP_PAR_AR5")
                LET p_houve_erro = TRUE
             END IF
          END IF

          CALL sup376_busca_cond_pgto_cap(p_dados_tela.cnd_pgto_nf)
          LET p_ies_pagamento = p_cond_pgto_cap.ies_pagamento

          INITIALIZE l_status, p_ies_tip_entrada, m_ies_obj_entrada TO NULL
          IF p_dados_tela.cod_fiscal_compl IS NULL THEN
             LET p_dados_tela.cod_fiscal_compl = 0
          END IF
          CALL sup0686_retorna_tip_obj_entrada(p_dados_tela.cod_operacao,
                                               p_dados_tela.cod_fiscal_compl)
                                               RETURNING l_status,
                                                         p_ies_tip_entrada,
                                                         m_ies_obj_entrada
          #-------------nfe_vendas ou NFR--------------#
          IF p_nfe_vendas = TRUE OR
             m_nf_tipo_x  = TRUE THEN ### OS 511148
             CALL sup376_inicializa_vendas_tela(m_cod_emp_orig)
             IF m_ies_fat_unico THEN
                IF m_devol_nf_parcial = TRUE THEN
                   CALL sup3762_busca_items_devol_parcial()
                ELSE
                   IF NOT sup1561_carrega_dados_faturamento_unico_para_nf(m_cod_emp_orig,
                                                                          "venda",
                                                                          p_ies_prim_cnd,
                                                                          m_devol_nf_parcial,
                                                                          mr_tela.*,
                                                                          m_devol_nf_parcial_venda,
                                                                          m_devol_consig_total,
                                                                          ' ') THEN
                      LET p_houve_erro = TRUE
                      EXIT WHILE
                   END IF
                   DISPLAY p_array[1].* TO s_sup37601[1].*
                   DISPLAY p_array[2].* TO s_sup37601[2].*
                   DISPLAY p_array[3].* TO s_sup37601[3].*
                   DISPLAY p_array[4].* TO s_sup37601[4].*
                END IF
             ELSE
                IF NOT sup376_inicializa_vendas_nf(m_cod_emp_orig, p_ies_prim_cnd) THEN
                   LET p_houve_erro = TRUE
                   EXIT WHILE
                END IF
             END IF
             IF m_cod_emp_orig IS NOT NULL AND m_cod_emp_orig <> " " THEN
                CASE g_ies_tip_controle
                WHEN "2" LET p_dados_tela.ies_especie_nf    = "NFR"
                         LET p_dados_tela.ies_nf_aguard_nfe = "T"
                WHEN "3" LET p_dados_tela.ies_especie_nf    = "NFR"
                         LET p_dados_tela.ies_nf_aguard_nfe = "1"
                WHEN "4" LET p_dados_tela.ies_especie_nf    = "NFR"
                         LET p_dados_tela.ies_nf_aguard_nfe = "1"
                END CASE
                LET p_nf_sup.ies_especie_nf    = p_dados_tela.ies_especie_nf
                LET p_nf_sup.ies_nf_aguard_nfe = p_dados_tela.ies_nf_aguard_nfe
                DISPLAY BY NAME p_dados_tela.ies_especie_nf,
                                p_dados_tela.ies_nf_aguard_nfe
             END IF
             IF m_gera_rsv_transf = "S" AND
                p_dados_tela.ies_nf_aguard_nfe = "8" THEN
                FOR l_ind = 1 TO 999
                   IF p_array[l_ind].cod_item IS NULL AND
                      p_array[l_ind].qtd_declarad_nf IS NULL THEN
                      EXIT FOR
                   END IF

                   LET p_qtd_array = p_array[l_ind].qtd_declarad_nf

                   ### DAUDT ###
                   IF sup376_verifica_controla_valor(p_array_compl[l_ind].num_oc) = FALSE THEN

                      CALL sup386_popup_ordens_reservada(p_cod_empresa,
                                                         p_array[l_ind].cod_item,
                                                         p_array_compl[l_ind].num_pedido,
                                                         p_array_compl[l_ind].num_oc,
                                                         p_array_compl[l_ind].num_prog_entrega,
                                                         p_qtd_array,
                                                         "N" ,
                                                         "INCLUSAO",
                                                         p_dados_tela.num_aviso_rec,
                                                         p_array[l_ind].seq,
                                                         l_ind)
                           RETURNING p_soma_reserva2, p_ies_reservou, p_ord_forn
                      CURRENT WINDOW IS w_sup37601
                   ELSE

                      CALL sup861_popup_ordens_val_reserv(p_cod_empresa,
                                                          p_array[l_ind].cod_item,
                                                          p_array_compl[l_ind].num_pedido,
                                                          p_array_compl[l_ind].num_oc,
                                                          p_array_compl[l_ind].num_prog_entrega,
                                                          p_val_array,
                                                          "N",
                                                          "INCLUSAO",
                                                          p_dados_tela.num_aviso_rec,
                                                          p_array[l_ind].seq, l_ind)
                           RETURNING p_val_soma_reserva2, p_ies_reservou, p_ord_forn
                   END IF
                END FOR
             END IF
          ELSE
             #-------------nfe_importacao--------------#
             IF (p_par_sup_compl.ies_mod_importacao = "S" OR
                 p_par_sup_compl.ies_mod_importacao = "L") THEN
                IF p_dados_tela.cod_operacao[1] = "7" THEN
                   IF p_cod_pais_emp <> p_fornecedor.cod_pais AND
                     (p_dados_tela.ies_especie_nf = "NFE" OR
                      p_dados_tela.ies_especie_nf = "NFP") THEN
                      IF m_ies_utiliz_provisao = "S" AND
                         m_utiliz_nfm_import = "N" AND
                         m_num_processo >= m_inicio_provisao THEN
                         LET p_nf_sup.ies_situa_import = "E"
                      ELSE
                         IF m_nfp_incl_apos_encerr THEN
                            LET p_nf_sup.ies_situa_import = "E"
                         ELSE
                            LET p_nf_sup.ies_situa_import = "A"
                         END IF
                      END IF
                      LET p_aviso_rec_compl.ies_incl_import = "N"
                   ELSE
                      IF p_cod_pais_emp <> p_fornecedor.cod_pais AND
                         p_dados_tela.ies_especie_nf = "NFM" THEN
                         LET p_nf_sup.ies_situa_import = "A"       #ALTERACAO_NFM_NFP
                         LET p_aviso_rec_compl.ies_incl_import = "N"
                      END IF
                   END IF
                ELSE
                   IF m_nfr_import THEN
                      IF m_ies_utiliz_provisao = "S" AND
                         m_utiliz_nfm_import = "N" AND
                         m_num_processo >= m_inicio_provisao THEN
                         LET p_nf_sup.ies_situa_import = "E"
                      ELSE
                         IF m_nfp_incl_apos_encerr THEN
                            LET p_nf_sup.ies_situa_import = "E"
                         ELSE
                            LET p_nf_sup.ies_situa_import = "A"
                         END IF
                      END IF
                      LET p_aviso_rec_compl.ies_incl_import = "N"
                   ELSE
                      LET p_nf_sup.ies_situa_import = " "
                   END IF
                END IF
             ELSE
                LET p_nf_sup.ies_situa_import = " "
             END IF
          END IF

          LET p_cont_aut_terc  = FALSE
          LET p_aguarda_fatura = "N"
          LET m_solicitou_mp   = FALSE
          LET m_solicitou_ciap = FALSE
          LET m_confirmou_mp   = TRUE
          LET m_confirmou_ciap = TRUE
          LET l_achou_item     = FALSE
          LET l_fornec_compex  = FALSE

          CALL sup3760_verifica_fornec_incl_regime_compex(p_cod_empresa,
                                                          p_dados_tela.dat_emis_nf,
                                                          p_dados_tela.cod_fornecedor)
               RETURNING l_fornec_compex

          FOR p_ind = 1 TO 999

              LET l_achou_item = TRUE

              ### OS 457685 ###
              IF p_array[p_ind].qtd_declarad_nf IS NULL OR
                 #nota complementar de imposto só tem um item nao preenchido..
                 (sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                            p_cod_empresa,
                                            p_dados_tela.num_aviso_rec) AND
                  p_ind >1) THEN
                 EXIT FOR
              END IF
              ### OS 457685 ###

              IF p_array[p_ind].cod_item IS NULL THEN
                 LET p_array[p_ind].cod_item = " "
              END IF

              IF p_nfe_vendas = TRUE AND m_cod_emp_orig IS NOT NULL AND
                 m_cod_emp_orig <> " " AND (g_ies_tip_controle = "3" OR
                 g_ies_tip_controle = "4") THEN
                 LET p_array_compl[p_ind].move_estoque   = "N"
                 LET p_array_compl[p_ind].ies_item_estoq = "N"
              END IF

              IF p_array_compl[p_ind].ies_liberacao_insp IS NULL THEN
                 ### Quando o usuario nao passa pelo codigo de todos os itens
                 ### da NF, algumas variaveis ficavam nulas, causando problemas
                 ### OS 190406/199090
                 IF sup3762_verifica_material_ipi(FALSE) = FALSE THEN
                    LET p_array_compl[p_ind].ies_item_estoq = "N"
                    LET p_array_compl[p_ind].move_estoque   = "N"
                    LET p_array_compl[p_ind].ies_liberacao_insp = "N"
                    LET p_array_compl[p_ind].ies_controle_lote  = "N"
                    LET p_array_compl[p_ind].cod_local_estoq    = " "
                    LET p_array_compl[p_ind].cod_cla_fisc = " "
                    LET p_array_compl[p_ind].pct_ipi_tabela = 0
                 END IF
              END IF

### DUVIDA PAULA - COPIADO DA V0410 CLIENTE 413, na v0410 padrão não faz IF abaixo.
           IF p_array[p_ind].cod_item IS NOT NULL AND
              p_array[p_ind].qtd_declarad_nf IS NOT NULL THEN
              LET p_ind_insert = p_ind_insert + 1
              CALL sup376_inicializa_campos_ar()
              IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
              ELSE
                 LET p_aviso_rec.val_despesa_aces_i = 0
              END IF

              CALL sup376_move_campos_ar()
              IF p_nfe_vendas = TRUE AND m_cod_emp_orig IS NOT NULL AND
                 m_cod_emp_orig <> " " AND (g_ies_tip_controle = "3" OR
                 g_ies_tip_controle = "4") THEN
                 IF NOT sup3762_gera_indicar_ret_terc(m_cod_emp_orig) THEN
                    LET p_houve_erro = TRUE
                    EXIT FOR
                 END IF
              END IF
              IF p_dados_tela.ies_especie_nf <> "NFD" AND
                 p_array_compl[p_ind].num_pedido > 0  THEN
                 CALL sup376_inclui_ar_ped()
              END IF
              LET p_parametros = NULL

              IF p_dados_tela.ies_especie_nf = "NFR" OR
                 p_dados_tela.ies_nf_aguard_nfe = "B" OR
                 (p_dados_tela.ies_nf_aguard_nfe = "8" AND m_gera_rsv_transf = "S") THEN
                 IF sup3760_verifica_param_item_rastreab() = FALSE THEN
                    LET p_houve_erro = TRUE
                    EXIT FOR
                 END IF

                 LET p_par_forn = NULL
                 CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor,
                                                         p_aviso_rec.cod_item,
                                                         p_dados_tela.dat_emis_nf,
                                                         p_dados_tela.num_aviso_rec) RETURNING p_par_forn
                 IF p_par_forn = "3" THEN
                    LET p_aguarda_fatura = "S"
                 END IF

                 IF p_par_forn = "1" THEN
                    LET p_cont_aut_terc = TRUE
                    IF p_par_sup_compl_1.cod_tip_desp_terc IS NOT NULL AND
                       p_par_sup_compl_1.cod_tip_desp_terc <> " " THEN
                       LET p_aviso_rec.cod_tip_despesa = p_par_sup_compl_1.cod_tip_desp_terc
                    END IF
                 END IF

                 CALL sup376_busca_parametros_item(p_array[p_ind].cod_item)
                 LET p_parametros = p_item_parametro.parametros[2,2]
                 IF p_parametros = "2" THEN
                    IF p_par_sup_compl_1.cod_tip_desp_banc IS NOT NULL AND
                       p_par_sup_compl_1.cod_tip_desp_banc <> " " THEN
                       LET p_aviso_rec.cod_tip_despesa = p_par_sup_compl_1.cod_tip_desp_banc
                    END IF
                 END IF

                 IF p_par_forn = "3" AND
                    m_ies_armaz_itau <> "S" AND
                    p_dados_tela.ies_nf_aguard_nfe <> "7" THEN  #736225 Antonio/Carla
                    LET p_dados_tela.ies_nf_aguard_nfe = "4"
                    IF find4GLFunction('supy160_cliente_318')THEN
                       IF p_dados_tela.ies_nf_aguard_nfe <> "A" THEN
                          IF sup376_gera_item_d_terc() = FALSE THEN
                             LET p_houve_erro = TRUE
                          END IF
                       END IF
                    ELSE
                       IF sup376_gera_item_d_terc() = FALSE THEN
                          LET p_houve_erro = TRUE
                       END IF
                    END IF
                    LET p_aviso_rec.ies_item_estoq = "N"
                    LET p_aviso_rec.ies_situa_ar   = "C"
                    LET p_aviso_rec.ies_liberacao_cont = "N"
                    LET p_array_compl[p_ind].move_estoque = "N"
                    IF p_par_sup_compl_1.cod_tip_desp_cons IS NOT NULL AND
                       p_par_sup_compl_1.cod_tip_desp_cons <> " " THEN
                       LET p_aviso_rec.cod_tip_despesa = p_par_sup_compl_1.cod_tip_desp_cons
                    END IF
                 ELSE
                    IF p_dados_tela.ies_nf_aguard_nfe = "T" THEN
                       IF find4GLFunction('supy160_cliente_318')THEN
                          IF p_dados_tela.ies_nf_aguard_nfe <> "A" THEN
                             IF sup376_gera_item_d_terc() = FALSE THEN
                             END IF
                          END IF
                       ELSE
                          IF sup376_gera_item_d_terc() = FALSE THEN
                          END IF
                       END IF
                    END IF
                 END IF

                 IF (p_parametros = "6" AND
                   ((p_dados_tela.ies_nf_aguard_nfe = "A" AND
                     m_contr_terc_no_dep = 'N') OR
                    (p_dados_tela.ies_nf_aguard_nfe = "B" AND
                     m_contr_terc_no_dep = 'S'))) THEN
                    IF find4GLFunction('supy160_cliente_318')THEN
                       IF p_dados_tela.ies_nf_aguard_nfe <> "A" THEN
                          IF sup376_gera_item_d_terc() = FALSE THEN
                          END IF
                       END IF
                    ELSE
                       IF sup376_gera_item_d_terc() = FALSE THEN
                       END IF
                    END IF
                 END IF
              ELSE
                 IF p_dados_tela.ies_nf_aguard_nfe = "T" THEN
                    IF find4GLFunction('supy160_cliente_318')THEN
                       IF p_dados_tela.ies_nf_aguard_nfe <> "A" THEN
                          IF sup376_gera_item_d_terc() = FALSE THEN
                          LET p_houve_erro = TRUE
                          END IF
                       END IF
                    ELSE
                       IF sup376_gera_item_d_terc() = FALSE THEN
                          LET p_houve_erro = TRUE
                       END IF
                    END IF
                 END IF
              END IF

### OS    283971
              IF m_ies_obj_entrada = "99" AND
                 p_dados_tela_f.val_tot_icms_nf_d = 0  AND
                 p_dados_tela_f.val_ipi_nf        = 0 THEN
              ELSE
### Not   as de remessa de consignacao se material de uso/consumo (grupo de despesa - objetivo),
### dev   e considerar o objetivo do codigo fiscal e não do grupo de despesa.
                 IF p_dados_tela.ies_nf_aguard_nfe = "4" THEN
                    CALL sup376_busca_bitributacao()
                 END IF
              END IF

              IF p_dados_tela.ies_nf_aguard_nfe = "2" OR
                 p_dados_tela.ies_nf_aguard_nfe = "5" THEN
                 LET p_aviso_rec.ies_liberacao_insp = "S"
              END IF

              #512218
              IF (p_dados_tela.ies_especie_nf = "NFR"    OR
                 (p_dados_tela.ies_especie_nf = "NFE"    AND
                  p_dados_tela.ies_nf_aguard_nfe = "X")) AND
                 m_ies_obj_entrada = "99" THEN
                 LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
              END IF

##### O   .S. 245661
              IF p_dados_tela.ies_especie_nf = "NFR" THEN
                 IF p_dados_tela.ies_nf_aguard_nfe = "4" THEN
                    IF p_aviso_rec.ies_incid_icms_ite <> "E" THEN
                       LET p_aviso_rec.gru_ctr_desp_item = p_cod_grp_desp_nfr
                    END IF
                    LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]

                    IF m_pc_nf_consig = "S" THEN
                       IF p_aviso_rec.num_oc IS NULL OR p_aviso_rec.num_oc = 0 THEN
                          LET p_houve_erro = TRUE
                          ERROR "Deverá ser informado pedido de compra (NF remessa consignacao)"
                          SLEEP 3
                          EXIT FOR
                       END IF
#### DU   VIDA PAULA - VER COM MARILDA (A PARTE ABAIXO ESTA SEM COMENTARIO PARA V0410 cliente 55
                       {IF NOT sup3760_oc_consig_remessa(p_aviso_rec.num_oc) THEN
                          LET p_houve_erro = TRUE
                          ERROR "Ordem de compra ",p_aviso_rec.num_oc USING "<<<<<<<<&",
                                "deve ser de remessa de consignacao"
                          SLEEP 3
                          EXIT FOR
                       END IF}
                    END IF
                 ELSE
                    IF m_ies_obj_entrada = "99" AND
                       p_dados_tela_f.val_tot_icms_nf_d = 0  AND
                       p_dados_tela_f.val_ipi_nf        = 0   THEN
#######   ############ OS 180603
                       IF m_grupo_despesa_nfr = "S" AND
                          p_dados_tela.ies_especie_nf = "NFR" AND
                          (p_aviso_rec.num_oc = 0 OR p_aviso_rec.num_oc IS NULL) THEN
                          IF p_ies_pagamento = 3 THEN
                          ELSE
                             LET p_aviso_rec.gru_ctr_desp_item    = m_ies_obj_entrada
                          END IF
                       ELSE
                          LET p_aviso_rec.gru_ctr_desp_item    = m_ies_obj_entrada
                       END IF
                    END IF
                 END IF
              END IF

              IF p_dados_tela.ies_especie_nf    = "NFR" AND
                 p_dados_tela.ies_nf_aguard_nfe = "4"   AND
                 p_dados_tela_f.val_ipi_nf     <> 0     AND
                 (p_ies_obj_entrada_fisc = "3" OR  p_ies_obj_entrada_fisc = "4") THEN
              ELSE
                 IF p_dados_tela.ies_especie_nf = "NFR" AND
                    p_ies_achou_itsup  = FALSE THEN
                    LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
                 ELSE
                    IF p_ies_cfop99 = "S" AND m_ies_obj_entrada = "99" THEN
                       IF (p_dados_tela.ies_especie_nf = "NFD" OR
                           p_ies_tip_entrada = "5") AND
                           ((p_array_compl[p_ind].ies_tip_item = "C" OR
                             p_array_compl[p_ind].ies_tip_item = "B") OR
                             p_ies_achou_itsup = FALSE) THEN
                           LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
                       END IF
                    END IF
                  END IF
              END IF

              IF p_ies_cfop99 = "S" AND m_ies_obj_entrada = "99" THEN
                 LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
                 LET p_aviso_rec_compl_sq.cod_fiscal_compl  = p_dados_tela.cod_fiscal_compl
              END IF

              CALL sup376_inclui_dest_entrega(p_array[p_ind].val_liquido_item)

              LET p_aviso_rec.num_seq = p_array[p_ind].seq
              IF p_dados_tela.ies_especie_nf = "NFR" OR
                 p_dados_tela.ies_especie_nf = "NFD" OR
                 p_dados_tela.ies_especie_nf = "NFC" THEN

                 LET p_aviso_rec.ies_liberacao_ar = "2"
                 LET p_aviso_rec.ies_diverg_listada = "S"
                 IF p_array_compl[p_ind].move_estoque = "S" THEN
                    LET p_aviso_rec.ies_situa_ar = "C"
                    LET p_aviso_rec.ies_item_estoq   = "S"
                    LET p_aviso_rec.ies_liberacao_ar = "1"
                 END IF
              END IF

              #--------------------relac NFE-----------------------#
              IF p_dados_tela.ies_nf_aguard_nfe = "2" THEN
                 LET p_aviso_rec.ies_item_estoq = "N"
                 LET p_aviso_rec.ies_contabil = "N"
              END IF

              #--------------------class. fiscal-----------------------#
              IF p_aviso_rec.ies_item_estoq = "N" THEN
                 IF p_aviso_rec.cod_cla_fisc_nf IS NOT NULL AND
                    p_aviso_rec.cod_cla_fisc_nf <> " " THEN
                    LET p_aviso_rec.cod_cla_fisc = p_aviso_rec.cod_cla_fisc_nf
                 END IF
              END IF

              IF p_aviso_rec.num_oc <> 0 THEN
                 LET p_cod_secao_rec = NULL
                 INITIALIZE p_ordem_sup.* TO NULL
                 CALL sup3762_busca_ordem_sup(p_aviso_rec.cod_empresa,
                                             p_aviso_rec.num_oc)
                 LET p_cod_secao_rec    = p_ordem_sup.cod_secao_receb

                 IF p_array_compl[p_ind].move_estoque IS NULL OR
                    p_array_compl[p_ind].move_estoque = " " THEN
                    LET p_ies_item_estoq = p_ordem_sup.ies_item_estoq
                 ELSE
                    LET p_ies_item_estoq = p_array_compl[p_ind].move_estoque
                 END IF

                 LET p_ies_insp_recebto = p_ordem_sup.ies_insp_recebto
                 IF p_cod_secao_rec IS NOT NULL AND
                    p_cod_secao_rec <> " " THEN
                    LET p_aviso_rec.cod_local_estoq = p_cod_secao_rec
                 END IF
                 LET p_aviso_rec.ies_item_estoq = p_ies_item_estoq
              END IF

              IF p_dados_tela.ies_nf_aguard_nfe = "5" THEN
                 LET p_aviso_rec.ies_liberacao_cont = "N"
                 LET p_aviso_rec.ies_liberacao_insp = "S"
                 LET p_aviso_rec.ies_situa_ar       = "E"
                 LET p_aviso_rec.qtd_recebida       = p_aviso_rec.qtd_declarad_nf
              ELSE
                 CALL sup376_analisa_contagem_inspecao()
              END IF

              IF p_aviso_rec.num_oc <> 0 THEN
                 IF p_aviso_rec.ies_item_estoq = "N" THEN
#### OS    286425 - NFR consignacao com OC relacionada (obedece inspecao cadastrada para material)
                    IF p_ies_insp_recebto IS NOT NULL AND
                       ((p_ies_insp_recebto <> "4") OR
                        (p_ies_insp_recebto = "4" AND
                        p_dados_tela.ies_nf_aguard_nfe = "4")) THEN
                       LET p_aviso_rec.ies_liberacao_insp = "N"
                       LET p_aviso_rec.ies_liberacao_cont = "N"
                       IF p_par_sup_compl.ies_conta_ok_n_est = "2" OR
                         (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
                          p_dados_tela.ies_especie_nf = "NFS") THEN
                          LET p_aviso_rec.ies_situa_ar = "I"
                       ELSE
                          LET p_aviso_rec.ies_situa_ar = "C"
                       END IF
                    ELSE
                       LET p_aviso_rec.ies_liberacao_insp = "S"
                    END IF

                    IF p_cod_oper_ent_comp IS NOT NULL AND
                       p_cod_oper_ent_comp <> " "     THEN

                       INITIALIZE p_contador TO NULL
                       SELECT COUNT(*)
                         INTO p_contador
                         FROM estrutura_vdp_hp
                        WHERE estrutura_vdp_hp.cod_empresa = p_aviso_rec.cod_empresa
                          AND estrutura_vdp_hp.cod_item    = p_aviso_rec.cod_item

                       IF sqlca.sqlcode <> 0 OR
                          p_contador IS NULL THEN
                          LET p_contador = 0
                       END IF

                       IF p_contador > 0 THEN
                          IF p_aviso_rec.ies_situa_ar = "C" THEN
                             LET p_aviso_rec.ies_situa_ar = "I"
                          END IF
                          LET p_aviso_rec.ies_liberacao_cont = "N"
                       END IF

                    END IF
                 END IF
              END IF

              ## 404133
              IF g_ies_transf_benef = TRUE AND
                (g_ies_retorno_ind = TRUE OR
                 g_ret_sem_ind = true) AND
                 p_aviso_rec.ies_item_estoq = "N" THEN
                 IF sup3760_gera_item_ret_terc() = FALSE THEN
                    LET p_houve_erro = TRUE
                    EXIT FOR
                 END IF
              END IF
              IF p_nfe_import = TRUE OR
                 p_nfm_import = TRUE OR ### OS 511148
                 p_nfe_vendas = TRUE OR
                 m_nf_tipo_x = TRUE OR
                 p_ies_nf_transf = TRUE OR
                 g_ies_nf_permuta = TRUE THEN
                 CALL sup376_calcula_val_liquido("INCLUSAO")
              END IF

              IF p_dados_tela.ies_especie_nf = "NFM" THEN
                 LET p_aviso_rec.ies_situa_ar = "E"
                 LET p_aviso_rec.ies_item_estoq = "N"
                 LET p_aviso_rec.ies_liberacao_cont = "S"
                 LET p_aviso_rec.ies_liberacao_insp = "S"
                 LET p_aviso_rec.qtd_recebida       = p_aviso_rec.qtd_declarad_nf
              END IF

              IF p_aviso_rec.cod_unid_med_nf IS NULL THEN
                 LET p_aviso_rec.cod_unid_med_nf = " "
              END IF

              IF p_aviso_rec.cod_item IS NOT NULL AND
                 p_aviso_rec.cod_item <> " " THEN
                 CALL vdp3188_item_sob_controle_wis(p_cod_empresa,p_aviso_rec.cod_item)
                 RETURNING l_sucesso,l_item_wms

                 {IF l_item_wms THEN
                    LET p_aviso_rec.ies_situa_ar = "C"
                    LET p_aviso_rec.ies_liberacao_cont = "N"
                    LET p_aviso_rec.ies_liberacao_insp = "N"
                 END IF}
              END IF

              IF p_dados_tela.ies_especie_nf = "NFS" THEN
                 IF m_incid_icms_nfs IS NULL OR m_incid_icms_nfs = " " THEN
                 ELSE
                    LET p_aviso_rec.ies_incid_icms_ite = m_incid_icms_nfs
                 END IF
              END IF

               IF sup376_tem_classificacao_sucata(p_aviso_rec.cod_item) THEN
                  LET p_aviso_rec.ies_item_estoq = "N"
               END IF

              IF p_dados_tela.ies_nf_aguard_nfe = "4" THEN
                 IF sup376_verifica_armazem_itau() THEN
                    LET p_aviso_rec.ies_item_estoq = "S"
                 END IF
              END IF

              IF g_ies_retorno_ind = TRUE THEN

                 IF p_dados_tela.ies_especie_nf = "NFR" OR p_ies_tip_entrada = "5" THEN

                    LET l_insp_ret_benef = NULL

                    SELECT avf_parametro.reserva[3,3]
                      INTO l_insp_ret_benef
                      FROM avf_parametro
                     WHERE avf_parametro.empresa = p_aviso_rec.cod_empresa

                    IF sqlca.sqlcode <> 0       OR
                       l_insp_ret_benef IS NULL OR
                       l_insp_ret_benef = " " THEN
                       LET l_insp_ret_benef = "N"
                    END IF

                    IF l_insp_ret_benef <> "S" THEN
                       LET p_aviso_rec.ies_situa_ar = "E"
                       LET p_aviso_rec.ies_liberacao_cont = "S"
                       LET p_aviso_rec.ies_liberacao_insp = "S"
                       LET p_aviso_rec.ies_liberacao_ar = "2"
                    END IF

                 ELSE
                    LET p_aviso_rec.ies_situa_ar = "E"
                    LET p_aviso_rec.ies_liberacao_cont = "S"
                    LET p_aviso_rec.ies_liberacao_insp = "S"
                    LET p_aviso_rec.ies_liberacao_ar = "2"
                 END IF

              END IF

              IF m_gera_rsv_transf = "S" AND
                 p_dados_tela.ies_nf_aguard_nfe = "8" THEN
                 LET p_aviso_rec.ies_situa_ar = "I"
                 LET p_aviso_rec.ies_liberacao_cont = "N"
                 LET p_aviso_rec.qtd_recebida = p_aviso_rec.qtd_declarad_nf
              END IF

              #536059
              IF p_dados_tela.ies_especie_nf  = 'NFR' AND
                 p_dados_tela.ies_nf_aguard_nfe     = 'B'   THEN
                 LET p_aviso_rec.ies_situa_ar       = 'E'
                 LET p_aviso_rec.ies_liberacao_cont = 'S'
                 LET p_aviso_rec.ies_liberacao_insp = 'S'
                 LET p_aviso_rec.qtd_recebida       = p_aviso_rec.qtd_declarad_nf
                 LET p_aviso_rec.qtd_liber          = p_aviso_rec.qtd_declarad_nf
              END IF

              #808022
              IF p_aviso_rec.num_oc IS NULL OR p_aviso_rec.num_oc = 0 THEN
                 IF (p_par_sup_compl.ies_conta_ok_n_est = "2" OR
                     (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
                      p_dados_tela.ies_especie_nf = "NFS") AND
                     m_cont_insp_especial = 'S') OR p_dados_tela.ies_especie_nf = "NFC" THEN
                    IF p_aviso_rec.ies_item_estoq = 'N' AND
                       p_dados_tela.ies_nf_aguard_nfe <> 'T' THEN
                       LET p_aviso_rec.ies_situa_ar       = 'E'
                       LET p_aviso_rec.ies_liberacao_cont = 'S'
                       LET p_aviso_rec.ies_liberacao_insp = 'S'
                       LET p_aviso_rec.qtd_recebida       = p_aviso_rec.qtd_declarad_nf
                       LET p_aviso_rec.qtd_liber          = p_aviso_rec.qtd_declarad_nf
                    END IF
                 END IF
              END IF
              #FIM 808022

              IF p_aviso_rec.ies_incid_icms_ite IS NULL THEN
                 LET p_aviso_rec.ies_incid_icms_ite = " "
              END IF

              IF p_aviso_rec.ies_tip_incid_ipi IS NULL THEN
                 LET p_aviso_rec.ies_tip_incid_ipi = " "
              END IF

              IF m_ind_transf_estoq THEN
                 LET p_aviso_rec.ies_contabil   = "M"
                 LET p_aviso_rec.ies_item_estoq = "N"
              END IF

              IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                     p_dados_tela.num_aviso_rec,
                                                     p_dados_tela.num_nf,
                                                     p_dados_tela.ser_nf,
                                                     p_dados_tela.ssr_nf,
                                                     p_dados_tela.cod_fornecedor,
                                                     p_dados_tela.cod_operacao,
                                                     p_dados_tela.cod_fiscal_compl) = TRUE THEN
                 WHENEVER ERROR CONTINUE
                 SELECT par_ies
                   INTO l_tran_unid_cod
                   FROM par_sup_pad
                  WHERE cod_empresa = p_cod_empresa
                    AND cod_parametro = "tran_unid_cod_fisc"
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode <> 0 OR
                    l_tran_unid_cod IS NULL THEN
                    LET l_tran_unid_cod = "N"
                 END IF

                 IF l_tran_unid_cod = "S" THEN
                    WHENEVER ERROR CONTINUE
                    SELECT uni_feder
                      INTO l_uni_feder
                      FROM empresa
                     WHERE cod_empresa = p_cod_empresa

                    SELECT cod_uni_feder
                      INTO l_cod_uni_feder
                      FROM fornecedor
                     WHERE cod_fornecedor = p_dados_tela.cod_fornecedor

                    IF l_uni_feder = l_cod_uni_feder THEN
                       LET p_aviso_rec.cod_fiscal_item[1] = "1"
                    ELSE
                       LET p_aviso_rec.cod_fiscal_item[1] = "2"
                    END IF

                    SELECT cod_fiscal
                      INTO l_cod_fiscal1
                      FROM item_sup
                     WHERE cod_empresa = p_cod_empresa
                       AND cod_item    = p_aviso_rec.cod_item
                    WHENEVER ERROR STOP

                    LET p_aviso_rec.cod_fiscal_item[2] = "."
                    LET p_aviso_rec.cod_fiscal_item[3,5] = l_cod_fiscal1
                 END IF
              END IF

              CALL sup3760_verifica_codigo_fiscal_item(p_dados_tela.cod_operacao,
                                                       p_dados_tela.ies_nf_aguard_nfe)

              IF p_dados_tela.ies_nf_aguard_nfe = "5" AND
                 p_dados_tela.ies_especie_nf = "NFC" THEN
                 CALL sup3760_busca_grupo_X_tipo_despesa()
              END IF

              #--inicio--vanderlei OS 393178 #
              IF sup3760_item_bonificado(p_cod_empresa,
                                         p_aviso_rec.num_aviso_rec,
                                         p_aviso_rec.num_seq,
                                         "item_bonificacao") = 'B' THEN
                 LET p_aviso_rec.ies_total_nf = 'N'
              END IF
              #---fim----vanderlei OS 393178 #

              CALL sup3760_verifica_cfop_destino(p_dados_tela.cod_operacao)
                   RETURNING p_status, l_cfop_destino

              IF p_status THEN
                 LET p_aviso_rec.cod_fiscal_item = l_cfop_destino
              END IF

              IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                           p_cod_empresa,
                                           p_dados_tela.num_aviso_rec) THEN
                 IF p_array[p_ind].cod_item IS NULL THEN
                    LET p_array[p_ind].cod_item = " "
                 END IF
                 IF p_array[p_ind].den_item IS NULL THEN
                    LET p_array[p_ind].den_item = " "
                 END IF
                 IF p_array[p_ind].qtd_declarad_nf IS NULL THEN
                    LET p_array[p_ind].qtd_declarad_nf = 0
                 END IF
                 IF p_array[p_ind].cod_unid_med_nf IS NULL THEN
                    LET p_array[p_ind].cod_unid_med_nf = " "
                 END IF
                 IF p_array[p_ind].pre_unit_nf IS NULL THEN
                    LET p_array[p_ind].pre_unit_nf = 0
                 END IF
                 IF p_array[p_ind].val_liquido_item IS NULL THEN
                    LET p_array[p_ind].val_liquido_item = 0
                 END IF
                 IF p_array[p_ind].cod_cla_fisc_nf IS NULL THEN
                    LET p_array[p_ind].cod_cla_fisc_nf = " "
                 END IF
                 IF p_array[p_ind].pct_ipi IS NULL THEN
                    LET p_array[p_ind].pct_ipi = 0
                 END IF

                 IF p_aviso_rec.num_seq = 1 THEN
                    LET p_aviso_rec.val_ipi_decl_item = p_dados_tela_f.val_ipi_nf
                    LET p_aviso_rec.val_icms_item_d = p_dados_tela_f.val_tot_icms_nf_d
                 END IF
              END IF

              CALL sup3760_verifica_insp_nfr()

              WHENEVER ERROR CONTINUE
              INSERT INTO aviso_rec VALUES (p_aviso_rec.*)
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("INCLUSAO","AVISO_REC")
                 LET p_houve_erro = TRUE
                 EXIT FOR
              ELSE

                 IF m_cred_st_fat = "S"    #OS. 479344
                 OR m_cred_st_fat = "E" THEN
                    IF NOT sup2621_verifica_nota_transferencia(p_aviso_rec.*, p_dados_tela.cod_fornecedor) THEN
                    END IF
                 END IF                    #OS. 479344

                 ### OS277425 ###
                 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                              p_cod_empresa,
                                              p_dados_tela.num_aviso_rec) = FALSE AND
                    sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                                            p_cod_empresa,
                                            p_dados_tela.num_aviso_rec) = FALSE THEN
                    IF sup3766_processa_movtos_estoque(p_cod_empresa,
                                                       p_dados_tela.num_aviso_rec,
                                                       p_aviso_rec.num_seq,
                                                       p_aviso_rec.cod_item) = FALSE THEN
                       ERROR " Problemas na inclusão dos controles de grade/dimensional "
                       LET p_houve_erro = TRUE
                    END IF
                 END IF
                 ### FIM OS277425 ###
              END IF

              IF NOT sup1031_grava_audit_ar(p_aviso_rec.num_aviso_rec,
                                            p_aviso_rec.num_seq,
                                            "SUP3760","1") THEN
                 LET p_houve_erro = TRUE
                 EXIT FOR
              END IF

              IF find4GLFunction('supy23_atualiza_oc_pd_fluxo_caixa') THEN
                 IF NOT supy23_atualiza_oc_pd_fluxo_caixa(p_ordem_sup.cod_empresa,
                                                          p_ordem_sup.cod_item,
                                                          p_ordem_sup.num_oc,
                                                          p_ordem_sup.cod_fornecedor,
                                                          p_ordem_sup.cnd_pgto,
                                                          p_ordem_sup.cod_mod_embar,
                                                          p_ordem_sup.cod_moeda,
                                                          p_aviso_rec.pre_unit_nf) THEN
                    LET p_houve_erro = TRUE
                    EXIT FOR
                 END IF
              END IF

              IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                     p_dados_tela.num_aviso_rec,
                                                     p_dados_tela.num_nf,
                                                     p_dados_tela.ser_nf,
                                                     p_dados_tela.ssr_nf,
                                                     p_dados_tela.cod_fornecedor,
                                                     p_dados_tela.cod_operacao,
                                                     p_dados_tela.cod_fiscal_compl) = TRUE THEN
                 CALL sup376_verifica_cod_fiscal_item()
              END IF

              LET p_dados_telar.* = p_dados_tela.*
              LET p_formonlyr.* = p_formonly.*

              IF m_gera_rsv_transf = "S" AND p_dados_tela.ies_nf_aguard_nfe  = "8" THEN
                 CALL sup3760_carrega_strib_nfe()
              END IF

              LET p_aviso_rec_compl_sq.cod_empresa       = p_aviso_rec.cod_empresa
              LET p_aviso_rec_compl_sq.cod_empresa_estab = p_aviso_rec.cod_empresa_estab
              LET p_aviso_rec_compl_sq.num_aviso_rec     = p_aviso_rec.num_aviso_rec
              LET p_aviso_rec_compl_sq.num_seq           = p_aviso_rec.num_seq
              LET p_aviso_rec_compl_sq.val_base_d_ipi_it = 0
              IF p_aviso_rec_compl_sq.cod_fiscal_compl IS NULL THEN
                 LET p_aviso_rec_compl_sq.cod_fiscal_compl = 0
              END IF
              LET p_aviso_rec_compl_sq.dat_ini_garantia = NULL
              LET p_aviso_rec_compl_sq.dat_fim_garantia = NULL

              INSERT INTO aviso_rec_compl_sq VALUES (p_aviso_rec_compl_sq.*)
              IF sqlca.sqlcode <> 0  THEN
                 CALL log003_err_sql("INCLUSAO","AVISO_REC_COMPL_SQ")
                 LET p_houve_erro = TRUE
              END IF

              IF m_contr_pes_rec = 'S' THEN #eduardo - o.s.290538 19/11/03
                 WHENEVER ERROR CONTINUE
                 UPDATE sup_ctr_balanca
                    SET aviso_recebto     = p_aviso_rec.num_aviso_rec
                  WHERE empresa           = p_cod_empresa
                    AND num_docum         = p_dados_tela.num_nf
                    AND serie_nota_fiscal = p_dados_tela.ser_nf
                    AND subserie_nf       = p_dados_tela.ssr_nf
                    AND fornecedor        = p_dados_tela.cod_fornecedor
                    AND seq_nota_fiscal   = p_aviso_rec.num_seq
                    AND tip_pesagem       = "1"
                 WHENEVER ERROR STOP
              END IF

              #--------------------------#
              # Alteração WMS OS: 450083 #
              #--------------------------#
              # Passo 28                 #
              IF NOT p_houve_erro THEN
                 IF m_wms_instal = "S" THEN
                    CALL wms0004_item_sob_controle_wms(p_cod_empresa, p_aviso_rec.cod_item) RETURNING l_sqlcode, l_status
                    IF l_sqlcode = FALSE THEN
                       LET p_houve_erro = TRUE
                    END IF
                    IF l_status AND p_houve_erro = FALSE THEN
                       IF p_dados_tela.ies_nf_aguard_nfe = "A" OR
                          p_dados_tela.ies_nf_aguard_nfe = "B" THEN
                          CALL wmst15_retorna_contrato_ativo_deposit(p_cod_empresa,
                                                                     m_wms_depositante,
                                                                     TODAY,
                                                                     0) RETURNING l_contrato, l_status
                          IF l_contrato <> "0" THEN
                             LET l_trans_contrato = wmst15_wms_contrato_busca_transacao(p_cod_empresa,
                                                                                        l_contrato)
                             IF wmsm15_wms_contrato_leitura(p_cod_empresa,
                                                            l_trans_contrato,
                                                            TRUE,1) THEN
                                # Passo 28.1 #
                                IF wmsm15_wms_contrato_get_altera_tip_estoque_nota_fiscal() = "N" THEN
                                   LET l_tip_estoque = wmst129_retorna_tip_estoque_padrao(p_cod_empresa,
                                                                                          m_wms_depositante,
                                                                                          0)
                                   WHENEVER ERROR CONTINUE
                                   INSERT INTO sup_par_ar (empresa,
                                                           aviso_recebto,
                                                           seq_aviso_recebto,
                                                           parametro,
                                                           par_ind_especial,
                                                           parametro_texto,
                                                           parametro_val,
                                                           parametro_dat)
                                                           VALUES (p_cod_empresa,
                                                                   p_aviso_rec.num_aviso_rec, #p_nf_sup.num_aviso_rec,
                                                                   p_aviso_rec.num_seq,
                                                                   "tip_estoque",
                                                                   NULL,
                                                                   l_tip_estoque,
                                                                   NULL,
                                                                   NULL)
                                   WHENEVER ERROR STOP
                                   IF sqlca.sqlcode <> 0 THEN
                                      CALL log003_err_sql("INCLUSAO","SUP_PAR_AR - WMS")
                                      LET p_houve_erro = TRUE
                                   END IF
                                END IF
                             END IF
                          ELSE
                             CALL log0030_processa_mensagem("Não existe contrato ativo para este depositante.","exclamation",0)
                             LET p_houve_erro = TRUE
                          END IF
                       END IF
                    END IF
                 END IF
              END IF
              # FIM -----------------------------------------#
              IF p_nfe_import = TRUE THEN
                 IF NOT sup376_rateio_desp_aces() THEN
                    LET p_houve_erro = TRUE
                    EXIT FOR
                 END IF
                 CALL sup376_grava_aviso_rec_proc_imp()

                 IF p_dados_tela.dat_entrada_nf >= "01/05/2004" THEN
                     CALL sup3760_grava_ar_piscofim()
                     IF p_houve_erro = TRUE THEN
                        EXIT FOR
                     END IF
                 END IF
              END IF
              {awc} CALL sup376_gera_iss()
            ELSE
              EXIT FOR
            END IF

            IF p_nfm_import = TRUE THEN
                WHENEVER ERROR CONTINUE
                INSERT INTO sup_par_ar (empresa          ,
                                        aviso_recebto    ,
                                        seq_aviso_recebto,
                                        parametro        ,
                                        par_ind_especial ,
                                        parametro_texto  ,
                                        parametro_val    ,
                                        parametro_dat  )
                																							VALUES (p_cod_empresa,
                                               p_dados_tela.num_aviso_rec,
                                               p_ind,
                                               "valor_ii",
                                               NULL,
                                               NULL,
                                               p_array_imp[p_ind].val_ii,
                                               NULL)
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   LET p_houve_erro = TRUE
																			EXIT FOR
                END IF
            END IF

            ### OS331455
            LET p_array_compl1[p_ind].cod_tip_despesa = p_aviso_rec.cod_tip_despesa
            ### OS331455 ###

            IF l_fornec_compex THEN
               CALL sup3760_verifica_regime_compex(p_cod_empresa,
                                                   p_aviso_rec.num_aviso_rec,
                                                   p_aviso_rec.num_seq,
                                                   p_aviso_rec.cod_item)
            END IF
          END FOR

          IF l_achou_item = FALSE THEN
             ERROR "Nao foram encontrados itens para nota fiscal!"
             SLEEP 3
             LET p_houve_erro = TRUE
          END IF

          IF p_houve_erro THEN
             INITIALIZE p_array TO NULL
             INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
             INITIALIZE p_dados_telar.* TO NULL
             INITIALIZE p_formonly.* TO NULL
             INITIALIZE p_formonlyr.* TO NULL
             LET p_formonly.* = p_formonlyr.*
             CLEAR FORM
              DISPLAY "                                                             "  AT 9,11
             ERROR " Inclusao Cancelada. "
             LET p_houve_erro = TRUE
             CALL log085_transacao("ROLLBACK")
             RETURN
          END IF

          ### Gravando/atualizando item_de_terc para transferencia de beneficiamento ###
          IF (p_dados_tela.cod_emp_benef IS NOT NULL AND
              p_dados_tela.cod_emp_benef <> " ") AND m_transf_saida <> "S" THEN

             CALL log120_procura_caminho("sup2480") RETURNING comando3
             LET comando3 = comando3 CLIPPED          ," ",
                            p_cod_empresa             ," ",
                            p_dados_tela.cod_emp_benef," ",
                            p_dados_tela.num_nf
             RUN comando3 RETURNING p_cancel
          END IF

          #-----------------inclusao de ar complementar--------------#
          LET p_aviso_rec_compl.cod_empresa     = p_cod_empresa
          LET p_aviso_rec_compl.num_aviso_rec   = p_dados_tela.num_aviso_rec
          LET p_aviso_rec_compl.cod_transpor    = NULL
          LET p_aviso_rec_compl.den_transpor    = NULL
          LET p_aviso_rec_compl.num_placa_veic  = NULL
          LET p_aviso_rec_compl.num_di          = NULL
          IF g_ies_transf_benef = FALSE OR
             g_ies_transf_benef IS NULL THEN
             IF p_ies_cod_operac IS NULL OR
                p_ies_cod_operac = "N" OR
                p_ies_cod_operac = " " THEN
                LET p_dados_tela.cod_operac_estoq = " "
             END IF
          END IF

          IF p_dados_tela.cod_operacao[1] = "5" THEN
             LET p_cod_fiscal_c = "1.",p_dados_tela.cod_operacao[3,5]
          END IF
          IF p_dados_tela.cod_operacao[1] = "6" THEN
             LET p_cod_fiscal_c = "2.",p_dados_tela.cod_operacao[3,5]
          END IF
          IF p_dados_tela.cod_operacao[1] = "7" THEN
             LET p_cod_fiscal_c = "3.",p_dados_tela.cod_operacao[3,5]
          END IF

          IF p_dados_tela.cod_fiscal_compl IS NULL THEN
             LET p_dados_tela.cod_fiscal_compl = 0
          END IF

          IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                 p_dados_tela.num_aviso_rec,
                                                 p_dados_tela.num_nf,
                                                 p_dados_tela.ser_nf,
                                                 p_dados_tela.ssr_nf,
                                                 p_dados_tela.cod_fornecedor,
                                                 p_dados_tela.cod_operacao,
                                                 p_dados_tela.cod_fiscal_compl) = TRUE AND
             p_dados_tela.cod_operacao[1,1] <> "3" THEN
             IF p_dados_tela.cod_operac_estoq IS NULL OR
                p_dados_tela.cod_operac_estoq = " "
             THEN
                LET p_dados_tela.cod_operac_estoq = p_oper_trans_unid
             END IF
             IF p_ies_obt_inf_com = "S" THEN
                LET p_aviso_rec_compl.cod_empresa_orig = p_cod_emp_transf
             END IF
          END IF

          IF p_dados_tela.cod_emp_benef IS NOT NULL AND
             p_dados_tela.cod_emp_benef <> " " THEN
             IF p_dados_tela.ies_nf_aguard_nfe = "8" THEN
                LET p_aviso_rec_compl.cod_empresa_orig = p_dados_tela.cod_emp_benef
             END IF
          END IF

          ##O.S 186311
          IF p_dados_tela.ies_nf_aguard_nfe = "P" THEN
             IF p_dados_tela.cod_operac_estoq IS NULL OR
                p_dados_tela.cod_operac_estoq = " " THEN
                LET p_dados_tela.cod_operac_estoq = g_operac_permuta
             END IF
          END IF
          LET p_aviso_rec_compl.cod_operacao    = p_dados_tela.cod_operac_estoq

          INITIALIZE p_aviso_rec_compl.cod_moeda_forn TO NULL
          IF p_ies_indexacao = "N" THEN
             IF p_cod_moeda_ped IS NOT NULL AND
                p_par_con.cod_moeda_padrao <> p_cod_moeda_ped AND
                p_fornecedor.cod_pais = p_cod_pais_emp THEN
                LET p_aviso_rec_compl.cod_moeda_forn = p_cod_moeda_ped
             END IF
          ELSE
             LET p_aviso_rec_compl.cod_moeda_forn = p_cod_moeda_ped #798794#
          END IF

          IF p_aviso_rec_compl.cod_moeda_forn = 0
          THEN LET p_aviso_rec_compl.cod_moeda_forn = NULL
          END IF

          LET p_aviso_rec_compl.cod_fiscal_compl = p_dados_tela.cod_fiscal_compl
          IF p_aviso_rec_compl.cod_fiscal_compl IS NULL THEN
             LET p_aviso_rec_compl.cod_fiscal_compl = 0
          END IF
          # OS 489183 #
          LET p_aviso_rec_compl.ies_situacao = "N"
          IF p_nfe_import = TRUE OR
             p_nfm_import = TRUE THEN
             LET p_aviso_rec_compl.num_di = p_processo_imp.num_di
          END IF
          # OS 489183 #
          WHENEVER ERROR CONTINUE
          SELECT cod_transpor,
                 den_transpor
            INTO p_aviso_rec_compl.cod_transpor,
                 p_aviso_rec_compl.den_transpor
            FROM aviso_rec_compl
           WHERE cod_empresa   = p_cod_empresa
             AND num_aviso_rec = p_dados_tela.num_aviso_rec
           WHENEVER ERROR STOP
           IF sqlca.sqlcode = 0 THEN
             UPDATE aviso_rec_compl SET cod_transpor      = p_aviso_rec_compl.cod_transpor    ,
                                        den_transpor      = p_aviso_rec_compl.den_transpor    ,
                                        num_placa_veic    = p_aviso_rec_compl.num_placa_veic  ,
                                        num_di            = p_aviso_rec_compl.num_di          ,
                                        ies_incl_import   = p_aviso_rec_compl.ies_incl_import ,
                                        num_lote_pat      = p_aviso_rec_compl.num_lote_pat    ,
                                        cod_operacao      = p_aviso_rec_compl.cod_operacao    ,
                                        cod_empresa_orig  = p_aviso_rec_compl.cod_empresa_orig,
                                        cod_moeda_forn    = p_aviso_rec_compl.cod_moeda_forn  ,
                                        num_embarque      = p_aviso_rec_compl.num_embarque    ,
                                        ies_situacao      = p_aviso_rec_compl.ies_situacao    ,
                                        nom_usuario       = p_aviso_rec_compl.nom_usuario     ,
                                        dat_proces        = p_aviso_rec_compl.dat_proces      ,
                                        hor_operac        = p_aviso_rec_compl.hor_operac      ,
                                        cod_fiscal_compl  = p_aviso_rec_compl.cod_fiscal_compl
              WHERE cod_empresa   = p_cod_empresa
                AND num_aviso_rec = p_dados_tela.num_aviso_rec

           ELSE
              INSERT INTO aviso_rec_compl VALUES (p_aviso_rec_compl.*)
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("INCLUSAO","AVISO_REC_COMPL")
                 LET p_houve_erro = TRUE
              END IF
           END IF

          IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
             IF p_processo_imp.num_aviso_rec IS NULL OR
                p_processo_imp.num_aviso_rec = " " THEN
                UPDATE processo_imp
                   SET num_aviso_rec = p_dados_tela.num_aviso_rec,
                       ies_situacao = "5"
                 WHERE cod_empresa  = p_processo_imp.cod_empresa
                   AND num_processo = p_processo_imp.num_processo
                   AND num_versao   = p_processo_imp.num_versao
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("ATUALIZACAO","PROCESSO_IMP")
                   LET p_houve_erro = TRUE
                END IF
             END IF
          END IF

          IF sup376_inclusao_nf_sup()  THEN

             IF m_nfp_incl_apos_encerr THEN
                IF NOT sup3760_grava_ind_nfp_incl_apos_encerr() THEN
                   LET p_houve_erro = TRUE
                END IF
             END IF

             LET p_dados_tela.* = p_dados_telar.*
             IF p_ies_cod_operac = "S" THEN
             ELSE
                IF g_ies_transf_benef = TRUE THEN
                ELSE
                   LET p_dados_tela.cod_operac_estoq = NULL
                END IF
             END IF
             LET p_formonly.* = p_formonlyr.*
             CURRENT WINDOW IS w_sup37601
             DISPLAY BY NAME p_dados_tela.*
             IF p_ies_cod_operac = "S" THEN
             ELSE
                IF g_ies_transf_benef = TRUE THEN
                ELSE
                   LET p_dados_tela.cod_operac_estoq = p_dados_telar.cod_operac_estoq
                END IF
             END IF
             DISPLAY BY NAME p_dados_tela_f.*,
                             p_formonly.raz_social,
                             p_formonly.des_cnd_pgto,
                             p_formonly.tex_tip_frete
             LET p_ies_cons = FALSE

             CALL sup376_verifica_inclusao_vencimento_nff()
             #--#796313 - Espindola - Projeto Totvs Colaboracao #--#
             #--#Atualiza monitor de integracao (caso existir documento)
             IF m_utiliz_totvs_colab = "S" THEN
                IF NOT sup13429_integra_erp_monitor(p_nf_sup.cod_empresa,    p_nf_sup.num_nf,
                                                    p_nf_sup.ser_nf,         p_nf_sup.ssr_nf,
                                                    p_nf_sup.cod_fornecedor, p_nf_sup.dat_emis_nf,
                                                    "INCLUSAO") THEN
                   LET p_houve_erro = TRUE
                END IF
             END IF

             WHENEVER ERROR CONTINUE
             SELECT empresa
               FROM nf_sup_erro
              WHERE nf_sup_erro.empresa            = p_cod_empresa
                AND nf_sup_erro.num_aviso_rec      = p_nf_sup.num_aviso_rec
                AND nf_sup_erro.num_seq            = 0
                AND nf_sup_erro.des_pendencia_item = "Falta efetuar consistencia"
                AND nf_sup_erro.ies_origem_erro    = "1"
             WHENEVER ERROR STOP
             IF sqlca.sqlcode = NOTFOUND THEN

                WHENEVER ERROR CONTINUE
                INSERT INTO nf_sup_erro (empresa,
                                         num_aviso_rec,
                                         num_seq,
                                         des_pendencia_item,
                                         ies_origem_erro,
                                         ies_erro_grave )
                                 VALUES (p_nf_sup.cod_empresa,
                                         p_nf_sup.num_aviso_rec,
                                         0,
                                         "Falta efetuar consistencia",
                                         "1",
                                         "S")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("INCLUSAO","NF_SUP_ERRO")
                   LET p_houve_erro = TRUE
                END IF
             END IF

             IF NOT fcl1150_integra_ar_fcx(p_nf_sup.cod_empresa,
                                           p_nf_sup.num_aviso_rec,"IN") THEN
                LET p_houve_erro = TRUE
             END IF

             IF (m_gerar_os_recb_mat_terc = 'S') THEN
                IF (p_nf_sup.ies_especie_nf = 'NFR') AND
                   (p_nf_sup.ies_nf_aguard_nfe = 'T') THEN
                   IF ate0074_inclusao_os(p_nf_sup.num_nf,
                                          p_nf_sup.ser_nf,
                                          p_nf_sup.ssr_nf,
                                          p_nf_sup.ies_especie_nf,
                                          p_nf_sup.cod_fornecedor,
                                          p_nf_sup.dat_entrada_nf,
                                          p_nf_sup.num_aviso_rec,
                                          'S') THEN
                      LET p_houve_erro = TRUE
                      EXIT WHILE
                   END IF
                END IF
             END IF

             EXIT WHILE
          ELSE
             INITIALIZE p_array TO NULL
             INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
             INITIALIZE p_dados_telar.* TO NULL
             INITIALIZE p_formonly.* TO NULL
             INITIALIZE p_formonlyr.* TO NULL
             LET p_formonly.* = p_formonlyr.*
             CLEAR FORM
             CALL log085_transacao("ROLLBACK")
             RETURN
          END IF
       ELSE
          RETURN
       END IF
    ELSE
       INITIALIZE p_array TO NULL
       INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
       INITIALIZE p_dados_telar.* TO NULL
       INITIALIZE p_formonly.* TO NULL
       INITIALIZE p_formonlyr.* TO NULL
       LET p_formonly.* = p_formonlyr.*
       CLEAR FORM
        DISPLAY "                                                             "  AT 9,11
       ERROR " Inclusao Cancelada. "
       LET p_houve_erro = TRUE
       RETURN
    END IF
 END WHILE

 #--inicio--vanderlei OS 383999 #
 IF sup1481_nfc_compl_imposto(p_nf_sup.ies_especie_nf,
                              p_cod_empresa,
                              p_nf_sup.num_aviso_rec) = FALSE AND
    sup1481_nfc_compl_valor(p_nf_sup.ies_especie_nf,
                            p_cod_empresa,
                            p_nf_sup.num_aviso_rec) = FALSE THEN
    IF NOT sup0064_controla_grade_dimensional(p_cod_empresa,
                                              p_aviso_rec.cod_item,
                                              p_nf_sup.num_aviso_rec,
                                              p_aviso_rec.num_seq) THEN
       ERROR " Inclusao Cancelada. "
       LET p_houve_erro = 1
    END IF
 END IF
 #---fim----vanderlei OS 383999 #

 #--inicio--OS 502143 #
  LET l_is_clie_319 = FALSE
  IF find4GLFunction('supy101_cliente_319') THEN
     LET l_is_clie_319 = supy101_cliente_319()
  END IF

  IF l_is_clie_319 = TRUE          AND
     (p_dados_tela.cod_operacao = '5.601'  OR
     p_dados_tela.cod_operacao = '6.601')  AND
      m_cod_item_cred_transf_icms = p_array[1].cod_item THEN

      IF find4GLFunction('supy101_insert_sup_par_ar') THEN
         IF supy101_insert_sup_par_ar(p_cod_empresa,
                                      p_dados_tela.num_aviso_rec,
                                      p_dados_tela.num_nf,
                                      p_dados_tela_f.val_tot_nf_d,
                                      p_aviso_rec.num_seq,
                                      p_dados_tela.cod_fornecedor,
                                      'INCLUSAO',
                                      m_serie_branca) = FALSE  THEN

            LET l_msg = 'Obrigatorio informar nota de saída para item ', p_array[1].cod_item CLIPPED, "."
            CALL log0030_mensagem(l_msg,'exclamation')
            CLEAR FORM
            DISPLAY "                                                             "  AT 9,11
            ERROR " Inclusao Cancelada. "
            LET p_houve_erro = TRUE
         END IF
      END IF

  END IF
  #---fim----OS 502143 #


 #--------------------------#
 # Alteração WMS OS: 450083 #
 #--------------------------#
 # Passo 3                  #
 IF m_wms_instal = "S" AND p_houve_erro = FALSE THEN
    LET m_tempo_gasto_ditacao_nota = sup3760_tempo_gasto(CURRENT YEAR TO SECOND,
                                                         m_horario_alteracao_wms)
    WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_ar (empresa,
                            aviso_recebto,
                            seq_aviso_recebto,
                            parametro,
                            par_ind_especial,
                            parametro_texto,
                            parametro_val,
                            parametro_dat)
                         VALUES
                            (p_cod_empresa,
                             p_nf_sup.num_aviso_rec,
                             0,
                             "tempo_digitacao_nf",
                             NULL,
                             m_tempo_gasto_ditacao_nota,
                             NULL,
                             NULL)
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("INCLUSAO","SUP_PAR_AR - WMS")
       LET p_houve_erro = TRUE
    END IF

    # Passo 20 #
    IF p_houve_erro = FALSE THEN
       IF p_dados_tela.ies_nf_aguard_nfe <> "B" THEN
          IF m_wms_depositante = " "  OR m_wms_depositante IS NULL THEN
             LET m_wms_depositante = p_dados_tela.cod_fornecedor
          END IF
          WHENEVER ERROR CONTINUE
            DELETE FROM ar_depos
             WHERE cod_empresa     = p_cod_empresa
               AND num_aviso_rec   = p_nf_sup.num_aviso_rec
               AND cod_depositante = m_wms_depositante
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("DELETE","AR_DEPOS - WMS")
             LET p_houve_erro = TRUE
          END IF
          WHENEVER ERROR CONTINUE
          INSERT INTO ar_depos (cod_empresa,
                                num_aviso_rec,
                                cod_depositante)
                                VALUES (p_cod_empresa,
                                        p_nf_sup.num_aviso_rec,
                                        m_wms_depositante)
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("INCLUSAO","AR_DEPOS - WMS")
             LET p_houve_erro = TRUE
          END IF
       END IF
    END IF

    # Passo 26 #
    IF p_houve_erro = FALSE THEN
       WHENEVER ERROR CONTINUE
       INSERT INTO sup_par_ar (empresa,
                               aviso_recebto,
                               seq_aviso_recebto,
                               parametro,
                               par_ind_especial,
                               parametro_texto,
                               parametro_val,
                               parametro_dat)
                               VALUES (p_cod_empresa,
                                       p_nf_sup.num_aviso_rec,
                                       0,
                                       "possui_identif_saida",
                                       "N",
                                       NULL,
                                       NULL,
                                       NULL)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INCLUSAO","SUP_PAR_AR - WMS")
          LET p_houve_erro = TRUE
       END IF
    END IF

    # Passo 27 #
    IF p_houve_erro = FALSE THEN
       WHENEVER ERROR CONTINUE
       INSERT INTO sup_par_ar (empresa,
                               aviso_recebto,
                               seq_aviso_recebto,
                               parametro,
                               par_ind_especial,
                               parametro_texto,
                               parametro_val,
                               parametro_dat)
                               VALUES (p_cod_empresa,
                                       p_nf_sup.num_aviso_rec,
                                       0,
                                       "nf_receb_edi",
                                       "N",
                                       NULL,
                                       NULL,
                                       NULL)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INCLUSAO","SUP_PAR_AR - WMS")
          LET p_houve_erro = TRUE
       END IF
    END IF

    # OS 547161
    IF p_houve_erro = FALSE AND
       m_segmto_utilizacao = "O" THEN
       IF m_tipo_documento = "D" THEN
          IF NOT sup3760_insere_nf_regular_fiscal() THEN
             LET p_houve_erro = TRUE
          END IF
       END IF
    END IF

    # Passo 28 #
    IF p_houve_erro = FALSE THEN
       IF p_dados_tela.ies_nf_aguard_nfe = "A" OR
          p_dados_tela.ies_nf_aguard_nfe = "B" THEN
          CALL wmst15_retorna_contrato_ativo_deposit(p_cod_empresa,
                                                     m_wms_depositante,
                                                     TODAY,
                                                     0) RETURNING l_contrato, l_status
          IF l_contrato <> "0" THEN
             LET l_trans_contrato = wmst15_wms_contrato_busca_transacao(p_cod_empresa,
                                                                        l_contrato)
             IF wmsm15_wms_contrato_leitura(p_cod_empresa,
                                            l_trans_contrato,
                                            TRUE,1) THEN
                # Passo 28.1 #
                IF wmsm15_wms_contrato_get_altera_tip_estoque_nota_fiscal() <> "N" THEN
                   # Passo 28.2 #
                   CALL log120_procura_caminho("wms6132") RETURNING l_comando
                   LET l_comando = l_comando CLIPPED, " '",p_cod_empresa CLIPPED,"' ",
                                                      p_nf_sup.num_aviso_rec,
                                                      " 'S' ",
                                                      " 'S' "
                   RUN l_comando RETURNING p_cancel
                END IF
             END IF
          ELSE
             CALL log0030_processa_mensagem("Não existe contrato ativo para este depositante.","exclamation",0)
             LET p_houve_erro = TRUE
          END IF
       END IF
    END IF

 END IF
 #---------------#

 DISPLAY BY NAME p_nf_sup.ies_nf_aguard_nfe
 #724910#
 #EPL SUPY150 CRIADO PELA ACTVS, TOTVS NÃO POSSUI CÓDIGOS#
 IF find4GLFunction("supy150_efetiva_inclusao_nf") THEN
    IF supy150_efetiva_inclusao_nf(p_cod_empresa, p_nf_sup.num_aviso_rec) = FALSE THEN
       LET p_houve_erro = TRUE
    END IF
 END IF

 # Chamado 729881 - WMS
 IF m_wms_instal = 'S' THEN
    IF find4GLFunction("wmsy18_grava_ar_q04") THEN
       IF m_wms_gravou_q04 THEN
          IF NOT wmsy18_grava_ar_q04(p_cod_empresa, p_nf_sup.num_aviso_rec, m_wms_q04) THEN
             LET p_houve_erro = TRUE
          END IF
       END IF
    END IF
 END IF

 #---fim--- 724910#
 IF p_houve_erro = FALSE THEN
    #729150#
    #EPL y_sup3760_validacoes_apos_consistencias_nf CRIADO PELA ACTVS#
    IF LOG_existe_epl("y_sup3760_validacoes_apos_consistencias_nf") THEN
       CALL conout('INICIO DO PROCESSO DO EPL y_sup3760_validacoes_apos_consistencias_nf')
       WHENEVER ERROR CONTINUE
       SELECT nf_sup_erro.des_pendencia_item
         FROM nf_sup_erro
        WHERE nf_sup_erro.empresa       = p_cod_empresa
          AND nf_sup_erro.num_aviso_rec = p_nf_sup.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 100 THEN
          CALL y_sup3760_validacoes_apos_consistencias_nf(p_cod_empresa, p_nf_sup.num_aviso_rec,"I")
             RETURNING l_status
       ELSE
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("LEITURA","NF_SUP_ERRO")
          END IF
       END IF
    END IF
    #---fim--- 729150#

    WHENEVER ERROR CONTINUE
        CALL log085_transacao("COMMIT")
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       INITIALIZE p_msg TO NULL
       LET p_msg ="Erro na efetivação dos dados. SQLCA.SQLCODE = ", sqlca.SQLCODE CLIPPED
       CALL log0030_mensagem(p_msg,"stop")
       CALL log085_transacao("ROLLBACK") #OS596059
       RETURN
    ELSE
       IF p_nfe_import = TRUE THEN
          CALL imp0024_mov_even(p_cod_empresa,p_processo_imp.num_processo,
                                27," ",TODAY)
       END IF
       IF sup3760_informa_peso() = TRUE THEN
          IF m_peso_nf IS NOT NULL AND
             m_peso_nf <> " " THEN
             DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
             DISPLAY "Peso NF: ", m_peso_nf ," "       AT 21,02 ATTRIBUTE(REVERSE)
          ELSE
             DISPLAY "                           "  AT 21,02
          END IF
       ELSE
          INITIALIZE m_peso_nf TO NULL
          DISPLAY "                           "  AT 21,02
       END IF
       MESSAGE " Inclusao da NOTA FISCAL efetuada com sucesso. "
       ATTRIBUTE(REVERSE)
       CALL sup376_funcoes_apos_inclusao()
       CALL sup376_exibe_array()
    END IF
 ELSE
    CALL log085_transacao("ROLLBACK")
 END IF


 #--------------------------#
 # Alteração WMS OS: 450083 #
 #--------------------------#
 IF p_houve_erro = FALSE AND m_wms_instal = 'S' THEN
    # Passo 16 #
    IF p_houve_erro = FALSE THEN
       IF NOT wms6133_grava_dados_validacao_primeira_nf() THEN
          LET p_houve_erro = TRUE
       END IF
    END IF
 END IF
 #---------------#

 IF (p_nfe_vendas  = TRUE OR
     m_nf_tipo_x = TRUE)  AND ### OS 511148
     p_houve_erro = FALSE THEN
     CALL set_count(999)
   #  DISPLAY ARRAY p_array TO s_sup37601.*

     FOR l_ind = 1 TO 4
         DISPLAY  p_array[l_ind].* TO s_sup37601[l_ind].*
     END FOR
 END IF

 END FUNCTION

#-- OS 548208 inicio --#
#-------------------------------------------------#
 FUNCTION sup3760_verifica_aviso_rec_relacionamento(l_num_aviso_rec_simbolico, l_num_aviso_rec)
#-------------------------------------------------#
 DEFINE l_num_aviso_rec_simbolico  LIKE aviso_rec.num_aviso_rec,
        l_num_aviso_rec            LIKE aviso_rec.num_aviso_rec,
        l_num_seq                  LIKE aviso_rec.num_seq,
        l_num_oc                   LIKE aviso_rec.num_oc,
        l_num_oc_relac             LIKE aviso_rec.num_oc,
        l_cod_item                 LIKE aviso_rec.cod_item,
        l_cod_fiscal_item          LIKE aviso_rec.cod_fiscal_item,
        l_cfop_retr                SMALLINT,
        l_cfop_serv                SMALLINT,
        l_pos                      SMALLINT,
        l_cfop                     CHAR(03),
        l_tipo                     CHAR(20)

  LET l_cfop_retr = FALSE
  LET l_cfop_serv = FALSE

  WHENEVER ERROR CONTINUE
  DECLARE cq_aviso_rec_simbolico CURSOR WITH HOLD FOR
  SELECT aviso_rec.num_seq,
         aviso_rec.num_oc,
         aviso_rec.cod_item,
         aviso_rec.cod_fiscal_item
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa    = p_cod_empresa
     AND aviso_rec.num_aviso_rec  = l_num_aviso_rec_simbolico
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","CQ_AVISO_REC_SIMBOLICO")
  END IF

  WHENEVER ERROR CONTINUE
  OPEN cq_aviso_rec_simbolico
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("OPEN","CQ_AVISO_REC_SIMBOLICO")
  END IF

  WHILE TRUE
     WHENEVER ERROR CONTINUE
     FETCH cq_aviso_rec_simbolico INTO l_num_seq,
                                       l_num_oc,
                                       l_cod_item,
                                       l_cod_fiscal_item

     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        IF sqlca.sqlcode <> 100 THEN
           CALL log003_err_sql("FETCH","CQ_AVISO_REC_SIMBOLICO")
        END IF
        EXIT WHILE
     END IF
     LET l_pos  = LENGTH(l_cod_fiscal_item)

     IF l_pos < 5 THEN
        CONTINUE WHILE
     END IF

     LET l_cfop = l_cod_fiscal_item[l_pos-2,l_pos]

     WHENEVER ERROR CONTINUE
       SELECT fim_cfop_nf_retn
         FROM sup_cfop_retn_serv
        WHERE empresa          = p_cod_empresa
          AND fim_cfop_nf_retn = l_cfop
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        IF sqlca.sqlcode <> NOTFOUND THEN
           CALL log003_err_sql('SELECT','SUP_CFOP_RETN_SERV')
        END IF
     ELSE
        LET l_cfop_retr = TRUE
     END IF

     IF l_cfop_retr = TRUE THEN
        LET l_num_oc = sup3760_busca_num_oc(l_num_aviso_rec)
        WHENEVER ERROR CONTINUE
        SELECT 1
          FROM estrut_ordem_sup
         WHERE estrut_ordem_sup.cod_empresa   = p_cod_empresa
           AND estrut_ordem_sup.num_oc        = l_num_oc
           AND estrut_ordem_sup.cod_item_comp = l_cod_item
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 100 THEN
           LET m_num_ar_relac = l_num_aviso_rec_simbolico
           CALL sup3760_inclui_nf_sup_erro(l_num_seq,"1","S","O item de retorno simbólico é diferente do item da estrutura da ordem de compra.")
           EXIT WHILE
        END IF
     END IF
  END WHILE
  CLOSE cq_aviso_rec_simbolico
  FREE  cq_aviso_rec_simbolico

  ################

  WHENEVER ERROR CONTINUE
  DECLARE cq_aviso_rec_n_simbolico CURSOR WITH HOLD FOR
  SELECT aviso_rec.cod_fiscal_item
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa    = p_cod_empresa
     AND aviso_rec.num_aviso_rec  = l_num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","CQ_AVISO_REC_N_SIMBOLICO")
  END IF

  WHENEVER ERROR CONTINUE
  OPEN cq_aviso_rec_n_simbolico
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("OPEN","CQ_AVISO_REC_N_SIMBOLICO")
  END IF

  WHILE TRUE
     WHENEVER ERROR CONTINUE
     FETCH cq_aviso_rec_n_simbolico INTO l_cod_fiscal_item

     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        IF sqlca.sqlcode <> 100 THEN
           CALL log003_err_sql("FETCH","CQ_AVISO_REC_N_SIMBOLICO")
        END IF
        EXIT WHILE
     END IF

     LET l_pos  = LENGTH(l_cod_fiscal_item)

     IF l_pos < 5 THEN
        CONTINUE WHILE
     END IF

     LET l_cfop = l_cod_fiscal_item[l_pos-2,l_pos]

     WHENEVER ERROR CONTINUE
       SELECT fim_cfop_nf_retn
         FROM sup_cfop_retn_serv
        WHERE empresa            = p_cod_empresa
          AND final_cfop_nf_serv = l_cfop
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        IF sqlca.sqlcode <> NOTFOUND THEN
           CALL log003_err_sql('SELECT','SUP_CFOP_RETN_SERV')
        END IF
     ELSE
        LET l_cfop_serv = TRUE
     END IF

  END WHILE
  CLOSE cq_aviso_rec_n_simbolico
  FREE  cq_aviso_rec_n_simbolico

  IF l_cfop_retr = TRUE AND l_cfop_serv = FALSE THEN
     LET m_num_ar_relac = l_num_aviso_rec_simbolico
     CALL sup3760_inclui_nf_sup_erro(1,"1","S","Nota Fiscal não possui item que tenha CFOP serviço")
  ELSE
     IF l_cfop_retr = FALSE AND l_cfop_serv = TRUE THEN
        LET m_num_ar_relac = l_num_aviso_rec
        CALL sup3760_inclui_nf_sup_erro(1,"1","S","Nota Fiscal não possui item que tenha CFOP retorno simbolico")
     ELSE
        IF l_cfop_retr = FALSE AND l_cfop_serv = FALSE THEN
           CALL sup3760_inclui_nf_sup_erro(1,"1","S","Nota Fiscal não possui item que tenha CFOP serviço")
           CALL sup3760_inclui_nf_sup_erro(1,"1","S","Nota Fiscal não possui item que tenha CFOP retorno simbolico")
        END IF
     END IF
  END IF

 END FUNCTION

#--------------------------------#
 FUNCTION sup3760_busca_num_oc(l_num_aviso_rec)
#--------------------------------#
  DEFINE l_num_aviso_rec        LIKE aviso_rec.num_aviso_rec,
         l_num_oc               LIKE aviso_rec.num_oc

  WHENEVER ERROR CONTINUE
  SELECT UNIQUE(num_oc)
    INTO l_num_oc
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa   = p_cod_empresa
     AND aviso_rec.num_aviso_rec = l_num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF sqlca.sqlcode <> 100 THEN
        CALL log003_err_sql("SELECAO","AVISO_REC")
     END IF
  END IF

  RETURN l_num_oc

 END FUNCTION
#--------------------------------------------------------------------#
 FUNCTION sup3760_existe_relacionamento(l_num_aviso_rec)
#--------------------------------------------------------------------#
 DEFINE l_num_aviso_rec        LIKE aviso_rec.num_aviso_rec,
        l_num_aviso_rec_relac  LIKE aviso_rec.num_aviso_rec

  WHENEVER ERROR CONTINUE
    SELECT sup_par_ar.parametro_val
      INTO l_num_aviso_rec_relac
      FROM sup_par_ar
     WHERE sup_par_ar.empresa           = p_cod_empresa
       AND sup_par_ar.seq_aviso_recebto = 1
       AND sup_par_ar.parametro         = "final_cfop"
       AND sup_par_ar.aviso_recebto     = l_num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     RETURN l_num_aviso_rec_relac
  ELSE
     RETURN l_num_aviso_rec
  END IF

 END FUNCTION
#------------------------------------------#
 FUNCTION sup3760_verifica_cfop_retr_serv_relac()
#------------------------------------------#
  DEFINE l_cod_fiscal_item LIKE aviso_rec.cod_fiscal_item,
         l_cfop_retr       SMALLINT,
         l_cfop_serv       SMALLINT,
         l_pos             SMALLINT,
         l_cfop            CHAR(03),
         l_cod_item        LIKE aviso_rec.cod_item,
         l_num_oc          LIKE aviso_rec.num_oc,
         l_num_oc_relac    LIKE aviso_rec.num_oc,
         l_num_seq         LIKE aviso_rec.num_seq

  WHENEVER ERROR CONTINUE
   DECLARE cq_cfop_itens1 CURSOR FOR
    SELECT aviso_rec.cod_fiscal_item,
           aviso_rec.num_seq,
           aviso_rec.cod_item,
           aviso_rec.num_oc
      FROM aviso_rec
     WHERE cod_empresa   = p_aviso_rec.cod_empresa
       AND num_aviso_rec = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode != 0 THEN
     CALL log003_err_sql("DECLARE","CQ_CFOP_ITENS1")
  END IF

  LET l_cfop_retr = FALSE
  LET l_cfop_serv = FALSE

  WHENEVER ERROR CONTINUE
   FOREACH cq_cfop_itens1 INTO l_cod_fiscal_item,
                               l_num_seq,
                               l_cod_item,
                               l_num_oc
      IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
         CALL log003_err_sql("FOREACH CURSOR","CQ_CFOP_ITENS1")
      END IF

      IF l_num_oc IS NOT NULL
      AND l_num_oc <> " "
      AND l_num_oc <> 0 THEN
         LET l_num_oc_relac = l_num_oc
      END IF

      LET l_pos  = LENGTH(l_cod_fiscal_item)

      IF l_pos < 5 THEN
         CONTINUE FOREACH
      END IF

      LET l_cfop = l_cod_fiscal_item[l_pos-2,l_pos]

      WHENEVER ERROR CONTINUE
        SELECT fim_cfop_nf_retn
          FROM sup_cfop_retn_serv
         WHERE empresa          = p_cod_empresa
           AND fim_cfop_nf_retn = l_cfop
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 THEN
         IF sqlca.sqlcode <> NOTFOUND THEN
            CALL log003_err_sql('SELECT','SUP_CFOP_RETN_SERV')
         END IF
      ELSE
         LET l_cfop_retr = TRUE
         WHENEVER ERROR CONTINUE
         SELECT estrut_ordem_sup.cod_item_comp
           FROM estrut_ordem_sup
          WHERE estrut_ordem_sup.cod_empresa   = p_cod_empresa
            AND estrut_ordem_sup.num_oc        = l_num_oc_relac
            AND estrut_ordem_sup.cod_item_comp = l_cod_item
         WHENEVER ERROR STOP
         IF sqlca.sqlcode = 100 THEN
            LET m_num_ar_relac = p_aviso_rec.num_aviso_rec
            CALL sup3760_inclui_nf_sup_erro(l_num_seq,"1","S","O item de retorno simbólico é diferente do item da estrutura da ordem de compra.")
         END IF
      END IF

      WHENEVER ERROR CONTINUE
        SELECT fim_cfop_nf_retn
          FROM sup_cfop_retn_serv
         WHERE empresa            = p_cod_empresa
           AND final_cfop_nf_serv = l_cfop
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 THEN
         IF sqlca.sqlcode <> NOTFOUND THEN
            CALL log003_err_sql('SELECT','SUP_CFOP_RETN_SERV')
         END IF
      ELSE
         LET l_cfop_serv = TRUE
      END IF

      IF  l_cfop_retr = TRUE
      AND l_cfop_serv = TRUE THEN
         EXIT FOREACH
      END IF
   END FOREACH
  WHENEVER ERROR STOP

   LET m_num_ar_relac = p_aviso_rec.num_aviso_rec
   IF l_cfop_retr = TRUE AND l_cfop_serv = FALSE THEN
      CALL sup3760_inclui_nf_sup_erro(1,"1","S","Nota Fiscal não possui item que tenha CFOP serviço")
   ELSE
      IF l_cfop_retr = FALSE AND l_cfop_serv = TRUE THEN
         CALL sup3760_inclui_nf_sup_erro(1,"1","S","Nota Fiscal não possui item que tenha CFOP retorno simbolico")
      ELSE
         IF l_cfop_retr = FALSE AND l_cfop_serv = FALSE THEN
            CALL sup3760_inclui_nf_sup_erro(1,"1","S","Nota Fiscal não possui item que tenha CFOP serviço")
            CALL sup3760_inclui_nf_sup_erro(1,"1","S","Nota Fiscal não possui item que tenha CFOP retorno simbolico")
         END IF
      END IF
   END IF

  FREE cq_cfop_itens1

 END FUNCTION

#-- OS 548208 fim --#
#-------------------------------------#
 FUNCTION sup376_obtem_num_aviso_rec()
#-------------------------------------#
 DEFINE l_prx_num_ar LIKE par_sup_pad.par_val

 INITIALIZE m_dat_hor_proces TO NULL

 WHENEVER ERROR CONTINUE
 DECLARE cm_par_sup CURSOR FOR
  SELECT par_val INTO p_dados_tela.num_aviso_rec
    FROM par_sup_pad
   WHERE cod_empresa = p_cod_empresa
     AND cod_parametro = "num_prx_ar"
 FOR UPDATE
 OPEN cm_par_sup
 FETCH cm_par_sup
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    IF p_dados_tela.num_aviso_rec > 999998 THEN
       LET l_prx_num_ar = 1
    ELSE
       LET l_prx_num_ar = p_dados_tela.num_aviso_rec + 1
    END IF
    WHENEVER ERROR CONTINUE
    UPDATE par_sup_pad
       SET par_val = l_prx_num_ar
     WHERE CURRENT OF cm_par_sup
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("MODIFICACAO","PAR_SUP_PAD")
       CLOSE cm_par_sup
       RETURN FALSE
    ELSE
       LET m_dat_hor_proces = CURRENT
       CLOSE cm_par_sup
       RETURN TRUE
    END IF
 ELSE
    CALL log003_err_sql("LEITURA","PAR_SUP_PAD")
    CLOSE cm_par_sup
    RETURN FALSE
 END IF
 END FUNCTION

#------------------------------------------#
 FUNCTION sup376_grava_aviso_rec_proc_imp()
#------------------------------------------#
   LET p_ar_proc_imp.cod_empresa     = p_aviso_rec.cod_empresa
   LET p_ar_proc_imp.num_processo    = p_processo_imp.num_processo
   LET p_ar_proc_imp.num_aviso_rec   = p_aviso_rec.num_aviso_rec
   LET p_ar_proc_imp.num_seq         = p_aviso_rec.num_seq
   LET p_ar_proc_imp.num_pedido      = p_aviso_rec.num_pedido
   LET p_ar_proc_imp.num_oc          = p_aviso_rec.num_oc
   LET p_ar_proc_imp.quantidade      = p_aviso_rec.qtd_declarad_nf
   LET p_ar_proc_imp.val_ii          = p_array_imp[p_ind].val_ii
   LET p_ar_proc_imp.val_desp_aces   = p_array_imp[p_ind].val_desp_imp
   LET p_ar_proc_imp.val_outras_desp = 0
   LET p_ar_proc_imp.val_da_icms     = 0
   INSERT INTO aviso_rec_proc_imp
    VALUES (p_ar_proc_imp.*)
   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("INCLUSAO","AVISO_REC_PROC_IMP")
      LET p_houve_erro = TRUE
   END IF
 END FUNCTION

#------------------------------------#
 FUNCTION sup3760_grava_ar_piscofim()
#------------------------------------#
 DEFINE lr_piscofins_imp        RECORD
                                num_seq               LIKE aviso_rec.num_seq,
                                val_bc_pis_import     LIKE sup_ar_piscofim.val_bc_pis_import,
                                val_bc_cofins_imp     LIKE sup_ar_piscofim.val_bc_cofins_imp,
                                pct_pis_import        LIKE sup_ar_piscofim.pct_pis_import,
                                pct_cofins_import     LIKE sup_ar_piscofim.pct_cofins_import,
                                pct_red_pis_import    LIKE sup_ar_piscofim.pct_red_pis_import,
                                pct_red_cofins_imp    LIKE sup_ar_piscofim.pct_red_cofins_imp,
                                val_pis_import        LIKE sup_ar_piscofim.val_pis_import,
                                val_cofins_import     LIKE sup_ar_piscofim.val_cofins_import,
                                calc_piscofins_imp    CHAR(01),
                                motivo_calc_piscofins CHAR(57),
                                pct_extravio_granel   DECIMAL(5,3)
                                END RECORD

  INITIALIZE lr_piscofins_imp.* TO NULL
  WHENEVER ERROR CONTINUE
  SELECT *
    INTO lr_piscofins_imp.*
    FROM w_piscofins_imp
   WHERE num_seq = p_aviso_rec.num_seq
  WHENEVER ERROR STOP

  IF sqlca.sqlcode = 0 THEN
     WHENEVER ERROR CONTINUE
     INSERT INTO sup_ar_piscofim VALUES (p_cod_empresa,
                                         p_aviso_rec.num_aviso_rec,
                                         lr_piscofins_imp.num_seq,
                                         lr_piscofins_imp.val_bc_pis_import,
                                         lr_piscofins_imp.val_bc_cofins_imp,
                                         lr_piscofins_imp.pct_pis_import,
                                         lr_piscofins_imp.pct_cofins_import,
                                         lr_piscofins_imp.pct_red_pis_import,
                                         lr_piscofins_imp.pct_red_cofins_imp,
                                         lr_piscofins_imp.val_pis_import,
                                         lr_piscofins_imp.val_cofins_import)
     WHENEVER ERROR STOP

     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("INCLUSAO","SUP_AR_PISCOFIM")
        LET p_houve_erro = TRUE
     END IF

     WHENEVER ERROR CONTINUE
     INSERT INTO sup_par_ar VALUES(p_cod_empresa,
                                   p_aviso_rec.num_aviso_rec,
                                   lr_piscofins_imp.num_seq,
                                   "calc_piscofins_imp",
                                   lr_piscofins_imp.calc_piscofins_imp,
                                   lr_piscofins_imp.motivo_calc_piscofins,
                                   NULL,
                                   NULL)
     WHENEVER ERROR STOP

     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("INCLUSAO","SUP_PAR_AR1")
        LET p_houve_erro = TRUE
     END IF

     WHENEVER ERROR CONTINUE
     INSERT INTO sup_par_ar VALUES(p_cod_empresa,
                                   p_aviso_rec.num_aviso_rec,
                                   lr_piscofins_imp.num_seq,
                                   "pct_extravio_granel",
                                   NULL,
                                   NULL,
                                   lr_piscofins_imp.pct_extravio_granel,
                                   NULL)
     WHENEVER ERROR STOP

     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("INCLUSAO","SUP_PAR_AR2")
        LET p_houve_erro = TRUE
     END IF
  END IF

 END FUNCTION

#---------------------------------------#
 FUNCTION sup376_funcoes_apos_inclusao()
#---------------------------------------#
 DEFINE p_prog                  CHAR(08),
        p_par_forn              CHAR(01),
        p_ind_oc                INTEGER,
        l_ies_armaz_itau        CHAR(01),
        l_impostos_nf_conforme  CHAR(01),
        l_manutencao_impostos   SMALLINT,
        l_argumento             LIKE empresa.cod_empresa,
        l_ies_especie_nf        LIKE nf_sup.ies_especie_nf,
        l_conhec                LIKE sup_frete_x_nf_entrada.conhec,
        l_serie_conhec          LIKE sup_frete_x_nf_entrada.serie_conhec,
        l_subserie_conhec       LIKE sup_frete_x_nf_entrada.subserie_conhec,
        l_transportador         LIKE sup_frete_x_nf_entrada.transportador,
        l_val_frete             LIKE frete_sup.val_frete,
        l_dat_entrada_conhec    LIKE frete_sup.dat_entrada_conhec,
        l_tip_frete             LIKE frete_sup.tip_frete,
        l_passou                SMALLINT
## 407088
 DEFINE l_cod_fornecedor        LIKE nf_sup.cod_fornecedor
 DEFINE l_num_aviso_rec           LIKE aviso_rec.num_aviso_rec, #-- OS 548208
        l_num_aviso_rec_simbolico LIKE aviso_rec.num_aviso_rec, #-- OS 548208
        l_num_oc                  LIKE aviso_rec.num_oc #-- OS 548208

 #--inicio--vanderlei OS  #
 CALL sup3760_relac_fornec_triang_cadastr_sup0220(p_nf_sup.cod_empresa,
                                                  p_nf_sup.num_aviso_rec,
                                                  p_nf_sup.cod_fornecedor)
    RETURNING p_status

 IF NOT p_status THEN
    LET p_houve_erro = TRUE
 END IF
 #---fim----vanderlei OS  #
 IF p_dados_tela.ies_especie_nf = "NFP" THEN
   CALL log120_procura_caminho("sup2570") RETURNING comando3
   LET comando3 = comando3 CLIPPED   ," ",
                  p_cod_empresa      ," ",
                  p_dados_tela.num_aviso_rec
   RUN comando3 RETURNING p_cancel
   CALL log006_exibe_teclas("01", p_versao)
   CURRENT WINDOW IS w_sup37601
 END IF

 IF m_altera_nfm_7_para_6_aut = 'S' AND
    p_dados_tela.ies_especie_nf = 'NFP' THEN
    CALL sup3760_verifica_nfm_total()
 END IF
 #ler parâmetro e verificar se a quantidade da NFM foi totalmente atendida


 #--inicio--vanderlei OS 393937/408549 #
 CALL cap544_verifica_documento_DES(p_nf_sup.cod_empresa,
                                    p_nf_sup.num_nf,
                                    p_nf_sup.ser_nf,
                                    p_nf_sup.ssr_nf,
                                    p_nf_sup.ies_especie_nf,
                                    p_nf_sup.cod_fornecedor)  # OS253418
 #---fim----vanderlei OS 393937/408549 #

 INITIALIZE l_impostos_nf_conforme TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"impostos_nota_conforme")
       RETURNING l_impostos_nf_conforme, p_status

 IF l_impostos_nf_conforme IS NULL THEN
    LET l_impostos_nf_conforme = '4'
 END IF

 LET l_manutencao_impostos = FALSE

 CASE l_impostos_nf_conforme
    WHEN '1'
       IF sup3770_verifica_despesa_itens() THEN
          LET l_manutencao_impostos = TRUE
       END IF
    WHEN '2'
       IF p_nf_sup.ies_especie_nf = 'NFS' THEN
          LET l_manutencao_impostos = TRUE
       END IF
    WHEN '3'
       IF sup3770_verifica_despesa_itens() OR
          p_nf_sup.ies_especie_nf = 'NFS' THEN
          LET l_manutencao_impostos = TRUE
       END IF
    WHEN '4'
       IF p_dados_tela.ies_impostos = "S" THEN
          LET l_manutencao_impostos = TRUE
       END IF
 END CASE

 IF m_utiliza_dds_fortaleza = "S" THEN
    IF p_nf_sup.ies_especie_nf = "NF" OR p_nf_sup.ies_especie_nf = "NFF"
       OR p_nf_sup.ies_especie_nf = "NFS" OR p_nf_sup.ies_especie_nf = "DOC"
       OR p_nf_sup.ies_especie_nf = "REC"   THEN

       CALL sup3760_verifica_controle_dds_fortaleza()
    END IF
 END IF

 IF l_manutencao_impostos THEN
    # OS97061   -   Deisi
    CALL cap544_manutencao_impostos("sup3760","INCLUSAO")
    IF int_flag = 1 THEN
       LET p_houve_erro = TRUE
    END IF
 END IF

 CURRENT WINDOW IS w_sup37601
 CASE p_dados_tela_f.ies_desc_acres
   WHEN "T"
       CALL log120_procura_caminho("sup2490") RETURNING comando3
       LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
       RUN comando3 RETURNING p_cancel
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       LET p_cod_empresa_arg = p_cod_empresa
       LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
       CALL sup376_busca_argumen()
   WHEN "I"
       CALL log120_procura_caminho("sup9010") RETURNING comando3
       LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
       RUN comando3 RETURNING p_cancel
       CALL log006_exibe_teclas("01", p_versao)
       CURRENT WINDOW IS w_sup37601
       LET p_cod_empresa_arg = p_cod_empresa
       LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
       CALL sup376_busca_argumen()
   #WHEN "S"
   #    CALL log120_procura_caminho("sup9010") RETURNING comando3
   #    LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
   #    RUN comando3 RETURNING p_cancel
   #    CALL log006_exibe_teclas("01", p_versao)
   #    CURRENT WINDOW IS w_sup37601
   #    LET p_cod_empresa_arg = p_cod_empresa
   #    LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
   #    CALL sup376_busca_argumen()
 END CASE

 ### OS331455 ###
 IF sup1149_efetua_rateio_contabil() THEN
    IF sup1149_rateio_contabil(p_dados_tela.num_aviso_rec) = FALSE THEN
       LET p_houve_erro = TRUE
    END IF
 END IF
 ### FIM OS331455 ###

 CALL sup376_inclui_frete()
 CALL sup376_manut_item_terc()
 IF ((p_ies_tip_entrada = "6" OR
     p_ies_tip_entrada = "4") OR
    (sup0812_verifica_nota_transferencia(p_cod_empresa,
                                         p_dados_tela.num_aviso_rec,
                                         p_dados_tela.num_nf,
                                         p_dados_tela.ser_nf,
                                         p_dados_tela.ssr_nf,
                                         p_dados_tela.cod_fornecedor,
                                         p_dados_tela.cod_operacao,
                                         p_dados_tela.cod_fiscal_compl) = FALSE AND
    p_ies_tip_entrada = "2")) AND
    (m_wms_instal = "N"      OR
    (m_wms_instal = "S"      AND
     p_dados_tela.ies_nf_aguard_nfe <> "A"   AND
     p_dados_tela.ies_nf_aguard_nfe <> "B")) THEN
    IF p_cont_aut_terc = TRUE THEN
       LET p_par_forn = NULL
       CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor,
                                               "",
                                               p_dados_tela.dat_emis_nf,
                                               p_dados_tela.num_aviso_rec) RETURNING p_par_forn
       IF p_dados_tela.ies_especie_nf = "NFR" AND p_par_forn = "3"  THEN
       ELSE
          IF p_dados_tela.ser_nf IS NULL OR
             p_dados_tela.ser_nf = " " THEN
             LET p_dados_tela.ser_nf = "@"
          END IF
       ## OS 407088
          CALL sup3762_busca_fornecedor_triangulacao(p_dados_tela.num_aviso_rec, p_aviso_rec.num_seq) RETURNING l_cod_fornecedor
          CALL log120_procura_caminho("sup2270") RETURNING comando3
          LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                   p_dados_tela.ser_nf," ",
                                   p_dados_tela.ssr_nf," ",
                                   p_dados_tela.ies_especie_nf," ",
                                   l_cod_fornecedor," ",
                                   "@"," ","@"," ","@"," ",
                                   p_cod_empresa
          RUN comando3 RETURNING p_cancel
          IF p_dados_tela.ser_nf = "@" THEN
             LET p_dados_tela.ser_nf = " "
          END IF
       END IF
    ELSE
       LET p_par_forn = NULL
       CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor,
                                               "",
                                               p_dados_tela.dat_emis_nf,
                                               p_dados_tela.num_aviso_rec) RETURNING p_par_forn
       IF p_dados_tela.ies_especie_nf    = "NFR" AND
          p_par_forn                     = "3"   AND
          p_dados_tela.ies_nf_aguard_nfe <> "T" THEN
       ELSE
          IF p_dados_tela.ies_nf_aguard_nfe <> "T" AND
             #INICIO OS.472270
             (p_mot_remes_terc IS NULL OR
              p_mot_remes_terc = " " OR
              m_ies_msg_contr_terc = "S") THEN
             #FIM OS.472270
             IF p_dados_tela.ies_nf_aguard_nfe <> "4" AND
                p_dados_tela.ies_nf_aguard_nfe <> "5" THEN
                IF  p_dados_tela.ies_nf_aguard_nfe = "A"
                #OR   p_dados_tela.ies_nf_aguard_nfe = "B")#534641
                AND sup3760_existe_cadastro_triangulacao()
                AND p_dados_tela.ies_especie_nf = "NFR" THEN
                      CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq) RETURNING l_cod_fornecedor
                      CALL log120_procura_caminho("sup2270") RETURNING comando3
                      LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                                           p_dados_tela.ser_nf," ",
                                                           p_dados_tela.ssr_nf," ",
                                                           p_dados_tela.ies_especie_nf," ",
                                                           l_cod_fornecedor," ",
                                                           "@"," ","@"," ","@"," ",
                                                           p_cod_empresa
                      RUN comando3 RETURNING p_cancel
                ELSE

                   ERROR "Controlar TERCEIROS ??? " ATTRIBUTE (REVERSE)
                   IF log004_confirm(21,43) THEN
                      #-- OS 562700 inicio --#
                      ERROR "Material da EMPRESA ??? " ATTRIBUTE (REVERSE)
                      LET l_cod_fornecedor = p_dados_tela.cod_fornecedor
                      LET l_passou = FALSE
                      IF log004_confirm(21,43) THEN
                         LET p_prog = "sup2290"
                         LET l_argumento = p_cod_empresa
                         #-- OS 562700 inicio --#
                         IF m_ies_nf_remessa_x_especie <> 0 THEN
                            IF (m_ies_nf_remessa_x_especie = 1
                                AND p_dados_tela.ies_especie_nf = "NFR")
                            OR (m_ies_nf_remessa_x_especie = 2
                                AND p_dados_tela.ies_especie_nf = "NFE")
                            OR (m_ies_nf_remessa_x_especie = 3
                                AND (p_dados_tela.ies_especie_nf = "NFE"
                                     OR p_dados_tela.ies_especie_nf = "NFR") ) THEN
                               CALL sup3760_controla_nf_remessa_retorno()
                               LET l_passou = TRUE
                            END IF
                         END IF
                         #-- OS 562700 fim --#
                      ELSE
                         LET p_prog = "sup2270"
                         LET l_argumento = "@"
                         ## OS 407088
                         CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq) RETURNING l_cod_fornecedor
                      END IF

                      IF p_dados_tela.ser_nf IS NULL OR
                         p_dados_tela.ser_nf = " " THEN
                         LET p_dados_tela.ser_nf = "@"
                      END IF
                      IF NOT l_passou THEN
                         CALL log120_procura_caminho(p_prog) RETURNING comando3
                         LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                                              p_dados_tela.ser_nf," ",
                                                              p_dados_tela.ssr_nf," ",
                                                              p_dados_tela.ies_especie_nf," ",
                                                              l_cod_fornecedor," ",
                                                              "@"," ",l_argumento," ","@"," ",
                                                              p_cod_empresa
                         RUN comando3 RETURNING p_cancel
                      END IF
                      IF p_dados_tela.ser_nf = "@" THEN
                         LET p_dados_tela.ser_nf = " "
                      END IF
                   END IF
                END IF
             END IF #OS.472270
          END IF
       END IF
    END IF
 END IF

  #CH783559
 IF m_exigir_duplicata_nfs = "S" THEN
    IF  p_nf_sup.ies_especie_nf = "NFS"
    AND p_ies_pagamento = "2"  THEN
       IF log0040_confirm(21,15,"Relaciona Duplicatas com N.F.S?") THEN
          CALL log120_procura_caminho("sup0990") RETURNING comando3
          IF p_nf_sup.ies_incl_cap = "S" THEN
             LET p_ies_incl_cap = TRUE
          ELSE
             LET p_ies_incl_cap = FALSE
          END IF
          LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ",
                                                p_ies_incl_cap, " ",
                                                p_cod_empresa
          RUN comando3 RETURNING p_cancel
       END IF
    END IF
 END IF

 IF m_exigir_dupl_nff_vencto_pc = "N" THEN #OS 561.763
    IF p_nf_sup.ies_especie_nf = "NFF"
    AND p_ies_pagamento = "2"  THEN
        IF log0040_confirm(21,15,"Relaciona Duplicatas com N.F.F?") THEN
           CALL log120_procura_caminho("sup0990") RETURNING comando3
           IF p_nf_sup.ies_incl_cap = "S" THEN
              LET p_ies_incl_cap = TRUE
           ELSE
              LET p_ies_incl_cap = FALSE
           END IF
           LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ",
                                            p_ies_incl_cap, " ",
                                            p_cod_empresa
           RUN comando3 RETURNING p_cancel
        END IF
    END IF
 END IF #OS 561.763

 LET p_ar_os = FALSE
 IF p_par_sup_compl.ies_pat_instalado = "S" THEN
    DECLARE cq_ar_seq_os CURSOR FOR
    SELECT *
      FROM aviso_rec
     WHERE aviso_rec.cod_empresa    = p_cod_empresa
       AND aviso_rec.num_aviso_rec  = p_dados_tela.num_aviso_rec
    FOREACH cq_ar_seq_os INTO p_aviso_rec.*
       IF sup376_verifica_ar_seq() = TRUE THEN
          LET p_ar_os_esp.cod_empresa    = p_cod_empresa
          LET p_ar_os_esp.num_aviso_rec  = p_aviso_rec.num_aviso_rec
          LET p_ar_os_esp.num_seq        = p_aviso_rec.num_seq
          LET p_ar_os_esp.seq_esp        = 1
          LET p_ar_os_esp.txt_especif    = p_aviso_rec.den_item
          LET p_ar_os = TRUE
          INSERT INTO ar_os_esp VALUES (p_ar_os_esp.*)
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("INCLUSAO","AR_OS_ESP")
          END IF
       END IF
    END FOREACH
    FREE cq_ar_seq_os
    IF p_ar_os = TRUE THEN
       CALL log120_procura_caminho("sup5380") RETURNING comando3
       LET comando3 = comando3 CLIPPED," ",p_cod_empresa, " ",
                                         p_dados_tela.num_aviso_rec
       RUN comando3 RETURNING p_cancel
    END IF
 END IF

 LET p_ies_dat_fabr_ar = sup376_busca_par_sup_pad("ies_dat_fabr_ar",1)
 IF p_ies_dat_fabr_ar = "S" THEN
    IF sup376_verifica_ars() = TRUE THEN
       CALL log120_procura_caminho("sup8030") RETURNING comando3
       LET comando3 = comando3 CLIPPED," ", p_cod_empresa,
                                       " ", p_dados_tela.num_aviso_rec,
                                       " ", "I"
       RUN comando3 RETURNING p_cancel
    END IF
 END IF

#CONTROLE DE FORNECEDOR/DEPOSITANTE
# 534641
# Controle de Depositante
 CURRENT WINDOW IS w_sup37601

 WHENEVER ERROR CONTINUE
 SELECT ar_depos.cod_depositante
   FROM ar_depos
  WHERE ar_depos.cod_empresa = p_cod_empresa
   AND ar_depos.num_aviso_rec = p_nf_sup.num_aviso_rec
 IF sqlca.sqlcode <> - 206 THEN
    SELECT par_sup_pad.par_ies
      INTO l_ies_armaz_itau
      FROM par_sup_pad
     WHERE par_sup_pad.cod_empresa   = p_cod_empresa
       AND par_sup_pad.cod_parametro = "ies_armaz_itau"
    IF sqlca.sqlcode <> 0 OR
       l_ies_armaz_itau IS NULL OR
       l_ies_armaz_itau = " " THEN
       LET l_ies_armaz_itau = "N"
    END IF

    #--------------------------#
    # Alteração WMS OS: 450083 #
    #--------------------------#
    # Passo 23                 #
    IF m_wms_instal <> "S" THEN
       IF l_ies_armaz_itau = "S" THEN
           IF p_dados_tela.ies_nf_aguard_nfe = "A" OR
              p_dados_tela.ies_nf_aguard_nfe = "4" THEN
              CALL log120_procura_caminho("sup9205") RETURNING comando3
              LET comando3 = comando3 CLIPPED ," ",
                          p_nf_sup.cod_empresa      ," ",
                          p_nf_sup.num_aviso_rec    ," "
              RUN comando3 RETURNING p_cancel
           END IF
       ELSE
          IF p_dados_tela.ies_nf_aguard_nfe = "A" THEN
             CALL log120_procura_caminho("sup9205") RETURNING comando3
             LET comando3 = comando3 CLIPPED ," ",
                         p_nf_sup.cod_empresa      ," ",
                         p_nf_sup.num_aviso_rec    ," "
             RUN comando3 RETURNING p_cancel
          END IF
       END IF
    END IF
    #---------------#
 END IF
 WHENEVER ERROR STOP

# Relaciona Fornecedor e Depositante
 WHENEVER ERROR CONTINUE
 SELECT ar_depos.cod_depositante
   FROM ar_depos
  WHERE ar_depos.cod_empresa = p_cod_empresa
   AND ar_depos.num_aviso_rec = p_nf_sup.num_aviso_rec
WHENEVER ERROR STOP
 IF sqlca.sqlcode <> - 206 THEN
    #--------------------------#
    # Alteração WMS OS: 450083 #
    #--------------------------#
    # Passo 23                 #
    IF m_wms_instal <> "S" THEN
       IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
          CALL log120_procura_caminho("sup9206") RETURNING comando3
          LET comando3 = comando3 CLIPPED ," ",
                      p_nf_sup.cod_empresa      ," ",
                      p_nf_sup.num_aviso_rec    ," "
          RUN comando3 RETURNING p_cancel
       END IF
    END IF
 END IF
 WHENEVER ERROR STOP

#### OS 240477 - efetua rateio antes caso empresa trabalhe com custo medio diario
#### (contagem automatica) para considerar o valor do frete no custeio do material
 IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                   m_consiste_nf_integr) THEN
    IF p_par_estoque.ies_custo_medio = "D" THEN
       CALL sup0047_rateio_frete()
    END IF

    IF m_cons_modific = "S" THEN
       CALL sup376_processa_consistencia("I")
    ELSE
       IF sup3731_gera_erro_consistencia(p_nf_sup.num_aviso_rec) = FALSE THEN
       END IF
    END IF

    CALL sup0047_rateio_frete()
 END IF

 #--inicio--vanderlei OS 404565 #
 # -- Função retorna UM se o SUP3760 chamou o SUP4510, caso contrário ZERO  -- #
 IF sup4510_get_exec_sup4510() AND
    sup1481_nfc_compl_imposto(p_nf_sup.ies_especie_nf,
                              p_cod_empresa,
                              p_nf_sup.num_aviso_rec) = FALSE THEN
    #OS457682Na inclusão nunca vai ter mais de um frete já relacionado, por isso
    #apenas chama o sup0772 para o frete da frete_sup..
    CALL sup0772_verifica_saldo_contas_fr_inclui(p_cod_empresa,
                                                 p_frete_sup.num_conhec,
                                                 p_frete_sup.ser_conhec,
                                                 p_frete_sup.ssr_conhec,
                                                 p_frete_sup.cod_transpor,
                                                 p_frete_sup.val_frete,
                                                 p_frete_sup.dat_entrada_conhec,
                                                 sup4510_tip_frete(p_frete_sup.tip_frete),
                                                 "SUP0580",
                                                 0)
            RETURNING p_status, p_msg
    IF NOT p_status THEN
       CALL log0030_mensagem(p_msg,"exclamation")
       LET int_flag = 1 # -- Retorna nulo -- #
    END IF
 END IF

 #---fim----vanderlei OS 404565 #
 #--OS 548208 inicio --#
 IF m_cons_val_ret_rem = "A" THEN

    CALL sup3760_existe_relacionamento(p_aviso_rec.num_aviso_rec) RETURNING l_num_aviso_rec

    #Existe relacionamento
    IF l_num_aviso_rec <> p_aviso_rec.num_aviso_rec THEN
       LET l_num_oc = sup3760_busca_num_oc(l_num_aviso_rec)
       LET l_num_aviso_rec_simbolico = p_aviso_rec.num_aviso_rec

       IF l_num_oc IS NULL
       OR l_num_oc = " " THEN
          LET l_num_oc = sup3760_busca_num_oc(p_aviso_rec.num_aviso_rec)
          LET l_num_aviso_rec_simbolico = l_num_aviso_rec
          CALL sup3760_verifica_aviso_rec_relacionamento(l_num_aviso_rec_simbolico, p_aviso_rec.num_aviso_rec)
       ELSE
          CALL sup3760_verifica_aviso_rec_relacionamento(l_num_aviso_rec_simbolico, l_num_aviso_rec)
       END IF
    ELSE
       CALL sup3760_verifica_cfop_retr_serv_relac()
    END IF
 END IF
 #--OS 548208 fim --#

 IF m_env_email_solic_rec_pc = 'S' OR
    m_env_email_solic_rec_pc = '2' THEN
    CALL sup1468_cria_temps()
    CALL sup3760_busca_especie_nf(p_cod_empresa,
                                  p_dados_tela.num_aviso_rec)
       RETURNING l_ies_especie_nf
    IF l_ies_especie_nf IS NOT NULL AND
       l_ies_especie_nf <> ' ' AND
       l_ies_especie_nf <> 'NFS' THEN
       CALL sup3760_prepara_envio_email(p_cod_empresa,
                                        p_dados_tela.num_aviso_rec,
                                        'LIBERACAO')
    END IF
 END IF

 END FUNCTION

#--------------------------------------------------------#
 FUNCTION sup3760_prepara_envio_email(l_cod_empresa,
                                      l_num_aviso_rec,
                                      l_funcao)
#--------------------------------------------------------#
  DEFINE l_cod_empresa      LIKE aviso_rec.cod_empresa,
         l_num_aviso_rec    LIKE aviso_rec.num_aviso_rec,
         l_num_seq          LIKE aviso_rec.num_seq,
         l_num_pedido       LIKE aviso_rec.num_pedido,
         l_cod_tip_despesa  LIKE aviso_rec.cod_tip_despesa,
         l_par_val          LIKE par_sup_pad.par_val,
         l_funcao           CHAR(15),
         l_status           SMALLINT

  INITIALIZE l_par_val TO NULL

  CALL supm5_par_sup_pad_leitura(l_cod_empresa ,
                                 'tip_desp_cons_fat',
                                 FALSE,
                                 TRUE)
     RETURNING l_status

  IF l_status THEN
     LET l_par_val = supm5_par_sup_pad_get_par_val()
  END IF

  WHENEVER ERROR CONTINUE
   DECLARE cq_aviso_rec_2 CURSOR FOR
    SELECT num_pedido,
           num_seq,
           cod_tip_despesa
      FROM aviso_rec
     WHERE aviso_rec.cod_empresa   = l_cod_empresa
       AND aviso_rec.num_aviso_rec = l_num_aviso_rec
       AND aviso_rec.num_pedido    > 0
     GROUP BY num_pedido,
              num_seq,
              cod_tip_despesa
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('DECLARE','CQ_AVISO_REC_2')
     RETURN
  END IF

  WHENEVER ERROR CONTINUE
  FOREACH cq_aviso_rec_2 INTO l_num_pedido,
                              l_num_seq,
                              l_cod_tip_despesa
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("FOREACH","CQ_AVISO_REC_2")
        EXIT FOREACH
     END IF

     IF l_par_val IS NOT NULL AND
        l_par_val <> ' ' THEN
        IF l_cod_tip_despesa = l_par_val THEN
           CONTINUE FOREACH
        END IF
     END IF

     CALL sup3760_envia_dados_email(l_cod_empresa,
                                    l_num_pedido,
                                    l_num_aviso_rec,
                                    l_num_seq,
                                    l_funcao)
     WHENEVER ERROR CONTINUE
  END FOREACH
  WHENEVER ERROR STOP
  FREE cq_aviso_rec_2

  CALL sup1468_gerencia_envio_emails()

 END FUNCTION

#----------------------------------------------------#
 FUNCTION sup3760_envia_dados_email(l_cod_empresa,
                                    l_num_pedido,
                                    l_num_aviso_rec,
                                    l_num_seq,
                                    l_funcao)
#----------------------------------------------------#
  DEFINE l_cod_empresa      LIKE aviso_rec.cod_empresa,
         l_num_pedido       LIKE aviso_rec.num_pedido,
         l_num_aviso_rec    LIKE aviso_rec.num_aviso_rec,
         l_num_seq          LIKE aviso_rec.num_seq,
         l_funcao           CHAR(15),
         l_status           SMALLINT,
         l_mensagem         CHAR(200),
         l_rotina           CHAR(01)

  LET l_rotina = "4" # Recebimento de pedido de compra. OS 480557

  CALL sup1468_grava_envio_email_2(l_num_aviso_rec,l_num_seq,TRUE) #OS 480557

  CALL sup1468_grava_envio_email(l_cod_empresa,
                                 l_num_pedido,
                                 m_env_email_solic_rec_pc,
                                 p_user,
                                 'sup3760',
                                 l_funcao,
                                 l_rotina) #OS 480557
 END FUNCTION

#---------------------------------------#
 FUNCTION sup376_processa_divergencias()
#---------------------------------------#
 WHENEVER ERROR CONTINUE
 SELECT *
   FROM audit_ar
  WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = p_dados_tela.num_aviso_rec
    AND num_prog      = "SUP6981"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 OR
    sqlca.sqlcode = -284 THEN
    #Analisando Divergencias Recebimento X Compras

    IF sup0682e_verifica_divergencias(p_cod_empresa,
                                      p_dados_tela.num_aviso_rec) = FALSE THEN
       CALL log0030_mensagem("Problemas na Verificacao de Divergencias.","exclamation")
       LET p_houve_erro = TRUE
    END IF
 ELSE
    CALL log120_procura_caminho("sup0682") RETURNING comando3
    LET comando3 = comando3 CLIPPED," ",p_cod_empresa," ",
                                        p_dados_tela.num_aviso_rec
    RUN comando3 RETURNING p_cancel
 END IF

 END FUNCTION

#---------------------------------------#
 FUNCTION sup3760_entrada_dados(l_funcao)
#---------------------------------------#
 DEFINE l_resposta                 SMALLINT,
        l_dat_ant                  LIKE nf_sup.dat_entrada_nf,
        l_cgc_fornec               LIKE fornecedor.num_cgc_cpf,
        l_devol_consig_total       SMALLINT,
        l_nf_hist                  CHAR(06),
        l_cgc_cliente              LIKE clientes.num_cgc_cpf,
        l_msg_erro                 CHAR(100),
        l_sql_stmt                 CHAR(1500),
        l_funcao                   CHAR(30),
        p_tip_embalag              CHAR(1),
        p_seta                     CHAR(04),
        p_dif_fornec               SMALLINT,
        p_conta_estab              SMALLINT,
        p_cnd_pgto_salva           LIKE cond_pgto_cap.cnd_pgto,
        p_tipo_nota_ant            LIKE nf_sup.ies_nf_aguard_nfe,
        l_cod_fornecedor           LIKE pedido_sup.cod_fornecedor,
        l_cnd_pgto_ped             LIKE pedido_sup.cnd_pgto,
        l_pergunta                 CHAR(01),
        l_primeira_vez             SMALLINT,
        l_conta_benef              SMALLINT,
        p_fornec_aux               CHAR(15),
        l_cgc_raiz_ped             CHAR(11),
        l_cgc_raiz                 CHAR(11),
        l_ies_situa_import         LIKE nf_sup.ies_situa_import,
        l_ies_nfe_emit             LIKE nfe_sup_compl.ies_nfe_emit,
        l_num_oc                   LIKE ordem_sup.num_oc,
        l_ind                      SMALLINT,
        l_houve_erro               SMALLINT,
        l_status                   SMALLINT,
        l_dat_fim_valid            DATE,
        l_usuario_aceite           CHAR(08),
        l_dat_prx_venc             DATE,
        l_data_venc                DATE,
        l_nf_mestre_ser            SMALLINT,
        l_nf_mestre                SMALLINT,
        l_nf_mestre_hist           SMALLINT,
        l_cod_item                 LIKE nf_item.cod_item,
        l_qtd_item                 LIKE nf_item.qtd_item,
        l_cod_unid_med             LIKE nf_item.cod_unid_med,
        l_pre_unit_nf              LIKE nf_item.pre_unit_nf,
        l_val_liq_item             LIKE nf_item.val_liq_item,
        p_cod_fiscal               CHAR(04),
        la_array_cfop              ARRAY[100] OF
                                   RECORD
                                      cod_fiscal  CHAR(05)
                                   END RECORD,
        l_ind_cfop                 SMALLINT,
        l_diferente                SMALLINT,
        l_achou                    SMALLINT,
        l_ies_dia_semana           LIKE semana.ies_dia_semana,
        l_cnd_pgto                 LIKE pedido_sup.cnd_pgto,
        l_qtd_solic                LIKE ordem_sup.qtd_solic,
        l_cod_fiscal2              CHAR(05),
        l_desc_imposto             CHAR(14),
        l_dat_emis_ant             LIKE nf_sup.dat_emis_nf,
        l_nota_fiscal              LIKE sup_oc_nota_fiscal.nota_fiscal,
        l_serie_nota_fiscal        LIKE sup_oc_nota_fiscal.serie_nota_fiscal,
        l_subserie_nf              LIKE sup_oc_nota_fiscal.subserie_nf,
        l_dat_entrada_nf_ant       LIKE nf_sup.dat_entrada_nf,
        l_nf_tp8_assume_dt_emissao CHAR(01),
        l_dat_envio_hist           LIKE fat_nf_mestre_hist.dat_envio_hist,
        l_trans_nota_fiscal        LIKE fat_nf_mestre.trans_nota_fiscal


 DEFINE l_cond_pedido       CHAR(01),
        l_existe_h_tab      SMALLINT,      #OS 414316 #
        l_den_existe_h_tab  CHAR(14),      #OS 414316 #
        l_cont              SMALLINT,
        l_possui_compon     SMALLINT,
        l_tip_documento     CHAR(01),      #OS 450083
        l_ies_tip_entrada   LIKE cod_fiscal_sup.ies_tip_entrada,
        l_msg               CHAR(200),
        l_count             SMALLINT,
        l_cod_fiscal        LIKE cod_fiscal_sup.cod_fiscal,
        l_cod_fisc_ant      LIKE aviso_rec.cod_fiscal_item

 #--------------------------#
 # Alteração WMS OS: 450083 #
 #--------------------------#
 DEFINE l_parametro            CHAR(1),
        l_parametro_cfop       CHAR(3),
        l_parametro_cfop_compl CHAR(3),
        l_tipo                 CHAR(1),
        l_altera_tipo          SMALLINT,
        l_altera_tipo_deposit  SMALLINT,
        l_continua             SMALLINT,
        l_raz_social           CHAR(50),
        l_altera_fornecedor    SMALLINT,
        l_cod_pais_uni_feder   CHAR(3),
        l_cod_pais_fornecedor  CHAR(3),
        l_contrato             LIKE wms_contrato.contrato,
        l_cgc                  LIKE empresa.num_cgc,
        l_ins_estadual         LIKE empresa.ins_estadual,
        l_deposit              LIKE fornecedor.cod_fornecedor,
        l_valida_pc            SMALLINT,
        l_acessou_herc         SMALLINT

 DEFINE l_mensagem             CHAR(300) #Ch 721708

 DEFINE l_alt_cod_operacao     SMALLINT,
        l_trans_nf_fiscal      LIKE fat_nf_mestre.trans_nota_fiscal

 LET m_grava_sup0964  = FALSE
 LET l_nf_mestre_ser  = FALSE
 LET l_nf_mestre      = FALSE
 LET l_nf_mestre_hist = FALSE

 INITIALIZE m_funcao TO NULL
 LET p_funcao_menu = l_funcao
 LET l_primeira_vez = TRUE
 LET l_houve_erro = FALSE
 LET m_funcao = l_funcao
 LET l_cod_fisc_ant   = " "

 INITIALIZE m_indicador_aduaneiro  TO NULL
 INITIALIZE p_seta, l_desc_imposto TO NULL
 INITIALIZE m_num_nf_eletronica TO NULL
 IF l_funcao = "MODIFICACAO" THEN
    LET p_entra_array = "N"
    LET p_entra_tot   = "N"
    LET l_ies_nfe_emit = "N"
    IF sup376_nfe_emitida() THEN
       LET l_ies_nfe_emit = "S"
    END IF

    LET g_modifica_nf_transito = TRUE #OS477406
 END IF
 IF l_funcao = "INCLUSAO" THEN
    INITIALIZE m_nf_aguard_nfe_ant TO NULL
    LET p_ies_imp_renda = NULL
    LET p_ies_imp_iss   = "N"
    LET p_ies_imp_ret_inss = NULL
    LET p_base_calc_ret_inss = NULL
    LET p_ies_imp_inss_rur   = NULL
    LET p_base_calc_inss_rur = NULL
    LET p_cod_ret_imp        = NULL
    LET p_cod_ret_iss        = NULL

    LET g_modifica_nf_transito = FALSE #OS477406
 END IF

 CALL log006_exibe_teclas("01 02 03 07", p_versao)
 CURRENT WINDOW IS w_sup37601
 IF l_funcao = "INCLUSAO" THEN
    CALL sup376_inicializa_input()
    LET p_dados_tela.ies_impostos = "N"
 END IF

 #--------------------------#
 # Alteração WMS OS: 450083 #
 #--------------------------#

 IF m_wms_instal = "S" THEN
    IF find4GLFunction('wms6612_create_table') THEN
       CALL wms6612_create_table()
       LET m_criou_temp_peso = TRUE
    END IF
    # Armazena o horário de digitação da nota
    # Passo 3
    LET m_horario_alteracao_wms = CURRENT YEAR TO SECOND

    # Inicialmente permite que seja alterado o campo TIPO da nota
    LET l_altera_tipo         = TRUE
    LET l_altera_tipo_deposit = TRUE

    # Passo 4 #
    IF m_segmto_utilizacao = "O" THEN

       ## 841966 restringir modificação do tipo de documento WMS em algumas situações
       #RETIRAR IF E ELSE DO FIND4GL FUNCTION
       IF find4GLFunction('wms6612_retorna_indicador_aduaneiro_ar') THEN
          IF wms6612_retorna_indicador_aduaneiro_ar(p_cod_empresa, p_dados_tela.num_aviso_rec) <> 'T' THEN
             IF  l_funcao <> "MODIFICACAO"
             OR (l_funcao = "MODIFICACAO" AND sup3760_verifica_permissao_troca_tipo_docum_wms(p_aviso_rec.cod_empresa,
                                                                                              p_aviso_rec.num_aviso_rec)) THEN

                CALL sup3760_wms_tipo_documento(m_segmto_utilizacao,l_funcao) RETURNING l_altera_tipo,
                                                                                        l_continua
                IF l_continua = FALSE THEN
                   RETURN FALSE
                END IF

                IF m_tipo_documento_old = "P" OR
                   m_tipo_documento_old = "D" THEN
                   IF m_tipo_documento     = "N" THEN
                      DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
                   END IF
                END IF
             END IF
          END IF
       ELSE
          IF  l_funcao <> "MODIFICACAO"
          OR (l_funcao = "MODIFICACAO" AND sup3760_verifica_permissao_troca_tipo_docum_wms(p_aviso_rec.cod_empresa,
                                                                                           p_aviso_rec.num_aviso_rec)) THEN

             CALL sup3760_wms_tipo_documento(m_segmto_utilizacao,l_funcao) RETURNING l_altera_tipo,
                                                                                     l_continua
             IF l_continua = FALSE THEN
                RETURN FALSE
             END IF

             IF m_tipo_documento_old = "P" OR
                m_tipo_documento_old = "D" THEN
                IF m_tipo_documento     = "N" THEN
                   DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
                END IF
             END IF
          END IF
       END IF

    END IF

    # Passo 5 #
    CALL log2250_busca_parametro(p_cod_empresa,"iden_emit_cnpj_inscr_estadual") RETURNING l_parametro, l_status
    LET l_altera_fornecedor = TRUE
    IF l_parametro = "S" THEN
       CALL sup3760_wms_emit_cnpj_inscr_estadual() RETURNING p_dados_tela.cod_fornecedor,
                                                             l_raz_social,
                                                             l_continua
       IF l_continua THEN
          LET l_altera_fornecedor = FALSE
          DISPLAY l_raz_social TO raz_social
       ELSE
          RETURN FALSE
       END IF
    END IF
    CALL log006_exibe_teclas("01 02 03 07", p_versao)
    CURRENT WINDOW IS w_sup37601
 END IF
 #---------------#

 LET p_nfe_vendas = FALSE
 LET p_nfe_import = FALSE
 LET p_nfm_import = FALSE
 LET m_nfr_import = FALSE
 LET p_entrou_pedido = "N"
 IF l_funcao = "MODIFICACAO" THEN
    LET p_ies_aguard_nfe = p_dados_tela.ies_nf_aguard_nfe
    IF sup3760_nfr_consignatario("MODIFICACAO") THEN
       LET m_nfr_import = TRUE
    END IF
    LET l_cod_fisc_ant = p_dados_tela.cod_operacao #O.S. 550997

    # CH 739942 - Rafael F. B. - 12/01/2010 #
    LET l_alt_cod_operacao = FALSE

    IF m_permite_alt_inf_compl_nf_cap = "S" AND m_existe_cap THEN
       LET l_alt_cod_operacao = TRUE
    END IF
 END IF

 LET m_nfp_incl_apos_encerr = FALSE

 LET p_ies_prim_cnd = TRUE
 LET p_cnd_pgto_salva = p_dados_tela.cnd_pgto_nf

 LET m_transf_ativo_imob = FALSE

 INITIALIZE p_ies_forn_dif_pc TO NULL
 LET p_ies_forn_dif_pc = sup376_busca_par_sup_pad("ies_forn_dif_pc",1)
 LET p_dif_fornec = FALSE
  DISPLAY "    " AT 7,70
 INITIALIZE p_dados_tela.cod_emp_benef, l_dat_emis_ant TO NULL
 LET int_flag = 0
 INPUT BY NAME p_dados_tela.* WITHOUT DEFAULTS

    BEFORE FIELD cod_empresa
       CALL sup3760_botao_zoom("ON",3,68)

       IF l_funcao = "INCLUSAO"  THEN
          IF p_dados_tela.cod_empresa IS NULL  THEN
             LET p_dados_tela.cod_empresa = p_cod_empresa
             LET p_dados_tela.dat_entrada_nf = TODAY
             DISPLAY BY NAME p_dados_tela.cod_empresa,
                             p_dados_tela.dat_entrada_nf
          END IF
       END IF
       IF l_funcao = "MODIFICACAO" THEN
          # CH 739942 - Rafael F. B. - 12/01/2010 #
          IF l_alt_cod_operacao THEN
             NEXT FIELD cod_empresa_estab
          END IF

          CALL sup3760_backup_dados_tela()

          IF find4GLFunction("supy117_nfe_transito_ja_impressa") THEN
             IF supy117_nfe_transito_ja_impressa(p_cod_empresa,
                                                 p_dados_tela.num_aviso_rec,
                                                 p_nf_sup.ies_nf_aguard_nfe,
                                                 p_nf_sup.ies_especie_nf,
                                                 FALSE) THEN
                NEXT FIELD ies_nf_aguard_nfe
             END IF
          END IF

          #-- INICIO 610336
          IF sup3760_nfe_transito_ja_impressa(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              p_nf_sup.ies_nf_aguard_nfe,
                                              p_nf_sup.cod_operacao,
                                              p_nf_sup.dat_entrada_nf) THEN
             NEXT FIELD ies_nf_aguard_nfe
          END IF
          #-- FIM 610336

          LET l_dat_emis_ant = p_dados_tela.dat_emis_nf
          IF l_ies_nfe_emit = "S" THEN
             NEXT FIELD dat_entrada_nf
          END IF
          IF p_dados_tela.ies_nf_aguard_nfe <> "7" THEN #OS477406
             NEXT FIELD ies_nf_aguard_nfe
          ELSE
             NEXT FIELD ser_nf
          END IF
       END IF
       NEXT FIELD cod_empresa_estab

    BEFORE FIELD cod_empresa_estab
       # CH 739942 - Rafael F. B. - 12/01/2010 #
       IF l_funcao = "MODIFICACAO" THEN
          IF l_alt_cod_operacao THEN
             NEXT FIELD num_aviso_rec
          END IF
       END IF
       LET p_conta_estab = 0
       SELECT COUNT(*)
         INTO p_conta_estab
         FROM par_sup_re
        WHERE par_sup_re.cod_empresa = p_cod_empresa
          AND par_sup_re.cod_empresa_estab IS NOT NULL
       IF p_conta_estab IS NULL OR
          p_conta_estab = " "   THEN
          LET p_conta_estab = 0
       END IF
       IF p_conta_estab = 0 THEN
          NEXT FIELD cod_fornecedor
       END IF
       CALL sup3760_botao_zoom("ON",3,68)
    AFTER FIELD cod_empresa_estab
       IF p_dados_tela.cod_empresa_estab IS NOT NULL THEN
          IF sup376_verifica_cod_emp_estab() THEN
             ERROR "Estabelecimento nao cadastrado para a empresa"
             NEXT FIELD cod_empresa_estab
          ELSE
             CALL sup3760_botao_zoom("OFF",3,68)
          END IF
       END IF

    BEFORE FIELD num_aviso_rec
       # CH 739942 - Rafael F. B. - 12/01/2010 #
       IF l_funcao = "MODIFICACAO" THEN
          IF l_alt_cod_operacao THEN
             NEXT FIELD cod_fornecedor
          END IF
       END IF

       LET m_ver_aviso_rec = FALSE
       SELECT num_aviso_rec
         FROM nf_sup
        WHERE cod_empresa   = p_cod_empresa
          AND num_aviso_rec = p_dados_tela.num_aviso_rec
       IF sqlca.sqlcode = 0 THEN
          MESSAGE " Numero de Aviso de Recebimento ja Utilizado " ATTRIBUTE(REVERSE)
          SLEEP 2
          LET m_ver_aviso_rec = TRUE
          EXIT INPUT
       END IF
       NEXT FIELD cod_fornecedor

    BEFORE FIELD cod_fornecedor
       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       IF m_wms_instal = "S" THEN
          # Passo 6 #
          IF l_altera_fornecedor = FALSE THEN
             NEXT FIELD num_nf
          END IF
       END IF
       #---------------#
       IF l_funcao = "MODIFICACAO" THEN
          NEXT FIELD cod_operacao
       END IF
       CALL sup3760_botao_zoom("ON",3,68)
       IF l_funcao = "INCLUSAO" THEN
          INITIALIZE p_ordens      TO NULL
          INITIALIZE p_ordens_p1   TO NULL
          INITIALIZE p_ordens_p2   TO NULL
          INITIALIZE p_ordens_p3   TO NULL
          INITIALIZE p_ordens_p4   TO NULL
          INITIALIZE p_pedidos     TO NULL
          INITIALIZE p_pedidos_p1  TO NULL
          INITIALIZE p_pedidos_p2  TO NULL
          INITIALIZE p_pedidos_p3  TO NULL
          INITIALIZE p_prog_ordem  TO NULL
          INITIALIZE p_prog_ordem1 TO NULL
          INITIALIZE p_prog_ordem2 TO NULL
          INITIALIZE p_array       TO NULL
          INITIALIZE p_array_compl TO NULL
       END IF
       IF p_ies_pc_ant_fornec = "N" THEN
       ELSE
        IF p_dif_fornec = FALSE
        THEN
          IF sup376_entrada_pedido_ordem(l_funcao) = FALSE THEN
             INITIALIZE p_fornec_aux TO NULL
             EXIT INPUT
          END IF
          IF g_modifica_nf_transito = TRUE THEN #OS477406
             LET g_nao_inclui = TRUE
             RETURN TRUE
          END IF

          LET p_entrou_pedido = "N"
          IF p_pedidos IS NOT NULL THEN
             CALL sup376_busca_infor_pedidos()
          END IF

          LET p_fornec_aux = p_dados_tela.cod_fornecedor

          #### OS344679 - Estava dando problema quando p_ies_forn_dif_pc
          ### igual a 'R' e m_cnpj_nf_com_pc = 'N' e p_ies_pc_ant_fornec = 'S'
          ### pois não trazia o código do fornecedor do PC.
          #IF p_ies_forn_dif_pc = "R" AND m_cnpj_nf_com_pc = "N" THEN
          #   INITIALIZE p_dados_tela.cod_fornecedor TO NULL
          #END IF
        END IF
       END IF

    AFTER FIELD cod_fornecedor
       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       IF m_wms_instal = "S" THEN
          # Passo 7 #
          CALL sup3760_wms_busca_cfop(m_segmto_utilizacao)
          DISPLAY BY NAME p_dados_tela.*
       END IF
       #---------------#
       CALL sup3760_botao_zoom("OFF",3,68)
       IF p_dados_tela.cod_fornecedor IS NOT NULL THEN
## 394170
          IF m_cnpj_nf_com_pc = "S" AND
             p_ies_forn_dif_pc = "N" THEN
             IF p_dados_tela.cod_fornecedor <> g_cod_forn_sup3850 THEN
                ERROR "Fornecedor do pedido eh diferente do fornecedor da nota fiscal."
                LET p_dados_tela.cod_fornecedor = g_cod_forn_sup3850
                NEXT FIELD cod_fornecedor
             END IF
          END IF
          ##O.S 286008 MULT.INS.ESTADUAIS
          CALL sup1049_verifica_registros(p_cod_empresa,
                                          p_dados_tela.cod_fornecedor,
                                          p_dados_tela.num_aviso_rec,
                                          "INCLUSAO")
          CURRENT WINDOW IS w_sup37601
          ##O.S 286008 MULT.INS.ESTADUAIS

          ##O.S.426421 Via Transporte
          IF l_funcao = "INCLUSAO" THEN
             CALL sup3760_via_transporte(p_cod_empresa,
                                         p_dados_tela.cod_fornecedor)
             CURRENT WINDOW IS w_sup37601
          END IF
          ##O.S.426421 Via Transporte

          IF sup376_verifica_fornecedor() = FALSE
            THEN IF p_ies_cod_cgc = "1"
                 THEN LET p_cgc_cpf1 = p_dados_tela.cod_fornecedor[1,3]
                      LET p_cgc_cpf2 = p_dados_tela.cod_fornecedor[4,6]
                      LET p_cgc_cpf3 = p_dados_tela.cod_fornecedor[7,9]
                      LET p_cgc_cpf4 = p_dados_tela.cod_fornecedor[10,13]
                      LET p_cgc_cpf5 = p_dados_tela.cod_fornecedor[14,15]

                      WHENEVER ERROR CONTINUE

                      SELECT *
                        INTO p_clientes.*
                        FROM clientes
                       WHERE clientes.num_cgc_cpf[1,3]   = p_cgc_cpf1 AND
                             clientes.num_cgc_cpf[5,7]   = p_cgc_cpf2 AND
                             clientes.num_cgc_cpf[9,11]  = p_cgc_cpf3 AND
                             clientes.num_cgc_cpf[13,16] = p_cgc_cpf4 AND
                             clientes.num_cgc_cpf[18,19] = p_cgc_cpf5

                      WHENEVER ERROR STOP

                      IF sqlca.sqlcode = 0
                      THEN LET p_nom_reduz_cli = p_clientes.nom_reduzido[1,10]
                           SELECT cod_uni_feder
                             INTO p_cod_unid_feder
                             FROM cidades
                            WHERE cidades.cod_cidade = p_clientes.cod_cidade

                          CALL sup376_busca_uni_feder(p_cod_unid_feder)
                          LET p_cod_pais = gr_uni_feder.cod_pais
## OS 289740
                          LET p_cod_uni_feder   = p_cod_unid_feder

                          IF sup376_testa_nulo_clientes() = TRUE THEN
                             NEXT FIELD cod_fornecedor
                          END IF
                          ### OS 511148
                          CALL sup3762_insert_fornecedor()

                      ELSE ERROR " Fornecedor nao cadastrado "
                           INITIALIZE p_dados_tela.cod_fornecedor TO NULL
                           NEXT FIELD cod_fornecedor
                      END IF
                 ELSE ERROR " Fornecedor nao cadastrado "
                      INITIALIZE p_dados_tela.cod_fornecedor TO NULL
                      NEXT FIELD cod_fornecedor
                 END IF
            ELSE IF p_ies_fornec_ativo = "I"
                 THEN ERROR " Entrada nao permitida para fornecedor Inativo "
                      NEXT FIELD cod_fornecedor
                 END IF
           END IF
       ELSE
          ERROR " Fornecedor deve ser informado "
          NEXT FIELD cod_fornecedor
       END IF

       IF p_ies_pc_ant_fornec = "N" THEN
          LET p_fornec_aux = p_dados_tela.cod_fornecedor
          IF sup376_entrada_pedido_ordem(l_funcao) = FALSE THEN
             INITIALIZE p_fornec_aux TO NULL
             EXIT INPUT
          END IF
          IF p_pedidos IS NOT NULL THEN
             CALL sup376_busca_infor_pedidos()
          END IF
       ELSE
          IF p_dados_tela.cod_fornecedor <> p_fornec_aux THEN
             WHENEVER ERROR CONTINUE
               SELECT * FROM pedido_sup_fornec
                WHERE cod_empresa    = p_cod_empresa
                  AND num_pedido     = p_array_pedidos[1].num_pedido
                  AND cod_fornecedor = p_dados_tela.cod_fornecedor
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                IF p_ies_forn_dif_pc = "R" THEN
                   ### OS 511148
                   INITIALIZE l_status TO NULL
                   CALL sup3762_busca_num_cgc_cpf_fornecedor(p_fornec_aux) RETURNING l_cgc_raiz_ped, l_status
                   IF l_status = FALSE THEN
                      LET l_cgc_raiz_ped = "y"
                   END IF

                   INITIALIZE l_status TO NULL
                   CALL sup3762_busca_num_cgc_cpf_fornecedor(p_dados_tela.cod_fornecedor) RETURNING l_cgc_raiz, l_status
                   IF l_status = FALSE THEN
                       LET l_cgc_raiz_ped = "x"
                   END IF

                   IF l_cgc_raiz <> l_cgc_raiz_ped THEN
                       ERROR "Fornecedor do pedido difere do fornecedor informado"
                       NEXT FIELD cod_fornecedor
                   ELSE
                       ERROR "Pedido do mesmo fornecedor, porem de outro estabelecimento." ATTRIBUTE (REVERSE)
                       IF log004_confirm(18,40)
                       THEN
                       ELSE
                          NEXT FIELD cod_fornecedor
                       END IF
                   END IF
                ELSE
                   ERROR "Fornecedor do pedido difere do fornecedor informado"
                   LET p_dif_fornec = TRUE
                   IF p_ies_forn_dif_pc = "N" THEN
                      NEXT FIELD cod_fornecedor
                   END IF
                   IF p_ies_forn_dif_pc = "S" THEN
                      IF sup376_pc_consignacao() = FALSE THEN
                         IF log004_confirm(18,40) THEN
                         ELSE
                            NEXT FIELD cod_fornecedor
                         END IF
                      ELSE
                         ERROR "Fornec. do pedido (Consignacao) difere do fornec. informado"
                         NEXT FIELD cod_fornecedor
                      END IF
                   END IF
                END IF
             END IF
          END IF
       END IF
       IF p_dados_tela.cod_fornecedor IS NOT NULL THEN
          IF m_ies_cnpj_insc = "S" THEN
             CALL sup3760_busca_cnpj_insc(p_cod_empresa, #801178#
                                          p_dados_tela.num_aviso_rec, #801178#
                                          p_dados_tela.cod_fornecedor)
             IF (m_num_cgc_cpf IS NOT NULL AND m_num_cgc_cpf <> " ") OR
                (m_ins_estadual IS NOT NULL AND m_ins_estadual <> " ") THEN
                DISPLAY "CNPJ/CPF: ",m_num_cgc_cpf  AT 9,11 ATTRIBUTE(REVERSE)
                 DISPLAY "INS.EST.: ",m_ins_estadual AT 9,45 ATTRIBUTE(REVERSE)
             ELSE
                DISPLAY "CNPJ/CPF:                     "  AT 9,11 ATTRIBUTE(REVERSE)
                 DISPLAY "INS.EST.:                  " AT 9,45 ATTRIBUTE(REVERSE)
             END IF
          END IF
       ELSE
           DISPLAY "                                                             "  AT 9,11
       END IF

       IF g_cod_forn_sup3850 IS NULL #OS477406
       OR g_cod_forn_sup3850 = " " THEN
          IF g_modifica_nf_transito = FALSE THEN
             IF m_visualizar_notas_em_transito = "S" THEN
                IF sup3760_mostra_nf_transito(p_dados_tela.cod_fornecedor) THEN
                   LET g_nao_inclui = TRUE
                   RETURN TRUE
                END IF
                IF g_modifica_nf_transito THEN
                   LET g_nao_inclui = TRUE
                   RETURN TRUE
                END IF
                LET int_flag = FALSE
             END IF
          END IF
       END IF

       LET m_emitente_nf_filial  = p_dados_tela.cod_fornecedor

    BEFORE FIELD num_nf
       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       IF m_wms_instal = "S" THEN
          # Passo 7 #
          CALL sup3760_wms_busca_cfop(m_segmto_utilizacao)
          DISPLAY BY NAME p_dados_tela.*
       END IF
       IF m_wms_instal = 'S' THEN
          IF m_tipo_documento = "N" THEN
             IF find4GLFunction('wms6612_verifica_depositante_aduaneiro') THEN
                IF p_dados_tela.cod_fornecedor IS NOT NULL AND
                   p_dados_tela.cod_fornecedor <> ' ' THEN
                   CALL wms6612_verifica_depositante_aduaneiro(p_dados_tela.cod_fornecedor,TRUE)
                        RETURNING p_status, m_indicador_aduaneiro

                END IF
             END IF
             CURRENT WINDOW IS w_sup37601
          END IF
       END IF

       #---------------#
       #--------------------------#
       # Alteração WMS OS: 578930 #
       #--------------------------#
       IF  m_segmento = "I" THEN
            WHENEVER ERROR CONTINUE
            SELECT empresa.num_cgc,
                   empresa.ins_estadual
              INTO l_cgc,
                   l_ins_estadual
              FROM empresa
             WHERE empresa.cod_empresa = p_cod_empresa
            WHENEVER ERROR STOP
            IF  sqlca.sqlcode = 0 THEN
                # Verifica se existe um depositante que seja a própria empresa
                WHENEVER ERROR CONTINUE
                SELECT fornecedor.cod_fornecedor
                  INTO l_deposit
                  FROM fornecedor
                 WHERE fornecedor.num_cgc_cpf = l_cgc
                   AND fornecedor.ins_estadual = l_ins_estadual
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   LET l_deposit = NULL
                END IF
                LET m_wms_depositante = l_deposit
            END IF
        END IF
       #---------------#

       CALL sup3760_botao_zoom("ON",3,68)
       IF l_funcao = "MODIFICACAO" THEN
          NEXT FIELD cod_operacao
       END IF

       IF p_array_pedidos[1].num_pedido > 0 AND p_dados_tela.num_nf IS NULL THEN
          IF m_existe_tab_oc_nf THEN
             CALL sup6516_busca_nf_pedido(p_cod_empresa,p_array_pedidos[1].num_pedido)
                  RETURNING l_nota_fiscal, l_serie_nota_fiscal, l_subserie_nf
             IF l_nota_fiscal > 0 THEN
                LET p_dados_tela.num_nf = l_nota_fiscal
                LET p_dados_tela.ser_nf = l_serie_nota_fiscal
                LET p_dados_tela.ssr_nf = l_subserie_nf
                DISPLAY BY NAME p_dados_tela.num_nf,
                                p_dados_tela.ser_nf,
                                p_dados_tela.ssr_nf
             END IF
          END IF
       END IF
       IF m_utiliza_num_nfe = 'S' AND #762211
          m_utiliza_nf_eletronica = 'S' THEN
          IF sup3760_informa_num_nfe() = FALSE THEN
             EXIT INPUT
          ELSE
             NEXT FIELD ser_nf
          END IF
       END IF

    AFTER FIELD num_nf
       CALL sup3760_botao_zoom("OFF",3,68)
       IF p_dados_tela.num_nf IS  NULL  THEN
          ERROR "Informe o numero da Nota."
          NEXT FIELD num_nf
       ELSE
          IF p_dados_tela.num_nf > 9999999 THEN #Espindola
             ERROR "Nr.da Nota Fiscal invalido. Nao pode ser maior que 9999999"
             NEXT FIELD num_nf
          END IF
          IF p_dados_tela.ies_nf_aguard_nfe <> "6" AND
             p_dados_tela.num_nf = 0 THEN
             ERROR "Nr.da Nota Fiscal invalido. Nao pode ser 0"
             NEXT FIELD num_nf
          END IF
       END IF

    BEFORE FIELD ser_nf
       CALL sup3760_botao_zoom("OFF",3,68)
       IF l_funcao = "MODIFICACAO" THEN
          # CH 739942 - Rafael F. B. - 12/01/2010 #
          IF p_dados_tela.ies_nf_aguard_nfe <> "7" OR
             l_alt_cod_operacao THEN
             NEXT FIELD cod_operacao
          END IF
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "7" AND
          m_atualiza_nf_trans = "N" THEN
          NEXT FIELD ies_nf_aguard_nfe #SE PARAMETRO = N NAO DEIXAR ALTERAR.
       END IF

    AFTER FIELD ser_nf
       IF m_serie_branca = "S" THEN
          IF p_dados_tela.ser_nf IS NULL THEN
             LET p_dados_tela.ser_nf = " "
          END IF
       ELSE
          IF p_dados_tela.ser_nf IS NULL OR
             p_dados_tela.ser_nf = " " THEN
             ERROR "Informe o numero da serie da Nota."
             NEXT FIELD ser_nf
          END IF
       END IF

    # CH 739942 - Rafael F. B. - 12/01/2010 #
    BEFORE FIELD ssr_nf
       IF l_funcao = "MODIFICACAO" THEN
          IF l_alt_cod_operacao THEN
             NEXT FIELD ies_especie_nf
          END IF
       END IF

    AFTER FIELD ssr_nf
      #--inicio--vanderlei OS 332356 #
      #IF m_serie_branca = "S" THEN
      #   IF p_dados_tela.ser_nf IS NULL THEN
      #      LET p_dados_tela.ser_nf = " "
      #   END IF
      #ELSE
         IF p_dados_tela.ssr_nf IS NULL OR
            p_dados_tela.ssr_nf = " " THEN
            ERROR " Informe o numero da sub-serie da Nota."
            NEXT FIELD ssr_nf
         END IF
      #END IF
      #---fim----vanderlei OS 332356 #

      ### OS220554 ###
      IF NOT sup3760_consiste_pedido_nf() THEN
         NEXT FIELD num_nf
      END IF

    BEFORE FIELD ies_especie_nf
       CALL sup3760_botao_zoom("OFF",3,68)
       IF l_funcao = "MODIFICACAO" THEN
          # CH 739942 - Rafael F. B. - 12/01/2010 #
          IF p_dados_tela.ies_nf_aguard_nfe <> "7" OR
             l_alt_cod_operacao THEN
             NEXT FIELD cod_operacao
          END IF
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "7" AND
          m_atualiza_nf_trans = "N" THEN
             NEXT FIELD cod_operacao #SE PARAMETRO = N NAO DEIXAR ALTERAR.
       END IF

    AFTER FIELD ies_especie_nf
       IF l_funcao = "MODIFICACAO" THEN
       #809554
          IF mr_dados_tela_ant.ser_nf <> p_dados_tela.ser_nf OR
             mr_dados_tela_ant.ssr_nf <> p_dados_tela.ssr_nf OR
             mr_dados_tela_ant.ies_especie_nf <> p_dados_tela.ies_especie_nf THEN
             IF sup3760_nota_existe() THEN
                CALL log0030_mensagem('Nota fiscal já cadastrada.','exclamation')
                NEXT FIELD ser_nf
             END IF
          END IF
       ELSE #A56550
          IF sup3760_nota_existe() THEN
             CALL log0030_mensagem('Nota fiscal já cadastrada.','exclamation')
             NEXT FIELD num_nf
          END IF
       END IF
       #--inicio--OS 414316 #
       CALL sup3760_existe_h_frete_sup(p_cod_empresa, p_dados_tela.cod_fornecedor, p_dados_tela.num_nf,
                                       p_dados_tela.ser_nf, p_dados_tela.ssr_nf)
          RETURNING l_den_existe_h_tab
       #---fim----OS 414316 #
       WHENEVER ERROR CONTINUE
       SELECT num_conhec FROM frete_sup
        WHERE frete_sup.cod_empresa  = p_cod_empresa
          AND frete_sup.cod_transpor = p_dados_tela.cod_fornecedor
          AND frete_sup.num_conhec   = p_dados_tela.num_nf
          AND frete_sup.ser_conhec   = p_dados_tela.ser_nf
          AND frete_sup.ssr_conhec   = p_dados_tela.ssr_nf
       WHENEVER ERROR STOP
       IF (sqlca.sqlcode = 0 OR l_den_existe_h_tab IS NOT NULL) AND
          p_dados_tela.ies_especie_nf <> 'NFS' THEN #A88484
          ERROR "Nota Fiscal ja incluida como Conhecimento de Frete.", l_den_existe_h_tab CLIPPED
          NEXT FIELD cod_fornecedor
       END IF
       #eduardo o.s.290821
       IF sup3760_ver_nota_duplicada() THEN
          NEXT FIELD cod_fornecedor
       END IF

       IF l_funcao = "MODIFICACAO" THEN
          #OS564136
          IF m_permite_ent_mesma_nfe_emp_dif = 'S' AND
             p_dados_tela.ies_especie_nf = 'NFE' THEN
             IF p_dados_tela.ser_nf <> p_dados_telar.ser_nf
             OR p_dados_tela.ssr_nf <> p_dados_telar.ssr_nf
             OR p_dados_tela.ies_especie_nf <> p_dados_telar.ies_especie_nf THEN
                IF sup376_verifica_nota_fiscal() THEN
                   NEXT FIELD num_nf
                END IF
             END IF
          ELSE
             IF p_dados_tela.ser_nf <> p_dados_telar.ser_nf
             OR p_dados_tela.ssr_nf <> p_dados_telar.ssr_nf
             OR p_dados_tela.ies_especie_nf <> p_dados_telar.ies_especie_nf THEN #809554
                IF sup376_verifica_nota_fiscal() THEN
                   NEXT FIELD num_nf
                END IF
             END IF
          END IF
          #FIM OS564136
       ELSE
          IF sup376_verifica_nota_fiscal() THEN
             NEXT FIELD num_nf
          END IF
       END IF

       IF p_dados_tela.ies_especie_nf IS NOT NULL AND
          p_dados_tela.ies_especie_nf <> " " THEN
       ELSE
          ERROR " Informe a especie da Nota Fiscal."
          NEXT FIELD ies_especie_nf
       END IF

       #--inicio--vanderlei OS 409196 #
       IF NOT sup3760_consiste_ser_nf(p_dados_tela.ser_nf) THEN
          CALL log0030_mensagem('Série da nota fiscal inválida conforme legislação de ICMS nacional.\nSão válidos somente 1 á 9,B,C,D,U,BU,CU,DU,(branco) e as séries cadastradas no SUP1371.','exclamation')
          NEXT FIELD ser_nf
       END IF
       #---fim----vanderlei OS 409196 #

       IF p_dados_tela.ies_especie_nf = "NFS" AND m_serie_nfs IS NOT NULL AND
          m_serie_nfs <> " " THEN
          IF p_dados_tela.ser_nf <> m_serie_nfs THEN
             IF log0040_confirm(12,15,"Serie informada difere serie padrao p/ NFS.Deseja altera-la?") THEN
                LET p_dados_tela.ser_nf = m_serie_nfs
                DISPLAY BY NAME p_dados_tela.ser_nf
             END IF
          END IF
       END IF

       IF p_dados_tela.ies_especie_nf = "NFM" OR
          p_dados_tela.ies_especie_nf = "NFP" THEN
          IF sup376_verif_conta_nfm() THEN
          ELSE
             ERROR "Nao existe conta contabil especifica para NFM, cadastrada no sup1400"
             NEXT FIELD ies_especie_nf
          END IF
       END IF

       LET m_num_nf_cap = p_dados_tela.num_nf

       #--inicio--OS 414316 #
       CALL sup3760_existe_cap_h_ad_mestre(p_cod_empresa, m_num_nf_cap, p_dados_tela.cod_fornecedor,
                                           p_dados_tela.ser_nf, p_dados_tela.ssr_nf)
          RETURNING l_existe_h_tab
       #---fim----OS 414316 #

       WHENEVER ERROR CONTINUE
       SELECT num_nf
         FROM ad_mestre
        WHERE ad_mestre.cod_empresa    = p_cod_empresa
          AND ad_mestre.num_nf         = m_num_nf_cap
          AND ad_mestre.ser_nf         = p_dados_tela.ser_nf
          AND ad_mestre.ssr_nf         = p_dados_tela.ssr_nf
          AND ad_mestre.cod_fornecedor = p_dados_tela.cod_fornecedor
          #AND ad_mestre.dat_emis_nf    = p_dados_tela.dat_emis_nf           #OS 414314 #
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 OR l_existe_h_tab THEN
          IF l_existe_h_tab THEN                                             #OS 414316 #
             ERROR "Nota existente no histórico do CAP." ATTRIBUTE (reverse)
          ELSE
             ERROR "Nota existente na tabela AD_MESTRE." ATTRIBUTE (reverse)
          END IF
          IF NOT log004_confirm(12,43) THEN
             NEXT FIELD num_nf
          END IF
       END IF
       IF p_dados_tela.ies_especie_nf = "NFR" OR
          p_dados_tela.ies_especie_nf = "NFP" THEN
          LET l_cond_pedido = " "
          ###OS335542
          IF p_entrou_pedido = "S" THEN
             WHENEVER ERROR CONTINUE
             SELECT cnd_pgto
               FROM cond_pgto_cap
              WHERE cnd_pgto      = p_dados_tela.cnd_pgto_nf
                AND ies_pagamento = "3"
             WHENEVER ERROR STOP
             IF sqlca.sqlcode = 0 THEN
                LET l_cond_pedido = "3"
             ELSE
                LET l_cond_pedido = "2"
             END IF
          END IF

          IF p_entrou_pedido = "N" OR l_cond_pedido <> "3" THEN
             IF sup3760_busca_cond_pgto_sem_pgto() THEN
                DISPLAY p_dados_tela.cnd_pgto_nf TO cnd_pgto_nf
             ELSE
                DECLARE cq_cnd_nfr CURSOR FOR
                 SELECT cnd_pgto
                   FROM cond_pgto_cap
                  WHERE cond_pgto_cap.ies_pagamento = "3"
                ORDER BY cnd_pgto DESC
                FOREACH cq_cnd_nfr INTO p_dados_tela.cnd_pgto_nf
                   DISPLAY p_dados_tela.cnd_pgto_nf TO cnd_pgto_nf
                   EXIT FOREACH
                END FOREACH
             END IF
          END IF
          #Eduardo o.s.335542
       ELSE
          ### OS457685 ###
          CALL sup3762_exibe_condicao_pagamento()
       END IF

       IF p_dados_tela.ies_especie_nf = "NFC" THEN
          CALL sup3760_inclui_modifica_classif_nfc(l_funcao)
             RETURNING l_status

          IF l_status = FALSE THEN
             IF l_funcao = "MODIFICACAO" THEN
                NEXT FIELD ies_nf_aguard_nfe
             ELSE
                NEXT FIELD ies_especie_nf
             END IF
          END IF
       END IF

    BEFORE FIELD ies_nf_aguard_nfe
       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       IF m_wms_instal = "S" THEN
          IF l_altera_tipo         = FALSE OR
             l_altera_tipo_deposit = FALSE THEN
             IF fgl_lastkey() = fgl_keyval("UP") OR
                fgl_lastkey() = fgl_keyval("LEFT") THEN
                NEXT FIELD ies_especie_nf
             ELSE
                NEXT FIELD cod_operac_estoq
             END IF
          END IF
       END IF
       #---------------#
       IF l_funcao = "MODIFICACAO" THEN
          LET mr_dados_tela_ant.ies_nf_aguard_nfe = p_dados_tela.ies_nf_aguard_nfe

          # CH 739942 - Rafael F. B. - 12/01/2010 #
          IF l_alt_cod_operacao THEN
             NEXT FIELD cod_operac_estoq
          END IF

          IF (p_dados_tela.ies_nf_aguard_nfe = "4" OR
             p_dados_tela.ies_nf_aguard_nfe = "5") AND
             p_nf_sup.ies_nf_aguard_nfe <> "7"  THEN
             NEXT FIELD cod_operacao
          END IF

          IF p_dados_tela.ies_especie_nf = "NFC" THEN
             CALL sup3760_inclui_modifica_classif_nfc(l_funcao)
                RETURNING l_status
            IF l_status = FALSE THEN
               IF l_funcao = "MODIFICACAO" THEN
                  NEXT FIELD ies_nf_aguard_nfe
               ELSE
                  NEXT FIELD ies_especie_nf
               END IF
            END IF
          END IF
       END IF

       LET p_tip_embalag = sup376_busca_par_sup_pad("ies_nf_tipo_nove",1)
       IF sqlca.sqlcode = 0 THEN
          IF p_tip_embalag = "S" THEN
             LET p_dados_tela.ies_nf_aguard_nfe = "9"
             DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
          END IF
       END IF

    AFTER FIELD ies_nf_aguard_nfe
       #534641
       LET l_acessou_herc = FALSE
       IF FGL_LASTKEY() <> FGL_KEYVAL("UP") AND
          FGL_LASTKEY() <> FGL_KEYVAL("LEFT") THEN
          IF p_dados_tela.ies_especie_nf = "NFR" AND
             p_dados_tela.ies_nf_aguard_nfe = "A" THEN
             IF sup3760_verifica_fornec_depos(p_dados_tela.cod_fornecedor) THEN
                CALL log0030_mensagem("Fornecedor é igual ao único depositante, nota não pode ser tipo A","info")
                NEXT FIELD ies_nf_aguard_nfe
             END IF
             IF p_dados_tela.ies_especie_nf = "NFR" AND
                p_dados_tela.ies_nf_aguard_nfe = "A" THEN
                IF NOT sup3760_verifica_necessita_pc(p_dados_tela.cod_fornecedor,
                                                     p_dados_tela.cod_operacao,
                                                     "A") THEN
                   CALL log0030_mensagem("Fornecedor não permite entrada sem pedido de compra","info")
                   NEXT FIELD ies_nf_aguard_nfe
                END IF
             END IF

             IF find4GLFunction('supy160_cliente_318')THEN
                IF NOT log0040_confirm_default(0,0,"Esta nota NFR tipo A deverá ser impressa?","N") THEN
                   CALL supy160_bloqueia_impressao_nf(p_cod_empresa, p_dados_tela.num_aviso_rec,'N')
                ELSE
                   CALL supy160_bloqueia_impressao_nf(p_cod_empresa, p_dados_tela.num_aviso_rec,'S')
                END IF
             END IF

             IF p_dados_tela.ies_especie_nf = "NFR" AND
                p_dados_tela.ies_nf_aguard_nfe = "B" THEN
                IF NOT sup3760_verifica_necessita_pc(p_dados_tela.cod_fornecedor,
                                                     p_dados_tela.cod_operacao,
                                                     "B") THEN
                   CALL log0030_mensagem("Fornecedor não permite entrada sem pedido de compra","info")
                   NEXT FIELD ies_nf_aguard_nfe
                END IF
             END IF
          END IF
       END IF
       IF find4GLFunction("supy117_nfe_transito_ja_impressa") THEN
          IF supy117_nfe_transito_ja_impressa(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              p_nf_sup.ies_nf_aguard_nfe,
                                              p_nf_sup.ies_especie_nf, FALSE) THEN
             IF p_dados_tela.ies_nf_aguard_nfe <> "6"
             AND p_dados_tela.ies_nf_aguard_nfe <> "7" THEN
                 CALL log0030_mensagem("Nota fiscal já impressa. O tipo só pode ser alterado para 6.","info")

                NEXT FIELD ies_nf_aguard_nfe
             ELSE
               #--inicio--OS 595717 #
               IF l_funcao = "MODIFICACAO"   AND
                   m_nf_eletronica_impr = TRUE THEN
                  IF supy117_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                                           p_nf_sup.ies_especie_nf) = TRUE  THEN
                     NEXT FIELD dat_entrada_nf
                  ELSE
                    EXIT INPUT
                  END IF
               ELSE
                  EXIT INPUT
               END IF
               #---fim----OS 595717 #
             END IF
          END IF
       ELSE
          # INICIO 610336
          IF sup3760_nfe_transito_ja_impressa(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              p_nf_sup.ies_nf_aguard_nfe,
                                              p_nf_sup.cod_operacao,
                                              p_nf_sup.dat_entrada_nf) = TRUE THEN
             IF p_dados_tela.ies_nf_aguard_nfe <> "6"
             AND p_dados_tela.ies_nf_aguard_nfe <> "7" THEN
                 CALL log0030_mensagem("Nota fiscal já impressa. O tipo só pode ser alterado para 6.","info")

                NEXT FIELD ies_nf_aguard_nfe
             ELSE
               #--inicio--OS 595717 #
               IF l_funcao = "MODIFICACAO"   AND
                   m_nf_eletronica_impr = TRUE THEN
                  IF sup3760_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                                           p_nf_sup.cod_operacao) = FALSE THEN
                     EXIT INPUT
                  ELSE
                     NEXT FIELD dat_entrada_nf
                  END IF
               ELSE
                  EXIT INPUT
               END IF
               #---fim----OS 595717 #
             END IF
          END IF
          # FIM 610336
       END IF

       #534641
       INITIALIZE p_dados_tela.cod_emp_benef TO NULL

       IF p_dados_tela.ies_nf_aguard_nfe = "D" THEN
          IF p_dados_tela.ies_especie_nf = "NFR" THEN
             IF m_tem_valid_fim THEN
                IF TODAY > m_dat_fim_valid THEN
                   LET p_dados_tela.cod_operacao = "5.949"
                ELSE
                   LET p_dados_tela.cod_operacao = "5.99"
                END IF
             ELSE
                LET p_dados_tela.cod_operacao = "5.99"
             END IF
          ELSE
             ERROR "Tipo D deve ser utilizado para Notas de Especie NFR."
             NEXT FIELD ies_especie_nf
          END IF
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "P" THEN
          IF p_dados_tela.ies_especie_nf = "NFD" THEN
             ERROR "Tipo P nao pode ser utilizado para notas de especie NFD."
             NEXT FIELD ies_nf_aguard_nfe
          END IF
          IF g_nat_oper_permuta IS NULL THEN
             ERROR "Falta parametrizar natureza de operacao para permuta (sup1400)."
             NEXT FIELD ies_nf_aguard_nfe
          END IF
          IF g_operac_permuta IS NULL THEN
             ERROR "Falta parametrizar operacao de estoque para permuta (sup5110)."
             NEXT FIELD ies_nf_aguard_nfe
          END IF
       END IF
       IF l_funcao = "MODIFICACAO" THEN
          IF p_dados_tela.ies_nf_aguard_nfe <>  mr_dados_tela_ant.ies_nf_aguard_nfe THEN
             IF p_dados_tela.ies_nf_aguard_nfe = "4" OR
                p_dados_tela.ies_nf_aguard_nfe = "5" THEN
                ERROR " Tipos 4 ou 5 sao valores gerados automaticamente."

                LET p_dados_tela.ies_nf_aguard_nfe =  mr_dados_tela_ant.ies_nf_aguard_nfe
                NEXT FIELD ies_nf_aguard_nfe
             END IF
          END IF
       ELSE
          IF p_dados_tela.ies_nf_aguard_nfe = "4" OR
             p_dados_tela.ies_nf_aguard_nfe = "5" THEN
             ERROR " Tipos 4 ou 5 sao valores gerados automaticamente."

             LET p_dados_tela.ies_nf_aguard_nfe = " "
             NEXT FIELD ies_nf_aguard_nfe
          END IF
       END IF

      #512218
      IF l_funcao = "INCLUSAO"                 AND
         p_dados_tela.ies_especie_nf   = "NFE" AND
         p_dados_tela.ies_nf_aguard_nfe= "X"   THEN
         CALL sup3762_busca_cnd_pgto_nf()
      END IF


       IF p_dados_tela.ies_nf_aguard_nfe = "9" AND
          p_tip_embalag <> "S"
       THEN ERROR " Para este codigo, parametro no SUP8740 nao esta ativado "
            NEXT FIELD ies_nf_aguard_nfe
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "T" AND
          (p_mot_remes_terc IS NULL OR
           p_mot_remes_terc = "  ") THEN
          ERROR " Para controle de terceiros , ativar o codigo do motivo de remessa no SUP8740 "
          NEXT FIELD ies_nf_aguard_nfe
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe IS NULL OR
          p_dados_tela.ies_nf_aguard_nfe = " " THEN
          ERROR "Informe indicador de relac. entre NF X NFE"
          NEXT FIELD ies_nf_aguard_nfe
       END IF
       IF l_funcao = "INCLUSAO" THEN
          IF p_dados_tela.ies_nf_aguard_nfe = "3" THEN
             ERROR " Codigo invalido, inclusao so' permite 1, 2, 4, 5, 6, 7 ou 8"
             NEXT FIELD ies_nf_aguard_nfe
          END IF
       END IF
       IF p_dados_tela.ies_nf_aguard_nfe = "4" THEN
          IF p_dados_tela.ies_especie_nf <> "NFR" THEN
             ERROR "Codigo 4 so' e' valido para NFR"
             NEXT FIELD ies_nf_aguard_nfe
          END IF
       END IF
       IF p_dados_tela.ies_nf_aguard_nfe = "5" THEN
          IF p_dados_tela.ies_especie_nf = "NFR" THEN
             ERROR "Codigo 5 nao e' valido para NFR"
             NEXT FIELD ies_nf_aguard_nfe
          END IF
       END IF
       IF p_dados_tela.ies_especie_nf = "NFE" THEN
          IF p_dados_tela.ies_nf_aguard_nfe = "2" THEN
             ERROR "Codigo invalido para Nota Fiscal de Entrada (NFE)"
             NEXT FIELD ies_nf_aguard_nfe
          END IF
       END IF

       #---------------- material em transito --------------#
       IF l_funcao = "MODIFICACAO" THEN
          SELECT ies_nf_aguard_nfe
            FROM nf_sup
           WHERE nf_sup.cod_empresa   = p_cod_empresa
             AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec
             AND nf_sup.ies_nf_aguard_nfe = "7"
          IF sqlca.sqlcode = 0 THEN
             IF m_wms_instal = "S" THEN
                IF p_dados_tela.ies_nf_aguard_nfe <> "1" AND
                   p_dados_tela.ies_nf_aguard_nfe <> "T" AND
                   p_dados_tela.ies_nf_aguard_nfe <> "7" AND
                   p_dados_tela.ies_nf_aguard_nfe <> "6" AND
                   p_dados_tela.ies_nf_aguard_nfe <> "A" AND
                   p_dados_tela.ies_nf_aguard_nfe <> "B" THEN
                   ERROR " Somente e' permitido o valor (1 ou T ou 6 ou A ou B) para Entrada de Material em Transito. "
                   NEXT FIELD ies_nf_aguard_nfe
                END IF
             ELSE
                IF p_dados_tela.ies_nf_aguard_nfe <> "1" AND
                   p_dados_tela.ies_nf_aguard_nfe <> "T" AND
                   p_dados_tela.ies_nf_aguard_nfe <> "7" AND
                   p_dados_tela.ies_nf_aguard_nfe <> "6" THEN
                   ERROR " Somente e' permitido o valor (1 ou T ou 6) para Entrada de Material em Transito. "
                   NEXT FIELD ies_nf_aguard_nfe
                END IF
             END IF
          END IF
       END IF

       IF sup3760_consiste_nf_transito() AND l_funcao = "MODIFICACAO" AND ##OS 369029
          m_nf_aguard_nfe_ant = "7" AND p_dados_tela.ies_nf_aguard_nfe <> "7" AND
          sup3760_verifica_inspecao() = FALSE THEN
          LET p_dados_tela.dat_entrada_nf = TODAY
          DISPLAY BY NAME p_dados_tela.dat_entrada_nf
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "8" THEN
          LET l_conta_benef = 0
          WHENEVER ERROR CONTINUE
          SELECT COUNT(*)
            INTO l_conta_benef
            FROM nf_sup
           WHERE cod_empresa       = p_cod_empresa
             AND num_nf            = p_dados_tela.num_nf
             AND ser_nf            = p_dados_tela.ser_nf #607290
             AND cod_fornecedor    = p_dados_tela.cod_fornecedor
             AND (ies_nf_aguard_nfe = "8")
          WHENEVER ERROR STOP
          IF l_conta_benef > 0 THEN
             ERROR "Ja' existe transferencia de beneficiamento para este numero de NF."
             NEXT FIELD num_nf
          END IF

          IF l_funcao <> "INCLUSAO" THEN
             NEXT FIELD cod_operacao
          END IF
       END IF

       #511148
       IF sup3762_verifica_nf_devol_consig_vendas(p_dados_tela.num_nf,p_dados_tela.ser_nf, p_dados_tela.ssr_nf) = FALSE THEN
          NEXT FIELD num_nf
       END IF

       #--------------------nfe_vendas-----------------#
       LET p_nfe_vendas = FALSE
       LET m_nf_tipo_x  = FALSE ### OS 511148

       IF l_funcao = 'INCLUSAO' AND
          (p_dados_tela.ies_especie_nf = "NFE" OR
           (p_dados_tela.ies_especie_nf = "NFD" AND
           (p_dados_tela.ies_nf_aguard_nfe = "6" OR
            p_dados_tela.ies_nf_aguard_nfe = "1" OR
            p_dados_tela.ies_nf_aguard_nfe = "A" OR #791419
            p_dados_tela.ies_nf_aguard_nfe = "7" OR
### OS 358438
            p_dados_tela.ies_nf_aguard_nfe = "9"))) THEN
          IF p_entrou_pedido = "N" THEN

             INITIALIZE l_cgc_fornec TO NULL
             ### OS 511148
             CALL sup3762_busca_num_cgc_cpf_fornecedor(p_dados_tela.cod_fornecedor) RETURNING l_cgc_fornec, l_status

             INITIALIZE l_status TO NULL

             LET l_achou = FALSE
             IF m_ies_fat_unico THEN
                WHENEVER ERROR CONTINUE
                SELECT fat_nf_mestre.empresa
                  FROM fat_nf_mestre, clientes
                 WHERE fat_nf_mestre.empresa            = p_cod_empresa
                   AND fat_nf_mestre.nota_fiscal        = p_dados_tela.num_nf
                   AND fat_nf_mestre.serie_nota_fiscal  = p_dados_tela.ser_nf
                   AND fat_nf_mestre.subserie_nf        = p_dados_tela.ssr_nf
                   AND fat_nf_mestre.tip_nota_fiscal    = "FATPRDSV"
                   AND fat_nf_mestre.sit_nota_fiscal    = "N"
                   AND clientes.cod_cliente             = fat_nf_mestre.cliente
                   AND clientes.num_cgc_cpf             = l_cgc_fornec
                   AND clientes.ies_situacao IN ("S","A")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode = 0 THEN
                   LET l_achou = TRUE
                ELSE
                   IF sqlca.sqlcode <> NOTFOUND THEN
                      CALL log003_err_sql("LEITURA","FAT_NF_MESTRE")
                   END IF
                END IF
             ELSE
                WHENEVER ERROR CONTINUE
                SELECT nf_mestre_ser.cod_empresa
                  FROM nf_mestre_ser, clientes
                 WHERE nf_mestre_ser.cod_empresa  = p_cod_empresa
                   AND nf_mestre_ser.num_nff      = p_dados_tela.num_nf
                   AND nf_mestre_ser.ser_nff      = p_dados_tela.ser_nf
                   AND nf_mestre_ser.ies_situacao = "N"
                   AND clientes.cod_cliente       = nf_mestre_ser.cod_cliente
                   AND clientes.num_cgc_cpf       = l_cgc_fornec
                   AND clientes.ies_situacao IN ("S","A")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode = 0 THEN
                   LET l_achou = TRUE
                ELSE
                   IF sqlca.sqlcode <> NOTFOUND THEN
                      CALL log003_err_sql("LEITURA","NF_MESTRE_SER")
                   END IF
                END IF
             END IF

             IF l_achou THEN
                LET l_nf_mestre_ser = TRUE
                ### OS 511148
                IF (p_dados_tela.ies_especie_nf    = "NFE" OR
                    p_dados_tela.ies_especie_nf    = "NFR") AND
                    p_dados_tela.ies_nf_aguard_nfe = "X"   THEN

                    IF m_devol_consig_venda_parcial = "S"  THEN ##OS587025
                       LET m_nf_tipo_x =  TRUE
                    END IF
                   #LET l_nf_mestre_ser = TRUE
                   #
                   #IF p_ies_cod_operac = "N" OR
                   #   p_ies_cod_operac = " " OR
                   #   p_ies_cod_operac IS NULL THEN
                   #   NEXT FIELD dat_emis_nf
                   #ELSE
                   #  NEXT FIELD cod_operac_estoq
                   #END IF
                ELSE
                   IF fgl_lastkey() <> fgl_keyval("UP")   AND
                      fgl_lastkey() <> fgl_keyval("LEFT") THEN
                      IF log0040_confirm(18,10,"Existe NF Saída para esta NFE/NFD. Considerar dados?") THEN
                         LET g_ind_nfe = 0
                         LET l_acessou_herc = TRUE
                         CALL sup3762_devolucao_cliente_parcial(m_devol_cliente_parcial,'1') ### OS 509930
                                                      RETURNING m_devol_nf_parcial,
                                                                m_alterar,
                                                                m_devol_nf_parcial_venda, mr_tela.*

                         IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                            NEXT FIELD num_nf
                         END IF

                         CALL log006_exibe_teclas("01 02 03 07", p_versao)
                         CURRENT WINDOW IS w_sup37601

                         LET p_nfe_vendas = TRUE

                         ### OS 358438
                         IF p_dados_tela.ies_especie_nf = "NFD" AND
                            p_dados_tela.ies_nf_aguard_nfe = "9" THEN
                            CALL sup376_registra_impressao_nfd_tipo_9()
                         END IF
                      ELSE
                         IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                           NEXT FIELD num_nf
                         END IF
                      END IF
                   END IF
                   CALL log006_exibe_teclas("01 02 03 07", p_versao)
                   CURRENT WINDOW IS w_sup37601
                END IF

             ELSE
                IF NOT m_ies_fat_unico THEN
                   WHENEVER ERROR CONTINUE
                   SELECT nf_mestre.cod_empresa
                     FROM nf_mestre, clientes
                    WHERE nf_mestre.cod_empresa  = p_cod_empresa
                      AND nf_mestre.num_nff      = p_dados_tela.num_nf
                      AND nf_mestre.ser_nff      = p_dados_tela.ser_nf
                      AND clientes.cod_cliente   = nf_mestre.cod_cliente
                      AND nf_mestre.ies_situacao = "N"
                      AND clientes.num_cgc_cpf   = l_cgc_fornec
                      AND clientes.ies_situacao IN ("S","A")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 THEN
                      LET l_achou = TRUE
                   ELSE
                      IF sqlca.sqlcode <> NOTFOUND THEN
                         CALL log003_err_sql("LEITURA","NF_MESTRE")
                      END IF
                   END IF
                END IF

                IF l_achou THEN
                   LET l_resposta = FALSE
                   LET l_nf_mestre = TRUE

                   ### OS 511148
                   IF (p_dados_tela.ies_especie_nf    = "NFE" OR
                       p_dados_tela.ies_especie_nf    = "NFR") AND
                       p_dados_tela.ies_nf_aguard_nfe  = "X"   THEN

                      IF m_devol_consig_venda_parcial = "S"  THEN ##OS587025
                         LET m_nf_tipo_x =  TRUE
                      END IF
                      LET l_nf_mestre  = TRUE
                   ELSE
                      IF fgl_lastkey() <> fgl_keyval("UP")   AND
                         fgl_lastkey() <> fgl_keyval("LEFT") THEN

                         IF log0040_confirm(18,10,"Existe NF Saída para esta NFE/NFD. Considerar dados?") THEN
                            LET g_ind_nfe = 0
                            LET l_acessou_herc = TRUE
                            CALL sup3762_devolucao_cliente_parcial(m_devol_cliente_parcial,'1') ### OS 509930
                                                         RETURNING m_devol_nf_parcial,
                                                                   m_alterar,
                                                                   m_devol_nf_parcial_venda, mr_tela.*

                            CALL log006_exibe_teclas("01 02 03 07", p_versao)
                            CURRENT WINDOW IS w_sup37601

                            IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                               NEXT FIELD num_nf
                            END IF

                            LET p_nfe_vendas = TRUE
                            LET l_nf_mestre  = TRUE
                            ### OS 358438
                            IF p_dados_tela.ies_especie_nf = "NFD" AND
                               p_dados_tela.ies_nf_aguard_nfe = "9" THEN
                               CALL sup376_registra_impressao_nfd_tipo_9()
                            END IF
                            IF (m_gera_rsv_transf = "S" AND
                                p_dados_tela.ies_nf_aguard_nfe = "8") THEN
                            ELSE
                                ### OS 511148
                                CALL sup3762_busca_cnd_pgto_nf()
                            END IF
                            IF sup376_verifica_cnd_pgto()
                            THEN
                            END IF
                            IF p_ies_cod_operac = "N" OR
                               p_ies_cod_operac = " " OR
                               p_ies_cod_operac IS NULL THEN
                               NEXT FIELD dat_emis_nf
                            ELSE
                               NEXT FIELD cod_operac_estoq
                            END IF
                         ELSE
                            IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                               NEXT FIELD num_nf
                            END IF
                         END IF
                      END IF
                      CALL log006_exibe_teclas("01 02 03 07", p_versao)
                      CURRENT WINDOW IS w_sup37601
                   END IF
                ELSE
                   IF m_ies_fat_unico THEN
                      WHENEVER ERROR CONTINUE
                      SELECT fat_nf_mestre_hist.trans_nota_fiscal
                        INTO l_trans_nf_fiscal
                        FROM fat_nf_mestre_hist, clientes
                       WHERE fat_nf_mestre_hist.empresa            = p_cod_empresa
                         AND fat_nf_mestre_hist.nota_fiscal        = p_dados_tela.num_nf
                         AND fat_nf_mestre_hist.serie_nota_fiscal  = p_dados_tela.ser_nf
                         AND fat_nf_mestre_hist.subserie_nf        = p_dados_tela.ssr_nf
                         AND fat_nf_mestre_hist.tip_nota_fiscal    = "FATPRDSV"
                         AND fat_nf_mestre_hist.sit_nota_fiscal    = "N"
                         AND clientes.cod_cliente                  = fat_nf_mestre_hist.cliente
                         AND clientes.num_cgc_cpf                  = l_cgc_fornec
                         AND clientes.ies_situacao IN ("S","A")
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode = 0 THEN
                         LET l_achou = TRUE
                      ELSE
                         IF sqlca.sqlcode <> NOTFOUND THEN
                            CALL log003_err_sql("LEITURA","FAT_NF_MESTRE_HIST")
                         END IF
                      END IF
                   ELSE
                      WHENEVER ERROR CONTINUE
                      SELECT nf_mestre_hist.*
                        FROM nf_mestre_hist, clientes
                       WHERE nf_mestre_hist.cod_empresa  = p_cod_empresa
                         AND nf_mestre_hist.num_nff      = p_dados_tela.num_nf
                         AND nf_mestre_hist.ser_nff      = p_dados_tela.ser_nf
                         AND nf_mestre_hist.ies_situacao = "N"
                         AND clientes.cod_cliente        = nf_mestre_hist.cod_cliente
                         AND clientes.num_cgc_cpf        = l_cgc_fornec
                         AND clientes.ies_situacao IN ("S","A")
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode = 0 THEN
                         LET l_achou = TRUE
                      ELSE
                         IF sqlca.sqlcode <> NOTFOUND THEN
                            CALL log003_err_sql("LEITURA","NF_MESTRE_HIST")
                         END IF
                      END IF
                   END IF
                   IF l_achou THEN
                      LET l_nf_mestre_hist = TRUE

                      IF (p_dados_tela.ies_especie_nf    = "NFE" OR
                          p_dados_tela.ies_especie_nf    = "NFR") AND
                          p_dados_tela.ies_nf_aguard_nfe = "X"   THEN

                          IF m_devol_consig_venda_parcial = "S"  THEN ##OS587025
                             LET m_nf_tipo_x =  TRUE
                          END IF
                      ELSE
                         IF fgl_lastkey() <> fgl_keyval("UP")   AND
                            fgl_lastkey() <> fgl_keyval("LEFT") THEN
                            IF log0040_confirm(18,5,"Existe histórico NF Saída para esta NFE. Considerar dados?") THEN
                               LET g_ind_nfe = 0
                               LET l_acessou_herc = TRUE
                               CALL sup3762_devolucao_cliente_parcial(m_devol_cliente_parcial,'1') ### OS 509930
                                                            RETURNING m_devol_nf_parcial,
                                                                      m_alterar,
                                                                      m_devol_nf_parcial_venda, mr_tela.*

                               CALL log006_exibe_teclas("01 02 03 07", p_versao)
                               CURRENT WINDOW IS w_sup37601

                               IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                                  NEXT FIELD num_nf
                               END IF

                               LET p_nfe_vendas = TRUE
                               LET l_nf_mestre_hist = TRUE

                               ### OS 358438
                               IF p_dados_tela.ies_especie_nf = "NFD" AND
                                  p_dados_tela.ies_nf_aguard_nfe = "9" THEN
                                  CALL sup376_registra_impressao_nfd_tipo_9()
                               END IF
                               ### OS 511148
                               CALL sup3762_busca_cnd_pgto_nf()

                               IF sup376_verifica_cnd_pgto()THEN

                               END IF
                               IF p_ies_cod_operac = "N" OR
                                  p_ies_cod_operac = " " OR
                                  p_ies_cod_operac IS NULL THEN
                                  NEXT FIELD dat_emis_nf
                               ELSE
                                  NEXT FIELD cod_operac_estoq
                               END IF
                            ELSE
                               IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                                 NEXT FIELD num_nf
                               END IF
                            END IF
                         END IF
                         CALL log006_exibe_teclas("01 02 03 07", p_versao)
                         CURRENT WINDOW IS w_sup37601
                      END IF
                   ELSE
                      IF m_ies_fat_unico THEN
                         #--inicio--OS 760363 #
                         IF find4GLFunction('supy148_verificar_nf_saida_cancelada_fat_unico') THEN
                            IF supy148_verificar_nf_saida_cancelada_fat_unico(p_cod_empresa,
                                                                              l_trans_nf_fiscal,
                                                                              FALSE) = TRUE THEN
                               IF log0040_confirm(21,04, "Nota fiscal de saída está cancelada.Deseja continuar? ") = FALSE THEN
                                  NEXT FIELD num_nf
                               END IF
                            END IF
                         END IF
                         #---fim----OS 760363 #
                      ELSE

                         #--inicio--OS 727998 #
                         IF find4GLFunction('supy148_verificar_nf_saida_cancelada') THEN
                            IF supy148_verificar_nf_saida_cancelada(p_dados_tela.num_nf,
                                                                    p_dados_tela.ser_nf) = TRUE THEN
                               IF log0040_confirm(21,04, "Nota fiscal de saída está cancelada.Deseja continuar? ") = FALSE THEN
                                   NEXT FIELD num_nf
                               END IF
                            END IF
                         END IF
                         #---fim----OS 727998 #
                      END IF
                   END IF
                END IF
             END IF
             #HERC
             IF find4glfunction("supy146_informa_nf_saida") THEN
                LET g_ind_nfe = 0
                IF l_acessou_herc = FALSE THEN
                   CALL sup3762_devolucao_cliente_parcial(m_devol_cliente_parcial,'0') ### OS 509930
                                                RETURNING m_devol_nf_parcial,
                                                          m_alterar,
                                                          m_devol_nf_parcial_venda, mr_tela.*
                   CURRENT WINDOW IS w_sup37601

                   IF m_ies_fat_unico THEN
                      IF m_devol_nf_parcial = TRUE THEN
                         CALL sup3762_busca_items_devol_parcial()
                         #IF NOT sup1561_carrega_dados_faturamento_unico_para_nf(m_cod_emp_orig,
                         #                                                       "venda",
                         #                                                       p_ies_prim_cnd,
                         #                                                       m_devol_nf_parcial,
                         #                                                       mr_tela.*,
                         #                                                       m_devol_nf_parcial_venda,
                         #                                                       m_devol_consig_total,
                         #                                                       ' ') THEN
                         #   LET p_houve_erro = TRUE
                         #   EXIT WHILE
                         #END IF
                         DISPLAY p_array[1].* TO s_sup37601[1].*
                         DISPLAY p_array[2].* TO s_sup37601[2].*
                         DISPLAY p_array[3].* TO s_sup37601[3].*
                         DISPLAY p_array[4].* TO s_sup37601[4].*
                      ELSE
                         IF NOT sup1561_carrega_dados_faturamento_unico_para_nf(m_cod_emp_orig,
                                                                                "venda",
                                                                                p_ies_prim_cnd,
                                                                                m_devol_nf_parcial,
                                                                                mr_tela.*,
                                                                                m_devol_nf_parcial_venda,
                                                                                m_devol_consig_total,
                                                                                ' ') THEN
                            LET p_houve_erro = TRUE
                            EXIT WHILE
                         END IF
                         DISPLAY p_array[1].* TO s_sup37601[1].*
                         DISPLAY p_array[2].* TO s_sup37601[2].*
                         DISPLAY p_array[3].* TO s_sup37601[3].*
                         DISPLAY p_array[4].* TO s_sup37601[4].*
                      END IF
                   END IF
                END IF
             END IF
             #HERC
          END IF
       END IF

       #--------------------NFR-----------------#
       IF l_funcao = 'INCLUSAO' AND
          (p_dados_tela.ies_especie_nf = "NFR" AND
          (p_dados_tela.ies_nf_aguard_nfe = "6")) THEN
          LET p_nfe_vendas = FALSE
          LET m_nf_tipo_x  = FALSE  ### OS 511148
          IF p_entrou_pedido = "N" THEN
             INITIALIZE l_cgc_fornec TO NULL
             ### OS 511148
             CALL sup3762_busca_num_cgc_cpf_fornecedor(p_dados_tela.cod_fornecedor) RETURNING l_cgc_fornec, l_status

             INITIALIZE l_status TO NULL

             WHENEVER ERROR CONTINUE
             LET l_achou = FALSE
             IF m_ies_fat_unico THEN
                WHENEVER ERROR CONTINUE
                SELECT fat_nf_mestre.empresa
                  FROM fat_nf_mestre, clientes
                 WHERE fat_nf_mestre.empresa            = p_cod_empresa
                   AND fat_nf_mestre.nota_fiscal        = p_dados_tela.num_nf
                   AND fat_nf_mestre.serie_nota_fiscal  = p_dados_tela.ser_nf
                   AND fat_nf_mestre.subserie_nf        = p_dados_tela.ssr_nf
                   AND fat_nf_mestre.tip_nota_fiscal    = "FATPRDSV"
                   AND fat_nf_mestre.sit_nota_fiscal    = "N"
                   AND clientes.cod_cliente             = fat_nf_mestre.cliente
                   AND clientes.num_cgc_cpf             = l_cgc_fornec
                   AND clientes.ies_situacao IN ("S","A")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode = 0 THEN
                   LET l_achou = TRUE
                ELSE
                   IF sqlca.sqlcode <> NOTFOUND THEN
                      CALL log003_err_sql("LEITURA","FAT_NF_MESTRE")
                   END IF
                END IF
             ELSE
                WHENEVER ERROR CONTINUE
                SELECT nf_mestre_ser.cod_empresa
                  FROM nf_mestre_ser, clientes
                 WHERE nf_mestre_ser.cod_empresa  = p_cod_empresa
                   AND nf_mestre_ser.num_nff      = p_dados_tela.num_nf
                   AND nf_mestre_ser.ser_nff      = p_dados_tela.ser_nf
                   AND nf_mestre_ser.ies_situacao = "N"
                   AND clientes.cod_cliente       = nf_mestre_ser.cod_cliente
                   AND clientes.num_cgc_cpf       = l_cgc_fornec
                   AND clientes.ies_situacao in("S","A")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode = 0 THEN
                   LET l_achou = TRUE
                ELSE
                   IF sqlca.sqlcode <> NOTFOUND THEN
                      CALL log003_err_sql("LEITURA","NF_MESTRE_SER")
                   END IF
                END IF
             END IF
             IF l_achou THEN
                IF log0040_confirm(18,10,"Existe NF Saída para esta NFR. Considerar dados?") THEN
                   LET p_nfe_vendas = TRUE
                   LET l_nf_mestre_ser = TRUE

                   IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                     NEXT FIELD num_nf
                   END IF

                   IF p_ies_cod_operac = "N" OR
                      p_ies_cod_operac = " " OR
                      p_ies_cod_operac IS NULL THEN
                      NEXT FIELD cod_operacao #OS537680
                   ELSE
                      NEXT FIELD cod_operac_estoq
                   END IF
                ELSE
                   IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                     NEXT FIELD num_nf
                   END IF
                END IF
             ELSE
                IF NOT m_ies_fat_unico THEN
                   WHENEVER ERROR CONTINUE
                   SELECT nf_mestre.cod_empresa
                     FROM nf_mestre, clientes
                    WHERE nf_mestre.cod_empresa  = p_cod_empresa
                      AND nf_mestre.num_nff      = p_dados_tela.num_nf
                      AND nf_mestre.ser_nff      = p_dados_tela.ser_nf
                      AND clientes.cod_cliente   = nf_mestre.cod_cliente
                      AND nf_mestre.ies_situacao = "N"
                      AND clientes.num_cgc_cpf   = l_cgc_fornec
                      AND clientes.ies_situacao in("S","A")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 THEN
                      LET l_achou = TRUE
                   ELSE
                      IF sqlca.sqlcode <> NOTFOUND THEN
                         CALL log003_err_sql("LEITURA","NF_MESTRE")
                      END IF
                   END IF
                END IF
                IF l_achou THEN
                   LET l_resposta = FALSE
                   LET l_nf_mestre = TRUE
                   IF log0040_confirm(18,10,"Existe NF Saída para esta NFR. Considerar dados?") THEN
                      LET p_nfe_vendas = TRUE
                      LET l_nf_mestre = TRUE

                      IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                        NEXT FIELD num_nf
                      END IF

                      #OS511148
                      CALL sup3762_busca_cnd_pgto_nf()

                      IF sup376_verifica_cnd_pgto() THEN
                      END IF

                      IF p_ies_cod_operac = "N" OR
                         p_ies_cod_operac = " " OR
                         p_ies_cod_operac IS NULL THEN
                         NEXT FIELD cod_operacao #OS537680
                      ELSE
                         NEXT FIELD cod_operac_estoq
                      END IF
                   ELSE
                      IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                        NEXT FIELD num_nf
                      END IF
                   END IF
                ELSE
                   IF m_ies_fat_unico THEN
                      WHENEVER ERROR CONTINUE
                      SELECT fat_nf_mestre_hist.trans_nota_fiscal
                        INTO l_trans_nf_fiscal
                        FROM fat_nf_mestre_hist, clientes
                       WHERE fat_nf_mestre_hist.empresa            = p_cod_empresa
                         AND fat_nf_mestre_hist.nota_fiscal        = p_dados_tela.num_nf
                         AND fat_nf_mestre_hist.serie_nota_fiscal  = p_dados_tela.ser_nf
                         AND fat_nf_mestre_hist.subserie_nf        = p_dados_tela.ssr_nf
                         AND fat_nf_mestre_hist.tip_nota_fiscal    = "FATPRDSV"
                         AND fat_nf_mestre_hist.sit_nota_fiscal    = "N"
                         AND clientes.cod_cliente                  = fat_nf_mestre_hist.cliente
                         AND clientes.num_cgc_cpf                  = l_cgc_fornec
                         AND clientes.ies_situacao IN ("S","A")
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode = 0 THEN
                         LET l_achou = TRUE
                      ELSE

                         #--inicio--OS 760363 #
                         IF find4GLFunction('supy148_verificar_nf_saida_cancelada_fat_unico') THEN
                            IF supy148_verificar_nf_saida_cancelada_fat_unico(p_cod_empresa,
                                                                              l_trans_nf_fiscal,
                                                                              FALSE ) = TRUE THEN
                               IF log0040_confirm(21,04, "Nota fiscal de saída está cancelada.Deseja continuar? ") = FALSE THEN
                                   NEXT FIELD num_nf
                               END IF
                            END IF
                         END IF
                         #---fim----OS 760363 #

                         IF sqlca.sqlcode <> NOTFOUND THEN
                            CALL log003_err_sql("LEITURA","FAT_NF_MESTRE_HIST")
                         END IF
                      END IF
                   ELSE
                      WHENEVER ERROR CONTINUE
                      SELECT nf_mestre_hist.*
                        FROM nf_mestre_hist, clientes
                       WHERE nf_mestre_hist.cod_empresa  = p_cod_empresa
                         AND nf_mestre_hist.num_nff      = p_dados_tela.num_nf
                         AND nf_mestre_hist.ser_nff      = p_dados_tela.ser_nf
                         AND nf_mestre_hist.ies_situacao = "N"
                         AND clientes.cod_cliente        = nf_mestre_hist.cod_cliente
                         AND clientes.num_cgc_cpf        = l_cgc_fornec
                         AND clientes.ies_situacao in("S","A")
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode = 0 THEN
                         LET l_achou = TRUE
                      ELSE
                         #--inicio--OS 727998 #
                         IF find4GLFunction('supy148_verificar_nf_saida_cancelada') THEN
                            IF supy148_verificar_nf_saida_cancelada(p_dados_tela.num_nf,
                                                                    p_dados_tela.ser_nf) = TRUE THEN
                               IF log0040_confirm(21,04, "Nota fiscal de saída está cancelada.Deseja continuar? ") = FALSE THEN
                                   NEXT FIELD num_nf
                               END IF
                            END IF
                         END IF
                         #---fim----OS 727998 #

                         IF sqlca.sqlcode <> NOTFOUND THEN
                            CALL log003_err_sql("LEITURA","NF_MESTRE_HIST")
                         END IF
                      END IF
                   END IF
                   IF l_achou THEN
                      IF log0040_confirm(18,5,"Existe histórico NF Saída para esta NFR. Considerar dados?") THEN
                         LET p_nfe_vendas = TRUE
                         LET l_nf_mestre_hist = TRUE

                         IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                           NEXT FIELD num_nf
                         END IF
                         ### OS 511148
                         CALL sup3762_busca_cnd_pgto_nf()

                         IF sup376_verifica_cnd_pgto() THEN
                         END IF

                         IF p_ies_cod_operac = "N" OR
                            p_ies_cod_operac = " " OR
                            p_ies_cod_operac IS NULL THEN
                            NEXT FIELD cod_operacao #OS537680
                         ELSE
                            NEXT FIELD cod_operac_estoq
                         END IF
                      ELSE
                         IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                           NEXT FIELD num_nf
                         END IF
                      END IF
                   END IF
                END IF
             END IF
          END IF
       END IF

       IF l_funcao = "MODIFICACAO" THEN
          IF p_ies_aguard_nfe <>  p_dados_tela.ies_nf_aguard_nfe AND
             p_ies_aguard_nfe <> "7" THEN
             LET p_dados_tela.ies_nf_aguard_nfe = p_ies_aguard_nfe
             DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
             CALL log0030_mensagem("Operacao nao permitida. Excluir nota fiscal","exclamation")
          END IF
       END IF
       LET p_ies_nf_transf = FALSE
       LET m_transf_ativo_imob = FALSE
       IF p_ies_obt_inf_com = "S" AND
          l_funcao = "INCLUSAO"  THEN
          IF p_par_estoque.ies_modulo_vdp = "S" THEN
             IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                    p_dados_tela.num_aviso_rec,
                                                    p_dados_tela.num_nf,
                                                    p_dados_tela.ser_nf,
                                                    p_dados_tela.ssr_nf,
                                                    p_dados_tela.cod_fornecedor,
                                                    p_dados_tela.cod_operacao,
                                                    p_dados_tela.cod_fiscal_compl) = TRUE THEN
                IF NOT sup3762_verifica_destinatario_nota(m_ies_fat_unico) THEN
                   NEXT FIELD num_nf
                END IF
                IF g_ies_tip_controle = "J" OR
                   g_ies_tip_controle = "I" THEN  #eduardo o.s.290535 18/11/03
                   ERROR " NF de TRANSF.DE IMOBILIZADO ENTRE UNIDADES, com origem da empresa ",p_cod_emp_transf,". "
                ELSE
                   ERROR " Nota Fiscal de TRANSFERENCIA ENTRE UNIDADES, com origem da empresa ",p_cod_emp_transf,". "
                END IF
                IF log004_confirm(14,42) = TRUE THEN
                   IF p_ies_obt_inf_com = "S" THEN
                      LET p_aviso_rec_compl.cod_empresa_orig = p_cod_emp_transf
                   END IF
                   ### Parametro Lorenzetti OS228406
                   IF m_transf_estoq ="S" THEN
                      ERROR " Movimentar estoque ??? "
                      IF sup0769_confirm(14,42) = FALSE THEN
                         LET m_ind_transf_estoq = TRUE
                      END IF
                   END IF

                   ### OS 154880 ###
                   IF g_ies_tip_controle = "J" OR
                      g_ies_tip_controle = "I" THEN  #eduardo o.s.290535 18/11/03
                      LET m_transf_ativo_imob = TRUE
                   END IF
                   ### FIM OS 154880 ###
                   IF m_ies_fat_unico THEN
                      IF NOT sup1561_carrega_dados_faturamento_unico_para_nf(p_cod_emp_transf,
                                                                             "transferencia",
                                                                             p_ies_prim_cnd,
                                                                             m_devol_nf_parcial,
                                                                             mr_tela.*,
                                                                             m_devol_nf_parcial_venda,
                                                                             m_devol_consig_total,
                                                                             ' ') THEN
                         LET int_flag = 1
                         EXIT INPUT
                      END IF
                   ELSE
                      IF NOT sup376_inicializa_transferencia_nf() THEN
                         LET int_flag = 1
                         EXIT INPUT
                      END IF
                   END IF
                   LET p_ies_nf_transf = TRUE
                   LET int_flag = FALSE
                   LET l_cond_pedido = " "
                   #eduardo o.s.335542
                   IF p_entrou_pedido = "S" THEN
                      WHENEVER ERROR CONTINUE
                      SELECT cnd_pgto
                        FROM cond_pgto_cap
                       WHERE cnd_pgto      = p_dados_tela.cnd_pgto_nf
                         AND ies_pagamento = "3"
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode = 0 THEN
                         LET l_cond_pedido = "3"
                      ELSE
                         LET l_cond_pedido = "2"
                      END IF
                   END IF

                   IF p_entrou_pedido = "N" OR l_cond_pedido <> "3" THEN
                      ### OS 511148
                      CALL sup3762_busca_cnd_pgto_nf()
                   END IF
                   #Eduardo o.s.335542
                   IF sup376_verifica_cnd_pgto()
                   THEN
                   END IF
                   NEXT FIELD dat_emis_nf
                ELSE
                   LET p_ies_nf_transf = FALSE
                   IF m_ent_manual_transf = "N" THEN #OS372636
                      LET int_flag = TRUE
                      EXIT INPUT
                   END IF
                   WHENEVER ERROR CONTINUE
                   INSERT INTO sup_par_ar (empresa, aviso_recebto, seq_aviso_recebto,
                                           parametro, par_ind_especial, parametro_texto,
                                           parametro_val, parametro_dat)
                                   VALUES (p_cod_empresa, p_dados_tela.num_aviso_rec, "1",
                                           "transf_unid_manual", NULL, p_user, NULL, TODAY)
                   WHENEVER ERROR STOP
                END IF
             END IF
          END IF
       END IF
       LET g_ies_transf_benef = FALSE
       IF sup3762_verifica_operacao_srig(m_ies_fat_unico) THEN
          LET g_ies_transf_benef = TRUE
          IF p_ies_cod_operac = "N" OR
             p_ies_cod_operac = " " OR
             p_ies_cod_operac IS NULL THEN
             SELECT cod_operacao
               FROM estoque_operac_ar
              WHERE estoque_operac_ar.cod_empresa  = p_cod_empresa
                AND estoque_operac_ar.cod_operacao = p_dados_tela.cod_operac_estoq
             IF sqlca.sqlcode <> 0 THEN
                ERROR " Operacao de Estoque ",p_dados_tela.cod_operac_estoq ," nao cadastrada na tabela ESTOQUE_OPERAC_AR. "
                NEXT FIELD ies_nf_aguard_nfe
             END IF
          END IF
       END IF
       LET g_ies_nf_permuta = FALSE
       IF l_funcao = "INCLUSAO" AND g_nat_oper_permuta IS NOT NULL AND
          p_dados_tela.ies_especie_nf <> "NFD" THEN
          IF sup3762_verifica_nota_permuta(m_ies_fat_unico) THEN
             ERROR " Nota Fiscal de PERMUTA ENTRE EMPRESAS, com origem da empresa ",g_cod_emp_permuta,". "
             IF log004_confirm(14,42) = TRUE THEN

                IF m_ies_fat_unico THEN
                   IF NOT sup1561_carrega_dados_faturamento_unico_para_nf(g_cod_emp_permuta,
                                                                          "permuta",
                                                                          p_ies_prim_cnd,
                                                                          m_devol_nf_parcial,
                                                                          mr_tela.*,
                                                                          m_devol_nf_parcial_venda,
                                                                          m_devol_consig_total,
                                                                          ' ') THEN
                      LET p_retorno_3760 = FALSE
                      LET int_flag = 1
                      EXIT INPUT
                   END IF
                ELSE
                   IF NOT sup3762_inicializa_permuta_nf() THEN
                      LET p_retorno_3760 = FALSE
                      LET int_flag = 1
                      EXIT INPUT
                   END IF
                END IF

                LET g_ies_nf_permuta = TRUE
                LET int_flag = FALSE
                ### OS 511148
                CALL sup3762_busca_cnd_pgto_nf()

                IF sup376_verifica_cnd_pgto() THEN
                END IF
                NEXT FIELD dat_emis_nf
             ELSE
                LET g_ies_nf_permuta = FALSE
                LET int_flag = TRUE
                EXIT INPUT
             END IF
          END IF
       END IF
       IF m_transf_saida = "S" THEN
          LET m_cod_emp_orig = " "
          IF p_nfe_vendas     = FALSE AND
             m_nf_tipo_x      = FALSE AND ### OS 511148
             p_ies_nf_transf  = FALSE AND
             g_ies_nf_permuta = FALSE AND g_ies_transf_benef = FALSE THEN
             CALL sup3762_verifica_dados_empresa_origem(m_ies_fat_unico)
                  RETURNING p_status, m_cod_emp_orig, g_ies_tip_controle
             IF p_status = TRUE THEN
                ERROR " Nota Fiscal de TERCEIRO, com origem na empresa ",m_cod_emp_orig,". "
                IF log004_confirm(14,42) = TRUE THEN
                   LET p_nfe_vendas   = TRUE
                   CASE g_ies_tip_controle
                   WHEN "2" LET p_dados_tela.ies_especie_nf    = "NFR"
                            LET p_dados_tela.ies_nf_aguard_nfe = "T"
                   WHEN "3" LET p_dados_tela.ies_especie_nf    = "NFR"
                            LET p_dados_tela.ies_nf_aguard_nfe = "1"
                   WHEN "4" LET p_dados_tela.ies_especie_nf    = "NFR"
                            LET p_dados_tela.ies_nf_aguard_nfe = "1"
                   END CASE
                   DISPLAY BY NAME p_dados_tela.ies_especie_nf,
                                   p_dados_tela.ies_nf_aguard_nfe
                ELSE
                   INITIALIZE m_cod_emp_orig, g_ies_tip_controle TO NULL
                END IF
             END IF
          END IF
       END IF
       IF p_dados_tela.ies_nf_aguard_nfe <> "6" AND
          p_dados_tela.num_nf = 0 THEN
          ERROR "Nr.da Nota Fiscal invalido. Nao pode ser 0"
          NEXT FIELD num_nf
       END IF

       ### OS 511148
       LET l_devol_consig_total = FALSE
       LET l_nf_hist            = NULL
       IF l_funcao = "INCLUSAO" THEN   ### OS 512218
          IF m_devol_consig_venda_parcial = "S"  THEN
             IF (p_dados_tela.ies_especie_nf    = "NFR"  OR
                 p_dados_tela.ies_especie_nf    = "NFE") AND
                 p_dados_tela.ies_nf_aguard_nfe = "X"    THEN
                 CALL sup3762_devol_consig_venda_parcial()
                      RETURNING l_devol_consig_total,
                                l_nf_hist,
                                m_devol_nf_parcial,
                                m_alterar

                 CALL sup3762_busca_cnd_pgto_nf()

                 IF l_devol_consig_total = TRUE THEN
                    LET  m_nf_tipo_x  = TRUE
                 END IF
                 NEXT FIELD cod_operac_estoq
             END IF
          END IF
       END IF
       #A24579
       IF m_wms_instal = 'S' THEN
          IF m_tipo_documento = "N" THEN
             IF find4GLFunction('wms6612_verifica_tipo_nota') THEN
                IF NOT wms6612_verifica_tipo_nota(p_dados_tela.ies_nf_aguard_nfe, m_indicador_aduaneiro) THEN
                   NEXT FIELD ies_nf_aguard_nfe
                END IF
             END IF
          END IF
       END IF

    BEFORE FIELD cod_operac_estoq
       # CH 739942 - Rafael F. B. - 12/01/2010 #
       IF l_funcao = "MODIFICACAO" THEN
          IF l_alt_cod_operacao THEN
             NEXT FIELD cod_emp_benef
          END IF
       END IF

       IF p_ies_cod_operac IS NULL OR
          p_ies_cod_operac = "N" OR
          p_ies_cod_operac = " " OR
          p_dados_tela.ies_nf_aguard_nfe = "5" THEN
          IF fgl_lastkey() <> fgl_keyval("UP") THEN
             NEXT FIELD cod_operacao
          ELSE
             NEXT FIELD ies_nf_aguard_nfe
          END IF
       END IF
       IF l_funcao <> "MODIFICACAO" AND
          (p_dados_tela.cod_operac_estoq IS NULL OR
           p_dados_tela.cod_operac_estoq = " ") THEN
          IF(p_dados_tela.ies_especie_nf = "NFD" OR        #eduardo o.s.301125
            (p_ies_tip_entrada = "5"             AND
             p_dados_tela.ies_especie_nf <> "NFC")) THEN
             CALL sup376_busca_operacao_estoque("DEV")
          ELSE
             IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                    p_dados_tela.num_aviso_rec,
                                                    p_dados_tela.num_nf,
                                                    p_dados_tela.ser_nf,
                                                    p_dados_tela.ssr_nf,
                                                    p_dados_tela.cod_fornecedor,
                                                    p_dados_tela.cod_operacao,
                                                    p_dados_tela.cod_fiscal_compl) = TRUE THEN
                CALL sup376_busca_operacao_estoque("TRANSF")
                IF g_ies_transf_benef = FALSE THEN
                   NEXT FIELD cod_operac_estoq
                END IF
             ELSE
                ##O.S 186311
                IF p_dados_tela.ies_nf_aguard_nfe = "P" THEN
                   CALL sup376_busca_operacao_estoque("PERMUTA")
                ELSE
                   CALL sup376_busca_operacao_estoque("NOR")
                END IF
             END IF
          END IF

           DISPLAY BY NAME p_dados_tela.cod_operac_estoq
       ELSE
          IF p_ies_cod_operac IS NULL AND fgl_lastkey() = fgl_keyval("UP") AND
             p_dados_tela.ies_nf_aguard_nfe = "7" THEN
             NEXT FIELD ies_especie_nf
          END IF
          IF sup376_verifica_contagem_itens_ar() THEN
             NEXT FIELD cod_operacao
          END IF
       END IF
       CALL sup3760_botao_zoom("ON",3,68)

    AFTER FIELD cod_operac_estoq
       CALL sup3760_botao_zoom("OFF",3,68)
       IF p_dados_tela.cod_operac_estoq IS NULL THEN
          ERROR " Informe o codigo de operacao de estoque. "
          NEXT FIELD cod_operac_estoq
       ELSE
          IF sup376_verifica_operac_estoque() = FALSE THEN
             NEXT FIELD cod_operac_estoq
          END IF
       END IF

    BEFORE FIELD cod_emp_benef
       # CH 739942 - Rafael F. B. - 12/01/2010 #
       IF l_funcao = "MODIFICACAO" THEN
          IF l_alt_cod_operacao THEN
             NEXT FIELD cod_operacao
          END IF
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe <> "8" THEN
         IF fgl_lastkey() <> fgl_keyval("UP")
         THEN IF p_ies_cod_operac IS NULL OR
                 p_ies_cod_operac = "N" OR
                 p_ies_cod_operac = " "
              THEN NEXT FIELD cod_operacao
              ELSE NEXT FIELD cod_operac_estoq
              END IF
         ELSE
            NEXT FIELD ies_nf_aguard_nfe
         END IF
          DISPLAY "    " AT 7,70
       ELSE DISPLAY "Emp:" AT 7,70
      END IF

   AFTER FIELD cod_emp_benef
      IF p_dados_tela.cod_emp_benef IS NULL THEN
         ERROR " Informe o código da empresa de origem do beneficiamento."
         NEXT FIELD cod_emp_benef
      ELSE
         IF p_cod_empresa = p_dados_tela.cod_emp_benef THEN
            ERROR " Empresa origem do beneficiamento igual `a empresa destino."
            NEXT FIELD cod_emp_benef
         END IF
         IF sup376_verifica_emp_benef() = FALSE THEN
            ERROR " Empresa origem do beneficiamento nao cadastrada."
            NEXT FIELD cod_emp_benef
         ELSE
           ### OS 511148
            IF sup3762_verifica_emp_benef_cnpj_fornec() = FALSE  THEN ### OS 514073
               NEXT FIELD cod_fornecedor
            END IF

            #-- transferencia de notas de beneficiamento --#
            LET m_nf_tipo_x  = FALSE  ### OS 511148
            LET p_nfe_vendas = FALSE
            LET p_nfe_import = FALSE
            LET p_nfm_import = FALSE
            IF p_dados_tela.ies_nf_aguard_nfe = "8" AND
               l_funcao = 'INCLUSAO' THEN
               IF p_entrou_pedido = "N" OR
                  ### OS 182871 ###
                  m_gera_rsv_transf = "S" THEN

                  INITIALIZE l_nf_tp8_assume_dt_emissao TO NULL
                  CALL log2250_busca_parametro(p_cod_empresa,"nf_tipo8_assume_data_emissao")
                        RETURNING l_nf_tp8_assume_dt_emissao, p_status
                  IF l_nf_tp8_assume_dt_emissao IS NULL THEN
                     LET l_nf_tp8_assume_dt_emissao = "N"
                  END IF

                  LET l_dat_entrada_nf_ant = p_dados_tela.dat_entrada_nf

                  IF m_ies_fat_unico THEN
                     LET l_achou = FALSE
                     INITIALIZE l_dat_envio_hist, l_trans_nota_fiscal TO NULL
                     WHENEVER ERROR CONTINUE
                     DECLARE cq_fat_nf_mst_benef CURSOR FOR
                     SELECT DATE(fat_nf_mestre.dat_hor_emissao),
                            DATE(fat_nf_mestre.dat_hor_emissao),
                            trans_nota_fiscal
                       FROM fat_nf_mestre
                      WHERE fat_nf_mestre.empresa            = p_dados_tela.cod_emp_benef
                        AND fat_nf_mestre.nota_fiscal        = p_dados_tela.num_nf
                        AND fat_nf_mestre.serie_nota_fiscal  = p_dados_tela.ser_nf
                        AND fat_nf_mestre.subserie_nf        = p_dados_tela.ssr_nf
                        AND fat_nf_mestre.tip_nota_fiscal    = "FATPRDSV"
                        AND fat_nf_mestre.sit_nota_fiscal    = "N"
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        CALL log003_err_sql("DECLARE CURSOR","CQ_FAT_NF_MST_BENEF")
                     END IF
                     WHENEVER ERROR CONTINUE
                     OPEN cq_fat_nf_mst_benef
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        CALL log003_err_sql("OPEN CURSOR","CQ_FAT_NF_MST_BENEF")
                     END IF
                     WHENEVER ERROR CONTINUE
                     FETCH cq_fat_nf_mst_benef INTO p_dados_tela.dat_emis_nf,
                                                    p_dados_tela.dat_entrada_nf,
                                                    l_trans_nota_fiscal
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode = 0 THEN
                        IF l_nf_tp8_assume_dt_emissao <> "S" THEN
                           LET p_dados_tela.dat_entrada_nf = l_dat_entrada_nf_ant
                        END IF
                        LET p_nfe_vendas = TRUE

                        CALL supr6_busca_cod_fiscal_fat_nf_item_fisc(p_dados_tela.cod_emp_benef,
                                                                     l_trans_nota_fiscal,0,
                                                                     l_dat_envio_hist,
                                                                     FALSE)
                             RETURNING l_status, p_cod_fiscal

                        LET l_achou = TRUE
                     ELSE
                        IF sqlca.sqlcode <> NOTFOUND THEN
                           CALL log003_err_sql("FETCH CURSOR","CQ_FAT_NF_MST_BENEF")
                        END IF
                     END IF
                     WHENEVER ERROR CONTINUE
                     CLOSE cq_fat_nf_mst_benef
                     FREE cq_fat_nf_mst_benef
                     WHENEVER ERROR STOP

                     IF l_achou = FALSE THEN
                        WHENEVER ERROR CONTINUE
                        DECLARE cq_fat_nf_mst_h_benef CURSOR FOR
                        SELECT DATE(fat_nf_mestre_hist.dat_hor_emissao),
                               DATE(fat_nf_mestre_hist.dat_hor_emissao),
                               trans_nota_fiscal,
                               dat_envio_hist
                          FROM fat_nf_mestre_hist
                         WHERE fat_nf_mestre_hist.empresa            = p_dados_tela.cod_emp_benef
                           AND fat_nf_mestre_hist.nota_fiscal        = p_dados_tela.num_nf
                           AND fat_nf_mestre_hist.serie_nota_fiscal  = p_dados_tela.ser_nf
                           AND fat_nf_mestre_hist.subserie_nf        = p_dados_tela.ssr_nf
                           AND fat_nf_mestre_hist.tip_nota_fiscal    = "FATPRDSV"
                           AND fat_nf_mestre_hist.sit_nota_fiscal    = "N"
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode <> 0 THEN
                           CALL log003_err_sql("DECLARE CURSOR","CQ_FAT_NF_MST_H_BENEF")
                        END IF
                        WHENEVER ERROR CONTINUE
                        OPEN cq_fat_nf_mst_h_benef
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode <> 0 THEN
                           CALL log003_err_sql("OPEN CURSOR","CQ_FAT_NF_MST_H_BENEF")
                        END IF
                        WHENEVER ERROR CONTINUE
                        FETCH cq_fat_nf_mst_h_benef INTO p_dados_tela.dat_emis_nf,
                                                         p_dados_tela.dat_entrada_nf,
                                                         l_trans_nota_fiscal,
                                                         l_dat_envio_hist
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode = 0 THEN
                           IF l_nf_tp8_assume_dt_emissao <> "S" THEN
                              LET p_dados_tela.dat_entrada_nf = l_dat_entrada_nf_ant
                           END IF
                           LET p_nfe_vendas = TRUE

                           CALL supr6_busca_cod_fiscal_fat_nf_item_fisc(p_dados_tela.cod_emp_benef,
                                                                        l_trans_nota_fiscal,0,
                                                                        l_dat_envio_hist,
                                                                        FALSE)
                                RETURNING l_status, p_cod_fiscal

                           LET l_achou = TRUE
                        ELSE
                           IF sqlca.sqlcode <> NOTFOUND THEN
                              CALL log003_err_sql("FETCH CURSOR","CQ_FAT_NF_MST_H_BENEF")
                           END IF
                        END IF

                        IF l_achou = FALSE THEN
                           CALL log0030_mensagem("Nota fiscal informada não existe na empresa origem do beneficiamento.","exclamation")
                           NEXT FIELD num_nf
                        END IF
                     END IF
                  ELSE
                     WHENEVER ERROR CONTINUE
                     SELECT nf_mestre_ser.dat_emissao,
                            nf_mestre_ser.dat_emissao,
                            nf_mestre_ser.cod_fiscal
                       INTO p_dados_tela.dat_emis_nf,
                            p_dados_tela.dat_entrada_nf,
                            p_cod_fiscal
                       FROM nf_mestre_ser
                      WHERE nf_mestre_ser.cod_empresa  = p_dados_tela.cod_emp_benef
                        AND nf_mestre_ser.num_nff      = p_dados_tela.num_nf
                        AND nf_mestre_ser.ser_nff      = p_dados_tela.ser_nf
                        AND nf_mestre_ser.ies_situacao = "N"
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode = 0 THEN
                        IF l_nf_tp8_assume_dt_emissao <> "S" THEN
                           LET p_dados_tela.dat_entrada_nf = l_dat_entrada_nf_ant
                        END IF
                        LET p_nfe_vendas = TRUE
                     ELSE
                        WHENEVER ERROR CONTINUE
                        SELECT nf_mestre.dat_emissao,
                               nf_mestre.dat_emissao,
                               nf_mestre.cod_fiscal
                          INTO p_dados_tela.dat_emis_nf,
                               p_dados_tela.dat_entrada_nf,
                               p_cod_fiscal
                          FROM nf_mestre
                         WHERE cod_empresa  = p_dados_tela.cod_emp_benef
                           AND num_nff      = p_dados_tela.num_nf
                           AND ser_nff      = p_dados_tela.ser_nf
                           AND ies_situacao = "N"
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode = 0 THEN
                           IF l_nf_tp8_assume_dt_emissao <> "S" THEN
                              LET p_dados_tela.dat_entrada_nf = l_dat_entrada_nf_ant
                           END IF
                           LET p_nfe_vendas = TRUE
                        ELSE
                           WHENEVER ERROR CONTINUE
                           SELECT nf_mestre_hist.dat_emissao,
                                  nf_mestre_hist.dat_emissao,
                                  nf_mestre_hist.cod_fiscal
                             INTO p_dados_tela.dat_emis_nf,
                                  p_dados_tela.dat_entrada_nf,
                                  p_cod_fiscal
                             FROM nf_mestre_hist
                            WHERE nf_mestre_hist.cod_empresa  = p_dados_tela.cod_emp_benef
                              AND nf_mestre_hist.num_nff      = p_dados_tela.num_nf
                              AND nf_mestre_hist.ser_nff      = p_dados_tela.ser_nf
                              AND nf_mestre_hist.ies_situacao = "N"
                           WHENEVER ERROR STOP
                           IF sqlca.sqlcode = 0 THEN
                              IF l_nf_tp8_assume_dt_emissao <> "S" THEN
                                 LET p_dados_tela.dat_entrada_nf = l_dat_entrada_nf_ant
                              END IF
                              LET p_nfe_vendas = TRUE
                           ELSE
                              CALL log0030_mensagem("Nota fiscal informada nao existe na empresa origem do beneficiamento.","exclamation")
                              NEXT FIELD num_nf
                           END IF
                        END IF
                     END IF
                  END IF
                  LET p_dados_tela.cod_operacao[1]    = p_cod_fiscal[1]
                  LET p_dados_tela.cod_operacao[2]    = "."
                  LET p_dados_tela.cod_operacao[3,5]  = p_cod_fiscal[2,4]
                  DISPLAY BY NAME p_dados_tela.*
               END IF
            END IF
         END IF
      END IF

    BEFORE FIELD cod_operacao
       CALL sup3760_botao_zoom("ON",3,68)
       #801808
       IF m_wms_instal = 'S'  THEN
          IF l_funcao = 'INCLUSAO' AND
             (p_dados_tela.ies_especie_nf = "NFE" OR
              (p_dados_tela.ies_especie_nf = "NFD" AND
              (p_dados_tela.ies_nf_aguard_nfe = "6" OR
               p_dados_tela.ies_nf_aguard_nfe = "1" OR
               p_dados_tela.ies_nf_aguard_nfe = "A" OR #791419
               p_dados_tela.ies_nf_aguard_nfe = "7" OR
### OS    358438
               p_dados_tela.ies_nf_aguard_nfe = "9"))) THEN
             IF p_entrou_pedido = "N" THEN

                INITIALIZE l_cgc_fornec TO NULL
                ### OS 511148
                CALL sup3762_busca_num_cgc_cpf_fornecedor(p_dados_tela.cod_fornecedor) RETURNING l_cgc_fornec, l_status

                INITIALIZE l_status TO NULL

                LET l_achou = FALSE
                IF m_ies_fat_unico THEN
                   WHENEVER ERROR CONTINUE
                   SELECT fat_nf_mestre.empresa
                     FROM fat_nf_mestre, clientes
                    WHERE fat_nf_mestre.empresa            = p_cod_empresa
                      AND fat_nf_mestre.nota_fiscal        = p_dados_tela.num_nf
                      AND fat_nf_mestre.serie_nota_fiscal  = p_dados_tela.ser_nf
                      AND fat_nf_mestre.subserie_nf        = p_dados_tela.ssr_nf
                      AND fat_nf_mestre.tip_nota_fiscal    = "FATPRDSV"
                      AND fat_nf_mestre.sit_nota_fiscal    = "N"
                      AND clientes.cod_cliente             = fat_nf_mestre.cliente
                      AND clientes.num_cgc_cpf             = l_cgc_fornec
                      AND clientes.ies_situacao IN ("S","A")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 THEN
                      LET l_achou = TRUE
                   ELSE
                      IF sqlca.sqlcode <> NOTFOUND THEN
                         CALL log003_err_sql("LEITURA","FAT_NF_MESTRE")
                      END IF
                   END IF
                ELSE
                   WHENEVER ERROR CONTINUE
                   SELECT nf_mestre_ser.cod_empresa
                     FROM nf_mestre_ser, clientes
                    WHERE nf_mestre_ser.cod_empresa  = p_cod_empresa
                      AND nf_mestre_ser.num_nff      = p_dados_tela.num_nf
                      AND nf_mestre_ser.ser_nff      = p_dados_tela.ser_nf
                      AND nf_mestre_ser.ies_situacao = "N"
                      AND clientes.cod_cliente       = nf_mestre_ser.cod_cliente
                      AND clientes.num_cgc_cpf       = l_cgc_fornec
                      AND clientes.ies_situacao IN ("S","A")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 THEN
                      LET l_achou = TRUE
                   ELSE
                      IF sqlca.sqlcode <> NOTFOUND THEN
                         CALL log003_err_sql("LEITURA","NF_MESTRE_SER")
                      END IF
                   END IF
                END IF

                IF l_achou THEN
                   LET l_nf_mestre_ser = TRUE
                   ### OS 511148
                   IF (p_dados_tela.ies_especie_nf    = "NFE" OR
                       p_dados_tela.ies_especie_nf    = "NFR") AND
                       p_dados_tela.ies_nf_aguard_nfe = "X"   THEN

                       IF m_devol_consig_venda_parcial = "S"  THEN ##OS587025
                          LET m_nf_tipo_x =  TRUE
                       END IF
                      #LET l_nf_mestre_ser = TRUE
                      #
                      #IF p_ies_cod_operac = "N" OR
                      #   p_ies_cod_operac = " " OR
                      #   p_ies_cod_operac IS NULL THEN
                      #   NEXT FIELD dat_emis_nf
                      #ELSE
                      #  NEXT FIELD cod_operac_estoq
                      #END IF
                   ELSE
                      IF fgl_lastkey() <> fgl_keyval("UP")   AND
                         fgl_lastkey() <> fgl_keyval("LEFT") THEN
                         IF log0040_confirm(18,10,"Existe NF Saída para esta NFE/NFD. Considerar dados?") THEN
                            LET g_ind_nfe = 0
                            LET l_acessou_herc = TRUE
                            CALL sup3762_devolucao_cliente_parcial(m_devol_cliente_parcial,'1') ### OS 509930
                                                         RETURNING m_devol_nf_parcial,
                                                                   m_alterar,
                                                                   m_devol_nf_parcial_venda, mr_tela.*

                            IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                               NEXT FIELD num_nf
                            END IF

                            CALL log006_exibe_teclas("01 02 03 07", p_versao)
                            CURRENT WINDOW IS w_sup37601

                            LET p_nfe_vendas = TRUE

                            ### OS 358438
                            IF p_dados_tela.ies_especie_nf = "NFD" AND
                               p_dados_tela.ies_nf_aguard_nfe = "9" THEN
                               CALL sup376_registra_impressao_nfd_tipo_9()
                            END IF
                         ELSE
                            IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                              NEXT FIELD num_nf
                            END IF
                         END IF
                      END IF
                      CALL log006_exibe_teclas("01 02 03 07", p_versao)
                      CURRENT WINDOW IS w_sup37601
                   END IF

                ELSE
                   IF NOT m_ies_fat_unico THEN
                      WHENEVER ERROR CONTINUE
                      SELECT nf_mestre.cod_empresa
                        FROM nf_mestre, clientes
                       WHERE nf_mestre.cod_empresa  = p_cod_empresa
                         AND nf_mestre.num_nff      = p_dados_tela.num_nf
                         AND nf_mestre.ser_nff      = p_dados_tela.ser_nf
                         AND clientes.cod_cliente   = nf_mestre.cod_cliente
                         AND nf_mestre.ies_situacao = "N"
                         AND clientes.num_cgc_cpf   = l_cgc_fornec
                         AND clientes.ies_situacao IN ("S","A")
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode = 0 THEN
                         LET l_achou = TRUE
                      ELSE
                         IF sqlca.sqlcode <> NOTFOUND THEN
                            CALL log003_err_sql("LEITURA","NF_MESTRE")
                         END IF
                      END IF
                   END IF

                   IF l_achou THEN
                      LET l_resposta = FALSE
                      LET l_nf_mestre = TRUE

                      ### OS 511148
                      IF (p_dados_tela.ies_especie_nf    = "NFE" OR
                          p_dados_tela.ies_especie_nf    = "NFR") AND
                          p_dados_tela.ies_nf_aguard_nfe  = "X"   THEN

                         IF m_devol_consig_venda_parcial = "S"  THEN ##OS587025
                            LET m_nf_tipo_x =  TRUE
                         END IF
                         LET l_nf_mestre  = TRUE
                      ELSE
                         IF fgl_lastkey() <> fgl_keyval("UP")   AND
                            fgl_lastkey() <> fgl_keyval("LEFT") THEN

                            IF log0040_confirm(18,10,"Existe NF Saída para esta NFE/NFD. Considerar dados?") THEN
                               LET g_ind_nfe = 0
                               LET l_acessou_herc = TRUE
                               CALL sup3762_devolucao_cliente_parcial(m_devol_cliente_parcial,'1') ### OS 509930
                                                            RETURNING m_devol_nf_parcial,
                                                                      m_alterar,
                                                                      m_devol_nf_parcial_venda, mr_tela.*

                               CALL log006_exibe_teclas("01 02 03 07", p_versao)
                               CURRENT WINDOW IS w_sup37601

                               IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                                  NEXT FIELD num_nf
                               END IF

                               LET p_nfe_vendas = TRUE
                               LET l_nf_mestre  = TRUE
                               ### OS 358438
                               IF p_dados_tela.ies_especie_nf = "NFD" AND
                                  p_dados_tela.ies_nf_aguard_nfe = "9" THEN
                                  CALL sup376_registra_impressao_nfd_tipo_9()
                               END IF
                               IF (m_gera_rsv_transf = "S" AND
                                   p_dados_tela.ies_nf_aguard_nfe = "8") THEN
                               ELSE
                                   ### OS 511148
                                   CALL sup3762_busca_cnd_pgto_nf()
                               END IF
                               IF sup376_verifica_cnd_pgto()
                               THEN
                               END IF
                               IF p_ies_cod_operac = "N" OR
                                  p_ies_cod_operac = " " OR
                                  p_ies_cod_operac IS NULL THEN
                                  NEXT FIELD dat_emis_nf
                               ELSE
                                  NEXT FIELD cod_operac_estoq
                               END IF
                            ELSE
                               IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                                  NEXT FIELD num_nf
                               END IF
                            END IF
                         END IF
                         CALL log006_exibe_teclas("01 02 03 07", p_versao)
                         CURRENT WINDOW IS w_sup37601
                      END IF
                   ELSE
                      IF m_ies_fat_unico THEN
                         WHENEVER ERROR CONTINUE
                         SELECT fat_nf_mestre_hist.trans_nota_fiscal
                           INTO l_trans_nf_fiscal
                           FROM fat_nf_mestre_hist, clientes
                          WHERE fat_nf_mestre_hist.empresa            = p_cod_empresa
                            AND fat_nf_mestre_hist.nota_fiscal        = p_dados_tela.num_nf
                            AND fat_nf_mestre_hist.serie_nota_fiscal  = p_dados_tela.ser_nf
                            AND fat_nf_mestre_hist.subserie_nf        = p_dados_tela.ssr_nf
                            AND fat_nf_mestre_hist.tip_nota_fiscal    = "FATPRDSV"
                            AND fat_nf_mestre_hist.sit_nota_fiscal    = "N"
                            AND clientes.cod_cliente                  = fat_nf_mestre_hist.cliente
                            AND clientes.num_cgc_cpf                  = l_cgc_fornec
                            AND clientes.ies_situacao IN ("S","A")
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode = 0 THEN
                            LET l_achou = TRUE
                         ELSE
                            IF sqlca.sqlcode <> NOTFOUND THEN
                               CALL log003_err_sql("LEITURA","FAT_NF_MESTRE_HIST")
                            END IF
                         END IF
                      ELSE
                         WHENEVER ERROR CONTINUE
                         SELECT nf_mestre_hist.*
                           FROM nf_mestre_hist, clientes
                          WHERE nf_mestre_hist.cod_empresa  = p_cod_empresa
                            AND nf_mestre_hist.num_nff      = p_dados_tela.num_nf
                            AND nf_mestre_hist.ser_nff      = p_dados_tela.ser_nf
                            AND nf_mestre_hist.ies_situacao = "N"
                            AND clientes.cod_cliente        = nf_mestre_hist.cod_cliente
                            AND clientes.num_cgc_cpf        = l_cgc_fornec
                            AND clientes.ies_situacao IN ("S","A")
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode = 0 THEN
                            LET l_achou = TRUE
                         ELSE
                            IF sqlca.sqlcode <> NOTFOUND THEN
                               CALL log003_err_sql("LEITURA","NF_MESTRE_HIST")
                            END IF
                         END IF
                      END IF
                      IF l_achou THEN
                         LET l_nf_mestre_hist = TRUE

                         IF (p_dados_tela.ies_especie_nf    = "NFE" OR
                             p_dados_tela.ies_especie_nf    = "NFR") AND
                             p_dados_tela.ies_nf_aguard_nfe = "X"   THEN

                             IF m_devol_consig_venda_parcial = "S"  THEN ##OS587025
                                LET m_nf_tipo_x =  TRUE
                             END IF
                         ELSE
                            IF fgl_lastkey() <> fgl_keyval("UP")   AND
                               fgl_lastkey() <> fgl_keyval("LEFT") THEN
                               IF log0040_confirm(18,5,"Existe histórico NF Saída para esta NFE. Considerar dados?") THEN
                                  LET g_ind_nfe = 0
                                  LET l_acessou_herc = TRUE
                                  CALL sup3762_devolucao_cliente_parcial(m_devol_cliente_parcial,'1') ### OS 509930
                                                               RETURNING m_devol_nf_parcial,
                                                                         m_alterar,
                                                                         m_devol_nf_parcial_venda, mr_tela.*

                                  CALL log006_exibe_teclas("01 02 03 07", p_versao)
                                  CURRENT WINDOW IS w_sup37601

                                  IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                                     NEXT FIELD num_nf
                                  END IF

                                  LET p_nfe_vendas = TRUE
                                  LET l_nf_mestre_hist = TRUE

                                  ### OS 358438
                                  IF p_dados_tela.ies_especie_nf = "NFD" AND
                                     p_dados_tela.ies_nf_aguard_nfe = "9" THEN
                                     CALL sup376_registra_impressao_nfd_tipo_9()
                                  END IF
                                  ### OS 511148
                                  CALL sup3762_busca_cnd_pgto_nf()

                                  IF sup376_verifica_cnd_pgto()THEN

                                  END IF
                                  IF p_ies_cod_operac = "N" OR
                                     p_ies_cod_operac = " " OR
                                     p_ies_cod_operac IS NULL THEN
                                     NEXT FIELD dat_emis_nf
                                  ELSE
                                     NEXT FIELD cod_operac_estoq
                                  END IF
                               ELSE
                                  IF sup3760_verif_ar_relac_nf_saida() = FALSE THEN
                                    NEXT FIELD num_nf
                                  END IF
                               END IF
                            END IF
                            CALL log006_exibe_teclas("01 02 03 07", p_versao)
                            CURRENT WINDOW IS w_sup37601
                         END IF
                      ELSE
                         IF m_ies_fat_unico THEN
                            #--inicio--OS 760363 #
                            IF find4GLFunction('supy148_verificar_nf_saida_cancelada_fat_unico') THEN
                               IF supy148_verificar_nf_saida_cancelada_fat_unico(p_cod_empresa,
                                                                                 l_trans_nf_fiscal,
                                                                                 FALSE) = TRUE THEN
                                  IF log0040_confirm(21,04, "Nota fiscal de saída está cancelada.Deseja continuar? ") = FALSE THEN
                                     NEXT FIELD num_nf
                                  END IF
                               END IF
                            END IF
                            #---fim----OS 760363 #
                         ELSE

                            #--inicio--OS 727998 #
                            IF find4GLFunction('supy148_verificar_nf_saida_cancelada') THEN
                               IF supy148_verificar_nf_saida_cancelada(p_dados_tela.num_nf,
                                                                       p_dados_tela.ser_nf) = TRUE THEN
                                  IF log0040_confirm(21,04, "Nota fiscal de saída está cancelada.Deseja continuar? ") = FALSE THEN
                                      NEXT FIELD num_nf
                                  END IF
                               END IF
                            END IF
                            #---fim----OS 727998 #
                         END IF
                      END IF
                   END IF
                END IF
                #HERC
                IF find4glfunction("supy146_informa_nf_saida") THEN
                   LET g_ind_nfe = 0
                   IF l_acessou_herc = FALSE THEN
                      CALL sup3762_devolucao_cliente_parcial(m_devol_cliente_parcial,'0') ### OS 509930
                                                   RETURNING m_devol_nf_parcial,
                                                             m_alterar,
                                                             m_devol_nf_parcial_venda, mr_tela.*
                      CURRENT WINDOW IS w_sup37601

                      IF m_ies_fat_unico THEN
                         IF m_devol_nf_parcial = TRUE THEN
                            CALL sup3762_busca_items_devol_parcial()
                            #IF NOT sup1561_carrega_dados_faturamento_unico_para_nf(m_cod_emp_orig,
                            #                                                       "venda",
                            #                                                       p_ies_prim_cnd,
                            #                                                       m_devol_nf_parcial,
                            #                                                       mr_tela.*,
                            #                                                       m_devol_nf_parcial_venda,
                            #                                                       m_devol_consig_total,
                            #                                                       ' ') THEN
                            #   LET p_houve_erro = TRUE
                            #   EXIT WHILE
                            #END IF
                            DISPLAY p_array[1].* TO s_sup37601[1].*
                            DISPLAY p_array[2].* TO s_sup37601[2].*
                            DISPLAY p_array[3].* TO s_sup37601[3].*
                            DISPLAY p_array[4].* TO s_sup37601[4].*
                         ELSE
                            IF NOT sup1561_carrega_dados_faturamento_unico_para_nf(m_cod_emp_orig,
                                                                                   "venda",
                                                                                   p_ies_prim_cnd,
                                                                                   m_devol_nf_parcial,
                                                                                   mr_tela.*,
                                                                                   m_devol_nf_parcial_venda,
                                                                                   m_devol_consig_total,
                                                                                   ' ') THEN
                               LET p_houve_erro = TRUE
                               EXIT WHILE
                            END IF
                            DISPLAY p_array[1].* TO s_sup37601[1].*
                            DISPLAY p_array[2].* TO s_sup37601[2].*
                            DISPLAY p_array[3].* TO s_sup37601[3].*
                            DISPLAY p_array[4].* TO s_sup37601[4].*
                         END IF
                      END IF
                   END IF
                END IF
                #HERC
             END IF
          END IF
       END IF
       #801808


    AFTER FIELD cod_operacao
       CALL sup3760_botao_zoom("OFF",3,68)
       IF l_funcao = "MODIFICACAO" THEN
          IF p_dados_tela.cod_operacao <> m_cod_operacao_ant THEN
             IF (sup3760_verifica_cfop_avf_insp_ar(p_dados_tela.cod_operacao) = TRUE AND
                 sup3760_verifica_cfop_avf_insp_ar(m_cod_operacao_ant) = FALSE) OR
                (sup3760_verifica_cfop_avf_insp_ar(p_dados_tela.cod_operacao) = FALSE AND
                 sup3760_verifica_cfop_avf_insp_ar(m_cod_operacao_ant) = TRUE) THEN
                 CALL log0030_mensagem("Função não permitida. A troca para este CFOP afeta a inspeção (AVF/SUP).","exclamation")
                 LET p_dados_tela.cod_operacao = m_cod_operacao_ant
                 DISPLAY BY NAME p_dados_tela.cod_operacao
                 NEXT FIELD cod_operacao
             END IF
          END IF

          # CH 739942 - Rafael F. B. - 12/01/2010 #
          IF l_alt_cod_operacao THEN
             LET int_flag = 0
             EXIT INPUT
          END IF

       END IF
       IF p_dados_tela.dat_entrada_nf <= m_dat_fim_valid THEN
          IF m_cfop_nfr = "S" AND p_dados_tela.ies_especie_nf = "NFR" AND
             (p_dados_tela.cod_operacao[3,4] <> "99" AND
              p_dados_tela.cod_operacao[3,4] <> "92" AND
              p_dados_tela.cod_operacao[3,4] <> "93" AND
              p_dados_tela.cod_operacao[3,4] <> "94" AND
              p_dados_tela.cod_operacao[3,4] <> "21" AND
              p_dados_tela.cod_operacao[3,4] <> "22") THEN
             ERROR "CFOP invalido para notas de simples remessa."
             NEXT FIELD cod_operacao
          END IF
       ELSE
          IF m_cfop_nfr = "S" AND p_dados_tela.ies_especie_nf = "NFR" THEN
             INITIALIZE la_array_cfop TO NULL
             LET l_ind_cfop  = 1
             LET l_diferente = FALSE
             LET l_achou     = FALSE

             DECLARE cq_cfop CURSOR FOR
             SELECT par_txt[1,5]
               FROM par_sup_pad
              WHERE cod_empresa = p_cod_empresa
                AND cod_parametro[1,8] = "cfopnfr_"

             FOREACH cq_cfop INTO la_array_cfop[l_ind_cfop].cod_fiscal
                IF p_dados_tela.cod_operacao <> la_array_cfop[l_ind_cfop].cod_fiscal THEN
                   LET l_diferente = TRUE
                ELSE
                   LET l_achou = TRUE
                   EXIT FOREACH
                END IF
                LET l_ind_cfop = l_ind_cfop + 1
             END FOREACH

             IF l_diferente = TRUE  AND l_achou = FALSE THEN
                ERROR "CFOP invalido para notas de simples remessa."
                NEXT FIELD cod_operacao
             END IF
          END IF
       END IF

       IF p_dados_tela.ies_especie_nf = "NFR" AND
          p_dados_tela.ies_nf_aguard_nfe = "A" THEN
          IF NOT sup3760_verifica_necessita_pc(p_dados_tela.cod_fornecedor,
                                               p_dados_tela.cod_operacao,
                                               "A") THEN
             CALL log0030_mensagem("Fornecedor não permite entrada sem pedido de compra","info")
             NEXT FIELD cod_fornecedor
          END IF
       END IF
       IF p_dados_tela.ies_especie_nf = "NFR" AND
          p_dados_tela.ies_nf_aguard_nfe = "B" THEN
          IF NOT sup3760_verifica_necessita_pc(p_dados_tela.cod_fornecedor,
                                               p_dados_tela.cod_operacao,
                                               "B") THEN
             CALL log0030_mensagem("Fornecedor não permite entrada sem pedido de compra","info")
             NEXT FIELD cod_fornecedor
          END IF
       END IF
       IF p_dados_tela.ies_especie_nf    = "NFS"
          OR p_dados_tela.ies_especie_nf = "REC"
          OR p_dados_tela.ies_especie_nf = "DOC" THEN
          IF m_cfop_nfs = "S" AND
             (p_dados_tela.cod_operacao IS NULL OR
              p_dados_tela.cod_operacao = " " ) THEN
             ERROR "Informe CFOP para NFS."
             NEXT FIELD cod_operacao
          END IF
          IF m_cfop_nfs = "N" AND
             p_dados_tela.cod_operacao IS NOT NULL AND
             p_dados_tela.cod_operacao[1] <>  " " THEN
             LET p_dados_tela.cod_operacao = " "
             DISPLAY BY NAME p_dados_tela.cod_operacao
             ERROR "CFOP para NFS deve ser nulo."
             NEXT FIELD cod_operacao
          END IF
       END IF

          ### Consistencia esta apos o CFOP compl.
          {IF p_dados_tela.ies_nf_aguard_nfe = "D" THEN
             IF m_ies_obj_entrada = "99" AND
                p_dados_tela.ies_especie_nf    = "NFR" THEN
             ELSE
                ERROR "Tipo D deve ser usado para Notas de Especie NFR e grupo despesa '99'."
                NEXT FIELD ies_especie_nf
             END IF
          END IF}

       IF p_dados_tela.cod_operacao[1] IS NULL OR
          p_dados_tela.cod_operacao[1] = " " THEN
          LET p_dados_tela.cod_operacao = "    "
          IF p_dados_tela.ies_especie_nf <> "NFS"
         AND p_dados_tela.ies_especie_nf <> "REC"
         AND p_dados_tela.ies_especie_nf <> "DOC" THEN
             ERROR "Informe Codigo de operacao "
             NEXT FIELD cod_operacao
          END IF
       ELSE
          IF p_dados_tela.cod_operacao[1] NOT MATCHES "[567]" THEN
             ERROR "Codigo de operacao invalido"
             NEXT FIELD cod_operacao
          END IF
          IF p_dados_tela.cod_operacao[2] <> "." THEN
             ERROR "Codigo de operacao invalido"
             NEXT FIELD cod_operacao
          END IF
          IF p_dados_tela.cod_operacao[3] NOT MATCHES "[1234567890]" THEN
             ERROR "Codigo de operacao invalido"
             NEXT FIELD cod_operacao
          END IF
          IF p_dados_tela.cod_operacao[4] NOT MATCHES "[1234567890]" THEN
             ERROR "Codigo de operacao invalido"
             NEXT FIELD cod_operacao
          END IF

          IF m_dat_fim_valid IS NOT NULL AND m_dat_fim_valid >= p_dados_tela.dat_entrada_nf
          THEN
             LET p_dados_tela.cod_operacao[5] = " "
             DISPLAY BY NAME p_dados_tela.cod_operacao
          ELSE
            IF p_dados_tela.cod_operacao[5] NOT MATCHES "[0-9]"
            THEN
              ERROR "Codigo de operacao invalido"
              NEXT FIELD cod_operacao
            END IF
          END IF
          IF sup376_verifica_cod_operacao() = FALSE THEN
             ERROR "Codigo de operacao nao cadastrado"
             NEXT FIELD cod_operacao
          END IF

          LET p_nfe_import = FALSE
          LET p_nfm_import = FALSE
          IF (p_par_sup_compl.ies_mod_importacao = "L" OR
              p_par_sup_compl.ies_mod_importacao = "S") AND
              l_funcao = "INCLUSAO" THEN
             LET m_num_processo = p_dados_tela.num_nf
             LET m_nfr_import   = FALSE
             IF p_dados_tela.cod_operacao[1] = "7" THEN
                IF p_cod_pais_emp <> p_fornecedor.cod_pais AND
                  (p_dados_tela.ies_especie_nf = "NFE" OR
                   p_dados_tela.ies_especie_nf = "NFP" ) THEN
                   #----------------nfe/nfp_importacao--------------#
                   IF NOT sup3760_processo_importacao("NFE/NFP") THEN
                      NEXT FIELD num_nf
                   END IF
                ELSE
                   IF p_cod_pais_emp <> p_fornecedor.cod_pais AND
                      p_dados_tela.ies_especie_nf = "NFM" THEN
                      #----------------nfm_importacao--------------#
                      IF NOT sup3760_processo_importacao("NFM") THEN
                         NEXT FIELD num_nf
                      END IF
                   END IF
                END IF
             ELSE
                IF sup3760_nfr_consignatario("INCLUSAO") THEN
                   #----------------nfr_importacao--------------#
                   IF NOT sup3760_processo_importacao("NFR") THEN
                      NEXT FIELD num_nf
                   END IF
                END IF
             END IF
          END IF
       END IF
       IF p_dados_tela.cod_operacao[5] <> " " THEN
          IF m_cfop_compl_dic_se = 'N' THEN  # OS 409509 NIARA #
             LET p_dados_tela.cod_fiscal_compl = 0
          END IF
           INITIALIZE l_status, p_ies_tip_entrada, m_ies_obj_entrada TO NULL
         CALL sup0686_retorna_tip_obj_entrada(p_dados_tela.cod_operacao,
                                              p_dados_tela.cod_fiscal_compl)
                                              RETURNING l_status,
                                                        p_ies_tip_entrada,
                                                        m_ies_obj_entrada
          DISPLAY BY NAME p_dados_tela.cod_fiscal_compl
       END IF

       IF m_consistir_oc_estrutura = "S" THEN
          INITIALIZE l_ies_tip_entrada TO NULL
          CALL sup0686_retorna_tipo_entrada(p_dados_tela.cod_operacao, 0)
               RETURNING p_status, l_ies_tip_entrada

          IF l_ies_tip_entrada = "4" THEN
             FOR l_ind = 1 TO 999
                IF p_array_compl[l_ind].num_oc IS NOT NULL THEN
                   LET l_possui_compon = 0
                   WHENEVER ERROR CONTINUE
                   SELECT COUNT(*)
                     INTO l_possui_compon
                     FROM estrut_ordem_sup
                    WHERE cod_empresa   = p_cod_empresa
                      AND num_oc        = p_array_compl[l_ind].num_oc
                   WHENEVER ERROR STOP

                   IF sqlca.sqlcode <> 0
                   OR l_possui_compon IS NULL THEN
                      LET l_possui_compon = 0
                   END IF

                   IF l_possui_compon = 0 THEN
                      LET l_msg = "Ordem de compra ", p_array_compl[l_ind].num_oc USING "<<<<<<<<&", " não possui componentes cadastrados."
                      CALL log0030_mensagem(l_msg,"info")
                      NEXT FIELD cod_fornecedor
                   END IF
                ELSE
                   EXIT FOR
                END IF
             END FOR
          END IF
       END IF
       #TUPY
       IF m_altera_cndpgto_mod_nf_transito = 'N' AND
          p_dados_tela.ies_especie_nf = 'NFP' THEN
          IF p_dados_tela.cod_operacao[1] = "7" THEN
             IF p_cod_pais_emp <> p_fornecedor.cod_pais AND
                p_dados_tela.ies_especie_nf = "NFP"  THEN
                IF p_processo_imp.num_processo IS NOT NULL AND
                   p_processo_imp.num_processo <> ' ' THEN
                   CALL sup3760_busca_mod_emb_oc()
                      RETURNING p_dados_tela.cod_mod_embar
                   DISPLAY BY NAME p_dados_tela.cod_mod_embar
                   IF sup376_verifica_mod_embar() THEN
                      CALL log0030_mensagem("Modo de embarque da OC vinculada ao processo não cadastrado.","info")
                      NEXT FIELD ies_especie_nf
                   END IF
                END IF
             END IF
          END IF
       END IF

       IF LOG_existe_epl("supy163_verifica_cliente") THEN
          INITIALIZE l_ies_tip_entrada TO NULL
          CALL sup0686_retorna_tipo_entrada(p_dados_tela.cod_operacao, 0)
               RETURNING p_status, l_ies_tip_entrada

          IF l_ies_tip_entrada = "4" THEN
             FOR l_ind = 1 TO 999
                IF p_array_compl[l_ind].num_oc IS NOT NULL THEN
                   LET l_possui_compon = 0
                   WHENEVER ERROR CONTINUE
                   SELECT COUNT(*)
                     INTO l_possui_compon
                     FROM estrut_ordem_sup
                    WHERE cod_empresa   = p_cod_empresa
                      AND num_oc        = p_array_compl[l_ind].num_oc
                   WHENEVER ERROR STOP

                   IF sqlca.sqlcode <> 0
                   OR l_possui_compon IS NULL THEN
                      LET l_possui_compon = 0
                   END IF

                   IF l_possui_compon = 0 THEN
                      LET l_msg = "Ordem de compra ", p_array_compl[l_ind].num_oc USING "<<<<<<<<&", " não possui componentes cadastrados."
                      CALL log0030_mensagem(l_msg,"info")
                      NEXT FIELD cod_fornecedor
                   END IF

                   WHENEVER ERROR CONTINUE
                   SELECT 1
                     FROM fornecedor, empresa
                    WHERE fornecedor.cod_fornecedor = p_dados_tela.cod_fornecedor
                      AND empresa.num_cgc           = fornecedor.num_cgc_cpf
                      AND (empresa.cod_empresa NOT IN(SELECT cod_empresa FROM empresa_transf)
                        AND empresa.cod_empresa NOT IN(SELECT cod_empresa_transf FROM empresa_transf))
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 OR sqlca.sqlcode = -284 THEN
                   ELSE
                      #CALL log0030_mensagem("CNPJ do fornecedor não cadastrado na empresa ou o código da empresa é de transferência.","info")
                      #NEXT FIELD cod_fornecedor
                      CONTINUE FOR
                   END IF

                   WHENEVER ERROR CONTINUE
                    SELECT 1
                      FROM sup_rec_oc
                     WHERE sup_rec_oc.empresa              = p_cod_empresa
                       AND sup_rec_oc.nota_fiscal          = p_dados_tela.num_nf
                       AND sup_rec_oc.serie_nota_fiscal    = p_dados_tela.ser_nf
                       AND sup_rec_oc.subserie_nota_fiscal = p_dados_tela.ssr_nf
                       AND sup_rec_oc.especie_nota_fiscal  = p_dados_tela.ies_especie_nf
                       AND sup_rec_oc.fornecedor           = p_dados_tela.cod_fornecedor
                    WHENEVER ERROR STOP
                    IF sqlca.sqlcode = 100 THEN
                       LET l_msg = "Ordem de compra ", p_array_compl[l_ind].num_oc USING "<<<<<<<<&", " não está relacionada no SUP8028."
                      CALL log0030_mensagem(l_msg,"info")
                       NEXT FIELD cod_fornecedor
                    END IF

                    WHENEVER ERROR CONTINUE
                     SELECT 1
                       FROM sup_recebto_ficha
                      WHERE sup_recebto_ficha.empresa              = p_cod_empresa
                        AND sup_recebto_ficha.nota_fiscal          = p_dados_tela.num_nf
                        AND sup_recebto_ficha.serie_nota_fiscal    = p_dados_tela.ser_nf
                        AND sup_recebto_ficha.subserie_nota_fiscal = p_dados_tela.ssr_nf
                        AND sup_recebto_ficha.especie_nota_fiscal  = p_dados_tela.ies_especie_nf
                        AND sup_recebto_ficha.fornecedor           = p_dados_tela.cod_fornecedor
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode = 100 THEN
                        CALL log0030_mensagem("Informar os seriais desta nota no SUP8028.","info")
                        NEXT FIELD cod_fornecedor
                     END IF
                ELSE
                   EXIT FOR
                END IF
             END FOR
          END IF
       END IF

      BEFORE FIELD cod_fiscal_compl
         CALL sup3760_botao_zoom("OFF",3,68)

      AFTER FIELD cod_fiscal_compl
        IF m_cfop_compl_dic_se = 'N' THEN # OS 409509 NIARA #
           IF p_dados_tela.cod_operacao[5] <> " " AND
              p_dados_tela.cod_fiscal_compl <> 0 THEN
              LET p_dados_tela.cod_fiscal_compl = 0
              DISPLAY BY NAME p_dados_tela.cod_fiscal_compl
           END IF
        END IF

        IF p_dados_tela.ies_nf_aguard_nfe = "D" THEN
           IF m_ies_obj_entrada = "99" AND p_dados_tela.ies_especie_nf = "NFR" THEN
           ELSE
              ERROR "Tipo D deve ser usado para Notas de Especie NFR e grupo despesa '99'"
              NEXT FIELD ies_especie_nf
           END IF
        END IF

        IF (p_qtd_dig_cfop = 0 OR p_qtd_dig_cfop IS NULL) THEN  #aceita 0
           IF p_dados_tela.cod_fiscal_compl IS NULL OR
              p_dados_tela.cod_fiscal_compl = " " THEN
              LET p_dados_tela.cod_fiscal_compl = 0
           END IF
        ELSE   #se o parametro for 1 ou 2
           IF p_dados_tela.dat_entrada_nf <= m_dat_fim_valid THEN
              ### Ainda nao converteu a COD_FISCAL_SUP
              IF m_ies_obj_entrada = "99" AND
                 p_dados_tela.cod_operacao[1,1] <> "7" THEN
                 IF p_dados_tela.cod_fiscal_compl IS NULL OR
                    p_dados_tela.cod_fiscal_compl = " "   OR
                    p_dados_tela.cod_fiscal_compl = 0     THEN
                    ERROR " O Codigo Fiscal Complementar deve ser informado de 1 a 99, no caso de x.99 "
                    NEXT FIELD cod_fiscal_compl
                 END IF
              END IF
           END IF

           IF p_dados_tela.cod_fiscal_compl IS NULL OR
              p_dados_tela.cod_fiscal_compl = " " THEN
              LET p_dados_tela.cod_fiscal_compl = 0
           END IF
        END IF
        # fim OS 147050

        INITIALIZE l_status, p_ies_tip_entrada, m_ies_obj_entrada TO NULL
         CALL sup0686_retorna_tip_obj_entrada(p_dados_tela.cod_operacao,
                                              p_dados_tela.cod_fiscal_compl)
                                              RETURNING l_status,
                                                        p_ies_tip_entrada,
                                                        m_ies_obj_entrada
         IF  (p_dados_tela.ies_especie_nf = "NFS"
         OR   p_dados_tela.ies_especie_nf = "REC"
         OR   p_dados_tela.ies_especie_nf = "DOC")
         AND (p_dados_tela.cod_operacao IS NULL OR
              p_dados_tela.cod_operacao = " ")
         AND  m_cfop_nfs = "N" THEN
         ELSE
            IF l_status = FALSE THEN
               ERROR " Codigo fiscal nao cadastrado na COD_FISCAL_SUP. Ver SUP0600 "
               NEXT FIELD cod_operacao
            END IF
         END IF

        IF p_dados_tela.ies_especie_nf = "CON" AND
           m_ies_obj_entrada <> "7" THEN
           ERROR " CFOP nao cadastrado como frete. Verifica obejtivo deve ser igual a '7'"
           NEXT FIELD cod_operacao
        END IF

        IF NOT sup3760_verifica_cadastro_sup1785(l_funcao, l_cod_fisc_ant) THEN #O.S. 550997
           NEXT FIELD cod_operacao
        END IF

        ### OS 144076
        IF p_dados_tela.cod_operacao[1] = "5" THEN
           LET p_cod_fiscal_c = "1.",p_dados_tela.cod_operacao[3,5]
        END IF
        IF p_dados_tela.cod_operacao[1] = "6" THEN
           LET p_cod_fiscal_c = "2.",p_dados_tela.cod_operacao[3,5]
        END IF
        IF p_dados_tela.cod_operacao[1] = "7" THEN
           LET p_cod_fiscal_c = "3.",p_dados_tela.cod_operacao[3,5]
        END IF

######## OS 278154
         IF l_funcao = "INCLUSAO"  AND
           (p_dados_tela.ies_especie_nf = "NFD" OR              #eduardo o.s.301125
           (p_ies_tip_entrada = "5"             AND
            p_dados_tela.ies_especie_nf <> "NFC")) THEN
            ### Na inclusao ainda nao tem o cod_operacao antes da operacao
            ### de estoque, ainda nao foi digitado.
            CALL sup376_busca_operacao_estoque("DEV")
            IF p_ies_cod_operac = "S" THEN
               DISPLAY BY NAME p_dados_tela.cod_operac_estoq
            END IF
         END IF

         IF p_par_estoque.ies_modulo_vdp = "S" THEN
            IF g_ies_transf_benef = FALSE OR
               g_ies_transf_benef IS NULL THEN
               IF p_ies_cod_operac IS NULL OR
                  p_ies_cod_operac = "N" OR
                  p_ies_cod_operac = " " THEN
                  LET p_dados_tela.cod_operac_estoq = p_dados_telar.cod_operac_estoq
               END IF
            END IF

            IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                   p_dados_tela.num_aviso_rec,
                                                   p_dados_tela.num_nf,
                                                   p_dados_tela.ser_nf,
                                                   p_dados_tela.ssr_nf,
                                                   p_dados_tela.cod_fornecedor,
                                                   p_dados_tela.cod_operacao,
                                                   p_dados_tela.cod_fiscal_compl) = TRUE AND
               p_dados_tela.cod_operacao[1,1] <> "3" THEN
               IF p_ies_tip_entrada <> "2" THEN
                  ERROR " Para NF de transferencia entre unidades o CFOP deve ser do tipo TRANSFERENCIA."
                  NEXT FIELD cod_operacao
               END IF
               LET p_ies_orig_oper = NULL
               SELECT estoque_operac.ies_origem
                 INTO p_ies_orig_oper
                 FROM estoque_operac
                WHERE estoque_operac.cod_empresa  = p_cod_empresa
                  AND estoque_operac.cod_operacao = p_dados_tela.cod_operac_estoq
               IF p_ies_orig_oper <> "T"  THEN
                  ERROR " Operacao de estoque ",p_dados_tela.cod_operac_estoq," nao e' TRANSFERENCIA. "
                  NEXT FIELD cod_operacao
               END IF
            END IF
            ##### Fim rotina transferencia
         ELSE
            LET m_transf_ativo_imob = FALSE
            IF p_ies_obt_inf_com = "S" AND
               l_funcao = "INCLUSAO"  THEN
               IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                      p_dados_tela.num_aviso_rec,
                                                      p_dados_tela.num_nf,
                                                      p_dados_tela.ser_nf,
                                                      p_dados_tela.ssr_nf,
                                                      p_dados_tela.cod_fornecedor,
                                                      p_dados_tela.cod_operacao,
                                                      p_dados_tela.cod_fiscal_compl) = TRUE THEN
                  IF g_ies_tip_controle = "J" OR
                     g_ies_tip_controle = "I" THEN  #eduardo o.s.290535
                     ERROR " NF de TRANSF.DE IMOBILIZADO ENTRE UNIDADES, com origem da empresa ",p_cod_emp_transf,". "
                  ELSE
                     ERROR " Nota Fiscal de TRANSFERENCIA ENTRE UNIDADES, com origem da empresa ",p_cod_emp_transf,". "
                  END IF
                  IF log004_confirm(14,42) = TRUE THEN
                     ### Parametro Lorezentti OS228406
                     IF m_transf_estoq = "S" THEN
                        ERROR " Movimentar estoque ??? "
                        IF sup0769_confirm(14,42) = FALSE THEN
                           LET m_ind_transf_estoq = TRUE
                        END IF
                     END IF

                     ### OS 154880 ###
                     IF g_ies_tip_controle = "J" OR
                        g_ies_tip_controle = "I" THEN  #eduardo o.s.290535
                        LET m_transf_ativo_imob = TRUE
                     END IF
                     ### FIM OS 154880 ###

                     CALL sup376_busca_operacao_estoque("TRANSF")
                     IF p_ies_cod_operac = "S" THEN
                        DISPLAY BY NAME p_dados_tela.cod_operac_estoq
                     END IF

                     LET int_flag = FALSE
                     LET l_cond_pedido = " "
                     #eduardo o.s.335542
                     IF p_entrou_pedido = "S" THEN
                        WHENEVER ERROR CONTINUE
                        SELECT cnd_pgto
                          FROM cond_pgto_cap
                         WHERE cnd_pgto      = p_dados_tela.cnd_pgto_nf
                           AND ies_pagamento = "3"
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode = 0 THEN
                           LET l_cond_pedido = "3"
                        ELSE
                           LET l_cond_pedido = "2"
                        END IF
                     END IF

                     IF p_entrou_pedido = "N" OR l_cond_pedido <> "3" THEN
                        ### OS 511148
                        CALL sup3762_busca_cnd_pgto_nf()
                     END IF
                     IF sup376_verifica_cnd_pgto() THEN
                     END IF
                     NEXT FIELD dat_emis_nf
                  ELSE
                     LET p_ies_nf_transf = FALSE
                     IF m_ent_manual_transf = "N" THEN #OS372636
                        LET int_flag = TRUE
                        EXIT INPUT
                     END IF
                     WHENEVER ERROR CONTINUE
                     INSERT INTO sup_par_ar (empresa, aviso_recebto, seq_aviso_recebto,
                                             parametro, par_ind_especial, parametro_texto,
                                             parametro_val, parametro_dat)
                                     VALUES (p_cod_empresa, p_dados_tela.num_aviso_rec, "1",
                                             "transf_unid_manual", NULL, p_user, NULL, TODAY)
                     WHENEVER ERROR STOP
                  END IF
               END IF
            END IF
         END IF

       # 534641
       IF FGL_LASTKEY() <> FGL_KEYVAL("UP") AND
          FGL_LASTKEY() <> FGL_KEYVAL("LEFT") THEN
          CALL sup3760_verifica_sup_fornec(p_dados_tela.cod_fornecedor,
                                           p_dados_tela.cod_operacao)
             RETURNING l_tipo
          IF l_tipo <> p_dados_tela.ies_nf_aguard_nfe AND
             p_dados_tela.ies_especie_nf = "NFR" THEN
             IF NOT sup3760_verifica_fornec_depos(p_dados_tela.cod_fornecedor) THEN
                IF l_tipo = "A" THEN
                   IF NOT find4GLFunction('supy160_cliente_318') THEN
                      CALL log0030_mensagem('Fornecedor/CFOP de NFR tipo A com origem fornecedor.','info')
                      #OS558302
                      IF p_dados_tela.ies_nf_aguard_nfe = 'T' THEN
                         IF log0040_confirm(0,0, "Deseja alterar tipo da nota para A ?") THEN
                            LET p_dados_tela.ies_nf_aguard_nfe = "A"
                         ELSE
                            LET p_dados_tela.ies_nf_aguard_nfe = "T"
                         END IF
                      ELSE
                         LET p_dados_tela.ies_nf_aguard_nfe = "A"
                      END IF
                      DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
                   END IF
                   #FIM OS558302
                END IF
             END IF
             IF l_tipo = "B" THEN
                IF NOT find4GLFunction('supy160_cliente_318') THEN
                   #IF log0040_confirm(0,0, "Nota fiscal tipo B. Confirma?") THEN
                   CALL log0030_mensagem('Fornecedor/CFOP de NFR tipo B com origem depositante.','info')
                   LET p_dados_tela.ies_nf_aguard_nfe = "B"
                   DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
                   #END IF
                END IF
             END IF
          END IF
          IF  p_dados_tela.ies_especie_nf    = "NFR"
          AND p_dados_tela.ies_nf_aguard_nfe = "A" THEN
             IF log0150_verifica_se_tabela_existe("sup_fornec_tri_ter") THEN
                LET l_count = 0
                WHENEVER ERROR CONTINUE
                SELECT COUNT(*)
                  INTO l_count
                  FROM sup_fornec_tri_ter
                 WHERE empresa = p_cod_empresa
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0
                OR l_count IS NULL THEN
                   LET l_count = 0
                END IF
                IF l_count > 0 THEN
                   LET l_cod_fiscal = p_dados_tela.cod_operacao[3,5]
                   WHENEVER ERROR CONTINUE
                   SELECT fornec_depositante
                     FROM sup_fornec_tri_ter
                    WHERE empresa         = p_cod_empresa
                      AND fornecedor      = p_dados_tela.cod_fornecedor
                      AND cod_fisc_fornec = l_cod_fiscal
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 100 THEN
                      CALL log0030_mensagem('Fornecedor/CFOP não cadastrado no programa de triangulação (SUP1648).','exclamation')
                      NEXT FIELD cod_fornecedor
                   END IF
                END IF
             END IF
          END IF
          IF  p_dados_tela.ies_especie_nf    = "NFR"
          AND p_dados_tela.ies_nf_aguard_nfe = "B" THEN
             IF log0150_verifica_se_tabela_existe("sup_fornec_tri_ter") THEN
                LET l_count = 0
                WHENEVER ERROR CONTINUE
                SELECT COUNT(*)
                  INTO l_count
                  FROM sup_fornec_tri_ter
                 WHERE empresa = p_cod_empresa
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0
                OR l_count IS NULL THEN
                   LET l_count = 0
                END IF
                IF l_count > 0 THEN
                   LET l_cod_fiscal = p_dados_tela.cod_operacao[3,5]
                   WHENEVER ERROR CONTINUE
                   SELECT fornec_depositante
                     FROM sup_fornec_tri_ter
                    WHERE empresa            = p_cod_empresa
                      AND fornec_depositante = p_dados_tela.cod_fornecedor
                      AND cod_fisc_depos     = l_cod_fiscal
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 100 THEN
                      CALL log0030_mensagem('Fornecedor/CFOP não cadastrado no programa de triangulação como depositante (SUP1648).','exclamation')
                      NEXT FIELD cod_fornecedor
                   END IF
                END IF
             END IF
          END IF

       END IF
      # 534641

      IF FGL_LASTKEY() <> FGL_KEYVAL("UP") AND
         FGL_LASTKEY() <> FGL_KEYVAL("LEFT") THEN
         CALL sup3760_verifica_sup_fornec(p_dados_tela.cod_fornecedor,
                                          p_dados_tela.cod_operacao)
            RETURNING l_tipo
         #_#
         CALL sup3760_verifica_tipo(l_tipo)
         #_#

         CALL sup3760_verifica_cadastro_triangulacao_depositante()
              RETURNING p_status

         CASE p_status
         WHEN 0 NEXT FIELD cod_fornecedor
         WHEN 2 NEXT FIELD ies_nf_aguard_nfe
         END CASE
      END IF

    BEFORE FIELD dat_emis_nf
       #--inicio--OS 595717 #
       IF find4GLFunction("supy117_consiste_nota_fiscal_transito") THEN
          IF l_funcao = "MODIFICACAO"  AND
             m_nf_eletronica_impr = TRUE THEN
             IF supy117_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                                      p_nf_sup.ies_especie_nf) = TRUE  THEN

                IF fgl_lastkey() = fgl_keyval("UP")   OR
                   fgl_lastkey() = fgl_keyval("LEFT") THEN
                   NEXT FIELD ies_nf_aguard_nfe
               ELSE
                  NEXT FIELD dat_entrada_nf
               END IF
             END IF
          END IF
       ELSE
          IF l_funcao = "MODIFICACAO"  AND
             m_nf_eletronica_impr = TRUE THEN
             IF sup3760_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                                      p_nf_sup.cod_operacao) = FALSE  THEN
             ELSE
                IF fgl_lastkey() = fgl_keyval("UP")   OR
                   fgl_lastkey() = fgl_keyval("LEFT") THEN
                   NEXT FIELD ies_nf_aguard_nfe
                ELSE
                   NEXT FIELD dat_entrada_nf
                END IF
             END IF
          END IF
       END IF
       #---fim----OS 595717 #

       CALL sup3760_botao_zoom("OFF",3,68)
       IF m_gera_rsv_transf = "S" AND
          p_dados_tela.ies_nf_aguard_nfe = "8" AND
          p_array_compl[1].num_oc IS NOT NULL THEN
          ### BUSCA O PEDIDO DE VENDA ORIGEM QUE GEROU O PEDIDO/OC
          ### PARA EMPRESA LABRATOS
          FOR l_ind = 1 TO 999
             IF p_array_compl[l_ind].num_oc IS NULL THEN
                CONTINUE FOR
             END IF
             WHENEVER ERROR CONTINUE
          SELECT num_pedido_fornec
               INTO m_num_ped_fornec
            FROM prog_ordem_sup
           WHERE cod_empresa      = p_cod_empresa
             AND num_oc           = p_array_compl[1].num_oc
             AND num_versao       = 001
             AND num_prog_entrega = 001
             WHENEVER ERROR STOP

             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("SELECAO","PROG_ORDEM_SUP")
             END IF
             LET m_pedido_venda = m_num_ped_fornec[1,6]

          IF sup3760_busca_ped_venda() THEN
          ELSE
             RETURN FALSE
          END IF

             IF m_pedido_venda =  m_pedido_venda1 THEN
             ELSE
                MESSAGE " Pedido ",p_array_compl[l_ind].num_pedido CLIPPED ," nao corresponde a nenhum pedido da NF origem " ATTRIBUTE(reverse)
                SLEEP 2
                LET l_houve_erro = TRUE
                EXIT INPUT
             END IF
          END FOR
       END IF

    AFTER FIELD dat_emis_nf
       LET p_seta = "DOWN"
       IF p_dados_tela.dat_emis_nf IS NOT NULL THEN
          IF p_dados_tela.dat_emis_nf > TODAY THEN
             ERROR " Data emissao Nota Fiscal nao pode ser maior que data atual "
             NEXT FIELD dat_emis_nf
          END IF
          IF p_cons_data = TRUE THEN
             IF p_dados_tela.dat_emis_nf < (TODAY - p_qtd_dias_emis_doc) THEN
                ERROR "Data de emissao menor que data atual menos qtd. dias de emissao do parametro."
                NEXT FIELD dat_emis_nf
             END IF
          END IF
          IF l_funcao = "INCLUSAO" THEN
             IF m_valida_nf_frete_filiais = 'S' THEN
                 CALL sup3321_valida_nf_frete_existe(p_dados_tela.num_nf ,
                                                     p_dados_tela.ser_nf ,
                                                     p_dados_tela.ssr_nf,
                                                     p_dados_tela.cod_fornecedor,
                                                     p_dados_tela.dat_emis_nf,
                                                     1,
                                                     FALSE)
                 RETURNING l_status,l_msg
                 IF NOT l_status THEN
                    IF fgl_lastkey() <> fgl_keyval("UP")     AND
                      fgl_lastkey() <> fgl_keyval("LEFT")   THEN
                      CALL log0030_mensagem(l_msg CLIPPED,"excl")
                      NEXT FIELD dat_emis_nf
                    END IF
                 END IF
             END IF
          END IF
          IF l_funcao = "MODIFICACAO" AND
             p_dados_tela.dat_emis_nf <> l_dat_emis_ant THEN
             IF sup3762_verifica_impostos_ja_pagos() THEN
                NEXT FIELD dat_emis_nf
             END IF
          END IF
       ELSE
          ERROR " Digite a data de emissao da nota fiscal. "
          NEXT FIELD dat_emis_nf
       END IF

       #--inicio--OS 607387 #
       IF sup3760_valida_nf_cadastrada() = TRUE THEN
          IF fgl_lastkey() <> fgl_keyval("UP")     AND
             fgl_lastkey() <> fgl_keyval("LEFT")   THEN
             NEXT FIELD dat_emis_nf
          END IF
       END IF

       CALL log006_exibe_teclas("01 02 03 07",p_versao)
            CURRENT WINDOW IS w_sup37601
       #---fim----OS 607387 #

       #--# 796313 - Espindola - Projeto Totvs Colaboracao #--#
       IF l_funcao = "INCLUSAO" THEN
          IF m_utiliz_totvs_colab = "S" THEN
             CALL sup13429_existe_docum_pendente(p_dados_tela.cod_empresa,    p_dados_tela.num_nf,
                                                 p_dados_tela.ser_nf,         p_dados_tela.ssr_nf,
                                                 p_dados_tela.cod_fornecedor, p_dados_tela.dat_emis_nf)
                  RETURNING p_status, m_msg, comando3

             #--# Pendente de inclusao via Totvs Colaboracao
             IF p_status = 1 THEN
                IF log0040_confirm(5,10,m_msg) THEN
                   #--# Chama funcionalidade de importacao de documento
                   CALL sup13430_importa_documento(comando3, TRUE, "sup3760")
                   #--# Consiste situação do documento após importação
                   CALL sup13429_existe_docum_pendente(p_dados_tela.cod_empresa,    p_dados_tela.num_nf,
                                                       p_dados_tela.ser_nf,         p_dados_tela.ssr_nf,
                                                       p_dados_tela.cod_fornecedor, p_dados_tela.dat_emis_nf)
                        RETURNING p_status, m_msg, comando3
                   #--# Pendente de inclusao via Totvs Colaboracao
                   IF p_status = 1 THEN
                      CALL log0030_mensagem("Nota Fiscal não importada. Verificar erros no Monitor de Integração","exclamation")
                      RETURN FALSE
                   END IF
                   IF p_status = 3 THEN
                      LET p_cod_empresa_arg   = p_dados_tela.cod_empresa
                      LET p_num_aviso_rec_arg = comando3
                      CALL sup376_busca_argumen()
                      CALL log0030_mensagem("Nota Fiscal importada com sucesso. Para visualizar a NF importada utilizar a opção Consultar (modo inclusão será cancelado).","info")
                      RETURN FALSE
                   END IF
                END IF
             END IF

             #--# Somente mostra um alerta ao usuario
             IF p_status = 2 OR p_status = 3 THEN
                CALL log0030_mensagem(m_msg,'info')
             END IF
          END IF
       END IF
       #809554
       IF sup3760_existe_h_nf_sup(p_dados_tela.cod_empresa, p_dados_tela.num_nf, p_dados_tela.ser_nf,
                                  p_dados_tela.ssr_nf, p_dados_tela.ies_especie_nf, p_dados_tela.cod_fornecedor,
                                  p_dados_tela.dat_emis_nf) THEN  #809554
          CALL log0030_mensagem('Nota fiscal já cadastrada em histórico. Verifique no SUP6280.','stop')
          NEXT FIELD num_nf
       END IF
       #809554
    BEFORE FIELD dat_entrada_nf
       CALL sup3760_botao_zoom("OFF",3,68)
       IF l_funcao = "MODIFICACAO" THEN
          IF sup3760_verifica_inspecao() THEN
             IF p_seta = "DOWN" THEN
                NEXT FIELD cnd_pgto_nf
             ELSE
                NEXT FIELD dat_emis_nf
             END IF
          END IF
       END IF
       IF l_funcao = "INCLUSAO" THEN
          IF m_mes_fecha_01 = "S" THEN
             IF p_par_sup.dat_fecha_ultimo >= TODAY THEN
                LET p_dados_tela.dat_entrada_nf = p_par_sup.dat_fecha_ultimo + 1 UNITS DAY
                ### Verifica se eh um dia util
                LET l_ies_dia_semana = WEEKDAY(p_dados_tela.dat_entrada_nf)
                CASE l_ies_dia_semana
                   WHEN 0 #domingo
                      LET p_dados_tela.dat_entrada_nf = p_dados_tela.dat_entrada_nf + 1 UNITS DAY
                   WHEN 1 #segunda
                   WHEN 2 #terca
                   WHEN 3 #quarta
                   WHEN 4 #quinta
                   WHEN 5 #sexta
                   WHEN 6 #sabado
                      LET p_dados_tela.dat_entrada_nf = p_dados_tela.dat_entrada_nf + 2 UNITS DAY
                END CASE
                LET l_dat_ant = p_dados_tela.dat_entrada_nf
             END IF
          END IF
       ELSE
          LET l_dat_ant = p_dados_tela.dat_entrada_nf
       END IF

    AFTER FIELD dat_entrada_nf
       IF m_mes_fecha_01 = "S" AND
          p_par_sup.dat_fecha_ultimo >= TODAY THEN
          IF l_dat_ant <> p_dados_tela.dat_entrada_nf THEN
             LET p_dados_tela.dat_entrada_nf = l_dat_ant
             DISPLAY BY NAME p_dados_tela.dat_entrada_nf
             ERROR "Data de entrada não pode ser alterada. Mês com recebimento fechado."
          END IF
       ELSE
          IF p_dados_tela.dat_entrada_nf > TODAY THEN
             ERROR "Data da entrada não pode ser maior que data atual."
             NEXT FIELD dat_entrada_nf
          END IF
       END IF
       IF p_dados_tela.dat_emis_nf > p_dados_tela.dat_entrada_nf THEN
          ERROR "Data emissão Nota Fiscal não pode ser maior que data da entrada."
          NEXT FIELD dat_emis_nf
       END IF
       IF p_par_sup.qtd_dias_incl_nf IS NOT NULL THEN
          IF p_dados_tela.dat_entrada_nf <
             (TODAY + 1 - p_par_sup.qtd_dias_incl_nf) THEN
             ERROR "Data de entrada da Nota Fiscal inferior ao limite de tolerância do PAR_SUP."
             NEXT FIELD dat_entrada_nf
          END IF
       END IF
       IF p_dados_tela.dat_entrada_nf <= p_par_sup.dat_fecha_ult_ipi OR
          p_dados_tela.dat_entrada_nf <= p_par_sup.dat_fecha_ultimo THEN
          ERROR "Data entrada NF. deve ser maior que o último fechamento IPI/FISCAL."
          NEXT FIELD dat_entrada_nf
       END IF

       IF p_dados_tela.dat_entrada_nf IS NULL OR
          p_dados_tela.dat_entrada_nf = " " THEN
          ERROR "Informe a data de entrada da Nota Fiscal."
          NEXT FIELD dat_entrada_nf
       END IF

       IF m_empr_utiliz_mp66 = "R" THEN
          IF NOT sup3760_busca_pct_bc_pis("REDUCAO",0) THEN
             NEXT FIELD dat_entrada_nf
          END IF
       END IF

       IF m_transf_ativo_imob THEN
          #Ch 721708
          CALL log2250_busca_parametro(p_cod_emp_transf, "emp_trabalho_pat_centraliz")
             RETURNING m_emp_trabalha_com_patr, l_status
          #Ch 721708

          IF m_emp_trabalha_com_patr IS NULL OR
             m_emp_trabalha_com_patr = " " THEN

             CALL sup3764_transf_ativ_imob(p_cod_empresa,p_cod_emp_transf)
                  RETURNING p_status
             CASE p_status
             WHEN 0
                LET m_msg = " Problemas na transferencia do ativo imobilizado para empresa ",p_cod_empresa CLIPPED
                CALL log0030_mensagem(m_msg,"exclamation")
                SLEEP 2
                RETURN FALSE
             WHEN 2
                NEXT FIELD dat_entrada_nf
             END CASE
          ELSE
             LET l_mensagem = 'A empresa centralizadora de patrimônio ',m_emp_trabalha_com_patr,' está cadastrada. A transferência do inventário deverá ser efetuada manualmente no PAT0750.'
             CALL log0030_mensagem(l_mensagem,"excl")
          END IF
          #Ch 721708
       END IF

       IF sup1473_documento_em_periodo_fiscal_fechado(p_cod_empresa,
                                                      p_dados_tela.num_aviso_rec,
                                                      p_dados_tela.dat_entrada_nf,
                                                      "","","","","","AR") THEN
          CALL log0030_mensagem("Período fiscal de entradas já encerrado.","info")

          NEXT FIELD dat_entrada_nf
       END IF

       IF p_dados_tela.dat_entrada_nf <> m_dat_entrada_ant AND m_dat_entrada_ant IS NOT NULL THEN
          IF NOT sup3760_valida_alteracao_data_entrada_antes_corte() THEN
             NEXT FIELD dat_entrada_nf
          END IF
       END IF

       IF p_dados_tela.dat_entrada_nf <> m_dat_entrada_ant AND m_dat_entrada_ant IS NOT NULL THEN
          IF NOT sup3760_valida_alteracao_data_entrada_depois_corte() THEN
             NEXT FIELD dat_entrada_nf
          END IF
       END IF

       IF l_funcao = "MODIFICACAO" AND m_controla_gao = "S" THEN
          IF p_dados_telar.dat_entrada_nf <> p_dados_tela.dat_entrada_nf THEN
             IF NOT sup3760_permite_alteracao_gao() THEN
                CALL log0030_mensagem("Controle GAO ativo exclua Inspeção/Contagem antes de modificar a data de entrada. Após realize Inspeção/Contagem manual.","excl")
                LET p_dados_tela.dat_entrada_nf = p_dados_telar.dat_entrada_nf
                DISPLAY BY NAME p_dados_tela.dat_entrada_nf
                NEXT FIELD dat_entrada_nf
             END IF
          END IF
       END IF

       #--inicio--OS 595717 #
       IF find4GLFunction("supy117_consiste_nota_fiscal_transito") THEN
          IF l_funcao = "MODIFICACAO"      AND
              m_nf_eletronica_impr = TRUE  THEN
             IF supy117_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                                      p_nf_sup.ies_especie_nf) = TRUE  THEN

                IF fgl_lastkey() = fgl_keyval("UP")   OR
                   fgl_lastkey() = fgl_keyval("LEFT") THEN
                   NEXT FIELD ies_nf_aguard_nfe
               END IF
             END IF
          END IF
       ELSE
          IF l_funcao = "MODIFICACAO"      AND
             m_nf_eletronica_impr = TRUE  THEN
             IF sup3760_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                                      p_nf_sup.cod_operacao) = FALSE THEN

             ELSE
                IF fgl_lastkey() = fgl_keyval("UP")   OR
                   fgl_lastkey() = fgl_keyval("LEFT") THEN
                   NEXT FIELD ies_nf_aguard_nfe
               END IF
             END IF
          END IF
       END IF
       #---fim----OS 595717 #

       IF l_funcao = "MODIFICACAO" AND l_ies_nfe_emit = "S" THEN
          EXIT INPUT
       END IF

       IF m_tem_valid_fim THEN
          IF  (p_dados_tela.ies_especie_nf = "NFS"
          OR   p_dados_tela.ies_especie_nf = "REC"
          OR   p_dados_tela.ies_especie_nf = "DOC")
          AND  m_cfop_nfs = "N"
          AND (p_dados_tela.cod_operacao IS NULL
          OR   p_dados_tela.cod_operacao = " ") THEN
          ELSE
             IF p_dados_tela.dat_entrada_nf > m_dat_fim_valid AND
                p_dados_tela.cod_operacao[5] = " " THEN
                ERROR "CFOP inválido para período conforme nova legislação."
                NEXT FIELD cod_operacao
             END IF
          END IF

          IF p_dados_tela.dat_entrada_nf <= m_dat_fim_valid THEN
             IF m_cfop_nfr = "S" AND
                p_dados_tela.ies_especie_nf = "NFR" AND
                (p_dados_tela.cod_operacao[3,4] <> "99" AND
                 p_dados_tela.cod_operacao[3,4] <> "92" AND
                 p_dados_tela.cod_operacao[3,4] <> "93" AND
                 p_dados_tela.cod_operacao[3,4] <> "94" AND
                 p_dados_tela.cod_operacao[3,4] <> "21" AND
                 p_dados_tela.cod_operacao[3,4] <> "22") THEN
                ERROR "CFOP inválido para notas de simples remessa."
                NEXT FIELD cod_operacao
             END IF
          ELSE
             IF m_cfop_nfr = "S" AND p_dados_tela.ies_especie_nf = "NFR" THEN
                INITIALIZE l_cod_fiscal2 TO NULL
                LET l_diferente = FALSE
                LET l_achou = FALSE

                DECLARE cq_cfop1 CURSOR FOR
                SELECT par_txt[1,5]
                  FROM par_sup_pad
                 WHERE cod_empresa = p_cod_empresa
                   AND cod_parametro[1,8] = "cfopnfr_"

                WHENEVER ERROR CONTINUE
                FOREACH cq_cfop1 INTO l_cod_fiscal2
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("FOREACH CURSOR","CQ_CFOP1")
                END IF
                   IF p_dados_tela.cod_operacao <> l_cod_fiscal2 THEN
                      LET l_diferente = TRUE
                   ELSE
                      LET l_achou = TRUE
                      EXIT FOREACH
                   END IF
                END FOREACH

                IF l_diferente = TRUE  AND l_achou = FALSE THEN
                   ERROR "CFOP inválido para notas de simples remessa."
                   NEXT FIELD cod_operacao
                ELSE
                   IF l_diferente = FALSE AND l_achou = FALSE THEN
                      IF (p_dados_tela.cod_operacao[3,5] <> "151" AND
                         p_dados_tela.cod_operacao[3,5] <> "152" AND
                         p_dados_tela.cod_operacao[3,5] <> "552" AND
                         p_dados_tela.cod_operacao[3,5] <> "554" AND
                         p_dados_tela.cod_operacao[3,5] <> "555" AND
                         p_dados_tela.cod_operacao[3,5] <> "557" AND
                         p_dados_tela.cod_operacao[3,5] <> "901" AND
                         p_dados_tela.cod_operacao[3,5] <> "902" AND
                         p_dados_tela.cod_operacao[3,5] <> "903" AND
                         p_dados_tela.cod_operacao[3,5] <> "904" AND
                         p_dados_tela.cod_operacao[3,5] <> "905" AND
                         p_dados_tela.cod_operacao[3,5] <> "906" AND
                         p_dados_tela.cod_operacao[3,5] <> "907" AND
                         p_dados_tela.cod_operacao[3,5] <> "908" AND
                         p_dados_tela.cod_operacao[3,5] <> "909" AND
                         p_dados_tela.cod_operacao[3,5] <> "910" AND
                         p_dados_tela.cod_operacao[3,5] <> "911" AND
                         p_dados_tela.cod_operacao[3,5] <> "912" AND
                         p_dados_tela.cod_operacao[3,5] <> "913" AND
                         p_dados_tela.cod_operacao[3,5] <> "914" AND
                         p_dados_tela.cod_operacao[3,5] <> "915" AND
                         p_dados_tela.cod_operacao[3,5] <> "916" AND
                         p_dados_tela.cod_operacao[3,5] <> "917" AND
                         p_dados_tela.cod_operacao[3,5] <> "918" AND
                         p_dados_tela.cod_operacao[3,5] <> "919" AND
                         p_dados_tela.cod_operacao[3,5] <> "920" AND
                         p_dados_tela.cod_operacao[3,5] <> "921" AND
                         p_dados_tela.cod_operacao[3,5] <> "923" AND
                         p_dados_tela.cod_operacao[3,5] <> "924" AND
                         p_dados_tela.cod_operacao[3,5] <> "925" AND
                         p_dados_tela.cod_operacao[3,5] <> "949") THEN
                         ERROR "CFOP inválido para notas de simples remessa."
                         NEXT FIELD cod_operacao
                      END IF
                   END IF
                END IF
             END IF
          END IF
       ELSE
          IF p_dados_tela.dat_entrada_nf <= m_dat_fim_valid THEN
             IF m_cfop_nfr = "S" AND
                p_dados_tela.ies_especie_nf = "NFR" AND
                (p_dados_tela.cod_operacao[3,4] <> "99" AND
                 p_dados_tela.cod_operacao[3,4] <> "92" AND
                 p_dados_tela.cod_operacao[3,4] <> "93" AND
                 p_dados_tela.cod_operacao[3,4] <> "94" AND
                 p_dados_tela.cod_operacao[3,4] <> "21" AND
                 p_dados_tela.cod_operacao[3,4] <> "22") THEN
                CALL log0030_mensagem("CFOP inválido para notas de simples remessa.","exclamation")
                NEXT FIELD cod_operacao
             END IF
          ELSE
             IF m_cfop_nfr = "S" AND p_dados_tela.ies_especie_nf = "NFR" THEN
                INITIALIZE l_cod_fiscal2 TO NULL
                LET l_diferente = FALSE
                LET l_achou = FALSE

                WHENEVER ERROR CONTINUE
                DECLARE cq_cfop2 CURSOR FOR
                SELECT par_txt[1,5]
                  FROM par_sup_pad
                 WHERE cod_empresa = p_cod_empresa
                   AND cod_parametro[1,8] = "cfopnfr_"
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("DECLARE CURSOR","CQ_CFOP2")
                END IF
                WHENEVER ERROR CONTINUE
                FOREACH cq_cfop2 INTO l_cod_fiscal2
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("FOREACH CURSOR","CQ_CFOP2")
                END IF
                   IF p_dados_tela.cod_operacao <> l_cod_fiscal2 THEN
                      LET l_diferente = TRUE
                   ELSE
                      LET l_achou = TRUE
                      EXIT FOREACH
                   END IF
                END FOREACH

                IF l_diferente = TRUE  AND l_achou = FALSE THEN
                   ERROR "CFOP inválido para notas de simples remessa."
                   NEXT FIELD cod_operacao
                ELSE
                   IF l_diferente = FALSE AND l_achou = FALSE THEN
                      IF (p_dados_tela.cod_operacao[3,5] <> "151" AND
                          p_dados_tela.cod_operacao[3,5] <> "152" AND
                          p_dados_tela.cod_operacao[3,5] <> "552" AND
                          p_dados_tela.cod_operacao[3,5] <> "554" AND
                          p_dados_tela.cod_operacao[3,5] <> "555" AND
                          p_dados_tela.cod_operacao[3,5] <> "557" AND
                          p_dados_tela.cod_operacao[3,5] <> "901" AND
                          p_dados_tela.cod_operacao[3,5] <> "902" AND
                          p_dados_tela.cod_operacao[3,5] <> "903" AND
                          p_dados_tela.cod_operacao[3,5] <> "904" AND
                          p_dados_tela.cod_operacao[3,5] <> "905" AND
                          p_dados_tela.cod_operacao[3,5] <> "906" AND
                          p_dados_tela.cod_operacao[3,5] <> "907" AND
                          p_dados_tela.cod_operacao[3,5] <> "908" AND
                          p_dados_tela.cod_operacao[3,5] <> "909" AND
                          p_dados_tela.cod_operacao[3,5] <> "910" AND
                          p_dados_tela.cod_operacao[3,5] <> "911" AND
                          p_dados_tela.cod_operacao[3,5] <> "912" AND
                          p_dados_tela.cod_operacao[3,5] <> "913" AND
                          p_dados_tela.cod_operacao[3,5] <> "914" AND
                          p_dados_tela.cod_operacao[3,5] <> "915" AND
                          p_dados_tela.cod_operacao[3,5] <> "916" AND
                          p_dados_tela.cod_operacao[3,5] <> "917" AND
                          p_dados_tela.cod_operacao[3,5] <> "918" AND
                          p_dados_tela.cod_operacao[3,5] <> "919" AND
                          p_dados_tela.cod_operacao[3,5] <> "920" AND
                          p_dados_tela.cod_operacao[3,5] <> "921" AND
                          p_dados_tela.cod_operacao[3,5] <> "923" AND
                          p_dados_tela.cod_operacao[3,5] <> "924" AND
                          p_dados_tela.cod_operacao[3,5] <> "925" AND
                          p_dados_tela.cod_operacao[3,5] <> "949") THEN
                         ERROR "CFOP inválido para notas de simples remessa."
                         NEXT FIELD cod_operacao
                      END IF
                   END IF
                END IF
             END IF
          END IF
       END IF

    BEFORE FIELD cnd_pgto_nf
       #--inicio--OS 595717 #
       IF find4GLFunction("supy117_consiste_nota_fiscal_transito") THEN
          IF l_funcao = "MODIFICACAO" AND
             m_nf_eletronica_impr  = TRUE THEN
             IF supy117_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                                      p_nf_sup.ies_especie_nf) = TRUE  THEN

                IF fgl_lastkey() = fgl_keyval("UP")   OR
                   fgl_lastkey() = fgl_keyval("LEFT") THEN
                   NEXT FIELD dat_entrada_nf
               ELSE
                  EXIT INPUT
               END IF
             END IF
          END IF
       ELSE
         IF l_funcao = "MODIFICACAO" AND
            m_nf_eletronica_impr  = TRUE THEN
            IF sup3760_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                                     p_nf_sup.cod_operacao) = FALSE THEN
            ELSE
               IF fgl_lastkey() = fgl_keyval("UP")   OR
                  fgl_lastkey() = fgl_keyval("LEFT") THEN
                  NEXT FIELD dat_entrada_nf
               ELSE
                  EXIT INPUT
               END IF
            END IF
         END IF
       END IF
       #---fim----OS 595717 #

       IF m_altera_cndpgto_mod_nf_transito = "N" THEN #555962
         IF (p_dados_tela.ies_nf_aguard_nfe = "7" OR #OS500471
             (m_nf_aguard_nfe_ant IS NOT NULL AND
              m_nf_aguard_nfe_ant = 7)) THEN
            IF p_array_pedidos[1].num_pedido IS NOT NULL OR #OS477406
               p_array_compl[1].num_pedido IS NOT NULL THEN #OS500471
               IF p_dados_tela.ies_especie_nf <> "NFR" THEN
                  NEXT FIELD ies_impostos
               END IF
            END IF
         END IF
       END IF

       IF p_dados_tela.ies_especie_nf = "NFR" THEN
          IF p_array_pedidos[1].num_pedido IS NOT NULL THEN
             SELECT cnd_pgto
               INTO l_cnd_pgto
               FROM pedido_sup
              WHERE pedido_sup.cod_empresa = p_cod_empresa
                AND pedido_sup.num_pedido = p_array_pedidos[1].num_pedido
                AND pedido_sup.ies_versao_atual = "S"

             SELECT sum(qtd_solic)
               INTO l_qtd_solic
               FROM ordem_sup
              WHERE ordem_sup.cod_empresa = p_cod_empresa
                AND ordem_sup.num_pedido = p_array_pedidos[1].num_pedido
                AND ordem_sup.ies_versao_atual = "S"

             IF l_qtd_solic = 0 THEN
                LET p_dados_tela.cnd_pgto_nf = l_cnd_pgto
                DISPLAY BY NAME p_dados_tela.cnd_pgto_nf
             END IF
          END IF
       END IF
       IF p_ies_informou_ped = "S" OR
          l_funcao = "MODIFICACAO" AND
          p_ies_nf_transf = FALSE THEN
          IF m_perm_alt_cnd_emb = "0" AND
             m_mod_emb_nf_transf = "S" THEN

             IF m_altera_cndpgto_mod_nf_transito = "N" THEN #555962
                IF NOT sup3760_verifica_nf_transf() THEN
                   NEXT FIELD ies_impostos
                ELSE
                   NEXT FIELD cod_mod_embar
                END IF
             END IF
          ELSE
             CASE m_perm_alt_cnd_emb
                WHEN "0"
                    ERROR "Empresa nao permite que altere cond.pgto e modo embar"
                    NEXT FIELD ies_impostos
                WHEN "1"
                    #Nao acontece nada
                WHEN "2"
                    #Nao acontece nada
                WHEN "3"
                    ERROR "Empresa nao permite que altere cond. pagamento"
                    NEXT FIELD cod_mod_embar
             END CASE
          END IF
       END IF

       IF p_ies_informou_ped = "S" THEN
          IF l_primeira_vez THEN
             LET l_cnd_pgto_ped = p_dados_tela.cnd_pgto_nf
             LET l_primeira_vez = FALSE
          END IF
       END IF

       IF l_funcao = "MODIFICACAO" THEN
          IF sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                        "N") THEN
             NEXT FIELD cod_mod_embar
          END IF

          IF sup0631_verifica_relac("NF",
                                    p_nf_sup.num_nf,
                                    p_nf_sup.ser_nf,
                                    p_nf_sup.ssr_nf,
                                    p_nf_sup.cod_fornecedor) = TRUE THEN
             NEXT FIELD cod_mod_embar
          END IF
       END IF
       LET p_seta = "UP"

       LET m_integracao_cre = FALSE

       IF (p_dados_tela.ies_especie_nf = "NFD" OR
           p_ies_tip_entrada = "5" OR
           p_nfe_vendas = TRUE) AND
           l_funcao = "INCLUSAO" AND
           p_ies_prim_cnd = TRUE THEN
           CALL sup376_verifica_cli_especial("1") RETURNING p_status

           ##Se for cliente especial (cobrança bancária), verificar se na devolução total
           ##deverá efetuar integração pelo CRE
           IF p_status = TRUE THEN
              IF NOT sup3762_integra_cre_dev_total(m_cod_empresa_uni,
                                                   m_ies_fat_unico) THEN
                 ##Fazer integração pelo CAP
                 LET p_ies_prim_cnd = FALSE
              ELSE
                 ##Fazer integração pelo CRE
                 LET m_integracao_cre = TRUE
              END IF
           END IF
       END IF
       IF p_nfe_vendas = TRUE AND
          p_ies_prim_cnd = TRUE THEN
          IF m_gera_rsv_transf = "S" AND
             p_dados_tela.ies_nf_aguard_nfe = "8" THEN
          ELSE
             ### OS 511148
             CALL sup3762_busca_cnd_pgto_nf()
          END IF
          IF sup376_verifica_cnd_pgto() THEN
          END IF
          NEXT FIELD cod_mod_embar
       END IF
       CALL sup3760_botao_zoom("ON",3,68)

    AFTER FIELD cnd_pgto_nf
       IF NOT sup3760_valida_cnd_pgto_nf(l_funcao) THEN
          IF FGL_LASTKEY() <> FGL_KEYVAL("UP") AND
             FGL_LASTKEY() <> FGL_KEYVAL("LEFT") THEN
             NEXT FIELD cnd_pgto_nf
          END IF
       END IF

       LET l_valida_pc = TRUE
       IF find4GLFunction('supy23_valida_pc') THEN
          LET l_valida_pc = supy23_valida_pc()
       END IF

       IF sup3760_verifica_nf_transf() AND l_funcao = "INCLUSAO" AND p_ies_pagamento <> "3" AND l_valida_pc = TRUE THEN
          ERROR "Condição de pagamento inválida para nota de transferência."
          NEXT FIELD cnd_pgto_nf
       END IF
       IF p_ies_informou_ped THEN
          IF l_cnd_pgto_ped <> p_dados_tela.cnd_pgto_nf THEN
             CALL log0040_confirm(21,04, "Cng.Pgto difere do Pedido. Deseja Continuar?") RETURNING l_pergunta
             IF l_pergunta <> "1" THEN
                NEXT FIELD cnd_pgto_nf
             END IF
          END IF
       END IF

       IF m_qtd_dias_nf_venc IS NOT NULL AND p_ies_pagamento <> "3" THEN
          WHENEVER ERROR CONTINUE
          DELETE FROM sup_libr_nf_vencd
           WHERE empresa           = p_cod_empresa
             AND nota_fiscal       = p_dados_tela.num_nf
             AND serie_nota_fiscal = p_dados_tela.ser_nf
             AND subserie_nf       = p_dados_tela.ssr_nf
             AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
             AND fornecedor        = p_dados_tela.cod_fornecedor
             AND usuario_aceite    = " "
          WHENEVER ERROR STOP

          CALL sup3762_verifica_venc_prim_parc() RETURNING l_data_venc

          LET l_dat_prx_venc = TODAY + m_qtd_dias_nf_venc

          IF l_data_venc < l_dat_prx_venc THEN
             INITIALIZE l_usuario_aceite TO NULL
             WHENEVER ERROR CONTINUE
             SELECT usuario_aceite
               INTO l_usuario_aceite
               FROM sup_libr_nf_vencd
              WHERE empresa           = p_cod_empresa
                AND nota_fiscal       = p_dados_tela.num_nf
                AND serie_nota_fiscal = p_dados_tela.ser_nf
                AND subserie_nf       = p_dados_tela.ssr_nf
                AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                AND fornecedor        = p_dados_tela.cod_fornecedor
             WHENEVER ERROR STOP

             IF sqlca.sqlcode = 0 THEN
                IF l_usuario_aceite IS NULL OR l_usuario_aceite = " " THEN
                   ERROR " Vencimento NF eh menor que qtde de dias permitido. Aprovar no SUP0964. "
                   NEXT FIELD cnd_pgto_nf
                END IF
             ELSE
                IF l_funcao = "MODIFICACAO" THEN
                   LET m_grava_sup0964 = TRUE
                END IF
                WHENEVER ERROR CONTINUE
                INSERT INTO sup_libr_nf_vencd VALUES (p_cod_empresa,
                                                      p_dados_tela.num_nf,
                                                      p_dados_tela.ser_nf,
                                                      p_dados_tela.ssr_nf,
                                                      p_dados_tela.ies_especie_nf,
                                                      p_dados_tela.cod_fornecedor,
                                                      p_dados_tela.dat_entrada_nf,
                                                      p_user,
                                                      " ",
                                                      " ",
                                                      NULL)
                WHENEVER ERROR STOP

                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("INCLUSAO","SUP_LIBR_NF_VENCD")
                   NEXT FIELD cnd_pgto_nf
                ELSE
                   ERROR " Vencimento NF eh menor que qtde de dias permitido. Aprovar no SUP0964. "
                   NEXT FIELD cnd_pgto_nf
                END IF
             END IF
          END IF
       END IF

       CALL sup3760_botao_zoom("OFF",3,68)
       IF find4glfunction('supy166_verifica_data_valida') THEN
          IF NOT supy166_verifica_data_valida(p_cod_empresa,
                                              p_dados_tela.cnd_pgto_nf,
                                              p_dados_tela.dat_entrada_nf,
                                              p_dados_tela.cod_fornecedor) THEN
             NEXT FIELD dat_entrada_nf
          END IF
       END IF

    BEFORE FIELD cod_mod_embar
       IF m_altera_cndpgto_mod_nf_transito = "N" THEN #555962
          IF (p_dados_tela.ies_nf_aguard_nfe = "7" OR #OS500471
              (m_nf_aguard_nfe_ant IS NOT NULL AND
               m_nf_aguard_nfe_ant = 7)) THEN
             IF p_array_pedidos[1].num_pedido IS NOT NULL OR #OS477406
                p_array_compl[1].num_pedido IS NOT NULL THEN #OS500471
                IF p_dados_tela.ies_especie_nf <> "NFR" THEN
                   NEXT FIELD ies_impostos
                END IF
             END IF
          END IF
       END IF

       IF p_ies_informou_ped = "S" OR
          l_funcao = "MODIFICACAO" AND
          p_ies_nf_transf = FALSE THEN
          IF (m_perm_alt_cnd_emb = "0" OR m_perm_alt_cnd_emb = "2") AND
              m_mod_emb_nf_transf = "S" THEN

              IF m_altera_cndpgto_mod_nf_transito = "N" THEN #555962
                 IF NOT sup3760_verifica_nf_transf() THEN
                    ERROR "Empresa nao permite que altere modo de embarque"
                    NEXT FIELD ies_impostos
                 END IF
              END IF
          ELSE
             CASE m_perm_alt_cnd_emb
                WHEN "0"
                    ERROR "Empresa nao permite que altere cond.pgto e modo embar"
                    NEXT FIELD ies_impostos
                WHEN "1"
                    #Nao acontece nada
                WHEN "2"
                    ERROR "Empresa nao permite que altere modo de embarque"
                    NEXT FIELD ies_impostos
                WHEN "3"
                    #Nao acontece nada
             END CASE
          END IF
       END IF
       CALL sup3760_botao_zoom("ON",3,68)

    AFTER FIELD cod_mod_embar
       IF p_dados_tela.cod_mod_embar IS NOT NULL THEN
          IF sup376_verifica_mod_embar() THEN
             ERROR "Modo de embarque nao cadastrado"
             NEXT FIELD cod_mod_embar
          ELSE
             IF NOT sup3760_verifica_tip_frete() THEN
                NEXT FIELD cod_mod_embar
             END IF
          END IF
       ELSE
          ERROR " Informe o modo de embarque."
          NEXT FIELD cod_mod_embar
       END IF
       CALL sup3760_botao_zoom("OFF",3,68)
       IF p_nfe_vendas = TRUE OR p_nfe_import = TRUE OR
          p_nfm_import = TRUE OR p_ies_nf_transf = TRUE OR
          g_ies_nf_permuta = TRUE  OR m_nf_tipo_x = TRUE THEN ### OS 511148
          EXIT INPUT
       END IF

    AFTER FIELD ies_impostos
       LET p_ies_imp_rendar    = p_ies_imp_renda
       LET p_ies_imp_issr      = p_ies_imp_iss
       LET p_ies_imp_ret_inssr = p_ies_imp_ret_inss
       LET p_ies_imp_inss_rurr = p_ies_imp_inss_rur
       LET p_ies_imp_renda     = p_dados_tela.ies_impostos
       IF l_funcao = "MODIFICACAO" THEN
          LET p_entra_array = "S"
       END IF

    AFTER INPUT
       IF int_flag = 0 THEN

          #809554
          IF l_funcao = "MODIFICACAO" THEN
             IF mr_dados_tela_ant.ser_nf <> p_dados_tela.ser_nf OR
                mr_dados_tela_ant.ssr_nf <> p_dados_tela.ssr_nf OR
                mr_dados_tela_ant.ies_especie_nf <> p_dados_tela.ies_especie_nf THEN
                IF sup3760_nota_existe() THEN
                   CALL log0030_mensagem('Nota fiscal já cadastrada.','exclamation')
                   NEXT FIELD ser_nf
                END IF
             END IF
          ELSE  #A56550
             IF sup3760_nota_existe() THEN
                CALL log0030_mensagem('Nota fiscal já cadastrada.','exclamation')
                NEXT FIELD num_nf
             END IF
          END IF
          #809554
          IF sup3760_existe_h_nf_sup(p_dados_tela.cod_empresa, p_dados_tela.num_nf, p_dados_tela.ser_nf,
                                     p_dados_tela.ssr_nf, p_dados_tela.ies_especie_nf, p_dados_tela.cod_fornecedor,
                                     p_dados_tela.dat_emis_nf) THEN  #809554
             CALL log0030_mensagem('Nota fiscal já cadastrada em histórico. Verifique no SUP6280.','stop')
             NEXT FIELD num_nf
          END IF
          #809554
          FOR p_ind = 1 TO 999
             IF p_dados_tela.ies_especie_nf = "NFC" AND
                p_array[p_ind].qtd_declarad_nf IS NULL THEN
                LET p_array[p_ind].qtd_declarad_nf = 0
             END IF
          END FOR

          IF p_dados_tela.cod_fornecedor IS NOT NULL THEN
             IF sup376_verifica_fornecedor() = FALSE THEN
                ERROR "Fornecedor excluído durante a operação."
                NEXT FIELD cod_fornecedor
             END IF
          END IF

          #--inicio--vanderlei OS 409196 #
          IF p_dados_tela.ser_nf IS NULL THEN
             LET p_dados_tela.ser_nf = ' '
          END IF
          #---fim----vanderlei OS 409196 #
          IF m_tem_valid_fim THEN
             IF  (p_dados_tela.ies_especie_nf = "NFS"
             OR   p_dados_tela.ies_especie_nf = "REC"
             OR   p_dados_tela.ies_especie_nf = "DOC")
             AND (p_dados_tela.cod_operacao IS NULL
             OR   p_dados_tela.cod_operacao = " ")
             AND  m_cfop_nfs = "N" THEN
             ELSE
                IF p_dados_tela.dat_entrada_nf > m_dat_fim_valid AND
                   p_dados_tela.cod_operacao[5] = " " THEN
                   ERROR "CFOP inválido para período conforme nova legislação."
                   NEXT FIELD cod_operacao
                END IF
             END IF
          END IF

          INITIALIZE l_status, p_ies_tip_entrada, m_ies_obj_entrada TO NULL
          CALL sup0686_retorna_tip_obj_entrada(p_dados_tela.cod_operacao,
                                               p_dados_tela.cod_fiscal_compl)
                                               RETURNING l_status,
                                                         p_ies_tip_entrada,
                                                         m_ies_obj_entrada

          IF p_dados_tela.ies_especie_nf = "CON" AND
             m_ies_obj_entrada <> "7" THEN
             ERROR "CFOP não cadastrado como frete. Verifica objetivo deve ser igual a '7'."
             NEXT FIELD cod_operacao
          END IF

          IF NOT sup3760_verifica_cadastro_sup1785(l_funcao, l_cod_fisc_ant) THEN #O.S. 550997
             NEXT FIELD cod_operacao
          END IF

          IF m_serie_branca = "S" THEN
             IF p_dados_tela.ser_nf IS NULL THEN
                LET p_dados_tela.ser_nf = " "
             END IF
          ELSE
             IF p_dados_tela.ser_nf IS NULL OR
                p_dados_tela.ser_nf = " " THEN
                ERROR "Informe o número da série da Nota."
                NEXT FIELD ser_nf
             END IF
          END IF

          IF p_dados_tela.dat_emis_nf IS NOT NULL THEN
             IF p_dados_tela.dat_emis_nf > TODAY THEN
                ERROR "Data emissão Nota Fiscal não pode ser maior que data atual."
                NEXT FIELD dat_emis_nf
             END IF
             IF p_dados_tela.dat_emis_nf < p_par_sup.dat_fecha_ultimo THEN
                ERROR "Data emissão NF. menor que último fechamento fiscal."
                IF NOT log004_confirm(12,43) THEN
                   NEXT FIELD dat_emis_nf
                END IF
             END IF
             IF p_cons_data = TRUE THEN
                IF p_dados_tela.dat_emis_nf < (TODAY - p_qtd_dias_emis_doc) THEN
                   ERROR "Data de emissão menor que data atual menos qtd. dias de emissão do parâmetro."
                   NEXT FIELD dat_emis_nf
                END IF
             END IF
          ELSE
             ERROR "Digite a data de emissão da nota fiscal."
             NEXT FIELD dat_emis_nf
          END IF

          IF l_funcao = "INCLUSAO" THEN
             IF m_mes_fecha_01 = "S" THEN
                IF p_par_sup.dat_fecha_ultimo >= TODAY THEN
                   LET p_dados_tela.dat_entrada_nf = p_par_sup.dat_fecha_ultimo + 1 UNITS DAY
                   ### Verifica se eh um dia util
                   LET l_ies_dia_semana = WEEKDAY(p_dados_tela.dat_entrada_nf)
                   CASE l_ies_dia_semana
                      WHEN 0 #domingo
                         LET p_dados_tela.dat_entrada_nf = p_dados_tela.dat_entrada_nf + 1 UNITS DAY
                      WHEN 1 #segunda
                      WHEN 2 #terca
                      WHEN 3 #quarta
                      WHEN 4 #quinta
                      WHEN 5 #sexta
                      WHEN 6 #sabado
                         LET p_dados_tela.dat_entrada_nf = p_dados_tela.dat_entrada_nf + 2 UNITS DAY
                   END CASE
                   LET l_dat_ant = p_dados_tela.dat_entrada_nf
                END IF
             END IF
          ELSE
             LET l_dat_ant = p_dados_tela.dat_entrada_nf
          END IF

          IF m_mes_fecha_01 = "S" AND
             p_par_sup.dat_fecha_ultimo >= TODAY THEN
             IF l_dat_ant <> p_dados_tela.dat_entrada_nf THEN
                LET p_dados_tela.dat_entrada_nf = l_dat_ant
                DISPLAY BY NAME p_dados_tela.dat_entrada_nf
                ERROR "Data de entrada não pode ser alterada. Mês com recebimento fechado."
             END IF
          ELSE
             IF p_dados_tela.dat_entrada_nf > TODAY THEN
                ERROR "Data da entrada não pode ser maior que data atual."
                NEXT FIELD dat_entrada_nf
             END IF
          END IF

          IF p_dados_tela.dat_emis_nf > p_dados_tela.dat_entrada_nf THEN
             ERROR "Data emissão Nota Fiscal não pode ser maior que data da entrada."
             NEXT FIELD dat_emis_nf
          END IF
          IF p_par_sup.qtd_dias_incl_nf IS NOT NULL THEN
             IF p_dados_tela.dat_entrada_nf <
                (TODAY + 1 - p_par_sup.qtd_dias_incl_nf) THEN
                ERROR "Data de entrada da Nota Fiscal inferior ao limite de tolerância do PAR_SUP."
                NEXT FIELD dat_entrada_nf
             END IF
          END IF
          IF p_dados_tela.dat_entrada_nf <= p_par_sup.dat_fecha_ult_ipi OR
             p_dados_tela.dat_entrada_nf <= p_par_sup.dat_fecha_ultimo THEN
             ERROR "Data entrada NF. deve ser maior que o último fechamento IPI/FISCAL."
             NEXT FIELD dat_entrada_nf
          END IF

          IF p_dados_tela.dat_entrada_nf IS NULL OR
             p_dados_tela.dat_entrada_nf = " " THEN
             ERROR "Informe a data de entrada da Nota Fiscal."
             NEXT FIELD dat_entrada_nf
          END IF

          IF m_empr_utiliz_mp66 = "R" THEN
             IF NOT sup3760_busca_pct_bc_pis("REDUCAO",0) THEN
                NEXT FIELD dat_entrada_nf
             END IF
          END IF

          IF sup376_verifica_cnd_pgto() THEN
             ERROR "Condição de Pagamento não cadastrada."
             NEXT FIELD cnd_pgto_nf
          END IF
          IF p_dados_tela.ies_especie_nf = "NFR" AND
             p_array_pedidos[1].num_pedido IS NOT NULL AND
             l_qtd_solic <> 0 AND
             p_ies_pagamento <> "3" THEN
             ERROR "Condição de pagamento inválida para a Espécie."
             NEXT FIELD cnd_pgto_nf
          END IF
          IF p_dados_tela.ies_especie_nf = "NFR" AND
             p_ies_pagamento = "3" AND
             l_qtd_solic = 0 AND
             p_array_pedidos[1].num_pedido IS NOT NULL THEN
             ERROR "NF de compl. de consignação , condição deverá ser c/ pgto."
             NEXT FIELD cnd_pgto_nf
          END IF

          IF NOT sup3760_valida_cnd_pgto_nf(l_funcao) THEN
             NEXT FIELD cnd_pgto_nf
          END IF

          IF m_qtd_dias_nf_venc IS NOT NULL AND p_ies_pagamento <> "3" THEN
             WHENEVER ERROR CONTINUE
             DELETE FROM sup_libr_nf_vencd
              WHERE empresa           = p_cod_empresa
                AND nota_fiscal       = p_dados_tela.num_nf
                AND serie_nota_fiscal = p_dados_tela.ser_nf
                AND subserie_nf       = p_dados_tela.ssr_nf
                AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                AND fornecedor        = p_dados_tela.cod_fornecedor
                AND usuario_aceite    = " "
             WHENEVER ERROR STOP

             CALL sup3762_verifica_venc_prim_parc() RETURNING l_data_venc

             LET l_dat_prx_venc = TODAY + m_qtd_dias_nf_venc

             IF l_data_venc < l_dat_prx_venc THEN
                INITIALIZE l_usuario_aceite TO NULL
                WHENEVER ERROR CONTINUE
                SELECT usuario_aceite
                  INTO l_usuario_aceite
                  FROM sup_libr_nf_vencd
                 WHERE empresa           = p_cod_empresa
                   AND nota_fiscal       = p_dados_tela.num_nf
                   AND serie_nota_fiscal = p_dados_tela.ser_nf
                   AND subserie_nf       = p_dados_tela.ssr_nf
                   AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                   AND fornecedor        = p_dados_tela.cod_fornecedor
                WHENEVER ERROR STOP

                IF sqlca.sqlcode = 0 THEN
                   IF l_usuario_aceite IS NULL OR l_usuario_aceite = " " THEN
                      ERROR "Vencimento NF é menor que qtde de dias permitido. Aprovar no SUP0964."
                      NEXT FIELD cnd_pgto_nf
                   END IF
                ELSE
                   IF l_funcao = "MODIFICACAO" THEN
                      LET m_grava_sup0964 = TRUE
                   END IF
                   WHENEVER ERROR CONTINUE
                   INSERT INTO sup_libr_nf_vencd VALUES (p_cod_empresa,
                                                         p_dados_tela.num_nf,
                                                         p_dados_tela.ser_nf,
                                                         p_dados_tela.ssr_nf,
                                                         p_dados_tela.ies_especie_nf,
                                                         p_dados_tela.cod_fornecedor,
                                                         p_dados_tela.dat_entrada_nf,
                                                         p_user,
                                                         " ",
                                                         " ",
                                                         NULL)
                   WHENEVER ERROR STOP

                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("INCLUSAO","SUP_LIBR_NF_VENCD")
                      NEXT FIELD cnd_pgto_nf
                   ELSE
                      ERROR "Vencimento NF é menor que qtde de dias permitido. Aprovar no SUP0964."
                      NEXT FIELD cnd_pgto_nf
                   END IF
                END IF
             END IF
          END IF

          IF p_dados_tela.cod_mod_embar IS NULL THEN
             ERROR "Informe o modo de embarque."
             NEXT FIELD cod_mod_embar
          END IF
          IF sup376_verifica_mod_embar() THEN
             ERROR "Modo de embarque não cadastrado."
             NEXT FIELD cod_mod_embar
          END IF

          LET p_ies_imp_renda     = p_dados_tela.ies_impostos
          LET p_ies_imp_rendar    = p_ies_imp_renda
          LET p_ies_imp_issr      = p_ies_imp_iss
          LET p_ies_imp_ret_inssr = p_ies_imp_ret_inss
          LET p_ies_imp_inss_rurr = p_ies_imp_inss_rur
          IF l_funcao = "MODIFICACAO" THEN
             LET p_entra_array = "S"
          ELSE
             #OS 220554
             IF NOT sup3760_consiste_pedido_nf() THEN
                NEXT FIELD num_nf
             END IF
          END IF
          ### OS 159597 ###
          IF m_contr_pes_rec = 'S' THEN #eduardo - o.s.290538 19/11/03
             WHENEVER ERROR CONTINUE
             LET m_num_pesagem = 0
             SELECT COUNT(*)
               INTO m_num_pesagem
               FROM sup_ctr_balanca
              WHERE empresa           = p_cod_empresa
                AND num_docum         = p_dados_tela.num_nf
                AND serie_nota_fiscal = p_dados_tela.ser_nf
                AND subserie_nf       = p_dados_tela.ssr_nf
                AND fornecedor        = p_dados_tela.cod_fornecedor
                AND seq_nota_fiscal   > 0
                AND tip_pesagem       = "1"
                AND aviso_recebto     IS NULL
             IF m_num_pesagem > 0 THEN
                ERROR "Existem pesagens referentes a essa NF. Deseja continuar?"
                IF log004_confirm(21,44) THEN
                ELSE
                   NEXT FIELD num_nf
                END IF
             END IF
             WHENEVER ERROR STOP
          END IF

          IF l_funcao = "INCLUSAO" THEN
             IF sup376_verifica_nota_fiscal()   THEN
                NEXT FIELD num_nf
             END IF
          END IF

          #--------------------------#
          # Alteração WMS OS: 450083 #
          #--------------------------#
          IF m_wms_instal = "S" AND l_funcao = "INCLUSAO" THEN
             # Passo 13 #
             IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
                IF NOT wms6133_verifica_dados_primeira_nf(p_cod_empresa,
                                                          p_dados_tela.num_aviso_rec,
                                                          p_dados_tela.cod_fornecedor) THEN
                   LET int_flag = 0
                   NEXT FIELD num_nf
                END IF
             END IF
          END IF

          #--inicio--OS 607387 #
          IF sup3760_valida_nf_cadastrada() = TRUE THEN
             NEXT FIELD dat_emis_nf
          END IF
          CALL log006_exibe_teclas("01 02 03 07",p_versao)
               CURRENT WINDOW IS w_sup37601
          #---fim----OS 607387 #

          IF LOG_existe_epl("wmsy24_inf_di_bl") THEN
             IF m_wms_instal = 'S' AND p_dados_tela.ies_nf_aguard_nfe = "B" THEN
                WHENEVER ERROR CONTINUE
                  SELECT 1
                    FROM wms_parametro_complementar
                   WHERE nom_parametro = 'controla_di_bl'
                     AND empresa       = p_cod_empresa
                     AND depositante   = p_dados_tela.cod_fornecedor
                     AND val_flag      = 'S'
                WHENEVER ERROR STOP

                IF sqlca.sqlcode = 0 THEN
                   CALL wmsy24_inf_di_bl(p_dados_tela.num_aviso_rec)
                END IF
             END IF
          END IF

       END IF

    ON KEY (control-z, f4)
       CALL sup376_popups(l_funcao)
    ON KEY (f1, control-w)
       #lds IF NOT LOG_logix_versao5() THEN
       #lds CONTINUE INPUT
       #lds END IF
      CALL sup376_help()
    ON KEY (control-c)
      LET int_flag = 1
      EXIT INPUT

 END INPUT

 CALL sup3760_botao_zoom("OFF",3,68)
 CALL log006_exibe_teclas("01", p_versao)
 CURRENT WINDOW IS w_sup37601

 IF l_houve_erro = TRUE OR int_flag <> 0 THEN
    RETURN FALSE
 END IF

 IF l_funcao <> "MODIFICACAO" THEN
    IF p_retorno_3760 = FALSE THEN
       LET int_flag = 0
       RETURN FALSE
    END IF
 END IF

 IF int_flag = 0 THEN
    IF l_funcao = "MODIFICACAO" THEN
       IF p_entra_array = "N" THEN

          # CH 739942 - Rafael F. B. - 12/01/2010 #
          IF l_alt_cod_operacao THEN
             IF sup376_insere_totais(l_funcao) THEN
                RETURN TRUE
             ELSE
                RETURN FALSE
             END IF
          END IF

          IF p_cnd_pgto_salva = p_dados_tela.cnd_pgto_nf THEN
             RETURN TRUE
          END IF

       END IF
    END IF
 END IF

 LET g_ser_mark = FALSE
 WHENEVER ERROR CONTINUE
 SELECT serie
   FROM man_moviment_serie
  WHERE num_docum = p_dados_tela.num_nf
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 OR
    sqlca.sqlcode = -284 THEN
    LET g_ser_mark = TRUE
 END IF

 IF int_flag = 0 THEN
    IF p_nfe_vendas = TRUE AND
       g_ser_mark = FALSE THEN
       RETURN TRUE
    ELSE
       IF g_ser_mark = TRUE AND
          l_funcao = 'INCLUSAO' AND
          (p_dados_tela.ies_especie_nf = "NFE" OR
           (p_dados_tela.ies_especie_nf = "NFD" AND
           (p_dados_tela.ies_nf_aguard_nfe = "6" OR
            p_dados_tela.ies_nf_aguard_nfe = "1" OR
### OS 358438
            p_dados_tela.ies_nf_aguard_nfe = "9"))) THEN
          IF l_nf_mestre_ser = TRUE THEN
             LET m_ind_mark = 1

             IF m_ies_fat_unico THEN
                LET l_sql_stmt = " SELECT item, ",
                                      " qtd_item, ",
                                      " unid_medida, ",
                                      " preco_unit_liquido, ",
                                      " val_liquido_item ",
                                 " FROM fat_nf_mestre, fat_nf_item ",
                                " WHERE fat_nf_mestre.empresa            = """, p_cod_empresa, """ ",
                                  " AND fat_nf_mestre.nota_fiscal        = ", p_dados_tela.num_nf,
                                  " AND fat_nf_mestre.serie_nota_fiscal  = """, p_dados_tela.ser_nf, """ ",
                                  " AND fat_nf_mestre.subserie_nf        = ",p_dados_tela.ssr_nf," ",
                                  " AND fat_nf_mestre.tip_nota_fiscal    = ""FATPRDSV"" ",
                                  " AND fat_nf_mestre.sit_nota_fiscal    = ""N"" ",
                                  " AND fat_nf_item.empresa              = fat_nf_mestre.empresa ",
                                  " AND fat_nf_item.trans_nota_fiscal    = fat_nf_mestre.trans_nota_fiscal "
             ELSE
                LET l_sql_stmt = " SELECT cod_item, ",
                                      " qtd_item, ",
                                      " cod_unid_med, ",
                                      " pre_unit_nf, ",
                                      " val_liq_item ",
                                 " FROM nf_item_ser ",
                                " WHERE cod_empresa = """, p_cod_empresa, """ ",
                                  " AND num_nff     = ", p_dados_tela.num_nf,
                                  " AND ser_nff     = """, p_dados_tela.ser_nf, """ "
             END IF

             WHENEVER ERROR CONTINUE
             PREPARE var_query FROM l_sql_stmt
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("PREPARE","VAR_QUERY")
             END IF

             WHENEVER ERROR CONTINUE
             DECLARE cq_nf_it_ser CURSOR FOR var_query
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("DECLARE","CQ_NF_IT_SER")
             END IF

             WHENEVER ERROR CONTINUE
             FOREACH cq_nf_it_ser INTO l_cod_item,
                                       l_qtd_item,
                                       l_cod_unid_med,
                                       l_pre_unit_nf,
                                       l_val_liq_item
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode <> 0 THEN
                    CALL log003_err_sql("FOREACH","CQ_NF_IT_SER")
                 END IF

                 LET p_array[m_ind_mark].seq               = m_ind_mark
                 LET p_array[m_ind_mark].cod_item          = l_cod_item
                 LET p_array[m_ind_mark].qtd_declarad_nf   = l_qtd_item
                 LET p_array[m_ind_mark].cod_unid_med_nf   = l_cod_unid_med
                 LET p_array[m_ind_mark].pre_unit_nf       = l_pre_unit_nf
                 LET p_array[m_ind_mark].val_liquido_item  = l_val_liq_item

                 LET m_ind_mark = m_ind_mark + 1
              END FOREACH

              LET m_ind_mark = m_ind_mark - 1

              CALL SET_COUNT(m_ind_mark)
              DISPLAY ARRAY p_array TO s_sup37601.*
          ELSE
             IF l_nf_mestre = TRUE THEN

                LET m_ind_mark = 1

                IF m_ies_fat_unico THEN
                   LET l_sql_stmt =
                         " SELECT item, ",
                                " qtd_item, ",
                                " unid_medida, ",
                                " preco_unit_liquido, ",
                                " val_liquido_item ",
                           " FROM fat_nf_mestre, fat_nf_item ",
                          " WHERE fat_nf_mestre.empresa            = """, p_cod_empresa, """ ",
                            " AND fat_nf_mestre.nota_fiscal        = ", p_dados_tela.num_nf,
                            " AND fat_nf_mestre.serie_nota_fiscal  = """, p_dados_tela.ser_nf, """ ",
                            " AND fat_nf_mestre.subserie_nf        = ",p_dados_tela.ssr_nf," ",
                            " AND fat_nf_mestre.tip_nota_fiscal    = ""FATPRDSV"" ",
                            " AND fat_nf_mestre.sit_nota_fiscal    = ""N"" ",
                            " AND fat_nf_item.empresa              = fat_nf_mestre.empresa ",
                            " AND fat_nf_item.trans_nota_fiscal    = fat_nf_mestre.trans_nota_fiscal "
                ELSE
                   LET l_sql_stmt = " SELECT cod_item, ",
                                         " qtd_item, ",
                                         " cod_unid_med, ",
                                         " pre_unit_nf, ",
                                         " val_liq_item ",
                                    " FROM nf_item ",
                                   " WHERE cod_empresa = """, p_cod_empresa, """ ",
                                     " AND num_nff     = ", p_dados_tela.num_nf
                END IF

                WHENEVER ERROR CONTINUE
                PREPARE var_nf_it FROM l_sql_stmt
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("PREPARE","VAR_NF_IT")
                END IF

                WHENEVER ERROR CONTINUE
                DECLARE cl_nf_it CURSOR FOR var_nf_it
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("DECLARE","CL_NF_IT")
                END IF

                WHENEVER ERROR CONTINUE
                FOREACH cl_nf_it INTO l_cod_item,
                                      l_qtd_item,
                                      l_cod_unid_med,
                                      l_pre_unit_nf,
                                      l_val_liq_item
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("FOREACH","CL_NF_IT")
                   END IF

                   LET p_array[m_ind_mark].seq               = m_ind_mark
                   LET p_array[m_ind_mark].cod_item          = l_cod_item
                   LET p_array[m_ind_mark].qtd_declarad_nf   = l_qtd_item
                   LET p_array[m_ind_mark].cod_unid_med_nf   = l_cod_unid_med
                   LET p_array[m_ind_mark].pre_unit_nf       = l_pre_unit_nf
                   LET p_array[m_ind_mark].val_liquido_item  = l_val_liq_item

                   LET m_ind_mark = m_ind_mark + 1
                END FOREACH
                FREE cl_nf_it

                LET m_ind_mark = m_ind_mark - 1

                CALL set_count(m_ind_mark)
                DISPLAY ARRAY p_array TO s_sup37601.*
             ELSE
                IF l_nf_mestre_hist = TRUE THEN
                   LET m_ind_mark = 1

                   IF m_ies_fat_unico THEN
                      LET l_sql_stmt =
                         " SELECT item, ",
                                " qtd_item, ",
                                " unid_medida, ",
                                " preco_unit_liquido, ",
                                " val_liquido_item ",
                           " FROM fat_nf_mestre_hist, fat_nf_item_hist ",
                          " WHERE fat_nf_mestre_hist.empresa            = """, p_cod_empresa, """ ",
                            " AND fat_nf_mestre_hist.nota_fiscal        = ", p_dados_tela.num_nf,
                            " AND fat_nf_mestre_hist.serie_nota_fiscal  = """, p_dados_tela.ser_nf, """ ",
                            " AND fat_nf_mestre_hist.subserie_nf        = ",p_dados_tela.ssr_nf," ",
                            " AND fat_nf_mestre_hist.tip_nota_fiscal    = ""FATPRDSV"" ",
                            " AND fat_nf_mestre_hist.sit_nota_fiscal    = ""N"" ",
                            " AND fat_nf_item_hist.empresa              = fat_nf_mestre_hist.empresa ",
                            " AND fat_nf_item_hist.trans_nota_fiscal    = fat_nf_mestre_hist.trans_nota_fiscal "
                   ELSE
                      LET l_sql_stmt = " SELECT cod_item, ",
                                            " qtd_item, ",
                                            " cod_unid_med, ",
                                            " pre_unit_nf, ",
                                            " val_liq_item ",
                                       " FROM nf_item_hist ",
                                      " WHERE cod_empresa = """, p_cod_empresa, """ ",
                                        " AND num_nff     = ", p_dados_tela.num_nf
                   END IF

                   WHENEVER ERROR CONTINUE
                   PREPARE var_nf_it_hist FROM l_sql_stmt
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("PREPARE","VAR_NF_IT_HIST")
                   END IF

                   WHENEVER ERROR CONTINUE
                   DECLARE cl_nf_it_hist CURSOR FOR var_nf_it_hist
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("DECLARE","CL_NF_IT_HIST")
                   END IF

                   WHENEVER ERROR CONTINUE
                   FOREACH cl_nf_it_hist INTO l_cod_item,
                                              l_qtd_item,
                                              l_cod_unid_med,
                                              l_pre_unit_nf,
                                              l_val_liq_item
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode <> 0 THEN
                         CALL log003_err_sql("FOREACH","CL_NF_IT_HIST")
                      END IF

                      LET p_array[m_ind_mark].seq               = m_ind_mark
                      LET p_array[m_ind_mark].cod_item          = l_cod_item
                      LET p_array[m_ind_mark].qtd_declarad_nf   = l_qtd_item
                      LET p_array[m_ind_mark].cod_unid_med_nf   = l_cod_unid_med
                      LET p_array[m_ind_mark].pre_unit_nf       = l_pre_unit_nf
                      LET p_array[m_ind_mark].val_liquido_item  = l_val_liq_item

                      LET m_ind_mark = m_ind_mark + 1
                   END FOREACH
                   FREE cl_nf_it_hist

                   LET m_ind_mark = m_ind_mark - 1
                   CALL SET_COUNT(m_ind_mark)
                   DISPLAY ARRAY p_array TO s_sup37601.*
                END IF
             END IF
          END IF
       END IF

       IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
          IF p_dados_tela.ies_especie_nf = "NFM" THEN
             LET p_nf_sup.ies_situa_import = "A" #ALTERACAO_NFM_NFP
          ELSE
             IF m_ies_utiliz_provisao = "S" AND
                m_utiliz_nfm_import = "N" AND
                m_num_processo >= m_inicio_provisao THEN
                LET p_nf_sup.ies_situa_import = "E"
             ELSE
                IF m_nfp_incl_apos_encerr THEN
                   LET p_nf_sup.ies_situa_import = "E"
                ELSE
                   LET p_nf_sup.ies_situa_import = "A"
                END IF
             END IF
          END IF
          LET p_aviso_rec_compl.ies_incl_import = "N"
          CALL sup376_inicializa_importacao_nf()
          IF int_flag = TRUE THEN
             LET int_flag = 0
             RETURN FALSE
          END IF
          #-------------nfe/nfm/nfp_importacao--------------#
          CALL sup3760_carrega_dados_importacao()
       END IF

       IF m_exporta_nf = "A" AND l_funcao = "INCLUSAO" THEN
          IF NOT sup3762_inf_conta_corrente("I") THEN
             RETURN FALSE
          END IF
       END IF

       IF l_funcao = "MODIFICACAO" AND m_nf_aguard_nfe_ant = "7" AND
          p_dados_tela.ies_nf_aguard_nfe <> "7" THEN
          IF sup3760_consiste_nf_transito() THEN
             IF NOT sup3760_passa_parametro(l_funcao,
                                            p_dados_tela.cod_empresa,
                                            p_dados_tela.num_aviso_rec,
                                            p_dados_tela.cod_operacao,
                                            p_dados_tela.cod_fiscal_compl,
                                            p_dados_tela.dat_emis_nf,
                                            p_dados_tela.dat_entrada_nf,
                                            p_dados_tela.cnd_pgto_nf,
                                            p_dados_tela.cod_mod_embar,
                                            p_dados_tela.ies_nf_aguard_nfe,
                                            p_dados_tela.ies_impostos,
                                            p_dados_tela.cod_emp_benef,
                                            p_dados_tela.cod_operac_estoq,
                                            p_dados_tela.cod_fornecedor,
                                            p_dados_tela.ser_nf,
                                            p_dados_tela.ssr_nf,
                                            p_dados_tela.ies_especie_nf) THEN
                RETURN FALSE
             END IF

             WHENEVER ERROR CONTINUE
                 CALL log085_transacao("COMMIT")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("COMMIT","ENTRADA_DADOS")
                CALL log085_transacao("ROLLBACK") #OS596059
                RETURN FALSE
             END IF

             ERROR " Aguarde...! Efetuando consistencia da NF em trânsito. "
             CALL log120_procura_caminho("sup3771") RETURNING comando3
             RUN comando3 RETURNING p_cancel
             CURRENT WINDOW IS w_sup37601

             LET m_executou_sup3771 = TRUE

             IF m_altera_nfm_7_para_6_aut = 'S' AND
                p_dados_tela.ies_especie_nf = 'NFP' THEN
                CALL sup3760_verifica_nfm_total()
             END IF
             #ler parâmetro e verificar se a quantidade da NFM foi totalmente atendida
             WHENEVER ERROR CONTINUE #848471
             SELECT {cod_operacao, dat_emis_nf, dat_entrada_nf,
                    cnd_pgto_nf, cod_mod_embar,} ies_nf_aguard_nfe
               INTO {p_dados_tela.cod_operacao, p_dados_tela.dat_emis_nf,
                    p_dados_tela.dat_entrada_nf, p_dados_tela.cnd_pgto_nf,
                    p_dados_tela.cod_mod_embar,} p_dados_tela.ies_nf_aguard_nfe
               FROM nf_sup
              WHERE cod_empresa        = p_cod_empresa
                AND num_aviso_rec      = p_dados_tela.num_aviso_rec
             WHENEVER ERROR STOP

             DISPLAY BY NAME p_dados_tela.cod_operacao, p_dados_tela.dat_emis_nf,
                             p_dados_tela.dat_entrada_nf, p_dados_tela.cnd_pgto_nf,
                             p_dados_tela.cod_mod_embar, p_dados_tela.ies_nf_aguard_nfe
           ##RETURN TRUE  848471
          END IF
       END IF

       IF p_ies_nf_transf = TRUE OR g_ies_nf_permuta = TRUE THEN
          RETURN TRUE
       ELSE

         IF m_wms_instal = 'S' THEN
            IF NOT sup3760_controle_wms(l_funcao) THEN
               RETURN FALSE
            END IF
         ELSE
            ### OS 511148
            IF m_devol_consig_venda_parcial = "S" AND
               (l_devol_consig_total = TRUE       OR
                m_devol_nf_parcial   = TRUE )    THEN

               ##OS587025
               #IF l_devol_consig_total = TRUE THEN
               #  IF sup376_inicializa_vendas_ar(p_cod_empresa, l_nf_hist) = TRUE THEN
               #     RETURN TRUE
               #  ELSE
               #     RETURN FALSE
               #  END IF
               #END IF

               RETURN TRUE
            ELSE
               IF find4glfunction('supy146_informa_nf_saida') THEN
                  IF m_devol_cliente_parcial = 'S' AND
                     m_devol_nf_parcial = TRUE THEN
                     IF p_array[1].cod_item IS NOT NULL AND
                        p_array[1].cod_item <> ' ' THEN
                        IF sup376_insere_totais(l_funcao) = TRUE THEN
                           RETURN TRUE
                        ELSE
                           RETURN FALSE
                        END IF
                     ELSE
                        IF sup376_insere_array(l_funcao) = TRUE THEN
                            IF sup376_insere_totais(l_funcao) = TRUE THEN
                               RETURN TRUE
                            ELSE
                               RETURN FALSE
                            END IF
                         ELSE
                            RETURN FALSE
                         END IF
                     END IF
                  ELSE
                     RETURN TRUE
                  END IF
               ELSE
                  IF sup376_insere_array(l_funcao) = TRUE THEN
                     IF sup376_insere_totais(l_funcao) = TRUE THEN
                        RETURN TRUE
                     ELSE
                        RETURN FALSE
                     END IF
                  ELSE
                     RETURN FALSE
                  END IF
               END IF
            END IF
         END IF
       END IF
    END IF
 ELSE
    ##O.S 286008 MULT.INS.ESTADUAIS
    CALL sup1049_verifica_registros(p_cod_empresa,
                                    p_dados_tela.cod_fornecedor,
                                    p_dados_tela.num_aviso_rec,
                                    "EXCLUSAO")
    ##O.S 286008 MULT.INS.ESTADUAIS
    LET int_flag = 0
    RETURN FALSE
 END IF

 IF m_wms_instal = 'S' THEN
    CALL wmsr75_gera_integracao_ibt_admin(p_cod_empresa,
                                          p_dados_tela.num_aviso_rec,
                                          m_horario_alteracao_wms,
                                          CURRENT YEAR TO SECOND,
                                          'SUP3760',
                                          p_dados_tela.cod_fornecedor) RETURNING l_status
    # Não tratar o retorno l_status, pois a execução desta RNL não poderá afetar o processamento normal do SUP. Apenas programas WMS tratarão este retorno.
 END IF

 RETURN TRUE # OS 561019 - Faltava este return true
  END FUNCTION

#-----------------------------------------#
 FUNCTION sup3760_valida_nf_cadastrada()#607387
#-----------------------------------------#
  DEFINE l_cliente_97 SMALLINT

  IF find4GLFunction("supy84_verifica_cliente_97") THEN
     IF supy84_verifica_cliente_97() = TRUE THEN
        LET  l_cliente_97 = TRUE
     ELSE
        LET l_cliente_97 = FALSE
     END IF
  ELSE
     LET l_cliente_97 = FALSE
  END IF

  IF l_cliente_97 = TRUE THEN
     WHENEVER ERROR CONTINUE
       SELECT nf_sup.cod_empresa
         FROM nf_sup
        WHERE nf_sup.cod_empresa    = p_cod_empresa
          AND nf_sup.num_aviso_rec  <> p_dados_tela.num_aviso_rec
          AND nf_sup.num_nf         = p_dados_tela.num_nf
          AND nf_sup.ser_nf         = p_dados_tela.ser_nf
          AND nf_sup.ies_especie_nf = p_dados_tela.ies_especie_nf
          AND nf_sup.cod_fornecedor = p_dados_tela.cod_fornecedor
          AND nf_sup.dat_emis_nf    = p_dados_tela.dat_emis_nf
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 OR
        sqlca.sqlcode = -284 THEN
        CALL log0030_mensagem('Nota Fiscal já cadastrada!','exclamation')
        RETURN TRUE
     ELSE
        WHENEVER ERROR CONTINUE
          SELECT nf_sup.cod_empresa
            FROM nf_sup
           WHERE nf_sup.cod_empresa    = p_cod_empresa
             AND nf_sup.num_nf         = p_dados_tela.num_nf
             AND nf_sup.ser_nf         <> p_dados_tela.ser_nf
             AND nf_sup.ies_especie_nf = p_dados_tela.ies_especie_nf
             AND nf_sup.cod_fornecedor = p_dados_tela.cod_fornecedor
             AND nf_sup.dat_emis_nf    = p_dados_tela.dat_emis_nf
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 0 OR
           sqlca.sqlcode = -284 THEN
           CALL log0030_mensagem('Nota Fiscal já cadastrada!','exclamation')
           RETURN TRUE
        END IF
     END IF
  END IF

  RETURN FALSE

 END FUNCTION

#--------------------------------#
 FUNCTION sup376_pc_consignacao()
#--------------------------------#

   DEFINE p_conta_consig SMALLINT

     IF p_tip_desp_cons_fat IS NULL OR
        p_tip_desp_cons_fat = 0 THEN
        RETURN FALSE
     END IF

     WHENEVER ERROR CONTINUE

     LET p_conta_consig = 0

     SELECT COUNT(*)
       INTO p_conta_consig
       FROM ordem_sup
      WHERE cod_empresa     = p_cod_empresa
        AND num_pedido      = p_array_pedidos[1].num_pedido
        AND cod_fornecedor  = p_dados_tela.cod_fornecedor
        AND cod_tip_despesa = p_tip_desp_cons_fat

     IF p_conta_consig > 0 THEN
        RETURN TRUE
     ELSE
        RETURN FALSE
     END IF

     WHENEVER ERROR STOP

 END FUNCTION

#----------------------------------------#
 FUNCTION sup376_insere_totais(p_funcao)
#----------------------------------------#
 DEFINE p_funcao             CHAR(30)
 DEFINE p_ies_incl_cap2      CHAR(01),
        p_ies_incl_contab    CHAR(01),
        l_val_ipi_nf         DECIMAL(17,2),
        l_val_tot_icms_nf_d  DECIMAL(17,2),
        l_val_tot_nf_d       DECIMAL(17,2),
        l_desc_imposto       CHAR(14)

 DEFINE l_alt_tot_icms_nf_d  SMALLINT

 INITIALIZE p_ies_incl_cap2, p_ies_incl_contab, l_desc_imposto TO NULL

 LET p_funcao_menu = p_funcao
 CALL log006_exibe_teclas("01 02 03 07", p_versao)
 CURRENT WINDOW IS w_sup37601
 IF p_funcao <> "MODIFICACAO" THEN
    IF p_nfe_import = TRUE OR p_nfm_import = TRUE OR (p_dados_tela.ies_especie_nf = 'NFD' AND find4GLFunction('wmsy18_vincula_q04') AND m_wms_q04 IS NOT NULL) THEN
    ELSE
       LET p_dados_tela_f.val_ipi_nf        = 0
       LET p_dados_tela_f.val_tot_icms_nf_d = 0
       LET p_dados_tela_f.val_tot_nf_d      = 0
    END IF
 ELSE
    # CH 739942 - Rafael F. B. - 11/01/2010 #
    LET l_alt_tot_icms_nf_d = FALSE

    IF m_permite_alt_inf_compl_nf_cap = "S" AND m_existe_cap THEN
       LET l_alt_tot_icms_nf_d = TRUE
    END IF
 END IF

 IF sup3760_verifica_desconto_acrescimo_nf() THEN
  LET p_dados_tela_f.ies_desc_acres = "S"
 ELSE LET p_dados_tela_f.ies_desc_acres = "N"
 END IF

 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                              p_cod_empresa,
                              p_dados_tela.num_aviso_rec) THEN
    LET p_dados_tela_f.val_tot_nf_d = 0
 END IF

 INPUT BY NAME p_dados_tela_f.* WITHOUT DEFAULTS

    BEFORE INPUT
       LET l_val_ipi_nf = p_dados_tela_f.val_ipi_nf
       LET l_val_tot_icms_nf_d  = p_dados_tela_f.val_tot_icms_nf_d
       LET l_val_tot_nf_d = p_dados_tela_f.val_tot_nf_d

    BEFORE FIELD val_ipi_nf
       # CH 739942 - Rafael F. B. - 12/01/2010 #
       IF p_funcao = "MODIFICACAO" THEN
          IF l_alt_tot_icms_nf_d THEN
             NEXT FIELD val_tot_icms_nf_d
          ELSE
             IF p_entra_tot = "N" THEN
                EXIT INPUT
             END IF
          END IF
       END IF
#      LET l_val_ipi_nf = p_dados_tela_f.val_ipi_nf

    AFTER FIELD val_ipi_nf
       IF p_dados_tela_f.val_ipi_nf IS NULL OR
          p_dados_tela_f.val_ipi_nf = " " THEN
          ERROR "Informe Total de IPI"
          NEXT FIELD val_ipi_nf
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(1) THEN
             IF l_val_ipi_nf <> p_dados_tela_f.val_ipi_nf THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_dados_tela_f.val_ipi_nf = l_val_ipi_nf
                DISPLAY p_dados_tela_f.val_ipi_nf TO val_ipi_nf
                NEXT FIELD val_ipi_nf
             END IF
          END IF
       END IF

    BEFORE FIELD val_tot_icms_nf_d
#      LET l_val_tot_icms_nf_d  = p_dados_tela_f.val_tot_icms_nf_d

    AFTER FIELD val_tot_icms_nf_d
       IF p_dados_tela_f.val_tot_icms_nf_d IS NULL OR
          p_dados_tela_f.val_tot_icms_nf_d = " " THEN
          ERROR "Informe Total de ICMS"
          NEXT FIELD val_tot_icms_nf_d
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(1) THEN
             IF l_val_tot_icms_nf_d <> p_dados_tela_f.val_tot_icms_nf_d THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_dados_tela_f.val_tot_icms_nf_d = l_val_tot_icms_nf_d
                DISPLAY p_dados_tela_f.val_tot_icms_nf_d TO val_tot_icms_nf_d
                NEXT FIELD val_tot_icms_nf_d
             END IF
          END IF

          # CH 739942 - Rafael F. B. - 12/01/2010 #
          IF l_alt_tot_icms_nf_d THEN
             EXIT INPUT
          END IF
       END IF

    BEFORE FIELD val_tot_nf_d
       IF p_funcao = "MODIFICACAO" THEN
          IF sup3760_verifica_devolucao("MODIF") = TRUE THEN
            NEXT FIELD ies_desc_acres
          END IF
          CALL sup376_busca_nf_sup(p_dados_tela.num_aviso_rec)
          IF sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                        "N") THEN
             IF fgl_lastkey() = fgl_keyval("UP") OR
                fgl_lastkey() = fgl_keyval("LEFT") THEN
                NEXT FIELD val_tot_icms_nf_d
             ELSE
                IF sup0631_verifica_relac("NF",
                                          p_nf_sup.num_nf,
                                          p_nf_sup.ser_nf,
                                          p_nf_sup.ssr_nf,
                                          p_nf_sup.cod_fornecedor) = TRUE THEN
                   NEXT FIELD val_tot_icms_nf_d
                ELSE
                   NEXT FIELD ies_desc_acres
                END IF
             END IF
          END IF
       END IF
#      LET l_val_tot_nf_d = p_dados_tela_f.val_tot_nf_d

    AFTER FIELD val_tot_nf_d
       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) THEN
          IF p_dados_tela_f.val_tot_nf_d > 0 THEN
             LET p_dados_tela_f.val_tot_nf_d = 0

             DISPLAY p_dados_tela_f.val_tot_nf_d TO val_tot_nf_d

             CALL log0030_mensagem("Nota fiscal de complemento de imposto não deve ter valor informado.","exclamation")

             NEXT FIELD val_tot_nf_d
          END IF
       END IF
       IF p_dados_tela_f.val_tot_nf_d IS NULL OR
          p_dados_tela_f.val_tot_nf_d = " " THEN
          ERROR "Informe Total da NF"
          NEXT FIELD val_tot_nf_d
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(1) THEN
             IF l_val_tot_nf_d <> p_dados_tela_f.val_tot_nf_d THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_dados_tela_f.val_tot_nf_d = l_val_tot_nf_d
                DISPLAY p_dados_tela_f.val_tot_nf_d TO val_tot_nf_d
                NEXT FIELD val_tot_nf_d
             END IF
          END IF

          IF p_dados_tela_f.val_tot_nf_d <> l_val_tot_nf_d THEN
             IF sup3762_verifica_impostos_ja_pagos() THEN
                NEXT FIELD val_tot_nf_d
             END IF
          END IF
       END IF

    BEFORE FIELD ies_desc_acres
       #IF p_funcao <> "INCLUSAO" THEN
       #   EXIT INPUT
       #END IF

    AFTER FIELD ies_desc_acres
       IF p_dados_tela_f.ies_desc_acres IS NOT NULL AND
          p_dados_tela_f.ies_desc_acres <> " "      THEN
          IF (p_dados_tela_f.ies_desc_acres = "S" AND p_funcao = "INCLUSAO")
          OR (p_dados_tela_f.ies_desc_acres = "S" AND p_funcao = "MODIFICACAO" AND sup3760_verifica_desconto_acrescimo_nf() = FALSE)
          OR (p_dados_tela_f.ies_desc_acres = "N" AND p_funcao = "MODIFICACAO" AND sup3760_verifica_desconto_acrescimo_nf() = TRUE)THEN
             CALL log0030_mensagem("Deve-se informar apenas 'I' (Desc/Acresc por Item) ou 'T' (Desc/Acres Geral) para efetuar manutenção dos descontos/acréscimos.","info")
             NEXT FIELD ies_desc_acres
          END IF
       ELSE
          CALL log0030_mensagem(" Informe (T) ou (I).","info")
          NEXT FIELD ies_desc_acres
       END IF

    AFTER INPUT
       IF NOT int_flag THEN
          IF p_dados_tela_f.val_ipi_nf IS NULL OR
             p_dados_tela_f.val_ipi_nf = " " THEN
             ERROR "Informe Total de IPI"
             NEXT FIELD val_ipi_nf
          END IF
          IF p_dados_tela_f.val_tot_icms_nf_d IS NULL OR
             p_dados_tela_f.val_tot_icms_nf_d = " " THEN
             ERROR "Informe Total de ICMS"
             NEXT FIELD val_tot_icms_nf_d
          END IF
          IF p_dados_tela_f.val_tot_nf_d IS NULL OR
             p_dados_tela_f.val_tot_nf_d = " " THEN
             ERROR "Informe Total da NF"
             NEXT FIELD val_tot_nf_d
          END IF
          IF p_dados_tela_f.ies_desc_acres IS NULL OR
             p_dados_tela_f.ies_desc_acres = " " THEN
             CALL log0030_mensagem(" Informe (T) ou (I).","info")
             NEXT FIELD ies_desc_acres
          END IF
       END IF

     ON KEY (f1, control-w)
        #lds IF NOT LOG_logix_versao5() THEN
        #lds CONTINUE INPUT
        #lds END IF
       CALL sup376_help()

 END INPUT

 IF p_dados_tela.cod_fornecedor IS NOT NULL THEN
    IF sup376_verifica_fornecedor() = FALSE THEN
       ERROR "Fornecedor excluido durante a operação."
       SLEEP 2
       LET int_flag = 1
    END IF
 END IF
 IF int_flag = 0 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF
 END FUNCTION

#---------------------------------------#
 FUNCTION sup376_insere_array(p_funcao)
#---------------------------------------#
 DEFINE p_funcao      CHAR(30),
        p_val_liquido_item   LIKE aviso_rec.val_liquido_item,
        p_val_liquido_ant    LIKE aviso_rec.val_liquido_item,
        p_par_forn           CHAR(01),
        p_ind_ant            SMALLINT,
        l_forn_possui_pc     SMALLINT,
        l_fat_conver_consig  LIKE item_fornec.fat_conver_unid,
        l_sucesso            SMALLINT,
        l_item_wms           SMALLINT,
        l_ind_envio_interf   SMALLINT,
        l_is_clie_319        SMALLINT,
        l_cod_cla_fisc_nf    LIKE aviso_rec.cod_cla_fisc_nf,
        l_qtd_declarad_nf    LIKE aviso_rec.qtd_declarad_nf,
        l_val_liquido_item   LIKE aviso_rec.val_liquido_item,
        l_pct_ipi            LIKE aviso_rec.pct_ipi_tabela,
        l_ies_item_estoq     LIKE aviso_rec.ies_item_estoq,
        l_item_balanca       LIKE sup_ctr_balanca.item,
        l_pes_liquido        LIKE sup_ctr_balanca.pesagem_entrada,
        l_status             SMALLINT,
        l_dat_fim_valid      LIKE cod_fiscal_sup.dat_fim_valid,
        l_den_item           LIKE item.den_item,
        l_aux                SMALLINT,
        l_val_tot_piscofins  DECIMAL(17,6),
        l_grade              SMALLINT,
        l_perg_it_movto_estoq CHAR(1),         #Vanderlei - OS 400614 #
        l_entra_grades        SMALLINT,
        l_ies_situacao        CHAR(01),
        l_sucesso_sql         SMALLINT,        # WMS - OS 450083
        l_ies_item_wms        SMALLINT,         # WMS - OS 450083
        l_val_da_icms         DECIMAL(15,2),
        l_msg                 CHAR(100),#502143
        l_bloq_entr_preco     CHAR(01), #733238#
        l_bloq_entr_data      CHAR(01),  #733238#
        l_ind                 SMALLINT

 DEFINE la_dados_ant      ARRAY[999] OF RECORD
                          pre_unit_nf     LIKE aviso_rec.pre_unit_nf,
                          qtd_declarad_nf LIKE aviso_rec.qtd_declarad_nf
                          END RECORD

 CALL log006_exibe_teclas("01 02 03 07", p_versao)
 CURRENT WINDOW IS w_sup37601
 LET p_primeira_vez = TRUE
 LET p_funcao_menu = p_funcao

 IF p_funcao = "MODIFICACAO" THEN
    CALL set_count(p_ind)
 ELSE
    CALL set_count(999)
 END IF

 IF p_funcao <> "MODIFICACAO" THEN
    IF p_dados_tela.ies_especie_nf = "NFD" THEN
       IF g_ser_mark = FALSE THEN
          INITIALIZE p_array TO NULL
       END IF
    END IF
 END IF
 IF p_funcao = "INCLU.ITENS" THEN
    INITIALIZE p_ordens, p_ordens_p1, p_ordens_p2, p_ordens_p3, p_ordens_p4 TO NULL
    INITIALIZE p_pedidos, p_pedidos_p1, p_pedidos_p2, p_pedidos_p3 TO NULL
    INITIALIZE p_prog_ordem TO NULL
    INITIALIZE p_prog_ordem1 TO NULL
    INITIALIZE p_prog_ordem2 TO NULL
    IF p_dados_tela.ies_especie_nf = "NFD" OR
       p_dados_tela.ies_especie_nf = "NFR" OR
      (p_dados_tela.ies_especie_nf = "NFE" AND  ### OS 511148
       p_dados_tela.ies_nf_aguard_nfe = "X")  THEN

    ELSE
# OS 463020
       WHILE TRUE
#      LABEL pedido:
          IF sup376_entrada_pedido_ordem(p_funcao) = FALSE THEN
             LET int_flag = 1
             RETURN FALSE
          ELSE
             IF (p_pedidos[1,5] = "XXXXX") OR
                (p_pedidos IS NULL) THEN
                IF p_par_sup.ies_entrada_sem_pc = "N" AND
                   p_ies_informou_ped = "N" AND
                   p_ies_entr_sem_ped = FALSE THEN

                   LET l_forn_possui_pc = TRUE
                   IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
                      LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
                   END IF

                   IF l_forn_possui_pc THEN
                      IF p_dados_tela.ies_especie_nf IS NOT NULL THEN
                         IF (p_dados_tela.ies_especie_nf <> "NFR" AND
                             p_dados_tela.ies_especie_nf <> "NFD" AND
                             p_dados_tela.ies_especie_nf <> "NFC" AND
                             p_dados_tela.ies_especie_nf <> "CON" AND
                             p_dados_tela.ies_especie_nf <> "NFE") OR
                            (p_par_sup_compl.ies_nf_compl_preco = "4" AND
                             (p_dados_tela.ies_especie_nf = "NFE" OR
                              p_dados_tela.ies_especie_nf = "NFC")) OR
                            (p_par_sup_compl.ies_nf_compl_preco = "3" AND
                             p_dados_tela.ies_especie_nf = "NFC") OR
                            (p_par_sup_compl.ies_nf_compl_preco = "2" AND
                             p_dados_tela.ies_especie_nf = "NFE") THEN
                            CALL log0030_mensagem(" Funcao nao permitida, empresa nao permite entrada sem pedido de compra","exclamation")
# 463020
                            CONTINUE WHILE
#                           GOTO pedido
                         END IF
                      END IF
                   END IF
                ELSE
                   IF p_dados_tela.ies_especie_nf = "NFM" AND m_controla_gao = "S" THEN
                      IF p_array_pedidos[1].num_pedido IS NULL OR
                         p_array_pedidos[1].num_pedido = " " THEN
                         CALL log0030_mensagem(" Função não permitida, NFM com controle de GAO exige pedido de compra","exclamation")
# 463020
                         CONTINUE WHILE
#                        GOTO pedido
                      END IF
                   END IF
                END IF
             END IF
          END IF
# 463020
          EXIT WHILE
       END WHILE
    END IF
 END IF

 IF p_funcao = "INCLUSAO" OR
    p_funcao = "INCLU.ITENS" THEN
    IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
       LET p_nf_sup.val_ipi_nf = 0
       LET p_nf_sup.val_tot_icms_nf_d = 0
       LET p_nf_sup.val_tot_nf_d = 0
       LET p_nf_sup.val_despesa_aces = 0
       LET p_dados_tela_f.val_ipi_nf = 0
       LET p_dados_tela_f.val_tot_icms_nf_d = 0
       LET p_dados_tela_f.val_tot_nf_d      = 0
    END IF

    FOR p_ind9 = 1 TO 999
       IF p_array_compl[p_ind9].num_oc IS NOT NULL AND
          p_array_compl[p_ind9].num_oc <> 0 THEN
          IF sup376_verifica_controla_valor(p_array_compl[p_ind9].num_oc) = TRUE THEN
             LET p_array[p_ind9].pre_unit_nf = NULL
          END IF
          CALL sup376_processa_conversao(p_ind9)
          IF p_houve_erro THEN
             RETURN FALSE
          END IF
       END IF
    END FOR
 END IF

 IF p_funcao = "MODIFICACAO" THEN
    FOR p_ind9 = 1 TO 999
        IF p_array[p_ind9].cod_item IS NOT NULL THEN
           LET p_array_compl[p_ind9].ies_bloqueada = "N"
        ELSE
           EXIT FOR
        END IF
    END FOR
 END IF
 IF p_funcao = "INCLU.ITENS"
 THEN
    FOR p_ind9 = 1 TO 999
        IF p_array[p_ind9].cod_item IS NOT NULL THEN
           LET  p_array[p_ind9].seq = (p_prx_seq - 1) + p_ind9
        END IF
    END FOR
 END IF
 IF p_aguard_5 = TRUE THEN
    IF p_funcao = "INCLUSAO" THEN
       LET p_dados_tela.ies_nf_aguard_nfe = "5"
       DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
    END IF

    IF p_ies_cod_operac IS NULL OR
       p_ies_cod_operac = "N" OR
       p_ies_cod_operac = " " THEN
    ELSE
       DISPLAY BY NAME p_dados_tela.cod_operac_estoq
    END IF
 END IF

 IF p_dados_tela.ies_nf_aguard_nfe = "D" AND
    p_funcao = "INCLUSAO" THEN
    IF g_ser_mark = FALSE THEN
       INITIALIZE p_array TO NULL
    END IF
 END IF

 LET m_alterou_preco = FALSE

 FOR l_aux = 1 TO 999
    LET la_dados_ant[l_aux].pre_unit_nf   = p_array[l_aux].pre_unit_nf
    LET la_dados_ant[l_aux].qtd_declarad_nf = p_array[l_aux].qtd_declarad_nf
 END FOR

 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                              p_cod_empresa,
                              p_dados_tela.num_aviso_rec) THEN
    FOR l_aux = 1 TO 999
       LET p_array[l_aux].cod_item         = " "
       LET p_array[l_aux].qtd_declarad_nf  = 0
       LET p_array[l_aux].pre_unit_nf      = 0
       LET p_array[l_aux].val_liquido_item = 0
    END FOR
 END IF

 IF m_selec_itens_nfp_importacao = 'S' THEN
    IF p_nfe_import = TRUE AND
       p_dados_tela.ies_especie_nf = 'NFP' THEN
        CALL sup1855_seleciona_itens_nfp_import(p_cod_empresa,
                                               p_dados_tela.num_aviso_rec,
                                               p_processo_imp.num_processo)
    END IF
 END IF

 CURRENT WINDOW IS w_sup37601
 INPUT ARRAY p_array WITHOUT DEFAULTS FROM s_sup37601.*

    --#BEFORE INPUT
       --#  CALL fgl_dialog_setkeylabel('insert',NULL)
       --#  CALL fgl_dialog_setkeylabel('delete',NULL)
       IF find4glfunction('supy168_carrega_class_fisc_item') THEN
          FOR l_ind = 1 TO 999
             IF p_array[l_ind].cod_item IS NOT NULL AND
                p_array[l_ind].cod_item <> " " THEN
                CALL supy168_carrega_class_fisc_item(p_cod_empresa,
                                                  p_array[l_ind].cod_item)
                   RETURNING p_array[l_ind].cod_cla_fisc_nf
                   IF l_ind <= 4 THEN
                      DISPLAY p_array[l_ind].cod_cla_fisc_nf TO s_sup37601[l_ind].cod_cla_fisc_nf
                   END IF
             ELSE
                EXIT FOR
             END IF
          END FOR
       END IF

    ON KEY (INSERT)
       NEXT FIELD seq

    ON KEY (DELETE)
       NEXT FIELD seq

    BEFORE FIELD seq
       IF m_ver_aviso_rec = TRUE THEN
          EXIT INPUT
       END IF
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

       IF p_funcao = "INCLU.ITENS" THEN
          LET p_array[1].seq = p_prx_seq
          DISPLAY p_array[1].seq TO s_sup37601[1].seq
       END IF

       IF p_funcao <> "MODIFICACAO" THEN
          IF p_dados_tela.ies_especie_nf = "NFD" THEN
             IF g_ser_mark = FALSE THEN
                CALL sup376_inicializa_nfd_nfr()
                DISPLAY p_array[p_ind].* TO s_sup37601[p_ind1].*
             END IF
          END IF
       END IF

        ### OS 159597
       IF m_contr_pes_rec = 'S' THEN #eduardo - o.s.290538 19/11/03
          WHENEVER ERROR CONTINUE
          INITIALIZE l_item_balanca, l_pes_liquido TO NULL
          SELECT item,
                 qtd_peso_entrada - qtd_peso_saida
            INTO l_item_balanca,
                 l_pes_liquido
            FROM sup_ctr_balanca
           WHERE empresa           = p_cod_empresa
             AND num_docum         = p_dados_tela.num_nf
             AND serie_nota_fiscal = p_dados_tela.ser_nf
             AND subserie_nf       = p_dados_tela.ssr_nf
             AND fornecedor        = p_dados_tela.cod_fornecedor
             AND seq_nota_fiscal   = p_ind
             AND tip_pesagem       = "1"
             AND aviso_recebto     IS NULL
          WHENEVER ERROR STOP
       END IF

       CURRENT WINDOW IS w_sup37601
       NEXT FIELD cod_item

    BEFORE FIELD cod_item
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       IF (p_dados_tela.ies_especie_nf <> "NFD" AND
           p_dados_tela.ies_especie_nf <> "NFR" AND
          (p_array_compl[p_ind].num_pedido IS NULL OR
           p_array_compl[p_ind].num_pedido = " "   OR
           p_array_compl[p_ind].num_pedido = 0))   OR
          (p_dados_tela.ies_especie_nf = "NFR" OR
           p_dados_tela.ies_especie_nf = "NFD") THEN
          CALL sup3760_botao_zoom("ON",3,68)
       END IF
       IF m_selec_itens_nfp_importacao = 'N' THEN
          IF p_funcao = "INCLUSAO" THEN
             LET p_array[p_ind].seq = p_ind
             DISPLAY p_array[p_ind].seq TO s_sup37601[p_ind1].seq
          END IF
       ELSE
          IF p_nfe_import = FALSE THEN
             IF p_funcao = "INCLUSAO" THEN
                LET p_array[p_ind].seq = p_ind
                DISPLAY p_array[p_ind].seq TO s_sup37601[p_ind1].seq
             END IF
          END IF
       END IF
       IF p_funcao = "INCLU.ITENS" THEN
          IF p_ind1 > 1 THEN
             LET p_sequencia = NULL
             LET p_sequencia = p_array[p_ind - 1].seq
             LET p_sequencia = p_sequencia + 1
             LET p_array[p_ind].seq = p_sequencia
             DISPLAY p_array[p_ind].seq TO s_sup37601[p_ind1].seq
          END IF
       END IF

       INITIALIZE p_cod_moeda_ped TO NULL
       IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
          LET p_cod_moeda_ped = p_processo_imp.cod_moeda
       ELSE
          CALL sup376_busca_pedido_sup(p_cod_empresa, p_array_compl[p_ind].num_pedido)
          LET p_cod_moeda_ped = p_pedido_sup.cod_moeda
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          LET p_array_compl[p_ind].qtd_declarad_nf = NULL
          IF p_array[p_ind].cod_item IS NULL OR
             #nota de complemento de imposto só tem 1 item já que é sem informações..
             (sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                        p_cod_empresa,
                                        p_dados_tela.num_aviso_rec) AND
              p_ind >1) THEN
             LET p_entra_tot = "S"
             EXIT INPUT
          END IF

          CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array[p_ind].seq)
          LET p_array_compl[p_ind].ies_bloqueada = "N"

          ### Nota de complemento de valor permite alterar o item!!!
          IF sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                                       p_cod_empresa,
                                       p_dados_tela.num_aviso_rec) = FALSE THEN
             NEXT FIELD cod_unid_med_nf
          END IF

       END IF
       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) AND
          m_classif_nfc <> "1" THEN #704064
          LET p_array[p_ind].cod_item = " "
          NEXT FIELD qtd_declarad_nf
       END IF

    AFTER FIELD cod_item
       CALL sup3760_botao_zoom("OFF",3,68)
       IF p_funcao = "MODIFICACAO" THEN
          ### Nota de complemento de valor permite alterar o item!!!
          IF sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                                     p_cod_empresa,
                                     p_dados_tela.num_aviso_rec) = FALSE THEN
             NEXT FIELD den_item
          END IF
       END IF

       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

        #534641

       IF find4glfunction('supy168_carrega_class_fisc_item') THEN
          IF p_array[p_ind].cod_item IS NOT NULL AND
             p_array[p_ind].cod_item <> " " THEN
             CALL supy168_carrega_class_fisc_item(p_cod_empresa,
                                               p_array[p_ind].cod_item)
                RETURNING p_array[p_ind].cod_cla_fisc_nf
                DISPLAY p_array[p_ind].cod_cla_fisc_nf TO s_sup37601[p_ind1].cod_cla_fisc_nf
          END IF
       END IF


       IF log0150_verifica_se_tabela_existe("sup_fornec_tri_ter") THEN
          IF p_dados_tela.ies_especie_nf = "NFR" THEN
             IF p_dados_tela.ies_nf_aguard_nfe = "A" AND
                p_array[p_ind].cod_item IS NOT NULL AND
                p_array[p_ind].cod_item <> " " THEN
                IF NOT sup3760_cad_item_triang(p_dados_tela.cod_fornecedor,
                                               p_dados_tela.cod_operacao,
                                               p_array[p_ind].cod_item, "A") THEN
                   CALL log0030_mensagem("Item não cadastrado no programa de triangulação de terceiros (sup1648)","info")
                   NEXT FIELD cod_item
                END IF
             END IF
             IF p_dados_tela.ies_nf_aguard_nfe = "B" AND
                p_array[p_ind].cod_item IS NOT NULL AND
                p_array[p_ind].cod_item <> " " THEN
                IF NOT sup3760_cad_item_triang(p_dados_tela.cod_fornecedor,
                                               p_dados_tela.cod_operacao,
                                               p_array[p_ind].cod_item, "B") THEN
                   CALL log0030_mensagem("Item não cadastrado no programa de triangulação de terceiros (sup1648)","info")
                   NEXT FIELD cod_item
                END IF
             END IF
          END IF
       END IF
       #534641

       #------------------------------------------------------------------------------------------#
       #Se for informado codigo de barra do item em tela, este será convertido para o código de
       #cadastro do item se o parametro para conversao automática estiver ativo e codigo informado
       #estiver registrado como codigo de barra valido na tabela ITEM_BARRA ou ITEM_BARRA_FORNEC.
       LET p_array[p_ind].cod_item =
           sup3760_conversao_item_codigo_barra(p_array[p_ind].cod_item,p_dados_tela.cod_fornecedor)
       DISPLAY p_array[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
       #------------------------------------------------------------------------------------------#

       IF m_ies_cit_item = "S" THEN
          IF sup3760_testa_cit_item(p_array[p_ind].cod_item) THEN
             ERROR "Produto Citricola, verificar tabela CIT_ITEM "
             NEXT FIELD cod_item
          END IF
       END IF

       CALL sup376_busca_item(p_cod_empresa, p_array[p_ind].cod_item)
            RETURNING p_status
       IF p_status = FALSE THEN
          #Se não existe na tabela ITEM, pesquisar o código do item informado
          #como código do item no cliente na tabela CLIENTE_ITEM.
          IF p_array[p_ind].cod_item IS NOT NULL AND
             p_array[p_ind].cod_item <> " " THEN
             IF p_dados_tela.ies_especie_nf = "NFD" OR
                p_dados_tela.ies_especie_nf = "NFR" OR ### OS 511148
                (p_dados_tela.ies_nf_aguard_nfe = "X" AND
                p_dados_tela.ies_especie_nf = "NFE") THEN
                IF sup376_verifica_cliente_item() = FALSE THEN
                   ERROR " Material nao cadastrado "
                   NEXT FIELD cod_item
                END IF
             ELSE
                ERROR " Material nao cadastrado "
                NEXT FIELD cod_item
             END IF
          ELSE
             IF p_dados_tela.ies_especie_nf = "NFC" AND
                m_classif_nfc <> "1" THEN #704064
                LET p_array[p_ind].cod_item = " "
               END IF
          END IF
       END IF

       #OS 492297
       IF p_array[p_ind].cod_item IS NOT NULL AND
          p_array[p_ind].cod_item <> " " THEN
          IF p_item.ies_situacao = 'I' THEN
          ## Permitir entrada de nota de devolução de cliente ou NFC para item inativo.
             IF (p_dados_tela.ies_especie_nf = 'NFD' OR p_ies_tip_entrada = '5') OR
                (p_dados_tela.ies_especie_nf = 'NFC') THEN
                IF log0040_confirm(0,0,'Item INATIVO. Continua processamento?') THEN
                ELSE NEXT FIELD cod_item
                END IF
             ELSE
                CALL log0030_mensagem('Item INATIVO.','excla')
                NEXT FIELD cod_item
             END IF
          ELSE
             IF p_item.ies_situacao = 'C' THEN
                IF p_ies_rec_item_cancel = 'S' THEN
                   IF log0040_confirm(0,0,'Material está CANCELADO. Continua processamento? ') THEN
                   ELSE NEXT FIELD cod_item
                   END IF
                ELSE
                   CALL log0030_mensagem('Material está CANCELADO.','excla')
                   NEXT FIELD cod_item
                END IF
             END IF
          END IF
       END IF

       IF sup3762_verifica_material_ipi(TRUE) = FALSE  THEN
          LET p_array_compl[p_ind].ies_item_estoq = "N"
          LET p_array_compl[p_ind].move_estoque   = "N"
          LET p_array_compl[p_ind].ies_liberacao_insp = "N"
          LET p_array_compl[p_ind].ies_controle_lote  = "N"
          LET p_array_compl[p_ind].cod_local_estoq    = " "
          LET p_array_compl[p_ind].cod_cla_fisc = " "
          LET p_array_compl[p_ind].pct_ipi_tabela = 0
       END IF

       IF find4GLFunction('supy22_busca_den_item') THEN
          CALL supy22_busca_den_item(p_cod_empresa, p_array_compl[p_ind].num_oc)
               RETURNING p_status, l_den_item
       ELSE
          LET p_status = FALSE
          LET l_den_item = 0
       END IF

       IF p_status = TRUE THEN
          LET p_array[p_ind].den_item = l_den_item
       END IF

       DISPLAY p_array[p_ind].den_item        TO s_sup37601[p_ind1].den_item
       DISPLAY p_array[p_ind].cod_unid_med_nf TO s_sup37601[p_ind1].cod_unid_med_nf

       #------------- DEV. CLIENTES ---------------#
       IF (p_dados_tela.ies_especie_nf = "NFD" OR
           p_ies_tip_entrada = "5") THEN
          IF p_array_compl[p_ind].ies_item_estoq = "S" THEN
             IF p_par_sup_compl.cod_operac_dev_cli IS NOT NULL AND
                p_par_sup_compl.cod_operac_dev_cli <> " " THEN
             ELSE
                ERROR " Operacao de devolucao nao cadastrada - Ver SUP7160 "
                SLEEP 2
                LET p_array_compl[p_ind].ies_item_estoq = "N"
                LET p_array_compl[p_ind].move_estoque   = "N"
             END IF
          END IF
       END IF
       #------------- DEV. CLIENTES ---------------#
       LET l_ies_item_estoq = p_array_compl[p_ind].ies_item_estoq

       IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
          LET p_array_compl[p_ind].ies_item_estoq = "N"
       END IF

       #-- Desativa flag no SUP3762 para que não busque a conta contábil      --#
       #-- no SUP1400, e sim apenas continue fazendo como é feito atualmente  --#
       CALL sup3762_seta_cta_n_estoq_ret_terc("N",p_ind) #Vanderlei - OS 382815 #
       IF (p_dados_tela.ies_especie_nf = "NFR" AND ### OS 511148
          m_nfr_import = FALSE) OR
         (p_dados_tela.ies_nf_aguard_nfe = "X" AND
          p_dados_tela.ies_especie_nf = "NFE") THEN

          IF p_array[p_ind].cod_item IS NOT NULL AND
             p_array[p_ind].cod_item <> " " THEN
             IF l_ies_item_estoq = "S" THEN
                CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor, p_array[p_ind].cod_item,p_dados_tela.dat_emis_nf,p_dados_tela.num_aviso_rec)
                RETURNING p_par_forn
                IF p_par_forn <> "3" THEN
                   CALL sup376_busca_parametros_item(p_array[p_ind].cod_item)
                   LET p_parametros = p_item_parametro.parametros[2,2]
                   IF p_parametros = "1" THEN
                      LET p_array_compl[p_ind].move_estoque = "N"
                      LET p_array_compl[p_ind].ies_item_estoq = "N"
                   ELSE
                      IF p_dados_tela.ies_nf_aguard_nfe <> "4" AND
                         p_dados_tela.ies_nf_aguard_nfe <> "5" AND
                         (p_parametros <> "6" OR p_parametros IS NULL)THEN
                         IF (p_dados_tela.ies_especie_nf = "NFR"  OR
                             p_dados_tela.ies_especie_nf = "NFE") AND ### OS 511148
                            p_dados_tela.ies_nf_aguard_nfe = "X" THEN
                            LET p_array_compl[p_ind].move_estoque   = "N"
                            LET p_array_compl[p_ind].ies_item_estoq = "N"
                            #-- Ativa flag no SUP3762 para que busque a conta contábil no SUP1400  --#
                            CALL sup3762_seta_cta_n_estoq_ret_terc("S",p_ind) #Vanderlei - OS 382815 #
                         ELSE
                            IF log0040_confirm(18,10,"Este item deve ser movimentado na conta ESTOQUE?") THEN
                               LET p_array_compl[p_ind].move_estoque   = "S"
                               LET p_array_compl[p_ind].ies_item_estoq = "S"
                            ELSE
                               LET p_array_compl[p_ind].move_estoque   = "N"
                               LET p_array_compl[p_ind].ies_item_estoq = "N"
                               #-- Ativa flag no SUP3762 para que busque a conta contábil no SUP1400  --#
                               CALL sup3762_seta_cta_n_estoq_ret_terc("S",p_ind) #Vanderlei - OS 382815 #
                            END IF
                         END IF
                      ELSE
                         IF p_parametros = "6" THEN
                            IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
                               LET p_array_compl[p_ind].move_estoque = "N"
                               LET p_array_compl[p_ind].ies_item_estoq = "N"
                            ELSE
                               LET p_array_compl[p_ind].move_estoque = "S"
                               LET p_array_compl[p_ind].ies_item_estoq = "S"
                            END IF
                         ELSE
                            LET p_array_compl[p_ind].move_estoque = "N"
                            LET p_array_compl[p_ind].ies_item_estoq = "N"
                         END IF
                      END IF
                   END IF
                END IF
             END IF
          END IF
       END IF
       IF p_dados_tela.ies_especie_nf <> "NFD" AND
          p_dados_tela.ies_especie_nf <> "NFR" OR
          (p_dados_tela.ies_especie_nf = "NFR" AND
          p_array_compl[p_ind].move_estoque = "S") THEN
          CALL sup376_verifica_fornec_credenc(p_array[p_ind].cod_item,
                                              p_dados_tela.cod_fornecedor)
       END IF
       IF p_array_compl[p_ind].num_pedido IS NOT NULL AND
          p_array_compl[p_ind].num_pedido <> 0 AND
          p_array_compl[p_ind].num_pedido <> " " THEN
          INITIALIZE p_ordem_sup.* TO NULL
          CALL sup3762_busca_ordem_sup(p_cod_empresa,
                                      p_array_compl[p_ind].num_oc)
          LET p_cod_item_oc = p_ordem_sup.cod_item
          IF p_dados_tela.ies_nf_aguard_nfe <> "D"
          THEN
              IF p_cod_item_oc <> p_array[p_ind].cod_item THEN
                ERROR "Material informado difere do material da Ordem de Compra"
                NEXT FIELD cod_item
              END IF
          ELSE WHENEVER ERROR CONTINUE
               SELECT * FROM item_em_terc_envio
                WHERE cod_empresa    = p_cod_empresa
                  AND ped_compra     = p_array_compl[p_ind].num_pedido
                  AND cod_compon     = p_array[p_ind].cod_item
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0
               THEN
                   ERROR "Material informado nao consta como Item Enviado a Terceiros"
                   NEXT FIELD cod_item
               END IF
          END IF
       END IF

       IF l_item_balanca IS NOT NULL THEN
          IF l_item_balanca <> p_array[p_ind].cod_item THEN
             ERROR " Item informado difere do item da pesagem "
             NEXT FIELD cod_item
          END IF
       END IF

       #--inicio--vanderlei OS 400614 #
       CALL log2250_busca_parametro(p_cod_empresa,"pergunta_item_movto_estoq_nfd")
          RETURNING l_perg_it_movto_estoq, p_status

       IF p_array[p_ind].cod_item IS NOT NULL AND
          p_array[p_ind].cod_item <> " " THEN
          IF l_perg_it_movto_estoq = 'S' THEN
             IF (p_dados_tela.ies_especie_nf = 'NFD' OR p_ies_tip_entrada = '5') THEN
                IF sup3760_ies_item_ctr_estoq(p_cod_empresa, p_array[p_ind].cod_item) THEN
                   IF log0040_confirm(15,45,'Item deve movimentar estoque?') THEN
                      LET p_array_compl[p_ind].ies_item_estoq = 'S'
                      LET p_array_compl[p_ind].move_estoque   = 'S'
                   ELSE
                      LET p_array_compl[p_ind].ies_item_estoq = 'N'
                      LET p_array_compl[p_ind].move_estoque   = 'N'
                   END IF
                END IF
             END IF
          END IF
       END IF
       #---fim----vanderlei OS 400614 #

       LET l_forn_possui_pc = TRUE
       IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
          LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
       END IF

       IF  p_ies_informou_ped = 'N'
       AND NOT l_forn_possui_pc THEN

          IF find4GLFunction('supy12_item_possui_contrato') THEN
             CALL supy12_item_possui_contrato(p_dados_tela.cod_fornecedor, p_array[p_ind].cod_item)
                  RETURNING p_status, p_array[p_ind].pre_unit_nf
          ELSE
             LET p_status = TRUE
             LET p_array[p_ind].pre_unit_nf = 0
          END IF

          IF p_status = FALSE THEN
             CALL log0030_mensagem('Item não possui cotação de preço para este fornecedor.','exclamation')
             NEXT FIELD cod_item
          END IF
       END IF

       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) AND
          m_classif_nfc <> "1" THEN #704064

          IF p_array[p_ind].cod_item IS NOT NULL AND
             p_array[p_ind].cod_item <> " " THEN
             LET p_array[p_ind].cod_item = NULL

             DISPLAY p_array[p_ind].cod_item TO s_sup37601[p_ind1].cod_item

             CALL log0030_mensagem("Nota fiscal de complemento de imposto não deve ter item informado.","exclamation")

             NEXT FIELD cod_item
          END IF
       END IF

       #--inicio--OS 502143 #
       LET l_is_clie_319 = FALSE
       IF find4GLFunction('supy101_cliente_319') THEN
          LET l_is_clie_319 = supy101_cliente_319()
       END IF

       IF l_is_clie_319 = TRUE          AND
          (p_dados_tela.cod_operacao = '5.601'  OR
           p_dados_tela.cod_operacao = '6.601') AND
           m_cod_item_cred_transf_icms = p_array[p_ind].cod_item THEN
           IF p_ind <> 1 THEN
              CALL log0030_mensagem('Nota fiscal de transferência de ICMS deverá ter apenas um item.','exclamation')
              NEXT FIELD cod_item
           ELSE
              IF p_array[2].cod_item  IS NOT NULL AND
                 p_array[2].cod_item <> " " THEN
                 CALL log0030_mensagem('Nota fiscal de transferência de ICMS deverá ter apenas um item.','exclamation')
                 NEXT FIELD cod_item
              END IF
           END IF
       END IF
       #---fim----OS 502143 #


    BEFORE FIELD den_item
       IF m_wms_instal = 'S' THEN
          IF m_tipo_documento = "N" THEN
             IF find4GLFunction('wms6612_retorna_indicador_aduaneiro_ar') THEN
                IF m_indicador_aduaneiro IS NULL OR m_indicador_aduaneiro = ' ' THEN
                   LET m_indicador_aduaneiro = wms6612_retorna_indicador_aduaneiro_ar(p_cod_empresa, p_dados_tela.num_aviso_rec)
                END IF
                IF p_dados_tela.num_aviso_rec IS NOT NULL AND
                   p_dados_tela.num_aviso_rec <> 0 AND
                   p_array[p_ind].cod_item IS NOT NULL AND
                   p_array[p_ind].cod_item <> ' ' AND
                   m_indicador_aduaneiro = 'T' THEN
                   IF NOT wms6612_tem_conferencia_alfandegado_ar(p_cod_empresa, p_dados_tela.num_aviso_rec) THEN
                      CALL wms6612_incluir_peso_item(p_dados_tela.num_aviso_rec,
                                                     p_array[p_ind].cod_item,
                                                     p_array[p_ind].seq)
                      CURRENT WINDOW IS w_sup37601
                   END IF
                END IF
             END IF
          END IF
       END IF
       IF m_alter_den_item_nf = 'N' THEN
           IF fgl_lastkey() = fgl_keyval("UP") OR
              fgl_lastkey() = fgl_keyval("LEFT") THEN
              NEXT FIELD val_liquido_item
           ELSE
              NEXT FIELD cod_cla_fisc_nf
           END IF
       END IF
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       IF p_dados_tela.ies_nf_aguard_nfe = "6" THEN #OS477994
          IF sup3760_busca_den_item(p_array[p_ind].cod_item) THEN
             IF find4GLFunction('supy45_modifica_den_item') THEN
                IF supy45_modifica_den_item(p_dados_tela.num_aviso_rec, p_array[p_ind].seq, m_den_item) THEN

                   CALL log006_exibe_teclas("01 02 03 07", p_versao)
                   CURRENT WINDOW IS w_sup37601

                   LET p_array[p_ind].den_item = g_den_item
                   DISPLAY p_array[p_ind].den_item TO s_sup37601[p_ind1].den_item

                   IF fgl_lastkey() = fgl_keyval("UP")
                   OR fgl_lastkey() = fgl_keyval("LEFT") THEN
                      NEXT FIELD val_liquido_item
                   ELSE
                      NEXT FIELD cod_cla_fisc_nf
                   END IF
                END IF
             END IF

             CALL log006_exibe_teclas("01 02 03 07", p_versao)
             CURRENT WINDOW IS w_sup37601
          END IF
       END IF #--

    AFTER FIELD  den_item
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

    BEFORE FIELD cod_unid_med_nf
       CALL sup3760_botao_zoom("ON",3,68)
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       IF p_funcao = "MODIFICACAO" THEN
          CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array[p_ind].seq)
          DISPLAY p_array[p_ind].* TO s_sup37601[p_ind1].*
       END IF

    AFTER FIELD cod_unid_med_nf
       CALL sup3760_botao_zoom("OFF",3,68)
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       #809554
       IF p_array[p_ind].cod_unid_med_nf IS NOT NULL AND
          p_array[p_ind].cod_unid_med_nf <> " " THEN
          IF sup376_verifica_unid_med() = FALSE THEN
             ERROR " Código da unidade de medida não cadastrado. "
             NEXT FIELD cod_unid_med_nf
          END IF
       ELSE
          IF p_array[p_ind].cod_item IS NOT NULL AND
             p_array[p_ind].cod_item <> " " THEN
             ERROR " Código da unidade de medida não informado. "
             NEXT FIELD cod_unid_med_nf
          ELSE
             LET p_array[p_ind].cod_unid_med_nf = " "
          END IF
       END IF
       #809554
       IF p_funcao = "MODIFICACAO" AND
          p_array_compl[p_ind].ies_bloqueada = "S" THEN
          NEXT FIELD pre_unit_nf
       END IF

       IF find4GLFunction('supy31_valida_unid_med_fixa') THEN
          IF NOT supy31_valida_unid_med_fixa(p_array_compl[p_ind].ies_tip_item, p_array[p_ind].cod_unid_med_nf) THEN
             NEXT FIELD cod_unid_med_nf
          END IF
       END IF

       ##### CITROSUCO OS 157335 #####
       IF m_ies_obj_entrada = "99" THEN
          IF (p_array_compl[p_ind].num_pedido IS NOT NULL AND
              p_array_compl[p_ind].num_pedido <> 0 AND
              p_array_compl[p_ind].num_pedido <> " ") THEN
              IF sup376_cond_pgto_com_pag() THEN
                 IF sup376_aprov_tecnica() THEN
                 #### TRABALHA COM APROVACAO TECNICA - SUP0289 ####
                   WHENEVER ERROR CONTINUE
                    SELECT cod_unid_med
                      FROM um_aprov_tecnica
                     WHERE cod_empresa  = p_cod_empresa
                       AND cod_unid_med = p_array[p_ind].cod_unid_med_nf
                   WHENEVER ERROR STOP
                    IF sqlca.sqlcode = 100 THEN
                       ERROR " Unidade de Medida deve estar cadastrada SUP0141(Aprov.Tecnica)"
                       NEXT FIELD cod_unid_med_nf
                    END IF
                 END IF
              END IF
          END IF
       END IF
       ################################

    BEFORE FIELD cod_cla_fisc_nf
       CALL sup3760_botao_zoom("ON",3,68)
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       LET l_cod_cla_fisc_nf = p_array[p_ind].cod_cla_fisc_nf

    AFTER FIELD cod_cla_fisc_nf
       CALL sup3760_botao_zoom("OFF",3,68)

       IF p_array[p_ind].cod_cla_fisc_nf IS NOT NULL AND
          p_array[p_ind].cod_cla_fisc_nf <> ' ' THEN
          IF NOT sup3762_verifica_cod_cla_fisc_nf(p_array[p_ind].cod_cla_fisc_nf) THEN
             ERROR 'NBM nao cadastrado'
             NEXT FIELD cod_cla_fisc_nf
          END IF
       END IF

       IF p_array[p_ind].den_item IS NOT NULL THEN
          IF m_tem_valid_fim THEN
             IF p_dados_tela.dat_entrada_nf > m_dat_fim_valid THEN
                IF p_dados_tela.cod_operacao[3,5] = "101" AND
                   p_ies_contrib_ipi = "S" THEN
                   IF p_array[p_ind].cod_cla_fisc_nf IS NULL OR
                      p_array[p_ind].cod_cla_fisc_nf = " " OR
                      p_array[p_ind].cod_cla_fisc_nf = 0 THEN
                      ERROR "Informe classificacao fiscal"
                      NEXT FIELD cod_cla_fisc_nf
                   END IF
                END IF
             ELSE
                IF p_dados_tela.cod_operacao[3,4] = "11" AND
                   p_ies_contrib_ipi = "S" THEN
                   IF p_array[p_ind].cod_cla_fisc_nf IS NULL OR
                      p_array[p_ind].cod_cla_fisc_nf = " " OR
                      p_array[p_ind].cod_cla_fisc_nf = 0 THEN
                      ERROR "Informe classificacao fiscal"
                      NEXT FIELD cod_cla_fisc_nf
                   END IF
                END IF
             END IF
          ELSE
             IF p_dados_tela.cod_operacao[3,4] = "11" AND
                p_ies_contrib_ipi = "S" THEN
                IF p_array[p_ind].cod_cla_fisc_nf IS NULL OR
                   p_array[p_ind].cod_cla_fisc_nf = " " OR
                   p_array[p_ind].cod_cla_fisc_nf = 0 THEN
                   ERROR "Informe classificacao fiscal"
                   NEXT FIELD cod_cla_fisc_nf
                END IF
             END IF
         END IF
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(2) THEN
             IF l_cod_cla_fisc_nf <> p_array[p_ind].cod_cla_fisc_nf THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_array[p_ind].cod_cla_fisc_nf = l_cod_cla_fisc_nf
                DISPLAY p_array[p_ind].cod_cla_fisc_nf TO cod_cla_fisc_nf
                NEXT FIELD cod_cla_fisc_nf
             END IF
          END IF
       END IF

    BEFORE FIELD qtd_declarad_nf
       IF m_wms_instal = 'S' THEN
             IF p_array[p_ind].cod_item IS NOT NULL OR
                p_array[p_ind].cod_item <> ' ' THEN
                IF find4GLFunction('wms6612_verifica_item_generico') THEN
                   IF NOT wms6612_verifica_item_generico(p_array[p_ind].cod_item,
                                                         m_indicador_aduaneiro) THEN
                      NEXT FIELD cod_item
                   END IF
                END IF
             END IF
       END IF
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       LET l_qtd_declarad_nf = p_array[p_ind].qtd_declarad_nf
       IF p_funcao = "MODIFICACAO" AND
          p_array_compl[p_ind].ies_bloqueada = "S" THEN
          LET p_array_compl[p_ind].ies_bloqueada = "N"
          NEXT FIELD cod_unid_med_nf
       END IF

       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) OR
          sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                                  p_cod_empresa,
                                  p_dados_tela.num_aviso_rec) THEN
          LET p_array_compl[p_ind].qtd_declarad_nf = 0
          NEXT FIELD cod_unid_med_nf
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          IF g_ies_wis_instalado = "S" THEN
             IF p_aviso_rec.cod_item IS NOT NULL AND
                p_aviso_rec.cod_item <> " " THEN
                CALL vdp3188_item_sob_controle_wis(p_cod_empresa,p_aviso_rec.cod_item)
                RETURNING l_sucesso,l_item_wms
                IF l_item_wms THEN
                {WHENEVER ERROR CONTINUE
                   SELECT cod_fornecedor
                     FROM wis_nf_item
                    WHERE cod_fornecedor = p_dados_tela.cod_fornecedor
                      AND num_nf         = p_dados_tela.num_nf
                      AND cod_item       = p_array[p_ind].cod_item
                WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 THEN
                      ERROR " Item ja processado para Interface WIS, impossivel modificar Qtd. "
                      NEXT FIELD cod_unid_med_nf
                   END IF}
                END IF
             END IF
          ELSE
              IF g_ies_wms_instalado = "S" AND sup376_verifica_interf_ent_wms() THEN
                 CALL wms0004_item_sob_controle_wms(p_cod_empresa,p_array[p_ind].cod_item)
                 RETURNING l_sucesso,l_item_wms
                 IF l_item_wms THEN
                 WHENEVER ERROR CONTINUE
                 SELECT COUNT(*)
                   INTO l_ind_envio_interf
                   FROM wms_e_nf_item a, wms_e_entrada_veic b
                  WHERE a.fornecedor         = p_dados_tela.cod_fornecedor
                    AND a.num_nota_fiscal    = p_dados_tela.num_nf
                    AND a.serie_nota_fiscal  = p_dados_tela.ser_nf
                    AND a.subserie_nf        = p_dados_tela.ssr_nf
                    AND a.item_terceiro      = p_array[p_ind].cod_item
                    AND b.entrada_veiculo    = a.entrada_veiculo
                    AND b.ind_envio_interf   = "S"
                 WHENEVER ERROR STOP
                    IF sqlca.sqlcode = 0 AND l_ind_envio_interf > 0 THEN
                       ERROR " Item ja enviado ao LOGIX-WMS. Modificacao nao permitida. "
                       NEXT FIELD cod_unid_med_nf
                    END IF
                 END IF
              END IF
          END IF

         CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array[p_ind].seq)

          IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = FALSE THEN
             IF sup376_verifica_update() = FALSE THEN
                LET p_array_compl[p_ind].ies_bloqueada = "S"
                LET p_array_compl[p_ind].qtd_declarad_nf = p_array[p_ind].qtd_declarad_nf
                LET p_qtd_declarad_nf    = 0
                LET p_val_liquido_item   = 0
                LET p_qtd_declarad_nf    = p_array[p_ind].qtd_declarad_nf
                LET p_pre_unit_nf        = p_array[p_ind].pre_unit_nf
                LET p_val_liquido_item   = p_array[p_ind].val_liquido_item
                DISPLAY p_array[p_ind].* TO s_sup37601[p_ind1].*
                NEXT FIELD pre_unit_nf
             END IF
          ELSE
             NEXT FIELD pre_unit_nf
          END IF

       ELSE
          IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = TRUE THEN
             LET p_array[p_ind].qtd_declarad_nf  = 0
             DISPLAY p_array[p_ind].qtd_declarad_nf TO s_sup37601[p_ind1].qtd_declarad_nf
             NEXT FIELD pre_unit_nf
          END IF
       END IF

       IF l_item_balanca IS NOT NULL THEN
          LET p_array[p_ind].qtd_declarad_nf = l_pes_liquido
          DISPLAY p_array[p_ind].qtd_declarad_nf TO qtd_declarad_nf
       END IF

    AFTER FIELD qtd_declarad_nf
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

### OS 511240
       IF (p_dados_tela.ies_especie_nf = 'NFD' OR
          p_ies_tip_entrada = '5')             THEN

          IF p_funcao = 'INCLU.ITENS'          THEN
             CALL sup3762_delete_ar_nf_item(p_cod_empresa,
                                            p_dados_tela.num_aviso_rec,
                                            p_array[p_ind].seq)
          ELSE
             IF p_funcao = 'MODIFICACAO' AND
                l_qtd_declarad_nf <> p_array[p_ind].qtd_declarad_nf THEN

                CALL sup3762_delete_ar_nf_item(p_cod_empresa,
                                               p_dados_tela.num_aviso_rec,
                                               p_array[p_ind].seq)

             END IF
          END IF
       END IF
###OS 511240

       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) THEN
          IF p_array[p_ind].qtd_declarad_nf > 0 THEN
             LET p_array[p_ind].qtd_declarad_nf = 0

             DISPLAY p_array[p_ind].qtd_declarad_nf TO s_sup37601[p_ind1].qtd_declarad_nf

             CALL log0030_mensagem("Nota fiscal de complemento de imposto não deve ter quantidade informada.","exclamation")

             NEXT FIELD qtd_declarad_nf
          END IF
       END IF

       IF p_array[p_ind].qtd_declarad_nf IS NOT NULL THEN
          IF p_dados_tela.ies_especie_nf = "NFC" THEN
             IF p_array[p_ind].qtd_declarad_nf <> 0 THEN
                CALL log0030_mensagem("Nota fiscal de complemento não deve ter quantidade informada.","exclamation")
                NEXT FIELD qtd_declarad_nf
             END IF
          END IF
       ELSE
          IF p_dados_tela.ies_especie_nf = "NFC" THEN
             LET p_array[p_ind].qtd_declarad_nf = 0
          END IF
       END IF

       SLEEP 1

       IF p_array[p_ind].qtd_declarad_nf IS NOT NULL AND
          p_array_compl[p_ind].ar_com_pc = "S" THEN
          LET p_qtd_array = p_array[p_ind].qtd_declarad_nf
          LET p_val_array = p_array[p_ind].pre_unit_nf
          IF p_dados_tela.ies_especie_nf <> "NFD" THEN
             IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = FALSE THEN
                LET p_soma_reserva2 = NULL
                CALL sup386_popup_ordens_reservada(p_cod_empresa,
                     p_array[p_ind].cod_item, p_array_compl[p_ind].num_pedido,
                     p_array_compl[p_ind].num_oc, p_array_compl[p_ind].num_prog_entrega,
                     p_qtd_array, "N" , p_funcao,
                     p_dados_tela.num_aviso_rec, p_array[p_ind].seq, p_ind)
                     RETURNING p_soma_reserva2, p_ies_reservou, p_ord_forn
                     LET p_qtd_array = 0
                     LET p_val_array = 0
                     LET int_flag = 0
                     CALL log006_exibe_teclas("01 02 03 07", p_versao)
                     CURRENT WINDOW IS w_sup37601
             END IF
          END IF
          #733238#
          IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf, p_cod_empresa, p_dados_tela.num_aviso_rec) = FALSE THEN # Chamado 739204
             CALL sup0949_busca_parametro_sup_par_divg_rec("bloq_div_dat_entrega", p_array[p_ind].cod_item, p_dados_tela.cod_fornecedor)
                  RETURNING l_bloq_entr_data, m_parametro_val
             IF l_bloq_entr_data IS NOT NULL THEN
                LET m_bloq_entr_data = l_bloq_entr_data
             END IF
          END IF
          #---fim---733238#
          IF (p_funcao = "INCLUSAO" OR p_funcao = "INCLU.ITENS") AND ## 545418
             m_bloq_entr_data = "S" THEN
             IF NOT sup0949_verifica_diverg_dat_entrega(p_ind) THEN
                NEXT FIELD qtd_declarad_nf
             END IF
          END IF
       END IF

       IF p_funcao = "INCLUSAO" OR p_funcao =  "INCLU.ITENS"  THEN
          IF p_dados_tela.ies_especie_nf <> "NFR" AND
             p_dados_tela.ies_especie_nf <> "NFD" THEN
             IF p_array[p_ind].cod_item  IS NOT NULL AND
                p_array[p_ind].cod_item <> " " THEN
                IF (p_pedidos[1,5] = 'XXXXX') OR  # OS 390034 - Winston
                   (p_pedidos IS NULL) THEN
                   IF p_array_compl[p_ind].ar_com_pc <> "S" OR
                      p_array_compl[p_ind].ar_com_pc IS NULL   THEN
                      IF p_par_sup.ies_modulo_compras = "S" THEN

                         LET l_forn_possui_pc = TRUE
                         IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
                            LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
                         END IF

                         IF l_forn_possui_pc THEN
                            IF p_par_sup.ies_entrada_sem_pc = "N" AND
                               p_ies_entr_sem_ped = FALSE THEN
                               IF p_dados_tela.ies_especie_nf <> "NFC" AND
                                  p_dados_tela.ies_especie_nf <> "CON" AND
                                  p_dados_tela.ies_especie_nf <> "NFE" THEN
                                  ERROR "Empresa nao permite entrada de N.F. sem pedido de compra"
                                  NEXT FIELD cod_item
                               END IF
                               IF p_dados_tela.ies_especie_nf = "NFC" AND
                                  (p_par_sup_compl.ies_nf_compl_preco = "3" OR
                                   p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                  ERROR "Empresa nao permite entrada de NFC sem pedido de compra"
                                  NEXT FIELD cod_item
                               END IF
                               IF p_dados_tela.ies_especie_nf = "NFE" AND
                                  (p_par_sup_compl.ies_nf_compl_preco = "2" OR
                                   p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                  ERROR "Empresa nao permite entrada de NFE sem pedido de compra."
                                  NEXT FIELD cod_item
                               END IF
                            ELSE
                               IF p_dados_tela.ies_especie_nf = "NFM" AND m_controla_gao = "S" THEN
                                  IF p_array_pedidos[1].num_pedido IS NULL OR
                                     p_array_pedidos[1].num_pedido = " " THEN
                                     CALL log0030_mensagem(" Função não permitida, NFM com controle de GAO exige pedido de compra","exclamation")
                                     NEXT FIELD cod_item
                                  END IF
                               END IF
                            END IF
                         END IF
                      END IF
                   ELSE
                      IF p_ies_reservou = "N" THEN
                         IF p_par_sup.ies_modulo_compras = "S" THEN

                            LET l_forn_possui_pc = TRUE
                            IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
                               LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
                            END IF

                            IF l_forn_possui_pc THEN
                               IF p_par_sup.ies_entrada_sem_pc = "N" AND
                                  p_ies_entr_sem_ped = FALSE THEN
                                  IF p_dados_tela.ies_especie_nf <> "NFC" AND
                                     p_dados_tela.ies_especie_nf <> "CON" AND
                                     p_dados_tela.ies_especie_nf <> "NFE" THEN
                                     ERROR "Empresa nao permite entrada de N.F. sem pedido de compra"
                                     NEXT FIELD cod_item
                                  END IF
                                  IF p_dados_tela.ies_especie_nf = "NFC" AND
                                     (p_par_sup_compl.ies_nf_compl_preco = "3" OR
                                      p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                     ERROR "Empresa nao permite entrada de NFC sem pedido de compra"
                                     NEXT FIELD cod_item
                                  END IF
                                  IF p_dados_tela.ies_especie_nf = "NFE" AND
                                     (p_par_sup_compl.ies_nf_compl_preco = "2" OR
                                     p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                     ERROR "Empresa nao permite entrada de NFE sem pedido de compra."
                                     NEXT FIELD cod_item
                                  END IF
                               ELSE
                                  IF p_dados_tela.ies_especie_nf = "NFM" AND m_controla_gao = "S" THEN
                                     IF p_array_pedidos[1].num_pedido IS NULL OR
                                        p_array_pedidos[1].num_pedido = " " THEN
                                        CALL log0030_mensagem(" Função não permitida, NFM com controle de GAO exige pedido de compra","exclamation")
                                        NEXT FIELD cod_item
                                     END IF
                                  END IF
                               END IF
                            END IF
                         END IF
                      END IF
                   END IF
                END IF
             END IF
          END IF
       END IF

       LET p_somatorio_dif = 0
       FOR p_ind5 = 1 TO 50
           IF p_array_it_prg_entr[p_ind, p_ind5].qtd_solic IS NULL OR
              p_array_it_prg_entr[p_ind, p_ind5].qtd_solic = " "   OR
              p_array_it_prg_entr[p_ind, p_ind5].qtd_solic = 0 THEN
              EXIT FOR
           END IF
           IF p_array_compl[p_ind].num_oc <> 0        AND
              p_array_compl[p_ind].num_oc IS NOT NULL THEN
              INITIALIZE p_ordem_sup.* TO NULL
              CALL sup3762_busca_ordem_sup(p_cod_empresa,
                                          p_array_compl[p_ind].num_oc)

              LET p_fat_conver_unid = p_ordem_sup.fat_conver_unid
              IF sqlca.sqlcode <> 0 THEN
                 LET p_fat_conver_unid = 1
              END IF
           END IF
           IF p_fat_conver_unid = 0 THEN
              LET p_fat_conver_unid = 1
           END IF
           LET p_dif_aceite = 0
           IF p_array_compl[p_ind].pct_aceite_dif = 0
           AND p_dados_tela.ies_nf_aguard_nfe <> "5"
           THEN LET p_dif_aceite = (p_array_it_prg_entr[p_ind, p_ind5].qtd_solic
                    * p_par_sup.pct_maximo_div_q) / 100
           ELSE LET p_dif_aceite = (p_array_it_prg_entr[p_ind, p_ind5].qtd_solic
                    * p_array_compl[p_ind].pct_aceite_dif) / 100
           END IF
           LET p_somatorio_dif = p_somatorio_dif + p_dif_aceite
       END FOR
       LET p_array_compl[p_ind].tot_reserv_dif = 0
       LET p_array_compl[p_ind].tot_reserv_dif = p_somatorio_dif + p_soma_reserva2
       IF p_array[p_ind].qtd_declarad_nf > (p_soma_reserva2 + p_somatorio_dif) AND p_dados_tela.ies_nf_aguard_nfe <> "D" THEN
          IF p_funcao <> "MODIFICACAO" OR
             p_funcao = "MODIFICACAO" AND p_msg_qtd = "S" THEN
             IF p_array_compl[p_ind].num_pedido IS NOT NULL AND
                p_array_compl[p_ind].num_pedido <> 0        AND
                p_array_compl[p_ind].ies_liquida_oc <> "3"  THEN
                IF p_dados_tela.ies_nf_aguard_nfe = "5" THEN
                   ERROR "ENTRADA SEM SALDO SUFICIENTE; CONTATAR COMPRADOR URGENTE "
                   NEXT FIELD qtd_declarad_nf
                END IF

                IF p_ies_entrada_maior = "N"  THEN
                   CALL log0030_mensagem("ENTRADA SEM SALDO SUFICIENTE; CONTATAR COMPRADOR URGENTE ","exclamation")
                ELSE
                   CALL log0030_mensagem("Entrada sem saldo suficiente.","exclamation")
                END IF
                IF p_ies_entrada_maior = "S"  THEN
                   IF log004_confirm(14,42) THEN
                   ELSE
                      NEXT FIELD qtd_declarad_nf
                   END IF
                ELSE
                   IF p_ies_entrada_maior = "C" THEN
                      IF p_aguard_5 = TRUE THEN
                         NEXT FIELD qtd_declarad_nf
                      ELSE
                         IF log004_confirm(14,42) THEN
                         ELSE
                            NEXT FIELD qtd_declarad_nf
                         END IF
                      END IF
                   ELSE
                      NEXT FIELD qtd_declarad_nf
                   END IF
                END IF
             END IF
          END IF
       END IF

       IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
          LET p_array_imp[p_ind].val_ii = (p_array_imp[p_ind].val_ii_tot *
                                           p_array[p_ind].qtd_declarad_nf) /
                                           p_array_imp[p_ind].quantidade
          LET p_array_imp[p_ind].val_desp_imp =
                                          (p_array_imp[p_ind].val_desp_imp_tot *
                                           p_array[p_ind].qtd_declarad_nf) /
                                           p_array_imp[p_ind].quantidade
          LET p_array_imp[p_ind].val_ipi =
                                          (p_array_imp[p_ind].val_ipi_tot *
                                           p_array[p_ind].qtd_declarad_nf) /
                                           p_array_imp[p_ind].quantidade
          LET p_array_imp[p_ind].val_icms =
                                          (p_array_imp[p_ind].val_icms_tot *
                                           p_array[p_ind].qtd_declarad_nf) /
                                           p_array_imp[p_ind].quantidade
       END IF

       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(2) THEN
             IF l_qtd_declarad_nf <> p_array[p_ind].qtd_declarad_nf THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_array[p_ind].qtd_declarad_nf = l_qtd_declarad_nf
                DISPLAY p_array[p_ind].qtd_declarad_nf TO qtd_declarad_nf
                NEXT FIELD qtd_declarad_nf
             END IF
          END IF
       END IF


    BEFORE FIELD pre_unit_nf
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       IF p_funcao = "INCLUSAO" THEN
          IF p_dados_tela.ies_especie_nf <> "NFD" AND
             p_dados_tela.ies_especie_nf <> "NFR" THEN
             CALL sup3760_botao_zoom("ON",3,68)
          END IF
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array[p_ind].seq)
          IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) THEN
             IF sup376_verifica_ar_item_contagem() THEN
                IF fgl_lastkey() = fgl_keyval("UP") THEN
                   NEXT FIELD cod_cla_fisc_nf
                ELSE
                   IF fgl_lastkey() = fgl_keyval("LEFT") THEN
                      NEXT FIELD cod_cla_fisc_nf
                   ELSE
                      NEXT FIELD pct_ipi
                   END IF
                END IF
             END IF
          END IF
       END IF
       LET p_base_ipi[p_ind].val_liquido_item = p_array[p_ind].val_liquido_item
       LET p_array_compl[p_ind].alterou_val_liquido = FALSE

       #--inicio--OS 704064 #
       IF p_dados_tela.ies_especie_nf = "NFC" AND
          m_classif_nfc = "1"  THEN
          NEXT FIELD NEXT
       END IF
       #---fim----OS 704064 #

    AFTER FIELD pre_unit_nf
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       CALL sup3760_botao_zoom("OFF",3,68)
       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) THEN
          IF p_array[p_ind].pre_unit_nf > 0 THEN
             LET p_array[p_ind].pre_unit_nf = 0

             DISPLAY p_array[p_ind].pre_unit_nf TO s_sup37601[p_ind1].pre_unit_nf

             CALL log0030_mensagem("Nota fiscal de complemento de imposto não deve ter preço informado.","exclamation")

             NEXT FIELD pre_unit_nf
          END IF
       END IF
       IF p_ord_forn = FALSE AND
          p_funcao = "INCLUSAO" THEN
          IF (p_pedidos[1,5] = "XXXXX") OR
             (p_pedidos IS NULL) THEN
             IF p_par_sup.ies_entrada_sem_pc = "N" AND
                p_ies_entr_sem_ped = FALSE THEN
                LET p_ies_pagamento2 = NULL
                CALL sup376_busca_cond_pgto_cap(p_dados_tela.cnd_pgto_nf)
                LET p_ies_pagamento2 = p_cond_pgto_cap.ies_pagamento
                IF p_ies_pagamento2 = "3" THEN
                ELSE
                   ERROR " Nao ha ordens de compras para este Fornecedor "
                   NEXT FIELD qtd_declarad_nf
                END IF
             END IF
          END IF
       END IF

       IF p_array_compl[p_ind].ar_com_pc = "S" AND p_par_sup.ies_modulo_compras = "S" AND p_funcao = "INCLUSAO" THEN
          IF NOT sup3760_pedido_ordem_valido(p_array_compl[p_ind].num_pedido,
                                             p_array_compl[p_ind].num_oc) THEN
             NEXT FIELD pre_unit_nf
          END IF
       END IF

       IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) THEN
          IF p_array[p_ind].pre_unit_nf IS NOT NULL THEN
             LET p_val_liquido_ant = p_array[p_ind].val_liquido_item
             CALL sup376_calcula_val_liquido(p_funcao)
             DISPLAY p_array[p_ind].val_liquido_item TO s_sup37601[p_ind1].val_liquido_item
          END IF
          IF p_array[p_ind].qtd_declarad_nf IS NOT NULL AND
             p_array_compl[p_ind].ar_com_pc = "S"      THEN

             LET p_val_array = p_array[p_ind].val_liquido_item

             IF p_dados_tela.ies_especie_nf <> "NFD" AND
                p_dados_tela.ies_especie_nf <> "NFR" THEN
                CALL sup861_popup_ordens_val_reserv(p_cod_empresa,
                     p_array[p_ind].cod_item, p_array_compl[p_ind].num_pedido,
                     p_array_compl[p_ind].num_oc, p_array_compl[p_ind].num_prog_entrega,
                     p_val_array, "N", p_funcao,
                     p_dados_tela.num_aviso_rec, p_array[p_ind].seq, p_ind)
                     RETURNING p_val_soma_reserva2, p_ies_reservou, p_ord_forn
                     LET p_val_array = 0
                     LET int_flag = 0
                     CURRENT WINDOW IS w_sup37601
             END IF
          END IF
          LET p_somatorio_dif = 0
          FOR p_ind5 = 1 TO 50
              IF p_array_it_prg_entr[p_ind, p_ind5].val_solic IS NULL OR
                 p_array_it_prg_entr[p_ind, p_ind5].val_solic = " "   OR
                 p_array_it_prg_entr[p_ind, p_ind5].val_solic = 0 THEN
                 EXIT FOR
              END IF
              LET p_dif_aceite = 0
              LET p_dif_aceite = (p_array_it_prg_entr[p_ind, p_ind5].val_solic * p_array_compl[p_ind].pct_aceite_dif) / 100
              LET p_somatorio_dif = p_somatorio_dif + p_dif_aceite
          END FOR
          LET p_array_compl[p_ind].tot_reserv_dif = 0
          LET p_array_compl[p_ind].tot_reserv_dif = p_somatorio_dif + p_val_soma_reserva2
          IF p_array[p_ind].val_liquido_item > (p_val_soma_reserva2 + p_somatorio_dif) THEN
             IF p_funcao <> "MODIFICACAO" OR
                p_funcao = "MODIFICACAO"  THEN
                IF p_array_compl[p_ind].num_pedido IS NOT NULL AND
                   p_array_compl[p_ind].num_pedido <> 0        AND
                   p_array_compl[p_ind].ies_liquida_oc <> "3"  THEN
                   IF p_dados_tela.ies_nf_aguard_nfe = "5" THEN
                      ERROR "ENTRADA SEM SALDO SUFICIENTE; CONTATAR COMPRADOR URGENTE "
                      NEXT FIELD qtd_declarad_nf
                   END IF

                   IF p_ies_entrada_maior = "N"  THEN
                      ERROR "ENTRADA SEM SALDO SUFICIENTE; CONTATAR COMPRADOR URGENTE "
                   ELSE
                      ERROR "Entrada sem saldo suficiente."
                   END IF
                   IF p_ies_entrada_maior = "S"  THEN
                      IF log004_confirm(14,42) THEN
                      ELSE
                         NEXT FIELD pre_unit_nf
                      END IF
                   ELSE
                      IF p_ies_entrada_maior = "C" THEN
                         IF p_aguard_5 = TRUE THEN
                            NEXT FIELD pre_unit_nf
                         ELSE
                            IF log004_confirm(14,42) THEN
                            ELSE
                               NEXT FIELD pre_unit_nf
                            END IF
                         END IF
                      ELSE
                         NEXT FIELD pre_unit_nf
                      END IF
                   END IF
                END IF
             END IF
          END IF
       ELSE
          IF p_array[p_ind].pre_unit_nf IS NOT NULL THEN
             LET p_val_liquido_ant = p_array[p_ind].val_liquido_item
             CALL sup376_calcula_val_liquido(p_funcao)
             DISPLAY p_array[p_ind].val_liquido_item TO s_sup37601[p_ind1].val_liquido_item
          END IF
       END IF

       IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = FALSE THEN
          IF fgl_lastkey() = fgl_keyval("UP") OR
             fgl_lastkey() = fgl_keyval("LEFT") THEN
             NEXT FIELD qtd_declarad_nf
          END IF
       ELSE
          NEXT FIELD pct_ipi
       END IF
       LET p_par_forn = NULL
       IF p_array_compl[p_ind].num_oc IS NOT NULL AND
          p_array_compl[p_ind].num_oc <> 0       THEN
          IF sup376_verifica_ordem_consig(p_array_compl[p_ind].num_oc) THEN
             LET p_par_forn = "3"
          END IF
       ELSE
          IF p_dados_tela.ies_especie_nf = "NFR" THEN
             CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor,
                                                     p_array[p_ind].cod_item,
                                                     p_dados_tela.dat_emis_nf,
                                                     p_dados_tela.num_aviso_rec) RETURNING p_par_forn
          END IF
       END IF
       IF p_par_forn = "3" THEN
          CALL sup3762_le_cotacao_preco(p_dados_tela.cod_fornecedor,
                                        p_array[p_ind].cod_item)

          CALL sup376_ver_fat_conver_consig(p_array[p_ind].cod_item)
               RETURNING l_fat_conver_consig

          IF ((p_cotacao_preco.pre_unit_liquido * l_fat_conver_consig) <>
              p_array[p_ind].pre_unit_nf) OR
             p_cotacao_preco.pre_unit_liquido IS NULL THEN
             ERROR " Preco do item difere do contrato ou NAO possui contrato de CONSIGNACAO." ATTRIBUTE (REVERSE)
             IF log004_confirm(21,42) THEN
             ELSE
                NEXT FIELD pre_unit_nf
             END IF
          END IF
       END IF

       #778797#
       ###Se for nota fiscal de importação não deverá verificar divergência de preço
       #IF m_bloq_entr_preco = "S" AND p_array_compl[p_ind].ar_com_pc = "S" AND
       #   p_dados_tela.cod_operacao[1,1] <> "7" AND m_nfr_import = FALSE THEN
       #   IF NOT sup0949_verifica_diverg_preco_unit(p_funcao, p_ind, p_dados_tela.num_aviso_rec, p_array[p_ind].seq,
       #                                             p_array[p_ind].pre_unit_nf) THEN
       #      NEXT FIELD pre_unit_nf
       #   END IF
       #END IF

       IF p_funcao = "MODIFICACAO" THEN
          IF la_dados_ant[p_ind].pre_unit_nf <> p_array[p_ind].pre_unit_nf THEN

               ### OS 511240
               IF (p_dados_tela.ies_especie_nf = 'NFD' OR
                   p_ies_tip_entrada = '5')             THEN
                   CALL sup3762_delete_ar_nf_item(p_cod_empresa,
                                                  p_dados_tela.num_aviso_rec,
                                                  p_array[p_ind].seq)
               END IF

             IF sup376_contagem_custo_diario(2) THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_array[p_ind].pre_unit_nf = la_dados_ant[p_ind].pre_unit_nf
                DISPLAY p_array[p_ind].pre_unit_nf TO pre_unit_nf
                NEXT FIELD pre_unit_nf
             END IF

             IF m_controla_gao = "S" THEN
                IF NOT sup3760_permite_alteracao_gao() THEN
                   CALL log0030_mensagem("Controle GAO ativo exclua Inspeção/Contagem antes de modificar o preço. Após realize Inspeção/Contagem manual.","excl")
                   LET p_array[p_ind].pre_unit_nf = la_dados_ant[p_ind].pre_unit_nf
                   DISPLAY p_array[p_ind].pre_unit_nf TO pre_unit_nf
                   NEXT FIELD pre_unit_nf
                END IF

                LET m_alterou_preco = TRUE
             END IF
          END IF
       END IF

    BEFORE FIELD val_liquido_item
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       LET l_val_liquido_item = p_array[p_ind].val_liquido_item
       IF p_funcao = "MODIFICACAO" THEN
          CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array[p_ind].seq)
          IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) THEN
             IF sup376_verifica_ar_item_contagem() THEN
                IF fgl_lastkey() = fgl_keyval("UP") THEN
                   NEXT FIELD cod_cla_fisc_nf
                ELSE
                   IF fgl_lastkey() = fgl_keyval("LEFT") THEN
                      NEXT FIELD cod_cla_fisc_nf
                   ELSE
                      NEXT FIELD pct_ipi
                   END IF
                END IF
             END IF
          END IF
       END IF

       #--inicio--OS 704064 #
       IF p_dados_tela.ies_especie_nf = "NFC" AND
          m_classif_nfc = "1"  THEN
          NEXT FIELD NEXT
       END IF
       #---fim----OS 704064 #

    AFTER FIELD val_liquido_item
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) THEN
          IF p_array[p_ind].val_liquido_item > 0 THEN
             LET p_array[p_ind].val_liquido_item = 0

             DISPLAY p_array[p_ind].val_liquido_item TO s_sup37601[p_ind1].val_liquido_item

             CALL log0030_mensagem("Nota fiscal de complemento de imposto não deve ter valor informado.","exclamation")

             NEXT FIELD val_liquido_item
          END IF
       END IF

       IF p_funcao = "MODIFICACAO" THEN
          IF p_val_liquido_ant <> p_array[p_ind].val_liquido_item
          THEN
             ERROR "Altera Base de Calculo do IPI ???" ATTRIBUTE(REVERSE)
             IF log004_confirm(21,39)
             THEN LET p_base_ipi[p_ind].val_liquido_item = p_val_liquido_ant
             END IF
             LET p_array_compl[p_ind].alterou_val_liquido = TRUE
          END IF
       END IF

       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(2) THEN
             IF l_val_liquido_item <> p_array[p_ind].val_liquido_item THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_array[p_ind].val_liquido_item = l_val_liquido_item
                DISPLAY p_array[p_ind].val_liquido_item TO val_liquido_item
                NEXT FIELD val_liquido_item
             END IF
          END IF
       END IF

    BEFORE FIELD pct_ipi
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       LET l_pct_ipi = p_array[p_ind].pct_ipi

    AFTER FIELD pct_ipi
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = TRUE THEN
          IF fgl_lastkey() = fgl_keyval("UP")   OR
             fgl_lastkey() = fgl_keyval("LEFT") THEN
             NEXT FIELD pre_unit_nf
          END IF
       END IF

       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(2) THEN
             IF l_pct_ipi <> p_array[p_ind].pct_ipi THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_array[p_ind].pct_ipi = l_pct_ipi
                DISPLAY p_array[p_ind].pct_ipi TO pct_ipi
                NEXT FIELD pct_ipi
             END IF
          END IF
       END IF

       IF find4GLFunction('supy36_verifica_nf_retorno_industrializacao') THEN
          IF supy36_verifica_nf_retorno_industrializacao(p_dados_tela.cod_operacao,
                                                         p_dados_tela.cod_fiscal_compl) THEN

             IF find4GLFunction('supy36_executa_item_ret_terc') THEN
                CALL supy36_executa_item_ret_terc(p_dados_tela.cod_empresa,
                                                  p_dados_tela.num_nf,
                                                  p_dados_tela.ser_nf,
                                                  p_dados_tela.ssr_nf,
                                                  p_dados_tela.ies_especie_nf,
                                                  p_dados_tela.cod_fornecedor,
                                                  p_array[p_ind].seq)
             END IF

          END IF
       END IF

       #--inicio--OS 502143 #
       LET l_is_clie_319 = FALSE
       IF find4GLFunction('supy101_cliente_319') THEN
          LET l_is_clie_319 = supy101_cliente_319()
       END IF

       IF l_is_clie_319 = TRUE          AND
          (p_dados_tela.cod_operacao = '5.601'  OR
           p_dados_tela.cod_operacao = '6.601') AND
           m_cod_item_cred_transf_icms = p_array[p_ind].cod_item THEN
           IF p_ind > 1 THEN
              CALL log0030_mensagem('Nota fiscal de transferência de ICMS deverá ter apenas um item.','exclamation')
              NEXT FIELD cod_item
           ELSE
              IF p_array[2].cod_item IS NULL OR
                 p_array[2].cod_item = " " THEN
                 EXIT INPUT
              ELSE
                 CALL log0030_mensagem('Nota fiscal de transferência de ICMS deverá ter apenas um item.','exclamation')
                 NEXT FIELD cod_item
              END IF
           END IF
       END IF
       #---fim----OS 502143 #

    #793760#
    AFTER ROW
       IF int_flag = 0 THEN
          LET p_ind  = arr_curr()
          IF p_array[p_ind].cod_item IS NOT NULL AND
             p_array[p_ind].cod_item <> " " THEN
             IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf, p_cod_empresa, p_dados_tela.num_aviso_rec) = FALSE THEN # Chamado 739204
                CALL sup0949_busca_parametro_sup_par_divg_rec("consis_diverg_preco", p_array[p_ind].cod_item, p_dados_tela.cod_fornecedor)
                   RETURNING m_consis_diverg_preco, m_parametro_val
                IF m_consis_diverg_preco IS NOT NULL THEN
                   CALL sup0949_busca_parametro_sup_par_divg_rec("bloq_entr_preco", p_array[p_ind].cod_item, p_dados_tela.cod_fornecedor)
                      RETURNING l_bloq_entr_preco, m_parametro_val
                   IF l_bloq_entr_preco IS NOT NULL THEN
                      LET m_bloq_entr_preco = l_bloq_entr_preco
                   END IF
                END IF
                CALL sup0949_busca_parametro_sup_par_divg_rec("bloq_div_dat_entrega", p_array[p_ind].cod_item, p_dados_tela.cod_fornecedor)
                      RETURNING l_bloq_entr_data, m_parametro_val
                IF l_bloq_entr_data IS NOT NULL THEN
                   LET m_bloq_entr_data = l_bloq_entr_data
                END IF
             END IF

             IF p_array[p_ind].qtd_declarad_nf IS NOT NULL AND
                p_array_compl[p_ind].ar_com_pc = 'S' AND
                p_dados_tela.ies_especie_nf <> 'NFD' AND
                (p_funcao = "INCLUSAO" OR p_funcao = "INCLU.ITENS") AND ## 545418
                m_bloq_entr_data = 'S' THEN
                IF NOT sup0949_verifica_diverg_dat_entrega(p_ind) THEN
                   NEXT FIELD qtd_declarad_nf
                END IF
             END IF
             ##Se for nota fiscal de importação não deverá verificar divergência de preço
             IF m_bloq_entr_preco = "S" AND p_array_compl[p_ind].ar_com_pc = "S" AND
                p_dados_tela.cod_operacao[1,1] <> "7" AND m_nfr_import = FALSE THEN
                IF NOT sup0949_verifica_diverg_preco_unit(p_funcao, p_ind, p_dados_tela.num_aviso_rec, p_array[p_ind].seq,
                                                          p_array[p_ind].pre_unit_nf, 'SUP3760') THEN
                   NEXT FIELD pre_unit_nf
                END IF
             END IF
          END IF
       END IF
    #---fim--- 793760#

    AFTER INPUT
       IF int_flag = 0 THEN
          LET m_informou_grade = FALSE
          LET p_ind_ant = p_ind
          IF fgl_lastkey() = fgl_keyval("ACCEPT") THEN
             LET p_entra_tot = "S"
          END IF
          FOR p_ind = 1 TO 999
              #--inicio--OS 502143 #
              LET l_is_clie_319 = FALSE
              IF find4GLFunction('supy101_cliente_319') THEN
                 LET l_is_clie_319 = supy101_cliente_319()
              END IF

              IF l_is_clie_319 = TRUE          AND
                 (p_dados_tela.cod_operacao = '5.601'  OR
                  p_dados_tela.cod_operacao = '6.601') AND
                  m_cod_item_cred_transf_icms = p_array[p_ind].cod_item THEN
                  IF p_ind > 1 THEN
                     CALL log0030_mensagem('Nota fiscal de transferência de ICMS deverá ter apenas um item.','exclamation')
                     NEXT FIELD cod_item
                  ELSE
                     IF p_array[2].cod_item IS NULL OR
                        p_array[2].cod_item = " " THEN
                        EXIT INPUT
                     ELSE
                        CALL log0030_mensagem('Nota fiscal de transferência de ICMS deverá ter apenas um item.','exclamation')
                        NEXT FIELD cod_item
                     END IF
                  END IF
              END IF
              #---fim----OS 502143 #

              IF find4GLFunction('supy31_valida_unid_med_fixa') THEN
                 IF p_array[p_ind].cod_unid_med_nf IS NOT NULL THEN
                    IF NOT supy31_valida_unid_med_fixa(p_array_compl[p_ind].ies_tip_item, p_array[p_ind].cod_unid_med_nf) THEN
                       NEXT FIELD cod_unid_med_nf
                    END IF
                 END IF
              END IF

             LET l_entra_grades   = TRUE
             IF p_array[p_ind].cod_item IS NULL OR
                p_array[p_ind].cod_item = " " THEN
                LET l_entra_grades = FALSE
                EXIT FOR
             END IF

             IF p_array[p_ind].pct_ipi IS NULL THEN
                LET p_array[p_ind].pct_ipi = " "
             END IF

             IF p_array[p_ind].cod_cla_fisc_nf IS NULL THEN
                LET p_array[p_ind].cod_cla_fisc_nf = " "
             END IF

             IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                          p_cod_empresa,
                                          p_dados_tela.num_aviso_rec) = FALSE AND
                sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                                        p_cod_empresa,
                                        p_dados_tela.num_aviso_rec) = FALSE THEN

                IF m_mov_qtd_ser = "S" AND p_array[p_ind].qtd_declarad_nf > 1 THEN
                   CALL sup0063_verifica_controles(14,
                                                   p_array[p_ind].cod_item,
                                                   "INCLUSAO",
                                                   "SUP3760")
                      RETURNING m_controles

                   IF m_controles <> " " THEN
                      CALL sup0063_grava_temp_controles(m_controles)
                           RETURNING p_status

                      IF sup0063_existe_controle("11") THEN
                         CALL log0030_mensagem("Movimentação de quantidade deve ser única para item com controle de série.","exclamation")

                         LET l_entra_grades = FALSE
                      END IF
                   END IF
                END IF

                IF l_entra_grades THEN
                   CALL sup3766_informacao_grade_item(p_cod_empresa,
                                                      p_dados_tela.num_aviso_rec,
                                                      p_array[p_ind].seq,
                                                      p_array[p_ind].cod_item,
                                                      p_array[p_ind].qtd_declarad_nf,
                                                      p_array_compl[p_ind].ar_com_pc,
                                                      1,
                                                      p_array_compl[p_ind].num_oc)
                      RETURNING l_status, l_grade
                   IF l_status = FALSE THEN
                      LET p_houve_erro = TRUE
                      EXIT INPUT #598547
                   ELSE
                      IF l_grade = TRUE THEN
                         LET m_informou_grade = TRUE
                      ELSE
                         IF m_informa_controles_sup3760 = "S" THEN #OS544582
                            CALL sup0063_verifica_controles(14, p_array[p_ind].cod_item,"INCLUSAO","SUP3760")
                              RETURNING m_controles

                            IF m_controles <> " " THEN
                               IF log0040_confirm(12,15,"Obrigatório informar o controle de grade/dimensional. Informar controles?") THEN
                                  CALL sup3766_informacao_grade_item(p_cod_empresa,
                                                                     p_dados_tela.num_aviso_rec,
                                                                     p_array[p_ind].seq,
                                                                     p_array[p_ind].cod_item,
                                                                     p_array[p_ind].qtd_declarad_nf,
                                                                     p_array_compl[p_ind].ar_com_pc,
                                                                     0,
                                                                     p_array_compl[p_ind].num_oc)
                                    RETURNING l_status, l_grade

                                  IF l_status = FALSE THEN
                                     LET p_houve_erro = TRUE
                                     EXIT INPUT #598547
                                  ELSE
                                     IF l_grade = TRUE THEN
                                        LET m_informou_grade = TRUE
                                     END IF
                                  END IF
                               ELSE
                                  NEXT FIELD cod_item
                               END IF
                            END IF
                         END IF
                      END IF
                   END IF
                END IF
             ELSE
                EXIT FOR
             END IF
          END FOR

          FOR p_ind = 1 TO 999

             IF p_dados_tela.ies_especie_nf = "NFC" AND
                p_array[p_ind].qtd_declarad_nf IS NULL THEN
                LET p_array[p_ind].qtd_declarad_nf = 0
             END IF
             IF m_wms_instal = 'S' THEN
                IF find4GLFunction('wms6612_retorna_indicador_aduaneiro_ar') THEN
                   IF m_indicador_aduaneiro IS NULL OR m_indicador_aduaneiro = ' ' THEN
                      LET m_indicador_aduaneiro = wms6612_retorna_indicador_aduaneiro_ar(p_cod_empresa, p_dados_tela.num_aviso_rec)
                   END IF
                   IF p_array[p_ind].cod_item IS NOT NULL OR
                      p_array[p_ind].cod_item <> ' ' THEN
                      IF NOT wms6612_verifica_item_generico(p_array[p_ind].cod_item,
                                                            m_indicador_aduaneiro) THEN
                         NEXT FIELD cod_item
                      END IF
                   END IF
                   IF m_tipo_documento = "N" THEN
                      IF p_dados_tela.num_aviso_rec IS NOT NULL AND
                         p_dados_tela.num_aviso_rec <> 0 AND
                         p_array[p_ind].cod_item IS NOT NULL AND
                         p_array[p_ind].cod_item <> ' ' AND
                         m_indicador_aduaneiro = 'T' THEN
                         IF NOT wms6612_tem_conferencia_alfandegado_ar(p_cod_empresa, p_dados_tela.num_aviso_rec) THEN
                            WHENEVER ERROR CONTINUE
                              SELECT peso_item
                                FROM t_peso_item
                               WHERE aviso_rec = p_dados_tela.num_aviso_rec
                                 AND item      = p_array[p_ind].cod_item
                                 AND sequencia = p_array[p_ind].seq
                                 AND peso_item > 0
                            WHENEVER ERROR STOP
                            IF sqlca.sqlcode = 100 THEN
                               CALL wms6612_incluir_peso_item(p_dados_tela.num_aviso_rec,
                                                              p_array[p_ind].cod_item,
                                                              p_array[p_ind].seq)
                               CURRENT WINDOW IS w_sup37601
                            END IF
                         END IF
                      END IF
                   END IF
                END IF
             END IF
             IF m_contr_pes_rec = 'S' THEN   #eduardo o.s. 290538 19/11/03
                WHENEVER ERROR CONTINUE
                SELECT empresa
                  FROM sup_ctr_balanca
                 WHERE empresa           = p_cod_empresa
                   AND num_docum         = p_dados_tela.num_nf
                   AND serie_nota_fiscal = p_dados_tela.ser_nf
                   AND subserie_nf       = p_dados_tela.ssr_nf
                   AND fornecedor        = p_dados_tela.cod_fornecedor
                   AND seq_nota_fiscal   = p_array[p_ind].seq
                   AND tip_pesagem       = "1"
                   AND aviso_recebto     IS NULL
                WHENEVER ERROR STOP
                IF sqlca.sqlcode = 0 THEN
                   FOR l_aux = 1 TO 999
                      IF l_aux = p_ind THEN
                         CONTINUE FOR
                      END IF
                      IF p_array[p_ind].cod_item = p_array[l_aux].cod_item THEN
                         WHENEVER ERROR CONTINUE
                         SELECT empresa
                           FROM sup_ctr_balanca
                          WHERE empresa           = p_cod_empresa
                            AND num_docum         = p_dados_tela.num_nf
                            AND serie_nota_fiscal = p_dados_tela.ser_nf
                            AND subserie_nf       = p_dados_tela.ssr_nf
                            AND fornecedor        = p_dados_tela.cod_fornecedor
                            AND seq_nota_fiscal   = p_array[l_aux].cod_item
                            AND tip_pesagem       = "1"
                            AND aviso_recebto     IS NULL
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            ERROR " Item informado ja possui sequencia com pesagem "
                            SLEEP 2
                            NEXT FIELD cod_item
                         END IF
                      END IF
                   END FOR
                END IF
             END IF

             IF p_array[p_ind].qtd_declarad_nf IS NOT NULL AND
                p_array_compl[p_ind].ar_com_pc = "S" THEN
                LET p_qtd_array = p_array[p_ind].qtd_declarad_nf
                LET p_val_array = p_array[p_ind].pre_unit_nf
                IF p_dados_tela.ies_especie_nf <> "NFD" THEN
                   IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = FALSE THEN
                      LET p_soma_reserva2 = NULL
                      CALL sup386_popup_ordens_reservada(p_cod_empresa,
                        p_array[p_ind].cod_item, p_array_compl[p_ind].num_pedido,
                        p_array_compl[p_ind].num_oc, p_array_compl[p_ind].num_prog_entrega,
                        p_qtd_array, "N" , p_funcao,
                        p_dados_tela.num_aviso_rec, p_array[p_ind].seq, p_ind)
                        RETURNING p_soma_reserva2, p_ies_reservou, p_ord_forn
                        LET p_qtd_array = 0
                        LET p_val_array = 0
                        LET int_flag = 0
                        CALL log006_exibe_teclas("01 02 03 07", p_versao)
                        CURRENT WINDOW IS w_sup37601
                   END IF
                END IF
                #733238#
                IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf, p_cod_empresa, p_dados_tela.num_aviso_rec) = FALSE THEN # Chamado 739204
                   CALL sup0949_busca_parametro_sup_par_divg_rec("consis_diverg_preco", p_array[p_ind].cod_item, p_dados_tela.cod_fornecedor)
                      RETURNING m_consis_diverg_preco, m_parametro_val
                   IF m_consis_diverg_preco IS NOT NULL THEN
                      CALL sup0949_busca_parametro_sup_par_divg_rec("bloq_entr_preco", p_array[p_ind].cod_item, p_dados_tela.cod_fornecedor)
                         RETURNING l_bloq_entr_preco, m_parametro_val
                         IF l_bloq_entr_preco IS NOT NULL THEN
                            LET m_bloq_entr_preco = l_bloq_entr_preco
                         END IF
                   END IF

                   CALL sup0949_busca_parametro_sup_par_divg_rec("bloq_div_dat_entrega", p_array[p_ind].cod_item, p_dados_tela.cod_fornecedor)
                        RETURNING l_bloq_entr_data, m_parametro_val
                   IF l_bloq_entr_data IS NOT NULL THEN
                      LET m_bloq_entr_data = l_bloq_entr_data
                   END IF
                END IF

                #---fim---733238#
                IF (p_funcao = "INCLUSAO" OR p_funcao = "INCLU.ITENS") AND ## 545418
                   m_bloq_entr_data = "S" THEN
                   IF NOT sup0949_verifica_diverg_dat_entrega(p_ind) THEN
                      NEXT FIELD qtd_declarad_nf
                   END IF
                END IF
                ##Se for nota fiscal de importação não deverá verificar divergência de preço
                IF m_bloq_entr_preco = "S" AND p_dados_tela.cod_operacao[1,1] <> "7" AND
                   m_nfr_import = FALSE AND p_array_compl[p_ind].ar_com_pc = "S" {760674} THEN
                   IF NOT sup0949_verifica_diverg_preco_unit(p_funcao, p_ind, p_dados_tela.num_aviso_rec, p_array[p_ind].seq,
                                                             p_array[p_ind].pre_unit_nf, 'SUP3760') THEN
                      NEXT FIELD pre_unit_nf
                   END IF
                END IF
             ELSE
                EXIT FOR
             END IF
          END FOR

          LET p_ind = p_ind_ant

          IF p_funcao = "MODIFICACAO" AND
             p_array_compl[p_ind].alterou_val_liquido = FALSE THEN
             IF p_val_liquido_ant <> p_array[p_ind].val_liquido_item THEN
                ERROR "Altera Base de Calculo do IPI ???" ATTRIBUTE (reverse)
                IF log004_confirm(21,39) THEN
                   LET p_base_ipi[p_ind].val_liquido_item = p_val_liquido_ant
                END IF
                LET p_array_compl[p_ind].alterou_val_liquido = TRUE
             END IF
          END IF

          IF p_ord_forn = FALSE AND
             p_funcao = "INCLUSAO" THEN
             IF (p_pedidos[1,5] = "XXXXX") OR
                (p_pedidos IS NULL)        THEN
                IF p_par_sup.ies_entrada_sem_pc = "N" AND
                   p_ies_entr_sem_ped = FALSE THEN
                   LET p_ies_pagamento2 = NULL
                   CALL sup376_busca_cond_pgto_cap(p_dados_tela.cnd_pgto_nf)
                   LET p_ies_pagamento2 = p_cond_pgto_cap.ies_pagamento
                   IF p_ies_pagamento2 = "3" THEN
                   ELSE
                      ERROR " Nao ha ordens de compras para este Fornecedor "
                      NEXT FIELD qtd_declarad_nf
                   END IF
                END IF
             END IF
          END IF

          LET p_ind = arr_count()

          FOR p_ind2 = 1 TO p_ind
             IF (p_array[p_ind2].cod_item IS NULL OR
                 p_array[p_ind2].cod_item = " ")  AND
                (p_array[p_ind2].den_item IS NULL OR
                 p_array[p_ind2].den_item = " ")  AND
                (p_array[p_ind2].cod_unid_med_nf IS NULL OR
                 p_array[p_ind2].cod_unid_med_nf = " ")  AND
                (p_array[p_ind2].qtd_declarad_nf IS NULL OR
                 p_array[p_ind2].qtd_declarad_nf = 0  OR
                 p_array[p_ind2].qtd_declarad_nf = " ")  AND
                (p_array[p_ind2].pre_unit_nf     IS NULL OR
                 p_array[p_ind2].pre_unit_nf     = 0     OR
                 p_array[p_ind2].pre_unit_nf = " ")      AND
                (p_array[p_ind2].val_liquido_item IS NULL OR
                 p_array[p_ind2].val_liquido_item = 0     OR
                 p_array[p_ind2].val_liquido_item = " ")  THEN
                 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                              p_cod_empresa,
                                              p_dados_tela.num_aviso_rec) = FALSE THEN
                    INITIALIZE p_array[p_ind2].* TO NULL
                 END IF
             ELSE
                IF p_funcao = "MODIFICACAO" THEN
                   CALL sup376_verifica_update_after()

                   CALL sup3760_atualiza_item_de_terc(0, 0," ", " ", p_dados_tela.dat_emis_nf,
                                                      p_dados_tela.dat_entrada_nf,
                                                      p_dados_tela.num_nf, p_dados_tela.ser_nf,
                                                      p_dados_tela.ssr_nf, p_dados_tela.cod_fornecedor,
                                                      p_dados_tela.ies_especie_nf,
                                                      p_array[p_ind2].seq, 2)
                        RETURNING p_status
                END IF

                IF p_funcao = "INCLUSAO" OR
                   p_funcao =  "INCLU.ITENS" THEN

                   IF p_array_compl[p_ind2].ar_com_pc = "S" AND p_par_sup.ies_modulo_compras = "S" THEN
                      IF NOT sup3760_pedido_ordem_valido(p_array_compl[p_ind2].num_pedido,
                                                         p_array_compl[p_ind2].num_oc) THEN
                         NEXT FIELD cod_item
                      END IF
                   END IF

                   IF (p_dados_tela.ies_especie_nf <> "NFR" AND
                       p_dados_tela.ies_especie_nf <> "NFD") OR
                       m_nfr_import THEN
                      IF p_array[p_ind2].cod_item  IS NOT NULL AND
                         p_array[p_ind2].cod_item <> " " THEN
                         IF p_array_compl[p_ind2].ar_com_pc <> "S" OR
                            p_array_compl[p_ind2].ar_com_pc IS NULL THEN

                            LET l_forn_possui_pc = TRUE
                            IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
                               LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
                            END IF

                            IF l_forn_possui_pc THEN
                               IF p_par_sup.ies_modulo_compras = "S" THEN
                                  IF p_par_sup.ies_entrada_sem_pc = "N" AND
                                     p_ies_entr_sem_ped = FALSE THEN
                                     IF p_dados_tela.ies_especie_nf <> "NFC" AND
                                        p_dados_tela.ies_especie_nf <> "CON" AND
                                        p_dados_tela.ies_especie_nf <> "NFE" THEN
                                        ERROR "Empresa nao permite entrada de N.F. sem pedido de compra"
                                        NEXT FIELD cod_item
                                     END IF

                                     IF p_dados_tela.ies_especie_nf = "NFC" AND
                                        (p_par_sup_compl.ies_nf_compl_preco = "3" OR
                                         p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                        ERROR "Empresa nao permite entrada de NFC sem pedido de compra"
                                        NEXT FIELD cod_item
                                     END IF

                                     IF p_dados_tela.ies_especie_nf = "NFE"       AND
                                        (p_par_sup_compl.ies_nf_compl_preco = "2" OR
                                         p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                        ERROR "Empresa nao permite entrada de NFE sem pedido de compra."
                                        NEXT FIELD cod_item
                                     END IF
                                  ELSE
                                     IF p_dados_tela.ies_especie_nf = "NFM" AND m_controla_gao = "S" THEN
                                        IF p_array_pedidos[1].num_pedido IS NULL OR
                                           p_array_pedidos[1].num_pedido = " " THEN
                                           CALL log0030_mensagem(" Função não permitida, NFM com controle de GAO exige pedido de compra","exclamation")
                                           NEXT FIELD cod_item
                                        END IF
                                     END IF
                                  END IF
                               END IF
                            END IF
                         END IF
#### OS 63009 - calcula totais importacao
                         IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
                            LET p_array_imp[p_ind2].val_ii =
                                           (p_array_imp[p_ind2].val_ii_tot *
                                            p_array[p_ind2].qtd_declarad_nf) /
                                            p_array_imp[p_ind2].quantidade
                            LET p_array_imp[p_ind2].val_desp_imp =
                                           (p_array_imp[p_ind2].val_desp_imp_tot *
                                            p_array[p_ind2].qtd_declarad_nf) /
                                            p_array_imp[p_ind2].quantidade
                            LET p_array_imp[p_ind2].val_ipi =
                                           (p_array_imp[p_ind2].val_ipi_tot *
                                            p_array[p_ind2].qtd_declarad_nf) /
                                            p_array_imp[p_ind2].quantidade
                            LET p_array_imp[p_ind2].val_icms =
                                           (p_array_imp[p_ind2].val_icms_tot *
                                            p_array[p_ind2].qtd_declarad_nf) /
                                            p_array_imp[p_ind2].quantidade
                            LET l_val_da_icms = p_array_imp[p_ind2].val_da_icms
                            LET p_array_imp[p_ind2].val_da_icms =
                                           (p_array_imp[p_ind2].val_da_icms *
                                            p_array[p_ind2].qtd_declarad_nf) /
                                            p_array_imp[p_ind2].quantidade

                            LET p_nf_sup.val_ipi_nf = p_nf_sup.val_ipi_nf +
                                                      p_array_imp[p_ind2].val_ipi
                            IF m_num_processo >= g_proc_ini_os163407 THEN
                               LET p_nf_sup.val_despesa_aces = p_nf_sup.val_despesa_aces +
                                                               p_array_imp[p_ind2].val_da_icms
                            ELSE
                               LET p_nf_sup.val_despesa_aces = p_nf_sup.val_despesa_aces +
                                                               p_array_imp[p_ind2].val_ii +
                                                               p_array_imp[p_ind2].val_desp_imp
                            END IF
                            LET p_nf_sup.val_tot_icms_nf_d = p_nf_sup.val_tot_icms_nf_d +
                                                             p_array_imp[p_ind2].val_icms

                            CALL sup3762_busca_piscofins_imp() RETURNING l_val_tot_piscofins

                            IF  l_val_tot_piscofins IS NOT NULL
                            AND l_val_tot_piscofins <> 0 THEN
                               LET l_val_tot_piscofins = (l_val_tot_piscofins *
                                                          p_array[p_ind2].qtd_declarad_nf) /
                                                          p_array_imp[p_ind2].quantidade
                            END IF

                            IF g_icms_total_nf = "S" AND p_nf_sup.dat_entrada_nf >= g_dat_icms_tot_nf THEN
                               LET p_nf_sup.val_tot_nf_d = p_nf_sup.val_tot_nf_d +
                                                          (p_array[p_ind2].val_liquido_item -
                                                           l_val_da_icms +
                                                           p_array_imp[p_ind2].val_da_icms) +
                                                           p_array_imp[p_ind2].val_ipi +
                                                           p_array_imp[p_ind2].val_icms +
                                                           l_val_tot_piscofins
                            ELSE
                               LET p_nf_sup.val_tot_nf_d = p_nf_sup.val_tot_nf_d +
                                                          (p_array[p_ind2].val_liquido_item -
                                                           l_val_da_icms +
                                                           p_array_imp[p_ind2].val_da_icms) +
                                                           p_array_imp[p_ind2].val_ipi +
                                                           l_val_tot_piscofins
                            END IF
                            LET p_dados_tela_f.val_ipi_nf        = p_nf_sup.val_ipi_nf
                            LET p_dados_tela_f.val_tot_icms_nf_d = p_nf_sup.val_tot_icms_nf_d
                            LET p_dados_tela_f.val_tot_nf_d      = p_nf_sup.val_tot_nf_d
                         END IF
                      END IF
                   END IF
                END IF
                IF p_array[p_ind2].cod_item IS NULL OR
                   p_array[p_ind2].cod_item = " "   THEN
                   IF (p_dados_tela.ies_especie_nf <> "NFD" AND
                       p_dados_tela.ies_especie_nf <> "NFR" AND
                       p_dados_tela.ies_especie_nf <> "NFC") OR
                      ((p_dados_tela.ies_especie_nf = "NFD" OR
                        p_dados_tela.ies_especie_nf  =  "NFR") AND
                       p_ies_item_nfd_nfr          = "S")  THEN
                      ERROR "Informe codigo do item"
                      NEXT FIELD cod_item
                   ELSE
                      LET p_array[p_ind2].cod_item = " "
                   END IF
                ELSE
                   IF m_ies_cit_item = "S" THEN
                      IF sup3760_testa_cit_item(p_array[p_ind2].cod_item) THEN
                         ERROR "Produto Citricola, verificar tabela CIT_ITEM "
                         NEXT FIELD cod_item
                      END IF
                   END IF
                END IF
                IF p_array[p_ind2].den_item IS NULL     AND
                   p_dados_tela.ies_especie_nf <> "NFD" AND
                   p_dados_tela.ies_especie_nf <> "NFR" THEN
                   ERROR "Informe denominacao do item"
                   NEXT FIELD den_item
                END IF
                IF p_array[p_ind2].cod_unid_med_nf IS NULL AND
                   p_dados_tela.ies_especie_nf <> "NFD" AND
                   p_dados_tela.ies_especie_nf <> "NFR" AND
                   p_dados_tela.ies_especie_nf <> "NFC" THEN
                   ERROR "Informe unidade de medida"
                   NEXT FIELD cod_unid_med_nf
                END IF

                IF m_tem_valid_fim THEN
                   ### Tabela COD_FISCAL_SUP ja foi convertida.
                   INITIALIZE l_status, l_dat_fim_valid TO NULL
                   CALL sup0686_retorna_dat_fim_valid(p_dados_tela.cod_operacao,
                                                      p_dados_tela.cod_fiscal_compl)
                                                      RETURNING l_status,
                                                                l_dat_fim_valid
                   IF l_dat_fim_valid IS NULL THEN
                      IF p_dados_tela.cod_operacao[3,5] = "101" AND
                         p_ies_contrib_ipi = "S" AND
                         p_array[p_ind2].cod_item IS NOT NULL AND
                         p_array[p_ind2].cod_item <> " " THEN
                         IF p_array[p_ind2].cod_cla_fisc_nf IS NULL OR
                            p_array[p_ind2].cod_cla_fisc_nf = " " OR
                            p_array[p_ind2].cod_cla_fisc_nf = 0 THEN
                            ERROR "Informe classificacao fiscal"
                            NEXT FIELD cod_cla_fisc_nf
                         END IF
                      END IF
                   ELSE
                      IF p_dados_tela.cod_operacao[3,4] = "11" AND
                         p_ies_contrib_ipi = "S" AND
                         p_array[p_ind2].cod_item IS NOT NULL AND
                         p_array[p_ind2].cod_item <> " " THEN
                         IF p_array[p_ind2].cod_cla_fisc_nf IS NULL OR
                            p_array[p_ind2].cod_cla_fisc_nf = " " OR
                            p_array[p_ind2].cod_cla_fisc_nf = 0 THEN
                            ERROR "Informe classificacao fiscal"
                            NEXT FIELD cod_cla_fisc_nf
                         END IF
                      END IF
                   END IF
                ELSE
                   IF p_dados_tela.cod_operacao[3,4] = "11" AND
                      p_ies_contrib_ipi = "S" AND
                      p_array[p_ind2].cod_item IS NOT NULL AND
                      p_array[p_ind2].cod_item <> " " THEN
                      IF p_array[p_ind2].cod_cla_fisc_nf IS NULL OR
                         p_array[p_ind2].cod_cla_fisc_nf = " " OR
                         p_array[p_ind2].cod_cla_fisc_nf = 0 THEN
                         ERROR "Informe classificacao fiscal"
                         NEXT FIELD cod_cla_fisc_nf
                      END IF
                   END IF
                END IF

                IF p_array[p_ind2].qtd_declarad_nf CLIPPED IS NULL THEN
                   ERROR "Informe quantidade declarada"
                   NEXT FIELD qtd_declarad_nf
                END IF

                IF p_array[p_ind2].pre_unit_nf CLIPPED IS NULL THEN
                   ERROR "Informe preco unitario"
                   NEXT FIELD pre_unit_nf
                END IF

                IF p_array[p_ind2].val_liquido_item CLIPPED IS NULL THEN
                   ERROR "Informe valor liquido do item"
                   NEXT FIELD val_liquido_item
                END IF
             END IF
          END FOR
       END IF

    ON KEY (f1, control-w)
       #lds IF NOT LOG_logix_versao5() THEN
       #lds CONTINUE INPUT
       #lds END IF
       CALL sup376_help()
    ON KEY (control-z, f4)
       CALL sup376_popups(p_funcao)
 END INPUT

 LET p_ind = arr_curr()
 LET p_ind1 = scr_line()
 CALL sup3760_botao_zoom("OFF",3,68)
 CURRENT WINDOW IS w_sup37601

 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                              p_cod_empresa,
                              p_dados_tela.num_aviso_rec) = FALSE THEN
    IF p_array[1].cod_item IS NULL THEN
       IF (p_array[1].den_item IS NULL OR
           p_array[1].den_item = " ")  AND
          (p_array[1].cod_unid_med_nf IS NULL OR
           p_array[1].cod_unid_med_nf = " ")  AND
          (p_array[1].qtd_declarad_nf IS NULL OR
           p_array[1].qtd_declarad_nf = 0  OR
           p_array[1].qtd_declarad_nf = " ")  AND
          (p_array[1].pre_unit_nf     IS NULL OR
           p_array[1].pre_unit_nf     = 0     OR
           p_array[1].pre_unit_nf = " ")      AND
          (p_array[1].val_liquido_item IS NULL OR
           p_array[1].val_liquido_item = 0     OR
           p_array[1].val_liquido_item = " ")  THEN
           ERROR "Nao foi informado item para esta nota"
           SLEEP 2
           LET int_flag = 1
           RETURN FALSE
        ELSE
           IF (p_dados_tela.ies_especie_nf <> "NFD" AND
               p_dados_tela.ies_especie_nf <> "NFR") THEN
              LET int_flag = 1
              RETURN FALSE
           END IF
        END IF
    END IF
 END IF

 IF p_dados_tela.cod_fornecedor IS NOT NULL THEN
    IF sup376_verifica_fornecedor() = FALSE THEN
       ERROR "Fornecedor excluido durante a operação."
       SLEEP 2
       LET int_flag = 1
    END IF
  END IF

 IF int_flag = 0 THEN
    RETURN TRUE
 ELSE
    IF p_funcao = "MODIFICACAO" AND m_nf_aguard_nfe_ant = "7" AND
       p_dados_tela.ies_nf_aguard_nfe <> "7" THEN
       CALL sup3760_atualiza_tabela_dados_antigo()
    END IF

    RETURN FALSE
 END IF


 END FUNCTION

 #--------------------------------------------------------#
 FUNCTION sup376_ver_fat_conver_consig(l_cod_item_consig)
#--------------------------------------------------------#

   DEFINE l_cod_item_consig    LIKE item.cod_item,
          l_fat_conver_consig  LIKE item_fornec.fat_conver_unid

     INITIALIZE l_fat_conver_consig TO NULL

     WHENEVER ERROR CONTINUE
     SELECT fat_conver_unid
       INTO l_fat_conver_consig
       FROM item_fornec
      WHERE cod_empresa    = p_cod_empresa
        AND cod_fornecedor = p_dados_tela.cod_fornecedor
        AND cod_item       = l_cod_item_consig
     WHENEVER ERROR STOP

     IF l_fat_conver_consig IS NULL OR
        l_fat_conver_consig = 0 THEN
        LET l_fat_conver_consig = 1
     END IF

     RETURN l_fat_conver_consig

 END FUNCTION

#--------------------------------#
 FUNCTION sup376_move_campos_ar()
#--------------------------------#
 DEFINE p_conta_estab                     SMALLINT,
        l_num_nff                         LIKE nf_item.num_nff,
        l_num_pedido                      LIKE nf_item.num_pedido,
        l_num_sequencia                   LIKE nf_item.num_sequencia,
        l_num_om                          LIKE nf_item.num_om,
        l_cod_fiscal                      LIKE nf_item_fiscal.cod_fiscal,
        l_cod_fiscal_char                 CHAR(04),
        l_count                           SMALLINT,
        l_ser                             SMALLINT,
        sql_stmt                          CHAR(1500),
        l_ord_montag                      LIKE ar_nf_item.ord_montag,     #Vanderlei - OS 329518 #
        l_ies_item_for                    CHAR(01),
        l_cod_item_trans                  LIKE item.cod_item,
        l_ies_tem_inspecao                LIKE item.ies_tem_inspecao,
        l_cod_local_insp                  LIKE item.cod_local_insp,
        l_cod_local_estoq                 LIKE item.cod_local_estoq,
        l_trans_nota_fiscal_fatura        LIKE ar_nf_item.trans_nota_fiscal_fatura,
        l_seq_item_nota_fiscal_fatura     LIKE ar_nf_item.seq_item_nota_fiscal_fatura,
        l_status                          SMALLINT,
        l_final_cod_fiscal                CHAR(03),
        l_gru_desp_item                   LIKE aviso_rec.gru_ctr_desp_item,
        l_cod_tip_desp                    LIKE aviso_rec.cod_tip_despesa

 LET p_conta_estab = 0
 SELECT COUNT(*)
   INTO p_conta_estab
   FROM par_sup_re
  WHERE par_sup_re.cod_empresa = p_cod_empresa
    AND par_sup_re.cod_empresa_estab IS NOT NULL
 IF p_conta_estab IS NULL OR p_conta_estab = " " THEN
    LET p_conta_estab = 0
 END IF

 IF p_conta_estab > 0 AND
    p_dados_tela.cod_empresa_estab IS NULL THEN
### OS 483118
### Se empresa trabalha com conceito de estabelecimento e estiver incluindo nota em empresa ex: 01
### e no sup1420 possui cadastro para a empresa 01 estabelecimento 02 e estabelecimento nulo,
### se não informar estabelecimento na nota este deve permanecer em branco e não mais assumir como
### estabelecimento a própria empresa (por isso foi incluido o select abaixo)
    WHENEVER ERROR CONTINUE
    SELECT cod_empresa_estab
      INTO p_dados_tela.cod_empresa_estab
      FROM par_sup_re
     WHERE par_sup_re.cod_empresa = p_cod_empresa
       AND par_sup_re.cod_empresa_estab = p_cod_empresa
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       INITIALIZE p_dados_tela.cod_empresa_estab TO NULL
    END IF
 END IF

 LET p_aviso_rec.cod_empresa       = p_dados_tela.cod_empresa
 LET p_aviso_rec.cod_empresa_estab = p_dados_tela.cod_empresa_estab
 LET p_aviso_rec.num_aviso_rec     = p_dados_tela.num_aviso_rec
 LET p_aviso_rec.num_seq           = p_array[p_ind].seq

 IF p_nf_sup.ies_situa_import IS NULL OR
    p_nf_sup.ies_situa_import = " " THEN
    LET p_aviso_rec.ies_da_bc_ipi = "S"
 ELSE
    IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
       IF m_num_processo >= g_proc_ini_os163407 THEN
          LET p_aviso_rec.ies_da_bc_ipi = sup3760_determina_indicador_da(p_cod_empresa, m_num_processo)
       ELSE
          LET p_aviso_rec.ies_da_bc_ipi = "S"
       END IF
    ELSE
       LET p_aviso_rec.ies_da_bc_ipi = "G"
    END IF
 END IF

 LET p_aviso_rec.val_contabil_item  = 0

 IF p_array[p_ind].den_item IS NULL THEN
    LET p_array[p_ind].den_item = " "
 END IF

 LET p_aviso_rec.den_item         = p_array[p_ind].den_item
 LET p_aviso_rec.cod_unid_med_nf  = p_array[p_ind].cod_unid_med_nf
 LET p_aviso_rec.cod_cla_fisc     = p_array_compl[p_ind].cod_cla_fisc
 LET p_aviso_rec.cod_cla_fisc_nf  = p_array[p_ind].cod_cla_fisc_nf
 LET p_aviso_rec.val_liquido_item = p_array[p_ind].val_liquido_item
 LET p_aviso_rec.cod_item         = p_array[p_ind].cod_item
 LET p_aviso_rec.qtd_declarad_nf = p_array[p_ind].qtd_declarad_nf
 LET p_aviso_rec.pre_unit_nf      = p_array[p_ind].pre_unit_nf
 LET p_aviso_rec.pct_ipi_declarad = p_array[p_ind].pct_ipi
 LET p_aviso_rec.num_pedido       = p_array_compl[p_ind].num_pedido
 LET p_aviso_rec.num_oc           = p_array_compl[p_ind].num_oc
 LET p_aviso_rec.ies_diverg_listada = "N"

 IF p_array_compl[p_ind].ies_item_estoq  IS NOT NULL THEN
    LET p_aviso_rec.ies_item_estoq    = p_array_compl[p_ind].ies_item_estoq
 END IF

 IF p_nfe_vendas = TRUE OR
    p_ies_nf_transf  = TRUE OR
    g_ies_nf_permuta = TRUE OR
    m_nf_tipo_x      = TRUE THEN ### OS 511148

    #769302#
    IF m_transf_incid_its = 'S' THEN
       WHENEVER ERROR CONTINUE
       SELECT ies_tip_incid_ipi,
              ies_tip_incid_icms
         INTO p_array_dev_trans[p_ind].ies_tip_incid_ipi,
              p_array_dev_trans[p_ind].ies_incid_icms_ite
         FROM item_sup
        WHERE cod_empresa = p_cod_empresa
          AND cod_item    = p_array[p_ind].cod_item
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
          CALL log003_err_sql("SELECT","ITEM_SUP")
       END IF
       IF p_array_dev_trans[p_ind].ies_tip_incid_ipi IS NULL THEN
          LET p_array_dev_trans[p_ind].ies_tip_incid_ipi = ''
       END IF
       IF p_array_dev_trans[p_ind].ies_incid_icms_ite IS NULL THEN
          LET p_array_dev_trans[p_ind].ies_incid_icms_ite = ''
       END IF
    END IF
    #---fim--- 769302#

    LET p_aviso_rec.val_desc_item       = p_array_dev_trans[p_ind].val_desc_item
    LET p_aviso_rec.ies_incid_icms_ite  = p_array_dev_trans[p_ind].ies_incid_icms_ite
    LET p_aviso_rec.ies_tip_incid_ipi   = p_array_dev_trans[p_ind].ies_tip_incid_ipi
    LET p_aviso_rec.ies_bitributacao    = p_array_dev_trans[p_ind].ies_bi_tributacao

    CASE p_aviso_rec.ies_tip_incid_ipi
     WHEN "1" LET p_aviso_rec.ies_tip_incid_ipi = "C"
     WHEN "2" LET p_aviso_rec.ies_tip_incid_ipi = "I"
     WHEN "3" LET p_aviso_rec.ies_tip_incid_ipi = "O"
    END CASE

    CASE p_aviso_rec.ies_incid_icms_ite
     WHEN "1" LET p_aviso_rec.ies_incid_icms_ite = "C"
     WHEN "2" LET p_aviso_rec.ies_incid_icms_ite = "I"
     WHEN "3" LET p_aviso_rec.ies_incid_icms_ite = "O"
     WHEN "4" LET p_aviso_rec.ies_incid_icms_ite = "N"
     WHEN "5" LET p_aviso_rec.ies_incid_icms_ite = "D"
     WHEN "6" LET p_aviso_rec.ies_incid_icms_ite = "U"
     WHEN "7" LET p_aviso_rec.ies_incid_icms_ite = "S"
    END CASE

## OS 454019 / 455451
    LET l_ies_item_for = sup376_busca_par_sup_pad("ies_cod_item_forn",1)
    IF sqlca.sqlcode <> 0 OR
       l_ies_item_for IS NULL OR
       l_ies_item_for = " "   THEN
       LET l_ies_item_for = "N"
    END IF

    LET l_cod_item_trans = p_aviso_rec.cod_item
    IF l_ies_item_for = "S" THEN
       WHENEVER ERROR CONTINUE
       SELECT cod_item_fornec
         INTO l_cod_item_trans
         FROM item_fornec
        WHERE cod_empresa     = p_aviso_rec.cod_empresa
          AND cod_item        = p_aviso_rec.cod_item
          AND cod_fornecedor  = p_nf_sup.cod_fornecedor
       WHENEVER ERROR STOP

       IF sqlca.sqlcode = 0 THEN
          IF l_cod_item_trans IS NULL OR
             l_cod_item_trans = " " THEN
             LET l_cod_item_trans = p_aviso_rec.cod_item
          END IF
       END IF
    END IF
 END IF

 IF p_array_compl[p_ind].ies_liberacao_insp IS NOT NULL THEN
    LET p_aviso_rec.ies_liberacao_insp = p_array_compl[p_ind].ies_liberacao_insp
 END IF

 IF p_array_compl[p_ind].ies_controle_lote IS NULL THEN
 ELSE
    LET p_aviso_rec.ies_controle_lote   = p_array_compl[p_ind].ies_controle_lote
 END IF

 IF p_aviso_rec.num_oc = 0 THEN
    LET  p_aviso_rec.cod_local_estoq     = p_array_compl[p_ind].cod_local_estoq
 END IF

 LET p_aviso_rec.ies_contabil = "S"

 IF p_aviso_rec.ies_item_estoq = "S" THEN
    IF p_aviso_rec.cod_local_estoq = " " OR
       p_aviso_rec.cod_local_estoq IS NULL THEN
       INITIALIZE p_aviso_rec.cod_local_estoq, l_ies_tem_inspecao,
                  l_cod_local_insp, l_cod_local_estoq TO NULL
       WHENEVER ERROR CONTINUE
       SELECT ies_tem_inspecao, cod_local_insp, cod_local_estoq
         INTO l_ies_tem_inspecao, l_cod_local_insp, l_cod_local_estoq
         FROM item
        WHERE cod_empresa = p_cod_empresa
          AND cod_item    = p_aviso_rec.cod_item
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET p_aviso_rec.cod_local_estoq = " "
       ELSE
          IF (m_ies_local_insp IS NOT NULL AND
              m_ies_local_insp = "S")       AND
              l_ies_tem_inspecao = "S"      AND
              l_cod_local_insp IS NOT NULL THEN
             LET p_aviso_rec.cod_local_estoq = l_cod_local_insp
          ELSE
             IF l_cod_local_estoq IS NOT NULL THEN
                LET p_aviso_rec.cod_local_estoq = l_cod_local_estoq
             ELSE
                LET p_aviso_rec.cod_local_estoq = " "
             END IF
          END IF
       END IF
    END IF
 END IF

 IF p_aviso_rec.ies_item_estoq = "N" THEN
    LET p_aviso_rec.cod_local_estoq = " "
 END IF

 INITIALIZE p_aviso_rec_compl_sq.cod_fiscal_compl TO NULL

 LET p_ies_achou_itsup = FALSE
 SELECT *
   INTO p_item_sup.*
   FROM item_sup
  WHERE item_sup.cod_empresa = p_cod_empresa
    AND item_sup.cod_item    = p_array[p_ind].cod_item

 IF sqlca.sqlcode = 0 THEN

    SELECT cod_fiscal_compl
     INTO p_aviso_rec_compl_sq.cod_fiscal_compl
     FROM item_sup_compl
    WHERE item_sup_compl.cod_empresa = p_cod_empresa
      AND item_sup_compl.cod_item    = p_array[p_ind].cod_item
    IF sqlca.sqlcode <> 0 OR
       p_aviso_rec_compl_sq.cod_fiscal_compl IS NULL THEN
       LET p_aviso_rec_compl_sq.cod_fiscal_compl = 0
    END IF

    #--------------------------#
    # Alteração WMS OS: 450083 #
    #--------------------------#
    # Passo 31                 #
    IF m_wms_instal = "S"        AND
       m_segmto_utilizacao = "O" THEN
       IF m_tipo_documento = "P" THEN
          IF m_cfop_compl_nota_fiscal_provis IS NOT NULL AND
             m_cfop_compl_nota_fiscal_provis <> " " THEN
             LET p_aviso_rec_compl_sq.cod_fiscal_compl = m_cfop_compl_nota_fiscal_provis
          END IF
       ELSE
          IF m_tipo_documento = "D" THEN
             IF m_cfop_compl_nota_fiscal_definit IS NOT NULL AND
                m_cfop_compl_nota_fiscal_definit <> " " THEN
                LET p_aviso_rec_compl_sq.cod_fiscal_compl = m_cfop_compl_nota_fiscal_definit
             END IF
          END IF
       END IF
    END IF
    #---------------#

    LET p_ies_achou_itsup = TRUE
    LET p_ult_digitos     = p_item_sup.cod_fiscal
    LET p_aviso_rec.gru_ctr_desp_item = p_item_sup.gru_ctr_desp

    IF p_aviso_rec.gru_ctr_desp_item IS NULL THEN
       LET p_aviso_rec.gru_ctr_desp_item = p_par_sup.cod_grp_despesa
    END IF

    LET p_aviso_rec.cod_comprador       = p_item_sup.cod_comprador
    LET p_aviso_rec.cod_tip_despesa     = p_item_sup.cod_tip_despesa
    IF p_nfe_vendas     = FALSE AND
       p_ies_nf_transf  = FALSE AND
       g_ies_nf_permuta = FALSE AND
       m_nf_tipo_x      = FALSE  THEN ### OS 511148
       LET p_aviso_rec.ies_incid_icms_ite  = p_item_sup.ies_tip_incid_icms
       LET p_aviso_rec.ies_tip_incid_ipi   = p_item_sup.ies_tip_incid_ipi
    END IF
 END IF

 WHENEVER ERROR CONTINUE
 SELECT ordem_sup.gru_ctr_desp,ordem_sup.ies_tip_incid_ipi,
        ordem_sup.ies_tip_incid_icms, ordem_sup.cod_fiscal,
        pedido_sup.cod_comprador, ordem_sup.cod_tip_despesa
   INTO p_aviso_rec.gru_ctr_desp_item, p_aviso_rec.ies_tip_incid_ipi,
        p_aviso_rec.ies_incid_icms_ite, p_ult_digitos,
        p_aviso_rec.cod_comprador, p_aviso_rec.cod_tip_despesa
   FROM ordem_sup, pedido_sup
  WHERE ordem_sup.cod_empresa      = p_cod_empresa
    AND ordem_sup.num_oc           = p_array_compl[p_ind].num_oc
    AND ordem_sup.ies_versao_atual = "S"
    AND pedido_sup.cod_empresa     = p_cod_empresa
    AND pedido_sup.num_pedido      = ordem_sup.num_pedido
    AND pedido_sup.ies_versao_atual = "S"
    AND (ordem_sup.ies_situa_oc = "A" OR
         ordem_sup.ies_situa_oc = "R" OR
         ordem_sup.ies_situa_oc = "C" OR
         ordem_sup.ies_situa_oc = "L")
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF p_nfe_vendas     = TRUE OR
       p_ies_nf_transf  = TRUE OR
       g_ies_nf_permuta = TRUE OR
       m_nf_tipo_x      = TRUE THEN ### OS 511148
       IF p_aviso_rec.ies_tip_incid_ipi IS NULL THEN
          LET p_aviso_rec.ies_tip_incid_ipi   = p_item_sup.ies_tip_incid_ipi
       END IF
       IF p_aviso_rec.ies_incid_icms_ite IS NULL THEN
          LET p_aviso_rec.ies_incid_icms_ite  = p_item_sup.ies_tip_incid_icms
       END IF
    END IF
 END IF

 IF p_dados_tela.ies_especie_nf = "NFP" AND g_gerar_cred_impostos_nfm_import <> '0' THEN
    IF m_grupo_desp_nfp_com_cred_nfm IS NOT NULL AND
       m_grupo_desp_nfp_com_cred_nfm > 0 THEN
       LET p_aviso_rec.gru_ctr_desp_item = m_grupo_desp_nfp_com_cred_nfm
    END IF
 END IF

 #IF p_nfe_import AND m_gerar_cred_impostos_nfm_import <> '0' THEN
 #   LET p_aviso_rec.ies_tip_incid_ipi  = "O"
 #   LET p_aviso_rec.ies_incid_icms_ite = "O"
 #
 #   LET p_aviso_rec.pct_ipi_declarad   = 0
 #   LET p_aviso_rec.pct_ipi_tabela     = 0
 #   LET p_aviso_rec.pct_icms_item_d    = 0
 #   LET p_aviso_rec.pct_icms_item_c    = 0
 #END IF

 CALL sup376_verifica_icms_reg_especial()

 IF p_dados_tela.ies_especie_nf = "NFR" THEN
    IF p_aviso_rec.ies_tip_incid_ipi = " "   OR
       p_aviso_rec.ies_tip_incid_ipi IS NULL
    THEN LET p_aviso_rec.ies_tip_incid_ipi = "C"
    END IF
 END IF

 #512218
 IF p_ies_achou_itsup               = TRUE THEN

    IF p_dados_tela.ies_especie_nf    = "NFE" AND
       p_dados_tela.ies_nf_aguard_nfe = "X"  THEN
       LET p_aviso_rec.cod_fiscal_item[3,5] = p_nf_sup.cod_operacao[3,5]
    ELSE
       LET p_aviso_rec.cod_fiscal_item[3,5] = p_ult_digitos
    END IF
 END IF

 #--------------------------#
 # Alteração WMS OS: 450083 #
 #--------------------------#
 # Passo 32                 #
# IF p_ies_achou_itsup = TRUE THEN
#    LET p_aviso_rec.cod_fiscal_item[3,5] = p_ult_digitos
# END IF
  IF m_wms_instal = "S" AND
     m_segmto_utilizacao = "O" THEN
     IF m_tipo_documento = "P" THEN
        IF m_cfop_nota_fiscal_provis IS NOT NULL AND
           m_cfop_nota_fiscal_provis <> " " THEN
           LET p_aviso_rec.cod_fiscal_item[3,5] = m_cfop_nota_fiscal_provis
        ELSE
           LET p_aviso_rec.cod_fiscal_item[3,5] = p_ult_digitos
        END IF
     ELSE
        IF m_tipo_documento = "D" THEN
           IF m_cfop_nota_fiscal_definit IS NOT NULL AND
              m_cfop_nota_fiscal_definit <> " " THEN
              LET p_aviso_rec.cod_fiscal_item[3,5] = m_cfop_nota_fiscal_definit
           ELSE
              LET p_aviso_rec.cod_fiscal_item[3,5] = p_ult_digitos
           END IF
        ELSE
           LET p_aviso_rec.cod_fiscal_item[3,5] = p_ult_digitos
        END IF
     END IF
  ELSE
     LET p_aviso_rec.cod_fiscal_item[3,5] = p_ult_digitos
  END IF
 #---------------#

 IF p_dados_tela.cod_operacao[1] = "7" THEN
    LET p_aviso_rec.cod_fiscal_item[1,2] = "3."
 END IF
 IF p_dados_tela.cod_operacao[1] = "6" THEN
    LET p_aviso_rec.cod_fiscal_item[1,2] = "2."
 END IF
 IF p_dados_tela.cod_operacao[1] = "5" THEN
    LET p_aviso_rec.cod_fiscal_item[1,2] = "1."
 END IF

 IF m_ies_obj_entrada = "99" AND
    p_dados_tela_f.val_tot_icms_nf_d = 0 AND
    p_dados_tela_f.val_ipi_nf        = 0 THEN
    IF p_aviso_rec.ies_incid_icms_ite  = "C"  OR
       p_aviso_rec.ies_incid_icms_ite IS NULL OR
       p_aviso_rec.ies_incid_icms_ite  = " "
    THEN LET p_aviso_rec.ies_incid_icms_ite     = "I"
    END IF
    IF p_aviso_rec.ies_tip_incid_ipi   = "C"  OR
       p_aviso_rec.ies_tip_incid_ipi IS NULL  OR
       p_aviso_rec.ies_tip_incid_ipi   = " "
    THEN LET p_aviso_rec.ies_tip_incid_ipi      = "I"
    END IF
    CALL sup376_busca_cod_incid_ipi()
    LET p_aviso_rec.val_contabil_item      = p_aviso_rec.val_liquido_item
    IF m_gera_rsv_transf = "S" AND p_nf_sup.ies_nf_aguard_nfe = "8" THEN
       LET p_aviso_rec.val_base_c_ipi_it   = ga_nf_item_fiscal[p_ind].val_base_ipi
       LET p_aviso_rec.val_ipi_calc_item   = ga_nf_item_fiscal[p_ind].val_ipi
       LET p_aviso_rec.pct_ipi_declarad    = 0
    ELSE
       LET p_aviso_rec.val_base_c_ipi_it   = p_aviso_rec.val_liquido_item
    END IF
    IF p_dados_tela.ies_especie_nf = "NFD" OR
       p_ies_tip_entrada = "5" THEN
       IF ga_nf_item_fiscal[p_ind].val_base_ipi IS NOT NULL THEN
          LET p_aviso_rec.val_base_c_ipi_it   = ga_nf_item_fiscal[p_ind].val_base_ipi
       END IF
       IF ga_nf_item_fiscal[p_ind].val_base_icms IS NOT NULL THEN
          LET p_aviso_rec.val_base_c_item_c   = ga_nf_item_fiscal[p_ind].val_base_icms
       ELSE
          LET p_aviso_rec.val_base_c_item_c   = p_aviso_rec.val_liquido_item
       END IF
    ELSE
       LET p_aviso_rec.val_base_c_item_c   = p_aviso_rec.val_liquido_item
    END IF
    CALL sup376_busca_icms()
 ELSE
    IF m_gera_rsv_transf = "S" AND p_nf_sup.ies_nf_aguard_nfe = "8" THEN
       LET p_aviso_rec.val_base_c_ipi_it   = ga_nf_item_fiscal[p_ind].val_base_ipi
       LET p_aviso_rec.val_ipi_calc_item   = ga_nf_item_fiscal[p_ind].val_ipi
       LET p_aviso_rec.pct_ipi_declarad    = 0
    ELSE
       IF p_base_ipi[p_ind].val_liquido_item <> p_aviso_rec.val_liquido_item
       THEN LET p_aviso_rec.val_base_c_ipi_it = 0
       END IF
    END IF
    IF p_dados_tela.ies_especie_nf = "NFD" OR
       p_ies_tip_entrada = "5" THEN
       IF ga_nf_item_fiscal[p_ind].val_base_ipi IS NOT NULL THEN
          LET p_aviso_rec.val_base_c_ipi_it   = ga_nf_item_fiscal[p_ind].val_base_ipi
       END IF
       IF ga_nf_item_fiscal[p_ind].val_base_icms IS NOT NULL THEN
          LET p_aviso_rec.val_base_c_item_c   = ga_nf_item_fiscal[p_ind].val_base_icms
       ELSE
          LET p_aviso_rec.val_base_c_item_c   = p_aviso_rec.val_liquido_item
       END IF
    ELSE
       LET p_aviso_rec.val_base_c_item_c   = p_aviso_rec.val_liquido_item
    END IF
    LET p_aviso_rec.pct_ipi_tabela = p_array_compl[p_ind].pct_ipi_tabela
    CALL sup376_inicializa_info_fiscais()
    CALL sup376_busca_cod_fiscal_item()
    IF m_wms_instal = 'S' THEN
       CALL edi0017_cod_fiscal_wms(p_nf_sup.ies_nf_aguard_nfe, p_aviso_rec.cod_fiscal_item)
          RETURNING p_aviso_rec.cod_fiscal_item
    END IF
    CALL sup376_busca_cod_incid_ipi()
    CALL sup376_busca_bitributacao()
    CALL sup376_busca_incidencia_icms()
    CALL sup376_busca_icms()
 END IF

 CALL sup376_verifica_optante_s_paulista()

 IF p_ies_nf_transf = TRUE THEN
    INITIALIZE l_num_nff, l_num_pedido, l_num_sequencia, l_ord_montag TO NULL
    WHENEVER ERROR CONTINUE
    SELECT num_nff, num_pedido, num_sequencia,
           ord_montag                                     #Vanderlei - OS 329518 #
      INTO l_num_nff, l_num_pedido, l_num_sequencia,
           l_ord_montag                                   #Vanderlei - OS 329518 #
      FROM ar_nf_item
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_aviso_rec.num_aviso_rec
       AND num_seq       = p_aviso_rec.num_seq
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("LEITURA","AR_NF_ITEM")
       LET p_houve_erro = TRUE
       RETURN
    END IF

    IF l_num_nff IS NOT NULL THEN
       INITIALIZE l_count TO NULL

       IF m_ies_fat_unico THEN
          LET sql_stmt = "SELECT fat_nf_item.ord_montag, ",
                                "fat_nf_item.trans_nota_fiscal, ",
                                "fat_nf_item.seq_item_nf ",
                           "FROM fat_nf_mestre, fat_nf_item ",
                          "WHERE fat_nf_mestre.empresa            = """, p_cod_emp_transf, """ ",
                           " AND fat_nf_mestre.nota_fiscal        = ", l_num_nff,
                           " AND fat_nf_mestre.serie_nota_fiscal  = """, p_dados_tela.ser_nf, """ ",
                           " AND fat_nf_mestre.subserie_nf        = ",p_dados_tela.ssr_nf," ",
                           " AND fat_nf_mestre.tip_nota_fiscal    = ""FATPRDSV"" ",
                           " AND fat_nf_mestre.sit_nota_fiscal    = ""N"" ",
                           " AND fat_nf_item.empresa              = fat_nf_mestre.empresa ",
                           " AND fat_nf_item.trans_nota_fiscal    = fat_nf_mestre.trans_nota_fiscal ",
                           " AND fat_nf_item.pedido               = ",l_num_pedido," ",
                           " AND fat_nf_item.seq_item_pedido      = ",l_num_sequencia," ",
                           " AND fat_nf_item.item                 = """,l_cod_item_trans,""" "

          IF l_ord_montag IS NOT NULL THEN
             LET sql_stmt = sql_stmt CLIPPED, "AND ord_montag = ", l_ord_montag
          END IF

       ELSE
          LET sql_stmt = "SELECT COUNT(*)",
                          " FROM nf_item_ser",
                         " WHERE cod_empresa = '", p_cod_emp_transf, "'",
                           " AND num_nff     = ", l_num_nff,
                           " AND ser_nff     = '", p_dados_tela.ser_nf, "'"

          IF l_ord_montag IS NOT NULL THEN
             LET sql_stmt = sql_stmt CLIPPED, "AND num_om    = ", l_ord_montag
          END IF

          WHENEVER ERROR CONTINUE
          PREPARE var_query_1 FROM sql_stmt
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("PREPARE","VAR_QUERY_1")
             LET p_houve_erro = TRUE
             RETURN
          END IF

          WHENEVER ERROR CONTINUE
          DECLARE cq_nf_item_ser CURSOR WITH HOLD FOR var_query_1
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("LEITURA","CQ_NF_ITEM_SER")
             LET p_houve_erro = TRUE
             RETURN
          END IF

          WHENEVER ERROR CONTINUE
          OPEN cq_nf_item_ser
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("OPEN","CQ_NF_ITEM_SER")
             LET p_houve_erro = TRUE
             RETURN
          END IF

          WHENEVER ERROR CONTINUE
          FETCH cq_nf_item_ser INTO l_count
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
             CALL log003_err_sql("LEITURA","CQ_NF_ITEM_SER")
             LET p_houve_erro = TRUE
             RETURN
          END IF

          WHENEVER ERROR CONTINUE
          CLOSE cq_nf_item_ser
          FREE cq_nf_item_ser
          WHENEVER ERROR STOP

          IF l_count = 0 OR l_count IS NULL THEN
             LET l_ser = FALSE

             LET sql_stmt = "SELECT num_om, 0, 0 ",
                              "FROM nf_item ",
                             "WHERE cod_empresa   = """,p_cod_emp_transf,""" ",
                               "AND num_nff       = ",l_num_nff," ",
                               "AND num_pedido    = ",l_num_pedido," ",
                               "AND num_sequencia = ",l_num_sequencia," ",
                               "AND cod_item      = """,l_cod_item_trans,""" "

             IF l_ord_montag IS NOT NULL THEN
                LET sql_stmt = sql_stmt CLIPPED, "AND num_om    = ", l_ord_montag
             END IF

          ELSE
             LET l_ser = TRUE
             LET sql_stmt = "SELECT num_om, 0, 0 ",
                              "FROM nf_item_ser ",
                             "WHERE cod_empresa   = """,p_cod_emp_transf,""" ",
                               "AND num_nff       = ",l_num_nff," ",
                               "AND ser_nff       = """,p_dados_tela.ser_nf,""" ",
                               "AND num_pedido    = ",l_num_pedido," ",
                               "AND num_sequencia = ",l_num_sequencia," ",
                               "AND cod_item      = """,l_cod_item_trans,""" "

             IF l_ord_montag IS NOT NULL THEN
                LET sql_stmt = sql_stmt CLIPPED, "AND num_om    = ", l_ord_montag
             END IF

          END IF
       END IF

       WHENEVER ERROR CONTINUE
       PREPARE var_nf_item2 FROM sql_stmt
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("PREPARE","VAR_NF_ITEM2")
       END IF

       WHENEVER ERROR CONTINUE
       DECLARE cq_nf_item2 CURSOR FOR var_nf_item2
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DECLARE","CQ_NF_ITEM2")
       END IF

       WHENEVER ERROR CONTINUE
       FOREACH cq_nf_item2 INTO l_num_om, l_trans_nota_fiscal_fatura,
                                l_seq_item_nota_fiscal_fatura
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("FOREACH","CQ_NF_ITEM2")
          END IF
          INITIALIZE l_cod_fiscal TO NULL

          IF m_ies_fat_unico THEN
             IF l_trans_nota_fiscal_fatura > 0 THEN
                CALL supr6_busca_cod_fiscal_fat_nf_item_fisc(p_cod_emp_transf,
                                                             l_trans_nota_fiscal_fatura,
                                                             l_seq_item_nota_fiscal_fatura,
                                                             NULL, FALSE)
                   RETURNING l_status, l_cod_fiscal
             END IF

             IF l_cod_fiscal IS NOT NULL THEN
                LET l_cod_fiscal_char = l_cod_fiscal
                LET p_aviso_rec.cod_fiscal_item[3,5] = l_cod_fiscal_char[2,4]
             END IF
          ELSE
             IF l_ser THEN
                WHENEVER ERROR CONTINUE
                SELECT cod_fiscal
                  INTO l_cod_fiscal
                  FROM nf_item_fiscal_ser
                 WHERE cod_empresa   = p_cod_emp_transf
                   AND num_nff       = l_num_nff
                   AND ser_nff       = p_dados_tela.ser_nf
                   AND num_pedido    = l_num_pedido
                   AND num_sequencia = l_num_sequencia
                   AND ord_montag    = l_ord_montag                  #Vanderlei - OS 326518 #
                WHENEVER ERROR STOP
                IF l_cod_fiscal IS NOT NULL THEN
                   LET l_cod_fiscal_char = l_cod_fiscal
                   LET p_aviso_rec.cod_fiscal_item[3,5] = l_cod_fiscal_char[2,4]
                END IF
             ELSE
                WHENEVER ERROR CONTINUE
                SELECT cod_fiscal
                  INTO l_cod_fiscal
                  FROM nf_item_fiscal
                 WHERE cod_empresa   = p_cod_emp_transf
                   AND num_nff       = l_num_nff
                   AND num_pedido    = l_num_pedido
                   AND num_sequencia = l_num_sequencia
                   AND ordem_montag  = l_num_om
                WHENEVER ERROR STOP
                IF l_cod_fiscal IS NOT NULL THEN
                   LET l_cod_fiscal_char = l_cod_fiscal
                   LET p_aviso_rec.cod_fiscal_item[3,5] = l_cod_fiscal_char[2,4]
                END IF
             END IF
          END IF
          EXIT FOREACH
       END FOREACH
    END IF
 END IF

 IF p_dados_tela.cod_operacao[1] = "7" AND
    p_dados_tela.ies_especie_nf  = "NFM" THEN
    LET p_aviso_rec.ies_bitributacao = "S"
 END IF

 IF p_aviso_rec.cod_cla_fisc IS NULL THEN
    LET p_aviso_rec.cod_cla_fisc = " "
 END IF
 IF p_aviso_rec.cod_cla_fisc_nf IS NULL THEN
    LET p_aviso_rec.cod_cla_fisc_nf = " "
 END IF
 IF p_aviso_rec.pct_ipi_declarad IS NULL THEN
    LET p_aviso_rec.pct_ipi_declarad = 0
 END IF
 IF p_dados_tela.ies_especie_nf = "NFC" AND
    p_aviso_rec.ies_item_estoq = "N"    AND
    (p_aviso_rec.num_pedido = 0 OR
     p_aviso_rec.num_pedido IS NULL OR
     p_aviso_rec.num_pedido = " " ) THEN
    LET p_aviso_rec.ies_situa_ar = "E"
 END IF
 IF g_ies_transf_benef = TRUE THEN
    LET p_aviso_rec.cod_operac_estoq = p_dados_tela.cod_operac_estoq
 END IF
 IF g_ies_transf_benef = TRUE AND
    g_ies_retorno_ind = TRUE THEN
    LET p_aviso_rec.ies_item_estoq = "N"
 END IF

 #O.S. 550997
 IF p_nfe_vendas = TRUE OR
   (p_dados_tela.ies_especie_nf = "NFD" OR
    p_ies_tip_entrada = "5") THEN
    IF sup1786_existe_cadastro_sup1785(p_cod_empresa) THEN #cadastro sup1785?
       ##A nota fiscal não está sendo carregada do VDP.
       IF p_nfe_vendas = FALSE THEN
          IF sup1786_cfop_cadastrado_devolucao_sup1785(p_cod_empresa,
                                                       p_dados_tela.cod_operacao) THEN
             LET p_aviso_rec.cod_fiscal_item = p_aviso_rec.cod_fiscal_item[1,2], p_dados_tela.cod_operacao[3,5]
             CALL sup1786_busca_grupo_tipo_desp_por_cfop_dev(p_cod_empresa,
                                                             p_dados_tela.cod_operacao)
                  RETURNING l_gru_desp_item, l_cod_tip_desp
          END IF
       ELSE
          ##Necessário chamar esta função para pegar os dados da NF de saída na
          ##tabela ar_nf_item, pois será utilizado na função
          ##SUP1786_busca_cfop_tipo_e_grupo_desp_sup1785
          CALL sup1786_devolucao_total(p_cod_empresa, p_aviso_rec.num_aviso_rec,
                                       p_aviso_rec.num_seq, p_dados_tela.ser_nf)
               RETURNING l_status

          CALL SUP1786_busca_cfop_tipo_e_grupo_desp_sup1785(p_cod_empresa,0)
               RETURNING l_final_cod_fiscal,
                         l_gru_desp_item,
                         l_cod_tip_desp

          IF l_final_cod_fiscal IS NOT NULL AND l_final_cod_fiscal <> " " THEN
             LET p_aviso_rec.cod_fiscal_item = p_aviso_rec.cod_fiscal_item[1,2], l_final_cod_fiscal
          END IF
       END IF

       IF l_gru_desp_item IS NOT NULL THEN
          LET p_aviso_rec.gru_ctr_desp_item = l_gru_desp_item
       END IF

       IF l_cod_tip_desp IS NOT NULL THEN
          LET p_aviso_rec.cod_tip_despesa = l_cod_tip_desp
       END IF
    END IF
 END IF
 #O.S. 550997

 # Inicio chamado 794.336
 IF LOG_existe_epl('sup3760y_after_process_move_campos_ar') THEN
    IF p_aviso_rec.num_oc IS NOT NULL THEN
       CALL LOG_setVar('cod_empresa', p_cod_empresa)
       #EPL Codigo da empresa
       #EPL TIPO: ordem_sup.cod_empresa

       CALL LOG_setVar('num_oc', p_aviso_rec.num_oc)
       #EPL Numero da orde de compra
       #EPL TIPO: ordem_sup.num_oc

       CALL LOG_setVar('num_aviso_rec', p_aviso_rec.num_aviso_rec)
       #EPL Numero do aviso de recebimento
       #EPL TIPO: aviso_rec.num_aviso_rec

       CALL LOG_setVar('num_seq', p_aviso_rec.num_seq)
       #EPL Numero da sequencia do aviso de recebimento
       #EPL TIPO: aviso_rec.num_seq

       CALL LOG_setVar('status', FALSE)
       #EPL Status do retorno
       #EPL TIPO: SMALLINT

       CALL LOG_setVar('incidencia_ipi', NULL)
       #EPL Incidencia do IPI
       #EPL TIPO: aviso_rec.ies_tip_incid_ipi

       CALL LOG_setVar('incidencia_icms', NULL)
       #EPL Incidencia do ICMS
       #EPL TIPO: aviso_rec.ies_incid_icms_ite

       CALL LOG_setVar('grupo_despesa', NULL)
       #EPL Grupo de despesa
       #EPL TIPO: aviso_rec.gru_ctr_desp_item

       CALL LOG_setVar('cod_fiscal', NULL)
       #EPL Codigo fiscal
       #EPL TIPO: aviso_rec.cod_fiscal_item

       CALL LOG_setVar('tip_despesa', NULL)
       #EPL Tipo de despesa do item
       #EPL TIPO: aviso_rec.cod_tip_despesa

       IF sup3760y_after_process_move_campos_ar() THEN
          LET l_status = LOG_getVar('status')

          IF l_status THEN
             LET p_aviso_rec.ies_tip_incid_ipi  = LOG_getVar('incidencia_ipi')
             LET p_aviso_rec.ies_incid_icms_ite = LOG_getVar('incidencia_icms')
             LET p_aviso_rec.gru_ctr_desp_item  = LOG_getVar('grupo_despesa')
             LET p_aviso_rec.cod_fiscal_item    = LOG_getVar('cod_fiscal')
             LET p_aviso_rec.cod_tip_despesa    = LOG_getVar('tip_despesa')
          END IF
       END IF
    END IF
 END IF
 # Fim chamado 794.336

 END FUNCTION

#---------------------------------#
 FUNCTION sup376_inclusao_nf_sup()
#---------------------------------#
 DEFINE ik                  SMALLINT,
        l_ind               SMALLINT,
        l_count_seq         SMALLINT,
        l_data              DATETIME YEAR TO SECOND,
        l_nf_transito_imp   SMALLINT

 SELECT cod_fornecedor
   FROM fornecedor
  WHERE fornecedor.cod_fornecedor = p_dados_tela.cod_fornecedor
 IF sqlca.sqlcode <> 0 THEN
    ERROR  "Fornecedor nao cadastrado na tabela FORNECEDOR. ",p_dados_tela.cod_fornecedor
    LET p_houve_erro = TRUE
 END IF

 IF p_nfe_vendas = FALSE AND
    m_nf_tipo_x  = FALSE THEN ### OS 511148
    LET p_nf_sup.cod_empresa        = p_cod_empresa
    LET p_nf_sup.cod_empresa_estab  = p_dados_tela.cod_empresa_estab
    LET p_nf_sup.num_nf             = p_dados_tela.num_nf
    LET p_nf_sup.ser_nf             = p_dados_tela.ser_nf
    LET p_nf_sup.ssr_nf             = p_dados_tela.ssr_nf

    IF p_dados_tela.ies_especie_nf = "NFS"
    OR p_dados_tela.ies_especie_nf = "REC"
    OR p_dados_tela.ies_especie_nf = "DOC" THEN
       LET p_nf_sup.cod_regist_entrada = p_par_sup.cod_regist_entrada
       #778903 - Inicio
       IF m_reg_entr_doc_rec <> 0 AND
         (p_dados_tela.ies_especie_nf = "REC" OR p_dados_tela.ies_especie_nf = "DOC") THEN
          LET p_nf_sup.cod_regist_entrada = m_reg_entr_doc_rec
       END IF
       #778903 - Fim
    ELSE
       LET p_nf_sup.cod_regist_entrada = 01
    END IF

    #--------------------relac NFE-----------------------#
    IF p_dados_tela.ies_nf_aguard_nfe = "2" THEN
       LET p_nf_sup.cod_regist_entrada =  02
    END IF
    #--------------------relac NFE-----------------------#

    LET p_nf_sup.ies_especie_nf     = p_dados_tela.ies_especie_nf
    LET p_nf_sup.dat_emis_nf        = p_dados_tela.dat_emis_nf
    LET p_nf_sup.ies_nf_aguard_nfe  = p_dados_tela.ies_nf_aguard_nfe
    LET p_nf_sup.num_aviso_rec      = p_dados_tela.num_aviso_rec
    LET p_nf_sup.dat_entrada_nf     = p_dados_tela.dat_entrada_nf
    LET p_nf_sup.cod_fornecedor     = p_dados_tela.cod_fornecedor
    LET p_nf_sup.cnd_pgto_nf        = p_dados_tela.cnd_pgto_nf
    LET p_nf_sup.cod_mod_embar      = p_dados_tela.cod_mod_embar
    IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
    ELSE
       LET p_nf_sup.cod_operacao    = p_dados_tela.cod_operacao
    END IF
    LET p_nf_sup.cod_imp_renda      = p_cod_ret_imp
    LET p_nf_sup.val_ipi_nf         = p_dados_tela_f.val_ipi_nf
    LET p_nf_sup.val_tot_icms_nf_d  = p_dados_tela_f.val_tot_icms_nf_d
    LET p_nf_sup.val_tot_nf_d       = p_dados_tela_f.val_tot_nf_d
    LET p_nf_sup.val_bc_imp_renda   = 0
    LET p_nf_sup.val_imp_renda      = 0
    IF (p_par_sup_compl.ies_mod_importacao = "S" OR
        p_par_sup_compl.ies_mod_importacao = "L") THEN
        IF p_nf_sup.cod_operacao[1] = "7" THEN
           IF p_cod_pais_emp <> p_fornecedor.cod_pais AND
             (p_nf_sup.ies_especie_nf = "NFE" OR
              p_nf_sup.ies_especie_nf = "NFP") THEN
              IF m_ies_utiliz_provisao = "S" AND
                 m_utiliz_nfm_import = "N" AND
                 m_num_processo >= m_inicio_provisao THEN
                 LET p_nf_sup.ies_situa_import = "E"
              ELSE
                 IF m_nfp_incl_apos_encerr THEN
                    LET p_nf_sup.ies_situa_import = "E"
                 ELSE
                    LET p_nf_sup.ies_situa_import = "A"
                 END IF
              END IF
              LET p_aviso_rec_compl.ies_incl_import = "N"
           ELSE
              IF p_cod_pais_emp <> p_fornecedor.cod_pais AND
                 p_dados_tela.ies_especie_nf = "NFM" THEN
                 LET p_nf_sup.ies_situa_import = "A" #ALTERACAO_NFM_NFP
                 LET p_aviso_rec_compl.ies_incl_import = "N"
              END IF
           END IF
        ELSE
           IF m_nfr_import THEN
              IF m_ies_utiliz_provisao = "S" AND
                 m_utiliz_nfm_import = "N" AND
                 m_num_processo >= m_inicio_provisao THEN
                 LET p_nf_sup.ies_situa_import = "E"
              ELSE
                 IF m_nfp_incl_apos_encerr THEN
                    LET p_nf_sup.ies_situa_import = "E"
                 ELSE
                    LET p_nf_sup.ies_situa_import = "A"
                 END IF
              END IF
              LET p_aviso_rec_compl.ies_incl_import = "N"
           ELSE
              LET p_nf_sup.ies_situa_import = " "
           END IF
        END IF
    ELSE
       LET p_nf_sup.ies_situa_import = " "
    END IF
 ELSE
    LET p_nf_sup.ser_nf             = p_dados_tela.ser_nf
 END IF

 IF p_nf_sup.cod_imp_renda IS NULL OR
    p_nf_sup.cod_imp_renda = " " THEN
    LET p_nf_sup.val_imp_renda = 0
    LET p_nf_sup.val_bc_imp_renda = 0
 END IF

 IF p_aguarda_fatura = "S"  THEN
    IF m_pc_nf_consig = "S" THEN
      IF p_aviso_rec.num_oc IS NULL OR p_aviso_rec.num_oc = 0 THEN
         ERROR " Nota de remessa de consignacao seme ordem/pedido relacionados. "
         SLEEP 2
         LET p_houve_erro = TRUE
         RETURN FALSE
      END IF
    END IF
    IF m_ies_armaz_itau <> "S" AND p_dados_telar.ies_nf_aguard_nfe <> "7" THEN
       LET p_nf_sup.ies_nf_aguard_nfe = "4"
       LET p_dados_telar.ies_nf_aguard_nfe = "4"
       LET p_dados_tela.ies_nf_aguard_nfe = "4"
    END IF
 END IF

 LET l_nf_transito_imp = FALSE
 IF find4GLFunction("supy117_consiste_nota_fiscal_transito") THEN
    IF supy117_consiste_nota_fiscal_transito(p_dados_tela.ies_nf_aguard_nfe,
                                             p_dados_tela.ies_especie_nf) THEN
       LET l_nf_transito_imp = TRUE
    END IF
 END IF
 IF  p_dados_tela.ies_nf_aguard_nfe = "6" OR
     l_nf_transito_imp = TRUE OR
     sup3760_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                          p_nf_sup.cod_operacao) = TRUE OR
    (p_dados_tela.ies_especie_nf = "NFD" AND
     p_dados_tela.ies_nf_aguard_nfe = "9") OR
    p_dados_tela.ies_nf_aguard_nfe = "B" OR
    (p_dados_tela.ies_especie_nf = "NFE" AND
     p_dados_tela.ies_nf_aguard_nfe = "X") THEN

    WHENEVER ERROR CONTINUE
    SELECT cod_empresa
      FROM nfe_sup_compl
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       WHENEVER ERROR CONTINUE
       UPDATE nfe_sup_compl SET ies_proc_nfs = '2'
        WHERE cod_empresa   = p_cod_empresa
          AND num_aviso_rec = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("UPDATE","NFE_SUP_COMPL")
       END IF
    ELSE
       INSERT INTO nfe_sup_compl VALUES(p_cod_empresa,
                                        p_dados_tela.num_aviso_rec,
                                        " ",
                                        0,
                                        0,
                                        0,
                                        "2",
                                        NULL,
                                        0,
                                        0,
                                        " ",
                                        " ",
                                        "N")
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INCLUSAO","NFE_SUP_COMPL")
       END IF
    END IF
 END IF

 IF p_dados_tela.ies_especie_nf = "NFM" THEN
    FOR ik = 1 TO p_ind
       IF p_array[ik].cod_item IS NULL OR
          p_array[ik].cod_item =  " "  THEN
          EXIT FOR
       ELSE
         WHENEVER ERROR CONTINUE
          INSERT INTO nf_pend VALUES(p_cod_empresa, p_dados_tela.num_nf,
                                     p_dados_tela.ser_nf, p_dados_tela.ssr_nf,
                                     p_dados_tela.cod_fornecedor,
                                     p_array[ik].cod_item,
                                     p_array[ik].qtd_declarad_nf, 0, NULL,
                                     TODAY)
         WHENEVER ERROR STOP
         IF sqlca.sqlcode = -239 OR
            SQLCA.sqlcode = -268 THEN
            UPDATE nf_pend
               SET qtd_recebida = qtd_recebida + p_array[ik].qtd_declarad_nf
             WHERE cod_empresa    = p_cod_empresa
               AND num_nf         = p_dados_tela.num_nf
               AND ser_nf         = p_dados_tela.ser_nf
               AND ssr_nf         = p_dados_tela.ssr_nf
               AND cod_fornecedor = p_dados_tela.cod_fornecedor
               AND cod_item       = p_array[ik].cod_item
         END IF
       END IF
    END FOR
 END IF

 #--inicio--OS 414316 #
 IF sup3760_existe_h_nf_sup(p_nf_sup.cod_empresa, p_nf_sup.num_nf, p_nf_sup.ser_nf,
                            p_nf_sup.ssr_nf, p_nf_sup.ies_especie_nf, p_nf_sup.cod_fornecedor,
                            p_nf_sup.dat_emis_nf) THEN  #809554
    CALL log0030_mensagem('Nota fiscal já cadastrada em histórico.','stop')
    LET p_houve_erro = 1
 END IF
 #---fim----OS 414316 #

 #####
 IF p_nf_sup.ies_situa_import IS NULL THEN
    LET p_nf_sup.ies_situa_import = " "
 END IF

 IF p_nf_sup.val_tot_nf_d IS NULL THEN
    LET p_nf_sup.val_tot_nf_d = 0
 END IF

 IF p_nf_sup.val_tot_icms_nf_d IS NULL THEN
    LET p_nf_sup.val_tot_icms_nf_d = 0
 END IF

 IF p_nf_sup.val_ipi_nf IS NULL THEN
    LET p_nf_sup.val_ipi_nf = 0
 END IF

 WHENEVER ERROR CONTINUE

 INSERT INTO nf_sup VALUES (p_nf_sup.*)
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0  THEN
    IF p_nfe_import AND m_ies_utiliz_provisao = "S" AND
       m_utiliz_nfm_import = "N" AND
       m_num_processo >= m_inicio_provisao THEN
       SELECT COUNT(*)
        INTO l_count_seq
        FROM aviso_rec
       WHERE cod_empresa   = p_cod_empresa
         AND num_aviso_rec = p_aviso_rec.num_aviso_rec
         AND num_pedido    > 0

       LET g_prim_rateio = TRUE
       FOR l_ind = 1 TO l_count_seq
          IF m_num_processo >= g_proc_ini_os163407 THEN
             IF NOT imp0101_rateio_desp_imp(p_aviso_rec.num_aviso_rec, l_ind,
                                            p_aviso_rec.val_base_c_icms_da) THEN
                ERROR " Problemas no rateio das despesas de importacao "
                SLEEP 2
                LET p_houve_erro = TRUE
                RETURN FALSE
             END IF
          ELSE
             IF NOT imp0101_rateio_desp_imp_ant(p_aviso_rec.num_aviso_rec, l_ind) THEN
                ERROR " Problemas no rateio das despesas de importacao "
                SLEEP 2
                LET p_houve_erro = TRUE
                RETURN FALSE
             END IF
          END IF
       END FOR
       IF m_num_processo >= g_proc_ini_os163407 THEN
          IF NOT imp0101_calcula_icms_ar(p_aviso_rec.num_aviso_rec) THEN
             ERROR " Problemas no calculo do icms das despesas acessorias. "
             SLEEP 2
             LET p_houve_erro = TRUE
             RETURN FALSE
          END IF
       ELSE
          CALL imp0101_item_sem_icms(m_num_processo, p_aviso_rec.num_aviso_rec)
       END IF
    END IF
    ### OS327252 ###
    IF p_nfm_import = TRUE THEN
       IF sup3760_grava_sup_par_ar(p_nf_sup.cod_empresa,
                                   p_nf_sup.num_aviso_rec,
                                   0,
                                   "processo_import",
                                   " ",
                                   " ",
                                   m_num_processo,
                                   " ") = FALSE THEN
          LET p_houve_erro = TRUE
          RETURN FALSE
       END IF
    END IF
    ### FIM OS327252 ###

    # Rose
    IF m_possui_regime_filial = TRUE THEN
       IF sup3760_grava_sup_par_ar(p_nf_sup.cod_empresa,
                                   p_nf_sup.num_aviso_rec,
                                   0,
                                   "emitente_regime_fi",
                                   " ",
                                   m_emitente_nf_filial,
                                   " ",
                                   " ") = FALSE THEN
          LET p_houve_erro = TRUE
          RETURN FALSE
       END IF
    END IF
    #Fim Rose

    LET l_data = EXTEND(CURRENT, YEAR TO SECOND)
    IF sup3760_grava_sup_par_ar(p_nf_sup.cod_empresa,
                                p_nf_sup.num_aviso_rec,
                                0,
                                "data_hora_nf_entrada",
                                " ",
                                l_data,
                                " ",
                                " ") = FALSE THEN
       LET p_houve_erro = TRUE
       RETURN FALSE
    END IF

    ### OS426421 ###
    IF  m_via_transporte_nota IS NOT NULL
    AND m_via_transporte_nota <> ' ' THEN
       IF NOT sup3760_grava_sup_par_ar(p_nf_sup.cod_empresa,
                                       p_nf_sup.num_aviso_rec,
                                       0,
                                       "meio_transp_ar",
                                       "",
                                       "",
                                       m_via_transporte_nota,
                                       "") THEN
          LET p_houve_erro = TRUE
          RETURN FALSE
       END IF
    END IF
    ### FIM OS426421 ###

    IF NOT sup1031_grava_audit_ar_incl_nf(p_nf_sup.num_aviso_rec,0,"SUP3760",
                                          "1", m_dat_hor_proces) THEN
       LET P_HOUVE_ERRO = TRUE
       RETURN FALSE
    END IF
    INITIALIZE m_dat_hor_proces TO NULL

    IF m_utiliza_num_nfe = 'S' AND
       m_utiliza_nf_eletronica = 'S'  AND
       m_num_nf_eletronica > 7 THEN
       IF sup3760_grava_num_nfe() = FALSE THEN
          LET p_houve_erro = TRUE
          RETURN FALSE
       END IF
    END IF

    #O.S 210882
    IF p_nf_sup.ies_nf_aguard_nfe = "C" THEN
       CALL sup3762_inf_nota_origem("INCLUSAO")
    END IF

    LET p_dados_telar.* = p_dados_tela.*
    LET p_formonlyr.* = p_formonly.*
    RETURN TRUE
 ELSE
    CALL log003_err_sql("INCLUSAO","NF_SUP")
    LET p_houve_erro = TRUE
    RETURN FALSE
 END IF

END FUNCTION

#--------------------------------------#
 FUNCTION sup376_move_campos_ar_copia()
#--------------------------------------#
 DEFINE l_ies_tem_inspecao LIKE item.ies_tem_inspecao,
        l_cod_local_insp   LIKE item.cod_local_insp,
        l_cod_local_estoq  LIKE item.cod_local_estoq
 LET p_aviso_rec.num_pedido       = p_array_compl[p_ind].num_pedido
LET p_aviso_rec.num_oc           = p_array_compl[p_ind].num_oc
IF p_array_compl[p_ind].ies_item_estoq  IS NOT NULL THEN
    LET p_aviso_rec.ies_item_estoq    = p_array_compl[p_ind].ies_item_estoq
END IF
IF p_array_compl[p_ind].ies_liberacao_insp IS NOT NULL THEN
    LET p_aviso_rec.ies_liberacao_insp = p_array_compl[p_ind].ies_liberacao_insp
 END IF

IF p_array_compl[p_ind].ies_controle_lote IS NULL THEN
ELSE
   LET p_aviso_rec.ies_controle_lote   = p_array_compl[p_ind].ies_controle_lote
END IF

IF p_aviso_rec.num_oc > 0 THEN
 ELSE
   LET  p_aviso_rec.cod_local_estoq     = p_array_compl[p_ind].cod_local_estoq
END IF

IF p_aviso_rec.ies_item_estoq = "S" THEN
    IF p_aviso_rec.cod_local_estoq = " " OR
       p_aviso_rec.cod_local_estoq IS NULL THEN
       INITIALIZE p_aviso_rec.cod_local_estoq, l_ies_tem_inspecao,
                  l_cod_local_insp, l_cod_local_estoq TO NULL
       WHENEVER ERROR CONTINUE
       SELECT ies_tem_inspecao, cod_local_insp, cod_local_estoq
         INTO l_ies_tem_inspecao, l_cod_local_insp, l_cod_local_estoq
         FROM item
        WHERE cod_empresa = p_cod_empresa
          AND cod_item    = p_aviso_rec.cod_item
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET p_aviso_rec.cod_local_estoq = " "
       ELSE
          IF l_ies_tem_inspecao = "S" AND l_cod_local_insp IS NOT NULL THEN
             LET p_aviso_rec.cod_local_estoq = l_cod_local_insp
          ELSE
             IF l_cod_local_estoq IS NOT NULL THEN
                LET p_aviso_rec.cod_local_estoq = l_cod_local_estoq
             ELSE
                LET p_aviso_rec.cod_local_estoq = " "
             END IF
          END IF
       END IF
    END IF
 END IF

 IF p_aviso_rec.ies_item_estoq = "N" THEN
    LET p_aviso_rec.cod_local_estoq = " "
 END IF

 SELECT ordem_sup.gru_ctr_desp,ordem_sup.ies_tip_incid_ipi,
        ordem_sup.ies_tip_incid_icms, ordem_sup.cod_fiscal,
        pedido_sup.cod_comprador, ordem_sup.cod_tip_despesa
   INTO p_aviso_rec.gru_ctr_desp_item, p_aviso_rec.ies_tip_incid_ipi,
        p_aviso_rec.ies_incid_icms_ite, p_ult_digitos,
        p_aviso_rec.cod_comprador, p_aviso_rec.cod_tip_despesa
   FROM ordem_sup, pedido_sup
  WHERE ordem_sup.cod_empresa      = p_cod_empresa
    AND ordem_sup.num_oc           = p_array_compl[p_ind].num_oc
    AND ordem_sup.ies_versao_atual = "S"
    AND pedido_sup.cod_empresa     = p_cod_empresa
    AND pedido_sup.num_pedido      = ordem_sup.num_pedido
    AND pedido_sup.ies_versao_atual = "S"
    AND (ordem_sup.ies_situa_oc = "A" OR
         ordem_sup.ies_situa_oc = "R" OR
         ordem_sup.ies_situa_oc = "C" OR
         ordem_sup.ies_situa_oc = "L")

 IF p_dados_tela.ies_especie_nf = "NFC" AND
    p_aviso_rec.ies_item_estoq = "N"    AND
    (p_aviso_rec.num_pedido = 0 OR
     p_aviso_rec.num_pedido IS NULL OR
     p_aviso_rec.num_pedido = " " ) THEN
    LET p_aviso_rec.ies_situa_ar = "E"
 END IF

 END FUNCTION

#---------------------------------------#
 FUNCTION sup376_inclusao_nf_sup_copia()
#---------------------------------------#
 DEFINE ik        SMALLINT

 IF p_nf_sup.ies_nf_aguard_nfe = "6" OR
### OS 358438
    (p_nf_sup.ies_especie_nf = "NFD" AND
     p_nf_sup.ies_nf_aguard_nfe = "9") OR
    p_nf_sup.ies_nf_aguard_nfe = "B" OR
    (p_nf_sup.ies_especie_nf = "NFE" AND
     p_nf_sup.ies_nf_aguard_nfe = "X") THEN
    WHENEVER ERROR CONTINUE
    SELECT cod_empresa
      FROM nfe_sup_compl
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       WHENEVER ERROR CONTINUE
       UPDATE nfe_sup_compl SET ies_proc_nfs = '2'
        WHERE cod_empresa   = p_cod_empresa
          AND num_aviso_rec = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("UPDATE","NFE_SUP_COMPL")
       END IF
    ELSE
       INSERT INTO nfe_sup_compl VALUES(p_cod_empresa,
                                        p_dados_tela.num_aviso_rec,
                                        " ",
                                        0,
                                        0,
                                        0,
                                        "2",
                                        NULL, #808565#
                                        0,
                                        0,
                                        " ",
                                        " ",
                                        "N")
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INCLUSAO","NFE_SUP_COMPL")
       END IF
    END IF
 END IF

 LET p_nf_sup.ser_conhec = " "

 #--inicio--OS 414316 #
 IF sup3760_existe_h_nf_sup(p_nf_sup.cod_empresa, p_nf_sup.num_nf, p_nf_sup.ser_nf,
                            p_nf_sup.ssr_nf, p_nf_sup.ies_especie_nf, p_nf_sup.cod_fornecedor,
                            p_nf_sup.dat_emis_nf) THEN #809554
    CALL log0030_mensagem('Nota fiscal já cadastrada em histórico.','stop')
    LET p_houve_erro = 1
 END IF
 #---fim----OS 414316 #

 IF p_nf_sup.ies_situa_import IS NULL THEN
    LET p_nf_sup.ies_situa_import = " "
 END IF

 IF p_nf_sup.val_tot_nf_d IS NULL THEN
    LET p_nf_sup.val_tot_nf_d = 0
 END IF

 IF p_nf_sup.val_tot_icms_nf_d IS NULL THEN
    LET p_nf_sup.val_tot_icms_nf_d = 0
 END IF

 IF p_nf_sup.val_ipi_nf IS NULL THEN
    LET p_nf_sup.val_ipi_nf = 0
 END IF

 INSERT INTO nf_sup VALUES (p_nf_sup.*)
 IF sqlca.sqlcode = 0  THEN

    IF NOT sup1031_grava_audit_ar_incl_nf(p_nf_sup.num_aviso_rec,0,"SUP3760",
                                          "1", m_dat_hor_proces) THEN
       LET P_HOUVE_ERRO = TRUE
       RETURN FALSE
    END IF
    INITIALIZE m_dat_hor_proces TO NULL

    LET p_dados_telar.* = p_dados_tela.*
    LET p_formonlyr.* = p_formonly.*
    RETURN TRUE
 ELSE
    CALL log003_err_sql("INCLUSAO","NF_SUP")
    LET p_houve_erro = TRUE
    RETURN FALSE
 END IF

END FUNCTION
#--------------------------------#
 FUNCTION sup376_popups(p_funcao)
#--------------------------------#
 DEFINE p_num_pedido       LIKE pedido_sup.num_pedido,
        p_num_oc           LIKE ar_diverg.num_oc,
        p_num_prog_entrega LIKE ar_diverg.num_prog_entrega,
        p_cod_item         LIKE ordem_sup.cod_item,
        p_den_item         LIKE aviso_rec.den_item,
        p_cnd_pgto_nf      LIKE cond_pgto_cap.cnd_pgto,
        p_cod_imp_renda    LIKE nf_sup.cod_imp_renda,
        p_cod_cla_fisc_nf  LIKE aviso_rec.cod_cla_fisc_nf,
        p_cod_unid_med_nf  LIKE aviso_rec.cod_unid_med_nf,
        p_cod_local_estoq  LIKE aviso_rec.cod_local_estoq,
        p_funcao           CHAR(30),
        p_cod_operacao     LIKE estoque_operac.cod_operacao,
        p_pop_item         CHAR(07),
        l_cod_fiscal       LIKE cod_fiscal_sup.cod_fiscal,
        l_cod_fiscal_c     LIKE cod_fiscal_sup.cod_fiscal_compl,
        l_cod_banco        LIKE fornecedor.cod_banco,
        l_num_agencia      LIKE fornecedor.num_agencia,
        l_dig_num_agencia  CHAR(02),
        l_num_conta_banco  LIKE fornecedor.num_conta_banco,
        l_dig_conta_banco  CHAR(02),
        l_tipo             CHAR(01),
        l_condicao         CHAR(200),
        l_cod_operacao     LIKE nf_sup.cod_operacao,
        l_count            SMALLINT,
        l_cod_item_depositante LIKE item.cod_item,
        l_item_depositante     LIKE item.cod_item,
        l_status               SMALLINT,
        l_depositante          CHAR(15)


 INITIALIZE p_cod_imp_renda, p_num_pedido,p_num_oc ,p_num_prog_entrega TO NULL
 INITIALIZE p_cod_cla_fisc_nf,p_cod_item,p_den_item ,p_cod_unid_med_nf TO NULL
 INITIALIZE p_cod_local_estoq  TO NULL
 CASE
    WHEN infield(cod_empresa_estab)
         CALL sup133_popup_empresa_estab(p_cod_empresa)
              RETURNING p_dados_tela.cod_empresa_estab
         IF p_dados_tela.cod_empresa_estab IS NOT NULL THEN
            CURRENT WINDOW IS w_sup37601
            DISPLAY BY NAME p_dados_tela.cod_empresa_estab
         END IF
    WHEN infield(cod_fornecedor)
         LET p_dados_tela.cod_fornecedor = sup162_popup_fornecedor()
         IF p_dados_tela.cod_fornecedor IS NOT NULL  THEN
            CURRENT WINDOW IS w_sup37601
            DISPLAY BY NAME p_dados_tela.cod_fornecedor
         END IF
         CURRENT WINDOW IS w_sup37601
    WHEN infield(cod_unid_med_nf)
         LET p_cod_unid_med_nf = man114_popup_unid_med()
         IF p_cod_unid_med_nf IS NOT NULL  THEN
            CURRENT WINDOW IS w_sup37601
            LET p_array[p_ind].cod_unid_med_nf = p_cod_unid_med_nf
            DISPLAY p_array[p_ind].cod_unid_med_nf TO s_sup37601[p_ind1].cod_unid_med_nf
         END IF
         #--------------------------#
         # Alteração WMS OS: 450083 #
         #--------------------------#
         # Passo XX                 #
         IF m_wms_instal = "S" THEN
            LET p_array_wms[p_ind].cod_unid_med_nf = p_cod_unid_med_nf
         END IF

    WHEN infield(num_nf)
         IF p_dados_tela.cod_fornecedor IS NULL  THEN
            ERROR " O codigo do fornecedor deve ser informado "
         ELSE
            CALL sup125_popup_ordens_fornec(p_cod_empresa,p_dados_tela.cod_fornecedor)
            FOR p_ind = 1 TO 200
               IF p_array_volta[p_ind].num_pedido IS NULL THEN
                  EXIT FOR
               END IF
               LET p_num_pedido = p_array_volta[p_ind].num_pedido
               LET p_num_oc     = p_array_volta[p_ind].num_oc
               LET p_num_prog_entrega = p_array_volta[p_ind].num_prog_entrega
               LET p_cod_item = p_array_volta[p_ind].cod_item
               LET p_den_item = p_array_volta[p_ind].den_item
               LET p_cod_unid_med_nf = p_array_volta[p_ind].cod_unid_med
            END FOR
            IF p_num_pedido IS NOT NULL  THEN
               CURRENT WINDOW IS w_sup37601
            END IF
         END IF
    WHEN infield(cod_cla_fisc_nf)
         CALL sup108_popup_clas_fiscal() RETURNING p_cod_cla_fisc_nf
         IF p_cod_cla_fisc_nf IS NOT NULL  THEN
            LET p_array[p_ind].cod_cla_fisc_nf = p_cod_cla_fisc_nf
            CURRENT WINDOW IS w_sup37601
            DISPLAY p_array[p_ind].cod_cla_fisc_nf TO s_sup37601[p_ind1].cod_cla_fisc_nf
         END IF

    WHEN infield(cod_operac_estoq)
         LET p_cod_operacao  = sup794_popup_operac_estoq_ar(p_cod_empresa)
         IF p_cod_operacao IS NOT NULL THEN
            LET p_dados_tela.cod_operac_estoq = p_cod_operacao
            CURRENT WINDOW IS w_sup37601
            DISPLAY BY NAME p_dados_tela.cod_operac_estoq
         END IF

    WHEN infield(cod_operacao)
        CALL sup111_popup_cod_fiscal_sup(TODAY,"NF_SAIDA")
            RETURNING l_cod_fiscal, l_cod_fiscal_c
         IF l_cod_fiscal IS NOT NULL THEN
            LET p_dados_tela.cod_operacao     = l_cod_fiscal
            LET p_dados_tela.cod_fiscal_compl = l_cod_fiscal_c
            CURRENT WINDOW IS w_sup37601
            DISPLAY BY NAME p_dados_tela.cod_operacao
            DISPLAY BY NAME p_dados_tela.cod_fiscal_compl
         END IF
    WHEN infield(cnd_pgto_nf)
         IF find4GLFunction('capy106_popup_cond_pgto_ativ') THEN
            LET p_cnd_pgto_nf = capy106_popup_cond_pgto_ativ()
         ELSE
            LET p_cnd_pgto_nf = sup123_popup_cond_pgto_cap()
         END IF
         IF p_cnd_pgto_nf IS NOT NULL  THEN
            CURRENT WINDOW IS w_sup37601
            LET p_dados_tela.cnd_pgto_nf = p_cnd_pgto_nf
            DISPLAY BY NAME p_dados_tela.cnd_pgto_nf
         END IF
    WHEN infield(cod_mod_embar)
         LET p_dados_tela.cod_mod_embar = sup122_popup_modo_embarque()
         IF p_dados_tela.cod_mod_embar IS NOT NULL  THEN
            CURRENT WINDOW IS w_sup37601
            DISPLAY BY NAME p_dados_tela.cod_mod_embar
         END IF

    WHEN infield(cod_item)
          INITIALIZE p_pop_item TO NULL

       LET l_count = 0
       IF  p_dados_tela.ies_especie_nf    = "NFR" THEN
          IF log0150_verifica_se_tabela_existe("sup_fornec_tri_ter") THEN
             LET l_cod_operacao = p_dados_tela.cod_operacao[3,5]
             IF p_dados_tela.ies_nf_aguard_nfe = "A" THEN
                WHENEVER ERROR CONTINUE
                SELECT COUNT(*)
                  INTO l_count
                  FROM sup_fornec_tri_ter
                 WHERE empresa         = p_cod_empresa
                   AND fornecedor      = p_dados_tela.cod_fornecedor
                   AND cod_fisc_fornec = l_cod_operacao
                WHENEVER ERROR STOP
             ELSE
                WHENEVER ERROR CONTINUE
                SELECT COUNT(*)
                  INTO l_count
                  FROM sup_fornec_tri_ter
                 WHERE empresa            = p_cod_empresa
                   AND fornec_depositante = p_dados_tela.cod_fornecedor
                   AND cod_fisc_depos     = l_cod_operacao
                WHENEVER ERROR STOP
             END IF

             IF sqlca.sqlcode <> 0
             OR l_count IS NULL THEN
                LET l_count = 0
             END IF
          END IF
       END IF


       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       # Passo 25                 #
       #WMS instalado e NOTA FISCAL <> de NORMAL
       IF m_wms_instal = "S" AND (m_tipo_documento <> 'N' OR m_indicador_aduaneiro = 'D' OR m_indicador_aduaneiro = 'T') THEN
          IF m_segmento = "I" THEN
              CALL wms6071_popup_item(p_cod_empresa, NULL)
                                      RETURNING l_cod_item_depositante
          ELSE
              CALL wms6071_popup_item(p_cod_empresa, m_wms_depositante)
                                      RETURNING l_cod_item_depositante
          END IF
          IF  m_segmento <> "I" THEN
              IF p_dados_tela.ies_nf_aguard_nfe = "A" OR
                 p_dados_tela.ies_nf_aguard_nfe = "B" OR
                 p_dados_tela.ies_nf_aguard_nfe = "7" THEN
                 # Se a NF for do tipo 7-(Material em trânsito) exibir os códigos dos itens
                 # do depositante se o mesmo for encontrado na wms_item_complemento.
                 CALL wmst81_wms_item_complemento_get_dados_deposit(p_cod_empresa,
                                                                    l_cod_item_depositante,
                                                                    1)
                                                                    RETURNING l_status,
                                                                              l_depositante,
                                                                              l_item_depositante
              ELSE
                 INITIALIZE l_item_depositante TO NULL
              END IF
          ELSE
             LET l_item_depositante = l_cod_item_depositante
          END IF

          IF m_indicador_aduaneiro = 'D' OR m_indicador_aduaneiro = 'T' THEN
             IF l_cod_item_depositante IS NOT NULL THEN
                CALL wmst81_wms_item_complemento_get_dados_deposit(p_cod_empresa,
                                                                   l_cod_item_depositante,
                                                                   1)
                                                                   RETURNING l_status,
                                                                             l_depositante,
                                                                             l_item_depositante
             END IF
          END IF

          CURRENT WINDOW IS w_sup37601

          IF l_item_depositante IS NOT NULL AND
             l_item_depositante <> " " THEN
             LET p_array_wms[p_ind].cod_item = l_item_depositante
             DISPLAY p_array_wms[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
          ELSE
             LET p_array_wms[p_ind].cod_item = l_cod_item_depositante
             DISPLAY p_array_wms[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
          END IF
       ELSE
          INITIALIZE p_pop_item TO NULL
          IF l_count = 0 THEN
            OPEN WINDOW w_pop_item AT 15,20 WITH 2 ROWS, 36 COLUMNS ATTRIBUTE(BORDER)
              MENU "OPCAO"
               COMMAND KEY("6") "sup6230" "Popup item SUP6230"
                 MESSAGE " "
                 LET p_pop_item = "sup6230"
                 EXIT MENU
               COMMAND KEY("7") "sup7020" "Popup item SUP7020"
                 MESSAGE " "
                 LET p_pop_item = "sup7020"
                 EXIT MENU
               #534641
               #COMMAND KEY("8") "sup1648" "Popup item triangulação"
               #   MESSAGE " "
               #   LET p_pop_item  ="sup3760"
               #   EXIT MENU
               #534641
               COMMAND "Fim" "Cancela selecao de popup de item"
                 EXIT MENU
  #lds COMMAND KEY ("control-F1") "Sobre" "Informações sobre a aplicação (CTRL-F1)."
  #lds CALL LOG_info_sobre(sourceName(),p_versao)

           END MENU
           CLOSE WINDOW w_pop_item

         ELSE
            LET l_cod_operacao = p_dados_tela.cod_operacao[3,5]
            IF p_dados_tela.ies_nf_aguard_nfe = "A" THEN
               LET l_condicao = " sup_fornec_tri_ter.fornecedor = """,p_dados_tela.cod_fornecedor,""" ",
                            " AND sup_fornec_tri_ter.cod_fisc_fornec = """,l_cod_operacao,""" "
               CALL log009_popup2(3, 5, "Item / Depositante", "Item","Cód. Depos", "sup_fornec_tri_ter",
                             "item", "fornec_depositante", "SUP1648", "S", l_condicao)
                  RETURNING p_array[p_ind].cod_item
            ELSE
               LET l_condicao = " sup_fornec_tri_ter.fornec_depositante = """,p_dados_tela.cod_fornecedor,""" ",
                            " AND sup_fornec_tri_ter.cod_fisc_depos = """,l_cod_operacao,""" "
               CALL log009_popup2(3, 5, "Item / Fornecedor", "Item","Cód. Fornec", "sup_fornec_tri_ter",
                             "item", "fornecedor", "SUP1648", "S", l_condicao)
                  RETURNING p_array[p_ind].cod_item
            END IF
            CURRENT WINDOW IS w_sup37601
            DISPLAY p_array[p_ind].cod_item TO s_sup37601[p_ind1].cod_item

            INITIALIZE p_pop_item TO NULL
         END IF


       IF p_pop_item IS NOT NULL THEN
         IF p_dados_tela.ies_especie_nf = "NFD" OR
            p_dados_tela.ies_especie_nf = "NFR" THEN
            IF p_pop_item = "sup6230" THEN
               CALL sup623_popup_cliente_item(p_dados_tela.cod_fornecedor)
                 RETURNING p_array[p_ind].cod_item
            ELSE
               LET p_array[p_ind].cod_item = sup702_popup_item()
            END IF
            IF p_array[p_ind].cod_item IS NOT NULL  THEN
               CURRENT WINDOW IS w_sup37601
               DISPLAY p_array[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
            END IF
         ELSE
            IF (p_dados_tela.ies_especie_nf <> "NFR"  AND
                p_dados_tela.ies_especie_nf <> "NFD") AND
               (p_array_compl[p_ind].num_pedido IS NULL OR
                p_array_compl[p_ind].num_pedido = " "   OR
                p_array_compl[p_ind].num_pedido = 0)    THEN
               IF p_pop_item = "sup6230"  THEN
                  CALL sup623_popup_cliente_item(p_dados_tela.cod_fornecedor)
                    RETURNING p_array[p_ind].cod_item
               ELSE
                  LET p_array[p_ind].cod_item = sup702_popup_item()
               END IF
               IF p_array[p_ind].cod_item IS NOT NULL  AND
                  p_array[p_ind].cod_item <> " " THEN
                  CURRENT WINDOW IS w_sup37601
                  CALL sup376_busca_item(p_cod_empresa, p_array[p_ind].cod_item)
                       RETURNING p_status
                  LET p_array[p_ind].den_item        = p_item.den_item
                  LET p_array[p_ind].cod_unid_med_nf = p_item.cod_unid_med
                  DISPLAY p_array[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
                  DISPLAY p_array[p_ind].den_item TO s_sup37601[p_ind1].den_item
                  DISPLAY p_array[p_ind].cod_unid_med_nf TO s_sup37601[p_ind1].cod_unid_med_nf
               END IF
            END IF

            IF p_dados_tela.ies_especie_nf = "NFR" OR
               p_dados_tela.ies_especie_nf = "NFD" THEN
               IF p_array[p_ind].cod_item IS NOT NULL  THEN
                  CURRENT WINDOW IS w_sup37601
                  CALL sup376_busca_item(p_cod_empresa,p_array[p_ind].cod_item)
                       RETURNING p_status
                  LET p_array[p_ind].den_item        = p_item.den_item
                  LET p_array[p_ind].cod_unid_med_nf = p_item.cod_unid_med
                  DISPLAY p_array[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
                  DISPLAY p_array[p_ind].den_item TO s_sup37601[p_ind1].den_item
                  DISPLAY p_array[p_ind].cod_unid_med_nf TO s_sup37601[p_ind1].cod_unid_med_nf
               END IF
            END IF
         END IF
        END IF
       END IF


    WHEN infield(pre_unit_nf)
         IF p_array[p_ind].qtd_declarad_nf IS NOT NULL AND
            p_array_compl[p_ind].ar_com_pc = "S" THEN
            IF p_funcao = "MODIFICACAO" AND
               p_array_compl[p_ind].ies_bloqueada = "S" THEN
            ELSE
               LET p_qtd_array = p_array[p_ind].qtd_declarad_nf
               LET p_val_array = p_array[p_ind].val_liquido_item
               IF p_val_array IS NULL THEN
                  LET p_val_array = (p_array[p_ind].pre_unit_nf * p_qtd_array)
               END IF

               IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) THEN
                  IF p_dados_tela.ies_especie_nf <> "NFD" AND
                     p_dados_tela.ies_especie_nf <> "NFR" THEN
                     CALL sup861_popup_ordens_val_reserv(p_cod_empresa,
                     p_array[p_ind].cod_item,
                     p_array_compl[p_ind].num_pedido, p_array_compl[p_ind].num_oc, p_array_compl[p_ind].num_prog_entrega,
                     p_val_array, "S", p_funcao, p_dados_tela.num_aviso_rec,
                     p_array[p_ind].seq, p_ind)
                     RETURNING p_val_soma_reserva2, p_ies_reservou, p_ord_forn
                  END IF
               ELSE
                  IF p_dados_tela.ies_especie_nf <> "NFD" AND
                     p_dados_tela.ies_especie_nf <> "NFR" THEN
                     CALL sup386_popup_ordens_reservada(p_cod_empresa,
                     p_array[p_ind].cod_item,
                     p_array_compl[p_ind].num_pedido, p_array_compl[p_ind].num_oc, p_array_compl[p_ind].num_prog_entrega,
                     p_qtd_array, "S", p_funcao, p_dados_tela.num_aviso_rec,
                     p_array[p_ind].seq, p_ind)
                     RETURNING p_soma_reserva2, p_ies_reservou, p_ord_forn
                     CALL log006_exibe_teclas("01 02 03 07", p_versao)
                  END IF
               END IF
               LET int_flag = 0
               LET p_qtd_array = 0
               CURRENT WINDOW IS w_sup37601
            END IF
         END IF
    WHEN infield(cod_banco)
       CALL sup3762_popup_cta_corrente() RETURNING l_cod_banco,
                                                   l_num_agencia,
                                                   l_dig_num_agencia,
                                                   l_num_conta_banco,
                                                   l_dig_conta_banco

       CALL log006_exibe_teclas("01 02 03 07", p_versao)
       CURRENT WINDOW IS w_sup3760a

       IF l_cod_banco IS NOT NULL THEN
          DISPLAY l_cod_banco       TO cod_banco
          DISPLAY l_num_agencia     TO num_agencia
          DISPLAY l_dig_num_agencia TO dig_num_agencia
          DISPLAY l_num_conta_banco TO num_conta_banco
          DISPLAY l_dig_conta_banco TO dig_conta_banco
       END IF

    WHEN infield(classif_nfc)
       LET m_classif_nfc = log0830_list_box(11,40, "1 {1-Complemento imposto}, 2 {2-Complemento Valor}")
       CURRENT WINDOW IS w_sup3760i
       LET INT_FLAG = FALSE
       IF m_classif_nfc IS NOT NULL THEN
          DISPLAY m_classif_nfc TO classif_nfc
          CASE m_classif_nfc
              WHEN '1'
                 DISPLAY 'Complemento imposto' TO den_classif_nfc
              WHEN '2'
                 DISPLAY 'Complemento Valor' TO den_classif_nfc
          END CASE
       END IF

    WHEN infield(natureza)
       LET m_natureza = log0830_list_box(11,40, "A {A-Sem dedução}, B {B-Com dedução/incentivo}, C {C-Isenta ISSQN}, D {D-Devolução}, E {E-Não incidência}, F {F-Imune}, G {G-Construção civil}, H {H-Regime estimativa}, I {I-Sociedade civil}")
       CURRENT WINDOW IS w_sup3760h
       LET INT_FLAG = FALSE
       IF m_natureza IS NOT NULL THEN
          DISPLAY m_natureza TO natureza
          CASE m_natureza
              WHEN 'A'
                 DISPLAY 'SEM DEDUÇÃO' TO den_natureza
              WHEN 'B'
                 DISPLAY 'COM DEDUÇÃO/ INCENTIVO' TO den_natureza
              WHEN 'C'
                 DISPLAY 'ISENTA DE ISSQN' TO den_natureza
              WHEN 'D'
                 DISPLAY 'DEVOLUÇÃO' TO den_natureza
              WHEN 'E'
                 DISPLAY 'NÃO INCIDÊNCIA' TO den_natureza
              WHEN 'F'
                 DISPLAY 'IMUNE' TO den_natureza
              WHEN 'G'
                 DISPLAY 'CONSTRUÇÃO CIVIL' TO den_natureza
              WHEN 'H'
                 DISPLAY 'REGIME DE ESTIMATIVA' TO den_natureza
              WHEN 'I'
                 DISPLAY 'SOCIEDADE CIVIL' TO den_natureza
          END CASE
       END IF

   WHEN infield(m_num_ar_relac) #OS450170
     LET m_num_ar_relac = sup1988_zoom_nf_relacionadas(m_cfop_serv)
     CURRENT WINDOW IS w_sup3760k

     IF  m_num_ar_relac IS NOT NULL
     AND m_num_ar_relac <> " " THEN
        DISPLAY BY NAME m_num_ar_relac
     END IF
 END CASE
 #--inicio--vanderlei OS 332356 #
 CALL log140_procura_caminho("sup3760.iem") RETURNING m_arq_help
 OPTIONS
    HELP FILE m_arq_help
 #---fim----vanderlei OS 332356 #
 CALL log006_exibe_teclas("01 02 03 07", p_versao)
 CURRENT WINDOW IS w_sup37601
 END FUNCTION

#----------------------#
 FUNCTION sup376_help()
#----------------------#
 CASE
    WHEN INFIELD(cod_empresa_estab)      CALL showhelp(101)
    WHEN INFIELD(cod_fornecedor)         CALL showhelp(102)
    WHEN INFIELD(num_nf)                 CALL showhelp(103)
    WHEN INFIELD(num_nfe)                CALL SHOWHELP(103)
    WHEN INFIELD(ser_nf)                 CALL showhelp(104)
    WHEN INFIELD(ssr_nf)                 CALL showhelp(105)
    WHEN INFIELD(ies_especie_nf)         CALL showhelp(106)
    WHEN INFIELD(ies_nf_aguard_nfe)      CALL showhelp(107)
    WHEN INFIELD(cod_operac_estoq)       CALL showhelp(108)
    WHEN INFIELD(cod_operacao)           CALL showhelp(109)
    WHEN INFIELD(cod_fiscal_compl)       CALL showhelp(110)
    WHEN INFIELD(dat_emis_nf)            CALL showhelp(111)
    WHEN INFIELD(dat_entrada_nf)         CALL showhelp(112)
    WHEN INFIELD(cnd_pgto_nf)            CALL showhelp(114)
    WHEN INFIELD(cod_mod_embar)          CALL showhelp(115)
    WHEN INFIELD(ies_impostos)           CALL showhelp(116)
    WHEN INFIELD(cod_item)               CALL showhelp(117)
    WHEN INFIELD(den_item)               CALL showhelp(118)
    WHEN INFIELD(qtd_declarad_nf)        CALL showhelp(119)
    WHEN INFIELD(cod_unid_med_nf)        CALL showhelp(120)
    WHEN INFIELD(pre_unit_nf)            CALL showhelp(121)
    WHEN INFIELD(val_liquido_item)       CALL showhelp(122)
    WHEN INFIELD(cod_cla_fisc_nf)        CALL showhelp(123)
    WHEN INFIELD(pct_ipi)                CALL showhelp(124)
    WHEN INFIELD(val_ipi_nf)             CALL showhelp(125)
    WHEN INFIELD(val_tot_icms_nf_d)      CALL showhelp(126)
    WHEN INFIELD(val_tot_nf_d)           CALL showhelp(127)
    WHEN INFIELD(ies_desc_acres)         CALL showhelp(128)
    WHEN INFIELD(num_aviso_rec)          CALL showhelp(129)
    WHEN INFIELD(cod_banco)              CALL showhelp(130)
    WHEN INFIELD(num_agencia)            CALL showhelp(131)
    WHEN INFIELD(num_conta_banco)        CALL showhelp(132)
    WHEN INFIELD(nf_origem)              CALL showhelp(133)
    WHEN INFIELD(ser_nf_origem)          CALL showhelp(134)
    WHEN INFIELD(ssr_nf_origem)          CALL showhelp(135)
    WHEN INFIELD(especie_nf_origem)      CALL showhelp(136)
    #--inicio--vanderlei OS 332356 #
    WHEN INFIELD(num_nf_dest)            CALL showhelp(103)
    WHEN INFIELD(ser_nf_dest)            CALL showhelp(104)
    WHEN INFIELD(ssr_nf_dest)            CALL showhelp(105)
    WHEN INFIELD(fornec_dest)            CALL showhelp(102)
    WHEN INFIELD(ies_nf_aguard_nfe_dest) CALL showhelp(107)
    #---fim----vanderlei OS 332356 #
    WHEN INFIELD(natureza)               CALL showhelp(137)
    WHEN INFIELD(serie_dds)              CALL showhelp(138)
    WHEN INFIELD(modelo_dds)             CALL showhelp(139)
    WHEN INFIELD(m_den_item)             CALL showhelp(118) #OS47794
    WHEN infield(m_peso_nf)              CALL showhelp(140)
    WHEN infield(m_num_ar_relac)         CALL showhelp(141) #OS450170
### OS 511148
    WHEN infield(num_nff)                CALL showhelp(143)
    WHEN infield(ser_nff)                CALL showhelp(144)
    WHEN infield(alterar)                CALL showhelp(145)
    WHEN infield(quantidade)             CALL showhelp(146)
### OS 511148
    WHEN infield(seleciona)              CALL showhelp(147) #OS490902
    WHEN infield(l_num_nf_cobranca)      CALL showhelp(148)
    WHEN infield(qtd_devolvida)          CALL showhelp(149) #-- OS 562700
  END CASE

END FUNCTION

#-----------------------------------------#
 FUNCTION sup376_consulta_aviso_rec(l_tipo)
#-----------------------------------------#
 DEFINE l_tipo         CHAR(15)
 DEFINE l_status       SMALLINT
 DEFINE where_clause   CHAR(2000),
        sql_stmt       CHAR(3000)
 DEFINE p_funcao       CHAR(30)
 DEFINE p_cod_empresa_estab LIKE par_sup_re.cod_empresa_estab

 LET p_funcao = " "
 CALL log006_exibe_teclas("02 07", p_versao)
 CURRENT WINDOW IS w_sup37601
 LET p_dados_telar.* = p_dados_tela.*
 LET p_formonlyr.* = p_formonly.*
 LET p_nf_sup.num_conhec = 0
 INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
 INITIALIZE p_formonly.* TO NULL
 INITIALIZE  where_clause, sql_stmt  TO NULL
 INITIALIZE m_dat_entrada_ant        TO NULL
 CLEAR FORM
 DISPLAY p_cod_empresa TO cod_empresa

 DECLARE cq_emp CURSOR FOR
 SELECT cod_empresa_estab
   FROM par_sup_re
  WHERE par_sup_re.cod_empresa = p_cod_empresa
 FOREACH cq_emp INTO p_cod_empresa_estab
 END FOREACH

 IF l_tipo = "CHAVE_ACESSO" THEN
    LET where_clause = sup13429_solicita_chave_acesso_consulta('NF')
    CURRENT WINDOW IS w_sup37601
 ELSE
    IF p_cod_empresa_estab is not null and
       p_cod_empresa_estab <> " " THEN
       CONSTRUCT BY NAME where_clause ON nf_sup.cod_empresa_estab,
                                         nf_sup.num_aviso_rec,
                                         nf_sup.cod_fornecedor,
                                         nf_sup.num_nf,
                                         nf_sup.ser_nf,
                                         nf_sup.ssr_nf,
                                         nf_sup.ies_especie_nf,
                                         nf_sup.ies_nf_aguard_nfe,
                                         nf_sup.dat_emis_nf,
                                         nf_sup.dat_entrada_nf
         BEFORE FIELD cod_fornecedor
           CALL sup3760_botao_zoom("ON",3,68)
         AFTER FIELD cod_fornecedor
           CALL sup3760_botao_zoom("OFF",3,68)

         ON KEY (control-w, f1)
            #lds IF NOT LOG_logix_versao5() THEN
            #lds CONTINUE CONSTRUCT
            #lds END IF
           CALL sup376_help()
         ON KEY (control-z, f4)
           CALL sup376_popups(p_funcao)
       END CONSTRUCT
    ELSE
       CONSTRUCT BY NAME where_clause ON nf_sup.num_aviso_rec,
                                         nf_sup.cod_fornecedor,
                                         nf_sup.num_nf,
                                         nf_sup.ser_nf,
                                         nf_sup.ssr_nf,
                                         nf_sup.ies_especie_nf,
                                         nf_sup.ies_nf_aguard_nfe,
                                         nf_sup.dat_emis_nf,
                                         nf_sup.dat_entrada_nf
          BEFORE FIELD cod_fornecedor
            CALL sup3760_botao_zoom("ON",3,68)
          AFTER FIELD cod_fornecedor
            CALL sup3760_botao_zoom("OFF",3,68)

          ON KEY (control-w, f1)
             #lds IF NOT LOG_logix_versao5() THEN
             #lds CONTINUE CONSTRUCT
             #lds END IF
            CALL sup376_help()
          ON KEY (control-z, f4)
            CALL sup376_popups(p_funcao)
       END CONSTRUCT
    END IF
 END IF

 CALL log006_exibe_teclas("01", p_versao)
 CURRENT WINDOW IS w_sup37601
 IF int_flag THEN
    LET int_flag = 0
    LET p_dados_tela.* = p_dados_telar.*
    LET p_formonly.* = p_formonlyr.*
    IF sup3760_verifica_desconto_acrescimo_nf() THEN
     LET p_dados_tela_f.ies_desc_acres = "S"
    ELSE LET p_dados_tela_f.ies_desc_acres = "N"
    END IF
    DISPLAY BY NAME p_dados_tela.*
    DISPLAY BY NAME p_dados_tela_f.*,
                    p_formonly.raz_social,
                    p_formonly.des_cnd_pgto,
                    p_formonly.tex_tip_frete
    ERROR " Consulta Cancelada. "
    RETURN
 END IF
 LET sql_stmt = "SELECT nf_sup.cod_empresa, ",
                "nf_sup.cod_empresa_estab, ",
                "nf_sup.num_aviso_rec, ",
                "nf_sup.cod_fornecedor, ",
                "nf_sup.num_nf, ",
                "nf_sup.ser_nf, ",
                "nf_sup.ssr_nf, ",
                "nf_sup.ies_especie_nf, ",
                "nf_sup.ies_nf_aguard_nfe, ",
                " "" "", ",
                "nf_sup.cod_operacao, ",
                "nf_sup.dat_emis_nf, ",
                "nf_sup.dat_entrada_nf, ",
                "nf_sup.cnd_pgto_nf, ",
                "nf_sup.cod_mod_embar, ",
                "nf_sup.cod_imp_renda, ",
                "nf_sup.nom_resp_aceite_er, ",
                "nf_sup.num_conhec, ",
                "nf_sup.ser_conhec, ",
                "nf_sup.ssr_conhec, ",
                "nf_sup.cod_transpor, ",
                "aviso_rec_compl.cod_fiscal_compl, ",
                "aviso_rec_compl.cod_empresa_orig ",
                "FROM nf_sup, aviso_rec, aviso_rec_compl ",
                "WHERE nf_sup.cod_empresa      = """,p_cod_empresa,""" ",
                "AND nf_sup.cod_empresa      = aviso_rec.cod_empresa ",
                "AND nf_sup.num_aviso_rec    = aviso_rec.num_aviso_rec ",
                "AND aviso_rec_compl.cod_empresa = aviso_rec.cod_empresa ",
                "AND aviso_rec_compl.num_aviso_rec = aviso_rec.num_aviso_rec ",
                "AND (nf_sup.ies_nf_aguard_nfe != ""S"" ",
                " OR nf_sup.ies_nf_aguard_nfe IS NULL) ",
                "AND ", where_clause CLIPPED

 IF m_consulta_ord_descres = "S" THEN
    LET sql_stmt = sql_stmt CLIPPED,
                   " ORDER BY nf_sup.num_aviso_rec desc "
 END IF

 WHENEVER ERROR CONTINUE
 PREPARE var_aviso_rec FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","VAR_AVISO_REC")
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_aviso_rec SCROLL CURSOR WITH HOLD FOR var_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_AVISO_REC")
 END IF

 WHENEVER ERROR CONTINUE
 OPEN cq_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("OPEN","CQ_AVISO_REC")
 END IF

 WHENEVER ERROR CONTINUE
 FETCH cq_aviso_rec INTO p_dados_tela.cod_empresa,
                         p_dados_tela.cod_empresa_estab,
                         p_dados_tela.num_aviso_rec,
                         p_dados_tela.cod_fornecedor,
                         p_dados_tela.num_nf,
                         p_dados_tela.ser_nf,
                         p_dados_tela.ssr_nf,
                         p_dados_tela.ies_especie_nf,
                         p_dados_tela.ies_nf_aguard_nfe,
                         p_dados_tela.cod_operac_estoq,
                         p_dados_tela.cod_operacao,
                         p_dados_tela.dat_emis_nf,
                         p_dados_tela.dat_entrada_nf,
                         p_dados_tela.cnd_pgto_nf,
                         p_dados_tela.cod_mod_embar,
                         p_cod_ret_imp,
                         p_nom_resp_aceite_er,
                         p_nf_sup.num_conhec,
                         p_nf_sup.ser_conhec,
                         p_nf_sup.ssr_conhec,
                         p_nf_sup.cod_transpor,
                         p_dados_tela.cod_fiscal_compl,
                         p_dados_tela.cod_emp_benef
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = NOTFOUND  THEN
    CLEAR FORM
    CALL log0030_mensagem(" Argumentos de pesquisa nao encontrados ","exclamation")
    LET p_ies_cons = FALSE
 ELSE
    #IF m_wms_instal = 'S' THEN
    #   IF p_dados_tela.num_aviso_rec IS NOT NULL AND p_dados_tela.num_aviso_rec <> 0 THEN
    #      LET m_indicador_aduaneiro = wms6612_retorna_indicador_aduaneiro_ar(p_cod_empresa, p_dados_tela.num_aviso_rec)
    #   END IF
    #END IF

    # Inicio Chamado 727.126
    IF NOT sup3760_verifica_permissao_setor_aplicacao() THEN
       CALL log0030_mensagem("Argumentos de pesquisa não encontrados.","exclamation")
       CLEAR FORM
       LET p_ies_cons = FALSE
       RETURN
    END IF
    # Fim Chamado 727.126

    LET m_dat_entrada_ant =  p_dados_tela.dat_entrada_nf

    ### Carrega na consulta o tipo e objetivo de entrada do CFOP em tela.
    INITIALIZE l_status, p_ies_tip_entrada, m_ies_obj_entrada TO NULL
    CALL sup0686_retorna_tip_obj_entrada(p_dados_tela.cod_operacao,
                                         p_dados_tela.cod_fiscal_compl)
                                         RETURNING l_status,
                                                   p_ies_tip_entrada,
                                                   m_ies_obj_entrada

    LET m_tipo_nf = p_dados_tela.ies_nf_aguard_nfe
    LET m_data_ent = p_dados_tela.dat_entrada_nf
    LET p_ies_cons = TRUE
    IF p_ies_cod_operac = "S" THEN
       INITIALIZE p_dados_tela.cod_operac_estoq TO NULL
       SELECT cod_operacao
         INTO p_dados_tela.cod_operac_estoq
         FROM aviso_rec_compl
        WHERE aviso_rec_compl.cod_empresa = p_cod_empresa
          AND aviso_rec_compl.num_aviso_rec = p_dados_tela.num_aviso_rec
    END IF
    IF p_nf_sup.num_conhec <> 0 THEN
       DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
       CALL sup3760_mostra_conhec_sup_frete_x()
    END IF
    CALL sup376_consulta_dados()
    IF p_ies_canc = TRUE THEN
       DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
    END IF
    CALL sup376_exibe_dados()
    CALL sup376_exibe_array()

    IF m_contr_pes_rec = 'S' THEN #eduardo - o.s.290538 19/11/03
       WHENEVER ERROR CONTINUE
       LET m_num_pesagem = 0
       SELECT COUNT(*)
         INTO m_num_pesagem
         FROM sup_ctr_balanca
        WHERE empresa           = p_cod_empresa
          AND aviso_recebto     = p_dados_tela.num_aviso_rec
          AND tip_pesagem       = "1"
       IF m_num_pesagem > 0 THEN
          DISPLAY " NOTA FISCAL COM PESAGENS " AT 19,50 ATTRIBUTE(REVERSE)
       END IF
       WHENEVER ERROR STOP
    END IF
   CALL sup3760_busca_peso_nf()
 END IF
 END FUNCTION

#------------------------------#
 FUNCTION sup376_exibe_array()
#------------------------------#
  DEFINE l_ind              SMALLINT,# Alteração WMS Columbia OS: 450083
         l_item_depositante CHAR(25),# Alteração WMS Columbia OS: 450083
         l_status           SMALLINT,# Alteração WMS Columbia OS: 450083
         l_depositante      CHAR(15) # Alteração WMS Columbia OS: 450083

 INITIALIZE p_array, p_array_compl TO NULL
  LET p_ind = 1
 DECLARE cq_array CURSOR FOR
  SELECT num_seq, cod_item, den_item, cod_unid_med_nf, cod_cla_fisc_nf,
         qtd_declarad_nf, pre_unit_nf, val_liquido_item, pct_ipi_declarad,
         num_oc, num_pedido
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa = p_cod_empresa
     AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
 ORDER BY aviso_rec.num_seq
 FOREACH cq_array INTO p_array[p_ind].seq,
                       p_array[p_ind].cod_item,
                       p_array[p_ind].den_item,
                       p_array[p_ind].cod_unid_med_nf,
                       p_array[p_ind].cod_cla_fisc_nf,
                       p_array[p_ind].qtd_declarad_nf,
                       p_array[p_ind].pre_unit_nf,
                       p_array[p_ind].val_liquido_item,
                       p_array[p_ind].pct_ipi,
                       p_array_compl[p_ind].num_oc,
                       p_array_compl[p_ind].num_pedido
    IF p_array_compl[p_ind].num_pedido IS NOT NULL AND
       p_array_compl[p_ind].num_pedido <> " "      AND
       p_array_compl[p_ind].num_pedido <> 0        THEN
       LET p_array_compl[p_ind].ar_com_pc = "S"
    END IF
    LET p_ind = p_ind + 1
    IF p_ind > 999 THEN
       EXIT FOREACH
    END IF
 END FOREACH
 FREE cq_array
 LET p_ind = p_ind - 1

 LET p_tot_itens = p_ind

 CALL log006_exibe_teclas("01", p_versao)
 CURRENT WINDOW IS w_sup37601
  DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)

 IF p_ind > 1 THEN
    LET p_prx_seq = p_array[p_ind - 1].seq + 1
 ELSE
    LET p_prx_seq = 1
 END IF

 #--------------------------#
 # Alteração WMS OS: 450083 #
 #--------------------------#
 IF m_wms_instal = 'S' AND m_utiliza_codf_deposit = 'S' THEN
    FOR l_ind = 1 TO 999
       INITIALIZE p_array_wms[l_ind].* TO NULL
    END FOR
    FOR l_ind = 1 TO p_ind
       IF p_array[l_ind].cod_item IS NOT NULL AND
          p_array[l_ind].cod_item <> " " THEN
          #RETIRAR IF e ELSE DO FIND4GL FUNCTION
          IF find4GLFunction('wms6612_retorna_indicador_aduaneiro_ar') THEN
             IF p_dados_tela.ies_nf_aguard_nfe = "A" OR
                p_dados_tela.ies_nf_aguard_nfe = "B" OR
                p_dados_tela.ies_nf_aguard_nfe = "7" OR
                (wms6612_retorna_indicador_aduaneiro_ar(p_cod_empresa, p_dados_tela.num_aviso_rec) <> 'N' AND
                 p_dados_tela.ies_nf_aguard_nfe = "1") THEN
                # Se a NF for do tipo 7-(Material em trânsito) exibir os códigos dos itens
                # do depositante se o mesmo for encontrado na wms_item_complemento.
                CALL wmst81_wms_item_complemento_get_dados_deposit(p_cod_empresa,
                                                                   p_array[l_ind].cod_item,
                                                                   1) RETURNING l_status,
                                                                                l_depositante,
                                                                                l_item_depositante
             ELSE
                INITIALIZE l_item_depositante TO NULL
             END IF
          ELSE
             IF p_dados_tela.ies_nf_aguard_nfe = "A" OR
                p_dados_tela.ies_nf_aguard_nfe = "B" OR
                p_dados_tela.ies_nf_aguard_nfe = "7" THEN
                # Se a NF for do tipo 7-(Material em trânsito) exibir os códigos dos itens
                # do depositante se o mesmo for encontrado na wms_item_complemento.
                CALL wmst81_wms_item_complemento_get_dados_deposit(p_cod_empresa,
                                                                   p_array[l_ind].cod_item,
                                                                   1) RETURNING l_status,
                                                                                l_depositante,
                                                                                l_item_depositante
             ELSE
                INITIALIZE l_item_depositante TO NULL
             END IF
          END IF

          #LET p_array_wms[l_ind].* = p_array[l_ind].*

          LET p_array_wms[l_ind].seq              = p_array[l_ind].seq
          LET p_array_wms[l_ind].cod_item         = p_array[l_ind].cod_item
          LET p_array_wms[l_ind].qtd_declarad_nf  = p_array[l_ind].qtd_declarad_nf
          LET p_array_wms[l_ind].cod_unid_med_nf  = p_array[l_ind].cod_unid_med_nf
          LET p_array_wms[l_ind].pre_unit_nf      = p_array[l_ind].pre_unit_nf
          LET p_array_wms[l_ind].val_liquido_item = p_array[l_ind].val_liquido_item
          LET p_array_wms[l_ind].den_item         = p_array[l_ind].den_item
          LET p_array_wms[l_ind].cod_cla_fisc_nf  = p_array[l_ind].cod_cla_fisc_nf
          LET p_array_wms[l_ind].pct_ipi          = p_array[l_ind].pct_ipi

          IF  l_item_depositante IS NOT NULL
          AND l_item_depositante <> " " THEN
             LET p_array_wms[l_ind].cod_item = l_item_depositante
          ELSE
             LET p_array_wms[l_ind].cod_item = p_array[l_ind].cod_item
          END IF
       END IF
    END FOR
    DISPLAY p_array_wms[1].* TO s_sup37601[1].*
    DISPLAY p_array_wms[2].* TO s_sup37601[2].*
    DISPLAY p_array_wms[3].* TO s_sup37601[3].*
    DISPLAY p_array_wms[4].* TO s_sup37601[4].*
 ELSE
    DISPLAY p_array[1].* TO s_sup37601[1].*
    DISPLAY p_array[2].* TO s_sup37601[2].*
    DISPLAY p_array[3].* TO s_sup37601[3].*
    DISPLAY p_array[4].* TO s_sup37601[4].*
 END IF
 #--------------------------#

 CALL sup376_busca_nf_sup(p_dados_tela.num_aviso_rec)

 IF p_ind = 0 THEN
    INITIALIZE p_dados_tela_f.* TO NULL
 ELSE
    LET p_dados_tela_f.val_ipi_nf        = p_nf_sup.val_ipi_nf
    LET p_dados_tela_f.val_tot_icms_nf_d = p_nf_sup.val_tot_icms_nf_d
    LET p_dados_tela_f.val_tot_nf_d      = p_nf_sup.val_tot_nf_d
    IF sup3760_verifica_desconto_acrescimo_nf() THEN
     LET p_dados_tela_f.ies_desc_acres = "S"
    ELSE LET p_dados_tela_f.ies_desc_acres = "N"
    END IF
 END IF

 DISPLAY BY NAME p_dados_tela_f.*
 END FUNCTION

#-----------------------------------#
 FUNCTION sup376_paginacao(p_funcao)
#-----------------------------------#
 DEFINE p_funcao            CHAR(20)
 IF p_cons_arg = FALSE THEN
    IF p_ies_cons  THEN
       LET p_dados_telar.* = p_dados_tela.*
       LET p_formonlyr.* = p_formonly.*
       WHILE TRUE
         CASE
           WHEN p_funcao = "SEGUINTE" FETCH NEXT cq_aviso_rec INTO p_dados_tela.cod_empresa,
                                                                   p_dados_tela.cod_empresa_estab,
                                                                   p_dados_tela.num_aviso_rec,
                                                                   p_dados_tela.cod_fornecedor,
                                                                   p_dados_tela.num_nf,
                                                                   p_dados_tela.ser_nf,
                                                                   p_dados_tela.ssr_nf,
                                                                   p_dados_tela.ies_especie_nf,
                                                                   p_dados_tela.ies_nf_aguard_nfe,
                                                                   p_dados_tela.cod_operac_estoq,
                                                                   p_dados_tela.cod_operacao,
                                                                   p_dados_tela.dat_emis_nf,
                                                                   p_dados_tela.dat_entrada_nf,
                                                                   p_dados_tela.cnd_pgto_nf,
                                                                   p_dados_tela.cod_mod_embar,
                                                                   p_cod_ret_imp,
                                                                   p_nom_resp_aceite_er,
                                                                   p_nf_sup.num_conhec,
                                                                   p_nf_sup.ser_conhec,
                                                                   p_nf_sup.ssr_conhec,
                                                                   p_nf_sup.cod_transpor
           DISPLAY "                                                          "  AT 19,20
           WHEN p_funcao = "ANTERIOR" FETCH PREVIOUS cq_aviso_rec INTO p_dados_tela.cod_empresa,
                                                                       p_dados_tela.cod_empresa_estab,
                                                                       p_dados_tela.num_aviso_rec,
                                                                       p_dados_tela.cod_fornecedor,
                                                                       p_dados_tela.num_nf,
                                                                       p_dados_tela.ser_nf,
                                                                       p_dados_tela.ssr_nf,
                                                                       p_dados_tela.ies_especie_nf,
                                                                       p_dados_tela.ies_nf_aguard_nfe,
                                                                       p_dados_tela.cod_operac_estoq,
                                                                       p_dados_tela.cod_operacao,
                                                                       p_dados_tela.dat_emis_nf,
                                                                       p_dados_tela.dat_entrada_nf,
                                                                       p_dados_tela.cnd_pgto_nf,
                                                                       p_dados_tela.cod_mod_embar,
                                                                       p_cod_ret_imp,
                                                                       p_nom_resp_aceite_er,
                                                                       p_nf_sup.num_conhec,
                                                                       p_nf_sup.ser_conhec,
                                                                       p_nf_sup.ssr_conhec,
                                                                       p_nf_sup.cod_transpor
         DISPLAY "                                                          "  AT 19,20
         END CASE
         IF sqlca.sqlcode = NOTFOUND  THEN
            ERROR " Nao existem mais itens nesta direcao. "
            LET p_dados_tela.* = p_dados_telar.*
            LET p_formonly.* = p_formonly.*
            EXIT WHILE
         END IF

         # Inicio Chamado 727.126
         IF NOT sup3760_verifica_permissao_setor_aplicacao() THEN
            CONTINUE WHILE
         END IF
         # Fim Chamado 727.126

         IF sup3762_busca_frete_sup()= FALSE THEN
            LET p_frete_sup.num_conhec = 0
         END IF
         IF sup376_le_novamente()  THEN
            IF p_dados_tela.num_aviso_rec = p_dados_telar.num_aviso_rec  THEN
               CONTINUE WHILE
            ELSE
               IF p_ies_cod_operac = "S" THEN
                  INITIALIZE p_dados_tela.cod_operac_estoq TO NULL
                  SELECT cod_operacao
                    INTO p_dados_tela.cod_operac_estoq
                    FROM aviso_rec_compl
                   WHERE aviso_rec_compl.cod_empresa = p_cod_empresa
                     AND aviso_rec_compl.num_aviso_rec = p_dados_tela.num_aviso_rec
               END IF
               LET m_dat_entrada_ant = p_dados_tela.dat_entrada_nf #798726#
               CALL sup376_exibe_dados()
               CALL sup376_exibe_array()
               CALL sup3760_busca_peso_nf()
               EXIT WHILE
            END IF
         END IF
       END WHILE
    ELSE
       ERROR " Nao existe nenhuma consulta ativa"
    END IF
 ELSE
    ERROR " Nao existem mais itens nesta direcao. "
 END IF
 END FUNCTION

#-----------------------------#
 FUNCTION sup376_exibe_dados()
#-----------------------------#
 DEFINE p_cod_fiscal_compl    CHAR(02),
        l_regime_aduaneiro    CHAR(003)
 CURRENT WINDOW IS w_sup37601
 IF p_nf_sup.num_conhec <> 0 THEN
    DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
    CALL sup3760_mostra_conhec_sup_frete_x()
 END IF
 IF m_wms_instal = "S" THEN
    IF m_criou_temp_peso IS NULL OR m_criou_temp_peso = FALSE THEN
       IF find4GLFunction('wms6612_create_table') THEN
          CALL wms6612_create_table()
          LET m_criou_temp_peso = TRUE
       END IF
    END IF
 END IF
 CALL sup376_consulta_dados()
 IF p_ies_canc = TRUE THEN
    DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
 END IF
 IF (p_cod_ret_imp IS NULL OR p_cod_ret_imp = " ") THEN
    LET p_ies_imp_renda = "N"
 ELSE
    LET p_ies_imp_renda = "S"
 END IF
 CALL sup376_verifica_impostos_informados()
      RETURNING p_dados_tela.ies_impostos

 DISPLAY BY NAME p_dados_tela.*

 IF p_dados_tela.cod_fornecedor IS NOT NULL THEN
    IF m_ies_cnpj_insc = "S"  THEN
       CALL sup3760_busca_cnpj_insc(p_cod_empresa, #801178#
                                    p_dados_tela.num_aviso_rec, #801178#
                                    p_dados_tela.cod_fornecedor)
       IF (m_num_cgc_cpf IS NOT NULL AND m_num_cgc_cpf <> " ") OR
          (m_ins_estadual IS NOT NULL AND m_ins_estadual <> " ") THEN
          DISPLAY "CNPJ/CPF: ",m_num_cgc_cpf  AT 9,11 ATTRIBUTE(REVERSE)
           DISPLAY "INS.EST.: ",m_ins_estadual AT 9,45 ATTRIBUTE(REVERSE)
       ELSE
          DISPLAY "CNPJ/CPF:                     "  AT 9,11 ATTRIBUTE(REVERSE)
           DISPLAY "INS.EST.:                  " AT 9,45 ATTRIBUTE(REVERSE)
       END IF
    END IF
 ELSE
     DISPLAY "                                                             "  AT 9,11
 END IF
  DISPLAY "   " AT 4,54
  IF m_wms_instal = 'S' THEN
     IF p_dados_tela.num_aviso_rec IS NOT NULL AND
        p_dados_tela.num_aviso_rec <> 0 THEN
        IF p_dados_tela.ies_nf_aguard_nfe = "A" THEN
           LET m_tipo_documento = "P"
        ELSE
           IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
              LET m_tipo_documento = "D"
           ELSE
              LET m_tipo_documento = "N"
           END IF
        END IF
        IF find4GLFunction('wms6612_consulta_sup_par_ar') THEN
           IF p_dados_tela.num_aviso_rec IS NOT NULL AND
              p_dados_tela.num_aviso_rec <> 0 THEN
              IF m_indicador_aduaneiro IS NULL OR m_indicador_aduaneiro = ' ' THEN
                 LET m_indicador_aduaneiro = wms6612_retorna_indicador_aduaneiro_ar(p_cod_empresa, p_dados_tela.num_aviso_rec)
              END IF
           END IF
           CALL wms6612_consulta_sup_par_ar(p_dados_tela.num_aviso_rec)
                RETURNING l_regime_aduaneiro
                DISPLAY l_regime_aduaneiro AT 4,54 ATTRIBUTE(REVERSE)
        END IF
     END IF
  END IF
 INITIALIZE p_dados_tela.cod_fiscal_compl TO NULL
 SELECT cod_fiscal_compl
   INTO p_dados_tela.cod_fiscal_compl
   FROM aviso_rec_compl
  WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = p_dados_tela.num_aviso_rec

 LET p_cod_fiscal_compl = p_dados_tela.cod_fiscal_compl USING "##"
 DISPLAY p_cod_fiscal_compl TO cod_fiscal_compl
 DISPLAY BY NAME p_dados_tela_f.*

 CALL sup376_verifica_fornecedor() RETURNING p_status
 CALL sup376_verifica_cnd_pgto() RETURNING p_status
 CALL sup376_verifica_mod_embar() RETURNING p_status

 #--inicio--OS 728028 #
 IF find4GLFunction('supy13_busca_conhec') = TRUE THEN
    CALL supy13_busca_conhec(p_cod_empresa,
                             p_nf_sup.num_aviso_rec)
       RETURNING p_nf_sup.cod_transpor,
                 p_nf_sup.num_conhec,
                 p_nf_sup.ser_conhec,
                 p_nf_sup.ssr_conhec

    IF p_nf_sup.num_conhec <> 0 THEN
       DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,50 ATTRIBUTE(REVERSE)
    END IF
 END IF
 #---fim----OS 728028 #

 END FUNCTION

#------------------------------------------------------------#
 FUNCTION sup3760_cursor_excl_sup_retn_item_terc(l_filtra_seq)
#------------------------------------------------------------#

  DEFINE l_sql_stmt   CHAR(2000),
         l_filtra_seq SMALLINT

  LET l_sql_stmt = " SELECT sup_retn_item_terc.nf_remessa, ",
                          " sup_retn_item_terc.seq_nf_remessa, ",
                          " sup_retn_item_terc.seq_tabulacao, ",
                          " sup_retn_item_terc.qtd_devolvida ",
                     " FROM sup_retn_item_terc ",
                    " WHERE sup_retn_item_terc.empresa           = ? ",
                      " AND sup_retn_item_terc.nota_fiscal       = ? ",
                      " AND sup_retn_item_terc.serie_nota_fiscal = ? ",
                      " AND sup_retn_item_terc.subserie_nf       = ? ",
                      " AND sup_retn_item_terc.espc_nota_fiscal  = ? ",
                      " AND sup_retn_item_terc.fornecedor        = ? "

  IF l_filtra_seq THEN
     LET l_sql_stmt = l_sql_stmt CLIPPED,
                      " AND sup_retn_item_terc.seq_aviso_recebto = ? "
  END IF

  WHENEVER ERROR CONTINUE
  PREPARE var_query3 FROM l_sql_stmt
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("PREPARE","SUP_RETN_ITEM_TERC")
     RETURN FALSE
  END IF

  WHENEVER ERROR CONTINUE
  DECLARE cq_exclui_grd CURSOR FOR var_query3
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","SUP_RETN_ITEM_TERC")
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#-------------------------------------#
 FUNCTION sup376_exclusao_aviso_rec()
#-------------------------------------#
 DEFINE p_achou_seq           SMALLINT,
        p_nr_nf               CHAR(7),
        l_cont                SMALLINT,
        l_num_nf              LIKE reten_irrf_pg.num_nf,
        l_num_ar_imp          LIKE aviso_rec_proc_imp.num_aviso_rec,
        l_num_ar_proc         LIKE processo_imp.num_aviso_rec,
        l_ies_situa_import    LIKE nf_sup.ies_situa_import,
        lr_ar_x_nf_pend       RECORD LIKE ar_x_nf_pend.*,
        l_prog_contagem       LIKE par_sup_pad.par_txt,
     ## 407088
        l_cod_fornecedor      LIKE nf_sup.cod_fornecedor,
        l_nf_remessa          LIKE sup_retn_item_terc.nf_remessa,
        l_seq_nf_remessa      LIKE sup_retn_item_terc.seq_nf_remessa,
        l_seq_tabulacao       LIKE sup_retn_item_terc.seq_tabulacao,
        l_qtd_devolvida       LIKE sup_retn_item_terc.qtd_devolvida,
        l_count               SMALLINT,
        l_dat_entrada_nf      DATE,
        sql_stmt              CHAR(1500)

  DEFINE lr_transf_pat        RECORD
                              empresa_destino     LIKE fat_transf_pat.empresa_destino,
                              inventario_destino  LIKE fat_transf_pat.inventario_destino,
                              aviso_recebto       LIKE fat_transf_pat.aviso_recebto,
                              seq_aviso_recebto   LIKE fat_transf_pat.seq_aviso_recebto,
                              dat_entrada         LIKE fat_transf_pat.dat_entrada,
                              trans_nota_fiscal   LIKE fat_nf_transf_pat.trans_nota_fiscal,
                              num_parcela         LIKE patrparc.num_parcela,
                              inventario_origem   LIKE fat_transf_pat.inventario_origem,
                              num_parcela_orig    LIKE fat_transf_pat.parc_inv_origem,
                              seq_item_nf         LIKE fat_transf_pat.seq_item_nf
                              END RECORD

 IF sup3762_verifica_item_dev_terc(m_contr_terc_no_dep) THEN
    #Chamada da mensagem retirada pois a funcao do sup3762 ja apresenta mensagem (OS522401)
    #CALL log0030_mensagem("Nota tipo A/B relacionada com nota tipo A/B(SUP2300), excluir relacionamento","exclamation")
    RETURN
 END IF

 IF sup376_verifica_classificacao_sucata() = TRUE THEN
    CALL log0030_mensagem(" Existe classificacao de sucata/materia-prima para este AR. ","exclamation")
    RETURN
 END IF

 LET m_nfr_import = FALSE
 IF sup3760_nfr_consignatario("EXCLUSAO") THEN
   LET m_nfr_import = TRUE
 END IF

 IF p_dados_tela.cod_operacao[1] = "7" OR m_nfr_import THEN
    IF sup3760_possui_rateio_compl() THEN
       ERROR " Nota fiscal possui rateio de despesa complementar de importacao (SUP5010) "
       RETURN
    END IF

    LET m_num_processo = sup3760_busca_numero_processo_importacao()
    IF m_num_processo IS NULL THEN
       LET m_num_processo = m_inicio_provisao
    END IF

    IF (m_ies_utiliz_provisao = "N" OR
       (m_ies_utiliz_provisao = "S" AND
        m_num_processo < m_inicio_provisao) OR
       (m_ies_utiliz_provisao = "S" AND m_utiliz_nfm_import = "S" AND
        m_num_processo >= m_inicio_provisao)) THEN
       LET l_num_ar_proc = sup3760_leitura_processo_imp(m_num_processo,"AR")
       IF l_num_ar_proc IS NOT NULL THEN
          INITIALIZE l_ies_situa_import TO NULL
          SELECT ies_situa_import
            INTO l_ies_situa_import
            FROM nf_sup
           WHERE cod_empresa   = p_cod_empresa
             AND num_aviso_rec = l_num_ar_proc
          WHENEVER ERROR STOP
          IF l_ies_situa_import IS NOT NULL AND
             l_ies_situa_import = "E" THEN

             IF NOT sup3760_verifica_nfp_incl_apos_encerr(p_cod_empresa,
                                                          p_dados_tela.num_aviso_rec) THEN
                ERROR " Processo de importacao ja encerrado "
                RETURN
             END IF

          END IF
       END IF
    END IF
 END IF

 IF p_dados_tela.ies_especie_nf = "NFE" THEN ##OS 337055
    INITIALIZE l_cont TO NULL
    WHENEVER ERROR CONTINUE
    SELECT COUNT(*)
      INTO l_cont
      FROM sup_par_ar
     WHERE empresa       = p_cod_empresa
       AND parametro     = "nfe_icms_st"
       AND parametro_val = p_dados_tela.num_aviso_rec
    WHENEVER ERROR STOP

    IF l_cont > 0 THEN
       CALL log0030_mensagem(" NFE ICMS ST gerada automáticamente. Função não permitida. ","exclamation")
       RETURN
    ELSE
       INITIALIZE l_cont TO NULL
       WHENEVER ERROR CONTINUE
       SELECT COUNT(*)
         INTO l_cont
         FROM sup_par_frete
        WHERE empresa       = p_cod_empresa
          AND parametro     = "nfe_icms_st"
          AND parametro_val = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF l_cont > 0 THEN
          CALL log0030_mensagem(" NFE ICMS ST gerada automaticamente. Função não permitida. ","exclamation")
          RETURN
       END IF
    END IF
 END IF

 IF p_dados_tela.ies_especie_nf = "NFM" THEN
    LET l_cont = 0
    WHENEVER ERROR CONTINUE
    SELECT COUNT(*)
      INTO l_cont
      FROM ar_x_nf_pend
     WHERE cod_empresa    = p_cod_empresa
       AND num_nf         = p_dados_tela.num_nf
       AND ser_nf         = p_dados_tela.ser_nf
       AND ssr_nf         = p_dados_tela.ssr_nf
       AND cod_fornecedor = p_dados_tela.cod_fornecedor
    WHENEVER ERROR STOP
    IF l_cont > 0 THEN
       ERROR " Existe NFP relacionada com esta NFM "
       RETURN
    END IF
 END IF

 IF NOT cap5440_verifica_ad_nf_base_calculo_cumulativo(p_nf_sup.cod_empresa,
                                                       p_nf_sup.num_nf,
                                                       p_nf_sup.dat_entrada_nf,
                                                       p_nf_sup.cod_fornecedor,
                                                       "SUP") THEN
    RETURN
 END IF

 CALL log130_procura_caminho("sup37604") RETURNING comando3
 OPEN WINDOW w_sup37604 AT 08,60 WITH FORM comando3
      ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, FORM LINE 1)
 LET p_achou_seq = FALSE
 INPUT BY NAME p_num_seq
    AFTER FIELD p_num_seq
       FOR p_ind = 1 TO 999
           IF p_array[p_ind].seq IS NOT NULL THEN
              IF p_num_seq = p_array[p_ind].seq THEN
                 LET p_achou_seq = TRUE
                 EXIT FOR
              END IF
           END IF
       END FOR
       IF p_achou_seq = FALSE THEN
          ERROR "Item nao existente"
          NEXT FIELD p_num_seq
       END IF
 END INPUT
 CLOSE WINDOW w_sup37604
 CURRENT WINDOW IS w_sup37601
 IF int_flag <> 0 THEN
    RETURN
 END IF

 IF log004_confirm(21,44) THEN
    CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_num_seq)
    LET p_houve_erro = FALSE
    IF sup3762_verifica_impostos_ja_pagos() THEN
       LET p_houve_erro = TRUE
       RETURN
    END IF

    IF NOT sup3762_verifica_devol_nf_consig(p_nf_sup.ies_especie_nf,
                                            p_nf_sup.ies_nf_aguard_nfe,
                                            p_nf_sup.cod_empresa,
                                            p_nf_sup.num_nf,
                                            p_nf_sup.cod_fornecedor,
                                            p_aviso_rec.cod_item) THEN #-- OS 495219
       RETURN
    END IF

    CALL sup376_verifica_delecao()
    IF p_conta <> 1 THEN
      #518223
      # Somente irá permitir a exclusão por item, se a NF não tiver relacionamento
      # com NF saída
       IF find4GLFunction('supy61_nfr_com_relac_nf_faturamento') THEN
          IF supy61_nfr_com_relac_nf_faturamento(p_cod_empresa, p_dados_tela.num_aviso_rec) THEN
            CALL log0030_mensagem("Existe(m) relacionamento(s) para o aviso de recebimento. Exclua o relacionamento no SUP5242.", "exclamation");
            RETURN
          END IF
       END IF
       CALL sup376_deleta_seq()
      #518223
    ELSE
       DECLARE cq_num_seqs2 CURSOR FOR
       SELECT num_seq, num_pedido, num_oc
        FROM aviso_rec
       WHERE cod_empresa   = p_cod_empresa
         AND num_aviso_rec = p_dados_tela.num_aviso_rec
         AND num_pedido    > 0

       LET m_count_seq = 1
       INITIALIZE ma_inf_ar TO NULL
       FOREACH cq_num_seqs2 INTO ma_inf_ar[m_count_seq].num_seq,
                                 ma_inf_ar[m_count_seq].num_pedido,
                                 ma_inf_ar[m_count_seq].num_oc
          LET m_count_seq = m_count_seq + 1
          IF m_count_seq > 999 THEN
             CALL log0030_mensagem("Estouro de array","stop")
             EXIT FOREACH
          END IF
       END FOREACH
       IF m_count_seq > 999 THEN
          LET p_houve_erro = TRUE
          RETURN
       END IF
       LET m_count_seq = m_count_seq - 1

       IF sup376_verifica_cond_delecao("EXCLUIR") = TRUE THEN
          LET l_count = 0
          WHENEVER ERROR CONTINUE
          SELECT COUNT(*)
            INTO l_count
            FROM sup_frete_x_nf_entrada
           WHERE sup_frete_x_nf_entrada.empresa       = p_cod_empresa
             AND sup_frete_x_nf_entrada.aviso_recebto = p_nf_sup.num_aviso_rec
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("SELECT","SUP_FRETE_X_NF_ENTRADA")
          END IF

          IF p_nf_sup.num_conhec IS NOT NULL AND
             p_nf_sup.num_conhec > 0
             OR l_count > 0 THEN
             CALL log0030_mensagem("Existe frete relacionado com a Nota. Excluir relacionamento.","exclamation")
          ELSE
             IF p_dados_tela.ies_nf_aguard_nfe <> "7" THEN
                #IF (p_aviso_rec.ies_item_estoq = "N" AND     *** Rafael - OS314473
                 #  (p_par_sup_compl.ies_conta_ok_n_est = "2" OR
                  # (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
                   # p_dados_tela.ies_especie_nf = "NFS"))) OR
                    #p_aviso_rec.ies_item_estoq = "S" THEN
                    IF sup376_possui_avf_insp_ar() = FALSE THEN
                       IF p_aviso_rec.ies_liberacao_insp = "S" AND
                          p_aviso_rec.ies_situa_ar = "E" THEN
                          ### OS237529 ###
                          INITIALIZE l_prog_contagem TO NULL
                          SELECT par_txt
                            INTO l_prog_contagem
                            FROM par_sup_pad
                           WHERE par_sup_pad.cod_empresa   = p_cod_empresa
                             AND par_sup_pad.cod_parametro = "prog_contagem"
                          IF sqlca.sqlcode <> 0 OR
                             l_prog_contagem IS NULL THEN
                             LET l_prog_contagem = " "
                          END IF

                          IF l_prog_contagem = "sup0799" THEN
                             CALL log0030_mensagem(" Exclua primeiramente resultado de contagem - SUP0799 ","exclamation")
                             LET p_houve_erro = TRUE
                             RETURN
                          END IF

                          ERROR " Aguarde ... Excluindo Inspecao ... "
                          CALL log120_procura_caminho("sup0570") RETURNING comando3
                          LET comando3 = comando3 CLIPPED, " ",  p_cod_empresa, " ",
                                                           p_aviso_rec.num_aviso_rec,  " ",
                                                           p_num_seq, " ",
                                                           "EXCLUSAO"," ",
                                                           "SUP3760"
                          RUN comando3 RETURNING p_cancel
                          LET p_ies_situa_ar = NULL
                          CALL sup376_busca_aviso_rec(p_cod_empresa, p_aviso_rec.num_aviso_rec, p_num_seq)
                          LET p_ies_situa_ar = p_aviso_rec.ies_situa_ar

                          IF sup1481_nfc_compl_imposto(p_nf_sup.ies_especie_nf,
                                                       p_cod_empresa,
                                                       p_aviso_rec.num_aviso_rec) = FALSE THEN
                             IF p_aviso_rec.ies_item_estoq = "S" THEN
                                CALL sup0063_verifica_controles(1, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles
                             ELSE
                                CALL sup0063_verifica_controles(11, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles
                             END IF
                          END IF

                          IF p_ies_custo_grade = "S" AND
                             m_controles <> " "     THEN
                             ## Quando a empresa utiliza custo por grade, a contagem
                             ## eh excluida ja quando faz a exclusao da inspecao.
                             IF p_ies_situa_ar <> "C" THEN
                                CALL log0030_mensagem(" Problemas na exclusao da inspecao. ","exclamation")
                                LET p_houve_erro = TRUE
                                RETURN
                             END IF
                          ELSE
                             IF p_ies_situa_ar <> "I" THEN
                                CALL log0030_mensagem(" Problemas na exclusao da inspecao. ","exclamation")
                                LET p_houve_erro = TRUE
                                RETURN
                             END IF
                             IF p_dados_tela.ies_especie_nf = 'NFS' THEN
                                IF NOT avfr6_exclusao_inspecao(p_cod_empresa,
                                                               p_dados_tela.num_aviso_rec,
                                                               p_num_seq) THEN
                                   LET p_houve_erro = TRUE
                                   CALL log0030_mensagem(" Problemas na exclusão da inspecao (AVF). ","exclamation")
                                   RETURN
                                END IF
                             END IF
                          END IF
                          ERROR " Exclusao de inspecao realizada com sucesso. "
                       END IF
                    ELSE
                       IF p_aviso_rec.ies_item_estoq = "S" THEN
                          IF avf1003_exclusao_qualidade(p_aviso_rec.num_aviso_rec,
                                                        p_num_seq) = FALSE THEN
                             LET p_houve_erro = TRUE
                             CALL log0030_mensagem(" Problemas na exclusao da inspecao (AVF). ","exclamation")
                             RETURN
                          END IF
                       END IF
                    END IF

                    #CALL sup376_verifica_cont_insp_automat(p_aviso_rec.cod_item, m_cont_insp_especial)
                    #     RETURNING p_ies_item_cont_aut, p_ies_item_insp_aut
                    #IF p_ies_item_insp_aut = "S" OR
                    #  (p_ies_item_insp_aut = "N" AND
                    #   p_aviso_rec.ies_situa_ar <> "E") THEN

                    IF p_aviso_rec.ies_liberacao_cont = "S" THEN
                       ERROR " Aguarde ... Excluindo contagem ... "

                       CALL sup3760_atualiza_nota(p_cod_empresa, p_dados_tela.num_nf, p_dados_tela.ser_nf,
                                                  p_dados_tela.ssr_nf, p_dados_tela.cod_fornecedor,
                                                  p_dados_tela.num_aviso_rec, p_dados_tela.cnd_pgto_nf)

                       CALL log120_procura_caminho("sup0530") RETURNING comando3
                       LET comando3 = comando3 CLIPPED, " ", p_cod_empresa,
                                                        " ", p_dados_tela.num_aviso_rec,
                                                        " ", p_num_seq,
                                                        " ", 3760,
                                                        " ", "S",
                                                        " ", "EXCLUSAO",
                                                        " ", 0,
                                                        " ", "S",
                                                        " ", "N"
                       RUN comando3 RETURNING p_cancel
                       LET p_ies_situa_ar = NULL
                       CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_num_seq)
                       LET p_ies_situa_ar = p_aviso_rec.ies_situa_ar
                       IF p_ies_situa_ar <> "C" THEN
                          CALL log0030_mensagem(" Problemas na exclusao da contagem/inspecao. ","exclamation")
                          RETURN
                       END IF
                       ERROR " Exclusao de contagem realizada com sucesso. "
                    END IF
                #END IF
             END IF

             IF sup376_cursor_for_update() THEN

                #IF sup376_possui_avf_insp_ar() THEN
                #
                #   IF p_aviso_rec.ies_item_estoq = "S" THEN
                #      IF avf1003_exclusao_qualidade(p_aviso_rec.num_aviso_rec,
                #                                    p_aviso_rec.num_seq) = FALSE THEN
                #         LET p_houve_erro = TRUE
                #         CALL log0030_mensagem(" Problemas na exclusao da inspecao (AVF). ","exclamation")
                #         RETURN
                #      END IF
                #   END IF
                #
                #   CALL sup376_busca_aviso_rec(p_cod_empresa, p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq)
                #   IF p_aviso_rec.ies_liberacao_cont = "S" THEN
                #      ERROR " Aguarde ... Excluindo contagem ... "
                #      CALL log120_procura_caminho("sup0530") RETURNING comando3
                #      LET comando3 = comando3 CLIPPED, " ",  p_cod_empresa, " ",
                #                                       p_aviso_rec.num_aviso_rec," ",
                #                                       p_aviso_rec.num_seq, " ",
                #                                       3760," ",
                #                                       "S"," ","EXCLUSAO"
                #      RUN comando3 RETURNING p_cancel
                #      LET p_ies_situa_ar = NULL
                #      CALL sup376_busca_aviso_rec(p_cod_empresa, p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq)
                #      LET p_ies_situa_ar = p_aviso_rec.ies_situa_ar
                #      IF p_ies_situa_ar <> "C" THEN
                #         CALL log0030_mensagem(" Problemas na exclusao da contagem. ","exclamation")
                #         LET p_houve_erro = TRUE
                #         RETURN
                #      END IF
                #   END IF
                #
                #END IF

                IF m_cred_st_fat = "S"
                OR m_cred_st_fat = "E" THEN
                   IF NOT sup1466_valida_saldo_com_revd_st(p_cod_empresa,p_dados_tela.num_aviso_rec,0,"EXCLUSAO") THEN
                      LET p_houve_erro = TRUE
                      WHENEVER ERROR CONTINUE
                      CALL log085_transacao("ROLLBACK")
                      WHENEVER ERROR STOP
                      RETURN
                   END IF
                END IF

                DELETE FROM nf_sup_erro
                 WHERE empresa       = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                WHENEVER ERROR CONTINUE
                LET l_cont = 0
                SELECT count(*) INTO l_cont
                  FROM deb_fornec
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec
                   AND num_seq       = p_num_seq
                WHENEVER ERROR STOP
                IF l_cont = 0 THEN
                ELSE CALL log0030_mensagem("Existe deb_fornec - excluir registro no sup5960","exclamation")
                     SLEEP 2
                     LET p_houve_erro = TRUE
                     WHENEVER ERROR CONTINUE
                     CALL log085_transacao("ROLLBACK")
                     WHENEVER ERROR STOP
                     RETURN
                END IF
                WHENEVER ERROR CONTINUE
                LET l_cont = 0
                SELECT count(*) INTO l_cont
                  FROM dev_fornec
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec
                   AND num_seq       = p_num_seq
                WHENEVER ERROR STOP
                IF l_cont = 0 THEN
                ELSE CALL log0030_mensagem("Existe devolução a fornecedores - excluir registro no sup0460","exclamation")
                     SLEEP 2
                     LET p_houve_erro = TRUE
                     WHENEVER ERROR CONTINUE
                     CALL log085_transacao("ROLLBACK")
                     WHENEVER ERROR STOP
                     RETURN
                END IF

                LET p_nr_nf = p_dados_tela.num_nf

                CALL sup376_deleta_inss_auton(p_nr_nf,p_num_seq)

                IF ((p_dados_tela.cod_operacao[1] = "7" AND
                   (p_dados_tela.ies_especie_nf = "NFE" OR
                    p_dados_tela.ies_especie_nf = "NFP" )) OR m_nfr_import) AND
                  ((m_ies_utiliz_provisao = "S" AND
                    m_utiliz_nfm_import = "N" AND
                    m_num_processo >= m_inicio_provisao) OR
                    p_nf_sup.ies_situa_import = "R") THEN
                   LET m_num_processo = sup3760_busca_numero_processo_importacao()
                   IF m_num_processo IS NULL THEN
                      LET m_num_processo = -1
                   END IF
                   IF m_num_processo <> -1 THEN
                      IF m_num_processo >= g_proc_ini_os163407 THEN
                         IF NOT imp0101_desfaz_rateio(m_num_processo,p_dados_tela.num_aviso_rec,-1) THEN
                            ERROR "Problema ao desfazer o rateio das despesas de importacao"
                            SLEEP 2
                            LET p_houve_erro = TRUE
                            WHENEVER ERROR CONTINUE
                            CALL log085_transacao("ROLLBACK")
                            WHENEVER ERROR STOP
                            RETURN
                         END IF
                      ELSE
                         IF NOT imp0101_desfaz_rateio_ant(m_num_processo,p_dados_tela.num_aviso_rec,-1) THEN
                            ERROR "Problema ao desfazer o rateio das despesas de importacao"
                            SLEEP 2
                            LET p_houve_erro = TRUE
                            WHENEVER ERROR CONTINUE
                            CALL log085_transacao("ROLLBACK")
                            WHENEVER ERROR STOP
                            RETURN
                         END IF
                      END IF
                   END IF
                END IF

                IF NOT fcl1150_integra_sequencia_ar_fcx(p_aviso_rec.cod_empresa,
                                                        p_aviso_rec.num_aviso_rec,
                                                        p_aviso_rec.num_seq,"EX") THEN
                   LET p_houve_erro = TRUE
                   WHENEVER ERROR CONTINUE
                   CALL log085_transacao("ROLLBACK")
                   WHENEVER ERROR STOP
                   RETURN
                END IF

                IF m_ies_relac_nf_benef = "S" THEN
                   IF NOT sup1277_exclusao_item(p_cod_empresa, p_aviso_rec.num_aviso_rec,  p_aviso_rec.num_seq, p_aviso_rec.cod_fiscal_item) THEN
                      LET p_houve_erro = TRUE
                      WHENEVER ERROR CONTINUE
                      CALL log085_transacao("ROLLBACK")
                      WHENEVER ERROR STOP
                      RETURN
                   END IF
                END IF

                DELETE FROM nfe_sup_compl
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                DELETE FROM dest_aviso_rec
                 WHERE cod_empresa = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                IF p_ies_contab_aen = "4" THEN
                   DELETE FROM dest_aviso_rec4
                    WHERE cod_empresa   = p_cod_empresa
                      AND num_aviso_rec = p_dados_tela.num_aviso_rec
                END IF

                DELETE FROM ar_ped
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                WHENEVER ERROR CONTINUE
                DELETE FROM ar_nf_item
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec
                WHENEVER ERROR STOP

                DELETE FROM ar_diverg
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                IF log0150_verifica_se_tabela_existe("sup_cart_corr_aut") THEN # 523038
                   WHENEVER ERROR CONTINUE
                   DELETE FROM sup_cart_corr_aut
                    WHERE empresa       = p_cod_empresa
                      AND aviso_recebto = p_dados_tela.num_aviso_rec
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("DELETE","SUP_CART_CORR_AUT")
                   END IF
                END IF

                DELETE FROM ar_diverg_provid
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                DELETE FROM dev_item
                 WHERE cod_empresa = p_cod_empresa
                   AND num_nff     = p_dados_tela.num_aviso_rec

                WHENEVER ERROR CONTINUE
                DELETE FROM sup_nf_devol_cli
                 WHERE empresa       = p_cod_empresa
                   AND aviso_recebto = p_dados_tela.num_aviso_rec
                WHENEVER ERROR STOP

                IF find4GLFunction('supy121_excluir_mov_comissoes_dev_clie') THEN
                   IF NOT supy121_excluir_mov_comissoes_dev_clie(p_cod_empresa,
                                                              p_dados_tela.num_aviso_rec,
                                                              "EXCLUSAO") THEN
                      LET p_houve_erro = TRUE
                   END IF
                END IF

                WHENEVER ERROR CONTINUE
                DELETE FROM sup_trib_benef_nf_devol_cli
                 WHERE empresa       = p_cod_empresa
                   AND aviso_recebto = p_dados_tela.num_aviso_rec
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("DELETE","SUP_TRIB_BENEF_NF_DEVOL_CLI")
                   LET p_houve_erro = TRUE
                END IF

                WHENEVER ERROR CONTINUE
                DELETE FROM sup_par_ar
                 WHERE empresa       = p_cod_empresa
                   AND aviso_recebto = p_aviso_rec.num_aviso_rec
                WHENEVER ERROR STOP

                WHENEVER ERROR CONTINUE
                DELETE FROM sup_compl_nf_sup
                 WHERE empresa       = p_cod_empresa
                   AND aviso_recebto = p_aviso_rec.num_aviso_rec
#### OS 139067
                DELETE FROM ar_subst_tribut
                WHERE cod_empresa   = p_cod_empresa
                  AND num_aviso_rec = p_dados_tela.num_aviso_rec
                WHENEVER ERROR STOP

                IF m_exporta_nf = "A" THEN
                   CALL sup3762_exclui_conta_corrente("E")
                END IF

                DELETE FROM ar_os_esp
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                #IF p_par_sup_compl.ies_rastreio = "1" THEN
                   DELETE FROM avf_insp_ar
                    WHERE avf_insp_ar.empresa       = p_cod_empresa
                      AND avf_insp_ar.aviso_recebto = p_dados_tela.num_aviso_rec

                   WHENEVER ERROR CONTINUE #OS560935
                     DELETE FROM avf_pl_insp_ar
                      WHERE avf_pl_insp_ar.empresa       = p_cod_empresa
                        AND avf_pl_insp_ar.aviso_recebto = p_dados_tela.num_aviso_rec
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql('DELETE','AVF_PL_INSP_AR')
                   END IF
                #END IF

                IF (p_dados_tela.ies_especie_nf = "NFR"  OR
                    p_dados_tela.ies_especie_nf = "NFE") AND ### OS 511148
                   p_dados_tela.ies_nf_aguard_nfe = "X" THEN
                   CALL sup3760_exclui_nf_consig("AVISO",p_dados_tela.num_aviso_rec,p_num_seq)
                END IF

                WHENEVER ERROR CONTINUE
                DELETE FROM man_moviment_serie
                 WHERE num_docum  = p_dados_tela.num_nf
                   AND (tip_docum = "RE" OR
                        tip_docum = "DV")
                   AND programa   = "sup3760"
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 AND
                   sqlca.sqlcode <> -206 THEN
                   CALL log003_err_sql("EXCLUSAO","MAN_MOVIMENT_SERIE")
                END IF

                IF p_dados_tela.cod_empresa_estab IS NULL THEN
                   WHENEVER ERROR CONTINUE
                   DELETE FROM rec_find_ent_ar
                    WHERE empresa         = p_cod_empresa
                      AND empresa_estabel IS NULL
                      AND aviso_recebto   = p_dados_tela.num_aviso_rec
                   WHENEVER ERROR STOP
                ELSE
                   WHENEVER ERROR CONTINUE
                   DELETE FROM rec_find_ent_ar
                    WHERE empresa         = p_cod_empresa
                      AND empresa_estabel = p_dados_tela.cod_empresa_estab
                      AND aviso_recebto   = p_dados_tela.num_aviso_rec
                   WHENEVER ERROR STOP
                END IF

                DELETE FROM sup_infc_strib_nfe
                 WHERE empresa            = p_cod_empresa
                   AND nf_entrada         = p_dados_tela.num_nf
                   AND serie_nf_entrada   = p_dados_tela.ser_nf
                   AND subserie_nfe       = p_dados_tela.ssr_nf
                   AND especie_nf_entrada = p_dados_tela.ies_especie_nf
                   AND fornecedor         = p_dados_tela.cod_fornecedor
                   AND seq_item_nfe       = p_aviso_rec.num_seq

                ### OS 159597 ###
                IF m_contr_pes_rec = 'S' THEN #eduardo - o.s.290538 19/11/03
                   WHENEVER ERROR CONTINUE
                   UPDATE sup_ctr_balanca
                      SET aviso_recebto = NULL
                    WHERE empresa           = p_cod_empresa
                      AND num_docum         = p_dados_tela.num_nf
                      AND serie_nota_fiscal = p_dados_tela.ser_nf
                      AND subserie_nf       = p_dados_tela.ssr_nf
                      AND fornecedor        = p_dados_tela.cod_fornecedor
                      AND seq_nota_fiscal   > 0
                      AND tip_pesagem       = "1"
                   WHENEVER ERROR STOP
                END IF

                DELETE FROM aviso_rec_compl_sq
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                DELETE FROM aviso_rec_aux
                 WHERE cod_empresa = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                DELETE FROM dev_mestre
                 WHERE cod_empresa = p_cod_empresa
                   AND num_nff     = p_dados_tela.num_aviso_rec

############### OS 134963
                DELETE FROM audit_sup_cre
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

############### OS 81443
                DELETE FROM ar_frete_cesta
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

             ## OS 407088
                CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq) RETURNING l_cod_fornecedor

                DELETE FROM item_de_terc
                 WHERE cod_empresa    = p_cod_empresa
                   AND num_nf         = p_dados_tela.num_nf
                   AND ser_nf         = p_dados_tela.ser_nf
                   AND ssr_nf         = p_dados_tela.ssr_nf
                   AND ies_especie_nf = p_dados_tela.ies_especie_nf
                   AND cod_fornecedor = l_cod_fornecedor

                DELETE FROM item_de_terc_compl
                 WHERE cod_empresa    = p_cod_empresa
                   AND num_nf         = p_dados_tela.num_nf
                   AND ser_nf         = p_dados_tela.ser_nf
                   AND ssr_nf         = p_dados_tela.ssr_nf
                   AND ies_especie_nf = p_dados_tela.ies_especie_nf
                   AND cod_fornec_nf  = l_cod_fornecedor

                DELETE FROM item_de_terc_area
                 WHERE cod_empresa    = p_cod_empresa
                   AND num_nf         = p_dados_tela.num_nf
                   AND ser_nf         = p_dados_tela.ser_nf
                   AND ssr_nf         = p_dados_tela.ssr_nf
                   AND ies_especie_nf = p_dados_tela.ies_especie_nf
                   AND cod_fornecedor = l_cod_fornecedor

                DELETE FROM item_dev_terc_comp
                 WHERE item_dev_terc_comp.cod_empresa = p_cod_empresa
                   AND item_dev_terc_comp.num_nf = p_dados_tela.num_nf
                   AND item_dev_terc_comp.ser_nf = p_dados_tela.ser_nf
                   AND item_dev_terc_comp.ssr_nf = p_dados_tela.ssr_nf
                   AND item_dev_terc_comp.num_sequencia = p_num_seq

{awc}           DELETE FROM ar_iss
                 WHERE cod_empresa = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                IF g_ies_tex_inst = "S" THEN
                   WHENEVER ERROR CONTINUE
                   DELETE FROM ar_ped_tex
                    WHERE cod_empresa      = p_cod_empresa
                      AND num_aviso_rec    = p_dados_tela.num_aviso_rec
                      AND num_seq          = p_num_seq
                   DELETE FROM nf_sup_tex_cap_con
                    WHERE cod_empresa      = p_cod_empresa
                      AND num_aviso_rec    = p_dados_tela.num_aviso_rec
                      AND num_seq          = p_num_seq
                   WHENEVER ERROR STOP
                END IF

                WHENEVER ERROR CONTINUE
                DELETE FROM aviso_rec
                 WHERE cod_empresa = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("EXCLUSAO","AVISO_REC")
                   LET p_houve_erro = TRUE
                END IF

                IF sup3760_cursor_excl_sup_retn_item_terc(TRUE) = FALSE THEN
                   LET p_houve_erro = TRUE
                END IF

                IF NOT p_houve_erro THEN
                   WHENEVER ERROR CONTINUE
                   OPEN cq_exclui_grd USING p_cod_empresa,
                                            p_dados_tela.num_nf,
                                            p_dados_tela.ser_nf,
                                            p_dados_tela.ssr_nf,
                                            p_dados_tela.ies_especie_nf,
                                            p_dados_tela.cod_fornecedor,
                                            p_num_seq
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("OPEN","SUP_RETN_ITEM_TERC")
                      LET p_houve_erro = TRUE
                   END IF

                   IF NOT p_houve_erro THEN
                      WHILE TRUE
                         WHENEVER ERROR CONTINUE
                         FETCH cq_exclui_grd INTO l_nf_remessa, l_seq_nf_remessa,
                                                  l_seq_tabulacao, l_qtd_devolvida
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            IF sqlca.sqlcode <> 100 THEN
                               CALL log003_err_sql("FETCH","SUP_RETN_ITEM_TERC")
                               LET p_houve_erro = TRUE
                            END IF

                            EXIT WHILE
                         END IF

                         WHENEVER ERROR CONTINUE
                         DELETE FROM sup_retn_item_terc
                          WHERE sup_retn_item_terc.empresa           = p_cod_empresa
                            AND sup_retn_item_terc.nota_fiscal       = p_dados_tela.num_nf
                            AND sup_retn_item_terc.serie_nota_fiscal = p_dados_tela.ser_nf
                            AND sup_retn_item_terc.subserie_nf       = p_dados_tela.ssr_nf
                            AND sup_retn_item_terc.espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                            AND sup_retn_item_terc.fornecedor        = p_dados_tela.cod_fornecedor
                            AND sup_retn_item_terc.seq_aviso_recebto = p_num_seq
                            AND sup_retn_item_terc.nf_remessa        = l_nf_remessa
                            AND sup_retn_item_terc.seq_nf_remessa    = l_seq_nf_remessa
                            AND sup_retn_item_terc.seq_tabulacao     = l_seq_tabulacao
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            CALL log003_err_sql("DELETE","SUP_RETN_ITEM_TERC")
                            LET p_houve_erro = TRUE
                         END IF

                         IF NOT p_houve_erro THEN
                            WHENEVER ERROR CONTINUE
                            UPDATE sup_itterc_grade
                               SET sup_itterc_grade.qtd_tot_receb = sup_itterc_grade.qtd_tot_receb -
                                                                    l_qtd_devolvida
                             WHERE sup_itterc_grade.empresa       = p_cod_empresa
                               AND sup_itterc_grade.nota_fiscal   = l_nf_remessa
                               AND sup_itterc_grade.seq_item_nf   = l_seq_nf_remessa
                               AND sup_itterc_grade.fornecedor    = p_dados_tela.cod_fornecedor
                               AND sup_itterc_grade.seq_tabulacao = l_seq_tabulacao
                            WHENEVER ERROR STOP
                            IF sqlca.sqlcode <> 0 THEN
                               CALL log003_err_sql("UPDATE","SUP_ITTERC_GRADE")
                               LET p_houve_erro = TRUE
                            END IF
                         END IF

                         IF p_houve_erro THEN
                            EXIT WHILE
                         END IF
                      END WHILE
                   END IF
                END IF

                ### OS 277425 ###
                IF sup3766_exclui_sup_ar_grade(p_cod_empresa,
                                               p_dados_tela.num_aviso_rec,
                                               0) = FALSE THEN
                   LET p_houve_erro = TRUE
                END IF
                ### FIM OS 277425 ###

                IF NOT sup1031_grava_audit_ar(p_dados_tela.num_aviso_rec,
                                              0, ##EXCLUSAO TOTAL DA NOTA FISCAL
                                              "SUP3760","5") THEN
                   LET p_houve_erro = TRUE
                END IF

                IF p_dados_tela.ies_nf_aguard_nfe = "A" THEN
                   DELETE FROM ar_depos
                    WHERE cod_empresa   = p_cod_empresa
                      AND num_aviso_rec = p_dados_tela.num_aviso_rec
                END IF

                IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
                   DELETE FROM item_de_terc_dep
                    WHERE cod_empresa     = p_cod_empresa
                      AND num_nf          = p_dados_tela.num_nf
                      AND ser_nf          = p_dados_tela.ser_nf
                      AND ies_especie_nf  = p_dados_tela.ies_especie_nf
                      AND cod_fornecedor  = p_dados_tela.cod_fornecedor

                   DELETE FROM ar_fornec_depos
                    WHERE cod_empresa   = p_cod_empresa
                      AND num_ar_depos  = p_dados_tela.num_aviso_rec

                END IF

                DELETE FROM vencimento_nff
                 WHERE cod_empresa = p_cod_empresa
                   AND num_nf      = p_dados_tela.num_nf
                   AND ser_nf      = p_dados_tela.ser_nf
                   AND ssr_nf      = p_dados_tela.ssr_nf
                   AND cod_fornecedor  = p_dados_tela.cod_fornecedor

                DELETE FROM nf_sup_aux
                 WHERE cod_empresa = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                IF p_dados_tela.ies_especie_nf = "NFM" THEN
                   WHENEVER ERROR CONTINUE
                   DELETE FROM nf_pend
                    WHERE cod_empresa    = p_cod_empresa
                      AND num_nf         = p_dados_tela.num_nf
                      AND ser_nf         = p_dados_tela.ser_nf
                      AND ssr_nf         = p_dados_tela.ssr_nf
                      AND cod_fornecedor = p_dados_tela.cod_fornecedor
                   WHENEVER ERROR STOP
                END IF

                IF p_dados_tela.ies_especie_nf = "NFP" THEN
                   DECLARE cq_ar_x_nf_pend CURSOR FOR
                   SELECT *
                     FROM ar_x_nf_pend
                    WHERE cod_empresa   = p_cod_empresa
                      AND num_aviso_rec = p_dados_tela.num_aviso_rec

                   FOREACH cq_ar_x_nf_pend INTO lr_ar_x_nf_pend.*
                      WHENEVER ERROR CONTINUE
                      UPDATE nf_pend
                         SET qtd_regularizada = qtd_regularizada -
                                                lr_ar_x_nf_pend.qtd_regularizada
                       WHERE cod_empresa    = lr_ar_x_nf_pend.cod_empresa
                         AND num_nf         = lr_ar_x_nf_pend.num_nf
                         AND ser_nf         = lr_ar_x_nf_pend.ser_nf
                         AND ssr_nf         = lr_ar_x_nf_pend.ssr_nf
                         AND cod_fornecedor = lr_ar_x_nf_pend.cod_fornecedor
                         AND cod_item       = lr_ar_x_nf_pend.cod_item
                      WHENEVER ERROR STOP
                   END FOREACH

                   WHENEVER ERROR CONTINUE
                   DELETE FROM ar_x_nf_pend
                    WHERE cod_empresa    = p_cod_empresa
                      AND num_aviso_rec  = p_dados_tela.num_aviso_rec
                   WHENEVER ERROR STOP
                END IF

                #OS 66100
                DELETE FROM reten_iss
                 WHERE cod_empresa    = p_cod_empresa
                   AND num_ad_nf_orig = p_dados_tela.num_nf
                   AND ser_nf         = p_dados_tela.ser_nf
                   AND ssr_nf         = p_dados_tela.ssr_nf
                   AND ies_especie_nf = p_dados_tela.ies_especie_nf
                   AND cod_fornecedor = p_dados_tela.cod_fornecedor

                DELETE FROM reten_inss
                 WHERE cod_empresa    = p_cod_empresa
                   AND num_ad_nf_orig = p_dados_tela.num_nf
                   AND ser_nf         = p_dados_tela.ser_nf
                   AND ssr_nf         = p_dados_tela.ssr_nf
                   AND ies_especie_nf = p_dados_tela.ies_especie_nf
                   AND cod_fornecedor = p_dados_tela.cod_fornecedor

                #eduardo o.s.335020
                WHENEVER ERROR CONTINUE
                DELETE FROM cap_sest_senat
                 WHERE empresa           = p_cod_empresa
                   AND ad_nf_origem      = p_dados_tela.num_nf
                   AND serie_nota_fiscal = p_dados_tela.ser_nf
                   AND subserie_nf       = p_dados_tela.ssr_nf
                   AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                   AND fornecedor        = p_dados_tela.cod_fornecedor

                DELETE FROM cap_ret_inss_auton
                 WHERE empresa           = p_cod_empresa
                   AND ad_nf_origem      = p_dados_tela.num_nf
                   AND serie_nota_fiscal = p_dados_tela.ser_nf
                   AND subserie_nf       = p_dados_tela.ssr_nf
                   AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                   AND fornecedor        = p_dados_tela.cod_fornecedor

                DELETE FROM cap_ret_inss_compl
                 WHERE empresa           = p_cod_empresa
                   AND ad_nf_origem      = p_dados_tela.num_nf
                   AND serie_nota_fiscal = p_dados_tela.ser_nf
                   AND subserie_nf       = p_dados_tela.ssr_nf
                   AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                   AND fornecedor        = p_dados_tela.cod_fornecedor

                DELETE FROM cap_ret_proalminas
                 WHERE empresa           = p_cod_empresa
                   AND ad_nf_origem      = p_dados_tela.num_nf
                   AND serie_nota_fiscal = p_dados_tela.ser_nf
                   AND subserie_nf       = p_dados_tela.ssr_nf
                   AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                   AND fornecedor        = p_dados_tela.cod_fornecedor

                DELETE FROM cap_iss_compl
                 WHERE empresa           = p_cod_empresa
                   AND ad_nota_fiscal    = p_dados_tela.num_nf
                   AND serie_nota_fiscal = p_dados_tela.ser_nf
                   AND subserie_nf       = p_dados_tela.ssr_nf
                   AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                   AND fornecedor        = p_dados_tela.cod_fornecedor

                DELETE FROM cap_iss_eletronico
                 WHERE empresa           = p_cod_empresa
                   AND ad_nota_fiscal    = p_dados_tela.num_nf
                   AND serie_nota_fiscal = p_dados_tela.ser_nf
                   AND subserie_nf       = p_dados_tela.ssr_nf
                   AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                   AND fornecedor        = p_dados_tela.cod_fornecedor
                WHENEVER ERROR STOP
                #Eduardo o.s.335020

                IF m_utiliza_dds_fortaleza = "S" THEN
                   WHENEVER ERROR CONTINUE
                   DELETE FROM cap_sistema_dds
                    WHERE empresa           = p_cod_empresa
                      AND ad_nota_fiscal    = p_dados_tela.num_nf
                      AND serie_nota_fiscal = p_dados_tela.ser_nf
                      AND subserie_nf       = p_dados_tela.ssr_nf
                      AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                      AND fornecedor        = p_dados_tela.cod_fornecedor
                   WHENEVER ERROR STOP
                END IF

                DELETE FROM reten_inss_rur
                 WHERE cod_empresa    = p_cod_empresa
                   AND num_ad_nf_orig = p_dados_tela.num_nf
                   AND ser_nf         = p_dados_tela.ser_nf
                   AND ssr_nf         = p_dados_tela.ssr_nf
                   AND ies_especie_nf = p_dados_tela.ies_especie_nf
                   AND cod_fornecedor = p_dados_tela.cod_fornecedor

                LET l_num_nf = p_dados_tela.num_nf
                DELETE FROM reten_irrf_pg
                 WHERE cod_empresa    = p_cod_empresa
                   AND num_nf         = l_num_nf
                   AND ser_nf         = p_dados_tela.ser_nf
                   AND ssr_nf         = p_dados_tela.ssr_nf
                   AND ies_especie_nf = p_dados_tela.ies_especie_nf
                   AND cod_fornecedor = p_dados_tela.cod_fornecedor

                DELETE FROM aviso_rec_compl
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                DELETE FROM ar_pis_cofins
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                #OS 359707
                WHENEVER ERROR CONTINUE
                  DELETE FROM obf_dvcli_piscofin
                   WHERE empresa       = p_cod_empresa
                     AND aviso_recebto = p_dados_tela.num_aviso_rec
                WHENEVER ERROR STOP

                WHENEVER ERROR CONTINUE
                  DELETE FROM obf_p_dvcli_cofins
                   WHERE empresa       = p_cod_empresa
                     AND aviso_recebto = p_dados_tela.num_aviso_rec
                WHENEVER ERROR STOP
                #OS 359707

                WHENEVER ERROR CONTINUE ##OS 361268
                DELETE FROM sup_par_devol_cli
                 WHERE empresa       = p_cod_empresa
                   AND aviso_recebto = p_dados_tela.num_aviso_rec
                WHENEVER ERROR STOP

                WHENEVER ERROR CONTINUE
                DELETE FROM sup_ar_piscofim
                 WHERE empresa       = p_cod_empresa
                   AND aviso_recebto = p_dados_tela.num_aviso_rec
                WHENEVER ERROR STOP

                WHENEVER ERROR CONTINUE
                DELETE FROM sup_fr_pis_cofins
                 WHERE empresa       = p_cod_empresa
                   AND aviso_recebto = p_dados_tela.num_aviso_rec
                WHENEVER ERROR STOP

                IF NOT sup3760_desfaz_relac_desp_proc() THEN
                   LET p_houve_erro = TRUE
                   RETURN
                END IF

                DELETE FROM aviso_rec_proc_imp
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                WHENEVER ERROR CONTINUE
                DELETE FROM sup_nf_reajus
                 WHERE sup_nf_reajus.empresa = p_cod_empresa
                   AND sup_nf_reajus.ar_reajus = p_dados_tela.num_aviso_rec

                DELETE FROM sup_nf_fat_remessa
                 WHERE sup_nf_fat_remessa.empresa = p_cod_empresa
                   AND sup_nf_fat_remessa.nota_fiscal = p_dados_tela.num_nf
                   AND sup_nf_fat_remessa.serie_nota_fiscal = p_dados_tela.ser_nf
                   AND sup_nf_fat_remessa.subserie_nf = p_dados_tela.ssr_nf
                   AND sup_nf_fat_remessa.espc_nota_fiscal = p_dados_tela.ies_especie_nf
                   AND sup_nf_fat_remessa.fornecedor = p_dados_tela.cod_fornecedor
                WHENEVER ERROR STOP

                IF m_exst_rel_fre_indt THEN
                   WHENEVER ERROR CONTINUE
                   DELETE FROM sup_relc_ftre_indt
                    WHERE sup_relc_ftre_indt.empresa   = p_cod_empresa
                      AND sup_relc_ftre_indt.aviso_recebto = p_dados_tela.num_aviso_rec
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("EXCLUSAO","SUP_RELC_FTRE_INDT")
                      LET p_houve_erro = TRUE
                   END IF
                   ## OS 518223 ##
                   IF find4GLFunction('supy61_gera_mvto_comodato') THEN
                      IF NOT supy61_gera_mvto_comodato(p_dados_tela.cod_empresa,
                                                       p_dados_tela.num_aviso_rec,
                                                       "E") THEN
                         WHENEVER ERROR CONTINUE
                         CALL log085_transacao("ROLLBACK")
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            CALL log003_err_sql("ROLLBACK","TRANSACAO")
                         END IF
                         RETURN
                      END IF
                   END IF
                   ## OS 518223 ##
                END IF

                ##Se for integração ON-LINE poderá existir lançamentos contábeis para o documento,
                ##já que o indicador ies_incl_contab só passará para "S" quando for efetuado
                ##a integração contábil (geração do lote ou arquivo texto).
                IF NOT supr6_integracao_batch(p_cod_empresa) AND
                   supr6_data_posterior_data_corte_logix_10(p_cod_empresa,
                                                            p_dados_tela.dat_entrada_nf) THEN

                   IF NOT supr6_validacao_data_inicial_e_final_processamento(p_cod_empresa,
                                                                             p_dados_tela.dat_entrada_nf,
                                                                             p_dados_tela.dat_entrada_nf,
                                                                             "MANUAL",
                                                                             FALSE) THEN
                      LET p_houve_erro = TRUE
                   ELSE
                      IF m_dat_entrada_ant IS NULL THEN
                         LET l_dat_entrada_nf =  p_dados_tela.dat_entrada_nf
                      ELSE
                         LET l_dat_entrada_nf = m_dat_entrada_ant
                      END IF

                      IF NOT supr6_exclui_lancamento_contabil_documento("MANUAL",
                                                                        p_cod_empresa,
                                                                        p_dados_tela.num_nf,
                                                                        p_dados_tela.ser_nf,
                                                                        p_dados_tela.ssr_nf,
                                                                        p_dados_tela.ies_especie_nf,
                                                                        p_dados_tela.cod_fornecedor,
                                                                        p_dados_tela.num_aviso_rec,
                                                                        l_dat_entrada_nf,
                                                                        0,FALSE) THEN
                         LET p_houve_erro = TRUE
                      END IF
                   END IF
                END IF

{awc}
                DELETE FROM ar_iss
                 WHERE cod_empresa = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec

                DELETE FROM nf_sup
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec
                IF sqlca.sqlcode = 0  THEN
                   #IF p_ies_interf_cre = "S" THEN
                   #   IF (p_dados_tela.ies_especie_nf = "NFD" OR
                   #       p_ies_tip_entrada = "5") THEN
                   #      CALL log0030_mensagem("ATENCAO !!! Estes dados ja foram baixados no Contas a Receber","exclamation")
                   #   END IF
                   #END IF
                   IF(p_dados_tela.cod_operacao[1] = "7" OR m_nfr_import) AND
                      p_dados_tela.ies_especie_nf <> "NFM" AND
                     (p_par_sup_compl.ies_mod_importacao = "L" OR
                      p_par_sup_compl.ies_mod_importacao = "S") THEN
                      IF m_num_processo IS NOT NULL AND m_num_processo <> -1 THEN
                         DECLARE cq_ar_proc_imp3 CURSOR FOR
                         SELECT num_aviso_rec
                           FROM aviso_rec_proc_imp
                          WHERE cod_empresa  = p_dados_tela.cod_empresa
                            AND num_processo = m_num_processo

                         INITIALIZE l_num_ar_imp TO NULL
                         OPEN cq_ar_proc_imp3
                         FETCH cq_ar_proc_imp3 INTO l_num_ar_imp
                         CLOSE cq_ar_proc_imp3

                         IF l_num_ar_imp IS NULL THEN
                            WHENEVER ERROR CONTINUE
                            UPDATE processo_imp
                               SET num_aviso_rec = NULL,
                                   ies_situacao  = "4"
                             WHERE cod_empresa      = p_dados_tela.cod_empresa
                               AND num_aviso_rec    IS NOT NULL
                               AND num_aviso_rec    = p_dados_tela.num_aviso_rec
                               AND ies_versao_atual = "S"
                            WHENEVER ERROR STOP
                            IF sqlca.sqlcode <> 0 THEN
                               CALL log003_err_sql("(3)MODIFICACAO","PROCESSO_IMP")
                               LET p_houve_erro = TRUE
                            ELSE
                               CALL imp0024_mov_even(p_cod_empresa,m_num_processo,
                                      34," ",TODAY)
                            END IF
                         ELSE
                            LET l_num_ar_proc = sup3760_leitura_processo_imp(m_num_processo,"AR")
                            IF l_num_ar_proc = p_dados_tela.num_aviso_rec THEN
                               WHENEVER ERROR CONTINUE
                               UPDATE processo_imp
                                  SET num_aviso_rec    = l_num_ar_imp
                                WHERE cod_empresa      = p_dados_tela.cod_empresa
                                  AND num_processo     = m_num_processo
                                  AND ies_versao_atual = "S"
                               WHENEVER ERROR STOP
                               IF sqlca.sqlcode <> 0 THEN
                                  CALL log003_err_sql("(4)MODIFICACAO","PROCESSO_IMP")
                                  LET p_houve_erro = TRUE
                               END IF
                            END IF
                         END IF
                      END IF
                   END IF

                   ### OS 154880 ###
                   WHENEVER ERROR CONTINUE
                   IF p_ies_obt_inf_com = "S" AND
                      sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                          p_dados_tela.num_aviso_rec,
                                                          p_dados_tela.num_nf,
                                                          p_dados_tela.ser_nf,
                                                          p_dados_tela.ssr_nf,
                                                          p_dados_tela.cod_fornecedor,
                                                          p_dados_tela.cod_operacao,
                                                          p_dados_tela.cod_fiscal_compl) THEN
                      IF g_ies_tip_controle = "J" OR
                         g_ies_tip_controle = "I" THEN  #eduardo o.s.290535 18/11/03

                         INITIALIZE sql_stmt TO NULL

                         IF m_ies_fat_unico THEN
                            LET sql_stmt =
                              " SELECT fat_nf_transf_pat.empresa_destino, ",
                                     " fat_nf_transf_pat.inventario_destino, ",
                                     " fat_nf_transf_pat.aviso_recebto, ",
                                     " fat_nf_transf_pat.seq_item_ar, ",
                                     " fat_nf_transf_pat.dat_ent_ar, ",
                                     " fat_nf_transf_pat.trans_nota_fiscal, ",
                                     " fat_nf_transf_pat.inventario_origem, ",
                                     " fat_nf_transf_pat.parc_inv_origem, ",
                                     " fat_nf_transf_pat.seq_item_nf ",
                                " FROM fat_nf_mestre, fat_nf_transf_pat ",
                               " WHERE fat_nf_mestre.empresa               = """, p_cod_emp_transf, """ ",
                                 " AND fat_nf_mestre.nota_fiscal           = ", p_dados_tela.num_nf,
                                 " AND fat_nf_mestre.serie_nota_fiscal     = """,p_dados_tela.ser_nf,""" ",
                                 " AND fat_nf_mestre.subserie_nf           = ",p_dados_tela.ssr_nf," ",
                                 " AND fat_nf_mestre.tip_nota_fiscal       = ""FATPRDSV"" ",
                                 " AND fat_nf_mestre.sit_nota_fiscal       = ""N"" ",
                                 " AND fat_nf_transf_pat.empresa           = fat_nf_mestre.empresa ",
                                 " AND fat_nf_transf_pat.trans_nota_fiscal = fat_nf_mestre.trans_nota_fiscal ",
                                 " AND fat_nf_transf_pat.empresa_destino   = """, p_cod_empresa, """ ",
                                 " AND fat_nf_transf_pat.aviso_recebto     = ",p_dados_tela.num_aviso_rec
                                 #não está dentro de loop para considerar o código do item e seq. do AR
                                 #" AND fat_nf_transf_pat.inventario_origem = """, p_aviso_rec.cod_item, """ ",
                                 #" AND fat_nf_transf_pat.seq_item_nf       = ", p_aviso_rec.num_seq
                         ELSE
                            LET sql_stmt = " SELECT empresa_destino, ",
                                                  " inventario_destino, ",
                                                  " aviso_recebto, ",
                                                  " seq_aviso_recebto, ",
                                                  " dat_entrada, ",
                                                  " 0, ",
                                                  " inventario_origem, ",
                                                  " parc_inv_origem, ",
                                                  " seq_item_nf ",
                                             " FROM fat_transf_pat ",
                                            " WHERE empresa_destino    = """, p_cod_empresa, """ ",
                                              #" AND inventario_origem  = """, p_aviso_rec.cod_item, """ ",
                                              " AND nota_fiscal        = ", p_dados_tela.num_nf," ",
                                              " AND aviso_recebto      = ",p_dados_tela.num_aviso_rec
                                              #" AND seq_item_nf        = ", p_aviso_rec.num_seq
                         END IF

                         WHENEVER ERROR CONTINUE
                         PREPARE var_query1 FROM sql_stmt
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            CALL log003_err_sql("PREPARE SQL","VAR_QUERY1")
                            LET p_houve_erro = TRUE
                         END IF

                         WHENEVER ERROR CONTINUE
                         DECLARE cl_fat_transf CURSOR FOR var_query
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            CALL log003_err_sql("DECLARE CURSOR","CL_FAT_TRANSF")
                            LET p_houve_erro = TRUE
                         END IF

                         WHENEVER ERROR CONTINUE
                         FOREACH cl_fat_transf INTO lr_transf_pat.empresa_destino,
                                                    lr_transf_pat.inventario_destino,
                                                    lr_transf_pat.aviso_recebto,
                                                    lr_transf_pat.seq_aviso_recebto,
                                                    lr_transf_pat.dat_entrada,
                                                    lr_transf_pat.trans_nota_fiscal,
                                                    lr_transf_pat.inventario_origem,
                                                    lr_transf_pat.num_parcela_orig,
                                                    lr_transf_pat.seq_item_nf
                            WHENEVER ERROR STOP
                            IF sqlca.sqlcode <> 0 THEN
                               CALL log003_err_sql("FOREACH","CL_FAT_TRANSF")
                               LET p_houve_erro = TRUE
                               EXIT FOREACH
                            END IF

                            IF m_ies_fat_unico THEN
                               WHENEVER ERROR CONTINUE
                               UPDATE fat_nf_transf_pat
                                  SET empresa_destino    = NULL,
                                      inventario_destino = NULL,
                                      aviso_recebto      = NULL,
                                      seq_item_ar        = NULL,
                                      dat_ent_ar         = NULL
                                WHERE empresa_origem     = p_cod_emp_transf
                                  AND inventario_origem  = lr_transf_pat.inventario_origem
                                  AND trans_nota_fiscal  = lr_transf_pat.trans_nota_fiscal
                                  AND seq_item_nf        = lr_transf_pat.seq_item_nf
                               WHENEVER ERROR STOP
                               IF sqlca.sqlcode <> 0 THEN
                                  LET p_houve_erro = TRUE
                                  CALL log003_err_sql("ATUALIZACAO","FAT_NF_TRANSF_PAT")
                                  EXIT FOREACH
                               END IF
                            ELSE
                               WHENEVER ERROR CONTINUE
                               UPDATE fat_transf_pat
                                  SET empresa_destino    = NULL,
                                      inventario_destino = NULL,
                                      aviso_recebto      = NULL,
                                      seq_aviso_recebto  = NULL,
                                      dat_entrada        = NULL
                                WHERE empresa_origem     = p_cod_emp_transf
                                  AND inventario_origem  = lr_transf_pat.inventario_origem
                                  AND nota_fiscal        = p_dados_tela.num_nf
                                  AND seq_item_nf        = lr_transf_pat.seq_item_nf
                               WHENEVER ERROR STOP
                               IF sqlca.sqlcode <> 0 THEN
                                  LET p_houve_erro = TRUE
                                  CALL log003_err_sql("ATUALIZACAO","FAT_TRANSF_PAT")
                                  EXIT FOREACH
                               END IF
                            END IF

                            IF NOT p_houve_erro THEN
                               WHENEVER ERROR CONTINUE
                               DECLARE cq_parcelas_inv CURSOR FOR
                               SELECT parametro_val
                                 FROM sup_par_ar
                                WHERE empresa           = p_cod_empresa
                                  AND aviso_recebto     = p_dados_tela.num_aviso_rec
                                  AND seq_aviso_recebto = 0
                                  AND trim(parametro[1,15]) = trim(lr_transf_pat.inventario_destino)
                               WHENEVER ERROR STOP
                               IF sqlca.sqlcode <> 0 THEN
                                  CALL log003_err_sql("DECLARE CURSOR","CQ_PARCELAS_INV")
                                  LET p_houve_erro = TRUE
                                  EXIT FOREACH
                               END IF

                               LET lr_transf_pat.num_parcela = -1

                               WHENEVER ERROR CONTINUE
                               FOREACH cq_parcelas_inv INTO lr_transf_pat.num_parcela
                                  IF sqlca.sqlcode <> 0 THEN
                                     CALL log003_err_sql("FOREACH CURSOR","CQ_PARCELAS_INV")
                                     LET p_houve_erro = TRUE
                                     EXIT FOREACH
                                  END IF

                                  WHENEVER ERROR CONTINUE
                                  DELETE FROM patrval
                                   WHERE cod_empresa       = p_cod_empresa
                                     AND cod_empresa_estab = p_cod_empresa
                                     AND num_invent        = lr_transf_pat.inventario_destino
                                     AND num_parcela       = lr_transf_pat.num_parcela
                                  WHENEVER ERROR STOP
                                  IF sqlca.sqlcode <> 0 THEN
                                     LET p_houve_erro = TRUE
                                     CALL log003_err_sql("EXCLUSAO","PATRVAL")
                                     EXIT FOREACH
                                  END IF
                                  WHENEVER ERROR CONTINUE
                                  DELETE FROM patrparc
                                   WHERE cod_empresa       = p_cod_empresa
                                     AND cod_empresa_estab = p_cod_empresa
                                     AND num_invent        = lr_transf_pat.inventario_destino
                                     AND num_parcela       = lr_transf_pat.num_parcela
                                  WHENEVER ERROR STOP
                                  IF sqlca.sqlcode <> 0 THEN
                                     LET p_houve_erro = TRUE
                                     CALL log003_err_sql("EXCLUSAO","PATRPARC")
                                     EXIT FOREACH
                                  END IF
                                  WHENEVER ERROR CONTINUE
                                  DELETE FROM patrparc_desc
                                   WHERE cod_empresa       = p_cod_empresa
                                     AND cod_empresa_estab = p_cod_empresa
                                     AND num_invent        = lr_transf_pat.inventario_destino
                                     AND num_parcela       = lr_transf_pat.num_parcela
                                  WHENEVER ERROR STOP
                                  IF sqlca.sqlcode <> 0 THEN
                                     LET p_houve_erro = TRUE
                                     CALL log003_err_sql("EXCLUSAO","PATRPARC")
                                     EXIT FOREACH
                                  END IF
                                  IF log0150_verifica_se_tabela_existe("pat_dad_compl_ent") THEN
                                     WHENEVER ERROR CONTINUE
                                     DELETE FROM pat_dad_compl_ent ##OS 578053
                                      WHERE empresa            = p_cod_empresa
                                        AND emp_estab          = p_cod_empresa
                                        AND inventario         = lr_transf_pat.inventario_destino
                                        AND parcela_inventario = lr_transf_pat.num_parcela
                                     WHENEVER ERROR STOP
                                     IF sqlca.sqlcode <> 0 THEN
                                        CALL log003_err_sql("DELETE","PAT_DAD_COMPL_ENT")
                                        LET p_houve_erro = TRUE
                                        EXIT FOREACH
                                     END IF
                                  END IF
                                  IF log0150_verifica_se_tabela_existe("hist_alteracao") THEN
                                     WHENEVER ERROR CONTINUE
                                     DELETE FROM hist_alteracao ##OS 570482
                                      WHERE cod_empresa        = p_cod_empresa
                                        AND cod_empresa_estab  = p_cod_empresa
                                        AND num_invent         = lr_transf_pat.inventario_destino
                                        AND num_parcela        = lr_transf_pat.num_parcela
                                     WHENEVER ERROR STOP
                                     IF sqlca.sqlcode <> 0 THEN
                                        CALL log003_err_sql("DELETE","HIST_ALTERACAO")
                                        LET p_houve_erro = TRUE
                                        EXIT FOREACH
                                     END IF

                                     WHENEVER ERROR CONTINUE
                                     DELETE FROM hist_alteracao ##OS 570482
                                      WHERE cod_empresa        = p_cod_empresa
                                        AND cod_empresa_estab  = p_cod_empresa
                                        AND num_invent         = lr_transf_pat.inventario_origem
                                        AND num_parcela        = lr_transf_pat.num_parcela_orig
                                     WHENEVER ERROR STOP
                                     IF sqlca.sqlcode <> 0 THEN
                                        CALL log003_err_sql("(3)DELETE","HIST_ALTERACAO")
                                        LET p_houve_erro = TRUE
                                        EXIT FOREACH
                                     END IF
                                  END IF
                               END FOREACH
                               FREE cq_parcelas_inv
                               WHENEVER ERROR STOP

                               IF p_houve_erro THEN
                                  EXIT FOREACH
                               END IF

                               IF lr_transf_pat.num_parcela = -1 THEN
                                  WHENEVER ERROR CONTINUE
                                  DELETE FROM patrval
                                  WHERE cod_empresa       = p_cod_empresa
                                    AND cod_empresa_estab = p_cod_empresa
                                    AND num_invent        = lr_transf_pat.inventario_destino
                                  WHENEVER ERROR STOP
                                  IF sqlca.sqlcode <> 0 THEN
                                     LET p_houve_erro = TRUE
                                     CALL log003_err_sql("EXCLUSAO","PATRVAL")
                                     EXIT FOREACH
                                  END IF

                                  WHENEVER ERROR CONTINUE
                                  DELETE FROM patrparc
                                   WHERE cod_empresa       = p_cod_empresa
                                     AND cod_empresa_estab = p_cod_empresa
                                     AND num_invent        = lr_transf_pat.inventario_destino
                                  WHENEVER ERROR STOP
                                  IF sqlca.sqlcode <> 0 THEN
                                     LET p_houve_erro = TRUE
                                     CALL log003_err_sql("EXCLUSAO","PATRPARC")
                                     EXIT FOREACH
                                  END IF
                                  WHENEVER ERROR CONTINUE
                                  DELETE FROM patrparc_desc
                                   WHERE cod_empresa       = p_cod_empresa
                                     AND cod_empresa_estab = p_cod_empresa
                                     AND num_invent        = lr_transf_pat.inventario_destino
                                  WHENEVER ERROR STOP
                                  IF sqlca.sqlcode <> 0 THEN
                                     LET p_houve_erro = TRUE
                                     CALL log003_err_sql("EXCLUSAO","PATRPARC")
                                     EXIT FOREACH
                                  END IF
                                  IF log0150_verifica_se_tabela_existe("pat_dad_compl_ent") THEN
                                     WHENEVER ERROR CONTINUE
                                     DELETE FROM pat_dad_compl_ent ##OS 578053
                                      WHERE empresa            = p_cod_empresa
                                        AND emp_estab          = p_cod_empresa
                                        AND inventario         = lr_transf_pat.inventario_destino
                                     WHENEVER ERROR STOP
                                     IF sqlca.sqlcode <> 0 THEN
                                        CALL log003_err_sql("(2)DELETE","PAT_DAD_COMPL_ENT")
                                        LET p_houve_erro = TRUE
                                        EXIT FOREACH
                                     END IF
                                  END IF
                                  IF log0150_verifica_se_tabela_existe("hist_alteracao") THEN
                                     WHENEVER ERROR CONTINUE
                                     DELETE FROM hist_alteracao ##OS 570482
                                      WHERE cod_empresa        = p_cod_empresa
                                        AND cod_empresa_estab  = p_cod_empresa
                                        AND num_invent         = lr_transf_pat.inventario_destino
                                     WHENEVER ERROR STOP
                                     IF sqlca.sqlcode <> 0 THEN
                                        CALL log003_err_sql("(2)DELETE","HIST_ALTERACAO")
                                        LET p_houve_erro = TRUE
                                        EXIT FOREACH
                                     END IF
                                     WHENEVER ERROR CONTINUE
                                     DELETE FROM hist_alteracao ##OS 570482
                                      WHERE cod_empresa        = p_cod_empresa
                                        AND cod_empresa_estab  = p_cod_empresa
                                        AND num_invent         = lr_transf_pat.inventario_origem
                                     WHENEVER ERROR STOP
                                     IF sqlca.sqlcode <> 0 THEN
                                        CALL log003_err_sql("(4)DELETE","HIST_ALTERACAO")
                                        LET p_houve_erro = TRUE
                                        EXIT FOREACH
                                     END IF
                                  END IF
                               END IF
                            END IF
                            WHENEVER ERROR CONTINUE
                         END FOREACH
                         FREE cl_fat_transf
                         WHENEVER ERROR STOP

                         WHENEVER ERROR CONTINUE
                         INSERT INTO nf_sup_erro (empresa,
                                                  num_aviso_rec,
                                                  num_seq,
                                                  des_pendencia_item,
                                                  ies_origem_erro,
                                                  ies_erro_grave)
                                                  VALUES
                                                 (p_dados_tela.cod_empresa,
                                                  p_dados_tela.num_aviso_rec,
                                                  ma_inf_ar[m_count_seq].num_seq,
                                                  " Item da NF de origem pendente de recebimento ",
                                                  "1","S")
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            CALL log003_err_sql("INCLUSÃO","NF_SUP_ERRO")
                         END IF

                      END IF
                   END IF
                   WHENEVER ERROR STOP
                   ### FIM OS 154880 ###

                   IF p_ies_canc_nc = TRUE
                   THEN CALL sup376_cancela_nota_credito()
                   END IF
                   INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
                   INITIALIZE p_formonly.* TO NULL
                   #CLEAR FORM
                ELSE
                   CALL log003_err_sql("EXCLUSAO","NF_SUP")
                   LET p_houve_erro = TRUE
                END IF

                IF p_houve_erro = FALSE AND p_aviso_rec.num_oc > 0 THEN
                   #FLUXO DE CAIXA

                   #Atualizar saldo da ordem de compra no
                   #fluxo de caixa após exclusão do AR
                   IF NOT fcl1150_integra_oc_fcx(p_aviso_rec.cod_empresa,
                                                 p_aviso_rec.num_oc,"IN") THEN
                      LET p_houve_erro = TRUE
                   END IF
                END IF

                IF p_houve_erro = FALSE   THEN

                   IF  m_recalcula_impostos_nf_imp = "S"
                   AND p_dados_tela.cod_operacao[1,1] = "7"  THEN
                      CALL sup3760_recalcula_impostos_nf_imp()
                   END IF

                   WHENEVER ERROR CONTINUE
                       CALL log085_transacao("COMMIT")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 THEN
                      MESSAGE " Aviso de recebimento excluido com sucesso. " ATTRIBUTE(REVERSE)
                      IF p_ies_usa_ae = "S" THEN
                         CALL sup376_consiste_ae(p_aviso_rec.num_aviso_rec)
                      END IF
                   ELSE
                      INITIALIZE p_msg TO NULL
                      LET p_msg = "Erro na efetivação dos dados. SQLCA.SQLCODE = ", sqlca.SQLCODE CLIPPED
                      CALL log0030_mensagem(p_msg,"stop")
                      CALL log085_transacao("ROLLBACK") #OS596059
                      RETURN
                   END IF
                ELSE
                   CALL log085_transacao("ROLLBACK")
                END IF
                CLOSE cm_aviso_rec #745465#
                FREE cm_aviso_rec  #745465#
             END IF
          END IF
       ELSE
          IF sup376_cursor_for_update() = TRUE THEN
             IF p_aviso_rec.ies_receb_fiscal = "S" THEN
                IF sup376_deleta_inf_fiscais(p_num_seq) = FALSE THEN
                   CALL log085_transacao("ROLLBACK")
                   RETURN
                END IF
             END IF
             IF p_houve_erro = FALSE   THEN

                IF  m_recalcula_impostos_nf_imp = "S"
                AND p_dados_tela.cod_operacao[1,1] = "7"  THEN
                   CALL sup3760_recalcula_impostos_nf_imp()
                END IF

                WHENEVER ERROR CONTINUE
                    CALL log085_transacao("COMMIT")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode = 0 THEN
                   IF p_ies_usa_ae = "S" THEN
                      CALL sup376_consiste_ae(p_aviso_rec.num_aviso_rec)
                   END IF
                ELSE
                   INITIALIZE p_msg TO NULL
                   LET p_msg = "Erro na efetivação dos dados. SQLCA.SQLCODE = ", sqlca.SQLCODE CLIPPED
                   CALL log0030_mensagem(p_msg,"stop")
                   CALL log085_transacao("ROLLBACK") #OS596059
                   RETURN
                END IF
             ELSE
                CALL log085_transacao("ROLLBACK")
             END IF
             CLOSE cm_aviso_rec #745465#
             FREE cm_aviso_rec  #745465#
          END IF
       END IF
    END IF
 END IF
 END FUNCTION

#-------------------------------------------#
 FUNCTION sup376_verifica_reten_inss_auton()  #OS 237288
#-------------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT empresa
   FROM cap_ret_inss_auton
  WHERE cap_ret_inss_auton.empresa           = p_cod_empresa
    AND cap_ret_inss_auton.ad_nf_origem      = p_dados_tela.num_nf
    AND cap_ret_inss_auton.serie_nota_fiscal = p_dados_tela.ser_nf
    AND cap_ret_inss_auton.subserie_nf       = p_dados_tela.ssr_nf
    AND cap_ret_inss_auton.espc_nota_fiscal  = p_dados_tela.ies_especie_nf
    AND cap_ret_inss_auton.fornecedor        = p_dados_tela.cod_fornecedor
    AND cap_ret_inss_auton.ad_pagto_inss     IS NOT NULL
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0  THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

END FUNCTION

#-------------------------------------#
 FUNCTION sup376_cancela_nota_fiscal()
#-------------------------------------#
 DEFINE p_achou_seq           SMALLINT,
        p_nr_nf               CHAR(7),
        l_cont                SMALLINT,
        l_ies_nf_com_erro     LIKE nf_sup.ies_nf_com_erro,
        l_num_ar_imp          LIKE aviso_rec_proc_imp.num_aviso_rec,
        l_num_ar_proc         LIKE processo_imp.num_aviso_rec,
        l_ies_situa_import    LIKE nf_sup.ies_situa_import,
        lr_ar_x_nf_pend       RECORD LIKE ar_x_nf_pend.*,
        l_prog_contagem       LIKE par_sup_pad.par_txt,
        l_count               SMALLINT,
        l_qtd_erros           SMALLINT,
        l_usuario_aceite      LIKE nf_sup.nom_resp_aceite_er,
        l_des_pendencia_item  LIKE nf_sup_erro.des_pendencia_item,
        l_dat_entrada_nf      DATE

 IF sup3762_verifica_item_dev_terc(m_contr_terc_no_dep) THEN
    #Chamada da mensagem retirada pois a funcao do sup3762 ja apresenta mensagem (OS522401)
    #CALL log0030_mensagem("Nota tipo A/B relacionada com nota tipo A/B(SUP2300), excluir relacionamento","exclamation")
    RETURN
 END IF

 ERROR "CANCELAMENTO DA NOTA FISCAL !!! "

 LET m_nfr_import = FALSE
 IF sup3760_nfr_consignatario("EXCLUSAO") THEN
   LET m_nfr_import = TRUE
 END IF

 IF p_dados_tela.cod_operacao[1] = "7" OR m_nfr_import THEN
    LET m_num_processo = sup3760_busca_numero_processo_importacao()
    IF m_num_processo IS NULL THEN
       LET m_num_processo = m_inicio_provisao
    END IF

    IF (m_ies_utiliz_provisao = "N" OR
       (m_ies_utiliz_provisao = "S" AND
        m_num_processo < m_inicio_provisao) OR
       (m_ies_utiliz_provisao = "S" AND m_utiliz_nfm_import = "S" AND
        m_num_processo >= m_inicio_provisao)) THEN
       LET l_num_ar_proc = sup3760_leitura_processo_imp(m_num_processo,"AR")
       IF l_num_ar_proc IS NOT NULL THEN
          INITIALIZE l_ies_situa_import TO NULL
          SELECT ies_situa_import
            INTO l_ies_situa_import
            FROM nf_sup
           WHERE cod_empresa   = p_cod_empresa
             AND num_aviso_rec = l_num_ar_proc
          WHENEVER ERROR STOP
          IF l_ies_situa_import IS NOT NULL AND
             l_ies_situa_import = "E" THEN

             IF NOT sup3760_verifica_nfp_incl_apos_encerr(p_cod_empresa,
                                                          p_dados_tela.num_aviso_rec) THEN
                ERROR " Processo de importacao ja encerrado "
                RETURN
             END IF

          END IF
       END IF
    END IF
 END IF

 DECLARE cq_num_seqs4 CURSOR FOR
 SELECT num_seq, num_pedido, num_oc
  FROM aviso_rec
 WHERE cod_empresa   = p_cod_empresa
   AND num_aviso_rec = p_dados_tela.num_aviso_rec
   AND num_pedido    > 0
 ORDER BY num_oc

 LET m_count_seq = 1
 INITIALIZE ma_inf_ar TO NULL
 FOREACH cq_num_seqs4 INTO ma_inf_ar[m_count_seq].num_seq,
                           ma_inf_ar[m_count_seq].num_pedido,
                           ma_inf_ar[m_count_seq].num_oc
    LET m_count_seq = m_count_seq + 1
    IF m_count_seq > 999 THEN
       CALL log0030_mensagem("Estouro de array","stop")
       EXIT FOREACH
    END IF
 END FOREACH
 IF m_count_seq > 999 THEN
    LET p_houve_erro = TRUE
    RETURN
 END IF
 LET m_count_seq = m_count_seq - 1

 IF p_dados_tela.ies_especie_nf = "NFM" THEN
    WHENEVER ERROR CONTINUE
    LET l_cont = 0
    SELECT COUNT(*)
      INTO l_cont
      FROM ar_x_nf_pend
     WHERE cod_empresa    = p_cod_empresa
       AND num_nf         = p_dados_tela.num_nf
       AND ser_nf         = p_dados_tela.ser_nf
       AND ssr_nf         = p_dados_tela.ssr_nf
       AND cod_fornecedor = p_dados_tela.cod_fornecedor
    WHENEVER ERROR STOP
    IF l_cont > 0 THEN
       ERROR " Existe NFP relacionada com esta NFM "
       RETURN
    END IF
 END IF

 IF log004_confirm(21,44) THEN
    LET p_houve_erro = FALSE
    IF sup3762_verifica_impostos_ja_pagos() THEN
       LET p_houve_erro = TRUE
       RETURN
    END IF

    DECLARE cq_canc_nf  CURSOR  FOR
     SELECT * FROM aviso_rec
      WHERE cod_empresa   = p_dados_tela.cod_empresa
        AND num_aviso_rec = p_dados_tela.num_aviso_rec
    FOREACH cq_canc_nf INTO p_aviso_rec.*
       IF NOT sup3762_verifica_devol_nf_consig(p_dados_tela.ies_especie_nf,
                                               p_dados_tela.ies_nf_aguard_nfe,
                                               p_dados_tela.cod_empresa,
                                               p_dados_tela.num_nf,
                                               p_dados_tela.cod_fornecedor,
                                               p_aviso_rec.cod_item) THEN #-- OS 495219
          RETURN
       END IF
       LET p_num_seq    = p_aviso_rec.num_seq
       IF sup376_verifica_cond_delecao("CANCELA") = TRUE THEN
          LET l_count = 0
          WHENEVER ERROR CONTINUE
          SELECT COUNT(*)
            INTO l_count
            FROM sup_frete_x_nf_entrada
           WHERE sup_frete_x_nf_entrada.empresa       = p_cod_empresa
             AND sup_frete_x_nf_entrada.aviso_recebto = p_nf_sup.num_aviso_rec
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("SELECT","SUP_FRETE_X_NF_ENTRADA")
          END IF

          IF p_nf_sup.num_conhec IS NOT NULL AND
             p_nf_sup.num_conhec > 0 OR
             l_count > 0 THEN

             CALL log0030_mensagem("Existe frete relacionado com a Nota. Excluir relacionamento.","exclamation")
             LET p_houve_erro = TRUE
             RETURN
          ELSE
             IF p_dados_tela.ies_nf_aguard_nfe <> "7" THEN
                #IF (p_aviso_rec.ies_item_estoq = "N" AND     *** Rafael - OS314473
                 #  (p_par_sup_compl.ies_conta_ok_n_est = "2" OR
                  # (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
                   # p_dados_tela.ies_especie_nf = "NFS"))) OR
                    #p_aviso_rec.ies_item_estoq = "S" THEN
                    IF sup376_possui_avf_insp_ar() = FALSE THEN
                       IF p_aviso_rec.ies_liberacao_insp = "S" AND
                          p_aviso_rec.ies_situa_ar = "E" THEN
                          ### OS237529 ###
                          INITIALIZE l_prog_contagem TO NULL
                          SELECT par_txt
                            INTO l_prog_contagem
                            FROM par_sup_pad
                           WHERE par_sup_pad.cod_empresa   = p_cod_empresa
                             AND par_sup_pad.cod_parametro = "prog_contagem"
                          IF sqlca.sqlcode <> 0 OR
                             l_prog_contagem IS NULL THEN
                             LET l_prog_contagem = " "
                          END IF

                          IF l_prog_contagem = "sup0799" THEN
                             CALL log0030_mensagem(" Exclua primeiramente resultado de contagem - SUP0799 ","exclamation")
                             LET p_houve_erro = TRUE
                             RETURN
                          END IF

                          ERROR " Aguarde ... Excluindo Inspecao ... "
                          CALL log120_procura_caminho("sup0570") RETURNING comando3
                          LET comando3 = comando3 CLIPPED, " ",  p_cod_empresa, " ",
                                                           p_aviso_rec.num_aviso_rec,  " ",
                                                           p_num_seq, " ",
                                                           "EXCLUSAO"," ",
                                                           "SUP3760"
                          RUN comando3 RETURNING p_cancel
                          LET p_ies_situa_ar = NULL
                          CALL sup376_busca_aviso_rec(p_cod_empresa, p_aviso_rec.num_aviso_rec, p_num_seq)
                          LET p_ies_situa_ar = p_aviso_rec.ies_situa_ar

                          IF sup1481_nfc_compl_imposto(p_nf_sup.ies_especie_nf,
                                                       p_cod_empresa,
                                                       p_aviso_rec.num_aviso_rec) = FALSE THEN
                             IF p_aviso_rec.ies_item_estoq = "S" THEN
                                CALL sup0063_verifica_controles(1, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles
                             ELSE
                                CALL sup0063_verifica_controles(11, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles
                             END IF
                          END IF

                          IF p_ies_custo_grade = "S" AND
                             m_controles <> " "     THEN
                             ## Quando a empresa utiliza custo por grade, a contagem
                             ## eh excluida ja quando faz a exclusao da inspecao.
                             IF p_ies_situa_ar <> "C" THEN
                                CALL log0030_mensagem(" Problemas na exclusao da inspecao. ","exclamation")
                                LET p_houve_erro = TRUE
                                RETURN
                             END IF
                          ELSE
                             IF p_ies_situa_ar <> "I" THEN
                                CALL log0030_mensagem(" Problemas na exclusao da inspecao. ","exclamation")
                                LET p_houve_erro = TRUE
                                RETURN
                             END IF
                          END IF
                          ERROR " Exclusao de inspecao realizada com sucesso. "
                       END IF
                    ELSE
                       IF p_aviso_rec.ies_item_estoq = "S" THEN
                          IF avf1003_exclusao_qualidade(p_aviso_rec.num_aviso_rec,
                                                        p_num_seq) = FALSE THEN
                             LET p_houve_erro = TRUE
                             CALL log0030_mensagem(" Problemas na exclusao da inspecao (AVF). ","exclamation")
                             RETURN
                          END IF
                       END IF
                    END IF

                    #CALL sup376_verifica_cont_insp_automat(p_aviso_rec.cod_item, m_cont_insp_especial)
                    #     RETURNING p_ies_item_cont_aut, p_ies_item_insp_aut
                    #IF p_ies_item_insp_aut = "S" OR
                    #  (p_ies_item_insp_aut = "N" AND
                    #   p_aviso_rec.ies_situa_ar <> "E") THEN

                    IF p_aviso_rec.ies_liberacao_cont = "S" THEN
                       ERROR " Aguarde ... Excluindo contagem ... "

                       CALL sup3760_atualiza_nota(p_cod_empresa, p_dados_tela.num_nf, p_dados_tela.ser_nf,
                                                  p_dados_tela.ssr_nf, p_dados_tela.cod_fornecedor,
                                                  p_dados_tela.num_aviso_rec, p_dados_tela.cnd_pgto_nf)

                       CALL log120_procura_caminho("sup0530") RETURNING comando3
                       LET comando3 = comando3 CLIPPED, " ",  p_cod_empresa, " ",
                                                        p_dados_tela.num_aviso_rec," ",
                                                        p_num_seq, " ",
                                                        3760," ",
                                                        "S"," ","EXCLUSAO"
                       RUN comando3 RETURNING p_cancel
                       LET p_ies_situa_ar = NULL
                       CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_num_seq)
                       LET p_ies_situa_ar = p_aviso_rec.ies_situa_ar
                       IF p_ies_situa_ar <> "C" THEN
                          CALL log0030_mensagem(" Problemas na exclusao da contagem","exclamation")
                          RETURN
                       END IF
                       ERROR " Exclusao de contagem realizada com sucesso. "
                    END IF
                #END IF
             END IF

             WHENEVER ERROR CONTINUE
             LET l_cont = 0
             SELECT count(*)
               INTO l_cont
               FROM deb_fornec
              WHERE cod_empresa   = p_cod_empresa
                AND num_aviso_rec = p_dados_tela.num_aviso_rec
                AND num_seq       = p_num_seq
             WHENEVER ERROR STOP
             IF l_cont = 0 THEN
             ELSE CALL log0030_mensagem(" Existe deb_fornec - excluir registro no sup5960","exclamation")
                SLEEP 2
                LET p_houve_erro = TRUE
                RETURN
             END IF

             WHENEVER ERROR CONTINUE
             LET l_cont = 0
             SELECT count(*)
               INTO l_cont
               FROM dev_fornec
              WHERE cod_empresa   = p_cod_empresa
                AND num_aviso_rec = p_dados_tela.num_aviso_rec
                AND num_seq       = p_num_seq
             WHENEVER ERROR STOP
             IF l_cont = 0 THEN
             ELSE CALL log0030_mensagem(" Existe devolução a fornecedor - excluir registro no sup0460","exclamation")
                SLEEP 2
                LET p_houve_erro = TRUE
                RETURN
             END IF
############ OS 227034
             LET p_nr_nf = p_dados_tela.num_nf
             CALL sup376_deleta_inss_auton(p_nr_nf,p_num_seq)

             END IF
       ELSE LET p_houve_erro = TRUE
       END IF
    END FOREACH

    WHENEVER ERROR CONTINUE
    CALL log085_transacao("BEGIN")
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("BEGIN","TRANSACAO")
       RETURN
    END IF

    # INICIO OS 532222
    IF find4GLFunction('supy75_verifica_cliente_859') THEN
       IF supy75_verifica_cliente_859() THEN
          IF find4GLFunction('supy75_atualiza_wbt_nota_fiscal') THEN
             CALL supy75_atualiza_wbt_nota_fiscal(4,2,"",p_cod_empresa,p_dados_tela.num_aviso_rec)
          END IF
       END IF
    END IF
    # FIM OS 532222

    ## OS 518223 ##
    IF m_exst_rel_fre_indt THEN
       IF find4GLFunction('supy61_gera_mvto_comodato') THEN
          IF NOT supy61_gera_mvto_comodato(p_dados_tela.cod_empresa,
                                           p_dados_tela.num_aviso_rec,
                                           "C") THEN
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("ROLLBACK","TRANSACAO")
             END IF
             RETURN
          END IF
       END IF
    END IF
    ## OS 518223 ##

    IF p_houve_erro = FALSE THEN
       IF m_cred_st_fat = "S"
       OR m_cred_st_fat = "E" THEN
          IF NOT sup1466_valida_saldo_com_revd_st(p_cod_empresa,p_dados_tela.num_aviso_rec,0,"CANCELA") THEN
             LET p_houve_erro = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             RETURN
          END IF
       END IF

       IF (p_dados_tela.ies_especie_nf = "NFR"  OR
           p_dados_tela.ies_especie_nf = "NFE") AND ### OS 511148
          p_dados_tela.ies_nf_aguard_nfe = "X"  THEN
          CALL sup3760_exclui_nf_consig("NOTA",p_dados_tela.num_aviso_rec,0)
          IF p_houve_erro = TRUE THEN
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             RETURN
          END IF
       ELSE
          IF sup376_elimina_item_ret_terc(p_dados_tela.num_aviso_rec,0,"2") = FALSE THEN
             LET p_houve_erro = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             RETURN
          END IF
       END IF

       IF NOT fcl1150_integra_ar_fcx(p_cod_empresa,
                                     p_dados_tela.num_aviso_rec,"EX") THEN
          LET p_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          RETURN
       END IF

       IF NOT sup3760_cancela_nf_venda_ponto_a_ponto() OR p_houve_erro = TRUE THEN
          LET p_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          RETURN
       END IF

       ##Excluir o relacionamento dos fretes/CON ICMS ST com a NFE,
       ##para que se possa reprocessar a geração automática da NFE (SUP1265).
       IF p_dados_tela.ies_especie_nf = "NFE" THEN ##OS 337055
          WHENEVER ERROR CONTINUE
          DELETE FROM sup_par_ar
           WHERE empresa       = p_cod_empresa
             AND parametro     = "nfe_icms_st"
             AND parametro_val = p_dados_tela.num_aviso_rec
          WHENEVER ERROR STOP

          WHENEVER ERROR CONTINUE
          DELETE FROM sup_par_frete
           WHERE empresa       = p_cod_empresa
             AND parametro     = "nfe_icms_st"
             AND parametro_val = p_dados_tela.num_aviso_rec
          WHENEVER ERROR STOP
       END IF

       #--inicio--vanderlei OS 434072 #
       CALL sup3760_exclui_sup_par_ar(p_cod_empresa, p_dados_tela.num_aviso_rec, 'val_icms_devido')
       CALL sup3760_exclui_sup_par_ar(p_cod_empresa, p_dados_tela.num_aviso_rec, 'debito_icms_48meses')
       CALL sup3760_exclui_sup_par_ar(p_cod_empresa, p_dados_tela.num_aviso_rec, 'cred_pres_icms_it')
       CALL sup3760_exclui_sup_par_ar(p_cod_empresa, p_dados_tela.num_aviso_rec, 'cred_presum_limite')
       CALL sup3760_exclui_sup_par_ar(p_cod_empresa, p_dados_tela.num_aviso_rec, 'val_icms_recolher')
       #---fim----vanderlei OS 434072 #

       WHENEVER ERROR CONTINUE
       DELETE FROM reten_iss
        WHERE cod_empresa    = p_cod_empresa
          AND num_ad_nf_orig = p_dados_tela.num_nf
          AND ser_nf         = p_dados_tela.ser_nf
          AND ssr_nf         = p_dados_tela.ssr_nf
          AND ies_especie_nf = p_dados_tela.ies_especie_nf
          AND cod_fornecedor = p_dados_tela.cod_fornecedor
       WHENEVER ERROR STOP

       WHENEVER ERROR CONTINUE
       DELETE FROM reten_inss
        WHERE cod_empresa    = p_cod_empresa
          AND num_ad_nf_orig = p_dados_tela.num_nf
          AND ser_nf         = p_dados_tela.ser_nf
          AND ssr_nf         = p_dados_tela.ssr_nf
          AND ies_especie_nf = p_dados_tela.ies_especie_nf
          AND cod_fornecedor = p_dados_tela.cod_fornecedor
       WHENEVER ERROR STOP

       #eduardo o.s.335020
       WHENEVER ERROR CONTINUE
       DELETE FROM cap_sest_senat
        WHERE empresa           = p_cod_empresa
          AND ad_nf_origem      = p_dados_tela.num_nf
          AND serie_nota_fiscal = p_dados_tela.ser_nf
          AND subserie_nf       = p_dados_tela.ssr_nf
          AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
          AND fornecedor        = p_dados_tela.cod_fornecedor

       DELETE FROM cap_ret_inss_auton
        WHERE empresa           = p_cod_empresa
          AND ad_nf_origem      = p_dados_tela.num_nf
          AND serie_nota_fiscal = p_dados_tela.ser_nf
          AND subserie_nf       = p_dados_tela.ssr_nf
          AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
          AND fornecedor        = p_dados_tela.cod_fornecedor

       DELETE FROM cap_ret_inss_compl
        WHERE empresa           = p_cod_empresa
          AND ad_nf_origem      = p_dados_tela.num_nf
          AND serie_nota_fiscal = p_dados_tela.ser_nf
          AND subserie_nf       = p_dados_tela.ssr_nf
          AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
          AND fornecedor        = p_dados_tela.cod_fornecedor


       WHENEVER ERROR CONTINUE
         DELETE
           FROM sup_ar_imp_cana
          WHERE empresa         = p_cod_empresa
            AND aviso_recebto   = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DELETE","SUP_AR_IMP_CANA")
          RETURN
       END IF

       DELETE FROM cap_ret_proalminas
        WHERE empresa           = p_cod_empresa
          AND ad_nf_origem      = p_dados_tela.num_nf
          AND serie_nota_fiscal = p_dados_tela.ser_nf
          AND subserie_nf       = p_dados_tela.ssr_nf
          AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
          AND fornecedor        = p_dados_tela.cod_fornecedor

       DELETE FROM cap_iss_compl
        WHERE empresa           = p_cod_empresa
          AND ad_nota_fiscal    = p_dados_tela.num_nf
          AND serie_nota_fiscal = p_dados_tela.ser_nf
          AND subserie_nf       = p_dados_tela.ssr_nf
          AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
          AND fornecedor        = p_dados_tela.cod_fornecedor

       DELETE FROM cap_iss_eletronico
        WHERE empresa           = p_cod_empresa
          AND ad_nota_fiscal    = p_dados_tela.num_nf
          AND serie_nota_fiscal = p_dados_tela.ser_nf
          AND subserie_nf       = p_dados_tela.ssr_nf
          AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
          AND fornecedor        = p_dados_tela.cod_fornecedor
       WHENEVER ERROR STOP
       #Eduardo o.s.335020

        IF m_utiliza_dds_fortaleza = "S" THEN
          WHENEVER ERROR CONTINUE
          DELETE FROM cap_sistema_dds
          WHERE empresa           = p_cod_empresa
            AND ad_nota_fiscal    = p_dados_tela.num_nf
            AND serie_nota_fiscal = p_dados_tela.ser_nf
            AND subserie_nf       = p_dados_tela.ssr_nf
            AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
            AND fornecedor        = p_dados_tela.cod_fornecedor
          WHENEVER ERROR STOP
       END IF

       IF log0150_verifica_se_tabela_existe("sup_nf_devol_cli") THEN
          WHENEVER ERROR CONTINUE
          DELETE FROM sup_nf_devol_cli
           WHERE empresa       = p_cod_empresa
             AND aviso_recebto = p_dados_tela.num_aviso_rec
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("EXCLUSAO","SUP_NF_DEVOL_CLI")
             LET p_houve_erro = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             RETURN
          END IF
       END IF

       IF find4GLFunction('supy121_excluir_mov_comissoes_dev_clie') THEN
          IF NOT supy121_excluir_mov_comissoes_dev_clie(p_cod_empresa,
                                                     p_dados_tela.num_aviso_rec,
                                                     "CANCELAMENTO") THEN
             LET p_houve_erro = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             RETURN
          END IF
       END IF

       WHENEVER ERROR CONTINUE
       DELETE FROM sup_trib_benef_nf_devol_cli
        WHERE empresa       = p_cod_empresa
          AND aviso_recebto = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("(2)DELETE","SUP_TRIB_BENEF_NF_DEVOL_CLI")
          LET p_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
          END IF
          RETURN
       END IF

       WHENEVER ERROR CONTINUE
       DELETE FROM dev_mestre
        WHERE cod_empresa = p_cod_empresa
          AND num_nff     = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("EXCLUSAO","DEV_MESTRE")
          LET p_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          RETURN
       END IF

       IF m_exst_rel_fre_indt THEN
          WHENEVER ERROR CONTINUE
          DELETE FROM sup_relc_ftre_indt
           WHERE sup_relc_ftre_indt.empresa   = p_cod_empresa
             AND sup_relc_ftre_indt.aviso_recebto = p_dados_tela.num_aviso_rec
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("DELETE","SUP_RELC_FTRE_INDT")
             LET p_houve_erro = TRUE
             CALL log085_transacao("ROLLBACK")
             RETURN
          END IF
       END IF

       ##Se for integração ON-LINE poderá existir lançamentos contábeis para o documento,
       ##já que o indicador ies_incl_contab só passará para "S" quando for efetuado
       ##a integração contábil (geração do lote ou arquivo texto).
       IF NOT supr6_integracao_batch(p_cod_empresa) AND
          supr6_data_posterior_data_corte_logix_10(p_cod_empresa,
                                                   p_dados_tela.dat_entrada_nf) THEN

          IF NOT supr6_validacao_data_inicial_e_final_processamento(p_cod_empresa,
                                                                    p_dados_tela.dat_entrada_nf,
                                                                    p_dados_tela.dat_entrada_nf,
                                                                    "MANUAL",
                                                                    FALSE) THEN
             LET p_houve_erro = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("ROLLBACK TRANSACTION","CANCELA NF")
             END IF
             RETURN
          ELSE
             IF m_dat_entrada_ant IS NULL THEN
                LET l_dat_entrada_nf = p_dados_tela.dat_entrada_nf
             ELSE
                LET l_dat_entrada_nf = m_dat_entrada_ant
             END IF

             IF NOT supr6_exclui_lancamento_contabil_documento("MANUAL",
                                                               p_cod_empresa,
                                                               p_dados_tela.num_nf,
                                                               p_dados_tela.ser_nf,
                                                               p_dados_tela.ssr_nf,
                                                               p_dados_tela.ies_especie_nf,
                                                               p_dados_tela.cod_fornecedor,
                                                               p_dados_tela.num_aviso_rec,
                                                               l_dat_entrada_nf,
                                                               0,FALSE) THEN
                LET p_houve_erro = TRUE
                WHENEVER ERROR CONTINUE
                CALL log085_transacao("ROLLBACK")
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("ROLLBACK TRANSACTION","CANCELA NF")
                END IF
                RETURN
             END IF
          END IF
       END IF

       WHENEVER ERROR CONTINUE
       DELETE FROM dev_item
        WHERE cod_empresa = p_cod_empresa
          AND num_nff     = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("EXCLUSAO","DEV_ITEM")
          LET p_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          RETURN
       END IF

       IF log0150_verifica_se_tabela_existe("sup_cart_corr_aut") THEN # 523038
          WHENEVER ERROR CONTINUE
          DELETE FROM sup_cart_corr_aut
           WHERE empresa       = p_cod_empresa
             AND aviso_recebto = p_dados_tela.num_aviso_rec
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("DELETE","SUP_CART_CORR_AUT(4)")
          END IF
       END IF

       WHENEVER ERROR CONTINUE
       DELETE FROM reten_inss_rur
        WHERE cod_empresa    = p_cod_empresa
          AND num_ad_nf_orig = p_dados_tela.num_nf
          AND ser_nf         = p_dados_tela.ser_nf
          AND ssr_nf         = p_dados_tela.ssr_nf
          AND ies_especie_nf = p_dados_tela.ies_especie_nf
          AND cod_fornecedor = p_dados_tela.cod_fornecedor
       WHENEVER ERROR STOP

       IF p_dados_tela.ies_especie_nf = "NFM" THEN
          WHENEVER ERROR CONTINUE
          DELETE FROM nf_pend
           WHERE cod_empresa    = p_cod_empresa
             AND num_nf         = p_dados_tela.num_nf
             AND ser_nf         = p_dados_tela.ser_nf
             AND ssr_nf         = p_dados_tela.ssr_nf
             AND cod_fornecedor = p_dados_tela.cod_fornecedor
          WHENEVER ERROR STOP
       END IF
       ### OS482885 ###
       IF NOT sup1031_grava_audit_ar(p_dados_tela.num_aviso_rec, 0,
                                     'SUP3760', '6') THEN
          LET p_houve_erro = TRUE
          RETURN
       END IF
       ### OS482885 ###
       IF p_dados_tela.ies_especie_nf = "NFP" THEN
          DECLARE cq_ar_x_nf_pend2 CURSOR FOR
          SELECT *
            FROM ar_x_nf_pend
           WHERE cod_empresa   = p_cod_empresa
             AND num_aviso_rec = p_dados_tela.num_aviso_rec

          FOREACH cq_ar_x_nf_pend2 INTO lr_ar_x_nf_pend.*
             WHENEVER ERROR CONTINUE
             UPDATE nf_pend
                SET qtd_regularizada = qtd_regularizada -
                                       lr_ar_x_nf_pend.qtd_regularizada
              WHERE cod_empresa    = lr_ar_x_nf_pend.cod_empresa
                AND num_nf         = lr_ar_x_nf_pend.num_nf
                AND ser_nf         = lr_ar_x_nf_pend.ser_nf
                AND ssr_nf         = lr_ar_x_nf_pend.ssr_nf
                AND cod_fornecedor = lr_ar_x_nf_pend.cod_fornecedor
                AND cod_item       = lr_ar_x_nf_pend.cod_item
             WHENEVER ERROR STOP
          END FOREACH

          WHENEVER ERROR CONTINUE
          DELETE FROM ar_x_nf_pend
           WHERE cod_empresa    = p_cod_empresa
             AND num_aviso_rec  = p_dados_tela.num_aviso_rec
          WHENEVER ERROR STOP
       END IF

       ### OS 482885 / 511148 ###
       LET l_ies_nf_com_erro = "N"
       WHENEVER ERROR CONTINUE
        DECLARE cq_erro CURSOR WITH HOLD FOR
         SELECT des_pendencia_item
           FROM nf_sup_erro
          WHERE empresa        = p_dados_tela.cod_empresa
            AND num_aviso_rec  = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DECLARE","CQ_ERRO")
          LET p_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          RETURN
       END IF

       LET l_qtd_erros   = 0
       WHENEVER ERROR CONTINUE
        FOREACH cq_erro INTO  l_des_pendencia_item
           IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql("FOREACH","CQ_ERRO")
               LET p_houve_erro = TRUE
               WHENEVER ERROR CONTINUE
               CALL log085_transacao("ROLLBACK")
               WHENEVER ERROR STOP
               RETURN
           END IF

           IF l_des_pendencia_item = "Nota Devolucao Consig Vendas sem nota FATUR vendas relac" THEN
              WHENEVER ERROR CONTINUE
                DELETE FROM nf_sup_erro
                 WHERE empresa            = p_dados_tela.cod_empresa
                   AND num_aviso_rec      = p_dados_tela.num_aviso_rec
                   AND des_pendencia_item = "Nota Devolucao Consig Vendas sem nota FATUR vendas relac"
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql("DELETE","NF_SUP_ERRO")
                  LET p_houve_erro = TRUE
                  WHENEVER ERROR CONTINUE
                  CALL log085_transacao("ROLLBACK")
                  WHENEVER ERROR STOP
                  RETURN
              END IF
           ELSE
              LET l_qtd_erros = l_qtd_erros + 1
           END IF

          WHENEVER ERROR CONTINUE
        END FOREACH
        FREE cq_erro
       WHENEVER ERROR STOP

       IF l_qtd_erros >= 1 THEN
          LET l_ies_nf_com_erro = "S"
          LET l_usuario_aceite = p_user
       ELSE
          LET l_ies_nf_com_erro = "N"
          INITIALIZE l_usuario_aceite TO NULL
       END IF

       WHENEVER ERROR CONTINUE
       UPDATE nf_sup
          SET ies_incl_cap     = "S",
              ies_incl_contab  = "S"
        WHERE cod_empresa    = p_cod_empresa
          AND num_aviso_rec  = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF SQLCA.SQLCODE <> 0 THEN
          CALL log003_err_sql("MODIFICACAO","NF_SUP")
          LET p_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          RETURN
       END IF

       WHENEVER ERROR CONTINUE
       UPDATE aviso_rec_compl
          SET ies_situacao  = "C"
        WHERE cod_empresa   = p_dados_tela.cod_empresa
         AND num_aviso_rec = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 THEN
          IF ((p_dados_tela.cod_operacao[1] = "7" AND
             (p_dados_tela.ies_especie_nf = "NFE" OR
              p_dados_tela.ies_especie_nf = "NFP" )) OR m_nfr_import) AND
            ((m_ies_utiliz_provisao = "S" AND
              m_utiliz_nfm_import = "N" AND
              m_num_processo >= m_inicio_provisao) OR
              p_nf_sup.ies_situa_import = "R") THEN
             LET m_num_processo = sup3760_busca_numero_processo_importacao()
             IF m_num_processo IS NULL THEN
                LET m_num_processo = -1
             END IF
             IF m_num_processo <> -1 THEN
                IF m_num_processo >= g_proc_ini_os163407 THEN
                   IF NOT imp0101_desfaz_rateio(m_num_processo,p_dados_tela.num_aviso_rec,-1) THEN
                      ERROR "Problema ao desfazer o rateio das despesas de importacao"
                      SLEEP 2
                      LET p_houve_erro = TRUE
                      WHENEVER ERROR CONTINUE
                      CALL log085_transacao("ROLLBACK")
                      WHENEVER ERROR STOP
                      RETURN
                   END IF
                ELSE
                   IF NOT imp0101_desfaz_rateio_ant(m_num_processo,p_dados_tela.num_aviso_rec,-1) THEN
                      ERROR "Problema ao desfazer o rateio das despesas de importacao"
                      SLEEP 2
                      LET p_houve_erro = TRUE
                      WHENEVER ERROR CONTINUE
                      CALL log085_transacao("ROLLBACK")
                      WHENEVER ERROR STOP
                      RETURN
                   END IF
                END IF
             END IF
          END IF

          IF NOT sup3760_limpa_ar_despesa_compl_imp() THEN
              LET p_houve_erro = TRUE
              WHENEVER ERROR CONTINUE
              CALL log085_transacao("ROLLBACK")
              WHENEVER ERROR STOP
              RETURN
           END IF

           WHENEVER ERROR CONTINUE
           UPDATE aviso_rec
              SET ies_situa_ar = "E",
                  ies_liberacao_cont = "S",
                  ies_liberacao_insp = "S"
            WHERE cod_empresa   = p_dados_tela.cod_empresa
              AND num_aviso_rec = p_dados_tela.num_aviso_rec
           WHENEVER ERROR STOP
           IF sqlca.sqlcode = 0 THEN
              IF NOT sup3760_desfaz_relac_desp_proc() THEN
                 LET p_houve_erro = TRUE
                 WHENEVER ERROR CONTINUE
                 CALL log085_transacao("ROLLBACK")
                 WHENEVER ERROR STOP
                 RETURN
              END IF
              WHENEVER ERROR CONTINUE
              DELETE FROM aviso_rec_proc_imp
               WHERE cod_empresa   = p_cod_empresa
                 AND num_aviso_rec = p_dados_tela.num_aviso_rec
              WHENEVER ERROR STOP

              IF (p_dados_tela.cod_operacao[1] = "7" OR m_nfr_import) AND
                  #p_dados_tela.ies_especie_nf <> "NFM" AND
                 (p_par_sup_compl.ies_mod_importacao = "L" OR
                  p_par_sup_compl.ies_mod_importacao = "S") THEN
                 DECLARE cq_ar_proc_imp2 CURSOR FOR
                 SELECT num_aviso_rec
                   FROM aviso_rec_proc_imp
                  WHERE cod_empresa  = p_dados_tela.cod_empresa
                    AND num_processo = m_num_processo

                 INITIALIZE l_num_ar_imp TO NULL
                 OPEN cq_ar_proc_imp2
                 FETCH cq_ar_proc_imp2 INTO l_num_ar_imp
                 CLOSE cq_ar_proc_imp2

                 IF l_num_ar_imp IS NULL THEN
                    WHENEVER ERROR CONTINUE
                    UPDATE processo_imp
                       SET num_aviso_rec = NULL,
                           ies_situacao  = "4"
                     WHERE cod_empresa      = p_dados_tela.cod_empresa
                       AND num_aviso_rec    IS NOT NULL
                       AND num_aviso_rec    = p_dados_tela.num_aviso_rec
                       AND ies_versao_atual = "S"
                    WHENEVER ERROR STOP
                 ELSE
                    LET l_num_ar_proc = sup3760_leitura_processo_imp(m_num_processo,"AR")
                    IF l_num_ar_proc = p_dados_tela.num_aviso_rec THEN
                       WHENEVER ERROR CONTINUE
                       UPDATE processo_imp
                          SET num_aviso_rec = l_num_ar_imp
                        WHERE cod_empresa      = p_dados_tela.cod_empresa
                          AND num_processo     = m_num_processo
                          AND ies_versao_atual = "S"
                       WHENEVER ERROR STOP
                    END IF
                 END IF
              END IF

              IF p_houve_erro = FALSE THEN
                 #FLUXO DE CAIXA
                 CALL sup3760_atualizar_ordens_fluxo()
              END IF

              IF p_houve_erro = TRUE THEN
                 WHENEVER ERROR CONTINUE
                 CALL log085_transacao("ROLLBACK")
                 WHENEVER ERROR STOP
                 RETURN
              END IF

              WHENEVER ERROR CONTINUE
                  CALL log085_transacao("COMMIT")
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("COMMIT","TRANSACAO")
                 CALL log085_transacao("ROLLBACK") #OS596059
                 RETURN
              END IF

              MESSAGE "Cancelamento Efetuado com Sucesso." ATTRIBUTE(REVERSE)
              IF p_ies_canc_nc = TRUE
              THEN CALL sup376_cancela_nota_credito()
              END IF
              INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
              INITIALIZE p_formonly.* TO NULL
              CLEAR FORM
           ELSE
              CALL log003_err_sql("MODIFICAO","AVISO_REC_COMPL")
              ERROR "Cancelamento nao Efetuado..."
           END IF
      ELSE
         CALL log003_err_sql("MODIFICAO","AVISO_REC_COMPL")
         ERROR "Cancelamento nao Efetuado." ATTRIBUTE(REVERSE)
      END IF
    END IF
 END IF
 END FUNCTION

#-----------------------------------#
 FUNCTION sup376_cursor_for_update()
#-----------------------------------#
 WHENEVER ERROR CONTINUE
 DECLARE cm_aviso_rec CURSOR FOR
  SELECT * INTO p_aviso_rec.* FROM aviso_rec
   WHERE aviso_rec.cod_empresa   = p_cod_empresa
     AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
 FOR UPDATE
 CALL log085_transacao("BEGIN")
 OPEN cm_aviso_rec
 FETCH cm_aviso_rec
 CASE sqlca.sqlcode
    WHEN    0 RETURN TRUE
    WHEN -250 CALL log0030_mensagem(" Registro sendo atualizado por outro usuario.\n Aguarde e tente novamente.","stop")
    WHEN  100 CALL log0030_mensagem(" Registro nao mais existe na tabela. \n Execute a CONSULTA novamente.","stop")
    OTHERWISE       CALL log003_err_sql("LEITURA","AVISO_REC")
 END CASE
 WHENEVER ERROR STOP
 CALL log085_transacao("ROLLBACK")
 RETURN FALSE
 END FUNCTION

#----------------------------------------#
 FUNCTION sup376_modificacao_aviso_rec()
#----------------------------------------#
 DEFINE p_par_forn        CHAR(01),
        l_val_tot_receb   LIKE aviso_rec.val_liquido_item,
        l_data            LIKE pedido_sup.dat_emis,
        #l_atualiza_gao    SMALLINT,
        l_ies_tip_frete   LIKE modo_embarque.ies_tip_frete, #OS477406
        l_pergunta        CHAR(01),
        l_is_clie_319     SMALLINT,
        l_compex          SMALLINT,
        l_campo_alt       CHAR(01), ##OS 587470
        l_nf_transito_imp SMALLINT

 ## 407088
 DEFINE l_cod_fornecedor  LIKE nf_sup.cod_fornecedor

 IF find4GLFunction('supy121_valida_alteracao_dev_clie') THEN
    IF NOT supy121_valida_alteracao_dev_clie(p_cod_empresa,
                                             p_dados_tela.num_aviso_rec,
                                             0,
                                             "MODIF") THEN
       RETURN TRUE
    END IF
 END IF
 LET m_nf_eletronica_impr = FALSE  #595717

 #O.S. 564238
 IF m_utiliza_nf_eletronica = 'S' THEN
    LET l_nf_transito_imp = FALSE
    IF find4GLFunction("supy117_consiste_nota_fiscal_transito") THEN
       IF supy117_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                                p_nf_sup.ies_especie_nf) THEN
          LET l_nf_transito_imp = TRUE
       END IF
    END IF

    IF l_nf_transito_imp = FALSE AND
       sup3760_consiste_nota_fiscal_transito(p_nf_sup.ies_nf_aguard_nfe,
                                             p_nf_sup.cod_operacao) = FALSE THEN

       CALL obf3760_verifica_sup_nf_eletronica(p_nf_sup.cod_empresa,
                                               p_nf_sup.num_aviso_rec,
                                             "EXCLUIR")  RETURNING p_status, m_msg
       IF p_status THEN
          LET m_msg = "Esta nota fiscal foi enviada para a Sefaz e não poderá ser modificada."
          CALL log0030_mensagem(m_msg,"excl")
          RETURN
       END IF
    ELSE
      CALL obf3760_verifica_sup_nf_eletronica(p_nf_sup.cod_empresa,
                                             p_nf_sup.num_aviso_rec,
                                             "EXCLUIR") RETURNING p_status, m_msg
      IF p_status THEN
         LET m_nf_eletronica_impr = TRUE
      END IF
    END IF
 END IF
 #O.S. 564238

 LET g_ies_transf_benef = FALSE

 LET int_flag = 0
 LET p_houve_erro = 0
 FOR p_ind5 = 1 TO 999
     IF p_array_it_prg_entr[p_ind5,1].num_prog_entrega IS NULL THEN
        EXIT FOR
     ELSE
        FOR p_ind8 = 1 TO 50
            IF p_array_it_prg_entr[p_ind5, p_ind8].num_prog_entrega IS NULL THEN
               EXIT FOR
            ELSE
               INITIALIZE p_array_it_prg_entr[p_ind5,p_ind8].* TO NULL
            END IF
        END FOR
     END IF
 END FOR

 LET m_executou_sup3771 = FALSE
 INITIALIZE mr_dados_tela_ant.* TO NULL
 IF sup376_cursor_for_update() THEN
    LET m_dat_entrada_ant =  p_dados_tela.dat_entrada_nf
    LET p_dados_telar.* = p_dados_tela.*
    LET p_formonlyr.* = p_formonly.*
    LET m_grava_sup0964  = FALSE
    LET m_nf_aguard_nfe_ant = p_dados_tela.ies_nf_aguard_nfe
    LET m_cod_operacao_ant = p_dados_tela.cod_operacao
    IF sup3760_entrada_dados("MODIFICACAO") THEN
       ##Não deve colocar log085_transacao antes deste IF, pois o SUP0047 inicia transação
       #534641
          IF p_dados_tela.ies_especie_nf = "NFR" AND
             p_dados_tela.ies_nf_aguard_nfe = "A" THEN
             CALL sup3760_informa_nf_cobraca()
             CURRENT WINDOW IS w_sup37601
          END IF
       #534641

       IF m_executou_sup3771 THEN
          IF m_visualizar_notas_em_transito = "S" THEN #OS477406
             CALL sup376_inclui_frete()
          END IF

          #### OS 240477 - efetua rateio antes caso empresa trabalhe com custo medio diario
          #### (contagem automatica) para considerar o valor do frete no custeio do material
          IF p_par_estoque.ies_custo_medio = "D" THEN
             CALL sup0047_rateio_frete()
          END IF
          IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                            m_consiste_nf_integr) THEN

             LET l_pergunta = "I"
             IF sup3760_nota_integrada_gecex(p_cod_empresa,
                                             p_dados_tela.num_aviso_rec) THEN   #OS. 419996 - KORDSA
                LET l_pergunta = "N"
             END IF


             #A09248
             #IF m_cons_modific = "S" THEN
             #   CALL sup376_processa_consistencia(l_pergunta)
             #ELSE
             #   IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
             #   END IF
             #END IF

             CALL sup0047_rateio_frete()
          END IF
          #RETURN   #para modificar quando for <> o tipo da nota #A09248
       END IF

       IF p_houve_erro <> 1 THEN
       MESSAGE " Aguarde ... Efetuando Modificacao da Nota Fiscal ... " ATTRIBUTE(REVERSE)
       END IF

       CALL log085_transacao("BEGIN")

       # INICIO OS 532222
       IF find4GLFunction('supy75_verifica_cliente_859') THEN
          IF supy75_verifica_cliente_859() THEN
             IF p_dados_tela.ies_nf_aguard_nfe = "1" THEN
                IF find4GLFunction('supy75_atualiza_wbt_nota_fiscal') THEN
                   CALL supy75_atualiza_wbt_nota_fiscal(5,2,"",p_cod_empresa,p_dados_tela.num_aviso_rec)
                END IF
             END IF
          END IF
       END IF
       # FIM OS 532222

       IF  m_nf_aguard_nfe_ant = "7" AND p_dados_tela.ies_nf_aguard_nfe = "6" OR
          (p_dados_tela.ies_especie_nf = "NFE" AND p_dados_tela.ies_nf_aguard_nfe = "X") THEN
          IF NOT sup3760_insere_nfe_sup_compl() THEN
             LET p_houve_erro = TRUE
          END IF
       END IF

       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#

       IF m_wms_instal = "S"        AND
          m_segmto_utilizacao = "O" THEN

          IF m_tipo_documento_old = "P" THEN
             IF m_tipo_documento  = "D" OR
                m_tipo_documento  = "N" THEN
                IF sup3760_existe_ar_depos() THEN
                   WHENEVER ERROR CONTINUE
                   DELETE FROM ar_depos
                    WHERE cod_empresa   = p_cod_empresa
                      AND num_aviso_rec = p_nf_sup.num_aviso_rec
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("EXCLUSAO","AR_DEPOS - WMS")
                       LET p_houve_erro = TRUE
                   END IF
                END IF
             END IF
          ELSE
             IF m_tipo_documento_old = "D" OR
                m_tipo_documento_old = "N" THEN
                IF m_tipo_documento  = "P" THEN
                   WHENEVER ERROR CONTINUE
                     DELETE FROM ar_depos
                      WHERE cod_empresa     = p_cod_empresa
                        AND num_aviso_rec   = p_nf_sup.num_aviso_rec
                        AND cod_depositante = p_dados_tela.cod_fornecedor
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("DELETE","AR_DEPOS - WMS")
                      LET p_houve_erro = TRUE
                   END IF

                   WHENEVER ERROR CONTINUE
                   INSERT INTO ar_depos (cod_empresa,
                                         num_aviso_rec,
                                         cod_depositante)
                                 VALUES (p_cod_empresa,
                                         p_nf_sup.num_aviso_rec,
                                         p_dados_tela.cod_fornecedor)
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("INCLUSAO","AR_DEPOS - WMS")
                      LET p_houve_erro = TRUE
                   END IF
                END IF
             END IF
          END IF

          # OS 547161
          IF p_houve_erro = FALSE THEN
             IF m_tipo_documento_old = "D" THEN
                IF m_tipo_documento = "D" THEN
                   WHENEVER ERROR CONTINUE
                   UPDATE sup_par_ar
                      SET par_ind_especial = m_utiliz_regulariz_fiscal
                    WHERE empresa          = p_cod_empresa
                      AND aviso_recebto    = p_nf_sup.num_aviso_rec
                      AND parametro        = 'nf_regular_fiscal'
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("UPDATE","SUP_PAR_AR")
                      LET p_houve_erro = TRUE
                   END IF
                ELSE
                   IF m_tipo_documento = "P" THEN
                      WHENEVER ERROR CONTINUE
                      DELETE FROM sup_par_ar
                       WHERE empresa       = p_cod_empresa
                         AND aviso_recebto = p_nf_sup.num_aviso_rec
                         AND parametro     = 'nf_regular_fiscal'
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode <> 0 THEN
                         CALL log003_err_sql("EXCLUSÃO","SUP_PAR_AR")
                         LET p_houve_erro = TRUE
                      END IF
                   END IF
                END IF
             ELSE
                IF m_tipo_documento_old = "P" AND
                   m_tipo_documento     = "D" THEN
                   IF NOT sup3760_insere_nf_regular_fiscal() THEN
                      LET p_houve_erro = TRUE
                   END IF
                END IF
             END IF
          END IF

       END IF

       #--------------------------#

###### OS 205898
       IF p_dados_tela.ies_especie_nf = "NFM" THEN
          WHENEVER ERROR CONTINUE
          DELETE FROM nf_pend
           WHERE cod_empresa    = p_cod_empresa
             AND num_nf         = p_dados_tela.num_nf
             AND ser_nf         = p_dados_tela.ser_nf
             AND ssr_nf         = p_dados_tela.ssr_nf
             AND cod_fornecedor = p_dados_tela.cod_fornecedor
          WHENEVER ERROR STOP
       END IF

       IF NOT fcl1150_integra_ar_fcx(p_cod_empresa,
                                     p_dados_tela.num_aviso_rec,"EX") THEN
          LET p_houve_erro = TRUE
       END IF

       FOR p_ind = 1 TO 999
           IF p_array[p_ind].cod_item IS NOT NULL AND
              p_array[p_ind].qtd_declarad_nf IS NOT NULL THEN
              CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array[p_ind].seq)
              CALL sup376_move_campos_ar()

              ### OS457685 ###
              IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                           p_cod_empresa,
                                           p_dados_tela.num_aviso_rec) AND
                 p_ind >1 THEN
                 EXIT FOR
              END IF
              ### OS457685 ###

              IF p_dados_tela.ies_nf_aguard_nfe = "4" OR
                 p_dados_tela.ies_nf_aguard_nfe = "T" OR
                 p_dados_tela.ies_nf_aguard_nfe = "B" OR
                (p_parametros = "6" AND
                 p_dados_tela.ies_nf_aguard_nfe = "A") THEN
             ## OS 407088
                 CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_array[p_ind].seq) RETURNING l_cod_fornecedor

                 IF NOT sup3760_verifica_item_de_terc(p_dados_tela.num_nf,
                                                      p_dados_tela.ser_nf,
                                                      p_dados_tela.ssr_nf,
                                                      l_cod_fornecedor,
                                                      p_dados_tela.ies_especie_nf,
                                                      p_array[p_ind].seq) THEN
                    IF  p_dados_tela.ies_especie_nf    = "NFR"
                    AND p_dados_tela.ies_nf_aguard_nfe = "B"
                    AND m_contr_terc_no_dep            = "N" THEN
                    ELSE
                       IF find4GLFunction('supy160_cliente_318')THEN
                          IF p_dados_tela.ies_nf_aguard_nfe <> "A" THEN
                             IF sup376_gera_item_d_terc() = FALSE THEN
                             LET p_houve_erro = TRUE
                             END IF
                          END IF
                       ELSE
                           IF sup376_gera_item_d_terc() = FALSE THEN
                              LET p_houve_erro = TRUE
                           END IF
                       END IF
                    END IF
                 ELSE
                    IF NOT sup3760_atualiza_item_de_terc(p_array[p_ind].val_liquido_item,
                                                         p_array[p_ind].cod_cla_fisc_nf,
                                                         p_array[p_ind].den_item,
                                                         p_array[p_ind].cod_unid_med_nf,
                                                         p_dados_tela.dat_emis_nf,
                                                         p_dados_tela.dat_entrada_nf,
                                                         p_dados_tela.num_nf,
                                                         p_dados_tela.ser_nf,
                                                         p_dados_tela.ssr_nf,
                                                         l_cod_fornecedor,
                                                         p_dados_tela.ies_especie_nf,
                                                         p_array[p_ind].seq, 1) THEN
                       LET p_houve_erro = TRUE
                    END IF
                 END IF
              END IF
              IF p_aviso_rec.num_oc > 0 THEN
                 INITIALIZE p_ordem_sup.* TO NULL
                 CALL sup3762_busca_ordem_sup(p_aviso_rec.cod_empresa,
                                             p_aviso_rec.num_oc)
              END IF

              #LET l_atualiza_gao = FALSE   #789788 - Espindola
              #                             #a contagem é quem deve atualizar o GAO
              #IF p_aviso_rec.ies_liberacao_cont = "S" THEN
              #   IF m_orcamento_periodo = "S" AND
              #      p_dados_tela.dat_entrada_nf <> p_dados_telar.dat_entrada_nf THEN
              #      LET l_atualiza_gao = TRUE
              #   END IF
              #
              #   IF m_usa_cond_pagto = "S" AND
              #     (p_dados_tela.cnd_pgto_nf <> p_dados_telar.cnd_pgto_nf OR
              #      p_dados_tela.dat_emis_nf <> p_dados_telar.dat_emis_nf OR
              #      p_dados_tela.dat_entrada_nf <> p_dados_telar.dat_entrada_nf) THEN
              #      LET l_atualiza_gao = TRUE
              #   END IF
              #
              #   IF m_controla_gao = "S" AND m_alterou_preco THEN
              #      LET l_atualiza_gao = TRUE
              #   END IF
              #ELSE
              #   LET l_atualiza_gao = TRUE
              #END IF
              #
              #IF l_atualiza_gao AND
              #   sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
              #                             p_cod_empresa,
              #                             p_dados_tela.num_aviso_rec) = FALSE THEN
              #   LET l_val_tot_receb = ((p_aviso_rec.qtd_recebida - p_aviso_rec.qtd_devolvid) * p_aviso_rec.pre_unit_nf)
              #
              #   CALL sup360_busca_data_emissao_pedido_compra() RETURNING l_data
              #
              #   CALL sup0772_verifica_saldo_contas_nf_abat_parcial(p_cod_empresa,
              #                                                      p_dados_tela.num_aviso_rec,
              #                                                      p_array[p_ind].seq,
              #                                                      l_val_tot_receb,
              #                                                      l_data,
              #                                                      "AR",
              #                                                      "SUP3760",
              #                                                       0)
              #      RETURNING p_status, p_msg
              #   IF p_status = FALSE THEN
              #      LET p_houve_erro = TRUE
              #   END IF
              #END IF

              IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = TRUE THEN
                 IF sup376_verifica_ar_item_contagem() = FALSE THEN
                    DELETE FROM ar_ped
                     WHERE ar_ped.cod_empresa   = p_cod_empresa
                       AND ar_ped.num_aviso_rec = p_dados_tela.num_aviso_rec
                       AND ar_ped.num_seq       = p_array[p_ind].seq
                    IF p_array[p_ind].qtd_declarad_nf IS NOT NULL AND
                       p_array_compl[p_ind].ar_com_pc = "S"      THEN

                       LET p_val_array = p_array[p_ind].val_liquido_item

                       IF p_dados_tela.ies_especie_nf <> "NFD" AND
                          p_dados_tela.ies_especie_nf <> "NFR" THEN
                          CALL sup861_popup_ordens_val_reserv(p_cod_empresa,
                               p_array[p_ind].cod_item, p_array_compl[p_ind].num_pedido,
                               p_array_compl[p_ind].num_oc, p_array_compl[p_ind].num_prog_entrega,
                               p_val_array, "N", "MODIFICACAO",
                               p_dados_tela.num_aviso_rec, p_array[p_ind].seq, p_ind)
                               RETURNING p_val_soma_reserva2, p_ies_reservou, p_ord_forn
                               LET p_val_array = 0
                               LET int_flag = 0
                               CURRENT WINDOW IS w_sup37601
                       END IF
                    END IF
                    CALL sup376_inclui_ar_ped()
                 END IF
              ELSE
                 IF p_array_compl[p_ind].ies_bloqueada = "N" THEN
                    IF p_array_it_prg_entr[p_ind,1].num_prog_entrega IS NULL OR
                       p_array_it_prg_entr[p_ind,1].num_prog_entrega = " " THEN
                    ELSE
                       IF sup376_verifica_ar_item_contagem() = FALSE THEN
                          DELETE FROM ar_ped
                           WHERE ar_ped.cod_empresa   = p_cod_empresa
                             AND ar_ped.num_aviso_rec = p_dados_tela.num_aviso_rec
                             AND ar_ped.num_seq       = p_array[p_ind].seq
                          CALL sup376_inclui_ar_ped()
                       END IF
                    END IF
                 END IF
              END IF
              IF p_array_compl[p_ind].alterou_val_liquido IS NOT NULL AND
                 p_array_compl[p_ind].alterou_val_liquido = TRUE THEN
                 UPDATE aviso_rec
                    SET aviso_rec.den_item          = p_aviso_rec.den_item,
                        aviso_rec.cod_unid_med_nf   = p_aviso_rec.cod_unid_med_nf,
                        aviso_rec.cod_cla_fisc_nf   = p_aviso_rec.cod_cla_fisc_nf,
                        aviso_rec.pre_unit_nf       = p_aviso_rec.pre_unit_nf,
                        aviso_rec.qtd_declarad_nf   = p_aviso_rec.qtd_declarad_nf,
                        aviso_rec.val_liquido_item  = p_aviso_rec.val_liquido_item,
                        aviso_rec.ies_receb_fiscal  = "S",
                        aviso_rec.val_base_c_item_d = 0,
                        aviso_rec.pct_ipi_declarad  = p_aviso_rec.pct_ipi_declarad,
                        val_base_c_ipi_it           = p_aviso_rec.val_base_c_ipi_it
                  WHERE aviso_rec.cod_empresa = p_cod_empresa
                    AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
                    AND aviso_rec.num_seq     = p_aviso_rec.num_seq
                 IF sqlca.sqlcode <> 0 THEN
                    CALL log003_err_sql("UPDATE","AVISO_REC")
                    LET p_houve_erro = TRUE
                 END IF

                 IF NOT sup1031_grava_audit_ar(p_aviso_rec.num_aviso_rec,
                                               p_aviso_rec.num_seq,
                                               "SUP3760","4") THEN
                    LET p_houve_erro = TRUE
                 END IF
              ELSE
                 UPDATE aviso_rec
                    SET aviso_rec.den_item         = p_aviso_rec.den_item,
                        aviso_rec.cod_unid_med_nf  = p_aviso_rec.cod_unid_med_nf,
                        aviso_rec.cod_cla_fisc_nf  = p_aviso_rec.cod_cla_fisc_nf,
                        aviso_rec.pre_unit_nf      = p_aviso_rec.pre_unit_nf,
                        aviso_rec.qtd_declarad_nf  = p_aviso_rec.qtd_declarad_nf,
                        aviso_rec.val_liquido_item = p_aviso_rec.val_liquido_item,
                        aviso_rec.ies_receb_fiscal = "S",
                        aviso_rec.pct_ipi_declarad = p_aviso_rec.pct_ipi_declarad
                  WHERE aviso_rec.cod_empresa = p_cod_empresa
                    AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
                    AND aviso_rec.num_seq     = p_aviso_rec.num_seq
                 IF sqlca.sqlcode <> 0 THEN
                    CALL log003_err_sql("(1)UPDATE","AVISO_REC")
                    LET p_houve_erro = TRUE
                 END IF

                 IF NOT sup1031_grava_audit_ar(p_aviso_rec.num_aviso_rec,
                                               p_aviso_rec.num_seq,
                                               "SUP3760","4") THEN
                    LET p_houve_erro = TRUE
                 END IF
              END IF

              ## OS 152.698
              IF m_tipo_nf = "7" THEN
                 IF m_tipo_nf  <> p_dados_tela.ies_nf_aguard_nfe AND
                    m_data_ent <> p_dados_tela.dat_entrada_nf THEN
                    UPDATE aviso_rec
                       SET aviso_rec.dat_inclusao_seq = p_dados_tela.dat_entrada_nf
                     WHERE aviso_rec.cod_empresa   = p_cod_empresa
                       AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
                       AND aviso_rec.num_seq       = p_aviso_rec.num_seq

                    IF sqlca.sqlcode <> 0 THEN
                       CALL log003_err_sql("(2)UPDATE","AVISO_REC")
                       LET p_houve_erro = TRUE
                    END IF
                 END IF
              END IF
              ## Fim OS 152.698

############# 205898
              IF p_dados_tela.ies_especie_nf = "NFM" AND
                 p_array[p_ind].cod_item IS NOT NULL AND
                 p_array[p_ind].cod_item <> " "  THEN
                 WHENEVER ERROR CONTINUE
                 INSERT INTO nf_pend VALUES (p_cod_empresa, p_dados_tela.num_nf,
                                      p_dados_tela.ser_nf, p_dados_tela.ssr_nf,
                                      p_dados_tela.cod_fornecedor,
                                      p_array[p_ind].cod_item,
                                      p_aviso_rec.qtd_declarad_nf, 0, NULL,
                                      TODAY)
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode = -239 OR
                    sqlca.sqlcode = -268 THEN
                    UPDATE nf_pend
                       SET qtd_recebida = qtd_recebida + p_aviso_rec.qtd_declarad_nf
                     WHERE cod_empresa    = p_cod_empresa
                       AND num_nf         = p_dados_tela.num_nf
                       AND ser_nf         = p_dados_tela.ser_nf
                       AND ssr_nf         = p_dados_tela.ssr_nf
                       AND cod_fornecedor = p_dados_tela.cod_fornecedor
                       AND cod_item       = p_array[p_ind].cod_item
                    IF sqlca.sqlcode <> 0 THEN
                       CALL log003_err_sql("UPDATE","NF_PEND")
                       LET p_houve_erro = TRUE
                    END IF
                 END IF
              END IF
              IF p_nfe_import = TRUE THEN
                 INITIALIZE p_ar_proc_imp.* TO NULL
                 SELECT *
                   INTO p_ar_proc_imp.*
                   FROM aviso_rec_proc_imp
                  WHERE cod_empresa    = p_cod_empresa
                    AND num_aviso_rec  = p_dados_tela.num_aviso_rec
                    AND num_seq        = p_aviso_rec.num_seq
                 IF sqlca.sqlcode = 0 THEN
                    UPDATE aviso_rec
                       SET qtd_declarad_nf = p_ar_proc_imp.quantidade
                     WHERE cod_empresa    = p_cod_empresa
                       AND num_aviso_rec  = p_dados_tela.num_aviso_rec
                       AND num_seq        = p_aviso_rec.num_seq
                    IF sqlca.sqlcode <> 0 THEN
                       CALL log003_err_sql("(3)UPDATE","AVISO_REC")
                       LET p_houve_erro = TRUE
                    END IF
                 END IF
              END IF
              IF g_ies_transf_benef = TRUE AND
                 p_oper_ent_ind_g <> p_dados_tela.cod_operac_estoq AND
                 p_cod_oper_ent_ind = p_dados_tela.cod_operac_estoq THEN
                 IF sup376_gera_item_d_terc() = FALSE THEN
                    LET p_houve_erro = TRUE
                 END IF
              ELSE
                 IF g_ies_transf_benef = TRUE AND
                   (g_ies_retorno_ind = TRUE OR
                    g_ret_sem_ind = true) THEN
                    IF sup376_elimina_item_ret_terc(p_dados_tela.num_aviso_rec,
                                                    p_array[p_ind].seq,"1") = FALSE THEN
                       LET p_houve_erro = TRUE
                    END IF
                    IF sup3760_gera_item_ret_terc() = FALSE THEN
                       LET p_houve_erro = TRUE
                    END IF
                 END IF
              END IF
           ELSE
              EXIT FOR
           END IF
       END FOR
       IF g_ies_transf_benef = TRUE THEN
       ELSE
          IF p_ies_cod_operac IS NULL OR
            p_ies_cod_operac = "N" OR
            p_ies_cod_operac = " " THEN
            LET p_dados_tela.cod_operac_estoq = " "
          END IF
       END IF

       IF p_dados_tela.cod_operacao[1] = "5" THEN
          LET p_cod_fiscal_c = "1.",p_dados_tela.cod_operacao[3,5]
       END IF
       IF p_dados_tela.cod_operacao[1] = "6" THEN
          LET p_cod_fiscal_c = "2.",p_dados_tela.cod_operacao[3,5]
       END IF
       IF p_dados_tela.cod_operacao[1] = "7" THEN
          LET p_cod_fiscal_c = "3.",p_dados_tela.cod_operacao[3,5]
       END IF

       IF g_ies_transf_benef = TRUE THEN
       ELSE
          IF p_ies_cod_operac IS NULL OR
             p_ies_cod_operac = "N" OR
             p_ies_cod_operac = " " THEN
             LET p_dados_tela.cod_operac_estoq = p_dados_telar.cod_operac_estoq
          END IF
       END IF

       IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              p_dados_tela.num_nf,
                                              p_dados_tela.ser_nf,
                                              p_dados_tela.ssr_nf,
                                              p_dados_tela.cod_fornecedor,
                                              p_dados_tela.cod_operacao,
                                              p_dados_tela.cod_fiscal_compl) = TRUE AND
          p_dados_tela.cod_operacao[1,1] <> "3" THEN
          IF p_dados_tela.cod_operac_estoq IS NULL OR
             p_dados_tela.cod_operac_estoq = " " THEN
             LET p_dados_tela.cod_operac_estoq = p_oper_trans_unid
          END IF
       END IF

       ##O.S 186311
       IF p_dados_tela.ies_nf_aguard_nfe = "P" THEN
          IF p_dados_tela.cod_operac_estoq IS NULL OR
             p_dados_tela.cod_operac_estoq = " " THEN
             LET p_dados_tela.cod_operac_estoq = g_operac_permuta
          END IF
       END IF

       UPDATE aviso_rec_compl
          SET cod_operacao     = p_dados_tela.cod_operac_estoq,
              cod_fiscal_compl = p_dados_tela.cod_fiscal_compl
        WHERE aviso_rec_compl.cod_empresa = p_cod_empresa
          AND aviso_rec_compl.num_aviso_rec = p_dados_tela.num_aviso_rec
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("UPDATE","AVISO_REC_COMPL")
          LET p_houve_erro = TRUE
       END IF

       UPDATE aviso_rec_compl_sq
          SET cod_fiscal_compl                 = p_dados_tela.cod_fiscal_compl
        WHERE aviso_rec_compl_sq.cod_empresa   = p_cod_empresa
          AND aviso_rec_compl_sq.num_aviso_rec = p_dados_tela.num_aviso_rec
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("UPDATE","AVISO_REC_COMPL_SQ")
          LET p_houve_erro = TRUE
       END IF

       CURRENT WINDOW IS w_sup37601
       IF p_houve_erro = FALSE THEN
          IF p_dados_tela.ies_especie_nf = "NFS"
          OR p_dados_tela.ies_especie_nf = "REC"
          OR p_dados_tela.ies_especie_nf = "DOC" THEN
             LET p_nf_sup.cod_regist_entrada = p_par_sup.cod_regist_entrada
             #778903 - Inicio
             IF m_reg_entr_doc_rec <> 0 AND
               (p_dados_tela.ies_especie_nf = "REC" OR p_dados_tela.ies_especie_nf = "DOC") THEN
                LET p_nf_sup.cod_regist_entrada = m_reg_entr_doc_rec
             END IF
             #778903 - Fim
          ELSE
             LET p_nf_sup.cod_regist_entrada = 01
          END IF
          IF (p_par_sup_compl.ies_mod_importacao = "S" OR
              p_par_sup_compl.ies_mod_importacao = "L") THEN
              IF p_dados_tela.cod_operacao[1] = "7" THEN
                 IF p_cod_pais_emp <> p_fornecedor.cod_pais AND
                   (p_nf_sup.ies_especie_nf = "NFE" OR
                    p_nf_sup.ies_especie_nf = "NFP") THEN
                   LET p_aviso_rec_compl.ies_incl_import = "N"
                 ELSE
                    IF p_cod_pais_emp <> p_fornecedor.cod_pais AND
                       p_dados_tela.ies_especie_nf = "NFM" THEN
                       LET p_aviso_rec_compl.ies_incl_import = "N"
                    END IF
                 END IF
              ELSE
                 IF m_nfr_import THEN
                    LET p_aviso_rec_compl.ies_incl_import = "N"
                 END IF
              END IF
          END IF
          IF p_dados_telar.cnd_pgto_nf <> p_dados_tela.cnd_pgto_nf THEN
             CALL sup376_busca_cond_pgto_cap(p_dados_telar.cnd_pgto_nf)
             LET p_ies_pagamento1 = p_cond_pgto_cap.ies_pagamento
             CALL sup376_busca_cond_pgto_cap(p_dados_tela.cnd_pgto_nf)
             LET p_ies_pagamento2 = p_cond_pgto_cap.ies_pagamento
             IF (p_ies_pagamento1 = "1" OR
                 p_ies_pagamento1 = "3") AND
                 p_ies_pagamento2  = "2" THEN
                 LET p_nf_sup.ies_incl_cap = "N"
             END IF
          END IF
          CALL sup376_verifica_mod_embar() RETURNING p_status
          IF p_ies_imp_renda = "N" THEN
             UPDATE nf_sup
                SET nf_sup.ser_nf             = p_dados_tela.ser_nf, #OS477406
                    nf_sup.ssr_nf             = p_dados_tela.ssr_nf, #OS477406
                    nf_sup.ies_especie_nf     = p_dados_tela.ies_especie_nf, #OS477406
                    nf_sup.cod_empresa_estab  = p_dados_tela.cod_empresa_estab,
                    nf_sup.dat_emis_nf        = p_dados_tela.dat_emis_nf,
                    nf_sup.dat_entrada_nf     = p_dados_tela.dat_entrada_nf,
                    nf_sup.cnd_pgto_nf        = p_dados_tela.cnd_pgto_nf,
                    nf_sup.cod_mod_embar      = p_dados_tela.cod_mod_embar,
                    nf_sup.ies_incl_cap       = p_nf_sup.ies_incl_cap,
                    nf_sup.cod_operacao       = p_dados_tela.cod_operacao,
                    nf_sup.val_ipi_nf         = p_dados_tela_f.val_ipi_nf,
                    nf_sup.val_tot_icms_nf_d  = p_dados_tela_f.val_tot_icms_nf_d,
                    nf_sup.val_tot_nf_d       = p_dados_tela_f.val_tot_nf_d,
                    nf_sup.ies_tip_frete      = p_nf_sup.ies_tip_frete,
                    nf_sup.ies_nf_aguard_nfe  = p_dados_tela.ies_nf_aguard_nfe,
                    nf_sup.cod_regist_entrada = p_nf_sup.cod_regist_entrada,
                    nf_sup.cod_imp_renda      = p_cod_ret_imp,
                    nf_sup.val_imp_renda      = 0,
                    nf_sup.val_bc_imp_renda   = 0
              WHERE nf_sup.cod_empresa = p_cod_empresa
                AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec
                #A09248
                #AND nf_sup.num_nf         = p_dados_tela.num_nf #809554
                #AND nf_sup.ser_nf         = mr_dados_tela_ant.ser_nf #p_dados_tela.ser_nf
                #AND nf_sup.ssr_nf         = mr_dados_tela_ant.ssr_nf #p_dados_tela.ssr_nf
                #AND nf_sup.ies_especie_nf = mr_dados_tela_ant.ies_especie_nf #p_dados_tela.ies_especie_nf
                #AND nf_sup.cod_fornecedor = p_dados_tela.cod_fornecedor
          ELSE
             UPDATE nf_sup
                SET nf_sup.ser_nf             = p_dados_tela.ser_nf, #OS477406
                    nf_sup.ssr_nf             = p_dados_tela.ssr_nf, #OS477406
                    nf_sup.ies_especie_nf     = p_dados_tela.ies_especie_nf, #OS477406
                    nf_sup.cod_empresa_estab  = p_dados_tela.cod_empresa_estab,
                    nf_sup.dat_emis_nf        = p_dados_tela.dat_emis_nf,
                    nf_sup.dat_entrada_nf     = p_dados_tela.dat_entrada_nf,
                    nf_sup.cnd_pgto_nf        = p_dados_tela.cnd_pgto_nf,
                    nf_sup.cod_mod_embar      = p_dados_tela.cod_mod_embar,
                    nf_sup.ies_incl_cap       = p_nf_sup.ies_incl_cap,
                    nf_sup.cod_operacao       = p_dados_tela.cod_operacao,
                    nf_sup.val_ipi_nf         = p_dados_tela_f.val_ipi_nf,
                    nf_sup.val_tot_icms_nf_d  = p_dados_tela_f.val_tot_icms_nf_d,
                    nf_sup.val_tot_nf_d       = p_dados_tela_f.val_tot_nf_d,
                    nf_sup.ies_tip_frete      = p_nf_sup.ies_tip_frete,
                    nf_sup.ies_nf_aguard_nfe  = p_dados_tela.ies_nf_aguard_nfe,
                    nf_sup.cod_regist_entrada = p_nf_sup.cod_regist_entrada,
                    nf_sup.cod_imp_renda      = p_cod_ret_imp
              WHERE nf_sup.cod_empresa = p_cod_empresa
                AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec
                #A09248
                #AND nf_sup.num_nf         = p_dados_tela.num_nf  #809554
                #AND nf_sup.ser_nf         = mr_dados_tela_ant.ser_nf #p_dados_tela.ser_nf
                #AND nf_sup.ssr_nf         = mr_dados_tela_ant.ssr_nf #p_dados_tela.ssr_nf
                #AND nf_sup.ies_especie_nf = mr_dados_tela_ant.ies_especie_nf #p_dados_tela.ies_especie_nf
                #AND nf_sup.cod_fornecedor = p_dados_tela.cod_fornecedor
          END IF
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("MODIFICACAO","NF_SUP")
             LET p_houve_erro = TRUE
          END IF

          #--inicio--OS 587470 #
          IF m_nf_aguard_nfe_ant = "7" THEN
             LET l_campo_alt = NULL

             IF mr_dados_tela_ant.num_nf <> p_dados_tela.num_nf         AND
                mr_dados_tela_ant.ser_nf <> p_dados_tela.ser_nf         AND
                mr_dados_tela_ant.ssr_nf <> p_dados_tela.ssr_nf         AND
                mr_dados_tela_ant.ies_especie_nf <> p_dados_tela.ies_especie_nf THEN
                LET l_campo_alt = '5'
             ELSE
                IF mr_dados_tela_ant.num_nf <> p_dados_tela.num_nf AND
                   mr_dados_tela_ant.ser_nf <> p_dados_tela.ser_nf AND
                   mr_dados_tela_ant.ssr_nf <> p_dados_tela.ssr_nf THEN
                   LET l_campo_alt = '0'
                ELSE
                   IF mr_dados_tela_ant.ser_nf <> p_dados_tela.ser_nf AND
                      mr_dados_tela_ant.ssr_nf <> p_dados_tela.ssr_nf AND
                      mr_dados_tela_ant.ies_especie_nf <> p_dados_tela.ies_especie_nf THEN
                      LET l_campo_alt = '6'
                   ELSE
                      IF mr_dados_tela_ant.ser_nf <> p_dados_tela.ser_nf AND
                         mr_dados_tela_ant.ssr_nf <> p_dados_tela.ssr_nf THEN
                         LET l_campo_alt = '7'
                      ELSE
                         IF mr_dados_tela_ant.ser_nf <> p_dados_tela.ser_nf AND
                            mr_dados_tela_ant.ies_especie_nf <> p_dados_tela.ies_especie_nf THEN
                            LET l_campo_alt = '8'
                         ELSE
                            IF mr_dados_tela_ant.ssr_nf <> p_dados_tela.ssr_nf  AND
                               mr_dados_tela_ant.ies_especie_nf <> p_dados_tela.ies_especie_nf THEN
                               LET l_campo_alt = '9'
                            ELSE
                               IF mr_dados_tela_ant.num_nf <> p_dados_tela.num_nf  THEN
                                  LET l_campo_alt = '1'
                               ELSE
                                  IF mr_dados_tela_ant.ser_nf <> p_dados_tela.ser_nf  THEN
                                     LET l_campo_alt = '2'
                                  ELSE
                                     LET l_campo_alt = NULL
                                  END IF
                               END IF
                            END IF
                         END IF
                      END IF
                   END IF
                END IF
             END IF

             IF l_campo_alt IS NULL THEN
                IF mr_dados_tela_ant.ssr_nf <> p_dados_tela.ssr_nf  THEN
                   LET l_campo_alt = '3'
                ELSE
                   IF mr_dados_tela_ant.ies_especie_nf <> p_dados_tela.ies_especie_nf  THEN
                      LET l_campo_alt = '4'
                   ELSE
                      LET l_campo_alt = NULL
                   END IF
                END IF
             END IF


            IF l_campo_alt IS NOT NULL THEN
               IF sup1182_atualiza_cabecalho_nf_tabelas_compl(p_dados_tela.cod_empresa,
                                                              p_dados_tela.num_nf,
                                                              p_dados_tela.ser_nf,
                                                              p_dados_tela.ssr_nf,
                                                              p_dados_tela.ies_especie_nf,
                                                              p_dados_tela.cod_fornecedor,
                                                              mr_dados_tela_ant.num_nf,
                                                              mr_dados_tela_ant.ser_nf,
                                                              mr_dados_tela_ant.ssr_nf,
                                                              mr_dados_tela_ant.ies_especie_nf,
                                                              l_campo_alt,
                                                              p_dados_tela.ies_nf_aguard_nfe)  = FALSE  THEN

                  LET p_houve_erro = TRUE
               END  IF
            END IF
          END IF
          #---fim----OS 587470 #

          #--# 796313 - Espindola - Projeto Totvs Colaboracao #--#
          #--# Repasse de alteracao caso houve modificacao nas chaves em questoes
          IF m_utiliz_totvs_colab = "S" THEN
             IF NOT sup13429_repassa_alteracao_monitor(p_dados_tela.cod_empresa,     p_dados_tela.num_nf,
                                                       p_dados_tela.ser_nf,          p_dados_tela.ssr_nf,
                                                       p_dados_tela.cod_fornecedor,  p_dados_tela.dat_emis_nf,
                                                       p_dados_telar.cod_empresa,    p_dados_telar.num_nf,
                                                       p_dados_telar.ser_nf,         p_dados_telar.ssr_nf,
                                                       p_dados_telar.cod_fornecedor, p_dados_telar.dat_emis_nf) THEN
                LET p_houve_erro = TRUE
             END IF

             #--#Atualiza monitor de integracao (caso existir documento)
             IF NOT sup13429_integra_erp_monitor(p_dados_tela.cod_empresa,     p_dados_tela.num_nf,
                                                 p_dados_tela.ser_nf,          p_dados_tela.ssr_nf,
                                                 p_dados_tela.cod_fornecedor,  p_dados_tela.dat_emis_nf,
                                                 "MODIFICACAO") THEN
                LET p_houve_erro = TRUE
             END IF
          END IF
          IF NOT p_houve_erro THEN
             LET p_nf_sup.val_tot_nf_d       = p_dados_tela_f.val_tot_nf_d
             LET p_nf_sup.cod_empresa_estab  = p_dados_tela.cod_empresa_estab
             LET p_nf_sup.dat_emis_nf        = p_dados_tela.dat_emis_nf
             LET p_nf_sup.dat_entrada_nf     = p_dados_tela.dat_entrada_nf
             LET p_nf_sup.cnd_pgto_nf        = p_dados_tela.cnd_pgto_nf
             LET p_nf_sup.cod_mod_embar      = p_dados_tela.cod_mod_embar
             LET p_nf_sup.cod_operacao       = p_dados_tela.cod_operacao
             LET p_nf_sup.val_ipi_nf         = p_dados_tela_f.val_ipi_nf
             LET p_nf_sup.val_tot_icms_nf_d  = p_dados_tela_f.val_tot_icms_nf_d
             LET p_nf_sup.val_tot_nf_d       = p_dados_tela_f.val_tot_nf_d
             LET p_nf_sup.ies_nf_aguard_nfe  = p_dados_tela.ies_nf_aguard_nfe
             LET p_nf_sup.cod_imp_renda      = p_cod_ret_imp
             IF p_dados_tela.ies_impostos = "S" THEN #OS360335
                CALL cap544_manutencao_impostos("sup3760","MODIFICACAO")
                IF int_flag = 1 THEN
                   LET p_houve_erro = TRUE
                END IF
             END IF
          END IF

          IF p_houve_erro = FALSE THEN
             #FLUXO DE CAIXA
             IF NOT fcl1150_integra_ar_fcx(p_cod_empresa,
                                           p_dados_tela.num_aviso_rec,"IN") THEN
                LET p_houve_erro = TRUE
             END IF
          END IF

          #IF p_houve_erro = FALSE THEN    #789788 - Espindola
          #                                #a contagem é quem deve atualizar o GAO
          #   LET l_atualiza_gao = FALSE
          #
          #   IF p_aviso_rec.ies_liberacao_cont = "S" THEN
          #      IF m_orcamento_periodo = "S" AND
          #         p_dados_tela.dat_entrada_nf <> p_dados_telar.dat_entrada_nf THEN
          #         LET l_atualiza_gao = TRUE
          #      END IF
          #
          #      IF m_usa_cond_pagto = "S" AND
          #        (p_dados_tela.cnd_pgto_nf <> p_dados_telar.cnd_pgto_nf OR
          #         p_dados_tela.dat_emis_nf <> p_dados_telar.dat_emis_nf OR
          #         p_dados_tela.dat_entrada_nf <> p_dados_telar.dat_entrada_nf) THEN
          #         LET l_atualiza_gao = TRUE
          #      END IF
          #
          #      IF m_controla_gao = "S" AND m_alterou_preco THEN
          #         LET l_atualiza_gao = TRUE
          #      END IF
          #   ELSE
          #      LET l_atualiza_gao = TRUE
          #   END IF
          #
          #   IF l_atualiza_gao AND
          #      sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
          #                                p_cod_empresa,
          #                                p_dados_tela.num_aviso_rec) = FALSE THEN
          #      FOR p_ind = 1 TO 999
          #         IF p_array[p_ind].cod_item IS NOT NULL AND
          #            p_array[p_ind].qtd_declarad_nf IS NOT NULL THEN
          #
          #            CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array[p_ind].seq)
          #
          #            LET l_val_tot_receb = ((p_aviso_rec.qtd_recebida - p_aviso_rec.qtd_devolvid) * p_aviso_rec.pre_unit_nf)
          #
          #            CALL sup360_busca_data_emissao_pedido_compra() RETURNING l_data
          #
          #            CALL sup0772_verifica_saldo_contas_nf_inclui_parcial(p_cod_empresa,
          #                                                                 p_aviso_rec.num_aviso_rec,
          #                                                                 p_array[p_ind].seq,
          #                                                                 l_val_tot_receb,
          #                                                                 l_data,
          #                                                                 'AR',
          #                                                                 "SUP3760",
          #                                                                 0)
          #               RETURNING p_status, p_msg
          #            IF p_status = FALSE THEN
          #               LET p_houve_erro = TRUE
          #            END IF
          #         END IF
          #      END FOR
          #   END IF
          #END IF

          #--inicio--OS 502143 #
          LET l_is_clie_319 = FALSE
          IF find4GLFunction('supy101_cliente_319') THEN
             LET l_is_clie_319 = supy101_cliente_319()
          END IF

          IF l_is_clie_319 = TRUE          AND
             (p_dados_tela.cod_operacao = '5.601'  OR
             p_dados_tela.cod_operacao = '6.601')  AND
              m_cod_item_cred_transf_icms = p_array[1].cod_item THEN


              IF find4GLFunction('supy101_insert_sup_par_ar') THEN
                 IF supy101_insert_sup_par_ar(p_cod_empresa,
                                              p_dados_tela.num_aviso_rec,
                                              ' ',
                                              p_dados_tela_f.val_tot_nf_d,
                                              p_aviso_rec.num_seq,
                                              p_dados_tela.cod_fornecedor,
                                              'MODIFICACAO',
                                              m_serie_branca) = FALSE  THEN

                   ERROR " Modificação Cancelada. "
                   LET p_houve_erro = TRUE
                 END IF
              END IF
          END IF
          #---fim----OS 502143 #

          CURRENT WINDOW IS w_sup37601
          IF p_houve_erro = FALSE THEN
             WHENEVER ERROR CONTINUE
                 CALL log085_transacao("COMMIT")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("EFETIVACAO","NF_SUP")
                CALL log085_transacao("ROLLBACK") #OS596059
                LET p_houve_erro = TRUE
             ELSE
                IF sup3760_informa_peso() = TRUE THEN
                   IF m_peso_nf IS NOT NULL AND
                      m_peso_nf <> " " THEN
                      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
                      DISPLAY "Peso NF: ", m_peso_nf ," "       AT 21,02 ATTRIBUTE(REVERSE)
                   ELSE
                      DISPLAY "                          "  AT 21,02
                   END IF
                ELSE
                   INITIALIZE m_peso_nf TO NULL
                   DISPLAY "                           "  AT 21,02
                END IF
                #785677
                IF m_nf_aguard_nfe_ant = 7 AND p_dados_tela.ies_nf_aguard_nfe = "6" THEN
                   IF sup3760_verifica_nf_cap() THEN
                      CALL log120_procura_caminho("sup5240") RETURNING comando3
                      LET comando3 = comando3 CLIPPED," ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
                      RUN comando3 RETURNING p_cancel
                   END IF
                END IF
                MESSAGE " Modificacao efetuada com sucesso. " ATTRIBUTE(REVERSE)

                CALL sup376_manut_item_terc()

                LET p_par_forn = NULL
                CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor,
                                                        "",
                                                        p_dados_tela.dat_emis_nf,
                                                        p_dados_tela.num_aviso_rec) RETURNING p_par_forn

                IF p_dados_tela.ies_especie_nf = "NFR" AND
                   p_par_forn = "3"  THEN
                ELSE
                   IF ((p_ies_tip_entrada = "6" OR
                       p_ies_tip_entrada = "4") OR
                      (sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                           p_dados_tela.num_aviso_rec,
                                                           p_dados_tela.num_nf,
                                                           p_dados_tela.ser_nf,
                                                           p_dados_tela.ssr_nf,
                                                           p_dados_tela.cod_fornecedor,
                                                           p_dados_tela.cod_operacao,
                                                           p_dados_tela.cod_fiscal_compl) = FALSE AND
                      p_ies_tip_entrada = "2")) AND
                     (m_wms_instal = "N"      OR
                     (m_wms_instal = "S"      AND
                      p_dados_tela.ies_nf_aguard_nfe <> "A"   AND
                      p_dados_tela.ies_nf_aguard_nfe <> "B")) THEN
                      IF p_dados_tela.ies_nf_aguard_nfe <> "T" AND
                         #INICIO OS.472270
                         (p_mot_remes_terc IS NULL OR
                         p_mot_remes_terc = " " OR
                         m_ies_msg_contr_terc = 'S') THEN
                         #FIM O.S. 472270
                         IF p_dados_tela.ies_nf_aguard_nfe <> "4" AND
                            p_dados_tela.ies_nf_aguard_nfe <> "5" THEN
                            IF  p_dados_tela.ies_nf_aguard_nfe = "A"
                            #OR   p_dados_tela.ies_nf_aguard_nfe = "B")
                            AND sup3760_existe_cadastro_triangulacao()
                            AND p_dados_tela.ies_especie_nf = "NFR" THEN
                               CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_array[1].seq) RETURNING l_cod_fornecedor
                               CALL log120_procura_caminho("sup2270") RETURNING comando3
                               LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                                                    p_dados_tela.ser_nf," ",
                                                                    p_dados_tela.ssr_nf," ",
                                                                    p_dados_tela.ies_especie_nf," ",
                                                                    l_cod_fornecedor," ",
                                                                    "@"," ","@"," ","@"," ",
                                                                    p_cod_empresa
                               RUN comando3 RETURNING p_cancel
                            ELSE
                               ERROR "Controlar Material de TERCEIROS ??? " ATTRIBUTE (REVERSE)
                               IF log004_confirm(21,43) THEN
                                  ERROR "Material da EMPRESA ??? " ATTRIBUTE (REVERSE)
                                  IF p_dados_tela.ser_nf = " " OR
                                     p_dados_tela.ser_nf IS NULL THEN
                                        LET p_dados_tela.ser_nf = "@"
                                  END IF
                                  IF log004_confirm(21,43) THEN
                                     #-- OS 562700 inicio --#
                                     IF m_ies_nf_remessa_x_especie <> 0 THEN
                                        IF (m_ies_nf_remessa_x_especie = 1
                                            AND p_dados_tela.ies_especie_nf = "NFR")
                                        OR (m_ies_nf_remessa_x_especie = 2
                                            AND p_dados_tela.ies_especie_nf = "NFE")
                                        OR (m_ies_nf_remessa_x_especie = 3
                                            AND (p_dados_tela.ies_especie_nf = "NFE"
                                                 OR p_dados_tela.ies_especie_nf = "NFR") ) THEN
                                           CALL sup3760_controla_nf_remessa_retorno()
                                        END IF
                                     ELSE
                                     #-- OS 562700 fim --#
                                        CALL log120_procura_caminho("sup2290") RETURNING comando3
                                        LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                                                             p_dados_tela.ser_nf," ",
                                                                             p_dados_tela.ssr_nf," ",
                                                                             p_dados_tela.ies_especie_nf," ",
                                                                             p_dados_tela.cod_fornecedor," ",
                                                                             "@"," ",p_cod_empresa
                                        RUN comando3 RETURNING p_cancel
                                     END IF
                                  ELSE
                                  ## OS 407088
                                     CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_array[1].seq) RETURNING l_cod_fornecedor
                                     CALL log120_procura_caminho("sup2270") RETURNING comando3
                                     LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                                                          p_dados_tela.ser_nf," ",
                                                                          p_dados_tela.ssr_nf," ",
                                                                          p_dados_tela.ies_especie_nf," ",
                                                                          l_cod_fornecedor," ",
                                                                          "@"," ","@"," ","@"," ",
                                                                          p_cod_empresa
                                     RUN comando3 RETURNING p_cancel
                                  END IF
                                  IF p_dados_tela.ser_nf = "@" THEN
                                     LET p_dados_tela.ser_nf = " "
                                  END IF
                                   #-- OS 562700 fim --#
                               END IF
                            END IF
                         END IF #OS. 472270
                      END IF
                   END IF
                END IF
             END IF
          ELSE
             ERROR " Modificacao Cancelada. "
             CALL log085_transacao("ROLLBACK")
          END IF

          CASE p_dados_tela_f.ies_desc_acres
            WHEN "T"
                CALL log120_procura_caminho("sup2490") RETURNING comando3
                LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
                RUN comando3 RETURNING p_cancel
                CALL log006_exibe_teclas("01", p_versao)
                CURRENT WINDOW IS w_sup37601
                LET p_cod_empresa_arg = p_cod_empresa
                LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
                CALL sup376_busca_argumen()
            WHEN "I"
                CALL log120_procura_caminho("sup9010") RETURNING comando3
                LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
                RUN comando3 RETURNING p_cancel
                CALL log006_exibe_teclas("01", p_versao)
                CURRENT WINDOW IS w_sup37601
                LET p_cod_empresa_arg = p_cod_empresa
                LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
                CALL sup376_busca_argumen()
            #WHEN "S"
            #    CALL log120_procura_caminho("sup9010") RETURNING comando3
            #    LET comando3 = comando3 CLIPPED, " ", p_dados_tela.num_aviso_rec, " ", p_cod_empresa
            #    RUN comando3 RETURNING p_cancel
            #    CALL log006_exibe_teclas("01", p_versao)
            #    CURRENT WINDOW IS w_sup37601
            #    LET p_cod_empresa_arg = p_cod_empresa
            #    LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
            #    CALL sup376_busca_argumen()
          END CASE
          #OS544582
          IF sup3766_processa_movtos_estoque(p_cod_empresa,
                                             p_dados_tela.num_aviso_rec,
                                             p_aviso_rec.num_seq,
                                             p_aviso_rec.cod_item) = FALSE THEN
             ERROR "Problemas na inclusão dos controles de grade/dimensional. "
             LET p_houve_erro = TRUE
          END IF
          #FIM OS544582

          ##Não precisa verificar se houve erro, pois pode ser realizado a consistência
          ##da nota fiscal mesmo assim.
          #IF p_houve_erro = FALSE THEN
             IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                               m_consiste_nf_integr) THEN
                IF m_cons_modific = "S" THEN
                   CALL sup376_processa_consistencia("S")
                ELSE
                   IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
                   END IF
                END IF

                CALL sup0047_rateio_frete()
             END IF
          #END IF

          IF m_altera_nfm_7_para_6_aut = 'S' AND
             p_dados_tela.ies_especie_nf = 'NFP' THEN
             CALL sup3760_verifica_nfm_total()
          END IF
          #ler parâmetro e verificar se a quantidade da NFM foi totalmente atendida

       ELSE
          #CALL log003_err_sql("MODIFICACAO","AVISO_REC")
          ERROR " Modificacao Cancelada. "
          CALL log085_transacao("ROLLBACK")
       END IF
    ELSE
       CLEAR FORM
       ERROR " Modificacao Cancelada. "
       CALL log085_transacao("ROLLBACK")
       #LET p_cod_empresa_arg = p_cod_empresa
       #LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
       #CALL sup376_busca_argumen()
       IF m_grava_sup0964 = TRUE THEN
          WHENEVER ERROR CONTINUE
          INSERT INTO sup_libr_nf_vencd VALUES (p_cod_empresa,
                                                p_dados_tela.num_nf,
                                                p_dados_tela.ser_nf,
                                                p_dados_tela.ssr_nf,
                                                p_dados_tela.ies_especie_nf,
                                                p_dados_tela.cod_fornecedor,
                                                p_dados_tela.dat_entrada_nf,
                                                p_user,
                                                " ",
                                                " ",
                                                NULL)
       END IF
       INITIALIZE p_array TO NULL
       INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
       INITIALIZE p_formonly.* TO NULL
       LET p_dados_tela.* = p_dados_telar.*
       LET p_formonly.* = p_formonlyr.*
       CALL sup376_consulta_dados()
       CALL sup376_exibe_dados()
       CALL sup376_exibe_array()
    END IF
    CLOSE cm_aviso_rec
    FREE cm_aviso_rec  #745465#
 END IF
 END FUNCTION

#-----------------------------#
 FUNCTION sup376_deleta_seq()
#-----------------------------#
 DEFINE p_nr_nf               CHAR(7),
        l_cont                SMALLINT,
        l_qtd_recebida        LIKE nf_pend.qtd_recebida,
        lr_ar_x_nf_pend       RECORD LIKE ar_x_nf_pend.*,
        l_prog_contagem       LIKE par_sup_pad.par_txt,
        l_nf_remessa          LIKE sup_retn_item_terc.nf_remessa,
        l_seq_nf_remessa      LIKE sup_retn_item_terc.seq_nf_remessa,
        l_seq_tabulacao       LIKE sup_retn_item_terc.seq_tabulacao,
        l_qtd_devolvida       LIKE sup_retn_item_terc.qtd_devolvida,
        l_dat_entrada_nf      DATE

## 407088
 DEFINE l_cod_fornecedor      LIKE nf_sup.cod_fornecedor

 LET m_solicitou_mp   = FALSE
 LET m_solicitou_ciap = FALSE
 LET m_confirmou_mp   = TRUE
 LET m_confirmou_ciap = TRUE

 DECLARE cq_num_seqs3 CURSOR FOR
 SELECT num_seq, num_pedido, num_oc
  FROM aviso_rec
 WHERE cod_empresa   = p_cod_empresa
   AND num_aviso_rec = p_dados_tela.num_aviso_rec
   AND num_seq       = p_num_seq
   AND num_pedido    > 0
 ORDER BY num_oc

 LET m_count_seq = 1
 INITIALIZE ma_inf_ar TO NULL
 FOREACH cq_num_seqs3 INTO ma_inf_ar[m_count_seq].num_seq,
                           ma_inf_ar[m_count_seq].num_pedido,
                           ma_inf_ar[m_count_seq].num_oc
    LET m_count_seq = m_count_seq + 1
    IF m_count_seq > 999 THEN
       CALL log0030_mensagem("Estouro de array","stop")
       EXIT FOREACH
    END IF
 END FOREACH
 IF m_count_seq > 999 THEN
    LET p_houve_erro = TRUE
    RETURN
 END IF
 LET m_count_seq = m_count_seq - 1

 CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_num_seq)
 IF sqlca.sqlcode <> 0 THEN
    LET p_houve_erro = TRUE
    RETURN
 END IF

 IF sup376_verifica_cond_delecao("EXCLUIR") = TRUE THEN
    IF ((p_dados_tela.cod_operacao[1] = "7" AND
       (p_dados_tela.ies_especie_nf = "NFE" OR
        p_dados_tela.ies_especie_nf = "NFP" )) OR m_nfr_import) AND
      ((m_ies_utiliz_provisao = "S" AND
        m_utiliz_nfm_import = "N" AND
        m_num_processo >= m_inicio_provisao) OR
        p_nf_sup.ies_situa_import = "R") THEN
       LET m_num_processo = sup3760_busca_numero_processo_importacao()
       IF m_num_processo IS NULL THEN
          LET m_num_processo = -1
       END IF
       IF m_num_processo <> -1 THEN
          IF m_num_processo >= g_proc_ini_os163407 THEN
             IF NOT imp0101_desfaz_rateio(m_num_processo,p_dados_tela.num_aviso_rec,p_num_seq) THEN
                ERROR "Problema ao desfazer o rateio das despesas de importacao"
                SLEEP 2
                LET p_houve_erro = TRUE
                RETURN
             END IF
          ELSE
             IF NOT imp0101_desfaz_rateio_ant(m_num_processo,p_dados_tela.num_aviso_rec,p_num_seq) THEN
                ERROR "Problema ao desfazer o rateio das despesas de importacao"
                SLEEP 2
                LET p_houve_erro = TRUE
                RETURN
             END IF
          END IF
       END IF
    END IF

    WHENEVER ERROR CONTINUE
    SELECT * INTO p_ar_ped.*
      FROM ar_ped
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq
    WHENEVER ERROR STOP

    IF p_dados_tela.ies_nf_aguard_nfe <> "7" THEN
       #IF (p_aviso_rec.ies_item_estoq = "N" AND    *** Rafael - OS314473
        #  (p_par_sup_compl.ies_conta_ok_n_est = "2" OR
         # (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
          # p_dados_tela.ies_especie_nf = "NFS"))) OR
           #p_aviso_rec.ies_item_estoq = "S" THEN
           IF sup376_possui_avf_insp_ar() = FALSE THEN
              IF p_aviso_rec.ies_liberacao_insp = "S" AND
                 p_aviso_rec.ies_situa_ar = "E" THEN
                 ### OS237529 ###
                 INITIALIZE l_prog_contagem TO NULL
                 SELECT par_txt
                   INTO l_prog_contagem
                   FROM par_sup_pad
                  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
                    AND par_sup_pad.cod_parametro = "prog_contagem"
                 IF sqlca.sqlcode <> 0 OR
                    l_prog_contagem IS NULL THEN
                    LET l_prog_contagem = " "
                 END IF

                 IF l_prog_contagem = "sup0799" THEN
                    CALL log0030_mensagem(" Exclua primeiramente resultado de contagem - SUP0799 ","exclamation")
                    LET p_houve_erro = TRUE
                    RETURN
                 END IF

                 ERROR " Aguarde ... Excluindo Inspecao ... "
                 CALL log120_procura_caminho("sup0570") RETURNING comando3
                 LET comando3 = comando3 CLIPPED, " ",  p_cod_empresa, " ",
                                                  p_aviso_rec.num_aviso_rec,  " ",
                                                  p_num_seq, " ",
                                                  "EXCLUSAO"," ",
                                                  "SUP3760"
                 RUN comando3 RETURNING p_cancel
                 LET p_ies_situa_ar = NULL
                 CALL sup376_busca_aviso_rec(p_cod_empresa, p_aviso_rec.num_aviso_rec, p_num_seq)
                 LET p_ies_situa_ar = p_aviso_rec.ies_situa_ar

                 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                              p_cod_empresa,
                                              p_aviso_rec.num_aviso_rec) = FALSE THEN
                    IF p_aviso_rec.ies_item_estoq = "S" THEN
                       CALL sup0063_verifica_controles(1, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles
                    ELSE
                       CALL sup0063_verifica_controles(11, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles
                    END IF
                 END IF

                 IF p_ies_custo_grade = "S" AND
                    m_controles <> " "     THEN
                    ## Quando a empresa utiliza custo por grade, a contagem
                    ## eh excluida ja quando faz a exclusao da inspecao.
                    IF p_ies_situa_ar <> "C" THEN
                       CALL log0030_mensagem(" Problemas na exclusao da inspecao. ","exclamation")
                       LET p_houve_erro = TRUE
                       RETURN
                    END IF
                 ELSE
                    IF p_ies_situa_ar <> "I" THEN
                       CALL log0030_mensagem(" Problemas na exclusao da inspecao. ","exclamation")
                       LET p_houve_erro = TRUE
                       RETURN
                    END IF
                 END IF
                 ERROR " Exclusao de inspecao realizada com sucesso. "
              END IF
           ELSE
              IF p_aviso_rec.ies_item_estoq = "S" THEN
                 IF avf1003_exclusao_qualidade(p_aviso_rec.num_aviso_rec,
                                               p_num_seq) = FALSE THEN
                    LET p_houve_erro = TRUE
                    CALL log0030_mensagem(" Problemas na exclusao da inspecao (AVF). ","exclamation")
                    RETURN
                 END IF
              END IF
           END IF

           #CALL sup376_verifica_cont_insp_automat(p_aviso_rec.cod_item, m_cont_insp_especial)
           #     RETURNING p_ies_item_cont_aut, p_ies_item_insp_aut
           #IF p_ies_item_insp_aut = "S" OR
           #   (p_ies_item_insp_aut = "N" AND
           #    p_aviso_rec.ies_situa_ar <> "E") THEN

           IF p_aviso_rec.ies_liberacao_cont = "S" THEN
              ERROR " Aguarde ... Excluindo contagem ... "

              CALL sup3760_atualiza_nota(p_cod_empresa, p_dados_tela.num_nf, p_dados_tela.ser_nf,
                                         p_dados_tela.ssr_nf, p_dados_tela.cod_fornecedor,
                                         p_dados_tela.num_aviso_rec, p_dados_tela.cnd_pgto_nf)

              CALL log120_procura_caminho("sup0530") RETURNING comando3
              LET comando3 = comando3 CLIPPED, " ",  p_cod_empresa, " ",
                                            p_dados_tela.num_aviso_rec," ",
                                            p_num_seq, " ",
                                            3760," ",
                                            "S"," ","EXCLUSAO"
              RUN comando3 RETURNING p_cancel
              LET p_ies_situa_ar = NULL
              CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_num_seq)
              LET p_ies_situa_ar = p_aviso_rec.ies_situa_ar
              IF p_ies_situa_ar <> "C" THEN
                 CALL log0030_mensagem(" Problemas na exclusao da contagem. ","exclamation")
                 SLEEP 2
                 RETURN
              END IF
              ERROR " Exclusao de contagem realizada com sucesso. "
           END IF
       #END IF
    END IF

    #IF sup376_possui_avf_insp_ar() THEN
    #
    #   IF p_aviso_rec.ies_item_estoq = "S" THEN
    #      IF avf1003_exclusao_qualidade(p_aviso_rec.num_aviso_rec,
    #                                    p_aviso_rec.num_seq) = FALSE THEN
    #         LET p_houve_erro = TRUE
    #         CALL log0030_mensagem(" Problemas na exclusao da inspecao (AVF). ","exclamation")
    #         RETURN
    #      END IF
    #   END IF
    #
    #   CALL sup376_busca_aviso_rec(p_cod_empresa, p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq)
    #   IF p_aviso_rec.ies_liberacao_cont = "S" THEN
    #      ERROR " Aguarde ... Excluindo contagem ... "
    #      CALL log120_procura_caminho("sup0530") RETURNING comando3
    #      LET comando3 = comando3 CLIPPED, " ",  p_cod_empresa, " ",
    #                                       p_aviso_rec.num_aviso_rec," ",
    #                                       p_aviso_rec.num_seq, " ",
    #                                       3760," ",
    #                                       "S"," ","EXCLUSAO"
    #      RUN comando3 RETURNING p_cancel
    #      LET p_ies_situa_ar = NULL
    #      CALL sup376_busca_aviso_rec(p_cod_empresa, p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq)
    #      LET p_ies_situa_ar = p_aviso_rec.ies_situa_ar
    #      IF p_ies_situa_ar <> "C" THEN
    #         CALL log0030_mensagem(" Problemas na exclusao da contagem. ","exclamation")
    #         LET p_houve_erro = TRUE
    #         RETURN
    #      END IF
    #   END IF
    #
    #END IF

    WHENEVER ERROR CONTINUE
    LET l_cont = 0
    SELECT count(*)
      INTO l_cont
      FROM deb_fornec
    WHERE cod_empresa   = p_cod_empresa
      AND num_aviso_rec = p_dados_tela.num_aviso_rec
      AND num_seq       = p_num_seq
    WHENEVER ERROR STOP
    IF l_cont = 0 THEN
    ELSE CALL log0030_mensagem(" Existe deb_fornec - excluir registro no sup5960","exclamation")
         SLEEP 2
         LET p_houve_erro = TRUE
         RETURN
    END IF

    WHENEVER ERROR CONTINUE
    LET l_cont = 0
    SELECT count(*)
      INTO l_cont
      FROM dev_fornec
    WHERE cod_empresa   = p_cod_empresa
      AND num_aviso_rec = p_dados_tela.num_aviso_rec
      AND num_seq       = p_num_seq
    WHENEVER ERROR STOP
    IF l_cont = 0 THEN
    ELSE CALL log0030_mensagem(" Existe devolução a fornecedores - excluir registro no sup0460","exclamation")
       SLEEP 2
       LET p_houve_erro = TRUE
       RETURN
    END IF

    WHENEVER ERROR CONTINUE
    CALL log085_transacao("BEGIN")
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("BEGIN TRANSACTION","EXCLUSAO ITEM")
       RETURN
    END IF

    IF m_cred_st_fat = "S"
    OR m_cred_st_fat = "E" THEN
       IF NOT sup1466_valida_saldo_com_revd_st(p_cod_empresa,p_dados_tela.num_aviso_rec,p_num_seq,"EXCLUSAO") THEN
          LET p_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
          END IF
          RETURN
       END IF
    END IF

    LET p_nr_nf = p_dados_tela.num_nf

    IF p_dados_tela.ies_especie_nf = "NFM" THEN
       WHENEVER ERROR CONTINUE
## OS 205898
       INITIALIZE l_qtd_recebida TO NULL
       SELECT qtd_recebida
         INTO l_qtd_recebida
         FROM nf_pend
        WHERE cod_empresa    = p_cod_empresa
          AND num_nf         = p_dados_tela.num_nf
          AND ser_nf         = p_dados_tela.ser_nf
          AND ssr_nf         = p_dados_tela.ssr_nf
          AND cod_fornecedor = p_dados_tela.cod_fornecedor
          AND cod_item       = p_aviso_rec.cod_item
       LET l_qtd_recebida = l_qtd_recebida - p_aviso_rec.qtd_declarad_nf
       IF l_qtd_recebida = 0 THEN
          DELETE FROM nf_pend
           WHERE cod_empresa    = p_cod_empresa
             AND num_nf         = p_dados_tela.num_nf
             AND ser_nf         = p_dados_tela.ser_nf
             AND ssr_nf         = p_dados_tela.ssr_nf
             AND cod_fornecedor = p_dados_tela.cod_fornecedor
             AND cod_item       = p_aviso_rec.cod_item
       ELSE
          UPDATE nf_pend
             SET qtd_recebida = qtd_recebida - p_aviso_rec.qtd_declarad_nf
           WHERE cod_empresa    = p_cod_empresa
             AND num_nf         = p_dados_tela.num_nf
             AND ser_nf         = p_dados_tela.ser_nf
             AND ssr_nf         = p_dados_tela.ssr_nf
             AND cod_fornecedor = p_dados_tela.cod_fornecedor
             AND cod_item       = p_aviso_rec.cod_item
       END IF
       WHENEVER ERROR STOP
    END IF

    IF p_dados_tela.ies_especie_nf = "NFP" THEN
       DECLARE cq_ar_x_nf_pend3 CURSOR FOR
       SELECT *
         FROM ar_x_nf_pend
        WHERE cod_empresa   = p_cod_empresa
          AND num_aviso_rec = p_dados_tela.num_aviso_rec
          AND num_seq       = p_num_seq

       FOREACH cq_ar_x_nf_pend3 INTO lr_ar_x_nf_pend.*
          WHENEVER ERROR CONTINUE
          UPDATE nf_pend
             SET qtd_regularizada = qtd_regularizada -
                                    lr_ar_x_nf_pend.qtd_regularizada
           WHERE cod_empresa    = lr_ar_x_nf_pend.cod_empresa
             AND num_nf         = lr_ar_x_nf_pend.num_nf
             AND ser_nf         = lr_ar_x_nf_pend.ser_nf
             AND ssr_nf         = lr_ar_x_nf_pend.ssr_nf
             AND cod_fornecedor = lr_ar_x_nf_pend.cod_fornecedor
             AND cod_item       = lr_ar_x_nf_pend.cod_item
          WHENEVER ERROR STOP
       END FOREACH

       WHENEVER ERROR CONTINUE
       DELETE FROM ar_x_nf_pend
        WHERE cod_empresa    = p_cod_empresa
          AND num_aviso_rec  = p_dados_tela.num_aviso_rec
          AND num_seq        = p_num_seq
       WHENEVER ERROR STOP
    END IF

    DELETE FROM ar_pis_cofins
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq

    #OS 359707
    WHENEVER ERROR CONTINUE
      DELETE FROM obf_dvcli_piscofin
       WHERE empresa           = p_cod_empresa
         AND aviso_recebto     = p_dados_tela.num_aviso_rec
         AND seq_aviso_recebto = p_num_seq
    WHENEVER ERROR STOP

    WHENEVER ERROR CONTINUE
      DELETE FROM obf_p_dvcli_cofins
       WHERE empresa           = p_cod_empresa
         AND aviso_recebto     = p_dados_tela.num_aviso_rec
         AND seq_aviso_recebto = p_num_seq
    WHENEVER ERROR STOP
    #OS 359707

    WHENEVER ERROR CONTINUE ##OS 361268
    DELETE FROM sup_par_devol_cli
     WHERE empresa           = p_cod_empresa
       AND aviso_recebto     = p_dados_tela.num_aviso_rec
       AND seq_aviso_recebto = p_num_seq
    WHENEVER ERROR STOP

    WHENEVER ERROR CONTINUE
    DELETE FROM sup_ar_piscofim
     WHERE empresa           = p_cod_empresa
       AND aviso_recebto     = p_dados_tela.num_aviso_rec
       AND seq_aviso_recebto = p_num_seq
    WHENEVER ERROR STOP

    WHENEVER ERROR CONTINUE
    DELETE FROM sup_fr_pis_cofins
     WHERE empresa           = p_cod_empresa
       AND aviso_recebto     = p_dados_tela.num_aviso_rec
       AND seq_aviso_recebto = p_num_seq
    WHENEVER ERROR STOP

    IF NOT sup3760_desfaz_relac_desp_proc() THEN
       LET p_houve_erro = TRUE
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
       END IF
       RETURN
    END IF

    DELETE FROM aviso_rec_proc_imp
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq

    #FLUXO DE CAIXA
    IF NOT fcl1150_integra_sequencia_ar_fcx(p_cod_empresa,
                                            p_dados_tela.num_aviso_rec,
                                            p_num_seq,"EX") THEN
       LET p_houve_erro = TRUE
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
       END IF
       RETURN
    END IF

    DELETE FROM ar_ped
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq

    DELETE FROM ar_os_esp
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq

    DELETE FROM nf_sup_erro
     WHERE empresa       = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq

    DELETE FROM dest_aviso_rec
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq

    IF p_ies_contab_aen = "4" THEN
       DELETE FROM dest_aviso_rec4
        WHERE cod_empresa   = p_cod_empresa
          AND num_aviso_rec = p_dados_tela.num_aviso_rec
          AND num_seq       = p_num_seq
    END IF

    DELETE FROM ar_diverg
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq

    DELETE FROM ar_diverg_provid
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq

    IF log0150_verifica_se_tabela_existe("sup_cart_corr_aut") THEN # 523038
       WHENEVER ERROR CONTINUE
       DELETE FROM sup_cart_corr_aut
        WHERE empresa       = p_cod_empresa
          AND aviso_recebto = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DELETE","SUP_CART_CORR_AUT(3)")
       END IF
    END IF

    WHENEVER ERROR CONTINUE
    DELETE FROM ar_nf_item
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq
    WHENEVER ERROR STOP

    WHENEVER ERROR CONTINUE
    DELETE FROM sup_par_ar
     WHERE empresa           = p_cod_empresa
       AND aviso_recebto     = p_aviso_rec.num_aviso_rec
       AND seq_aviso_recebto = p_num_seq
    WHENEVER ERROR STOP

#### OS 139067
     WHENEVER ERROR CONTINUE
     DELETE FROM ar_subst_tribut
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq
     WHENEVER ERROR STOP

    DELETE FROM dev_item
     WHERE cod_empresa   = p_cod_empresa
       AND num_nff       = p_dados_tela.num_aviso_rec
       AND num_sequencia = p_num_seq

    WHENEVER ERROR CONTINUE
    DELETE FROM sup_nf_devol_cli
     WHERE empresa           = p_cod_empresa
       AND aviso_recebto     = p_dados_tela.num_aviso_rec
       AND seq_aviso_recebto = p_num_seq
    WHENEVER ERROR STOP

    WHENEVER ERROR CONTINUE
    DELETE FROM sup_trib_benef_nf_devol_cli
     WHERE empresa           = p_cod_empresa
       AND aviso_recebto     = p_dados_tela.num_aviso_rec
       AND seq_aviso_recebto = p_num_seq
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("(3)DELETE","SUP_TRIB_BENEF_NF_DEVOL_CLI")
       LET p_houve_erro = TRUE
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
       END IF
       RETURN
    END IF

{awc}
    WHENEVER ERROR CONTINUE
    DELETE FROM sup_nf_fat_remessa
     WHERE sup_nf_fat_remessa.empresa           = p_cod_empresa
       AND sup_nf_fat_remessa.nota_fiscal       = p_dados_tela.num_nf
       AND sup_nf_fat_remessa.serie_nota_fiscal = p_dados_tela.ser_nf
       AND sup_nf_fat_remessa.subserie_nf       = p_dados_tela.ssr_nf
       AND sup_nf_fat_remessa.espc_nota_fiscal  = p_dados_tela.ies_especie_nf
       AND sup_nf_fat_remessa.fornecedor        = p_dados_tela.cod_fornecedor
       AND sup_nf_fat_remessa.seq_item_nf       = p_num_seq
    WHENEVER ERROR STOP

    DELETE FROM ar_iss
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq

   IF (p_dados_tela.ies_especie_nf = "NFR"  OR
       p_dados_tela.ies_especie_nf = "NFE") AND ### OS 511148
      p_dados_tela.ies_nf_aguard_nfe = "X" THEN
      CALL sup3760_exclui_nf_consig("AVISO",p_dados_tela.num_aviso_rec,p_num_seq)
   END IF

   #IF p_par_sup_compl.ies_rastreio = "1" THEN
      DELETE FROM avf_insp_ar
       WHERE avf_insp_ar.empresa           = p_cod_empresa
         AND avf_insp_ar.aviso_recebto     = p_dados_tela.num_aviso_rec
         AND avf_insp_ar.seq_aviso_recebto = p_num_seq
      IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql("EXCLUSAO","AVF_INSP_AR")
         LET p_houve_erro = TRUE
      END IF

      WHENEVER ERROR CONTINUE #OS560935
        DELETE FROM avf_pl_insp_ar
         WHERE avf_pl_insp_ar.empresa           = p_cod_empresa
           AND avf_pl_insp_ar.aviso_recebto     = p_dados_tela.num_aviso_rec
           AND avf_pl_insp_ar.seq_aviso_recebto = p_num_seq
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql('DELETE','AVF_PL_INSP_AR')
      END IF
   #END IF

    DELETE FROM aviso_rec
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("EXCLUSAO","AVISO_REC")
       LET p_houve_erro = TRUE
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
       END IF
       RETURN
    END IF

    IF sup3760_cursor_excl_sup_retn_item_terc(TRUE) = FALSE THEN
       LET p_houve_erro = TRUE
    END IF

    IF NOT p_houve_erro THEN
       WHENEVER ERROR CONTINUE
       OPEN cq_exclui_grd USING p_cod_empresa,
                                p_dados_tela.num_nf,
                                p_dados_tela.ser_nf,
                                p_dados_tela.ssr_nf,
                                p_dados_tela.ies_especie_nf,
                                p_dados_tela.cod_fornecedor,
                                p_num_seq
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("OPEN","SUP_RETN_ITEM_TERC(2)")
          LET p_houve_erro = TRUE
       END IF

       IF NOT p_houve_erro THEN
          WHILE TRUE
             WHENEVER ERROR CONTINUE
             FETCH cq_exclui_grd INTO l_nf_remessa, l_seq_nf_remessa,
                                      l_seq_tabulacao, l_qtd_devolvida
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                IF sqlca.sqlcode <> 100 THEN
                   CALL log003_err_sql("FETCH","SUP_RETN_ITEM_TERC(2)")
                   LET p_houve_erro = TRUE
                END IF

                EXIT WHILE
             END IF

             WHENEVER ERROR CONTINUE
             DELETE FROM sup_retn_item_terc
              WHERE sup_retn_item_terc.empresa           = p_cod_empresa
                AND sup_retn_item_terc.nota_fiscal       = p_dados_tela.num_nf
                AND sup_retn_item_terc.serie_nota_fiscal = p_dados_tela.ser_nf
                AND sup_retn_item_terc.subserie_nf       = p_dados_tela.ssr_nf
                AND sup_retn_item_terc.espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                AND sup_retn_item_terc.fornecedor        = p_dados_tela.cod_fornecedor
                AND sup_retn_item_terc.seq_aviso_recebto = p_num_seq
                AND sup_retn_item_terc.nf_remessa        = l_nf_remessa
                AND sup_retn_item_terc.seq_nf_remessa    = l_seq_nf_remessa
                AND sup_retn_item_terc.seq_tabulacao     = l_seq_tabulacao
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("DELETE","SUP_RETN_ITEM_TERC(2)")
                LET p_houve_erro = TRUE
             END IF

             IF NOT p_houve_erro THEN
                WHENEVER ERROR CONTINUE
                UPDATE sup_itterc_grade
                   SET sup_itterc_grade.qtd_tot_receb = sup_itterc_grade.qtd_tot_receb -
                                                        l_qtd_devolvida
                 WHERE sup_itterc_grade.empresa       = p_cod_empresa
                   AND sup_itterc_grade.nota_fiscal   = l_nf_remessa
                   AND sup_itterc_grade.seq_item_nf   = l_seq_nf_remessa
                   AND sup_itterc_grade.fornecedor    = p_dados_tela.cod_fornecedor
                   AND sup_itterc_grade.seq_tabulacao = l_seq_tabulacao
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("UPDATE","SUP_ITTERC_GRADE(2)")
                   LET p_houve_erro = TRUE
                END IF
             END IF

             IF p_houve_erro THEN
                EXIT WHILE
             END IF
          END WHILE
       END IF
    END IF

    ### OS 277425 ###
    IF sup3766_exclui_sup_ar_grade(p_cod_empresa,
                                   p_dados_tela.num_aviso_rec,
                                   p_num_seq) = FALSE THEN
       LET p_houve_erro = TRUE
    END IF
    ### FIM OS 277425 ###

    IF NOT sup1031_grava_audit_ar(p_dados_tela.num_aviso_rec,
                                  p_num_seq,
                                  "SUP3760","5") THEN
       LET p_houve_erro = TRUE
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
       END IF
       RETURN
    END IF

     ### OS 159597 ###
     IF m_contr_pes_rec = 'S' THEN #eduardo - o.s.290538 19/11/03
        WHENEVER ERROR CONTINUE
        UPDATE sup_ctr_balanca
           SET aviso_recebto     = NULL
         WHERE empresa           = p_cod_empresa
           AND num_docum         = p_dados_tela.num_nf
           AND serie_nota_fiscal = p_dados_tela.ser_nf
           AND subserie_nf       = p_dados_tela.ssr_nf
           AND fornecedor        = p_dados_tela.cod_fornecedor
           AND seq_nota_fiscal   = p_num_seq
           AND tip_pesagem       = "1"
        WHENEVER ERROR STOP
     END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "A" THEN
          LET l_cont = 0
          SELECT COUNT(*)
            INTO l_cont
            FROM aviso_rec
           WHERE cod_empresa   = p_cod_empresa
             AND num_aviso_rec = p_dados_tela.num_aviso_rec
          IF l_cont = 1 THEN
             DELETE FROM ar_depos
              WHERE cod_empresa   = p_cod_empresa
                AND num_aviso_rec = p_dados_tela.num_aviso_rec
          END IF
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
          DELETE FROM item_de_terc_dep
           WHERE cod_empresa     = p_cod_empresa
             AND num_nf          = p_dados_tela.num_nf
             AND ser_nf          = p_dados_tela.ser_nf
             AND ies_especie_nf  = p_dados_tela.ies_especie_nf
             AND cod_fornecedor  = p_dados_tela.cod_fornecedor
             AND num_sequencia   = p_num_seq

          LET l_cont = 0
          SELECT COUNT(*)
            INTO l_cont
            FROM aviso_rec
           WHERE cod_empresa   = p_cod_empresa
             AND num_aviso_rec = p_dados_tela.num_aviso_rec
          IF l_cont = 1 THEN
             DELETE FROM ar_fornec_depos
              WHERE cod_empresa   = p_cod_empresa
                AND num_ar_depos  = p_dados_tela.num_aviso_rec
          END IF
       END IF

    DELETE FROM sup_infc_strib_nfe
    WHERE empresa            = p_cod_empresa
      AND nf_entrada         = p_dados_tela.num_nf
      AND serie_nf_entrada   = p_dados_tela.ser_nf
      AND subserie_nfe       = p_dados_tela.ssr_nf
      AND especie_nf_entrada = p_dados_tela.ies_especie_nf
      AND fornecedor         = p_dados_tela.cod_fornecedor
      AND seq_item_nfe       = p_aviso_rec.num_seq
    IF p_dados_tela.cod_empresa_estab IS NULL THEN
       WHENEVER ERROR CONTINUE
       DELETE FROM rec_find_ent_ar
        WHERE empresa         = p_cod_empresa
          AND empresa_estabel IS NULL
          AND aviso_recebto   = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
    ELSE
       WHENEVER ERROR CONTINUE
       DELETE FROM rec_find_ent_ar
        WHERE empresa         = p_cod_empresa
          AND empresa_estabel = p_dados_tela.cod_empresa_estab
          AND aviso_recebto   = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
    END IF

    DELETE FROM aviso_rec_aux
     WHERE cod_empresa = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
       AND num_seq       = p_num_seq
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("EXCLUSAO","AVISO_REC_AUX")
       LET p_houve_erro = TRUE
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
       END IF
       RETURN
    END IF

    DELETE FROM aviso_rec_compl_sq
      WHERE cod_empresa  = p_cod_empresa
        AND num_aviso_rec = p_dados_tela.num_aviso_rec
        AND num_seq       = p_num_seq
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("EXCLUSAO","AVISO_REC")
       LET p_houve_erro = TRUE
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
       END IF
       RETURN
    END IF

 ## OS 407088
    CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq) RETURNING l_cod_fornecedor

    WHENEVER ERROR CONTINUE
    DELETE FROM sup_item_terc_end
    WHERE empresa           = p_cod_empresa
      AND nota_fiscal       = p_nf_sup.num_nf
      AND serie_nota_fiscal = p_nf_sup.ser_nf
      AND subserie_nf       = p_nf_sup.ssr_nf
      AND espc_nota_fiscal  = p_nf_sup.ies_especie_nf
      AND fornecedor        = l_cod_fornecedor
      AND seq_aviso_recebto = p_aviso_rec.num_seq
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("EXCLUSAO","SUP_ITEM_TERC_END")
       LET p_houve_erro = TRUE
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
       END IF
       RETURN
    END IF

    DELETE FROM item_de_terc
     WHERE cod_empresa    = p_cod_empresa
       AND num_nf         = p_dados_tela.num_nf
       AND ser_nf         = p_dados_tela.ser_nf
       AND ssr_nf         = p_dados_tela.ssr_nf
       AND ies_especie_nf = p_dados_tela.ies_especie_nf
       AND cod_fornecedor = l_cod_fornecedor
       AND num_sequencia  = p_aviso_rec.num_seq

    DELETE FROM item_de_terc_compl
     WHERE cod_empresa    = p_cod_empresa
       AND num_nf         = p_dados_tela.num_nf
       AND ser_nf         = p_dados_tela.ser_nf
       AND ssr_nf         = p_dados_tela.ssr_nf
       AND ies_especie_nf = p_dados_tela.ies_especie_nf
       AND cod_fornec_nf  = l_cod_fornecedor
       AND num_seq        = p_aviso_rec.num_seq

    IF p_ies_contab_aen = "4" THEN
       DELETE FROM item_de_terc_area
        WHERE cod_empresa    = p_cod_empresa
          AND num_nf         = p_dados_tela.num_nf
          AND ser_nf         = p_dados_tela.ser_nf
          AND ssr_nf         = p_dados_tela.ssr_nf
          AND ies_especie_nf = p_dados_tela.ies_especie_nf
          AND cod_fornecedor = l_cod_fornecedor
          AND num_sequencia  = p_aviso_rec.num_seq
    END IF
    DELETE FROM item_dev_terc_comp
     WHERE item_dev_terc_comp.cod_empresa = p_cod_empresa
       AND item_dev_terc_comp.num_nf = p_dados_tela.num_nf
       AND item_dev_terc_comp.ser_nf = p_dados_tela.ser_nf
       AND item_dev_terc_comp.ssr_nf = p_dados_tela.ssr_nf
       AND item_dev_terc_comp.num_sequencia = p_aviso_rec.num_seq

    IF sup3760_verifica_fornec_incl_regime_compex(p_cod_empresa,
                                                  p_dados_tela.dat_emis_nf,
                                                  p_dados_tela.cod_fornecedor) THEN
       CALL sup3760_exclusao_inclusao_item_compex(p_cod_empresa,
                                                  p_aviso_rec.num_aviso_rec)
    END IF

    IF m_exst_rel_fre_indt THEN
       WHENEVER ERROR CONTINUE
       DELETE FROM sup_relc_ftre_indt
        WHERE sup_relc_ftre_indt.empresa   = p_cod_empresa
          AND sup_relc_ftre_indt.aviso_recebto = p_dados_tela.num_aviso_rec
          AND sup_relc_ftre_indt.seq_aviso_recebto = p_aviso_rec.num_seq
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DELETE","SUP_RELC_FTRE_INDT")
          LET p_houve_erro = TRUE
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
          END IF
          RETURN
       END IF
    END IF

    ##Se for integração ON-LINE poderá existir lançamentos contábeis para o documento,
    ##já que o indicador ies_incl_contab só passará para "S" quando for efetuado
    ##a integração contábil (geração do lote ou arquivo texto).
    IF NOT supr6_integracao_batch(p_cod_empresa) AND
       supr6_data_posterior_data_corte_logix_10(p_cod_empresa,
                                                p_dados_tela.dat_entrada_nf) THEN

       IF NOT supr6_validacao_data_inicial_e_final_processamento(p_cod_empresa,
                                                                 p_dados_tela.dat_entrada_nf,
                                                                 p_dados_tela.dat_entrada_nf,
                                                                 "MANUAL",
                                                                 FALSE) THEN
          LET p_houve_erro = TRUE
       ELSE
          IF m_dat_entrada_ant IS NULL THEN
             LET l_dat_entrada_nf = p_dados_tela.dat_entrada_nf
          ELSE
             LET l_dat_entrada_nf = m_dat_entrada_ant
          END IF

          IF NOT supr6_exclui_lancamento_contabil_documento("MANUAL",
                                                            p_cod_empresa,
                                                            p_dados_tela.num_nf,
                                                            p_dados_tela.ser_nf,
                                                            p_dados_tela.ssr_nf,
                                                            p_dados_tela.ies_especie_nf,
                                                            p_dados_tela.cod_fornecedor,
                                                            p_dados_tela.num_aviso_rec,
                                                            l_dat_entrada_nf,
                                                            p_num_seq,FALSE) THEN
             LET p_houve_erro = TRUE
          END IF
       END IF
    END IF

    IF p_aviso_rec.num_oc > 0 THEN
       #FLUXO DE CAIXA

       #Atualizar saldo da ordem de compra no
       #fluxo de caixa após exclusão de inf. fiscais do AR
       IF NOT fcl1150_integra_oc_fcx(p_aviso_rec.cod_empresa,
                                     p_aviso_rec.num_oc,"IN") THEN
          LET p_houve_erro = TRUE
       END IF
    END IF

    IF p_houve_erro = TRUE THEN
       WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
       END IF
       RETURN
    ELSE
       WHENEVER ERROR CONTINUE
           CALL log085_transacao("COMMIT")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("COMMIT TRANSACTION","EXCLUSAO ITEM")
          CALL log085_transacao("ROLLBACK") #OS596059
          RETURN
       END IF
    END IF

    IF  m_recalcula_impostos_nf_imp = "S"
    AND p_dados_tela.cod_operacao[1,1] = "7"  THEN
       CALL sup3760_recalcula_impostos_nf_imp()
    END IF

    MESSAGE "Item do aviso de recebimento excluido com sucesso. " ATTRIBUTE(REVERSE)
    INITIALIZE p_array[p_num_seq].* TO NULL
    INITIALIZE p_array_compl[p_num_seq].* TO NULL
# OS 415085 - Winston
#    LET p_cod_empresa_arg = p_cod_empresa
#    LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
#    CALL sup376_busca_argumen()
     CALL sup376_exibe_array() # OS 415085 - Winston
 ELSE
    IF p_aviso_rec.ies_receb_fiscal = "S"THEN
       IF sup376_deleta_inf_fiscais(p_num_seq) = FALSE  THEN
          RETURN
       END IF
    END IF
 END IF
 END FUNCTION

#---------------------------------------------#
 FUNCTION sup376_calcula_val_liquido(p_funcao)
#---------------------------------------------#
 DEFINE p_funcao CHAR(30)
 DEFINE p_qtd_estoque LIKE estoque.qtd_liberada

 LET p_qtd_estoque = 0
 IF p_funcao = "MODIFICACAO" THEN
    SELECT * INTO p_aviso_rec.*
      FROM  aviso_rec
     WHERE aviso_rec.cod_empresa   = p_cod_empresa
       AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
       AND aviso_rec.num_seq       = p_array[p_ind].seq
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("LEITURA","AVISO_REC")
    END IF
 END IF
 IF p_funcao = "INCLUSAO" OR p_funcao = "INCLU.ITENS" THEN
    IF p_nfe_vendas = FALSE OR
       m_nf_tipo_x  = FALSE THEN ### OS 511148
       LET p_aviso_rec.val_desc_item = 0
    END IF
    LET p_aviso_rec.val_acrescimos     = 0
    LET p_aviso_rec.val_enc_financ     = 0
    LET p_aviso_rec.val_despesa_aces_i = 0
    IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
       IF p_array[p_ind].qtd_declarad_nf = 0 THEN
          IF m_num_processo >= g_proc_ini_os163407 THEN
             LET p_aviso_rec.ies_da_bc_ipi = sup3760_determina_indicador_da(p_cod_empresa, m_num_processo)
             LET p_aviso_rec.val_despesa_aces_i = p_array_imp[p_ind].val_da_icms
          ELSE
             LET p_aviso_rec.ies_da_bc_ipi = "S"
             LET p_aviso_rec.val_despesa_aces_i =
                 p_array_imp[p_ind].val_ii + p_array_imp[p_ind].val_desp_imp
          END IF
       ELSE
          IF m_num_processo >= g_proc_ini_os163407 THEN
             LET p_aviso_rec.val_despesa_aces_i = p_array_imp[p_ind].val_da_icms
          ELSE
             LET p_aviso_rec.val_despesa_aces_i =
                 p_array_imp[p_ind].val_ii + p_array_imp[p_ind].val_desp_imp
          END IF
       END IF
    ELSE
       IF p_nfe_vendas = TRUE OR #AND - OS 548081 - se for nota de devolução de vendas com frete cliente na nota de saída, deve gerar o valor de despesa acessória.
          m_nf_tipo_x  = TRUE ### OS 511148
          OR p_ies_nf_transf = TRUE OR g_ies_nf_permuta = TRUE # Chamado 757.882
          THEN
          LET p_aviso_rec.val_despesa_aces_i = p_array_imp[p_ind].val_da_icms
          IF p_aviso_rec.val_despesa_aces_i IS NULL THEN
             LET p_aviso_rec.val_despesa_aces_i = 0
          END IF
          LET p_aviso_rec.ies_da_bc_ipi      = "S"
       END IF
    END IF
 END IF
 IF p_array[p_ind].qtd_declarad_nf = 0 THEN
    LET p_aviso_rec.val_liquido_item = ((p_array[p_ind].pre_unit_nf     -
                                         p_aviso_rec.val_desc_item) * 1) +
                                        (p_aviso_rec.val_despesa_aces_i +
                                         p_aviso_rec.val_acrescimos)
 ELSE
    LET p_aviso_rec.val_liquido_item = ((p_array[p_ind].pre_unit_nf     -
                                         p_aviso_rec.val_desc_item)   *
                                         p_array[p_ind].qtd_declarad_nf) +
                                        (p_aviso_rec.val_despesa_aces_i +
                                         p_aviso_rec.val_acrescimos)
 END IF
 LET p_array[p_ind].val_liquido_item = p_aviso_rec.val_liquido_item
 LET p_aviso_rec.val_contabil_item = p_aviso_rec.val_liquido_item
 IF p_aviso_rec.ies_item_estoq  = "S" AND
    p_array[p_ind].qtd_declarad_nf = 0 AND
    p_par_sup.ies_modulo_estoque = "S" AND
    p_par_sup.ies_vinc_fiscal    = "S" THEN
    SELECT estoque.qtd_liberada  + estoque.qtd_lib_excep +
           estoque.qtd_impedida  + estoque.qtd_rejeitada
      INTO p_qtd_estoque
      FROM estoque
     WHERE estoque.cod_empresa     = p_cod_empresa
       AND estoque.cod_item         = p_array[p_ind].cod_item
    IF sqlca.sqlcode = 0 THEN
       IF p_qtd_estoque = 0 THEN
          OPEN WINDOW w_exibe_err5 AT 10,04
                WITH 3 ROWS, 56 COLUMNS
          ATTRIBUTE(BORDER, PROMPT LINE LAST)
           DISPLAY "A contabilizacao desta nota fiscal deve ser efetuada" AT 1,1
           DISPLAY "manualmente, pois o estoque deste item esta' = zero." AT 2,1
          ERROR " Nota fiscal complementar de preco com estoque = 0 " ATTRIBUTE (reverse)
          IF log004_confirm(14,42) THEN
             CLOSE WINDOW w_exibe_err5
          ELSE
             CLOSE WINDOW w_exibe_err5
             RETURN
          END IF
       END IF
    END IF
 END IF
 IF p_array[p_ind].qtd_declarad_nf = 0 THEN
    LET p_aviso_rec.val_liquido_item = ((p_array[p_ind].pre_unit_nf     -
                                         p_aviso_rec.val_desc_item) * 1) +
                                        (p_aviso_rec.val_despesa_aces_i +
                                         p_aviso_rec.val_acrescimos)
 ELSE
    LET p_aviso_rec.val_liquido_item = ((p_array[p_ind].pre_unit_nf     -
                                         p_aviso_rec.val_desc_item)   *
                                         p_array[p_ind].qtd_declarad_nf) +
                                        (p_aviso_rec.val_despesa_aces_i +
                                         p_aviso_rec.val_acrescimos)
 END IF
 LET p_array[p_ind].val_liquido_item = p_aviso_rec.val_liquido_item
 LET p_aviso_rec.val_contabil_item = p_aviso_rec.val_liquido_item
 END FUNCTION

#-----------------------------------------#
 FUNCTION sup376_inclusao_item_aviso_rec()
#-----------------------------------------#
 DEFINE p_funcao                CHAR(30),
        p_par_forn              CHAR(01),
        l_cfop_destino          LIKE aviso_rec.cod_fiscal_item,
        l_contrato              LIKE wms_contrato.contrato,       # WMS - Columbia
        l_trans_contrato        LIKE wms_contrato.trans,          # WMS - Columbia
        l_tip_estoque           LIKE wms_tip_estoque.tip_estoque, # WMS - Columbia
        l_sqlcode               SMALLINT, # WMS - Columbia
        l_status                SMALLINT, # WMS - Columbia
        l_comando               CHAR(100)

## 407088
 DEFINE l_cod_fornecedor        LIKE nf_sup.cod_fornecedor,
        l_continua              SMALLINT #WMS Columbia

 LET g_ies_transf_benef = FALSE
 LET m_solicitou_mp     = FALSE
 LET m_solicitou_ciap   = FALSE
 LET m_confirmou_mp     = TRUE
 LET m_confirmou_ciap   = TRUE

 IF p_dados_tela.cod_operacao[1] = "7" AND sup3760_possui_rateio_compl() THEN
    ERROR " Nota fiscal possui rateio de despesa complementar de importacao (SUP5010) "
    RETURN
 END IF

 INITIALIZE p_fornec_incl_item TO NULL
 FOR p_ind9 = 1 TO 999
     IF p_array_compl[p_ind9].num_pedido IS NOT NULL AND
        p_array_compl[p_ind9].num_pedido <> 0 THEN
        CALL sup376_busca_pedido_sup(p_cod_empresa, p_array_compl[p_ind9].num_pedido)
        IF sqlca.sqlcode = 0 THEN
           LET p_fornec_incl_item = p_pedido_sup.cod_fornecedor
           EXIT FOR
        END IF
     END IF
 END FOR

 LET m_nfr_import = FALSE
 IF sup3760_nfr_consignatario("INCLU.ITENS") THEN
    LET m_nfr_import = TRUE
 END IF

 CALL sup376_busca_cond_pgto_cap(p_nf_sup.cnd_pgto_nf)
 LET p_ies_pagamento = p_cond_pgto_cap.ies_pagamento

 INITIALIZE p_array, p_array_wms TO NULL
 INITIALIZE p_array_compl TO NULL
 INITIALIZE p_array_it_prg_entr TO NULL
 LET p_funcao = "INCLU.ITENS"
 DECLARE cm_prx_seq SCROLL CURSOR FOR
  SELECT num_seq
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa = p_cod_empresa
     AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
   ORDER BY aviso_rec.num_seq
 OPEN cm_prx_seq
 FETCH LAST cm_prx_seq INTO p_prx_seq
 CLOSE cm_prx_seq
 LET p_prx_seq = p_prx_seq + 1
 LET p_inclu_item = "S"
 LET int_flag = 0
 LET p_houve_erro = 0
 #--------------------------#
 # Alteração WMS OS: 450083 #
 #--------------------------#
 LET l_continua = TRUE
 IF m_wms_instal = 'S' AND m_utiliza_codf_deposit = 'S' THEN
    IF p_dados_tela.ies_nf_aguard_nfe = "A" THEN
       WHENEVER ERROR CONTINUE
          SELECT ar_depos.cod_depositante
            INTO m_wms_depositante
            FROM ar_depos
           WHERE ar_depos.cod_empresa = p_cod_empresa
             AND ar_depos.num_aviso_rec = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
    ELSE
       LET m_wms_depositante =  p_dados_tela.cod_fornecedor
    END IF
    # - - - - - - - - - - - - - - - -#
    LET l_continua = sup376_insere_array_wms(p_funcao)
 ELSE
    LET l_continua = sup376_insere_array(p_funcao)
 END IF
 #--------------------------#

 IF l_continua THEN
    MESSAGE " Aguarde ... Efetuando Inclusao de Itens na Nota Fiscal ... "
            ATTRIBUTE(REVERSE)
    LET p_inclu_item = "N"
    CALL log085_transacao("BEGIN")
    FOR p_ind = 1 TO 999
        IF p_array[p_ind].qtd_declarad_nf IS NOT NULL THEN
           CALL sup376_inicializa_campos_ar()
           LET p_aviso_rec.val_despesa_aces_i = 0
           IF p_dados_tela.ies_especie_nf <> "NFR" AND
              p_dados_tela.ies_especie_nf <> "NFD" THEN
              CALL sup376_inclui_ar_ped()
           END IF
           CALL sup376_move_campos_ar()
           IF p_dados_tela.ies_especie_nf = "NFR" THEN
              LET p_par_forn = NULL
              CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor,
                                                      p_aviso_rec.cod_item,
                                                      p_dados_tela.dat_emis_nf,
                                                      p_dados_tela.num_aviso_rec) RETURNING p_par_forn
              IF p_par_forn = "3" THEN
                 LET p_aguarda_fatura = "S"
              END IF

              IF p_par_forn = "1" THEN
                 LET p_cont_aut_terc = TRUE


                 IF p_par_sup_compl_1.cod_tip_desp_terc IS NOT NULL AND
                    p_par_sup_compl_1.cod_tip_desp_terc <> " " THEN
                    LET p_aviso_rec.cod_tip_despesa = p_par_sup_compl_1.cod_tip_desp_terc
                 END IF
              END IF

              CALL sup376_busca_parametros_item(p_aviso_rec.cod_item)
              LET p_parametros = p_item_parametro.parametros[2,2]

              IF p_parametros = "2" THEN
                 IF p_par_sup_compl_1.cod_tip_desp_banc IS NOT NULL AND
                    p_par_sup_compl_1.cod_tip_desp_banc <> " " THEN
                    LET p_aviso_rec.cod_tip_despesa = p_par_sup_compl_1.cod_tip_desp_banc
                 END IF
              END IF
              IF p_par_forn = "3" THEN
                 LET p_aviso_rec.ies_item_estoq = "N"
                 LET p_aviso_rec.ies_situa_ar   = "C"
                 LET p_aviso_rec.ies_liberacao_cont = "N"
                 LET p_array_compl[p_ind].move_estoque = "N"
                 IF p_par_sup_compl_1.cod_tip_desp_cons IS NOT NULL AND
                    p_par_sup_compl_1.cod_tip_desp_cons <> " " THEN
                    LET p_aviso_rec.cod_tip_despesa = p_par_sup_compl_1.cod_tip_desp_cons
                 END IF
              END IF
           END IF

           ### OS331455
           LET p_array_compl1[p_ind].cod_tip_despesa = p_aviso_rec.cod_tip_despesa
           ### OS331455
           IF p_dados_tela.ies_nf_aguard_nfe = "2" OR
              p_dados_tela.ies_nf_aguard_nfe = "5" THEN
              LET p_aviso_rec.ies_liberacao_insp = "S"
           END IF

           IF p_dados_tela.ies_especie_nf = "NFR" AND
              m_ies_obj_entrada = "99"    THEN
              LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
           END IF

##### O.S. 245661
           IF p_dados_tela.ies_especie_nf = "NFR" THEN
              IF p_dados_tela.ies_nf_aguard_nfe = "4" THEN
                 IF p_aviso_rec.ies_incid_icms_ite <> "E" THEN
                    LET p_aviso_rec.gru_ctr_desp_item = p_cod_grp_desp_nfr
                 END IF
                 LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
              ELSE
                 IF m_ies_obj_entrada = "99" AND
                    p_dados_tela_f.val_tot_icms_nf_d = 0  AND
                    p_dados_tela_f.val_ipi_nf        = 0   THEN
                    LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
   ################### OS 180603
                    IF m_grupo_despesa_nfr = "S" AND
                       p_dados_tela.ies_especie_nf = "NFR" AND
                       (p_aviso_rec.num_oc = 0 OR p_aviso_rec.num_oc IS NULL) THEN
                       IF p_ies_pagamento = 3 THEN
                       ELSE
                          LET p_aviso_rec.gru_ctr_desp_item    = m_ies_obj_entrada
                       END IF
                    ELSE
                       LET p_aviso_rec.gru_ctr_desp_item    = m_ies_obj_entrada
                    END IF
                 END IF
              END IF
           END IF

           IF p_dados_tela.ies_especie_nf    = "NFR" AND
              p_dados_tela.ies_nf_aguard_nfe = "4"   AND
              p_dados_tela_f.val_ipi_nf     <> 0     AND
              (p_ies_obj_entrada_fisc = "3" OR  p_ies_obj_entrada_fisc = "4") THEN
           ELSE
              IF p_dados_tela.ies_especie_nf = "NFR" AND
                 p_ies_achou_itsup  = FALSE THEN
                 LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
              ELSE
                 IF (p_dados_tela.ies_especie_nf = "NFD" OR
                     p_ies_tip_entrada = "5") AND
                     ((p_array_compl[p_ind].ies_tip_item = "C" OR
                       p_array_compl[p_ind].ies_tip_item = "B") OR
                       p_ies_achou_itsup = FALSE) THEN
                     LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
                  END IF
              END IF
           END IF

           CALL sup376_inclui_dest_entrega(p_array[p_ind].val_liquido_item)
           IF p_dados_tela.ies_especie_nf = "NFR" OR
              p_dados_tela.ies_especie_nf = "NFD" OR
              p_dados_tela.ies_especie_nf  = "NFC" OR
              (p_dados_tela.ies_especie_nf = "NFE" AND
               p_dados_tela.ies_nf_aguard_nfe = "X") THEN
              IF p_par_forn = "3" THEN
              ELSE
                 LET p_aviso_rec.ies_situa_ar = "E"
                 LET p_aviso_rec.ies_liberacao_ar = "2"
              END IF
              LET p_aviso_rec.ies_diverg_listada = "S"
              IF p_array_compl[p_ind].move_estoque = "S" THEN
                 LET p_aviso_rec.ies_situa_ar = "C"
                 LET p_aviso_rec.ies_item_estoq   = "S"
                 LET p_aviso_rec.ies_liberacao_ar = "1"
              END IF
           END IF
           #--------------------class. fiscal-----------------------#
           IF p_aviso_rec.ies_item_estoq = "N" THEN
              IF p_aviso_rec.cod_cla_fisc_nf IS NOT NULL AND
                 p_aviso_rec.cod_cla_fisc_nf <> " " THEN
                 LET p_aviso_rec.cod_cla_fisc = p_aviso_rec.cod_cla_fisc_nf
              END IF
           END IF
           #--------------------------------------------------------#

           IF p_dados_tela.ies_nf_aguard_nfe = "5" THEN
              LET p_aviso_rec.ies_liberacao_insp = "S"
           END IF
           #--------------------------------------------------------#


           IF p_aviso_rec.num_oc <> 0 THEN
              LET p_cod_secao_rec = NULL
              INITIALIZE p_ordem_sup.* TO NULL
              CALL sup3762_busca_ordem_sup(p_aviso_rec.cod_empresa,
                                          p_aviso_rec.num_oc)
              LET p_cod_secao_rec    = p_ordem_sup.cod_secao_receb
              LET p_ies_item_estoq   = p_ordem_sup.ies_item_estoq
              LET p_ies_insp_recebto = p_ordem_sup.ies_insp_recebto
              IF p_cod_secao_rec IS NOT NULL AND
                 p_cod_secao_rec <> " " THEN
                 LET p_aviso_rec.cod_local_estoq = p_cod_secao_rec
              END IF
              LET p_aviso_rec.ies_item_estoq = p_ies_item_estoq
           END IF

#---- alteracao ref OS 103757
              IF p_dados_tela.ies_nf_aguard_nfe = "5"
              THEN LET p_aviso_rec.ies_liberacao_cont = "N"
                   LET p_aviso_rec.ies_liberacao_insp = "S"
                   LET p_aviso_rec.ies_situa_ar       = "E"
                   LET p_aviso_rec.qtd_recebida       = p_aviso_rec.qtd_declarad_nf
              ELSE CALL sup376_analisa_contagem_inspecao()
              END IF
           IF p_aviso_rec.num_oc <> 0 THEN
              IF p_aviso_rec.ies_item_estoq = "N" THEN
#### OS 286425 - NFR consignacao com OC relacionada (obedece inspecao cadastrada para material)
                 IF p_ies_insp_recebto IS NOT NULL AND
                    ((p_ies_insp_recebto <> "4") OR
                     (p_ies_insp_recebto = "4" AND
                     p_dados_tela.ies_nf_aguard_nfe = "4")) THEN
                    LET p_aviso_rec.ies_liberacao_insp = "N"
                    LET p_aviso_rec.ies_liberacao_cont = "N"
                    IF p_par_sup_compl.ies_conta_ok_n_est = "2" OR
                       (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
                       p_dados_tela.ies_especie_nf = "NFS") THEN
                       LET p_aviso_rec.ies_situa_ar = "I"
                    ELSE
                       LET p_aviso_rec.ies_situa_ar = "C"
                    END IF
                 ELSE
                    LET p_aviso_rec.ies_liberacao_insp = "S"
                 END IF
                 IF p_cod_oper_ent_comp IS NOT NULL AND
                    p_cod_oper_ent_comp <> " " THEN

                    INITIALIZE p_contador TO NULL
                    SELECT COUNT(*)
                      INTO p_contador
                      FROM estrutura_vdp_hp
                     WHERE estrutura_vdp_hp.cod_empresa = p_aviso_rec.cod_empresa
                       AND estrutura_vdp_hp.cod_item    = p_aviso_rec.cod_item
                    IF sqlca.sqlcode <> 0 OR
                       p_contador IS NULL THEN
                       LET p_contador = 0
                    END IF

                    IF p_contador > 0 THEN
                       IF p_aviso_rec.ies_situa_ar = "C" THEN
                          LET p_aviso_rec.ies_situa_ar = "I"
                       END IF
                       LET p_aviso_rec.ies_liberacao_cont = "N"
                    END IF

                 END IF
              END IF
           END IF

           IF p_dados_tela.ies_especie_nf = "NFM" THEN
              LET p_aviso_rec.ies_situa_ar = "E"
              LET p_aviso_rec.ies_item_estoq = "N"
           END IF

           IF p_aviso_rec.cod_unid_med_nf IS NULL THEN
              LET p_aviso_rec.cod_unid_med_nf = " "
           END IF

           IF p_dados_tela.ies_especie_nf = "NFS" THEN
              IF m_incid_icms_nfs IS NULL OR m_incid_icms_nfs = " " THEN
              ELSE
                 LET p_aviso_rec.ies_incid_icms_ite = m_incid_icms_nfs
              END IF
           END IF

            IF sup376_tem_classificacao_sucata(p_aviso_rec.cod_item) THEN
               LET p_aviso_rec.ies_item_estoq = "N"
            END IF

           IF p_nf_sup.ies_nf_aguard_nfe = "4" THEN
              IF sup376_verifica_armazem_itau() THEN
                 LET p_aviso_rec.ies_item_estoq = "S"
              END IF
           END IF

## OS 205898
           IF p_dados_tela.ies_especie_nf = "NFM" THEN
              IF p_aviso_rec.cod_item IS NULL OR
                 p_aviso_rec.cod_item =  " "  THEN
              ELSE
                 WHENEVER ERROR CONTINUE
                 INSERT INTO nf_pend VALUES (p_cod_empresa, p_dados_tela.num_nf,
                                      p_dados_tela.ser_nf, p_dados_tela.ssr_nf,
                                      p_dados_tela.cod_fornecedor,
                                      p_aviso_rec.cod_item,
                                      p_aviso_rec.qtd_declarad_nf, 0, NULL,
                                      TODAY)
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode = -239 OR
                    sqlca.sqlcode = -268 THEN
                    UPDATE nf_pend
                       SET qtd_recebida = qtd_recebida + p_aviso_rec.qtd_declarad_nf
                     WHERE cod_empresa    = p_cod_empresa
                       AND num_nf         = p_dados_tela.num_nf
                       AND ser_nf         = p_dados_tela.ser_nf
                       AND ssr_nf         = p_dados_tela.ssr_nf
                       AND cod_fornecedor = p_dados_tela.cod_fornecedor
                       AND cod_item       = p_aviso_rec.cod_item
                    IF sqlca.sqlcode <> 0 THEN
                       LET p_houve_erro = TRUE
                    END IF
                 END IF
              END IF
           END IF

           IF p_aviso_rec.ies_tip_incid_ipi IS NULL THEN
              LET p_aviso_rec.ies_tip_incid_ipi = " "
           END IF

           CALL sup3760_verifica_codigo_fiscal_item(p_dados_tela.cod_operacao,
                                                    p_dados_tela.ies_nf_aguard_nfe)

           IF p_dados_tela.ies_nf_aguard_nfe = "5" AND
              p_dados_tela.ies_especie_nf = "NFC" THEN
              CALL sup3760_busca_grupo_X_tipo_despesa()
           END IF

            #536059
            IF p_dados_tela.ies_especie_nf  = 'NFR' AND
               p_dados_tela.ies_nf_aguard_nfe     = 'B'   THEN
               LET p_aviso_rec.ies_situa_ar       = 'E'
               LET p_aviso_rec.ies_liberacao_cont = 'S'
               LET p_aviso_rec.ies_liberacao_insp = 'S'
               LET p_aviso_rec.qtd_recebida       = p_aviso_rec.qtd_declarad_nf
               LET p_aviso_rec.qtd_liber          = p_aviso_rec.qtd_declarad_nf
            END IF

            #808022
            IF p_aviso_rec.num_oc IS NULL OR p_aviso_rec.num_oc = 0 THEN
               IF (p_par_sup_compl.ies_conta_ok_n_est = "2" OR
                   (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
                    p_dados_tela.ies_especie_nf = "NFS") AND
                   m_cont_insp_especial = 'S') OR p_dados_tela.ies_especie_nf = "NFC" THEN
                  IF p_aviso_rec.ies_item_estoq = 'N' AND
                     p_dados_tela.ies_nf_aguard_nfe <> 'T' THEN
                     LET p_aviso_rec.ies_situa_ar       = 'E'
                     LET p_aviso_rec.ies_liberacao_cont = 'S'
                     LET p_aviso_rec.ies_liberacao_insp = 'S'
                     LET p_aviso_rec.qtd_recebida       = p_aviso_rec.qtd_declarad_nf
                     LET p_aviso_rec.qtd_liber          = p_aviso_rec.qtd_declarad_nf
                  END IF
               END IF
            END IF
            #FIM 808022

           #--inicio--vanderlei OS 393178 #
           IF sup3760_item_bonificado(p_cod_empresa,
                                      p_aviso_rec.num_aviso_rec,
                                      p_aviso_rec.num_seq,
                                      "item_bonificacao") = 'B' THEN
              LET p_aviso_rec.ies_total_nf = 'N'
           END IF
           #---fim----vanderlei OS 393178 #

                      ## 404133
           IF g_ies_transf_benef = TRUE AND
             (g_ies_retorno_ind = TRUE OR
              g_ret_sem_ind = true) AND
              p_aviso_rec.ies_item_estoq = "N" THEN
              IF sup3760_gera_item_ret_terc() = FALSE THEN
                 LET p_houve_erro = TRUE
                 EXIT FOR
              END IF
           END IF

           CALL sup3760_verifica_cfop_destino(p_dados_tela.cod_operacao)
                RETURNING p_status, l_cfop_destino

           IF p_status THEN
              LET p_aviso_rec.cod_fiscal_item = l_cfop_destino
           END IF

           IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                        p_cod_empresa,
                                        p_dados_tela.num_aviso_rec) THEN
              IF p_array[p_ind2].cod_item IS NULL THEN
                 LET p_array[p_ind2].cod_item = " "
              END IF
              IF p_array[p_ind2].den_item IS NULL THEN
                 LET p_array[p_ind2].den_item = " "
              END IF
              IF p_array[p_ind2].qtd_declarad_nf IS NULL THEN
                 LET p_array[p_ind2].qtd_declarad_nf = 0
              END IF
              IF p_array[p_ind2].cod_unid_med_nf IS NULL THEN
                 LET p_array[p_ind2].cod_unid_med_nf = " "
              END IF
              IF p_array[p_ind2].pre_unit_nf IS NULL THEN
                 LET p_array[p_ind2].pre_unit_nf = 0
              END IF
              IF p_array[p_ind2].val_liquido_item IS NULL THEN
                 LET p_array[p_ind2].val_liquido_item = 0
              END IF
              IF p_array[p_ind2].cod_cla_fisc_nf IS NULL THEN
                 LET p_array[p_ind2].cod_cla_fisc_nf = " "
              END IF
              IF p_array[p_ind2].pct_ipi IS NULL THEN
                 LET p_array[p_ind2].pct_ipi = 0
              END IF
           END IF

           CALL sup3760_verifica_insp_nfr()

           WHENEVER ERROR CONTINUE
           INSERT INTO aviso_rec VALUES(p_aviso_rec.*)
           WHENEVER ERROR STOP

           IF sqlca.sqlcode <> 0 THEN
              LET p_houve_erro = TRUE
           ELSE

              IF m_cred_st_fat = "S"    #OS. 479344
              OR m_cred_st_fat = "E" THEN
                 IF NOT sup2621_verifica_nota_transferencia(p_aviso_rec.*, p_dados_tela.cod_fornecedor) THEN
                 END IF
              END IF                    #OS. 479344

              IF NOT sup1031_grava_audit_ar(p_aviso_rec.num_aviso_rec,
                                            p_aviso_rec.num_seq,
                                            "SUP3760","1") THEN
                 LET p_houve_erro = TRUE
                 EXIT FOR
              END IF

              IF find4GLFunction('supy23_atualiza_oc_pd_fluxo_caixa') THEN
                 IF NOT supy23_atualiza_oc_pd_fluxo_caixa(p_ordem_sup.cod_empresa,
                                                          p_ordem_sup.cod_item,
                                                          p_ordem_sup.num_oc,
                                                          p_ordem_sup.cod_fornecedor,
                                                          p_ordem_sup.cnd_pgto,
                                                          p_ordem_sup.cod_mod_embar,
                                                          p_ordem_sup.cod_moeda,
                                                          p_aviso_rec.pre_unit_nf) THEN
                    LET p_houve_erro = TRUE
                    EXIT FOR
                 END IF
              END IF

              IF m_gera_rsv_transf = "S" AND
                 p_dados_tela.ies_nf_aguard_nfe  = "8" THEN
                 CALL sup3760_carrega_strib_nfe()
              END IF
           END IF

              IF p_dados_tela.ies_especie_nf = "NFR" THEN
                 IF p_par_forn = "3" AND
                    m_ies_armaz_itau <> "S" AND
                    p_dados_tela.ies_nf_aguard_nfe <> "7" THEN #736225 Antonio/Carla
                    LET p_dados_tela.ies_nf_aguard_nfe = "4"
                    IF sup376_gera_item_d_terc() = FALSE THEN
                       LET p_houve_erro = TRUE
                    END IF
                 ELSE
                    IF p_dados_tela.ies_nf_aguard_nfe = "T" THEN
                       IF sup376_gera_item_d_terc() = FALSE THEN
                          LET p_houve_erro = TRUE
                       END IF
                    END IF
                 END IF

                 IF   (p_parametros = '6' #OS481195
                 AND ((p_dados_tela.ies_nf_aguard_nfe = 'A'
                 AND   m_contr_terc_no_dep = 'N')
                 OR   (p_dados_tela.ies_nf_aguard_nfe = 'B'
                 AND   m_contr_terc_no_dep = 'S'))) THEN
                    IF sup376_gera_item_d_terc() = FALSE THEN
                    END IF
                 END IF
              ELSE
                 IF p_dados_tela.ies_nf_aguard_nfe = "T" THEN
                    IF sup376_gera_item_d_terc() = FALSE THEN
                       LET p_houve_erro = TRUE
                    END IF
                 END IF
              END IF

           IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                  p_dados_tela.num_aviso_rec,
                                                  p_dados_tela.num_nf,
                                                  p_dados_tela.ser_nf,
                                                  p_dados_tela.ssr_nf,
                                                  p_dados_tela.cod_fornecedor,
                                                  p_dados_tela.cod_operacao,
                                                  p_dados_tela.cod_fiscal_compl) = TRUE THEN
              CALL sup376_verifica_cod_fiscal_item()
           END IF

           LET p_aviso_rec_compl_sq.cod_empresa       = p_aviso_rec.cod_empresa
           LET p_aviso_rec_compl_sq.cod_empresa_estab = p_aviso_rec.cod_empresa_estab
           LET p_aviso_rec_compl_sq.num_aviso_rec     = p_aviso_rec.num_aviso_rec
           LET p_aviso_rec_compl_sq.num_seq           = p_aviso_rec.num_seq
           #LET p_aviso_rec_compl_sq.cod_fiscal_compl  = p_dados_tela.cod_fiscal_compl
           LET p_aviso_rec_compl_sq.val_base_d_ipi_it = 0

            IF p_aviso_rec_compl_sq.cod_fiscal_compl IS NULL THEN
               LET p_aviso_rec_compl_sq.cod_fiscal_compl = 0
            END IF

            LET p_aviso_rec_compl_sq.dat_ini_garantia = NULL
            LET p_aviso_rec_compl_sq.dat_fim_garantia = NULL

           INSERT INTO aviso_rec_compl_sq VALUES (p_aviso_rec_compl_sq.*)
           IF sqlca.sqlcode <> 0  THEN
              CALL log003_err_sql("INCLUSAO","AVISO_REC_COMPL_SQ")
              LET p_houve_erro = TRUE
           END IF

           CALL sup376_gera_iss()

           #--------------------------#
           # Alteração WMS OS: 450083 #
           #--------------------------#
           # Passo 28                 #
           IF NOT p_houve_erro THEN
              IF m_wms_instal = "S" THEN
                 CALL wms0004_item_sob_controle_wms(p_cod_empresa, p_aviso_rec.cod_item) RETURNING l_sqlcode, l_status
                 IF l_sqlcode = FALSE THEN
                    LET p_houve_erro = TRUE
                 END IF
                 IF l_status AND p_houve_erro = FALSE THEN
                    IF p_dados_tela.ies_nf_aguard_nfe = "A" OR
                       p_dados_tela.ies_nf_aguard_nfe = "B" THEN
                       CALL wmst15_retorna_contrato_ativo_deposit(p_cod_empresa,
                                                                  m_wms_depositante,
                                                                  TODAY,
                                                                  0) RETURNING l_contrato, l_status
                       IF l_contrato <> "0" THEN
                          LET l_trans_contrato = wmst15_wms_contrato_busca_transacao(p_cod_empresa,
                                                                                     l_contrato)
                          IF wmsm15_wms_contrato_leitura(p_cod_empresa,
                                                         l_trans_contrato,
                                                         TRUE,1) THEN
                             # Passo 28.1 #
                             IF wmsm15_wms_contrato_get_altera_tip_estoque_nota_fiscal() = "N" THEN
                                LET l_tip_estoque = wmst129_retorna_tip_estoque_padrao(p_cod_empresa,
                                                                                       m_wms_depositante,
                                                                                       0)
                                WHENEVER ERROR CONTINUE
                                INSERT INTO sup_par_ar (empresa,
                                                        aviso_recebto,
                                                        seq_aviso_recebto,
                                                        parametro,
                                                        par_ind_especial,
                                                        parametro_texto,
                                                        parametro_val,
                                                        parametro_dat)
                                                        VALUES (p_cod_empresa,
                                                                p_aviso_rec.num_aviso_rec, #p_nf_sup.num_aviso_rec,
                                                                p_aviso_rec.num_seq,
                                                                "tip_estoque",
                                                                NULL,
                                                                l_tip_estoque,
                                                                NULL,
                                                                NULL)
                                WHENEVER ERROR STOP
                                IF sqlca.sqlcode <> 0 THEN
                                   CALL log003_err_sql("INCLUSAO","SUP_PAR_AR - WMS")
                                   LET p_houve_erro = TRUE
                                END IF
                             END IF
                          END IF
                       ELSE
                          CALL log0030_processa_mensagem("Não existe contrato ativo para este depositante.","exclamation",0)
                          LET p_houve_erro = TRUE
                       END IF
                    END IF
                 END IF
              END IF
           END IF
           # FIM -----------------------------------------#

        ELSE
           EXIT FOR
        END IF
    END FOR

    IF sup3760_verifica_fornec_incl_regime_compex(p_cod_empresa,
                                                  p_dados_tela.dat_emis_nf,
                                                  p_dados_tela.cod_fornecedor) THEN
       CALL sup3760_exclusao_inclusao_item_compex(p_cod_empresa,
                                                  p_aviso_rec.num_aviso_rec)
    END IF

    ### OS331455 ###
    IF sup1149_efetua_rateio_contabil() THEN
       IF sup1149_rateio_contabil(p_dados_tela.num_aviso_rec) = FALSE THEN
          LET p_houve_erro = TRUE
       END IF
    END IF
    ### FIM OS331455 ###

    IF p_houve_erro = FALSE THEN
       WHENEVER ERROR CONTINUE
           CALL log085_transacao("COMMIT")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INCLUSAO","AVISO_REC")
          CALL log085_transacao("ROLLBACK") #OS596059
       ELSE
       MESSAGE " Inclusao de itens da NOTA FISCAL efetuada com sucesso "
                ATTRIBUTE(REVERSE)
       LET p_cod_empresa_arg = p_cod_empresa
       LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
       CALL sup376_busca_argumen()
       SELECT *
         FROM nf_sup_erro
        WHERE nf_sup_erro.empresa = p_cod_empresa
          AND nf_sup_erro.num_aviso_rec = p_dados_tela.num_aviso_rec
          AND nf_sup_erro.num_seq   = 0
          AND nf_sup_erro.des_pendencia_item =  "Falta efetuar consistencia"
          AND nf_sup_erro.ies_origem_erro = "1"
       IF sqlca.sqlcode <> 0 THEN
          INSERT INTO nf_sup_erro ( empresa, num_aviso_rec, num_seq, des_pendencia_item, ies_origem_erro, ies_erro_grave )  VALUES ( p_dados_tela.cod_empresa,
                                         p_dados_tela.num_aviso_rec,
                                         0,
                                         "Falta efetuar consistencia",
                                         "1",
                                         "S"
)
          IF sqlca.sqlcode <> 0 THEN
             LET p_houve_erro = TRUE
          END IF
       END IF
       CALL sup376_manut_item_terc()
       IF p_dados_tela.ies_nf_aguard_nfe <> "4" THEN
          IF ((p_ies_tip_entrada = "6" OR
              p_ies_tip_entrada = "4") OR
             (sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                  p_dados_tela.num_aviso_rec,
                                                  p_dados_tela.num_nf,
                                                  p_dados_tela.ser_nf,
                                                  p_dados_tela.ssr_nf,
                                                  p_dados_tela.cod_fornecedor,
                                                  p_dados_tela.cod_operacao,
                                                  p_dados_tela.cod_fiscal_compl) = FALSE AND
             p_ies_tip_entrada = "2")) AND
            (m_wms_instal = "N"      OR
            (m_wms_instal = "S"      AND
             p_dados_tela.ies_nf_aguard_nfe <> "A"   AND
             p_dados_tela.ies_nf_aguard_nfe <> "B")) THEN
             IF p_dados_tela.ies_nf_aguard_nfe <> "T" AND
                #INICIO OS.472270
                (p_mot_remes_terc IS NULL OR
                 p_mot_remes_terc = " " OR
                 m_ies_msg_contr_terc = 'S') THEN
                #FIM OS.472270
                IF p_dados_tela.ies_nf_aguard_nfe <> "4" AND
                   p_dados_tela.ies_nf_aguard_nfe <> "5" THEN
                   IF  p_dados_tela.ies_nf_aguard_nfe = "A"
                   #OR   p_dados_tela.ies_nf_aguard_nfe = "B")
                   AND sup3760_existe_cadastro_triangulacao()
                   AND p_dados_tela.ies_especie_nf = "NFR" THEN
                      CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq) RETURNING l_cod_fornecedor
                      CALL log120_procura_caminho("sup2270") RETURNING comando3
                      LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                                           p_dados_tela.ser_nf," ",
                                                           p_dados_tela.ssr_nf," ",
                                                           p_dados_tela.ies_especie_nf," ",
                                                           l_cod_fornecedor," ",
                                                           "@"," ","@"," ","@"," ",
                                                           p_cod_empresa
                      RUN comando3 RETURNING p_cancel
                   ELSE
                   ERROR "Controlar Material de TERCEIROS ??? " ATTRIBUTE(reverse)
                   IF log004_confirm(21,43) THEN
                         ERROR "Material da EMPRESA ??? " ATTRIBUTE (reverse)
                         IF p_dados_tela.ser_nf = " " OR
                            p_dados_tela.ser_nf IS NULL THEN
                               LET p_dados_tela.ser_nf = "@"
                         END IF
                         IF log004_confirm(21,43) THEN
                            #-- OS 562700 inicio --#
                            IF m_ies_nf_remessa_x_especie <> 0 THEN
                               IF (m_ies_nf_remessa_x_especie = 1
                                   AND p_dados_tela.ies_especie_nf = "NFR")
                               OR (m_ies_nf_remessa_x_especie = 2
                                   AND p_dados_tela.ies_especie_nf = "NFE")
                               OR (m_ies_nf_remessa_x_especie = 3
                                   AND (p_dados_tela.ies_especie_nf = "NFE"
                                        OR p_dados_tela.ies_especie_nf = "NFR") ) THEN
                                  CALL sup3760_controla_nf_remessa_retorno()
                               END IF
                            ELSE
                            #-- OS 562700 fim --#
                               CALL log120_procura_caminho("sup2290") RETURNING comando3
                               LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                                                    p_dados_tela.ser_nf," ",
                                                                    p_dados_tela.ssr_nf," ",
                                                                    p_dados_tela.ies_especie_nf," ",
                                                                    p_dados_tela.cod_fornecedor," ",
                                                                    "@"," ",p_cod_empresa
                               RUN comando3 RETURNING p_cancel
                            END IF
                         ELSE
                         ## OS 407088
                            CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq) RETURNING l_cod_fornecedor
                            CALL log120_procura_caminho("sup2270") RETURNING comando3
                            LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                                                 p_dados_tela.ser_nf," ",
                                                                 p_dados_tela.ssr_nf," ",
                                                                 p_dados_tela.ies_especie_nf," ",
                                                                 l_cod_fornecedor," ",
                                                                 "@"," ","@"," ","@"," ",
                                                                 p_cod_empresa
                            RUN comando3 RETURNING p_cancel
                         END IF
                         IF p_dados_tela.ser_nf = "@" THEN
                               LET p_dados_tela.ser_nf = " "
                         END IF
                      END IF
                   END IF
                END IF #OS. 472270
             END IF
          END IF
          IF NOT sup3762_consiste_nf_incluida_no_cap_contab(p_ies_pagamento, 0, "2",
                                                            m_consiste_nf_integr) THEN

             IF m_cons_modific = "S" THEN
                CALL sup376_processa_consistencia("N")
             ELSE
                IF sup3731_gera_erro_consistencia(p_dados_tela.num_aviso_rec) = FALSE THEN
                END IF
             END IF

             CALL sup0047_rateio_frete()
          END IF
       END IF

       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       # Passo 28                 #
       IF p_houve_erro = FALSE THEN
          IF p_dados_tela.ies_nf_aguard_nfe = "A" OR
             p_dados_tela.ies_nf_aguard_nfe = "B" THEN
             CALL wmst15_retorna_contrato_ativo_deposit(p_cod_empresa,
                                                        m_wms_depositante,
                                                        TODAY,
                                                        0) RETURNING l_contrato, l_status
             IF l_contrato <> "0" THEN
                LET l_trans_contrato = wmst15_wms_contrato_busca_transacao(p_cod_empresa,
                                                                           l_contrato)
                IF wmsm15_wms_contrato_leitura(p_cod_empresa,
                                               l_trans_contrato,
                                               TRUE,1) THEN
                   # Passo 28.1 #
                   IF wmsm15_wms_contrato_get_altera_tip_estoque_nota_fiscal() <> "N" THEN
                      # Passo 28.2 #
                      CALL log120_procura_caminho("wms6132") RETURNING l_comando
                      LET l_comando = l_comando CLIPPED, " '",p_cod_empresa CLIPPED,"' ",
                                                         p_nf_sup.num_aviso_rec,
                                                         " 'S' ",
                                                         " 'S' "
                      RUN l_comando RETURNING p_cancel
                   END IF
                END IF
             ELSE
                CALL log0030_processa_mensagem("Não existe contrato ativo para este depositante.","exclamation",0)
                LET p_houve_erro = TRUE
             END IF
          END IF
       END IF
       #---------------#

       CURRENT WINDOW IS w_sup37601
       DISPLAY BY NAME p_dados_tela.*
       DISPLAY BY NAME p_dados_tela_f.*,
                       p_formonly.raz_social,
                       p_formonly.des_cnd_pgto,
                       p_formonly.tex_tip_frete
       END IF
    ELSE
       CALL log085_transacao("ROLLBACK")
       CALL log003_err_sql("INCLUSAO","AVISO_REC")
    END IF
 ELSE
    CLEAR FORM
    INITIALIZE p_array TO NULL
    INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
    INITIALIZE p_dados_telar.* TO NULL
    INITIALIZE p_formonly.* TO NULL
    INITIALIZE p_formonlyr.* TO NULL
     DISPLAY "                                                             "  AT 9,11
    ERROR " Inclusao Cancelada. "
    LET p_houve_erro = TRUE
    LET p_cod_empresa_arg = p_cod_empresa
    LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
    CALL sup376_busca_argumen()
 END IF
 LET p_inclu_item = "N"
 END FUNCTION

#-- OS 562700 inicio --#
#------------------------------------#
 FUNCTION sup3760_executa_declare()
#------------------------------------#
 DEFINE l_sql_stmt       CHAR(3000)

  LET l_sql_stmt =
      " SELECT sup_itterc_grade.grade_1            , ",
      "        sup_itterc_grade.grade_2            , ",
      "        sup_itterc_grade.grade_3            , ",
      "        sup_itterc_grade.grade_4            , ",
      "        sup_itterc_grade.grade_5            , ",
      "        sup_itterc_grade.endereco           , ",
      "        sup_itterc_grade.num_volume         , ",
      "        sup_itterc_grade.dat_hor_producao   , ",
      "        sup_itterc_grade.dat_hor_valid      , ",
      "        sup_itterc_grade.peca               , ",
      "        sup_itterc_grade.serie_peca         , ",
      "        sup_itterc_grade.comprimento        , ",
      "        sup_itterc_grade.largura            , ",
      "        sup_itterc_grade.altura             , ",
      "        sup_itterc_grade.diametro             ",
      "   FROM item_em_terc, sup_itterc_grade        ",
      "  WHERE item_em_terc.cod_empresa    = '", p_cod_empresa ,"' ",
      "    AND item_em_terc.num_nf         = ? ",
      "    AND item_em_terc.num_sequencia  = ? ",
      "    AND item_em_terc.cod_fornecedor = ? ",
      "    AND item_em_terc.cod_empresa    = sup_itterc_grade.empresa     ",
      "    AND item_em_terc.num_nf         = sup_itterc_grade.nota_fiscal ",
      "    AND item_em_terc.num_sequencia  = sup_itterc_grade.seq_item_nf ",
      "    AND item_em_terc.cod_fornecedor = sup_itterc_grade.fornecedor  "
  WHENEVER ERROR STOP

  WHENEVER ERROR CONTINUE
  PREPARE var_ret_igual_remessa FROM l_sql_stmt
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("PREPARE","VAR_RET_IGUAL_REMESSA")
  END IF

  WHENEVER ERROR CONTINUE
  DECLARE cq_ret_igual_remessa CURSOR WITH HOLD FOR var_ret_igual_remessa
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","CQ_RET_IGUAL_REMESSA")
  END IF

  FREE var_ret_igual_remessa

  ############################

 END FUNCTION
#-----------------------------------------------#
 FUNCTION sup3760_controla_nf_remessa_retorno()
#-----------------------------------------------#
 DEFINE l_msg     CHAR(200),
        l_ind     SMALLINT

  CALL log130_procura_caminho("sup3760v") RETURNING comando3
  OPEN WINDOW w_sup3760v AT 02,06 WITH FORM comando3
       ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST)

  IF p_par_estoque.dat_prx_fecha_est > p_par_estoque.dat_fecha_ult_sup THEN
     LET m_dat_prx_fecha_est = MDY(MONTH(p_par_estoque.dat_prx_fecha_est),
                                "01",
                                YEAR(p_par_estoque.dat_prx_fecha_est))
  ELSE
     IF p_par_estoque.dat_prx_fecha_est = p_par_estoque.dat_fecha_ult_sup THEN
        LET m_dat_prx_fecha_est = MDY(MONTH(p_par_estoque.dat_prx_fecha_est),
                                  "01",
                                  YEAR(p_par_estoque.dat_prx_fecha_est))
        LET m_dat_prx_fecha_est = m_dat_prx_fecha_est + 1 UNITS MONTH
     END IF
  END IF

  DISPLAY p_cod_empresa TO cod_empresa

  CALL sup3760_executa_declare()

  CALL sup3760_busca_nf_relac()

  MENU "OPÇÃO"
    COMMAND "Modificar" "Modifica relacionamento das NFs."
      HELP 009
      MESSAGE ""
      IF log005_seguranca(p_user,"SUPRIMEN","SUP2031","MO") THEN
         IF ma_tela_relac_nf_rem_retorno[1].num_nf IS NOT NULL
         OR ma_tela_relac_nf_rem_retorno[1].num_nf <> " " THEN
            CALL sup3760_altera_nf_remessa_retorno()
            CALL sup3760_busca_nf_relac()
         END IF
      END IF

    COMMAND "Excluir" "Exclui o relacionamento das NFs."
      HELP 010
      MESSAGE ""
      LET int_flag = 0
      IF mr_tela_relac_nf_rem_retorno.num_aviso_rec IS NOT NULL THEN
         IF log0040_confirm(19,22,"Deseja realmente excluir?") THEN
            FOR l_ind = 1 TO 500
               IF ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida > 0 THEN
                  IF ma_tela_relac_nf_rem_retorno[l_ind].dat_emis_nf >= m_dat_prx_fecha_est THEN
                     IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","EX") THEN
                          IF sup3760_nota_cancelada() THEN
                             CALL log0030_mensagem("Nota fiscal cancelada.","info")
                             EXIT FOR
                          ELSE
                              IF ma_tela_relac_nf_compl[l_ind].ies_incl_contab <> "N"
                              AND sup3760_verifica_mot_remessa_contab(l_ind) THEN
                                 CALL log0030_mensagem(" Antes de excluir a Nota, exclua os Lanctos Contábeis.", "info")
                              ELSE
                                 CALL sup3760_exclui_relacionamento(l_ind)
                              END IF
                          END IF
                     END IF
                  ELSE
                     LET l_msg = "Data de Entrada ", ma_tela_relac_nf_rem_retorno[l_ind].dat_emis_nf CLIPPED, " anterior que mês/ano da data do próximo fechamento de estoque."
                     CALL log0030_mensagem(l_msg, "info")
                  END IF
               END IF
            END FOR
            CALL sup3760_busca_nf_relac()
         END IF
      ELSE
         CALL log0030_mensagem(" Consulte previamente para fazer a exclusao ", "info")
      END IF

    COMMAND "Seguinte" "Exibe próximo item da NF."
      HELP 010
      MESSAGE ""
      IF log005_seguranca(p_user,"SUPRIMEN","SUP2031","IN") THEN
         CALL sup3760_paginacao_nf_relac("SEGUINTE")
      END IF

    COMMAND "Anterior" "Exibe item anterior da NF."
      HELP 010
      MESSAGE ""
      IF log005_seguranca(p_user,"SUPRIMEN","SUP2031","IN") THEN
         CALL sup3760_paginacao_nf_relac("ANTERIOR")
      END IF

    COMMAND KEY ("!")
      PROMPT "Digite o comando: " FOR m_comando
      RUN m_comando
      PROMPT "\nTecle <ENTER> para continuar." FOR CHAR m_comando
      DATABASE logix

    COMMAND "Fim" "Retorna ao menu anterior."
      HELP 008
      MESSAGE  ""
      EXIT MENU
  END MENU
  CLOSE WINDOW w_sup3760v

 END FUNCTION

#---------------------------------------------#
 FUNCTION sup3760_verifica_mot_remessa_contab(l_ind)
#---------------------------------------------#
   DEFINE l_cod_motivo_remessa  LIKE motivo_remessa.cod_motivo_remessa,
          l_ind                 SMALLINT

     INITIALIZE l_cod_motivo_remessa TO NULL

     WHENEVER ERROR CONTINUE
     DECLARE cq_remessa CURSOR FOR
     SELECT cod_motivo_remessa
       FROM item_em_terc
      WHERE cod_empresa    = p_cod_empresa
        AND num_nf         = ma_tela_relac_nf_rem_retorno[l_ind].num_nf
        AND num_sequencia  = ma_tela_relac_nf_rem_retorno[l_ind].num_sequencia
        AND cod_fornecedor = mr_tela_relac_nf_rem_retorno.cod_fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DECLARE","CQ_REMESSA")
     END IF

     WHENEVER ERROR CONTINUE
     FOREACH cq_remessa INTO l_cod_motivo_remessa
     IF sqlca.sqlcode < 0 THEN
        CALL log003_err_sql("FOREACH","CQ_REMESSA")
        EXIT FOREACH
     END IF
      EXIT FOREACH
     END FOREACH
     WHENEVER ERROR STOP
     FREE cq_remessa

     IF l_cod_motivo_remessa IS NOT NULL AND
        l_cod_motivo_remessa <> " " THEN
        WHENEVER ERROR CONTINUE
        SELECT ies_contabiliza
          FROM motivo_remessa
         WHERE cod_empresa        = p_cod_empresa
           AND cod_motivo_remessa = l_cod_motivo_remessa
           AND ies_contabiliza    = "S"
        WHENEVER ERROR STOP

        IF sqlca.sqlcode = 0 THEN
           RETURN TRUE
        ELSE
           RETURN FALSE
        END IF
     ELSE
        RETURN FALSE
     END IF

 END FUNCTION

#--------------------------------#
 FUNCTION sup3760_nota_cancelada()
#--------------------------------#

  WHENEVER ERROR CONTINUE
  SELECT 1 FROM aviso_rec_compl
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_dados_tela.num_aviso_rec
     AND ies_situacao = "C"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     RETURN TRUE
  ELSE
     RETURN FALSE
  END IF

 END FUNCTION

#-----------------------------------------#
 FUNCTION sup3760_exclui_msg_nf_sup_erro(l_num_seq)
#-----------------------------------------#
 DEFINE l_num_seq     LIKE nf_sup_erro.num_seq

  WHENEVER ERROR CONTINUE
  DELETE FROM nf_sup_erro
        WHERE nf_sup_erro.empresa            = p_cod_empresa
          AND nf_sup_erro.num_aviso_rec      = p_dados_tela.num_aviso_rec
          AND nf_sup_erro.num_seq            = l_num_seq
          AND nf_sup_erro.des_pendencia_item = 'NF de retorno não relacionada com a NF de remessa.'
  WHENEVER ERROR STOP
  IF sqlca.sqlcode < 0 THEN
     CALL log003_err_sql("DELETE","NF_SUP_ERRO")
  END IF

 END FUNCTION

#--------------------------------------#
 FUNCTION sup3760_insere_erro_nf_sup(l_num_seq, l_msg)
#--------------------------------------#
  DEFINE l_num_seq    LIKE aviso_rec.num_seq,
         l_msg        CHAR(100)

  WHENEVER ERROR CONTINUE
   INSERT INTO nf_sup_erro (empresa,
                            num_aviso_rec,
                            num_seq,
                            des_pendencia_item,
                            ies_origem_erro,
                            ies_erro_grave)
                    VALUES (p_cod_empresa,
                            p_dados_tela.num_aviso_rec,
                            l_num_seq,
                            l_msg,
                            "1",
                            "N")
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("INCLUSAO","NF_SUP_ERRO_1")
 END IF

 END FUNCTION

#-----------------------------------------#
 FUNCTION sup3760_exclui_relacionamento(l_ind)
#-----------------------------------------#
 DEFINE l_ind          SMALLINT

  CALL log120_procura_caminho("sup2290") RETURNING comando3
  LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                       p_dados_tela.ser_nf," ",
                                       p_dados_tela.ssr_nf," ",
                                       p_dados_tela.ies_especie_nf," ",
                                       p_dados_tela.cod_fornecedor," ",
                                       mr_tela_relac_nf_rem_retorno.num_seq," ",
                                       p_cod_empresa, " ", "1"{1=background}, " ",
                                       "EXCLUSAO ",
                                       ma_tela_relac_nf_rem_retorno[l_ind].num_nf, " ",
                                       ma_tela_relac_nf_rem_retorno[l_ind].num_sequencia, " ",
                                       ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida

  RUN comando3 RETURNING p_cancel

  ERROR "Exclusão efetuado com sucesso."
  CALL log_refresh_display()

 END FUNCTION

#----------------------------------------#
 FUNCTION sup3760_busca_nf_relac()
#----------------------------------------#
 DEFINE l_qtd_devolvida     LIKE item_em_terc.qtd_tot_remessa,
        l_ind               SMALLINT

  INITIALIZE mr_tela_relac_nf_rem_retorno.*, ma_tela_relac_nf_rem_retorno, ma_tela_relac_nf_compl TO NULL

  LET m_eh_modificacao = FALSE

  WHENEVER ERROR CONTINUE
  DECLARE cq_aviso_rec_relac SCROLL CURSOR WITH HOLD FOR
  SELECT num_aviso_rec,
         num_seq,
         cod_item,
         qtd_declarad_nf
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa   = p_cod_empresa
     AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","CQ_AVISO_REC_RELAC")
     RETURN
  END IF

  WHENEVER ERROR CONTINUE
  OPEN cq_aviso_rec_relac
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("OPEN CURSOR","CQ_AVISO_REC_RELAC")
     RETURN
  END IF

  WHENEVER ERROR CONTINUE
  FETCH cq_aviso_rec_relac INTO mr_tela_relac_nf_rem_retorno.num_aviso_rec,
                                mr_tela_relac_nf_rem_retorno.num_seq,
                                mr_tela_relac_nf_rem_retorno.cod_item,
                                mr_tela_relac_nf_rem_retorno.qtd_declarad_nf
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF sqlca.sqlcode = NOTFOUND THEN
        CALL log0030_mensagem("Argumentos de pesquisa não encontrados.","info")
     ELSE
        CALL log003_err_sql("FETCH CURSOR","CQ_AVISO_REC_RELAC")
     END IF
     CLOSE cq_aviso_rec_relac
     FREE cq_aviso_rec_relac
     RETURN
  END IF

  CALL sup3760_busca_den_item(mr_tela_relac_nf_rem_retorno.cod_item) RETURNING p_status
  LET mr_tela_relac_nf_rem_retorno.cod_fornecedor   = p_dados_tela.cod_fornecedor
  LET mr_tela_relac_nf_rem_retorno.raz_social_reduz = sup3760_busca_raz_social_reduz(p_dados_tela.cod_fornecedor)
  LET mr_tela_relac_nf_rem_retorno.den_item_reduz   = m_den_item

  IF sup3760_eh_alteracao() THEN
     LET m_eh_modificacao = TRUE
  END IF

  CALL sup3760_busca_nf_remessa()

  CALL sup3760_exibe_nf_remessa_retorno()

  ERROR "Quantidade declarada: ", mr_tela_relac_nf_rem_retorno.qtd_declarad_nf CLIPPED
  CALL log_refresh_display()

 END FUNCTION

#-----------------------------------#
 FUNCTION sup3760_busca_nf_remessa()
#-----------------------------------#
 DEFINE l_ind             SMALLINT,
        l_qtd_devolvida   LIKE item_em_terc.qtd_tot_remessa

 INITIALIZE ma_tela_relac_nf_rem_retorno, ma_tela_relac_nf_compl TO NULL

 LET m_tot_qtd_devolvida = 0

 CALL sup0063_verifica_controles(12,
                                mr_tela_relac_nf_rem_retorno.cod_item,
                                "INCLUSAO",
                                "SUP2290") RETURNING m_controles

 WHENEVER ERROR CONTINUE
 DECLARE cq_item_em_terc CURSOR WITH HOLD FOR
 SELECT item_em_terc.dat_emis_nf,
        item_em_terc.num_nf,
        item_em_terc.num_sequencia,
        (item_em_terc.qtd_tot_remessa - item_em_terc.qtd_tot_recebida),
        item_em_terc.ies_incl_contab
   FROM item_em_terc
  WHERE item_em_terc.cod_empresa    = p_cod_empresa
    AND item_em_terc.cod_item       = mr_tela_relac_nf_rem_retorno.cod_item
    AND item_em_terc.cod_fornecedor = mr_tela_relac_nf_rem_retorno.cod_fornecedor
  ORDER BY item_em_terc.dat_emis_nf
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("SELECAO","ITEM_EM_TERC")
    END IF
    RETURN
 END IF

 WHENEVER ERROR CONTINUE
 OPEN cq_item_em_terc
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("OPEN","CQ_ITEM_EM_TERC")
 END IF

 LET l_ind = 1

 WHILE TRUE
    WHENEVER ERROR CONTINUE
    FETCH cq_item_em_terc INTO ma_tela_relac_nf_rem_retorno[l_ind].dat_emis_nf,
                               ma_tela_relac_nf_rem_retorno[l_ind].num_nf,
                               ma_tela_relac_nf_rem_retorno[l_ind].num_sequencia,
                               ma_tela_relac_nf_rem_retorno[l_ind].qtd_saldo,
                               ma_tela_relac_nf_compl[l_ind].ies_incl_contab
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       IF sqlca.sqlcode <> 100 THEN
          CALL log003_err_sql("FETCH","CQ_ITEM_EM_TERC")
       END IF
       EXIT WHILE
    END IF
    IF NOT m_eh_modificacao THEN
       IF ma_tela_relac_nf_rem_retorno[l_ind].qtd_saldo = 0 THEN
          LET ma_tela_relac_nf_rem_retorno[l_ind].dat_emis_nf   = NULL
          LET ma_tela_relac_nf_rem_retorno[l_ind].num_nf        = NULL
          LET ma_tela_relac_nf_rem_retorno[l_ind].num_sequencia = NULL
          LET ma_tela_relac_nf_rem_retorno[l_ind].qtd_saldo     = NULL
          CONTINUE WHILE
       END IF
    END IF

    IF m_controles <> " " THEN
    # Verifica se a grade dimensional que está sendo retornada é a mesma da remessa
       IF sup3760_informou_sup_ar_grade() THEN
          IF NOT sup3760_grade_dimen_ret_igual_remessa(ma_tela_relac_nf_rem_retorno[l_ind].num_nf,
                                                       ma_tela_relac_nf_rem_retorno[l_ind].num_sequencia,
                                                       mr_tela_relac_nf_rem_retorno.cod_fornecedor) THEN
             LET ma_tela_relac_nf_rem_retorno[l_ind].dat_emis_nf   = NULL
             LET ma_tela_relac_nf_rem_retorno[l_ind].num_nf        = NULL
             LET ma_tela_relac_nf_rem_retorno[l_ind].num_sequencia = NULL
             LET ma_tela_relac_nf_rem_retorno[l_ind].qtd_saldo     = NULL
             CONTINUE WHILE
          END IF
       END IF
    END IF

    WHENEVER ERROR CONTINUE
    SELECT SUM(qtd_devolvida)
      INTO l_qtd_devolvida
      FROM item_ret_terc
     WHERE item_ret_terc.cod_empresa      = p_cod_empresa
       AND item_ret_terc.num_nf           = p_dados_tela.num_nf
       AND item_ret_terc.ser_nf           = p_dados_tela.ser_nf
       AND item_ret_terc.ssr_nf           = p_dados_tela.ssr_nf
       AND item_ret_terc.ies_especie_nf   = p_dados_tela.ies_especie_nf
       AND item_ret_terc.cod_fornecedor   = p_dados_tela.cod_fornecedor
       AND item_ret_terc.num_sequencia_ar = mr_tela_relac_nf_rem_retorno.num_seq
       AND item_ret_terc.num_nf_remessa   = ma_tela_relac_nf_rem_retorno[l_ind].num_nf
       AND item_ret_terc.num_sequencia_nf = ma_tela_relac_nf_rem_retorno[l_ind].num_sequencia
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       IF l_qtd_devolvida > 0 THEN
          LET ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida = l_qtd_devolvida
       ELSE
          IF m_eh_modificacao
          AND ma_tela_relac_nf_rem_retorno[l_ind].qtd_saldo = 0 THEN
             LET ma_tela_relac_nf_rem_retorno[l_ind].dat_emis_nf   = NULL
             LET ma_tela_relac_nf_rem_retorno[l_ind].num_nf        = NULL
             LET ma_tela_relac_nf_rem_retorno[l_ind].num_sequencia = NULL
             LET ma_tela_relac_nf_rem_retorno[l_ind].qtd_saldo     = NULL
             CONTINUE WHILE
          END IF
          LET ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida = 0
       END IF
    END IF

    LET l_ind = l_ind + 1

 END WHILE

 CALL set_count(l_ind - 1)

 ERROR "Quantidade declarada: ", mr_tela_relac_nf_rem_retorno.qtd_declarad_nf CLIPPED
 CALL log_refresh_display()

 END FUNCTION

#--------------------------------------------#
 FUNCTION sup3760_informou_sup_ar_grade()
#--------------------------------------------#

   WHENEVER ERROR CONTINUE
   SELECT 1
     FROM sup_ar_grade
    WHERE sup_ar_grade.empresa        = p_cod_empresa
      AND sup_ar_grade.aviso_recebto  = mr_tela_relac_nf_rem_retorno.num_aviso_rec
   WHENEVER ERROR STOP
   IF sqlca.sqlcode = 0
   OR sqlca.sqlcode = -284 THEN
      RETURN TRUE
   ELSE
      RETURN FALSE
   END IF

 END FUNCTION

#----------------------------------------------------------------#
 FUNCTION sup3760_grade_dimen_ret_igual_remessa(l_num_nf,
                                                l_num_sequencia,
                                                l_cod_fornecedor)
#----------------------------------------------------------------#
 DEFINE l_num_nf         LIKE item_em_terc.num_nf,
        l_num_sequencia  LIKE item_em_terc.num_sequencia,
        l_cod_fornecedor LIKE item_em_terc.cod_fornecedor
 DEFINE lr_sup_itterc_grade RECORD
                            grade_1            LIKE sup_itterc_grade.grade_1            ,
                            grade_2            LIKE sup_itterc_grade.grade_2            ,
                            grade_3            LIKE sup_itterc_grade.grade_3            ,
                            grade_4            LIKE sup_itterc_grade.grade_4            ,
                            grade_5            LIKE sup_itterc_grade.grade_5            ,
                            endereco           LIKE sup_itterc_grade.endereco           ,
                            num_volume         LIKE sup_itterc_grade.num_volume         ,
                            dat_hor_producao   LIKE sup_itterc_grade.dat_hor_producao   ,
                            dat_hor_valid      LIKE sup_itterc_grade.dat_hor_valid      ,
                            peca               LIKE sup_itterc_grade.peca               ,
                            serie_peca         LIKE sup_itterc_grade.serie_peca         ,
                            comprimento        LIKE sup_itterc_grade.comprimento        ,
                            largura            LIKE sup_itterc_grade.largura            ,
                            altura             LIKE sup_itterc_grade.altura             ,
                            diametro           LIKE sup_itterc_grade.diametro
                            END RECORD
  DEFINE l_existe_nota_de_retorno SMALLINT

  LET l_existe_nota_de_retorno = FALSE

  WHENEVER ERROR CONTINUE
  OPEN cq_ret_igual_remessa USING l_num_nf        ,
                                  l_num_sequencia ,
                                  l_cod_fornecedor

  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("OPEN","CQ_RET_IGUAL_REMESSA")
  END IF

  WHILE TRUE
    WHENEVER ERROR CONTINUE
    FETCH cq_ret_igual_remessa INTO lr_sup_itterc_grade.grade_1            ,
                                    lr_sup_itterc_grade.grade_2            ,
                                    lr_sup_itterc_grade.grade_3            ,
                                    lr_sup_itterc_grade.grade_4            ,
                                    lr_sup_itterc_grade.grade_5            ,
                                    lr_sup_itterc_grade.endereco           ,
                                    lr_sup_itterc_grade.num_volume         ,
                                    lr_sup_itterc_grade.dat_hor_producao   ,
                                    lr_sup_itterc_grade.dat_hor_valid      ,
                                    lr_sup_itterc_grade.peca               ,
                                    lr_sup_itterc_grade.serie_peca         ,
                                    lr_sup_itterc_grade.comprimento        ,
                                    lr_sup_itterc_grade.largura            ,
                                    lr_sup_itterc_grade.altura             ,
                                    lr_sup_itterc_grade.diametro
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       IF sqlca.sqlcode <> 100 THEN
          CALL log003_err_sql("FETCH","CQ_RET_IGUAL_REMESSA")
       END IF
       EXIT WHILE
    END IF

    WHENEVER ERROR CONTINUE
    SELECT 1
      FROM sup_ar_grade
     WHERE sup_ar_grade.empresa           = p_cod_empresa
       AND sup_ar_grade.aviso_recebto     = mr_tela_relac_nf_rem_retorno.num_aviso_rec
       AND sup_ar_grade.seq_aviso_recebto = mr_tela_relac_nf_rem_retorno.num_seq
       AND sup_ar_grade.endereco          = lr_sup_itterc_grade.endereco
       AND sup_ar_grade.num_volume        = lr_sup_itterc_grade.num_volume
       AND sup_ar_grade.grade_1           = lr_sup_itterc_grade.grade_1
       AND sup_ar_grade.grade_2           = lr_sup_itterc_grade.grade_2
       AND sup_ar_grade.grade_3           = lr_sup_itterc_grade.grade_3
       AND sup_ar_grade.grade_4           = lr_sup_itterc_grade.grade_4
       AND sup_ar_grade.grade_5           = lr_sup_itterc_grade.grade_5
       AND sup_ar_grade.dat_hor_producao  = lr_sup_itterc_grade.dat_hor_producao
       AND sup_ar_grade.dat_hor_valid     = lr_sup_itterc_grade.dat_hor_valid
       AND sup_ar_grade.peca              = lr_sup_itterc_grade.peca
       AND sup_ar_grade.serie_peca        = lr_sup_itterc_grade.serie_peca
       AND sup_ar_grade.comprimento       = lr_sup_itterc_grade.comprimento
       AND sup_ar_grade.largura           = lr_sup_itterc_grade.largura
       AND sup_ar_grade.altura            = lr_sup_itterc_grade.altura
       AND sup_ar_grade.diametro          = lr_sup_itterc_grade.diametro
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0
    OR sqlca.sqlcode = -284 THEN
       LET l_existe_nota_de_retorno = TRUE
    END IF

    IF l_existe_nota_de_retorno THEN
       EXIT WHILE
    END IF

  END WHILE
  CLOSE cq_ret_igual_remessa

  IF l_existe_nota_de_retorno THEN
     RETURN TRUE
  ELSE
     RETURN FALSE
  END IF


 END FUNCTION

#------------------------------------------#
 FUNCTION sup3760_busca_raz_social_reduz(l_cod_fornecedor)
#------------------------------------------#
 DEFINE l_raz_social_reduz      LIKE fornecedor.raz_social_reduz,
        l_cod_fornecedor        LIKE fornecedor.cod_fornecedor

 WHENEVER ERROR CONTINUE
 SELECT raz_social_reduz
   INTO l_raz_social_reduz
   FROM fornecedor
  WHERE fornecedor.cod_fornecedor = l_cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("SELECAO","FORNECEDOR")
    END IF
    RETURN "Não cadastrado"
 ELSE
    RETURN l_raz_social_reduz
 END IF

 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup3760_exibe_nf_remessa_retorno()
#-------------------------------------------------#
 DEFINE l_ind        SMALLINT

 LET l_ind = arr_count()

 DISPLAY BY NAME mr_tela_relac_nf_rem_retorno.num_aviso_rec    ,
                 mr_tela_relac_nf_rem_retorno.num_seq          ,
                 mr_tela_relac_nf_rem_retorno.cod_fornecedor   ,
                 mr_tela_relac_nf_rem_retorno.raz_social_reduz ,
                 mr_tela_relac_nf_rem_retorno.cod_item         ,
                 mr_tela_relac_nf_rem_retorno.den_item_reduz
 IF l_ind > 8 THEN
    DISPLAY ARRAY ma_tela_relac_nf_rem_retorno TO s_tela.*
    IF int_flag  THEN
       LET int_flag = 0
    ELSE
       LET l_ind = arr_curr()
    END IF
 ELSE
    DISPLAY ma_tela_relac_nf_rem_retorno[1].* TO s_tela[1].*
    DISPLAY ma_tela_relac_nf_rem_retorno[2].* TO s_tela[2].*
    DISPLAY ma_tela_relac_nf_rem_retorno[3].* TO s_tela[3].*
    DISPLAY ma_tela_relac_nf_rem_retorno[4].* TO s_tela[4].*
    DISPLAY ma_tela_relac_nf_rem_retorno[5].* TO s_tela[5].*
    DISPLAY ma_tela_relac_nf_rem_retorno[6].* TO s_tela[6].*
    DISPLAY ma_tela_relac_nf_rem_retorno[7].* TO s_tela[7].*
    DISPLAY ma_tela_relac_nf_rem_retorno[8].* TO s_tela[8].*
 END IF

 END FUNCTION

#----------------------------------------#
 FUNCTION sup3760_exibe_qtd_declarada()
#----------------------------------------#

   ERROR "Quantidade declarada: ", mr_tela_relac_nf_rem_retorno.qtd_declarad_nf CLIPPED
   CALL log_refresh_display()

 END FUNCTION

#------------------------------------------------#
 FUNCTION sup3760_altera_nf_remessa_retorno()
#------------------------------------------------#
  DEFINE l_arr_curr      SMALLINT,
         l_scr_line      SMALLINT,
         l_arr_count     SMALLINT,
         l_funcao        CHAR(20),
         l_qtd_devolvida LIKE item_em_terc.qtd_tot_recebida,
         l_ind           SMALLINT,
         l_msg           CHAR(200),
         la_qtd_devolvida_ant  ARRAY[100] OF RECORD
                               qtd_devolvida    LIKE item_em_terc.qtd_tot_recebida
                               END RECORD

   LET int_flag = FALSE

   #INITIALIZE ma_tela_relac_nf_rem_retorno, ma_tela_relac_nf_compl TO NULL

   LET m_eh_modificacao = FALSE
   INITIALIZE la_qtd_devolvida_ant TO NULL

   FOR l_ind = 1 TO 100
      LET la_qtd_devolvida_ant[l_ind].qtd_devolvida = ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida
   END FOR

   CALL log006_exibe_teclas("01 02 07", p_versao)
   CURRENT WINDOW IS w_sup3760v

   INPUT ARRAY ma_tela_relac_nf_rem_retorno WITHOUT DEFAULTS FROM s_tela.*

      BEFORE ROW
        LET l_arr_curr  = arr_curr()
        LET l_scr_line  = scr_line()
        LET l_arr_count = arr_count()

      BEFORE FIELD qtd_devolvida
         #IF sup3760_eh_alteracao(l_arr_curr) THEN
         #   LET m_eh_modificacao = TRUE
         #END IF
         IF ma_tela_relac_nf_rem_retorno[l_arr_curr].num_nf = " "
         OR ma_tela_relac_nf_rem_retorno[l_arr_curr].num_nf IS NULL THEN
            LET ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_devolvida = 0
         ELSE
            IF l_arr_curr = 1 THEN
               IF ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_devolvida IS NULL
               OR ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_devolvida = 0 THEN
                  LET ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_devolvida = mr_tela_relac_nf_rem_retorno.qtd_declarad_nf
                  DISPLAY ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_devolvida TO s_tela[l_scr_line].qtd_devolvida
               END IF
            END IF
         END IF
         CALL sup3760_exibe_qtd_declarada()

      AFTER FIELD qtd_devolvida
         IF ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_devolvida > 0 THEN
            IF ma_tela_relac_nf_rem_retorno[l_arr_curr].dat_emis_nf > p_dados_tela.dat_emis_nf THEN
               CALL log0030_mensagem("Data de remessa posterior a data da nota fiscal de retorno.","info")
               LET ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_devolvida = 0
               DISPLAY ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_devolvida TO s_tela[l_scr_line].qtd_devolvida
               NEXT FIELD qtd_devolvida
            END IF
            IF  ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_devolvida > ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_saldo THEN
               CALL log0030_mensagem("Quantidade a baixar maior que o saldo.","info")
               NEXT FIELD qtd_devolvida
            END IF
         END IF

      AFTER INPUT
         IF NOT int_flag THEN
            LET l_ind = 1
            LET l_qtd_devolvida = 0
            FOR l_ind = 1 TO 500
               IF ma_tela_relac_nf_rem_retorno[l_ind].num_nf = " "
               OR ma_tela_relac_nf_rem_retorno[l_ind].num_nf IS NULL THEN
                  EXIT FOR
               END IF

               LET l_qtd_devolvida = l_qtd_devolvida + ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida

               IF ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida > 0 THEN
                  IF ma_tela_relac_nf_rem_retorno[l_ind].dat_emis_nf > p_dados_tela.dat_emis_nf THEN
                     CALL log0030_mensagem("Existe data de remessa posterior a data da nota fiscal de retorno.","info")
                     NEXT FIELD qtd_devolvida
                  END IF
                  IF  ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida > ma_tela_relac_nf_rem_retorno[l_ind].qtd_saldo THEN
                     CALL log0030_mensagem("Existe quantidade a baixar maior que o saldo.","info")
                     NEXT FIELD qtd_devolvida
                  END IF
               END IF
            END FOR

            # Uma nf pode ter varias nf de remessa para totalizar ela, por isso é feito o FOR
            # para fazer a soma .
            IF l_qtd_devolvida <> mr_tela_relac_nf_rem_retorno.qtd_declarad_nf THEN
               LET l_msg = "Quantidade devolvida(", log0800_trim(l_qtd_devolvida)  ,") maior que a quantidade declarada da NF (", log0800_trim(mr_tela_relac_nf_rem_retorno.qtd_declarad_nf) ,")"
               CALL log0030_mensagem(l_msg,"info")
               NEXT FIELD qtd_devolvida
            END IF
         END IF

      ON KEY (f1, control-w)
         CALL sup376_help()
      ON KEY (control-z, f4)
         CASE
            WHEN INFIELD(qtd_devolvida)
            CALL log120_procura_caminho("sup2290") RETURNING comando3
            LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                                 p_dados_tela.ser_nf," ",
                                                 p_dados_tela.ssr_nf," ",
                                                 p_dados_tela.ies_especie_nf," ",
                                                 p_dados_tela.cod_fornecedor," ",
                                                 mr_tela_relac_nf_rem_retorno.num_seq," ",
                                                 p_cod_empresa, " ", "1"{1=background}, " ",
                                                 "MODIFICACAO"," ",
                                                 ma_tela_relac_nf_rem_retorno[l_arr_curr].num_nf, " ",
                                                 ma_tela_relac_nf_rem_retorno[l_arr_curr].num_sequencia, " ",
                                                 ma_tela_relac_nf_rem_retorno[l_arr_curr].qtd_devolvida

            RUN comando3 RETURNING p_cancel
              #CALL sup3760_grade(ma_tela_relac_nf_rem_retorno[l_arr_curr].num_nf,
              #                   ma_tela_relac_nf_rem_retorno[l_arr_curr].num_sequencia)
         END CASE
   END INPUT

   IF NOT int_flag THEN
      IF m_eh_modificacao THEN
         LET l_funcao = "MODIFICACAO"
      ELSE
         LET l_funcao = "INCLUSAO"
      END IF
      FOR l_ind = 1 TO 500
         IF ma_tela_relac_nf_rem_retorno[l_ind].num_nf = " "
         OR ma_tela_relac_nf_rem_retorno[l_ind].num_nf IS NULL
         OR ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida = " "
         OR ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida = 0 THEN
            CONTINUE FOR
         END IF
         IF la_qtd_devolvida_ant[l_ind].qtd_devolvida <> ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida THEN

           CALL sup0063_verifica_controles(12,
                                          mr_tela_relac_nf_rem_retorno.cod_item,
                                          "INCLUSAO",
                                          "SUP2290")
            RETURNING m_controles

            IF m_controles <> " " THEN
               LET l_msg = "Deseja informar grade/dimensional da NF remessa ", log0800_trim(ma_tela_relac_nf_rem_retorno[l_ind].num_nf) ,
                           " Seq: ", log0800_trim(ma_tela_relac_nf_rem_retorno[l_ind].num_sequencia)," ?"
                IF NOT log0040_confirm(19,22,l_msg) THEN
                   LET ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida = la_qtd_devolvida_ant[l_ind].qtd_devolvida
                   LET m_tot_qtd_devolvida = m_tot_qtd_devolvida + la_qtd_devolvida_ant[l_ind].qtd_devolvida
                   DISPLAY ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida TO s_tela[l_ind].qtd_devolvida
                   CONTINUE FOR
                ELSE
                   LET m_tot_qtd_devolvida = m_tot_qtd_devolvida + ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida
                END IF
            END IF
            IF m_tot_qtd_devolvida > mr_tela_relac_nf_rem_retorno.qtd_declarad_nf THEN
               LET l_msg = "Quantidade devolvida(", log0800_trim(m_tot_qtd_devolvida)  ,") maior que a quantidade declarada da NF (", log0800_trim(mr_tela_relac_nf_rem_retorno.qtd_declarad_nf) ,")"
               CALL log0030_mensagem(l_msg,"info")
               EXIT FOR
            ELSE
               CALL log120_procura_caminho("sup2290") RETURNING comando3
               LET comando3 = comando3 CLIPPED, " ",p_dados_tela.num_nf," ",
                                                    p_dados_tela.ser_nf," ",
                                                    p_dados_tela.ssr_nf," ",
                                                    p_dados_tela.ies_especie_nf," ",
                                                    p_dados_tela.cod_fornecedor," ",
                                                    mr_tela_relac_nf_rem_retorno.num_seq," ",
                                                    p_cod_empresa, " ", "1"{1=background}, " ",
                                                    l_funcao," ",
                                                    ma_tela_relac_nf_rem_retorno[l_ind].num_nf, " ",
                                                    ma_tela_relac_nf_rem_retorno[l_ind].num_sequencia, " ",
                                                    ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida

               RUN comando3 RETURNING p_cancel
            END IF
         ELSE
            LET m_tot_qtd_devolvida = m_tot_qtd_devolvida + ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida
         END IF
      END FOR
   ELSE
      FOR l_ind = 1 TO 500
         IF ma_tela_relac_nf_rem_retorno[l_ind].num_nf IS NOT NULL
         OR ma_tela_relac_nf_rem_retorno[l_ind].num_nf <> " " THEN
            LET ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida = 0
         END IF
      END FOR
   END IF

   #IF m_controles <> " " THEN
   #   CALL sup3760_verifica_qtd_devolvida()
   #END IF
   IF m_tot_qtd_devolvida > mr_tela_relac_nf_rem_retorno.qtd_declarad_nf THEN
       FOR l_ind = 1 TO 500
          IF ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida > 0 THEN
             CALL sup3760_exclui_relacionamento(l_ind)
          END IF
       END FOR
       LET l_msg = "Houve divergência entre a quantidade declarada (", log0800_trim(mr_tela_relac_nf_rem_retorno.qtd_declarad_nf) ,")",
                   "  e a devolvida (", log0800_trim(m_tot_qtd_devolvida) ,")",
                   "\nFavor relacionar novamente."
       CALL log0030_mensagem(l_msg,"info")
    END IF

   IF l_funcao = "INCLUSAO" THEN
      ERROR "Inclusão efetuada com sucesso."
      CALL log_refresh_display()
   ELSE
      ERROR "Modificação efetuada com sucesso."
      CALL log_refresh_display()
   END IF

 END FUNCTION

#-----------------------------------------#
 FUNCTION sup3760_verifica_qtd_devolvida()
#-----------------------------------------#
 DEFINE l_qtd_devolvida     LIKE item_em_terc.qtd_tot_remessa,
        l_ind               SMALLINT,
        l_msg               CHAR(200)

  INITIALIZE ma_tela_relac_nf_rem_retorno, ma_tela_relac_nf_compl TO NULL

  WHENEVER ERROR CONTINUE
  DECLARE cq_aviso_rec_relac1 SCROLL CURSOR WITH HOLD FOR
  SELECT num_aviso_rec,
         num_seq,
         cod_item,
         qtd_declarad_nf
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa   = p_cod_empresa
     AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","CQ_AVISO_REC_RELAC1")
     RETURN
  END IF

  WHENEVER ERROR CONTINUE
  OPEN cq_aviso_rec_relac1
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("OPEN CURSOR","CQ_AVISO_REC_RELAC1")
     RETURN
  END IF

  WHENEVER ERROR CONTINUE
  FETCH cq_aviso_rec_relac1 INTO mr_tela_relac_nf_rem_retorno.num_aviso_rec,
                                mr_tela_relac_nf_rem_retorno.num_seq,
                                mr_tela_relac_nf_rem_retorno.cod_item,
                                mr_tela_relac_nf_rem_retorno.qtd_declarad_nf
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CLOSE cq_aviso_rec_relac1
     FREE cq_aviso_rec_relac1
     RETURN
  END IF

  LET m_eh_modificacao = TRUE
  CALL sup3760_busca_nf_remessa()

  IF m_tot_qtd_devolvida > mr_tela_relac_nf_rem_retorno.qtd_declarad_nf THEN
     FOR l_ind = 1 TO 100
        IF ma_tela_relac_nf_rem_retorno[l_ind].qtd_devolvida > 0 THEN
           CALL sup3760_exclui_relacionamento(l_ind)
        END IF
     END FOR
     LET l_msg = "Houve divergência entre a quantidade declarada e a devolvida.\n",
                 " Favor relacionar novamente."
     CALL log0030_mensagem(l_msg,"info")
  END IF

  ERROR "Quantidade declarada: ", mr_tela_relac_nf_rem_retorno.qtd_declarad_nf CLIPPED
  CALL log_refresh_display()

 END FUNCTION

#---------------------------------#
 FUNCTION sup3760_eh_alteracao()
#---------------------------------#
 DEFINE l_arr_curr          SMALLINT,
        l_qtd_devolvida     LIKE item_ret_terc.qtd_devolvida

    WHENEVER ERROR CONTINUE
    SELECT SUM(qtd_devolvida)
      INTO l_qtd_devolvida
      FROM item_ret_terc
     WHERE item_ret_terc.cod_empresa      = p_cod_empresa
       AND item_ret_terc.num_nf           = p_dados_tela.num_nf
       AND item_ret_terc.ser_nf           = p_dados_tela.ser_nf
       AND item_ret_terc.ssr_nf           = p_dados_tela.ssr_nf
       AND item_ret_terc.ies_especie_nf   = p_dados_tela.ies_especie_nf
       AND item_ret_terc.cod_fornecedor   = p_dados_tela.cod_fornecedor
       #AND item_ret_terc.num_sequencia_ar = mr_tela_relac_nf_rem_retorno.num_seq
       #AND item_ret_terc.num_nf_remessa   = ma_tela_relac_nf_rem_retorno[l_arr_curr].num_nf
       #AND item_ret_terc.num_sequencia_nf = ma_tela_relac_nf_rem_retorno[l_arr_curr].num_sequencia
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       IF l_qtd_devolvida > 0 THEN
          RETURN TRUE
       ELSE
          RETURN FALSE
       END IF
    ELSE
       RETURN FALSE
    END IF

 END FUNCTION

#------------------------------------------------#
 FUNCTION sup3760_paginacao_nf_relac(l_acao)
#------------------------------------------------#
 DEFINE l_acao         CHAR(10),
        l_msg_erro CHAR(100)

  LET l_acao = UPSHIFT(l_acao)

  WHENEVER ERROR CONTINUE
  CASE l_acao
     WHEN "ANTERIOR" FETCH PREVIOUS cq_aviso_rec_relac INTO mr_tela_relac_nf_rem_retorno.num_aviso_rec,
                                                            mr_tela_relac_nf_rem_retorno.num_seq,
                                                            mr_tela_relac_nf_rem_retorno.cod_item,
                                                            mr_tela_relac_nf_rem_retorno.qtd_declarad_nf
     WHEN "SEGUINTE" FETCH NEXT     cq_aviso_rec_relac INTO mr_tela_relac_nf_rem_retorno.num_aviso_rec,
                                                            mr_tela_relac_nf_rem_retorno.num_seq,
                                                            mr_tela_relac_nf_rem_retorno.cod_item,
                                                            mr_tela_relac_nf_rem_retorno.qtd_declarad_nf
  END CASE
  WHENEVER ERROR STOP

  IF sqlca.sqlcode = 0 THEN
     CALL sup3760_busca_nf_remessa()
     CALL sup3760_busca_den_item(mr_tela_relac_nf_rem_retorno.cod_item) RETURNING p_status
     LET mr_tela_relac_nf_rem_retorno.den_item_reduz = m_den_item
  ELSE
     ERROR "Não existem mais dados nesta direção."
  END IF

  CALL sup3760_exibe_nf_remessa_retorno()

 END FUNCTION
#-- OS 562700 fim --#

#--------------------------------#
 FUNCTION sup376_consulta_dados()
#--------------------------------#

 SELECT *
   INTO p_nf_sup.*
   FROM nf_sup
  WHERE nf_sup.cod_empresa        = p_cod_empresa
    AND nf_sup.cod_fornecedor     = p_dados_tela.cod_fornecedor
    AND nf_sup.num_nf             = p_dados_tela.num_nf
    AND nf_sup.ser_nf             = p_dados_tela.ser_nf
    AND nf_sup.ssr_nf             = p_dados_tela.ssr_nf
    AND nf_sup.ies_especie_nf     = p_dados_tela.ies_especie_nf

 SELECT *
   FROM aviso_rec_compl
  WHERE cod_empresa   = p_nf_sup.cod_empresa
    AND num_aviso_rec = p_nf_sup.num_aviso_rec
    AND ies_situacao  = "C"
 IF sqlca.sqlcode = 0 THEN
    LET p_ies_canc = TRUE
 ELSE
    LET p_ies_canc = FALSE
 END IF

 CALL sup376_busca_cond_pgto_cap(p_nf_sup.cnd_pgto_nf)
 LET p_ies_pagamento = p_cond_pgto_cap.ies_pagamento

 IF sup3762_busca_frete_sup() = FALSE THEN
    LET p_frete_sup.num_conhec = 0
 END IF

 END FUNCTION

#------------------------------------------------------------------#
 FUNCTION sup376_gera_movimento_estoque(p_tipo_mov,p_tipo_chamada)
#------------------------------------------------------------------#
 DEFINE p_tipo_mov          CHAR(20),
        p_ies_somente_erro5 SMALLINT,
        p_tipo_chamada      CHAR(20),
        p_conta_erro        SMALLINT,
        l_num_oc_ar         LIKE aviso_rec.num_oc,
        l_ind               SMALLINT,
        l_pv_cliente        LIKE pedidos.num_pedido_cli,
        l_num_montag        SMALLINT,
        l_parametro         CHAR(01)

 LET p_ies_somente_erro5 = FALSE
 LET p_conta_erro = 0

 IF p_dados_tela.ies_nf_aguard_nfe <> "7" THEN
    IF p_tipo_mov = "NORMAL" THEN
       LET p_ies_somente_erro5 = FALSE
       IF sup376_verifica_erro_tipo_6() THEN
          CALL sup376_verifica_erro_tipo_5(p_tipo_chamada) RETURNING p_ies_somente_erro5
          IF (p_par_estoque.ies_custo_medio = "D" AND
              (p_ies_somente_erro5 = TRUE OR
               p_nf_sup.ies_nf_com_erro = "N" OR
               (p_nf_sup.ies_nf_com_erro = "S" AND
                (p_nf_sup.nom_resp_aceite_er IS NOT NULL AND
                 p_nf_sup.nom_resp_aceite_er <> " ")))) OR
                 p_par_estoque.ies_custo_medio = "M" THEN

             IF sup376_verifica_itens_contagem_automatica() = TRUE THEN
#--inicio--ch727947 Antonio #
                IF m_contagem_automatica = TRUE THEN
                   LET p_aviso_rec.ies_liberacao_cont = 'N'
                   LET p_aviso_rec.ies_situa_ar = 'C'
                ELSE
#---fim----ch727947#
                   ERROR " Aguarde ... Realizando contagem .... "

                   CALL sup3760_atualiza_nota(p_cod_empresa, p_dados_tela.num_nf, p_dados_tela.ser_nf,
                                              p_dados_tela.ssr_nf, p_dados_tela.cod_fornecedor,
                                              p_dados_tela.num_aviso_rec, p_dados_tela.cnd_pgto_nf)

                   CALL log120_procura_caminho("sup0530") RETURNING comando3
                   LET comando3 = comando3 CLIPPED, " ",  p_cod_empresa, " ",
                                                          p_dados_tela.num_aviso_rec," ",
                                                          0, " ",
                                                          3760," ",
                                                          "S"," ","INCLUSAO"
                   RUN comando3 RETURNING p_cancel
                END IF
                IF m_gera_rsv_transf = "S" AND
                   p_dados_tela.ies_nf_aguard_nfe = "8" THEN
                   FOR l_ind = 1 TO 999

                     INITIALIZE l_num_oc_ar TO NULL
                     WHENEVER ERROR CONTINUE
                     SELECT num_oc
                       INTO l_num_oc_ar
                       FROM aviso_rec
                      WHERE cod_empresa   = p_cod_empresa
                        AND num_aviso_rec = p_dados_tela.num_aviso_rec
                        AND num_seq       = l_ind
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        #Nao tem mais sequencia.
                        EXIT FOR
                     END IF

                     INITIALIZE m_num_ped_fornec TO NULL
                     WHENEVER ERROR CONTINUE
                     SELECT num_pedido_fornec
                       INTO m_num_ped_fornec
                       FROM prog_ordem_sup
                      WHERE cod_empresa      = p_cod_empresa
                        AND num_oc           = l_num_oc_ar
                        AND num_versao       = 001
                        AND num_prog_entrega = 001
                     WHENEVER ERROR STOP

                     LET m_pedido_venda = m_num_ped_fornec[1,6]
                     IF sup3760_busca_ped_venda() = FALSE THEN
                        RETURN
                     END IF

                     INITIALIZE l_pv_cliente TO NULL
                     WHENEVER ERROR CONTINUE
                     SELECT num_pedido_cli
                       INTO l_pv_cliente
                       FROM pedidos
                      WHERE cod_empresa = p_cod_emp_transf
                        AND num_pedido  = m_pedido_venda
                     WHENEVER ERROR STOP

                     LET l_num_montag = 0
                     WHENEVER ERROR CONTINUE
                     SELECT COUNT(*)
                       INTO l_num_montag
                       FROM ordem_montag_item
                      WHERE cod_empresa = p_cod_empresa
                        AND num_pedido  = l_pv_cliente
                     WHENEVER ERROR CONTINUE
                     IF l_num_montag = 0 THEN
                        LET l_parametro = "S"
                        CALL log120_procura_caminho("vdp4577") RETURNING comando3
                            LET comando3 = comando3 CLIPPED, " ",p_cod_empresa,
                                                             " ",l_pv_cliente,
                                                             " ",l_parametro,
                                                             " ",p_dados_tela.num_aviso_rec
                            RUN comando3 RETURNING p_cancel
                     END IF
                  END FOR
                  ### Verifica se gerou ordem de montagem para o item, caso nao
                  ### tenha gerado exclui a nota fiscal

                  CALL log120_procura_caminho('VDP1030') RETURNING comando3
                  LET comando3 = comando3 CLIPPED, ' "',p_cod_empresa,'" '
                  RUN comando3

                  LET l_num_montag = 0
                  WHENEVER ERROR CONTINUE
                  SELECT COUNT(*)
                    INTO l_num_montag
                    FROM ordem_montag_item
                   WHERE cod_empresa = p_cod_empresa
                     AND num_pedido  = l_pv_cliente
                  WHENEVER ERROR STOP
                  IF l_num_montag = 0 THEN
                     WHENEVER ERROR CONTINUE
                         CALL log085_transacao("COMMIT")
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        CALL log003_err_sql("TRANSACAO","COMMIT")
                        CALL log085_transacao("ROLLBACK") #OS596059
                     END IF

                     CALL log0030_mensagem("Problemas na geracao da ordem de montagem. Nota sera excluida","exclamation")
                     LET m_log004 = FALSE
                     CALL sup376_exclusao_nota()
                     CALL log085_transacao("BEGIN")
                  ELSE
                     CALL log0030_mensagem('Processamento das OM´s efetuado com sucesso. ','info')
                  END IF
               END IF
            END IF
         END IF
       END IF
    ELSE
       IF sup376_verifica_itens_contagem_automatica() = TRUE THEN
#--inicio--ch727947 Antonio #
             IF m_contagem_automatica = TRUE THEN
                LET p_aviso_rec.ies_liberacao_cont = 'N'
                LET p_aviso_rec.ies_situa_ar = 'C'
             ELSE
#---fim----ch727947#
                ERROR " Aguarde ... Realizando contagem .... "

                CALL sup3760_atualiza_nota(p_cod_empresa, p_dados_tela.num_nf, p_dados_tela.ser_nf,
                                           p_dados_tela.ssr_nf, p_dados_tela.cod_fornecedor,
                                           p_dados_tela.num_aviso_rec, p_dados_tela.cnd_pgto_nf)
                CALL log120_procura_caminho("sup0530") RETURNING comando3
                LET comando3 = comando3 CLIPPED, " ", p_cod_empresa, " ",
                                                      p_dados_tela.num_aviso_rec," ",
                                                      0, " ",
                                                      3760," ",
                                                      "D"," ",
                                                      "INCLUSAO"
                 RUN comando3 RETURNING p_cancel
             END IF

             IF m_gera_rsv_transf = "S" AND
                p_dados_tela.ies_nf_aguard_nfe = "8" THEN
                FOR l_ind = 1 TO 999

                   INITIALIZE l_num_oc_ar TO NULL
                   WHENEVER ERROR CONTINUE
                   SELECT num_oc
                     INTO l_num_oc_ar
                     FROM aviso_rec
                    WHERE cod_empresa   = p_cod_empresa
                      AND num_aviso_rec = p_dados_tela.num_aviso_rec
                      AND num_seq       = l_ind
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      #Nao tem mais sequencia.
                      EXIT FOR
                   END IF

                   INITIALIZE m_num_ped_fornec TO NULL
                   WHENEVER ERROR CONTINUE
                   SELECT num_pedido_fornec
                     INTO m_num_ped_fornec
                     FROM prog_ordem_sup
                    WHERE cod_empresa      = p_cod_empresa
                      AND num_oc           = l_num_oc_ar
                      AND num_versao       = 001
                      AND num_prog_entrega = 001
                   WHENEVER ERROR STOP

                   LET m_pedido_venda = m_num_ped_fornec[1,6]
                   IF sup3760_busca_ped_venda() = FALSE THEN
                      RETURN
                   END IF

                   INITIALIZE l_pv_cliente TO NULL
                   WHENEVER ERROR CONTINUE
                   SELECT num_pedido_cli
                     INTO l_pv_cliente
                     FROM pedidos
                    WHERE cod_empresa = p_cod_emp_transf
                      AND num_pedido  = m_pedido_venda
                   WHENEVER ERROR STOP

                   LET l_num_montag = 0
                   WHENEVER ERROR CONTINUE
                   SELECT COUNT(*)
                     INTO l_num_montag
                     FROM ordem_montag_item
                    WHERE cod_empresa = p_cod_empresa
                      AND num_pedido  = l_pv_cliente
                   WHENEVER ERROR STOP
                   IF l_num_montag = 0 THEN
                      LET l_parametro = "S"
                      CALL log120_procura_caminho("vdp4577") RETURNING comando3
                        LET comando3 = comando3 CLIPPED, " ", p_cod_empresa,
                                                         " ", l_pv_cliente,
                                                         " ", l_parametro,
                                                         " ", p_dados_tela.num_aviso_rec
                        RUN comando3 RETURNING p_cancel

                   END IF
                   WHENEVER ERROR CONTINUE
                       CALL log085_transacao("COMMIT")
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("COMMIT","CHAMADA VDP4577")
                      CALL log085_transacao("ROLLBACK") #OS596059
                      RETURN
                   END IF

                END FOR

                CALL log120_procura_caminho('VDP1030') RETURNING comando3
                LET comando3 = comando3 CLIPPED, ' "',p_cod_empresa,'" '
                RUN comando3

                LET l_num_montag = 0
                WHENEVER ERROR CONTINUE
                SELECT COUNT(*)
                  INTO l_num_montag
                  FROM ordem_montag_item
                 WHERE cod_empresa = p_cod_empresa
                   AND num_pedido  = l_pv_cliente
                WHENEVER ERROR STOP
                IF l_num_montag = 0 THEN
                   LET m_log004 = FALSE
                   CALL sup376_exclusao_nota()
                ELSE
                   CALL log0030_mensagem('Processamento efetuado com sucesso.','info')
                END IF
             END IF
          END IF
       END IF
    END IF

 CURRENT WINDOW IS w_sup37601
 LET p_conta_erro = 0
 DECLARE cq_erros_nf CURSOR FOR
  SELECT *
    FROM nf_sup_erro
   WHERE nf_sup_erro.empresa  = p_cod_empresa
     AND nf_sup_erro.num_aviso_rec  = p_dados_tela.num_aviso_rec
     AND nf_sup_erro.ies_origem_erro <> "4"
 FOREACH cq_erros_nf INTO p_nf_sup_erro.*
    IF p_nf_sup_erro.ies_erro_grave = "S" THEN
       LET p_conta_erro = p_conta_erro + 1
    ELSE
       IF (p_nf_sup.nom_resp_aceite_er IS NULL OR
           p_nf_sup.nom_resp_aceite_er = " ") THEN
          LET p_conta_erro = p_conta_erro + 1
       END IF
    END IF
 END FOREACH

 IF p_conta_erro = 0 THEN
    WHENEVER ERROR CONTINUE
    UPDATE nf_sup SET ies_nf_com_erro = "N"
     WHERE nf_sup.cod_empresa   = p_cod_empresa
       AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("UPDATE","NF_SUP")
       RETURN FALSE
    END IF

    WHENEVER ERROR CONTINUE
    UPDATE nf_sup_aux SET ies_nf_com_erro = "N", nom_resp_aceite_er = p_nf_sup.nom_resp_aceite_er
     WHERE nf_sup_aux.cod_empresa   = p_cod_empresa
       AND nf_sup_aux.num_aviso_rec = p_dados_tela.num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("UPDATE","NF_SUP_AUX")
       RETURN FALSE
    END IF
 ELSE
    IF p_tipo_chamada = "ASSUMIR" THEN
       CALL log0030_mensagem(" Nao e' possivel assumir os erros, existem erros graves.","exclamation")
    END IF
    WHENEVER ERROR CONTINUE
    UPDATE nf_sup
       SET ies_nf_com_erro = "S",
           nom_resp_aceite_er = NULL
     WHERE nf_sup.cod_empresa   = p_cod_empresa
       AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec
    WHENEVER ERROR STOP
 END IF

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("ATUALIZACAO","NF_SUP")
    RETURN FALSE
 END IF

 END FUNCTION

#----------------------------#
 FUNCTION sup376_zoom_itens()
#----------------------------#
 DEFINE  p_ind           SMALLINT

 # 775462
 IF m_wms_instal = 'S' AND m_utiliza_codf_deposit = 'S' THEN
    CALL log006_exibe_teclas("01 02 17 18", p_versao)
    CALL log130_procura_caminho("sup3760w") RETURNING comando3
    OPEN WINDOW w_sup37602 AT 06,02 WITH FORM comando3
         ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, FORM LINE 1)
    CALL SET_COUNT(999)
    DISPLAY ARRAY p_array_wms TO s_sup3760w.*
    IF int_flag  THEN
       LET int_flag = 0
    ELSE
       LET p_ind = arr_curr()
    END IF
 ELSE
    CALL log006_exibe_teclas("01 02 17 18", p_versao)
    CALL log130_procura_caminho("sup37602") RETURNING comando3
    OPEN WINDOW w_sup37602 AT 06,02 WITH FORM comando3
         ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, FORM LINE 1)
    CALL set_count(999)
    DISPLAY ARRAY p_array TO s_sup37602.*
    IF int_flag  THEN
       LET int_flag = 0
    ELSE
       LET p_ind = arr_curr()
    END IF
 END IF
 CLOSE WINDOW w_sup37602
 END FUNCTION

#------------------------------------#
 FUNCTION sup376_processa_conversao(l_ind)
#------------------------------------#
 DEFINE l_ind               SMALLINT

 DEFINE p_fat_conver_unid   LIKE ordem_sup.fat_conver_unid,
        p_dat_ref_cotacao   LIKE ordem_sup.dat_ref_cotacao,
        p_val_cotacao       LIKE cotacao.val_cotacao,
        l_dat_ref_cotacao   DATE,
        p_preco_oc_x        DECIMAL(17,7),
        p_par_ies           CHAR(01),
        p_per_juros_ped     DECIMAL(7,3)
 DEFINE l_msg               CHAR(200) #555957

 INITIALIZE l_msg TO NULL #555957
 LET p_cod_moeda_ped   = NULL
 LET p_val_cotacao     = NULL
 LET p_fat_conver_unid = NULL
 LET p_dat_ref_cotacao = NULL
 LET p_preco_oc_x      = NULL

 IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
    LET p_cod_moeda_ped = p_processo_imp.cod_moeda
 ELSE
    CALL sup376_busca_pedido_sup(p_cod_empresa, p_array_compl[l_ind].num_pedido)
    LET p_cod_moeda_ped = p_pedido_sup.cod_moeda
 END IF

 INITIALIZE p_ordem_sup.* TO NULL
 CALL sup3762_busca_ordem_sup(p_cod_empresa,
                             p_array_compl[l_ind].num_oc)
 LET p_fat_conver_unid = p_ordem_sup.fat_conver_unid
 LET p_dat_ref_cotacao = p_ordem_sup.dat_ref_cotacao
 IF p_cod_moeda_ped IS NOT NULL AND
    p_par_con.cod_moeda_padrao <> p_cod_moeda_ped THEN
    IF p_ies_indexacao = "S" AND
       p_fornecedor.cod_pais = p_cod_pais_emp THEN

       CALL sup3760_busca_dat_ref_cotacao_moeda(p_cod_moeda_ped,
                                                p_ordem_sup.cod_fornecedor,
                                                p_dat_ref_cotacao) RETURNING l_dat_ref_cotacao

       WHENEVER ERROR CONTINUE
       SELECT val_cotacao INTO p_val_cotacao
         FROM cotacao
        WHERE cotacao.cod_moeda = p_cod_moeda_ped
          AND cotacao.dat_ref   = l_dat_ref_cotacao
       WHENEVER ERROR STOP

       IF sqlca.sqlcode =  0 THEN
          IF p_val_cotacao = 0 THEN
             LET l_msg = "Cotação para a moeda ",p_cod_moeda_ped," na data ",p_dat_ref_cotacao, " está zerada (PAT0150)" ##555957
             CALL log0030_mensagem(l_msg,"exclamation") ##555957
             LET p_houve_erro = TRUE
             RETURN
          END IF
          LET p_preco_oc_x = p_array[l_ind].pre_unit_nf / p_val_cotacao

          CALL sup3760_busca_dat_ref_cotacao_moeda(p_cod_moeda_ped,
                                                   p_ordem_sup.cod_fornecedor,
                                                   p_dados_tela.dat_emis_nf) RETURNING l_dat_ref_cotacao

          WHENEVER ERROR CONTINUE
          SELECT val_cotacao INTO p_val_cotacao
            FROM cotacao
           WHERE cotacao.cod_moeda  = p_cod_moeda_ped
             AND cotacao.dat_ref    = l_dat_ref_cotacao
          WHENEVER ERROR STOP

          IF sqlca.sqlcode = 0 THEN
             IF p_val_cotacao = 0 THEN
                LET l_msg = "Cotação para a moeda ",p_cod_moeda_ped," na data ",p_dados_tela.dat_emis_nf, " está zerada (PAT0150)" ##555957
                CALL log0030_mensagem(l_msg,"exclamation") ##555957
                LET p_houve_erro = TRUE
                RETURN
             END IF
             LET p_array[l_ind].pre_unit_nf = p_preco_oc_x * p_val_cotacao
          ELSE
             LET l_msg = "Não existe cotação para a moeda ",p_cod_moeda_ped," na data ",p_dados_tela.dat_emis_nf ##555957
             IF NOT log0040_confirm(21,43,l_msg) THEN ##555957
                LET p_houve_erro = TRUE
                RETURN
             END IF
          END IF
       END IF
    ELSE
##### SE FOR IMPORTACAO - VALORES JA ESTAO NA MOEDA PADRAO ######
       IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
       ELSE
          LET p_preco_oc_x = p_array[l_ind].pre_unit_nf

          CALL sup3760_busca_dat_ref_cotacao_moeda(p_cod_moeda_ped,
                                                   p_ordem_sup.cod_fornecedor,
                                                   p_dados_tela.dat_emis_nf) RETURNING l_dat_ref_cotacao

          WHENEVER ERROR CONTINUE
          SELECT val_cotacao INTO p_val_cotacao
            FROM cotacao
           WHERE cotacao.cod_moeda  = p_cod_moeda_ped
             AND cotacao.dat_ref    = l_dat_ref_cotacao
          WHENEVER ERROR STOP

          IF sqlca.sqlcode = 0 THEN
             IF p_val_cotacao = 0 THEN
                LET l_msg = "Cotação para a moeda ",p_cod_moeda_ped," na data ",p_dados_tela.dat_emis_nf, " está zerada (PAT0150)" ##555957
                CALL log0030_mensagem(l_msg,"exclamation") ##555957
                LET p_houve_erro = TRUE
                RETURN
             END IF
             LET p_array[l_ind].pre_unit_nf = p_preco_oc_x * p_val_cotacao
          ELSE
             LET l_msg = "Não existe cotação para a moeda ",p_cod_moeda_ped," na data ",p_dados_tela.dat_emis_nf ##555957
             IF NOT log0040_confirm(21,43,l_msg) THEN ##555957
                LET p_houve_erro = TRUE
                RETURN
             END IF
          END IF
       END IF
    END IF
 END IF

 INITIALIZE m_pre_unit_oc TO NULL
 IF p_fat_conver_unid <> 1 THEN
    CALL sup3760_busca_preco_sup_par_oc(p_array_compl[l_ind].num_oc)
 END IF

 IF m_pre_unit_oc IS NULL  THEN
    LET p_array[l_ind].pre_unit_nf = p_array[l_ind].pre_unit_nf  * p_fat_conver_unid
 ELSE
    LET p_array[l_ind].pre_unit_nf = m_pre_unit_oc * p_fat_conver_unid
    CALL sup3760_recalculo_pre_liquido(l_ind,p_fat_conver_unid)
 END IF


 LET p_par_ies = sup376_busca_par_sup_pad("taxa_juro_pedido",1)
 IF p_par_ies = "S" THEN
    SELECT per_juros_ped
      INTO p_per_juros_ped
      FROM pedidos_sup_juros
     WHERE pedidos_sup_juros.cod_empresa = p_cod_empresa
       AND pedidos_sup_juros.num_pedido  = p_array_compl[l_ind].num_pedido

    IF sqlca.sqlcode = 0 THEN
       LET p_array[l_ind].pre_unit_nf = p_array[l_ind].pre_unit_nf  + (p_array[l_ind].pre_unit_nf
                                             * (p_per_juros_ped / 100))
    END IF
 END IF
 END FUNCTION

#------------------------------#
 FUNCTION sup376_inclui_ar_ped()
#------------------------------#
 DEFINE   sql_stmt           CHAR(1200),
          p_funcao           CHAR(30),
          p_ind7             SMALLINT,
          p_seq              SMALLINT,
          p_ultimo           SMALLINT,
          p_tot_reservada    LIKE prog_ordem_sup.qtd_solic,
          p_dif              LIKE prog_ordem_sup.qtd_solic,
          p_tot_val_reserv   LIKE prog_ordem_sup_com.val_solic,
          p_dif_val          LIKE prog_ordem_sup_com.val_solic,
          p_val_tot_prog     LIKE prog_ordem_sup_com.val_solic,
          l_num_prog         LIKE prog_ordem_sup.num_prog_entrega
 IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = TRUE THEN
    LET p_tot_val_reserv = 0
    FOR p_ind7 = 1 TO 50
        IF p_array_it_prg_entr[p_ind,p_ind7].num_prog_entrega IS NOT NULL THEN
           LET p_tot_val_reserv = p_tot_val_reserv +
               p_array_it_prg_entr[p_ind,p_ind7].val_reservado
        ELSE
           EXIT FOR
        END IF
    END FOR

    LET p_ultimo = p_ind7 - 1

    LET p_dif_val = 0
    IF p_array[p_ind].val_liquido_item > p_tot_val_reserv  THEN
       LET p_dif_val = p_array[p_ind].val_liquido_item  - p_tot_val_reserv
    ELSE
       LET p_dif_val = 0
    END IF

    FOR p_ind7 = 1 TO 50
        IF p_array_it_prg_entr[p_ind,p_ind7].num_prog_entrega IS NOT NULL THEN
           IF p_ind7 = p_ultimo THEN
              LET p_ar_ped.qtd_reservada = p_array_it_prg_entr[p_ind,p_ind7].val_reservado + p_dif_val
           ELSE
              LET p_ar_ped.qtd_reservada = p_array_it_prg_entr[p_ind,p_ind7].val_reservado
           END IF
           LET p_ar_ped.cod_empresa      = p_cod_empresa
           LET p_ar_ped.num_aviso_rec    = p_dados_tela.num_aviso_rec
           LET p_ar_ped.num_seq          = p_array[p_ind].seq
           LET p_ar_ped.num_pedido       = p_array_compl[p_ind].num_pedido
           LET p_ar_ped.num_oc           = p_array_compl[p_ind].num_oc
           LET p_ar_ped.num_prog_entrega = p_array_it_prg_entr[p_ind, p_ind7].num_prog_entrega
           CALL sup376_busca_tip_entrega()
           LET p_ar_ped.qtd_recebida     = 0
           LET p_ar_ped.qtd_devolvid     = 0
           IF p_dados_tela.ies_nf_aguard_nfe <> "D" THEN
              CALL sup376_insere_ar_ped()
           END IF
        ELSE
           IF (p_ies_nf_transf = TRUE OR g_ies_nf_permuta = TRUE) AND
              p_array_compl[p_ind7].num_oc IS NOT NULL AND
              p_array_compl[p_ind7].num_oc <> 0 THEN

              INITIALIZE l_num_prog TO NULL
              IF p_array_compl[p_ind7].num_prog_entrega IS NULL OR
                 p_array_compl[p_ind7].num_prog_entrega = 0 THEN
                 DECLARE cq_busca_prg CURSOR WITH HOLD FOR
                    SELECT prog_ordem_sup.num_prog_entrega
                      FROM prog_ordem_sup, ordem_sup
                     WHERE prog_ordem_sup.cod_empresa = p_cod_empresa
                       AND prog_ordem_sup.num_oc      = p_array_compl[p_ind7].num_oc
                       AND prog_ordem_sup.ies_situa_prog = "F"
                       AND ordem_sup.cod_empresa      = prog_ordem_sup.cod_empresa
                       AND ordem_sup.num_oc           = prog_ordem_sup.num_oc
                       AND ordem_sup.num_versao       = prog_ordem_sup.num_versao
                       AND ordem_sup.ies_versao_atual = "S"
                    ORDER BY num_prog_entrega
                 FOREACH cq_busca_prg INTO l_num_prog
                     EXIT FOREACH
                 END FOREACH
              ELSE
                 LET l_num_prog = p_array_compl[p_ind7].num_prog_entrega
              END IF

              LET p_ar_ped.qtd_reservada = p_array[p_ind7].qtd_declarad_nf
              LET p_ar_ped.cod_empresa      = p_cod_empresa
              LET p_ar_ped.num_aviso_rec    = p_dados_tela.num_aviso_rec
              LET p_ar_ped.num_seq          = p_array[p_ind7].seq
              LET p_ar_ped.num_pedido       = p_array_compl[p_ind7].num_pedido
              LET p_ar_ped.num_oc           = p_array_compl[p_ind7].num_oc
              LET p_ar_ped.num_prog_entrega = l_num_prog
              CALL sup376_busca_tip_entrega()
              LET p_ar_ped.qtd_recebida     = 0
              LET p_ar_ped.qtd_devolvid     = 0
              IF p_dados_tela.ies_nf_aguard_nfe <> "D" THEN
                 CALL sup376_insere_ar_ped()
              END IF
           ELSE
              EXIT FOR
           END IF
        END IF
    END FOR
 ELSE
    LET p_tot_reservada = 0
    FOR p_ind7 = 1 TO 50
        IF p_array_it_prg_entr[p_ind,p_ind7].num_prog_entrega IS NOT NULL THEN
           LET p_tot_reservada = p_tot_reservada +
               p_array_it_prg_entr[p_ind,p_ind7].qtd_reservada
        ELSE
           IF (p_ies_nf_transf = TRUE OR g_ies_nf_permuta = TRUE) AND
              p_array_compl[p_ind7].num_oc IS NOT NULL AND
              p_array_compl[p_ind7].num_oc <> 0 THEN
              LET p_tot_reservada = p_tot_reservada +
                                    p_array[p_ind7].qtd_declarad_nf
           ELSE
              EXIT FOR
           END IF
        END IF
    END FOR
    LET p_ultimo = p_ind7 - 1
    LET p_dif = 0
    IF p_array[p_ind].qtd_declarad_nf > p_tot_reservada  THEN
       LET p_dif =   p_array[p_ind].qtd_declarad_nf  - p_tot_reservada
    ELSE
       LET p_dif = 0
    END IF

    FOR p_ind7 = 1 TO 50
        IF p_array_it_prg_entr[p_ind,p_ind7].num_prog_entrega IS NOT NULL THEN
           LET p_ar_ped.qtd_reservada    = p_array_it_prg_entr[p_ind,p_ind7].qtd_reservada
           IF p_ind7 = p_ultimo AND p_dif > 0 THEN
              LET p_ar_ped.qtd_reservada = p_ar_ped.qtd_reservada + p_dif
           END IF
           LET p_ar_ped.cod_empresa      = p_cod_empresa
           LET p_ar_ped.num_aviso_rec    = p_dados_tela.num_aviso_rec
           LET p_ar_ped.num_seq          = p_array[p_ind].seq
           LET p_ar_ped.num_pedido       = p_array_compl[p_ind].num_pedido
           LET p_ar_ped.num_oc           = p_array_compl[p_ind].num_oc
           LET p_ar_ped.num_prog_entrega = p_array_it_prg_entr[p_ind, p_ind7].num_prog_entrega
           CALL sup376_busca_tip_entrega()
           LET p_ar_ped.qtd_recebida     = 0
           LET p_ar_ped.qtd_devolvid     = 0
           IF p_dados_tela.ies_nf_aguard_nfe <> "D"
           THEN CALL sup376_insere_ar_ped()
           END IF
        ELSE
           IF (p_ies_nf_transf = TRUE OR g_ies_nf_permuta = TRUE) AND
              p_array_compl[p_ind7].num_oc IS NOT NULL AND
              p_array_compl[p_ind7].num_oc <> 0 THEN

              INITIALIZE l_num_prog TO NULL
              IF p_array_compl[p_ind7].num_prog_entrega IS NULL OR
                 p_array_compl[p_ind7].num_prog_entrega = 0 THEN
                 DECLARE cq_busca_prg1 CURSOR WITH HOLD FOR
                    SELECT prog_ordem_sup.num_prog_entrega
                      FROM prog_ordem_sup, ordem_sup
                     WHERE prog_ordem_sup.cod_empresa = p_cod_empresa
                       AND prog_ordem_sup.num_oc      = p_array_compl[p_ind7].num_oc
                       AND prog_ordem_sup.ies_situa_prog = "F"
                       AND ordem_sup.cod_empresa      = prog_ordem_sup.cod_empresa
                       AND ordem_sup.num_oc           = prog_ordem_sup.num_oc
                       AND ordem_sup.num_versao       = prog_ordem_sup.num_versao
                       AND ordem_sup.ies_versao_atual = "S"
                    ORDER BY num_prog_entrega
                 FOREACH cq_busca_prg1 INTO l_num_prog
                     EXIT FOREACH
                 END FOREACH
              ELSE
                 LET l_num_prog = p_array_compl[p_ind7].num_prog_entrega
              END IF

              LET p_ar_ped.qtd_reservada = p_array[p_ind7].qtd_declarad_nf
              LET p_ar_ped.cod_empresa      = p_cod_empresa
              LET p_ar_ped.num_aviso_rec    = p_dados_tela.num_aviso_rec
              LET p_ar_ped.num_seq          = p_array[p_ind7].seq
              LET p_ar_ped.num_pedido       = p_array_compl[p_ind7].num_pedido
              LET p_ar_ped.num_oc           = p_array_compl[p_ind7].num_oc
              LET p_ar_ped.num_prog_entrega = l_num_prog
              CALL sup376_busca_tip_entrega()
              LET p_ar_ped.qtd_recebida     = 0
              LET p_ar_ped.qtd_devolvid     = 0
              IF p_dados_tela.ies_nf_aguard_nfe <> "D"THEN
                 CALL sup376_insere_ar_ped()
              END IF
           ELSE
              EXIT FOR
           END IF
        END IF
    END FOR
 END IF
 END FUNCTION

#------------------------------#
 FUNCTION sup376_insere_ar_ped()
#------------------------------#
 WHENEVER ERROR CONTINUE

 INSERT INTO ar_ped VALUES (p_ar_ped.*)
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode = -239 OR
       sqlca.sqlcode = -268 THEN
       CALL sup376_alimenta_audit("INCLUSAO",
                                  "AR_PED",
                                  p_ar_ped.num_aviso_rec,
                                  p_ar_ped.num_seq,
                                  p_ar_ped.num_pedido,
                                  p_ar_ped.num_oc,
                                  p_ar_ped.num_prog_entrega)
    ELSE
       CALL log003_err_sql("INCLUSAO","AR_PED")
       LET p_houve_erro = TRUE
    END IF
 END IF

 WHENEVER ERROR STOP
 END FUNCTION

#----------------------------------------------#
 FUNCTION sup376_deleta_inf_fiscais(p_num_seq)
#----------------------------------------------#
 DEFINE p_num_seq      LIKE aviso_rec.num_seq,
        l_cod_operacao LIKE nf_sup.cod_operacao,
        l_msg          CHAR(80)

 IF p_par_estoque.ies_custo_medio = "D" THEN
    IF p_aviso_rec.ies_item_estoq = "N" AND
      (p_par_sup_compl.ies_conta_ok_n_est = "2" OR
      (p_par_sup_compl.ies_conta_ok_n_est="3"  AND
       p_dados_tela.ies_especie_nf="NFS"))    THEN
    ELSE
       IF p_aviso_rec.ies_situa_ar = "E" THEN
          IF p_aviso_rec.ies_liberacao_cont = "S" THEN
             CALL log0030_mensagem(" Funcao nao permitida. Excluir INSPECAO e CONTAGEM ","exclamation")
          ELSE
             CALL log0030_mensagem(" Funcao nao permitida. Excluir INSPECAO ","exclamation")
          END IF
          RETURN FALSE
       END IF
       IF p_aviso_rec.ies_liberacao_cont = "S" THEN
          CALL log0030_mensagem(" Funcao nao permitida. Excluir CONTAGEM","exclamation")
          RETURN FALSE
       END IF
    END IF
 END IF

 IF log0040_confirm(21,43,"Excluir informacoes fiscais desta sequencia?") THEN
    #FLUXO DE CAIXA
    IF NOT fcl1150_integra_sequencia_ar_fcx(p_cod_empresa,p_dados_tela.num_aviso_rec,
                                            p_num_seq,"EX") THEN
       RETURN FALSE
    END IF

    IF sup1069_verifica_erro_grave_gao(p_aviso_rec.cod_empresa,
                                       p_aviso_rec.num_aviso_rec,
                                       p_aviso_rec.num_seq) THEN
       LET l_cod_operacao = sup3760_recupera_operacao_estoq()
       CALL sup1069_atualizacao_orcamento_nf_espec("EXCLUSAO",
                                                   "SUP3760",
                                                   p_aviso_rec.cod_empresa,
                                                   p_aviso_rec.num_aviso_rec,
                                                   p_aviso_rec.num_seq,
                                                   p_aviso_rec.qtd_recebida,
                                                   l_cod_operacao,
                                                   0,
                                                   "",
                                                   0,
                                                   0,
                                                   "",
                                                   FALSE,
                                                   FALSE,
                                                   'S')
            RETURNING p_status, l_msg

       IF p_status = FALSE THEN
          CALL log0030_mensagem(l_msg,'exclamation')
          RETURN FALSE
       END IF
    END IF
    LET p_aviso_rec.pct_enc_financ      =  0
    LET p_aviso_rec.pre_unit_nf         =  0
    LET p_aviso_rec.val_despesa_aces_i  =  0
    IF p_nf_sup.ies_situa_import IS NULL OR
       p_nf_sup.ies_situa_import = " " THEN
       LET p_aviso_rec.ies_da_bc_ipi = "S"
    ELSE
       IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
          IF m_num_processo >= g_proc_ini_os163407 THEN
             LET p_aviso_rec.ies_da_bc_ipi = sup3760_determina_indicador_da(p_cod_empresa, m_num_processo)
          ELSE
             LET p_aviso_rec.ies_da_bc_ipi = "S"
          END IF
       ELSE
          LET p_aviso_rec.ies_da_bc_ipi = "G"
       END IF
    END IF
    LET p_aviso_rec.val_desc_item       =  0
    LET p_aviso_rec.val_liquido_item    =  0
    LET p_aviso_rec.val_compl_estoque   =  0
    LET p_aviso_rec.dat_ref_val_compl   = NULL
    LET p_aviso_rec.cod_incid_ipi       =  0
    LET p_aviso_rec.ies_bitributacao    =  "N"
    LET p_aviso_rec.ies_incid_icms_ite  =  " "
    LET p_aviso_rec.cod_fiscal_item     =  "    "
    LET p_aviso_rec.ies_receb_fiscal    =  "N"
    LET p_aviso_rec.cod_operac_estoq    =  "    "
    LET p_aviso_rec.ies_diverg_listada  =  "N"
    LET p_aviso_rec.ies_tip_incid_ipi   =  " "
    LET p_aviso_rec.pct_direito_cred    =  0
    LET p_aviso_rec.pct_ipi_declarad    =  0
    LET p_aviso_rec.val_base_c_ipi_it   =  0
    LET p_aviso_rec.val_base_c_ipi_da   =  0
    LET p_aviso_rec.val_ipi_decl_item   =  0
    LET p_aviso_rec.val_ipi_calc_item   =  0
    LET p_aviso_rec.val_ipi_desp_aces   =  0
    LET p_aviso_rec.val_contabil_item   =  0
    LET p_aviso_rec.cus_tot_item        =  0
    LET p_aviso_rec.val_base_c_item_d   =  0
    LET p_aviso_rec.val_base_c_item_c   =  0
    LET p_aviso_rec.pct_icms_item_d     =  0
    LET p_aviso_rec.pct_icms_item_c     =  0
    LET p_aviso_rec.pct_red_bc_item_d   =  0
    LET p_aviso_rec.pct_red_bc_item_c   =  0
    LET p_aviso_rec.pct_diferen_item_d  =  0
    LET p_aviso_rec.pct_diferen_item_c  =  0
    LET p_aviso_rec.val_icms_item_d     =  0
    LET p_aviso_rec.val_icms_item_c     =  0
    LET p_aviso_rec.val_base_c_icms_da  =  0
    LET p_aviso_rec.val_icms_diferen_i  =  0
    LET p_aviso_rec.val_icms_desp_aces  =  0
    LET p_aviso_rec.val_enc_financ      =  0
    LET p_aviso_rec.val_acrescimos      =  0
    LET p_aviso_rec.val_frete           =  0
    LET p_aviso_rec.val_icms_frete_d    =  0
    LET p_aviso_rec.val_icms_frete_c    =  0
    LET p_aviso_rec.pct_icms_frete_d    =  0
    LET p_aviso_rec.pct_icms_frete_c    =  0
    LET p_aviso_rec.val_base_c_frete_d  =  0
    LET p_aviso_rec.val_base_c_frete_c  =  0
    LET p_aviso_rec.val_icms_diferen_f  =  0
    LET p_aviso_rec.pct_red_bc_frete_d  =  0
    LET p_aviso_rec.pct_red_bc_frete_c  =  0
    LET p_aviso_rec.pct_diferen_fret_d  =  0
    LET p_aviso_rec.pct_diferen_fret_c  =  0
    WHENEVER ERROR CONTINUE
    UPDATE aviso_rec SET aviso_rec.* = p_aviso_rec.*
     WHERE aviso_rec.cod_empresa = p_cod_empresa
       AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
       AND aviso_rec.num_seq       = p_num_seq
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0  THEN
       IF NOT sup1031_grava_audit_ar(p_aviso_rec.num_aviso_rec,
                                     p_num_seq,
                                     "SUP3760","4") THEN
          RETURN FALSE
       END IF

       INSERT INTO nf_sup_erro ( empresa, num_aviso_rec, num_seq, des_pendencia_item, ies_origem_erro, ies_erro_grave )  VALUES ( p_aviso_rec.cod_empresa,
                                        p_aviso_rec.num_aviso_rec,
                                        p_aviso_rec.num_seq,
                                        "Nao houve recebimento fiscal do item ",
                                        "1",
                                        "S"
)
       UPDATE nf_sup
          SET nf_sup.ies_nf_com_erro = "S",
              nf_sup.nom_resp_aceite_er = NULL
        WHERE nf_sup.cod_empresa   = p_aviso_rec.cod_empresa
          AND nf_sup.num_aviso_rec = p_aviso_rec.num_aviso_rec
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("UPDATE","NF_SUP")
          RETURN FALSE
       END IF
# OS 415085 - Winston
#       LET p_cod_empresa_arg = p_cod_empresa
#       LET p_num_aviso_rec_arg = p_dados_tela.num_aviso_rec
#       CALL sup376_busca_argumen()
       CALL sup376_exibe_array() # OS 415085 - Winston
    ELSE
       CALL log003_err_sql("UPDATE","AVISO_REC")
       RETURN FALSE
    END IF

    IF p_aviso_rec.num_oc > 0 THEN
       #FLUXO DE CAIXA

       #Atualizar saldo da ordem de compra no
       #fluxo de caixa após exclusão de inf. fiscais do AR
       IF NOT fcl1150_integra_oc_fcx(p_aviso_rec.cod_empresa,
                                     p_aviso_rec.num_oc,"IN") THEN
          RETURN FALSE
       END IF
    END IF

    MESSAGE " Exclusao de informacoes fiscais efetuada com sucesso. " ATTRIBUTE(REVERSE)
 END IF
 RETURN TRUE
 END FUNCTION

#------------------------------------#
 FUNCTION sup376_manut_item_terc()
#------------------------------------#
 DEFINE p_cod_fiscal_c  LIKE aviso_rec.cod_fiscal_item,
        l_status        SMALLINT

 INITIALIZE p_cod_fiscal_c TO NULL
 LET p_cod_fiscal_c[2,5] = p_dados_tela.cod_operacao[2,5]
 IF p_dados_tela.cod_operacao[1] = "5" THEN
    LET p_cod_fiscal_c[1]    = "1"
 END IF
 IF p_dados_tela.cod_operacao[1] = "6" THEN
    LET p_cod_fiscal_c[1]    = "2"
 END IF
 IF p_dados_tela.cod_operacao[1] = "7" THEN
    LET p_cod_fiscal_c[1]    = "3"
 END IF

 INITIALIZE p_ies_tip_entrada TO NULL
 CALL sup0686_retorna_tipo_entrada(p_cod_fiscal_c,
                                   p_dados_tela.cod_fiscal_compl)
                                   RETURNING l_status,
                                             p_ies_tip_entrada

 IF l_status = FALSE THEN
    LET p_ies_tip_entrada = " "
 END IF

 END FUNCTION

#-----------------------------------------------#
 FUNCTION sup376_entrada_pedido_ordem(p_funcao)
#-----------------------------------------------#
 DEFINE p_funcao CHAR(30)

 IF p_par_sup.ies_modulo_compras = "N" OR
    p_par_sup.ies_modulo_compras IS NULL THEN
    LET p_ies_informou_ped = "N"
    RETURN TRUE
 END IF

 IF p_funcao = "INCLUSAO" THEN
    LET p_fornec_incl_item = "XXXXX"
 END IF

 LET p_pedidos_p1 = p_pedidos[1,500]
 LET p_pedidos_p2 = p_pedidos[501,1000]
 LET p_pedidos_p3 = p_pedidos[1001,1200]
 LET p_ordens_p1  = p_ordens[1,500]
 LET p_ordens_p2  = p_ordens[501,1000]
 LET p_ordens_p3  = p_ordens[1001,1500]
 LET p_ordens_p4  = p_ordens[1501,1800]
 LET  p_prog_ordem1= p_prog_ordem[1,300]
 LET  p_prog_ordem2= p_prog_ordem[301,600]

 INITIALIZE p_array_volta, p_array_ped_aux TO NULL
 CALL sup385_entrada_pedidos(p_cod_empresa, p_dados_tela.cod_fornecedor,p_pedidos_p1,
                             p_pedidos_p2, p_pedidos_p3,p_ordens_p1, p_ordens_p2,
                             p_ordens_p3, p_ordens_p4,  p_prog_ordem1,p_prog_ordem2,
                             p_retorno_3760, p_fornec_incl_item,p_dados_tela.num_aviso_rec, p_funcao)
      RETURNING p_pedidos_p1, p_pedidos_p2, p_pedidos_p3, p_ordens_p1,
                p_ordens_p2, p_ordens_p3, p_ordens_p4, p_prog_ordem1,
                p_prog_ordem2, p_retorno_3760, p_qtd_entreg1, p_qtd_entreg2,
                p_qtd_entreg3, p_qtd_entreg4,p_qtd_entreg5, p_qtd_entreg6

 CALL log006_exibe_teclas("01 02 03 07", p_versao)
 #--inicio--vanderlei OS 332356 #
 IF (p_funcao = "COPIA") THEN
    CURRENT WINDOW IS w_sup37609
 ELSE
    CURRENT WINDOW IS w_sup37601
 END IF
 #---fim----vanderlei OS 332356 #

 OPTIONS
    HELP FILE m_arq_help

 LET p_pedidos[1,500] = p_pedidos_p1
 LET p_pedidos[501,1000] = p_pedidos_p2
 LET p_pedidos[1001,1200] = p_pedidos_p3
 LET p_ordens[1,500] = p_ordens_p1
 LET p_ordens[501,1000] = p_ordens_p2
 LET p_ordens[1001,1500] = p_ordens_p3
 LET p_ordens[1501,1800] = p_ordens_p4
 LET p_prog_ordem[1,300] = p_prog_ordem1
 LET p_prog_ordem[301,600] = p_prog_ordem2
 LET p_qtd_entreg[1,500]    = p_qtd_entreg1
 LET p_qtd_entreg[501,1000] = p_qtd_entreg2
 LET p_qtd_entreg[1001,1500]= p_qtd_entreg3
 LET p_qtd_entreg[1501,2000]= p_qtd_entreg4
 LET p_qtd_entreg[2001,2500]= p_qtd_entreg5
 LET p_qtd_entreg[2501,2600]= p_qtd_entreg6

 IF m_cnpj_nf_com_pc = "S" AND p_ies_pc_ant_fornec = "S" THEN
    LET p_dados_tela.cod_fornecedor = g_cod_forn_sup3850
    DISPLAY BY NAME p_dados_tela.cod_fornecedor
 END IF

 IF g_modifica_nf_transito = FALSE THEN #OS477406
    IF p_retorno_3760 <> FALSE THEN
       FOR p_sub = 1 TO 200
           #----------PEDIDO---------#
           IF p_pedidos[((6 * p_sub) - 5), (6 * p_sub)] = "XXXXXX" THEN
              LET p_array_pedidos[p_sub].num_pedido = NULL
              EXIT FOR
           ELSE
              LET p_array_pedidos[p_sub].num_pedido =
                  p_pedidos[((6 * p_sub) - 5), (6 * p_sub)]
           END IF
           #--------ORDEM-----------#
           IF p_ordens[((9 * p_sub) - 8), (9 * p_sub)] = "XXXXXXXXX" THEN
              LET p_array_pedidos[p_sub].num_oc = NULL
           ELSE
              LET p_array_pedidos[p_sub].num_oc =
                  p_ordens[((9 * p_sub) - 8), (9 * p_sub)]
           END IF
           #-----PROG_ENTREGA--------#
           IF p_prog_ordem[((3 * p_sub) - 2),(3 * p_sub)] = "XXX" THEN
              LET p_array_pedidos[p_sub].num_prog_entrega = NULL
           ELSE
              LET p_array_pedidos[p_sub].num_prog_entrega =
                  p_prog_ordem[((3 * p_sub) - 2), (3 * p_sub)]
           END IF
           #-----QTDE ENTREGA--------#
           IF p_qtd_entreg[((13 * p_sub) - 12),(13 * p_sub)] = "XXXXXXXXXXXXX"
           THEN
              LET p_array_ped_aux[p_sub].qtd_entregue = NULL
           ELSE
              LET p_array_ped_aux[p_sub].qtd_entregue =
                  p_qtd_entreg[((13 * p_sub) - 12),(13 * p_sub)]
           END IF
       END FOR
       FOR p_ind9 = p_sub TO 999
           INITIALIZE p_array_pedidos[p_ind9].* TO NULL
       END FOR
       LET p_ies_informou_ped = "S"
       IF p_array_pedidos[1].num_pedido IS NULL OR p_pedidos = " "  THEN
          LET p_ies_informou_ped = "N"
       END IF
       IF p_pedidos IS NOT NULL THEN
          CALL sup376_busca_infor_pedidos()
       END IF
    ELSE
       RETURN FALSE
    END IF
 END IF

 RETURN TRUE

END FUNCTION

#-------------------------------------------------#
 FUNCTION sup376_processa_consistencia(l_pergunta)
#-------------------------------------------------#
 DEFINE p_conta_ped            SMALLINT,
        p_conta_est            SMALLINT,
        l_pergunta             CHAR(01),
        l_count_st             SMALLINT,
        l_count_vdp            SMALLINT,
        l_num_seq              LIKE aviso_rec.num_seq,
        l_val_liquido_item     LIKE aviso_rec.val_liquido_item,
        l_cod_item             LIKE aviso_rec.cod_item,
        l_val_frete            LIKE aviso_rec.val_frete,
        l_ies_nf_transf        SMALLINT,
        l_status               SMALLINT,
        l_ies_tip_entrada      LIKE cod_fiscal_sup.ies_tip_entrada,
        l_ies_cred_pis         CHAR(01),
        l_ies_tip_incid_ipi    LIKE aviso_rec.ies_tip_incid_ipi,
        l_val_ipi_decl_item    LIKE aviso_rec.val_ipi_decl_item,
        l_val_ipi_calc_item    LIKE aviso_rec.val_ipi_calc_item,
        l_gru_ctr_desp_item    LIKE aviso_rec.gru_ctr_desp_item,
        l_cod_cla_fisc         LIKE aviso_rec.cod_cla_fisc,
        l_qtd_declarad_nf      LIKE aviso_rec.qtd_declarad_nf,
        l_num_nf               LIKE nf_sup.num_nf,
        l_num_proc_imp_nfs     LIKE nfe_sup_compl.num_proc_imp_nfs,
        l_pend_calc_decl       CHAR(01),
        l_par_forn             CHAR(01),
        l_resposta             SMALLINT,                #Vanderlei - OS 402649 #
        l_ies_especie_nf       LIKE nf_sup.ies_especie_nf,
        l_cod_fornecedor       LIKE nf_sup.cod_fornecedor,
        l_dat_entrada_nf       DATE,
        l_num_oc               LIKE ordem_sup.num_oc

 LET p_conta_ped = 0
 LET p_conta_est = 0
 LET p_houve_erro = FALSE

 CALL sup1084_cria_temp()

 WHENEVER ERROR CONTINUE
 SELECT num_aviso_rec
   FROM aviso_rec_compl
  WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = p_dados_tela.num_aviso_rec
    AND ies_situacao  = "C"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0
 THEN RETURN
 END IF

 INITIALIZE l_pend_calc_decl TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_ind_especial
   INTO l_pend_calc_decl
   FROM sup_par_ar
  WHERE sup_par_ar.empresa           = p_cod_empresa
    AND sup_par_ar.aviso_recebto     = p_dados_tela.num_aviso_rec
    AND sup_par_ar.seq_aviso_recebto = 0
    AND sup_par_ar.parametro         = "pend_calc_decl"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    LET l_pend_calc_decl = "N"
 END IF

 IF sup376_verifica_fechamento() THEN
    LET p_houve_erro = FALSE
    IF l_pergunta = "S" OR l_pend_calc_decl = "S" THEN
       CURRENT WINDOW IS w_sup37601
       #--inicio--vanderlei OS 402649 #
       IF sup3760_solicita_confirm_recal_imposto_declar(p_cod_empresa,
                                                        p_dados_tela.ies_especie_nf,
                                                        p_dados_tela.num_aviso_rec) THEN
          CALL log0040_confirm(21,04, "Deseja recalcular impostos declarados ?")
             RETURNING l_resposta

          IF l_resposta THEN
             LET l_pergunta = "S"
          ELSE
             LET l_pergunta = "N"
          END IF
       ELSE
          LET l_pergunta = "N"
       END IF
       #---fim----vanderlei OS 402649 #
    ELSE
    #  IF l_pergunta = "I" THEN
    #     LET l_pergunta = "S"
    #  END IF
    END IF

    ##OS 575678 ==> Transferido esta rotina de inclusão automática de ST para depois da
    ##pergunta "Deseja recalcular impostos declarados ?", para obedecer a resposta do
    ##usuário.
    ## O.S.513337
    IF (l_pergunta = "S" OR l_pergunta = "I" ) AND
    ## O.S 187036
       (p_dados_tela.ies_especie_nf = "NFD" OR
        p_dados_tela.ies_especie_nf = "NFE") THEN
       INITIALIZE l_count_st, l_count_vdp TO NULL
       IF p_dados_tela.cod_empresa_estab IS NULL THEN
          WHENEVER ERROR CONTINUE
          SELECT COUNT(*)
            INTO l_count_st
            FROM ar_subst_tribut
           WHERE cod_empresa       = p_cod_empresa
             AND (cod_empresa_estab IS NULL
              OR cod_empresa_estab = " ")
             AND num_aviso_rec     = p_dados_tela.num_aviso_rec
             AND ies_tipo_icms     = "R"
          WHENEVER ERROR STOP
       ELSE
          WHENEVER ERROR CONTINUE
          SELECT COUNT(*)
            INTO l_count_st
            FROM ar_subst_tribut
           WHERE cod_empresa       = p_cod_empresa
             AND cod_empresa_estab = p_dados_tela.cod_empresa_estab
             AND num_aviso_rec     = p_dados_tela.num_aviso_rec
             AND ies_tipo_icms     = "R"
          WHENEVER ERROR STOP
       END IF

       IF l_count_st IS NULL THEN
          LET l_count_st = 0
       END IF

       WHENEVER ERROR CONTINUE
       SELECT COUNT(*)
         INTO l_count_vdp
         FROM sup_nf_devol_cli
        WHERE empresa            = p_cod_empresa
          AND aviso_recebto      = p_dados_tela.num_aviso_rec
          AND dat_lancto         = p_nf_sup.dat_entrada_nf
          AND nota_fiscal_fatura <> 0
       WHENEVER ERROR STOP
       IF l_count_vdp IS NULL OR l_count_vdp = 0 THEN
          WHENEVER ERROR CONTINUE
          SELECT COUNT(*)
            INTO l_count_vdp
            FROM dev_item, dev_mestre
           WHERE dev_item.cod_empresa      = p_cod_empresa
             AND dev_item.num_nff          = p_dados_tela.num_aviso_rec
             AND dev_mestre.cod_empresa    = dev_item.cod_empresa
             AND dev_mestre.num_nff        = dev_item.num_nff
             AND dev_mestre.dat_lancamento = p_nf_sup.dat_entrada_nf
             AND dev_mestre.num_nff_origem <> 0
          WHENEVER ERROR STOP
          IF l_count_vdp IS NULL THEN
             LET l_count_vdp = 0
          END IF
       END IF

       IF l_count_st > 0 AND l_count_vdp > 0  THEN
          IF log0040_confirm(21,04, "Deseja recalcular substituicao tributaria ?") THEN
             IF p_dados_tela.cod_empresa_estab IS NULL THEN
                WHENEVER ERROR CONTINUE
                DELETE FROM ar_subst_tribut
                 WHERE cod_empresa       = p_cod_empresa
                   AND (cod_empresa_estab IS NULL
                    OR cod_empresa_estab = " ")
                   AND num_aviso_rec     = p_dados_tela.num_aviso_rec
                   AND ies_tipo_icms     = "R"
                WHENEVER ERROR STOP
             ELSE
                   WHENEVER ERROR CONTINUE
                   DELETE FROM ar_subst_tribut
                    WHERE cod_empresa       = p_cod_empresa
                      AND cod_empresa_estab = p_dados_tela.cod_empresa_estab
                      AND num_aviso_rec     = p_dados_tela.num_aviso_rec
                      AND ies_tipo_icms     = "R"
                   WHENEVER ERROR STOP
             END IF
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("EXCLUSAO","AR_SUBST_TRIBUT")
             END IF
             CALL sup3762_carrega_ar_subst_tribut(m_ies_fat_unico)
          END IF
       END IF
       IF l_count_st = 0 AND l_count_vdp > 0  THEN
          CALL sup3762_carrega_ar_subst_tribut(m_ies_fat_unico)
       END IF
    END IF

    # Inicio chamado 835591
    IF NOT sup3760_insere_parametro_sup1544(p_dados_tela.num_aviso_rec) THEN
       RETURN
    END IF
    # Fim chamado 835591

    ERROR " Aguarde...! Efetuando consistencia da NF. "
    CALL log120_procura_caminho("sup0680") RETURNING comando3
    LET comando3 = comando3 CLIPPED," ",p_cod_empresa,
                                    " ",p_dados_tela.num_aviso_rec,
                                    " ",l_pergunta,
                                    " ",g_baixou_terceiro
    RUN comando3 RETURNING p_cancel
    LET p_houve_erro = FALSE

    # Inicio chamado 835591
    IF NOT sup3760_elimina_parametro_sup1544(p_dados_tela.num_aviso_rec) THEN
       RETURN
    END IF
    # Fim chamado 835591

    CALL obf3760_inclusao_obf_nf_eletr(p_dados_tela.*)
#--inicio--ch708657 Antonio      #

    # Inicio Chamado 763.695
    #IF NOT sup376_cursor_for_update() THEN
    #   LET p_houve_erro = TRUE
    #END IF
    # Inicio Chamado 763.695

#---fim----ch708657      #

    CALL sup376_processa_divergencias()

    CALL log085_transacao("BEGIN")

    CALL sup376_consulta_dados()

    IF p_dados_tela.ies_especie_nf = 'NFR' AND
       m_ies_armaz_itau <> 'S' AND
       p_dados_tela.ies_nf_aguard_nfe = '4' THEN
       WHENEVER ERROR CONTINUE
       DECLARE cq_itens_nota CURSOR FOR
       SELECT aviso_rec.*
         FROM aviso_rec
        WHERE aviso_rec.cod_empresa   = p_dados_tela.cod_empresa
          AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("DECLARE","CQ_ITENS_NOTA")
          LET p_houve_erro = TRUE
       END IF

       IF NOT p_houve_erro THEN
          WHENEVER ERROR CONTINUE
          FOREACH cq_itens_nota INTO p_aviso_rec.*

             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("FOREACH","CQ_ITENS_NOTA")
                LET p_houve_erro = TRUE
                EXIT FOREACH
             END IF

             CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor,
                                                     p_aviso_rec.cod_item,
                                                     p_dados_tela.dat_emis_nf,
                                                     p_dados_tela.num_aviso_rec) RETURNING l_par_forn

             IF l_par_forn = '3' AND
                p_dados_tela.ies_nf_aguard_nfe <> "7" THEN #736225 Antonio/Carla
                IF sup376_gera_item_d_terc() = FALSE THEN
                   LET p_houve_erro = TRUE
                END IF

                LET p_aviso_rec.ies_item_estoq = 'N'
                LET p_aviso_rec.ies_situa_ar = 'C'
                LET p_aviso_rec.ies_liberacao_cont = 'N'

                IF p_par_sup_compl_1.cod_tip_desp_cons IS NOT NULL AND
                   p_par_sup_compl_1.cod_tip_desp_cons <> ' ' THEN
                   LET p_aviso_rec.cod_tip_despesa = p_par_sup_compl_1.cod_tip_desp_cons
                END IF
             END IF

             WHENEVER ERROR CONTINUE
             IF p_houve_erro = TRUE THEN
                EXIT FOREACH
             END IF
          END FOREACH
          WHENEVER ERROR STOP

          FREE cq_itens_nota
       END IF
    END IF

    LET int_flag = 0
    LET p_conta = 0
    SELECT COUNT(*) INTO p_conta
      FROM nf_sup_erro
     WHERE nf_sup_erro.empresa  = p_cod_empresa
       AND nf_sup_erro.num_aviso_rec  = p_dados_tela.num_aviso_rec
       AND (nf_sup_erro.ies_origem_erro <> "4" AND
            nf_sup_erro.ies_origem_erro <> "5")
    IF p_conta > 0 THEN
       # O UPDATE na tabela nf_sup deve ficar apos a chama da funcao
       # gera_movimento_estoque pois ao ser feito o update a tabela fica
       # em lock e ao se fazer a contagem (sup0530) o programa ficará
       # esperando a liberacao da mesma.
       UPDATE nf_sup
          SET ies_nf_com_erro = "S"
        WHERE nf_sup.cod_empresa   = p_cod_empresa
          AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec
       IF sqlca.sqlcode = 0 THEN
          WHENEVER ERROR CONTINUE
              CALL log085_transacao("COMMIT")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("COMMIT","UPDATE NF_SUP")
             CALL log085_transacao("ROLLBACK") #OS596059
             LET p_houve_erro = TRUE
          END IF
       ELSE
          LET p_houve_erro = TRUE
          CALL log085_transacao("ROLLBACK")
       END IF

       CALL log085_transacao("BEGIN")

       IF (m_empr_utiliz_mp66 = "S" OR m_empr_utiliz_mp66 = "R") AND
          (l_pergunta = "S" OR l_pergunta = "I" OR
          (l_pergunta = 'N' AND m_executou_sup3771 AND m_visualizar_notas_em_transito = "S")) AND ##727905
           p_houve_erro = FALSE THEN
          INITIALIZE l_num_seq, l_val_liquido_item, l_cod_item,
                     l_val_frete, l_ies_tip_incid_ipi,
                     l_val_ipi_decl_item, l_val_ipi_calc_item,
                     l_gru_ctr_desp_item, l_cod_cla_fisc,
                     l_qtd_declarad_nf TO NULL

          DECLARE cq_it_pis CURSOR WITH HOLD FOR
           SELECT num_seq, val_liquido_item, cod_item,
                  val_frete, ies_tip_incid_ipi,
                  val_ipi_decl_item, val_ipi_calc_item,
                  gru_ctr_desp_item, cod_cla_fisc,
                  qtd_declarad_nf, num_oc
             FROM aviso_rec
            WHERE cod_empresa   = p_cod_empresa
              AND num_aviso_rec = p_dados_tela.num_aviso_rec
          FOREACH cq_it_pis INTO l_num_seq, l_val_liquido_item,
                                 l_cod_item, l_val_frete,
                                 l_ies_tip_incid_ipi, l_val_ipi_decl_item,
                                 l_val_ipi_calc_item, l_gru_ctr_desp_item,
                                 l_cod_cla_fisc, l_qtd_declarad_nf, l_num_oc

             LET l_ies_nf_transf = FALSE
             IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                    p_dados_tela.num_aviso_rec,
                                                    p_dados_tela.num_nf,
                                                    p_dados_tela.ser_nf,
                                                    p_dados_tela.ssr_nf,
                                                    p_dados_tela.cod_fornecedor,
                                                    p_dados_tela.cod_operacao,
                                                    p_dados_tela.cod_fiscal_compl) THEN
                LET l_ies_nf_transf = TRUE
             END IF

             LET m_nfr_import     = FALSE
             LET l_ies_especie_nf = p_nf_sup.ies_especie_nf
             LET l_cod_fornecedor = p_dados_tela.cod_fornecedor
             IF sup3760_nfr_consignatario("PIS/COFINS") THEN
                LET m_nfr_import     = TRUE
                LET l_ies_especie_nf = "NFE"
                LET l_cod_fornecedor = sup3760_fornecedor_processo_imp(p_dados_tela.cod_fornecedor)
             END IF

             #CALL supr12_retorna_valor_frete_por_item_ar(p_cod_empresa,
             #                                            p_dados_tela.num_aviso_rec,
             #                                            l_num_seq)
             #   RETURNING l_val_frete

             IF p_dados_tela.cod_operacao[1,1] = "7" OR m_nfr_import THEN
                IF sup1084_grava_cred_piscofins_imp(p_cod_empresa,
                                                    p_dados_tela.num_aviso_rec,
                                                    l_num_seq,
                                                    l_val_liquido_item,
                                                    l_cod_item,
                                                    l_cod_fornecedor,
                                                    l_val_frete,
                                                    l_ies_especie_nf,
                                                    l_ies_nf_transf,
                                                    l_gru_ctr_desp_item,
                                                    l_cod_cla_fisc,
                                                    l_qtd_declarad_nf) = FALSE THEN
                   LET p_houve_erro = TRUE
                   EXIT FOREACH
                END IF
             ELSE
                CALL sup0782_busca_param_item(p_cod_empresa, l_cod_item) RETURNING l_ies_cred_pis

                # Inicio chamado 794.336
                IF LOG_existe_epl('sup3760y_after_process_consistencia') THEN
                   IF l_num_oc IS NOT NULL THEN
                      CALL LOG_setVar('cod_empresa', p_cod_empresa)
                      #EPL Codigo da empresa
                      #EPL TIPO: ordem_sup.cod_empresa

                      CALL LOG_setVar('num_oc', l_num_oc)
                      #EPL Numero da ordem de compra
                      #EPL TIPO: ordem_sup.num_oc

                      CALL LOG_setVar('credito_pis_cofins', NULL)
                      #EPL Indicador de credito de pis e cofins
                      #EPL TIPO: char(01)

                      IF sup3760y_after_process_consistencia() THEN
                         LET l_ies_cred_pis = LOG_getVar('credito_pis_cofins')
                      END IF
                   END IF
                END IF
                # Fim chamado 794.336

                IF m_empr_utiliz_mp66 = "R" THEN
                   IF NOT sup3760_busca_pct_bc_pis("REDUCAO",0) THEN
                      LET p_houve_erro = TRUE
                      EXIT FOREACH
                   END IF
                   LET l_val_liquido_item = (l_val_liquido_item * m_pct_bc_pis)/100

                   IF l_val_frete > 0 THEN
                      LET l_val_frete = (l_val_frete * m_pct_bc_pis)/100
                   END IF
                ELSE
                   IF l_ies_cred_pis = "R" THEN
                      IF sup3760_busca_pct_bc_pis("PARCIAL",l_num_seq) THEN
                         LET l_val_liquido_item = (l_val_liquido_item * m_pct_bc_pis)/100

                         IF l_val_frete > 0 THEN
                            LET l_val_frete = (l_val_frete * m_pct_bc_pis)/100
                         END IF
                      END IF
                   END IF
                END IF

                IF p_dados_tela.ies_especie_nf = "NFC" AND
                   l_ies_cred_pis = "S" THEN
                   CALL log0040_confirm(21,04, "NFC tem direito a credito de PIS/COFINS?") RETURNING g_pergunta
                   IF g_pergunta = TRUE THEN
                      LET g_pergunta = "S"
                   ELSE
                      LET g_pergunta = "N"
                   END IF
                END IF

                INITIALIZE l_ies_tip_entrada, l_status TO NULL
                CALL sup0686_retorna_tipo_entrada(p_dados_tela.cod_operacao,
                                                  p_dados_tela.cod_fiscal_compl)
                                                  RETURNING l_status,
                                                            l_ies_tip_entrada

                ### OS 282025 ###
                IF l_ies_tip_incid_ipi = "O" THEN
                   IF l_val_ipi_decl_item > 0 THEN
                      LET l_val_liquido_item = l_val_liquido_item + l_val_ipi_decl_item
                   ELSE
                      LET l_val_liquido_item = l_val_liquido_item + l_val_ipi_calc_item
                   END IF
                END IF


              #542889
              IF m_icms_ret_base_calc_pis_cofins = 'S' THEN
                 CALL sup3760_busca_val_icms_dev_ret(l_val_liquido_item,l_num_seq)
                                           RETURNING l_val_liquido_item
              END IF


                IF sup0782_grava_ar_pis_cofins(p_cod_empresa,
                                               p_dados_tela.num_aviso_rec,
                                               l_num_seq,
                                               l_val_liquido_item,
                                               l_cod_item,
                                               l_cod_fornecedor,
                                               l_val_frete,
                                               l_ies_especie_nf,
                                               l_ies_nf_transf,
                                               l_ies_tip_entrada) = FALSE THEN
                   LET p_houve_erro = TRUE
                   EXIT FOREACH
                END IF
             END IF
          END FOREACH
          FREE cq_it_pis
       END IF

       IF p_houve_erro = FALSE THEN
          WHENEVER ERROR CONTINUE
              CALL log085_transacao("COMMIT")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             INITIALIZE p_msg TO NULL
             LET p_msg = "Erro na efetivação dos dados. SQLCA.SQLCODE = ", sqlca.SQLCODE CLIPPED
             CALL log0030_mensagem(p_msg,"stop")
             CALL log085_transacao("ROLLBACK") #OS596059
             RETURN
          END IF
       ELSE
          CALL log0030_mensagem("Erro na consistencia da nota, funcao cancelada.","exclamation")
          CALL log085_transacao("ROLLBACK")
       END IF

       IF p_ies_cont_insp_aut = "3" THEN
          IF p_par_sup_compl.ies_conta_ok_n_est = "2" OR
             (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
              p_dados_tela.ies_especie_nf = "NFS") THEN
             IF sup376_verifica_itens_nao_estoque() THEN
                CALL sup376_consulta_dados()
                CALL sup376_gera_movimento_estoque("NORMAL","NORMAL")
             ELSE
                #IF p_par_estoque.ies_custo_medio = "D" THEN
                   CALL sup376_gera_movimento_estoque("NORMAL","NORMAL")
                #END IF
             END IF
          ELSE
             #IF p_par_estoque.ies_custo_medio = "D" THEN
                CALL sup376_gera_movimento_estoque("NORMAL","NORMAL")
             #END IF
          END IF
       ELSE
          IF p_par_sup_compl.ies_conta_ok_n_est = "2" OR
             (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
              p_dados_tela.ies_especie_nf = "NFS") THEN
             IF sup376_verifica_itens_nao_estoque() THEN
                CALL sup376_consulta_dados()
                CALL sup376_gera_movimento_estoque("NORMAL","NORMAL")
             ELSE
                CALL sup376_gera_movimento_estoque("NORMAL","NORMAL")
             END IF
          ELSE
             CALL sup376_gera_movimento_estoque("NORMAL","NORMAL")
          END IF
       END IF
       CALL log0030_mensagem(" Foram detectados erros na consistencia na N.F ","exclamation")
       #O.S. 529316
       IF p_dados_tela.num_nf IS NOT NULL
       AND m_abre_aut_tela_erros = "S" THEN
          CALL sup376_busca_nf_sup(p_dados_tela.num_aviso_rec)
          LET p_nom_resp_aceite_er = p_nf_sup.nom_resp_aceite_er
          CALL sup377_zoom_erros(p_cod_empresa, p_dados_tela.num_aviso_rec, p_nom_resp_aceite_er)
       END IF
       #O.S. 529316
    ELSE
       LET p_nf_sup.ies_nf_com_erro = "N"
       # O UPDATE na tabela nf_sup deve ficar apos a chama da funcao
       # gera_movimento_estoque pois ao ser feito o update a tabela fica
       # em lock e ao se fazer a contagem (sup0530) o programa ficará
       # esperando a liberacao da mesma.
       UPDATE nf_sup
          SET ies_nf_com_erro = "N"
        WHERE nf_sup.cod_empresa   = p_cod_empresa
          AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec
       IF sqlca.sqlcode = 0 THEN
          WHENEVER ERROR CONTINUE
          UPDATE nf_sup_aux SET ies_nf_com_erro = "N", nom_resp_aceite_er = p_nf_sup.nom_resp_aceite_er
           WHERE nf_sup_aux.cod_empresa   = p_cod_empresa
             AND nf_sup_aux.num_aviso_rec = p_dados_tela.num_aviso_rec
          WHENEVER ERROR STOP
          IF sqlca.sqlcode = 0 THEN
             WHENEVER ERROR CONTINUE
                 CALL log085_transacao("COMMIT")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("COMMIT","UPDATE NF_SUP (2)")
                CALL log085_transacao("ROLLBACK") #OS596059
                LET p_houve_erro = TRUE
             END IF
          ELSE
             LET p_houve_erro = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("ROLLBACK TRANSACTION","sup376_processa_consistencia")
             END IF
          END IF
       ELSE
          LET p_houve_erro = TRUE
          CALL log085_transacao("ROLLBACK")
       END IF
       CALL log085_transacao("BEGIN")

       CALL sup376_consulta_dados()

       IF (m_empr_utiliz_mp66 = "S" OR m_empr_utiliz_mp66 = "R") AND
          (l_pergunta = "S" OR l_pergunta = "I" OR
          (l_pergunta = 'N' AND m_executou_sup3771 AND m_visualizar_notas_em_transito = "S")) AND ##727905
           p_houve_erro = FALSE THEN
          INITIALIZE l_num_seq, l_val_liquido_item, l_cod_item,
                     l_val_frete, l_ies_tip_incid_ipi,
                     l_val_ipi_decl_item, l_val_ipi_calc_item,
                     l_gru_ctr_desp_item, l_cod_cla_fisc,
                     l_qtd_declarad_nf TO NULL

          DECLARE cq_it_pis1 CURSOR WITH HOLD FOR
           SELECT num_seq, val_liquido_item, cod_item,
                  val_frete, ies_tip_incid_ipi,
                  val_ipi_decl_item, val_ipi_calc_item,
                  gru_ctr_desp_item, cod_cla_fisc,
                  qtd_declarad_nf
             FROM aviso_rec
            WHERE cod_empresa   = p_cod_empresa
              AND num_aviso_rec = p_dados_tela.num_aviso_rec

          FOREACH cq_it_pis1 INTO l_num_seq, l_val_liquido_item,
                                  l_cod_item, l_val_frete,
                                  l_ies_tip_incid_ipi, l_val_ipi_decl_item,
                                  l_val_ipi_calc_item, l_gru_ctr_desp_item,
                                  l_cod_cla_fisc, l_qtd_declarad_nf

             LET l_ies_nf_transf = FALSE
             IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                    p_dados_tela.num_aviso_rec,
                                                    p_dados_tela.num_nf,
                                                    p_dados_tela.ser_nf,
                                                    p_dados_tela.ssr_nf,
                                                    p_dados_tela.cod_fornecedor,
                                                    p_dados_tela.cod_operacao,
                                                    p_dados_tela.cod_fiscal_compl) THEN
                LET l_ies_nf_transf = TRUE
             END IF

             LET m_nfr_import     = FALSE
             LET l_ies_especie_nf = p_nf_sup.ies_especie_nf
             LET l_cod_fornecedor = p_dados_tela.cod_fornecedor
             IF sup3760_nfr_consignatario("PIS/COFINS") THEN
                LET m_nfr_import     = TRUE
                LET l_ies_especie_nf = "NFE"
                LET l_cod_fornecedor = sup3760_fornecedor_processo_imp(p_dados_tela.cod_fornecedor)
             END IF

             #CALL supr12_retorna_valor_frete_por_item_ar(p_cod_empresa,
             #                                            p_dados_tela.num_aviso_rec,
             #                                            l_num_seq)
             #   RETURNING l_val_frete

             IF p_dados_tela.cod_operacao[1,1] = "7" OR m_nfr_import THEN
                IF sup1084_grava_cred_piscofins_imp(p_cod_empresa,
                                                    p_dados_tela.num_aviso_rec,
                                                    l_num_seq,
                                                    l_val_liquido_item,
                                                    l_cod_item,
                                                    l_cod_fornecedor,
                                                    l_val_frete,
                                                    l_ies_especie_nf,
                                                    l_ies_nf_transf,
                                                    l_gru_ctr_desp_item,
                                                    l_cod_cla_fisc,
                                                    l_qtd_declarad_nf) = FALSE THEN
                   LET p_houve_erro = TRUE
                   EXIT FOREACH
                END IF
             ELSE
                CALL sup0782_busca_param_item(p_cod_empresa, l_cod_item) RETURNING l_ies_cred_pis

                IF m_empr_utiliz_mp66 = "R" THEN
                   IF NOT sup3760_busca_pct_bc_pis("REDUCAO",0) THEN
                      LET p_houve_erro = TRUE
                      EXIT FOREACH
                   END IF
                   LET l_val_liquido_item = (l_val_liquido_item * m_pct_bc_pis)/100

                   IF l_val_frete > 0 THEN
                      LET l_val_frete = (l_val_frete * m_pct_bc_pis)/100
                   END IF
                ELSE
                   IF l_ies_cred_pis = "R" THEN
                      IF sup3760_busca_pct_bc_pis("PARCIAL",l_num_seq) THEN
                         LET l_val_liquido_item = (l_val_liquido_item * m_pct_bc_pis)/100

                         IF l_val_frete > 0 THEN
                            LET l_val_frete = (l_val_frete * m_pct_bc_pis)/100
                         END IF
                      END IF
                   END IF
                END IF

                IF p_dados_tela.ies_especie_nf = "NFC" AND
                   l_ies_cred_pis = "S" THEN
                   CALL log0040_confirm(21,04, "NFC tem direito a credito de PIS/COFINS?") RETURNING g_pergunta
                   IF g_pergunta = TRUE THEN
                      LET g_pergunta = "S"
                   ELSE
                      LET g_pergunta = "N"
                   END IF
                END IF

                INITIALIZE l_ies_tip_entrada, l_status TO NULL
                CALL sup0686_retorna_tipo_entrada(p_dados_tela.cod_operacao,
                                                  p_dados_tela.cod_fiscal_compl)
                                                  RETURNING l_status,
                                                            l_ies_tip_entrada

                ### OS 282025 ###
                IF l_ies_tip_incid_ipi = "O" THEN
                   IF l_val_ipi_decl_item > 0 THEN
                      LET l_val_liquido_item = l_val_liquido_item + l_val_ipi_decl_item
                   ELSE
                      LET l_val_liquido_item = l_val_liquido_item + l_val_ipi_calc_item
                   END IF
                END IF

                #542889
                IF m_icms_ret_base_calc_pis_cofins = 'S' THEN
                   CALL sup3760_busca_val_icms_dev_ret(l_val_liquido_item,l_num_seq)
                                             RETURNING l_val_liquido_item
                END IF


                IF sup0782_grava_ar_pis_cofins(p_cod_empresa,
                                               p_dados_tela.num_aviso_rec,
                                               l_num_seq,
                                               l_val_liquido_item,
                                               l_cod_item,
                                               l_cod_fornecedor,
                                               l_val_frete,
                                               l_ies_especie_nf,
                                               l_ies_nf_transf,
                                               l_ies_tip_entrada) = FALSE THEN
                   LET p_houve_erro = TRUE
                END IF
             END IF
          END FOREACH
       END IF

       IF p_houve_erro = FALSE THEN
          WHENEVER ERROR CONTINUE
              CALL log085_transacao("COMMIT")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             INITIALIZE p_msg TO NULL
             LET p_msg = "Erro na efetivação dos dados. SQLCA.SQLCODE = ", sqlca.SQLCODE CLIPPED
             CALL log0030_mensagem(p_msg,"stop")
             CALL log085_transacao("ROLLBACK") #OS596059
             RETURN
          END IF
       ELSE
          CALL log0030_mensagem("Erro na consistencia da nota, funcao cancelada.","exclamation")
          CALL log085_transacao("ROLLBACK")
       END IF

       CALL sup376_gera_movimento_estoque("NORMAL","NORMAL")

       CALL sup376_verifica_frete()
       IF p_dados_tela.ies_especie_nf = "NFD" AND
          (p_dados_tela.ies_nf_aguard_nfe <> "6" AND
### 358438
           p_dados_tela.ies_nf_aguard_nfe <> "9") AND
          g_ies_tex_inst = "S"                  THEN
          LET p_val_imposto = p_dados_tela_f.val_ipi_nf + p_dados_tela_f.val_tot_icms_nf_d
          IF sup6983_gera_arquivo(p_dados_tela.num_aviso_rec,
                               p_dados_tela.num_nf,
                               0,
                               p_dados_tela.num_nf,
                               p_dados_tela.dat_entrada_nf,
                               p_val_imposto,
                               p_dados_tela_f.val_tot_nf_d,
                               "SUP3760") THEN
          END IF
       ELSE #eduardo o.s.334741
          WHENEVER ERROR CONTINUE
          SELECT *
            FROM sup_par_ar
           WHERE empresa           = p_cod_empresa
             AND aviso_recebto     = p_dados_tela.num_aviso_rec
             AND seq_aviso_recebto = '1'
             AND parametro         = 'interface_nf_sup6981'
          WHENEVER ERROR STOP
          IF sqlca.sqlcode = 0 THEN
             WHENEVER ERROR CONTINUE
             SELECT num_proc_imp_nfs
               INTO l_num_proc_imp_nfs
               FROM nfe_sup_compl
              WHERE cod_empresa   = p_cod_empresa
                AND num_aviso_rec = p_dados_tela.num_aviso_rec
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                LET l_num_nf = p_nf_sup.num_nf
             ELSE
                IF l_num_proc_imp_nfs <> " " AND
                   l_num_proc_imp_nfs IS NOT NULL THEN
                   LET l_num_nf = l_num_proc_imp_nfs
                ELSE
                   LET l_num_nf = p_dados_tela.num_nf
                END IF
             END IF
             IF p_dados_tela.ies_especie_nf = "NFD"  AND
                p_dados_tela.ies_nf_aguard_nfe = "6" AND
                g_ies_tex_inst = "S" THEN
                LET p_val_imposto = p_dados_tela_f.val_ipi_nf +
                                    p_dados_tela_f.val_tot_icms_nf_d
                IF sup6983_gera_arquivo(p_dados_tela.num_aviso_rec,
                                        l_num_nf,
                                        0,
                                        l_num_nf , #p_dados_tela.num_nf,
                                        p_dados_tela.dat_entrada_nf,
                                        p_val_imposto,
                                        p_dados_tela_f.val_tot_nf_d,
                                        "SUP3760") THEN
                END IF
             END IF
          END IF #Eduardo o.s.334741
       END IF
       IF p_ies_grava_erro_4 = "S" THEN
          CALL sup376_grava_liberacao_nota()
       END IF
    END IF

    IF (m_diver_nf    MATCHES "[1-3]" AND m_pct_toler_nf    <> 0) OR
       (m_diver_custo MATCHES "[1-3]" AND m_pct_toler_custo <> 0) THEN
       ERROR " Aguarde...! Efetuando consistencia da NF. "

       # Inicio chamado 835591
       IF NOT sup3760_insere_parametro_sup1544(p_dados_tela.num_aviso_rec) THEN
          RETURN
       END IF
       # Fim chamado 835591

       CALL log120_procura_caminho("sup0680") RETURNING comando3

       LET comando3 = comando3 CLIPPED," ",p_cod_empresa,
                                       " ",p_dados_tela.num_aviso_rec,
                                       " ",l_pergunta,
                                       " ",g_baixou_terceiro

       RUN comando3 RETURNING p_cancel

       # Inicio chamado 835591
       IF NOT sup3760_elimina_parametro_sup1544(p_dados_tela.num_aviso_rec) THEN
          RETURN
       END IF
       # Fim chamado 835591

       CALL obf3760_inclusao_obf_nf_eletr(p_dados_tela.*)
    END IF

    CALL sup1473_integra_nf_cap_livro_fiscal(p_dados_tela.num_nf,
                                             p_dados_tela.ser_nf,
                                             p_dados_tela.ssr_nf,
                                             "NOTA","", "", "",
                                             p_dados_tela.cod_empresa, "",
                                             p_dados_tela.cod_fornecedor,
                                             p_dados_tela.ies_especie_nf)

    ##Se for integração ON-LINE poderá existir lançamentos contábeis para o documento,
    ##já que o indicador ies_incl_contab só passará para "S" quando for efetuado
    ##a integração contábil (geração do lote ou arquivo texto).
    IF NOT supr6_integracao_batch(p_cod_empresa) AND
       supr6_data_posterior_data_corte_logix_10(p_cod_empresa,
                                                p_dados_tela.dat_entrada_nf) THEN

       ##Excluir os lançamentos para não ficar com registro desatualizado,
       ##quando o frete ou a nota fiscal tiver erros não assumidos e
       ##não puder ser refeito a contabilização.

       IF m_dat_entrada_ant IS NULL THEN
          LET l_dat_entrada_nf = p_dados_tela.dat_entrada_nf
       ELSE
          LET l_dat_entrada_nf = m_dat_entrada_ant
       END IF

       CALL sup3762_exclui_lancamento_contabil_nf_e_frete(l_dat_entrada_nf)


    END IF

    IF NOT supr6_contabilizacao_por_documento(p_cod_empresa,
                                              p_dados_tela.num_nf,
                                              p_dados_tela.ser_nf,
                                              p_dados_tela.ssr_nf,
                                              p_dados_tela.ies_especie_nf,
                                              p_dados_tela.cod_fornecedor,
                                              p_dados_tela.dat_entrada_nf,
                                              p_dados_tela.num_aviso_rec,FALSE) THEN
       CALL log0030_mensagem("Ocorreram erros na contabilização do documento.","exclamation")
    END IF
    LET m_dat_entrada_ant = p_dados_tela.dat_entrada_nf #798726#
 ELSE
    CALL log0030_exibe_ultima_mensagem()
 END IF

 END FUNCTION

#------------------------------#
 FUNCTION sup376_inclui_frete()
#------------------------------#
   DEFINE comando_rpa  CHAR(01),
          p_prog       CHAR(07),
          comando2     CHAR(100)

 LET p_ies_tip_frete = NULL
 SELECT ies_tip_frete
   INTO p_ies_tip_frete
   FROM modo_embarque
  WHERE modo_embarque.cod_mod_embar  = p_dados_tela.cod_mod_embar
 IF sqlca.sqlcode = 0 THEN
    IF p_ies_tip_frete = "2" THEN

       IF p_dados_tela.ies_especie_nf = "NFS" THEN
          RETURN
       END IF

       IF sup376_verifica_parametro_rpa() THEN
          CALL log0040_confirm(21,04, "Este frete se refere a um R.P.A. ?") RETURNING comando_rpa
          IF comando_rpa = TRUE THEN
             LET comando_rpa = "S"
          ELSE
             LET comando_rpa = "N"
          END IF
          IF comando_rpa = "N" OR
             comando_rpa = "n" THEN
              CALL sup4510_popup_frete(p_cod_uni_feder, p_dados_tela.num_aviso_rec, p_dados_tela_f.val_tot_nf_d,p_ies_tip_frete)
                 RETURNING p_cod_transpor, p_num_conhec,
                           p_ser_conhec, p_ssr_conhec
          ELSE
             LET p_prog = "sup3760"
             IF p_nf_sup.ser_nf IS NULL OR
                p_nf_sup.ser_nf = " " THEN
                LET p_nf_sup.ser_nf = "@"
             END IF
             CALL log120_procura_caminho("sup9220") RETURNING comando2
                 LET comando2 = comando2 CLIPPED," " ,p_cod_empresa, " ",
                                             p_nf_sup.num_nf, " ",
                                             p_nf_sup.ser_nf, " ",
                                             p_nf_sup.ssr_nf, " ",
                                             p_nf_sup.cod_fornecedor, " ",
                                             p_prog, " "
                 RUN comando2 RETURNING p_cancel
             IF p_nf_sup.ser_nf = "@" THEN
                LET p_nf_sup.ser_nf = " "
             END IF
          END IF
       ELSE
         CALL sup4510_popup_frete(p_cod_uni_feder, p_dados_tela.num_aviso_rec, p_dados_tela_f.val_tot_nf_d,p_ies_tip_frete)
            RETURNING p_cod_transpor, p_num_conhec,
                      p_ser_conhec, p_ssr_conhec
       END IF
    ELSE
       #--inicio--OS 728028 #
       IF find4GLFunction('supy13_cliente_55') = TRUE AND
          p_ies_tip_frete = "1" THEN
          CALL sup4510_popup_frete(p_cod_uni_feder, p_dados_tela.num_aviso_rec, p_dados_tela_f.val_tot_nf_d,p_ies_tip_frete)
            RETURNING p_cod_transpor, p_num_conhec,
                      p_ser_conhec, p_ssr_conhec

          CALL log006_exibe_teclas("01", p_versao)

          CALL supy13_busca_conhec(p_cod_empresa,
                                   p_nf_sup.num_aviso_rec)
                         RETURNING p_nf_sup.cod_transpor,
                                   p_nf_sup.num_conhec,
                                   p_nf_sup.ser_conhec,
                                   p_nf_sup.ssr_conhec


          IF p_nf_sup.num_conhec <> 0 THEN
             DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,50 ATTRIBUTE(REVERSE)
          END IF

       END IF

       CALL log006_exibe_teclas("01", p_versao)
       #---fim----OS 728028 #
    END IF
 END IF
 INITIALIZE p_cod_transpor, p_num_conhec,
            p_ser_conhec, p_ssr_conhec TO NULL
 END FUNCTION

#--------------------------------------#
 FUNCTION sup3760_gera_item_ret_terc()
#--------------------------------------#
 DEFINE lr_item_em_terc  RECORD LIKE item_em_terc.*,
        lr_item_ret_terc RECORD LIKE item_ret_terc.*,
        l_saldo_terc     LIKE item_em_terc.qtd_tot_remessa,
        lr_item_dev_terc RECORD LIKE item_dev_terc.*

  LET g_baixou_terceiro = FALSE
  DECLARE cq_it_dv_terc CURSOR FOR
  SELECT *
    FROM item_dev_terc
   WHERE item_dev_terc.cod_empresa = p_cod_emp_transf
     AND item_dev_terc.num_nf_retorno = p_dados_tela.num_nf
     AND item_dev_terc.num_sequencia_nf = p_array[p_ind].seq
  FOREACH cq_it_dv_terc INTO lr_item_dev_terc.*
    DECLARE cq_it_em_terc CURSOR FOR
    SELECT *
      FROM item_em_terc
     WHERE item_em_terc.cod_empresa    = p_cod_empresa
       AND item_em_terc.num_nf         = lr_item_dev_terc.num_nf
       AND item_em_terc.num_sequencia  = lr_item_dev_terc.num_sequencia
    FOREACH cq_it_em_terc INTO lr_item_em_terc.*
      LET l_saldo_terc = (lr_item_em_terc.qtd_tot_remessa - lr_item_em_terc.qtd_tot_recebida)
      IF l_saldo_terc > 0 THEN
         LET lr_item_ret_terc.cod_empresa = lr_item_em_terc.cod_empresa
         LET lr_item_ret_terc.num_nf      = p_dados_tela.num_nf
         LET lr_item_ret_terc.ser_nf      = p_dados_tela.ser_nf
         LET lr_item_ret_terc.ssr_nf           = p_dados_tela.ssr_nf
         LET lr_item_ret_terc.ies_especie_nf   =  "NFR"
         LET lr_item_ret_terc.cod_fornecedor   = p_dados_tela.cod_fornecedor
         LET lr_item_ret_terc.ies_incl_contab  = "N"
         LET lr_item_ret_terc.num_sequencia_ar = p_array[p_ind].seq
         LET lr_item_ret_terc.dat_emis_nf      = p_dados_tela.dat_emis_nf
         LET lr_item_ret_terc.dat_entrada_nf   = p_dados_tela.dat_entrada_nf
         LET lr_item_ret_terc.dat_inclusao_seq = TODAY
         LET lr_item_ret_terc.num_nf_remessa   = lr_item_em_terc.num_nf
         LET lr_item_ret_terc.num_sequencia_nf = lr_item_em_terc.num_sequencia
         LET lr_item_ret_terc.qtd_devolvida    = lr_item_dev_terc.qtd_devolvida

         LET g_baixou_terceiro = TRUE

         WHENEVER ERROR CONTINUE
         INSERT INTO item_ret_terc ( cod_empresa, num_nf, ser_nf, ssr_nf, ies_especie_nf, cod_fornecedor, ies_incl_contab, num_sequencia_ar, dat_emis_nf, dat_entrada_nf, dat_inclusao_seq, num_nf_remessa, num_sequencia_nf, qtd_devolvida, tex_observ )  VALUES ( lr_item_ret_terc.cod_empresa, lr_item_ret_terc.num_nf, lr_item_ret_terc.ser_nf, lr_item_ret_terc.ssr_nf, lr_item_ret_terc.ies_especie_nf, lr_item_ret_terc.cod_fornecedor, lr_item_ret_terc.ies_incl_contab, lr_item_ret_terc.num_sequencia_ar, lr_item_ret_terc.dat_emis_nf, lr_item_ret_terc.dat_entrada_nf, lr_item_ret_terc.dat_inclusao_seq, lr_item_ret_terc.num_nf_remessa, lr_item_ret_terc.num_sequencia_nf, lr_item_ret_terc.qtd_devolvida, lr_item_ret_terc.tex_observ)
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("INCLUSAO","ITEM_RET_TERC")
           RETURN FALSE
         END IF
         WHENEVER ERROR CONTINUE
         UPDATE item_em_terc
            SET item_em_terc.qtd_tot_recebida = item_em_terc.qtd_tot_recebida +
                                                lr_item_dev_terc.qtd_devolvida
          WHERE item_em_terc.cod_empresa   = lr_item_em_terc.cod_empresa
            AND item_em_terc.num_nf        = lr_item_em_terc.num_nf
            AND item_em_terc.num_sequencia = lr_item_em_terc.num_sequencia
         WHENEVER ERROR STOP
         IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("MODIFICACAO","ITEM_EM_TERC")
           RETURN FALSE
         END IF
      ELSE
         LET g_baixou_terceiro = FALSE
      END IF
    END FOREACH
  END FOREACH
  RETURN TRUE
 END FUNCTION

#----------------------------------------------------------------#
 FUNCTION sup376_elimina_item_ret_terc(l_num_aviso_rec, l_num_seq,
                                       l_tipo)
#----------------------------------------------------------------#
 DEFINE lr_item_em_terc       RECORD LIKE item_em_terc.*,
        lr_item_ret_terc      RECORD LIKE item_ret_terc.*,
        lr_sup_itterc_grade   RECORD LIKE sup_itterc_grade.*,
        l_saldo_terc          LIKE item_em_terc.qtd_tot_remessa,
        l_saldo_excluir       LIKE item_em_terc.qtd_tot_remessa,
        l_aviso_rec           RECORD LIKE aviso_rec.*,
        l_num_aviso_rec       LIKE aviso_rec.num_aviso_rec,
        l_num_seq             LIKE aviso_rec.num_seq,
        l_tipo                CHAR(01),
        sql_stmt              CHAR(3000),
        l_contr_local_terc    CHAR(04),
        l_estoque_trans       RECORD LIKE estoque_trans.*,
        l_cod_motivo_remessa  LIKE item_em_terc.cod_motivo_remessa,
        l_local_estoq         LIKE item.cod_local_estoq,
        lr_estoque_trans_end   RECORD LIKE estoque_trans_end.*,
        lr_estoque_obs         RECORD LIKE estoque_obs.*,
        l_qtd_devolvida       LIKE sup_retn_item_terc.qtd_devolvida,
        l_seq_tabulacao       LIKE sup_itterc_grade.seq_tabulacao,
        l_cod_item            like item.cod_item

 LET l_contr_local_terc = sup376_busca_par_sup_pad("contr_local_terc",3)

 LET sql_stmt = "Select * from aviso_rec ",
        " where aviso_rec.cod_empresa = """, p_cod_empresa, """ ",
        "   and aviso_rec.num_aviso_rec = """, l_num_aviso_rec, """ "

 IF l_tipo = "1" THEN
    LET sql_stmt = sql_stmt CLIPPED,
      " AND aviso_rec.num_seq  = """, l_num_seq, """ "
 END IF
 WHENEVER ERROR CONTINUE
 PREPARE var_query11 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query1")
 END IF
 WHENEVER ERROR CONTINUE
 DECLARE cq_ar_terc CURSOR WITH HOLD FOR var_query11
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","cq_rt_terc")
 END IF
 INITIALIZE sql_stmt TO NULL
 LET sql_stmt = " SELECT * ",
                  " FROM item_ret_terc ",
                 " WHERE item_ret_terc.cod_empresa = '", p_cod_empresa, "' ",
                   " AND item_ret_terc.num_nf = ", p_dados_tela.num_nf, " ",
                   " AND item_ret_terc.ser_nf = '", p_dados_tela.ser_nf, "' ",
                   " AND item_ret_terc.ssr_nf = ", p_dados_tela.ssr_nf, " ",
                   " AND item_ret_terc.cod_fornecedor = '", p_dados_tela.cod_fornecedor, "' ",
                   " AND item_ret_terc.num_sequencia_ar = ? "
 WHENEVER ERROR CONTINUE
 PREPARE var_query2 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query2")
 END IF
 WHENEVER ERROR CONTINUE
 DECLARE cq_rt_terc CURSOR FOR var_query2
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","cq_rt_terc")
 END IF
 INITIALIZE sql_stmt TO NULL
 LET sql_stmt = " SELECT * ",
                  " FROM sup_itterc_grade ",
                 " WHERE empresa     = '", p_cod_empresa, "' ",
                   " AND nota_fiscal = ? ",
                   " AND seq_item_nf = ? ",
                 " ORDER BY seq_tabulacao DESC "
 WHENEVER ERROR CONTINUE
 PREPARE var_query4 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query4")
 END IF
 WHENEVER ERROR CONTINUE
 DECLARE cq_cons2 CURSOR FOR var_query4
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","cq_cons2")
 END IF
 INITIALIZE sql_stmt TO NULL
 LET sql_stmt = " SELECT seq_tabulacao, ",
                       " qtd_devolvida ",
                  " FROM sup_retn_item_terc ",
                 " WHERE empresa           = '", p_cod_empresa, "' ",
                   " AND nota_fiscal       = ? ",
                   " AND serie_nota_fiscal = ? ",
                   " AND subserie_nf       = ? ",
                   " AND espc_nota_fiscal  = ? ",
                   " AND fornecedor        = ? ",
                   " AND seq_aviso_recebto = ? ",
                   " AND nf_remessa        = ? ",
                   " AND seq_nf_remessa    = ? "
 WHENEVER ERROR CONTINUE
 PREPARE var_query5 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query5")
 END IF
 WHENEVER ERROR CONTINUE
 DECLARE cq_atu_ret CURSOR FOR var_query5
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","cq_atu_ret")
 END IF
 INITIALIZE sql_stmt TO NULL
 LET sql_stmt = " SELECT cod_empresa         , ",
                       " cod_item            , ",
                       " cod_local           , ",
                       " num_lote            , ",
                       " endereco            , ",
                       " num_volume          , ",
                       " cod_grade_1         , ",
                       " cod_grade_2         , ",
                       " cod_grade_3         , ",
                       " cod_grade_4         , ",
                       " cod_grade_5         , ",
                       " dat_hor_producao    , ",
                       " num_ped_ven         , ",
                       " num_seq_ped_ven     , ",
                       " ies_situa_qtd       , ",
                       " qtd_saldo           , ",
                       " num_transac         , ",
                       " ies_origem_entrada  , ",
                       " dat_hor_validade    , ",
                       " num_peca            , ",
                       " num_serie           , ",
                       " comprimento         , ",
                       " largura             , ",
                       " altura              , ",
                       " diametro            , ",
                       " dat_hor_reserv_1    , ",
                       " dat_hor_reserv_2    , ",
                       " dat_hor_reserv_3    , ",
                       " qtd_reserv_1        , ",
                       " qtd_reserv_2        , ",
                       " qtd_reserv_3        , ",
                       " num_reserv_1        , ",
                       " num_reserv_2        , ",
                       " num_reserv_3        , ",
                       " tex_reservado ",
                  " FROM estoque_lote_ender ",
                 " WHERE estoque_lote_ender.cod_empresa        = ? ",
                   " AND estoque_lote_ender.cod_item           = ? ",
                   " AND estoque_lote_ender.endereco           = ? ",
                   " AND estoque_lote_ender.num_volume         = ? ",
                   " AND estoque_lote_ender.cod_grade_1        = ? ",
                   " AND estoque_lote_ender.cod_grade_2        = ? ",
                   " AND estoque_lote_ender.cod_grade_3        = ? ",
                   " AND estoque_lote_ender.cod_grade_4        = ? ",
                   " AND estoque_lote_ender.cod_grade_5        = ? ",
                   " AND estoque_lote_ender.dat_hor_producao   = ? ",
                   " AND estoque_lote_ender.dat_hor_validade   = ? ",
                   " AND estoque_lote_ender.num_peca           = ? ",
                   " AND estoque_lote_ender.num_serie          = ? ",
                   " AND estoque_lote_ender.comprimento        = ? ",
                   " AND estoque_lote_ender.largura            = ? ",
                   " AND estoque_lote_ender.altura             = ? ",
                   " AND estoque_lote_ender.diametro           = ? ",
                   " AND estoque_lote_ender.dat_hor_reserv_1   = ? ",
                   " AND estoque_lote_ender.dat_hor_reserv_2   = ? ",
                   " AND estoque_lote_ender.dat_hor_reserv_3   = ? ",
                   " AND estoque_lote_ender.qtd_reserv_1       = ? ",
                   " AND estoque_lote_ender.qtd_reserv_2       = ? ",
                   " AND estoque_lote_ender.qtd_reserv_3       = ? ",
                   " AND estoque_lote_ender.num_reserv_1       = ? ",
                   " AND estoque_lote_ender.num_reserv_2       = ? ",
                   " AND estoque_lote_ender.num_reserv_3       = ? ",
                   " AND estoque_lote_ender.tex_reservado      = ? ",
                   " AND estoque_lote_ender.qtd_saldo          > 0 "

 WHENEVER ERROR CONTINUE
 PREPARE var_query6 FROM sql_stmt
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("PREPARE","var_query6")
 END IF

 WHENEVER ERROR CONTINUE
 DECLARE cq_est_lote_ender3 CURSOR FOR var_query6
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_EST_LOTE_ENDER3")
    RETURN FALSE
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cq_ar_terc INTO l_aviso_rec.*
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","cq_ar_terc")
       EXIT FOREACH
    END IF
    WHENEVER ERROR CONTINUE
    FOREACH cq_rt_terc USING l_aviso_rec.num_seq INTO lr_item_ret_terc.*
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("FOREACH","cq_ar_terc")
          EXIT FOREACH
       END IF

       CALL sup3760_busca_local_motivo_remessa(lr_item_ret_terc.cod_empresa,
                                               lr_item_ret_terc.cod_fornecedor,
                                               lr_item_ret_terc.num_nf_remessa,
                                               lr_item_ret_terc.num_sequencia_nf)
                 RETURNING l_estoque_trans.cod_local_est_orig,
                           l_estoque_trans.ies_sit_est_orig,
                           l_estoque_trans.cod_local_est_dest,
                           l_estoque_trans.ies_sit_est_dest

       CALL sup0063_verifica_controles(12,
                                       l_aviso_rec.cod_item,
                                       "INCLUSAO",
                                       "SUP3760")
         RETURNING m_controles
       IF m_controles <> " " AND
          sup3762_existe_grade_remessa(lr_item_ret_terc.num_nf_remessa,
                                       lr_item_ret_terc.num_sequencia_nf,
                                       lr_item_ret_terc.cod_fornecedor) THEN
          IF l_contr_local_terc IS NOT NULL AND
             l_contr_local_terc <> " " AND
             l_estoque_trans.cod_local_est_orig IS NOT NULL AND
             l_estoque_trans.cod_local_est_orig <> " " THEN
             IF sup3760_ies_item_ctr_estoq(p_cod_empresa,l_aviso_rec.cod_item) THEN
                #IF m_beneficiamento = FALSE THEN

                WHENEVER ERROR CONTINUE
                FOREACH cq_cons2 USING lr_item_ret_terc.num_nf_remessa,
                                       lr_item_ret_terc.num_sequencia_nf #831871 l_aviso_rec.num_seq
                                  INTO lr_sup_itterc_grade.*
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("FOREACH","cq_cons2")
                      EXIT FOREACH
                   END IF

                   LET l_qtd_devolvida = 0
                   WHENEVER ERROR CONTINUE
                   SELECT qtd_devolvida
                     INTO l_qtd_devolvida
                     FROM sup_retn_item_terc
                    WHERE empresa           = p_cod_empresa
                      AND nota_fiscal       = p_dados_tela.num_nf
                      AND serie_nota_fiscal = p_dados_tela.ser_nf
                      AND subserie_nf       = p_dados_tela.ssr_nf
                      AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                      AND fornecedor        = p_dados_tela.cod_fornecedor
                      AND seq_aviso_recebto = l_aviso_rec.num_seq
                      AND seq_tabulacao     = lr_sup_itterc_grade.seq_tabulacao
                      AND nf_remessa        = lr_sup_itterc_grade.nota_fiscal
                      AND seq_nf_remessa    = lr_sup_itterc_grade.seq_item_nf
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      IF sqlca.sqlcode <> 100 THEN
                         CALL log003_err_sql("LEITURA","sup_retn_item_terc")
                      END IF
                      LET l_qtd_devolvida = 0
                   END IF
                   INITIALIZE lr_estoque_obs.* TO NULL
                   LET l_estoque_trans.cod_empresa        = p_cod_empresa
                   LET l_estoque_trans.num_transac        = 0
                   LET l_estoque_trans.cod_item           = l_aviso_rec.cod_item
                   LET l_estoque_trans.dat_movto          = p_dados_tela.dat_entrada_nf
                   LET l_estoque_trans.dat_ref_moeda_fort = lr_item_ret_terc.dat_entrada_nf
                   LET l_estoque_trans.cod_operacao       = l_contr_local_terc
                   LET l_estoque_trans.num_docum          = l_aviso_rec.num_aviso_rec
                   LET l_estoque_trans.num_seq            = lr_item_ret_terc.num_sequencia_ar
                   LET l_estoque_trans.ies_tip_movto      = "R"
                   LET l_estoque_trans.qtd_movto          = l_qtd_devolvida
                   LET l_estoque_trans.cus_unit_movto_p   = 0
                   LET l_estoque_trans.cus_tot_movto_p    = 0
                   LET l_estoque_trans.cus_unit_movto_f   = 0
                   LET l_estoque_trans.cus_tot_movto_f    = 0
                   LET l_estoque_trans.num_conta          = NULL
                   LET l_estoque_trans.num_secao_requis   = NULL

                   INITIALIZE l_local_estoq TO NULL
                   SELECT cod_local_estoq
                     INTO l_local_estoq
                     FROM item
                    WHERE cod_empresa = lr_item_ret_terc.cod_empresa
                      AND cod_item    = l_aviso_rec.cod_item

                   IF l_estoque_trans.cod_local_est_orig IS NULL OR
                      l_estoque_trans.cod_local_est_orig = " " THEN
                      LET l_estoque_trans.cod_local_est_orig = l_local_estoq
                      LET l_estoque_trans.ies_sit_est_orig   = "L"
                   ELSE
                      IF l_estoque_trans.ies_sit_est_orig IS NULL OR
                         l_estoque_trans.ies_sit_est_orig = " " THEN
                         LET l_estoque_trans.ies_sit_est_orig   = "L"
                      END IF
                   END IF

                   IF l_estoque_trans.cod_local_est_dest IS NULL OR
                      l_estoque_trans.cod_local_est_dest = " " THEN
                      IF lr_sup_itterc_grade.local IS NOT NULL AND
                         lr_sup_itterc_grade.local <> " " THEN
                         LET l_estoque_trans.cod_local_est_dest   = lr_sup_itterc_grade.local
                         LET l_estoque_trans.ies_sit_est_dest     = lr_sup_itterc_grade.sit_qtd
                      ELSE
                         LET l_estoque_trans.cod_local_est_dest = l_local_estoq
                         LET l_estoque_trans.ies_sit_est_dest   = "L"
                      END IF
                   ELSE
                      IF l_estoque_trans.ies_sit_est_dest IS NULL OR
                         l_estoque_trans.ies_sit_est_dest = " " THEN
                         LET l_estoque_trans.ies_sit_est_dest   = "L"
                      END IF
                   END IF
                   LET l_estoque_trans.num_lote_orig      = NULL
                   LET l_estoque_trans.num_lote_dest      = NULL
                   LET l_estoque_trans.cod_turno          = NULL
                   LET l_estoque_trans.nom_usuario        = p_user
                   LET l_estoque_trans.dat_proces         = TODAY
                   LET l_estoque_trans.hor_operac         = TIME
                   LET l_estoque_trans.num_prog           = "SUP2290"


                   INITIALIZE lr_estoque_trans_end.* TO NULL

                   LET lr_estoque_trans_end.cod_empresa          = l_estoque_trans.cod_empresa
                   LET lr_estoque_trans_end.num_transac          = 0
                   LET lr_estoque_trans_end.endereco             = " "
                   LET lr_estoque_trans_end.num_volume           = 0
                   LET lr_estoque_trans_end.qtd_movto            = l_estoque_trans.qtd_movto
                   LET lr_estoque_trans_end.cod_grade_1          = " "
                   LET lr_estoque_trans_end.cod_grade_2          = " "
                   LET lr_estoque_trans_end.cod_grade_3          = " "
                   LET lr_estoque_trans_end.cod_grade_4          = " "
                   LET lr_estoque_trans_end.cod_grade_5          = " "
                   LET lr_estoque_trans_end.dat_hor_prod_ini     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.dat_hor_prod_fim     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.vlr_temperatura      = 0
                   LET lr_estoque_trans_end.endereco_origem      = " "
                   LET lr_estoque_trans_end.num_ped_ven          = 0
                   LET lr_estoque_trans_end.num_seq_ped_ven      = 0
                   LET lr_estoque_trans_end.dat_hor_producao     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.dat_hor_validade     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.num_peca             = " "
                   LET lr_estoque_trans_end.num_serie            = " "
                   LET lr_estoque_trans_end.comprimento          = 0
                   LET lr_estoque_trans_end.largura              = 0
                   LET lr_estoque_trans_end.altura               = 0
                   LET lr_estoque_trans_end.diametro             = 0
                   LET lr_estoque_trans_end.dat_hor_reserv_1     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.dat_hor_reserv_2     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.dat_hor_reserv_3     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                   LET lr_estoque_trans_end.qtd_reserv_1         = 0
                   LET lr_estoque_trans_end.qtd_reserv_2         = 0
                   LET lr_estoque_trans_end.qtd_reserv_3         = 0
                   LET lr_estoque_trans_end.num_reserv_1         = 0
                   LET lr_estoque_trans_end.num_reserv_2         = 0
                   LET lr_estoque_trans_end.num_reserv_3         = 0
                   LET lr_estoque_trans_end.tex_reservado        = " "

                   LET lr_estoque_trans_end.cod_grade_1      = lr_sup_itterc_grade.grade_1
                   LET lr_estoque_trans_end.cod_grade_2      = lr_sup_itterc_grade.grade_2
                   LET lr_estoque_trans_end.cod_grade_3      = lr_sup_itterc_grade.grade_3
                   LET lr_estoque_trans_end.cod_grade_4      = lr_sup_itterc_grade.grade_4
                   LET lr_estoque_trans_end.cod_grade_5      = lr_sup_itterc_grade.grade_5
                   LET lr_estoque_trans_end.endereco         = lr_sup_itterc_grade.endereco
                   LET lr_estoque_trans_end.endereco_origem  = lr_sup_itterc_grade.endereco
                   LET lr_estoque_trans_end.num_volume       = lr_sup_itterc_grade.num_volume
                   LET lr_estoque_trans_end.dat_hor_producao = lr_sup_itterc_grade.dat_hor_producao
                   LET lr_estoque_trans_end.dat_hor_validade = lr_sup_itterc_grade.dat_hor_valid
                   LET lr_estoque_trans_end.comprimento      = lr_sup_itterc_grade.comprimento
                   LET lr_estoque_trans_end.largura          = lr_sup_itterc_grade.largura
                   LET lr_estoque_trans_end.altura           = lr_sup_itterc_grade.altura
                   LET lr_estoque_trans_end.diametro         = lr_sup_itterc_grade.diametro
                   LET lr_estoque_trans_end.num_peca         = lr_sup_itterc_grade.peca
                   LET lr_estoque_trans_end.num_serie        = lr_sup_itterc_grade.serie_peca

                   LET l_estoque_trans.num_lote_dest        = lr_sup_itterc_grade.lote
                   LET l_estoque_trans.num_lote_orig        = lr_sup_itterc_grade.lote

                   IF sup3760_verifica_saldo_transf_grade(l_estoque_trans.cod_item,
                                                          l_estoque_trans.qtd_movto,
                                                          l_estoque_trans.cod_local_est_dest,
                                                          l_estoque_trans.ies_sit_est_dest,
                                                          l_estoque_trans.num_lote_dest) THEN
                      ERROR "Quantidade maior do que a encontrada no estoque."
                      RETURN FALSE
                   END IF

                   #-- Os 456623 inicio --#
                   IF p_par_sup_compl.ies_baixa_benef = "2" AND
                      lr_item_ret_terc.ies_especie_nf = "NFD" THEN
                      IF sup3760_zera_num_pedido(l_estoque_trans.*,lr_estoque_trans_end.*) = FALSE THEN
                         RETURN FALSE
                      ELSE
                         LET lr_estoque_trans_end.num_ped_ven     = 0
                         LET lr_estoque_trans_end.num_seq_ped_ven = 0
                      END IF
                   END IF
                   #-- Os 456623 fim --#

                   IF sup097_movto_estoque(l_estoque_trans.*,
                                           lr_estoque_obs.*,
                                           lr_estoque_trans_end.*,
                                           0) = FALSE THEN
                      ERROR "Problema na movimentacao de estoque, transacao cancelada."
                      RETURN FALSE
                   END IF
                   WHENEVER ERROR CONTINUE
                END FOREACH
                WHENEVER ERROR STOP
                CLOSE cq_cons2
                WHENEVER ERROR CONTINUE
                FOREACH cq_atu_ret USING lr_item_ret_terc.num_nf,
                                         lr_item_ret_terc.ser_nf,
                                         lr_item_ret_terc.ssr_nf,
                                         lr_item_ret_terc.ies_especie_nf,
                                         lr_item_ret_terc.cod_fornecedor,
                                         lr_item_ret_terc.num_sequencia_ar,
                                         lr_item_ret_terc.num_nf_remessa,
                                         lr_item_ret_terc.num_sequencia_nf
                                    INTO l_seq_tabulacao,
                                         l_qtd_devolvida
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("FOREACH","cq_atu_ret")
                      EXIT FOREACH
                   END IF
                   WHENEVER ERROR CONTINUE
                   UPDATE sup_itterc_grade
                      SET qtd_tot_receb = qtd_tot_receb - l_qtd_devolvida
                    WHERE empresa       = p_cod_empresa
                      AND nota_fiscal   = lr_item_ret_terc.num_nf_remessa
                      AND fornecedor    = lr_item_ret_terc.cod_fornecedor
                      AND seq_item_nf   = lr_item_ret_terc.num_sequencia_nf
                      AND seq_tabulacao = l_seq_tabulacao
                   WHENEVER ERROR STOP
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("ALTERAÇÃO","sup_itterc_grade")
                      RETURN FALSE
                   END IF
                   WHENEVER ERROR CONTINUE
                END FOREACH
                WHENEVER ERROR STOP
                CLOSE cq_atu_ret
                WHENEVER ERROR CONTINUE
                DELETE FROM sup_retn_item_terc
                 WHERE empresa           = p_cod_empresa
                   AND nota_fiscal       = lr_item_ret_terc.num_nf
                   AND serie_nota_fiscal = lr_item_ret_terc.ser_nf
                   AND subserie_nf       = lr_item_ret_terc.ssr_nf
                   AND espc_nota_fiscal  = lr_item_ret_terc.ies_especie_nf
                   AND fornecedor        = lr_item_ret_terc.cod_fornecedor
                   AND seq_aviso_recebto = lr_item_ret_terc.num_sequencia_ar
                   AND nf_remessa        = lr_item_ret_terc.num_nf_remessa
                   AND seq_nf_remessa    = lr_item_ret_terc.num_sequencia_nf
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("EXCLUSÃO","sup_retn_item_terc")
                   RETURN FALSE
                END IF
                IF p_ies_contab_aen = "4" THEN
                   WHENEVER ERROR CONTINUE
                   UPDATE item_em_terc_area
                      SET item_em_terc_area.qtd_tot_recebida =
                          item_em_terc_area.qtd_tot_recebida -
                          lr_item_ret_terc.qtd_devolvida
                    WHERE item_em_terc_area.cod_empresa = p_cod_empresa
                      AND item_em_terc_area.num_nf      = lr_item_ret_terc.num_nf_remessa
                      AND item_em_terc_area.num_sequencia  = lr_item_ret_terc.num_sequencia_nf
                      AND item_em_terc_area.cod_fornecedor = lr_item_ret_terc.cod_fornecedor
                   IF sqlca.sqlcode <> 0 THEN
                      CALL log003_err_sql("ALTERACAO","item_em_terc_area")
                      RETURN FALSE
                   END IF
                END IF
             END IF
          END IF
       ELSE
          IF l_contr_local_terc IS NOT NULL OR l_contr_local_terc <> " " THEN
             IF sup3760_ies_item_ctr_estoq(p_cod_empresa, l_aviso_rec.cod_item) THEN
                INITIALIZE l_estoque_trans.* TO NULL
                INITIALIZE lr_estoque_obs.* TO NULL
                LET l_estoque_trans.cod_empresa        = lr_item_ret_terc.cod_empresa
                LET l_estoque_trans.num_transac        = 0
                LET l_estoque_trans.cod_item           = l_aviso_rec.cod_item
                LET l_estoque_trans.dat_movto          = lr_item_ret_terc.dat_entrada_nf
                LET l_estoque_trans.dat_ref_moeda_fort = lr_item_ret_terc.dat_entrada_nf
                LET l_estoque_trans.cod_operacao       = l_contr_local_terc
                LET l_estoque_trans.num_docum          = l_aviso_rec.num_aviso_rec
                LET l_estoque_trans.num_seq            = lr_item_ret_terc.num_sequencia_ar
                LET l_estoque_trans.ies_tip_movto      = "R"
                LET l_estoque_trans.qtd_movto          = lr_item_ret_terc.qtd_devolvida
                LET l_estoque_trans.cus_unit_movto_p   = 0
                LET l_estoque_trans.cus_tot_movto_p    = 0
                LET l_estoque_trans.cus_unit_movto_f   = 0
                LET l_estoque_trans.cus_tot_movto_f    = 0
                LET l_estoque_trans.num_conta          = NULL
                LET l_estoque_trans.num_secao_requis   = NULL

                INITIALIZE l_cod_motivo_remessa TO NULL
                SELECT cod_motivo_remessa
                  INTO l_cod_motivo_remessa
                  FROM item_em_terc
                 WHERE cod_empresa   = lr_item_ret_terc.cod_empresa
                   AND num_nf        = lr_item_ret_terc.num_nf_remessa
                   AND num_sequencia = lr_item_ret_terc.num_sequencia_nf

                INITIALIZE l_estoque_trans.cod_local_est_orig TO NULL
                INITIALIZE l_estoque_trans.ies_sit_est_orig TO NULL
                INITIALIZE l_estoque_trans.cod_local_est_dest TO NULL
                INITIALIZE l_estoque_trans.ies_sit_est_dest TO NULL
                SELECT cod_local_remessa, ies_situa_remessa,
                       cod_local_retorno, ies_situa_retorno
                  INTO l_estoque_trans.cod_local_est_orig,
                       l_estoque_trans.ies_sit_est_orig,
                       l_estoque_trans.cod_local_est_dest,
                       l_estoque_trans.ies_sit_est_dest
                  FROM motivo_remessa
                 WHERE cod_empresa        = lr_item_ret_terc.cod_empresa
                   AND cod_motivo_remessa = l_cod_motivo_remessa

                INITIALIZE l_local_estoq TO NULL
                SELECT cod_local_estoq
                  INTO l_local_estoq
                  FROM item
                 WHERE cod_empresa = lr_item_ret_terc.cod_empresa
                   AND cod_item    = l_aviso_rec.cod_item
                IF sqlca.sqlcode <> 0 OR l_local_estoq IS NULL THEN
                   LET l_local_estoq = " "
                END IF

                IF l_estoque_trans.cod_local_est_orig IS NULL OR
                   l_estoque_trans.cod_local_est_orig = " " THEN
                   LET l_estoque_trans.cod_local_est_orig = l_local_estoq
                   LET l_estoque_trans.ies_sit_est_orig   = "L"
                ELSE
                   IF l_estoque_trans.ies_sit_est_orig IS NULL OR
                      l_estoque_trans.ies_sit_est_orig = " " THEN
                      LET l_estoque_trans.ies_sit_est_orig   = "L"
                   END IF
                END IF

                IF l_estoque_trans.cod_local_est_dest IS NULL OR
                   l_estoque_trans.cod_local_est_dest = " " THEN
                   LET l_estoque_trans.cod_local_est_dest = l_local_estoq
                   LET l_estoque_trans.ies_sit_est_dest = "L"
                ELSE
                   IF l_estoque_trans.ies_sit_est_dest IS NULL OR
                      l_estoque_trans.ies_sit_est_dest = " " THEN
                      LET l_estoque_trans.ies_sit_est_dest = "L"
                   END IF
                END IF

                #LET l_estoque_trans.cod_local_est_dest = l_local_estoq
                LET l_estoque_trans.num_lote_orig      = NULL
                LET l_estoque_trans.num_lote_dest      = NULL
                #LET l_estoque_trans.ies_sit_est_dest   = "L"
                LET l_estoque_trans.cod_turno          = NULL
                LET l_estoque_trans.nom_usuario        = p_user
                LET l_estoque_trans.dat_proces         = TODAY
                LET l_estoque_trans.hor_operac         = TIME
                LET l_estoque_trans.num_prog           = "SUP2290"

                IF sup376_verifica_saldo_transf(lr_item_ret_terc.cod_empresa,
                                                l_aviso_rec.cod_item,
                                                l_estoque_trans.qtd_movto,
                                                l_estoque_trans.cod_local_est_dest,
                                                l_estoque_trans.ies_sit_est_dest) THEN
                   ERROR "Quantidade maior do que a encontrada no estoque."
                   RETURN FALSE
                END IF

                INITIALIZE lr_estoque_trans_end.* TO NULL

                LET lr_estoque_trans_end.cod_empresa          = l_estoque_trans.cod_empresa
                LET lr_estoque_trans_end.num_transac          = 0
                LET lr_estoque_trans_end.endereco             = " "
                LET lr_estoque_trans_end.num_volume           = 0
                LET lr_estoque_trans_end.qtd_movto            = l_estoque_trans.qtd_movto
                LET lr_estoque_trans_end.cod_grade_1          = " "
                LET lr_estoque_trans_end.cod_grade_2          = " "
                LET lr_estoque_trans_end.cod_grade_3          = " "
                LET lr_estoque_trans_end.cod_grade_4          = " "
                LET lr_estoque_trans_end.cod_grade_5          = " "
                LET lr_estoque_trans_end.dat_hor_prod_ini     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.dat_hor_prod_fim     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.vlr_temperatura      = 0
                LET lr_estoque_trans_end.endereco_origem      = " "
                LET lr_estoque_trans_end.num_ped_ven          = 0
                LET lr_estoque_trans_end.num_seq_ped_ven      = 0
                LET lr_estoque_trans_end.dat_hor_producao     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.dat_hor_validade     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.num_peca             = " "
                LET lr_estoque_trans_end.num_serie            = " "
                LET lr_estoque_trans_end.comprimento          = 0
                LET lr_estoque_trans_end.largura              = 0
                LET lr_estoque_trans_end.altura               = 0
                LET lr_estoque_trans_end.diametro             = 0
                LET lr_estoque_trans_end.dat_hor_reserv_1     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.dat_hor_reserv_2     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.dat_hor_reserv_3     = EXTEND("1900-01-01 00:00:00", YEAR TO SECOND)
                LET lr_estoque_trans_end.qtd_reserv_1         = 0
                LET lr_estoque_trans_end.qtd_reserv_2         = 0
                LET lr_estoque_trans_end.qtd_reserv_3         = 0
                LET lr_estoque_trans_end.num_reserv_1         = 0
                LET lr_estoque_trans_end.num_reserv_2         = 0
                LET lr_estoque_trans_end.num_reserv_3         = 0
                LET lr_estoque_trans_end.tex_reservado        = " "

                IF sup097_movto_estoque(l_estoque_trans.*,
                                        lr_estoque_obs.*,
                                        lr_estoque_trans_end.*,
                                        0) = FALSE THEN
                   ERROR "Problema na movimentacao de estoque, transacao cancelada."
                   RETURN FALSE
                END IF
             END IF
          ELSE
             IF sup376_verifica_saldo_transf(lr_item_ret_terc.cod_empresa,
                                                l_aviso_rec.cod_item,
                                                l_estoque_trans.qtd_movto,
                                                l_estoque_trans.cod_local_est_dest,
                                                l_estoque_trans.ies_sit_est_dest) THEN
                   ERROR "Quantidade maior do que a encontrada no estoque."
                   RETURN FALSE
             END IF
          END IF
       END IF
       WHENEVER ERROR CONTINUE
       DELETE FROM item_ret_terc
        WHERE item_ret_terc.cod_empresa = lr_item_ret_terc.cod_empresa
          AND item_ret_terc.num_transac = lr_item_ret_terc.num_transac
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("EXCLUSAO","ITEM_RET_TERC")
          RETURN FALSE
       END IF
       WHENEVER ERROR CONTINUE
       UPDATE item_em_terc
          SET item_em_terc.qtd_tot_recebida = item_em_terc.qtd_tot_recebida -
                                              lr_item_ret_terc.qtd_devolvida
        WHERE item_em_terc.cod_empresa   = lr_item_ret_terc.cod_empresa
          AND item_em_terc.num_nf        = lr_item_ret_terc.num_nf_remessa
          AND item_em_terc.num_sequencia = lr_item_ret_terc.num_sequencia_nf
          AND item_em_terc.cod_fornecedor = lr_item_ret_terc.cod_fornecedor
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("MODIFICACAO","ITEM_EM_TERC")
          RETURN FALSE
       END IF
       WHENEVER ERROR CONTINUE
    END FOREACH
    WHENEVER ERROR STOP
    CLOSE cq_rt_terc
    WHENEVER ERROR CONTINUE
 END FOREACH
 WHENEVER ERROR STOP
 CLOSE cq_ar_terc
 FREE cq_cons2
 FREE cq_atu_ret
 FREE cq_rt_terc
 FREE cq_ar_terc
 RETURN TRUE

 END FUNCTION

#--------------------------------------------------------------------#
 FUNCTION sup376_verifica_saldo_transf(l_cod_empresa, l_cod_item,
                                       l_qtd_movto, l_local_est_orig,
                                       l_sit_est_orig)
#--------------------------------------------------------------------#
  DEFINE l_qtd_movto         LIKE estoque_trans.qtd_movto,
         l_local_est_orig    LIKE estoque_trans.cod_local_est_orig,
         l_qtd_saldo         LIKE estoque_lote.qtd_saldo,
         l_qtd_reservada     LIKE estoque_loc_reser.qtd_reservada,
         l_sit_est_orig      LIKE estoque_trans.ies_sit_est_orig,
         l_cod_empresa       LIKE item_ret_terc.cod_empresa,
         l_cod_item          LIKE aviso_rec.cod_item

  SELECT qtd_saldo
    INTO l_qtd_saldo
    FROM estoque_lote
   WHERE cod_empresa     = l_cod_empresa
     AND cod_item        = l_cod_item
     AND cod_local       = l_local_est_orig
     AND (num_lote IS NULL
      OR  num_lote = " ")
     AND ies_situa_qtd = l_sit_est_orig
  IF l_qtd_saldo IS NULL THEN
     LET l_qtd_saldo = 0
  END IF

  SELECT SUM(qtd_reservada)
    INTO l_qtd_reservada
    FROM estoque_loc_reser
   WHERE cod_empresa = l_cod_empresa
     AND cod_item    = l_cod_item
     AND cod_local   = l_local_est_orig
     AND (num_lote IS NULL
      OR  num_lote = " ")
     AND ies_situacao NOT IN ("L","C")

  IF l_qtd_reservada IS NULL THEN
     LET l_qtd_reservada = 0
  END IF

  IF (l_qtd_saldo - l_qtd_reservada) < l_qtd_movto THEN
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#----------------------------------#
 FUNCTION sup376_gera_item_d_terc()
#----------------------------------#

   DEFINE p_item_de_terc   RECORD LIKE item_de_terc.*,
          p_item_de_terc_c RECORD LIKE item_de_terc_compl.*,
          p_texto          CHAR(100),
          p_mot_remes_item CHAR(2)

## 407088
   DEFINE l_cod_fornecedor  LIKE nf_sup.cod_fornecedor
   #--------------------------#
   # Alteração WMS OS: 450083 #
   #--------------------------#
   IF m_wms_instal = "S" AND p_dados_tela.ies_nf_aguard_nfe = "B" THEN
      RETURN TRUE
   END IF

     IF p_dados_tela.ies_nf_aguard_nfe = "T" OR
        p_dados_tela.ies_nf_aguard_nfe = "1" OR
        p_dados_tela.ies_nf_aguard_nfe = "A" OR
       (p_dados_tela.ies_nf_aguard_nfe = "B" AND m_contr_terc_no_dep = "S") THEN
        LET p_item_de_terc.cod_motivo_remessa = p_mot_remes_terc

        SELECT parametros[19,20]
          INTO p_mot_remes_item
          FROM item_parametro
         WHERE item_parametro.cod_empresa = p_cod_empresa
           AND item_parametro.cod_item    = p_aviso_rec.cod_item
        IF sqlca.sqlcode = 0 THEN
           IF   p_mot_remes_item IS NOT NULL
           AND  p_mot_remes_item <> " "
           THEN LET p_item_de_terc.cod_motivo_remessa = p_mot_remes_item
           END IF
        END IF
     END IF

     IF p_par_sup_compl.ies_conta_ok_n_est = "1" AND p_dados_tela.ies_nf_aguard_nfe = "4" THEN #-- OS 736225
        LET p_item_de_terc.qtd_tot_recebida   = 0
     ELSE
        LET p_item_de_terc.qtd_tot_recebida   = p_aviso_rec.qtd_declarad_nf
     END IF

     IF p_dados_tela.ies_nf_aguard_nfe = "4" THEN
        LET p_texto = sup376_busca_par_sup_pad("cod_motivo_remessa",3)
        LET p_item_de_terc.cod_motivo_remessa = p_texto[1,2]
        LET p_item_de_terc.qtd_tot_recebida   = 0
     END IF

     LET p_item_de_terc.cod_empresa       = p_cod_empresa
     LET p_item_de_terc.num_nf            = p_dados_tela.num_nf
     LET p_item_de_terc.ser_nf            = p_dados_tela.ser_nf
     LET p_item_de_terc.ssr_nf            = p_dados_tela.ssr_nf
     LET p_item_de_terc.ies_especie_nf    = p_dados_tela.ies_especie_nf

  ## OS 407088
     CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq) RETURNING l_cod_fornecedor

     LET p_item_de_terc.cod_fornecedor    = l_cod_fornecedor

     LET p_item_de_terc.ies_incl_contab   = "N"
     LET p_item_de_terc.num_sequencia     = p_aviso_rec.num_seq
     LET p_item_de_terc.dat_emis_nf       = p_dados_tela.dat_emis_nf
     LET p_item_de_terc.dat_entrada_nf    = p_dados_tela.dat_entrada_nf
     LET p_item_de_terc.dat_inclusao_seq  = TODAY
     LET p_item_de_terc.cod_cla_fisc      = p_aviso_rec.cod_cla_fisc
     LET p_item_de_terc.cod_item          = p_aviso_rec.cod_item
     LET p_item_de_terc.den_item          = p_aviso_rec.den_item
     LET p_item_de_terc.cod_unid_med      = p_aviso_rec.cod_unid_med_nf
     LET p_item_de_terc.dat_retorno_prev  = NULL
     LET p_item_de_terc.val_remessa       = p_aviso_rec.val_liquido_item
     LET p_item_de_terc.val_icms          = 0
     LET p_item_de_terc.val_ipi           = 0
     LET p_item_de_terc.qtd_tot_devolvida = 0

     IF p_ies_contab_aen = "S" OR
        p_ies_contab_aen = "4" THEN
        CALL sup376_busca_item(p_cod_empresa, p_item_de_terc.cod_item)
             RETURNING p_status
        LET p_item_de_terc.cod_area_negocio = p_item.cod_lin_prod
        LET p_item_de_terc.cod_lin_negocio  = p_item.cod_lin_recei
        LET p_cod_seg_merc                  = p_item.cod_seg_merc
        LET p_cod_cla_uso                   = p_item.cod_cla_uso
        IF p_status = FALSE THEN
           LET p_item_de_terc.cod_area_negocio = 0
           LET p_item_de_terc.cod_lin_negocio  = 0
           LET p_cod_seg_merc                  = 0
           LET p_cod_cla_uso                   = 0
        END IF
     ELSE
        LET p_item_de_terc.cod_area_negocio = 0
        LET p_item_de_terc.cod_lin_negocio  = 0
        LET p_cod_seg_merc                  = NULL
        LET p_cod_cla_uso                   = NULL
     END IF

     LET p_item_de_terc.tex_observ = NULL
     SELECT cod_empresa
       FROM item_de_terc
     WHERE item_de_terc.cod_empresa = p_item_de_terc.cod_empresa
       AND item_de_terc.num_nf = p_item_de_terc.num_nf
       AND item_de_terc.ser_nf = p_item_de_terc.ser_nf
       AND item_de_terc.ssr_nf = p_item_de_terc.ssr_nf
       AND item_de_terc.ies_especie_nf = p_item_de_terc.ies_especie_nf
       AND item_de_terc.cod_fornecedor = p_item_de_terc.cod_fornecedor
       AND item_de_terc.num_sequencia = p_item_de_terc.num_sequencia
     IF SQLCA.SQLCODE = 0 THEN
     ELSE
       #inicio OS 514411#
       IF m_qtd_dias_final_export IS NOT NULL AND
          m_qtd_dias_final_export <> " " THEN
          LET p_item_de_terc.dat_retorno_prev = TODAY + m_qtd_dias_final_export UNITS DAY
       END IF
       #fim OS 514411#
       WHENEVER ERROR CONTINUE
       INSERT INTO item_de_terc VALUES (p_item_de_terc.*)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INCLUSAO","ITEM_DE_TERC")
          RETURN FALSE
       END IF
     END IF
     IF p_ies_contab_aen = "4" THEN
        SELECT cod_empresa
          FROM item_de_terc_area
         WHERE item_de_terc_area.cod_empresa = p_item_de_terc.cod_empresa
           AND item_de_terc_area.num_nf      = p_item_de_terc.num_nf
           AND item_de_terc_area.ser_nf      = p_item_de_terc.ser_nf
           AND item_de_terc_area.ssr_nf         = p_item_de_terc.ssr_nf
           AND item_de_terc_area.ies_especie_nf = p_item_de_terc.ies_especie_nf
           AND item_de_terc_area.cod_fornecedor = p_item_de_terc.cod_fornecedor
           AND item_de_terc_area.num_sequencia  = p_item_de_terc.num_sequencia
        IF SQLCA.SQLCODE <> 0 THEN
           WHENEVER ERROR CONTINUE
           INSERT INTO item_de_terc_area VALUES (p_item_de_terc.*, p_cod_seg_merc,
                                                 p_cod_cla_uso)
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("INCLUSAO","ITEM_DE_TERC_AREA")
              RETURN FALSE
           END IF
        END IF
     END IF

     LET p_item_de_terc_c.cod_empresa     = p_cod_empresa
     LET p_item_de_terc_c.num_seq         = p_item_de_terc.num_sequencia
     LET p_item_de_terc_c.cod_cliente     = p_item_de_terc.cod_fornecedor
     LET p_item_de_terc_c.cod_fornecedor  = NULL
     LET p_item_de_terc_c.num_nf_fatura   = NULL
     LET p_item_de_terc_c.ser_nf_fatura   = NULL
     LET p_item_de_terc_c.num_pedido      = NULL
     LET p_item_de_terc_c.nom_arq_trans   = NULL
     LET p_item_de_terc_c.num_aviso_rec   = p_aviso_rec.num_aviso_rec
     LET p_item_de_terc_c.num_nf          = p_item_de_terc.num_nf
     LET p_item_de_terc_c.ser_nf          = p_item_de_terc.ser_nf
     LET p_item_de_terc_c.ssr_nf          = p_item_de_terc.ssr_nf
     LET p_item_de_terc_c.ies_especie_nf  = p_item_de_terc.ies_especie_nf
     LET p_item_de_terc_c.cod_fornec_nf   = p_item_de_terc.cod_fornecedor

     SELECT cod_empresa
       FROM item_de_terc_compl
      WHERE item_de_terc_compl.cod_empresa = p_item_de_terc.cod_empresa
        AND item_de_terc_compl.num_nf      = p_item_de_terc.num_nf
        AND item_de_terc_compl.ser_nf      = p_item_de_terc.ser_nf
        AND item_de_terc_compl.ssr_nf         = p_item_de_terc.ssr_nf
        AND item_de_terc_compl.ies_especie_nf = p_item_de_terc.ies_especie_nf
        AND item_de_terc_compl.cod_fornec_nf  = p_item_de_terc.cod_fornecedor
        AND item_de_terc_compl.num_seq        = p_item_de_terc.num_sequencia
     IF SQLCA.SQLCODE <> 0 THEN
       WHENEVER ERROR CONTINUE
       INSERT INTO item_de_terc_compl VALUES (p_item_de_terc_c.*)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INCLUSAO","ITEM_DE_TERC_COMPL")
          RETURN FALSE
       END IF
     END IF
     RETURN TRUE
 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup376_busca_operacao_estoque(p_funcao)
#-------------------------------------------------#
 DEFINE p_funcao CHAR(20),
        l_ies_origem LIKE estoque_operac.ies_origem

 INITIALIZE l_ies_origem TO NULL

 CASE
   WHEN p_funcao = "NOR"
     LET p_dados_tela.cod_operac_estoq = p_par_sup.cod_operac_estoq_c
   WHEN p_funcao = "DEV"
     INITIALIZE l_ies_origem TO NULL
     IF p_dados_tela.cod_operac_estoq IS NULL OR
        p_dados_tela.cod_operac_estoq = " " THEN
     ELSE
        SELECT ies_origem
          INTO l_ies_origem
          FROM estoque_operac
         WHERE cod_empresa  = p_cod_empresa
           AND cod_operacao = p_dados_tela.cod_operac_estoq
     END IF
     IF (p_dados_tela.cod_operac_estoq IS NULL OR
        p_dados_tela.cod_operac_estoq = " ") OR
        (l_ies_origem IS NOT NULL AND
        l_ies_origem <> "C") THEN
        INITIALIZE p_dados_tela.cod_operac_estoq TO NULL
        SELECT cod_operac_dev_cli
          INTO p_dados_tela.cod_operac_estoq
          FROM par_sup_compl
         WHERE par_sup_compl.cod_empresa = p_cod_empresa
        IF sqlca.sqlcode <> 0 THEN
           LET p_dados_tela.cod_operac_estoq = p_par_sup.cod_operac_estoq_c
        END IF
     END IF

     INITIALIZE l_ies_origem TO NULL
     SELECT ies_origem
       INTO l_ies_origem
       FROM estoque_operac
      WHERE cod_empresa = p_cod_empresa
        AND cod_operacao = p_dados_tela.cod_operac_estoq
     IF l_ies_origem IS NOT NULL AND
        l_ies_origem = "C" THEN
     ELSE
        ERROR "Operacao de estoque invalida para devolucao de cliente"
     END IF
   WHEN p_funcao = "TRANSF"
      IF NOT sup3762_verifica_operacao_srig(m_ies_fat_unico) THEN
         IF p_oper_trans_unid IS NOT NULL AND
            p_oper_trans_unid <> " " THEN
            LET p_dados_tela.cod_operac_estoq = p_oper_trans_unid
         ELSE
            CALL log0030_mensagem(" Operacao de TRANSFERENCIA ENTRE UNIDADES nao esta parametrizada. ","exclamation")
         END IF
      END IF
   WHEN p_funcao = "PERMUTA" ##O.S 186311
      IF g_operac_permuta IS NOT NULL AND
         g_operac_permuta <> " " THEN
         LET p_dados_tela.cod_operac_estoq = g_operac_permuta
      ELSE
         ERROR " Operacao de PERMUTA ENTRE EMPRESAS nao esta parametrizada. "
      END IF
 END CASE
 END FUNCTION

#------------------------------------------------#
 FUNCTION sup376_consiste_ae(p_num_aviso_rec_arg)
#------------------------------------------------#

 DEFINE p_num_aviso_rec_arg LIKE aviso_rec.num_aviso_rec,
        p_cancel            SMALLINT

  CALL log120_procura_caminho("cto0120") RETURNING comando3
  LET comando3 = comando3 CLIPPED," ",p_num_aviso_rec_arg
  RUN comando3 RETURNING p_cancel

  CALL log120_procura_caminho("cto0180") RETURNING comando3
  LET comando3 = comando3 CLIPPED," ",p_num_aviso_rec_arg
  RUN comando3 RETURNING p_cancel
END FUNCTION

#---------------------------------------#
 FUNCTION sup376_grava_liberacao_nota()
#---------------------------------------#
 DEFINE p_nf_sup_erro RECORD
                             empresa              LIKE nf_sup_erro.empresa,
                             num_aviso_rec        LIKE nf_sup_erro.num_aviso_rec,
                             num_seq              LIKE nf_sup_erro.num_seq,
                             des_pendencia_item   LIKE nf_sup_erro.des_pendencia_item,
                             ies_origem_erro      LIKE nf_sup_erro.ies_origem_erro,
                             ies_erro_grave       LIKE nf_sup_erro.ies_erro_grave
                         END RECORD

 DELETE FROM nf_sup_erro
  WHERE nf_sup_erro.empresa = p_cod_empresa
    AND nf_sup_erro.num_aviso_rec = p_dados_tela.num_aviso_rec
    AND nf_sup_erro.ies_origem_erro = "4"
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("EXCLUSAO","NF_SUP_ERRO")
    LET p_houve_erro = TRUE
 END IF

 LET p_nf_sup_erro.empresa       = p_dados_tela.cod_empresa
 LET p_nf_sup_erro.num_aviso_rec = p_dados_tela.num_aviso_rec
 LET p_nf_sup_erro.num_seq       = 0
 LET p_nf_sup_erro.ies_origem_erro = "4"
 LET p_nf_sup_erro.ies_erro_grave = "N"
 LET p_nf_sup_erro.des_pendencia_item = TODAY, " ",TIME," " ,p_user

 INSERT INTO nf_sup_erro ( empresa, num_aviso_rec, num_seq, des_pendencia_item, ies_origem_erro, ies_erro_grave )  VALUES ( p_nf_sup_erro.empresa, p_nf_sup_erro.num_aviso_rec, p_nf_sup_erro.num_seq, p_nf_sup_erro.des_pendencia_item, p_nf_sup_erro.ies_origem_erro, p_nf_sup_erro.ies_erro_grave)
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("INCLUSAO","NF_SUP_ERRO")
    LET p_houve_erro = TRUE
 END IF
 END FUNCTION

#-------------------------------#
 FUNCTION sup376_gera_iss()
#-------------------------------#
  DEFINE p_tipo_val   RECORD LIKE tipo_valor.*,
         p_val_iss    DECIMAL(17,2),
         l_val_iss    LIKE desc_acrescimos.val_desc_acres,
         l_perc_iss   DECIMAL(6,3),
         p_cont_item  SMALLINT,
         l_num_versao LIKE desc_acrescimos.num_versao

 SELECT *
   FROM par_cap_pad
  WHERE cod_empresa  = p_cod_empresa
    AND cod_parametro = "ies_uso_ctrl_iss"
    AND par_ies       = "S"

  IF sqlca.sqlcode <> 0 THEN
     RETURN
  END IF

  WHENEVER ERROR CONTINUE

  DELETE FROM ar_iss
   WHERE ar_iss.cod_empresa    =  p_aviso_rec.cod_empresa
     AND ar_iss.num_aviso_rec  =  p_aviso_rec.num_aviso_rec
     AND ar_iss.num_seq        =  p_aviso_rec.num_seq

  WHENEVER ERROR STOP

  IF sqlca.sqlcode <> 0 THEN
     RETURN
  END IF

  IF p_ies_imp_iss = "N" OR
     p_ies_imp_iss IS NULL THEN
     RETURN
  END IF

  SELECT  *
    INTO p_tipo_val.*
    FROM tipo_valor
   WHERE cod_empresa = p_cod_empresa
     AND cod_tip_val = p_cod_ret_iss
     AND ies_irrf    = "I"

  LET p_val_iss = p_aviso_rec.val_liquido_item *
                  p_tipo_val.perc_val_princ / 100

  INITIALIZE l_num_versao, l_val_iss, l_perc_iss TO NULL
  SELECT MAX(num_versao)
    INTO l_num_versao
    FROM desc_acrescimos
   WHERE cod_empresa    = p_ordem_sup.cod_empresa
     AND cod_fornecedor = p_ordem_sup.cod_fornecedor
     AND num_cotacao    = p_ordem_sup.num_cotacao
     AND cod_item       = p_ordem_sup.cod_item

  IF l_num_versao IS NOT NULL THEN
     SELECT val_desc_acres
       INTO l_perc_iss
       FROM desc_acrescimos
      WHERE cod_empresa      = p_ordem_sup.cod_empresa
        AND cod_fornecedor   = p_ordem_sup.cod_fornecedor
        AND num_cotacao      = p_ordem_sup.num_cotacao
        AND num_versao       = l_num_versao
        AND cod_item         = p_ordem_sup.cod_item
        AND ies_desc_acres_5 = 5

     IF l_perc_iss IS NOT NULL THEN
        LET l_val_iss  = (l_perc_iss/100) * p_aviso_rec.val_liquido_item
     END IF
  END IF

  LET p_ar_iss.cod_empresa     =  p_aviso_rec.cod_empresa
  LET p_ar_iss.num_aviso_rec   =  p_aviso_rec.num_aviso_rec
  LET p_ar_iss.num_seq         =  p_aviso_rec.num_seq
  LET p_ar_iss.val_iss_decl    =  p_val_iss
  IF l_val_iss IS NOT NULL THEN
     LET p_ar_iss.val_iss_calc  =  l_val_iss
  ELSE
     LET p_ar_iss.val_iss_calc  =  p_val_iss
  END IF
  LET p_ar_iss.val_bc_iss_decl =  p_aviso_rec.val_liquido_item
  LET p_ar_iss.val_bc_iss_calc =  p_aviso_rec.val_liquido_item
  LET p_ar_iss.perc_iss_decl   =  p_tipo_val.perc_val_princ
  IF l_perc_iss IS NOT NULL THEN
     LET p_ar_iss.perc_iss_calc =  l_perc_iss
  ELSE
     LET p_ar_iss.perc_iss_calc =  p_tipo_val.perc_val_princ
  END IF
  LET p_ar_iss.cod_tip_val_iss =  p_tipo_val.cod_tip_val

  CALL sup3762_busca_info_fornecedor(p_nf_sup.cod_fornecedor)
  LET p_ar_iss.num_inscr_iss = p_fornecedor.ins_estadual

  INSERT INTO ar_iss VALUES (p_ar_iss.*)

  IF sqlca.sqlcode <> 0 THEN
     LET p_houve_erro = TRUE
  END IF
 END FUNCTION

#--------------------------------------------#
 FUNCTION sup376_analisa_contagem_inspecao()
#--------------------------------------------#
 DEFINE l_sucesso       SMALLINT,
        l_item_wms      SMALLINT,
        l_grade_dimens  SMALLINT,
        l_revisao       INTEGER,
        l_fornec_triang LIKE nf_sup.cod_fornecedor,
        l_item_triang                 SMALLINT,
        l_triang_em_terc              SMALLINT,
        l_parametro                   CHAR(01)

 #inicio OS 373464
 IF p_par_sup_compl.ies_rastreio = "1" THEN

    INITIALIZE l_revisao TO NULL
    WHENEVER ERROR CONTINUE
      SELECT MAX(avf_plano_item.revisao)
        INTO l_revisao
        FROM avf_plano_item
       WHERE avf_plano_item.empresa = p_cod_empresa
         AND avf_plano_item.item = p_aviso_rec.cod_item
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 AND
       sqlca.sqlcode <> 100 AND
       sqlca.sqlcode <> -206 THEN
       CALL log003_err_sql("SELECT","AVF_PLANO_ITEM")
    ELSE
       IF l_revisao IS NOT NULL AND
          l_revisao >= 0 THEN
          IF avf1046_busca_parametro(p_aviso_rec.cod_item
                                    ,p_dados_tela.cod_fornecedor
                                    ,p_dados_tela.num_aviso_rec
                                    ,p_aviso_rec.num_seq
                                    ,l_revisao)THEN

          END IF
       END IF
    END IF
 END IF
 #fim Os 373464

 #-----------------CONTAGEM ITEM NAO ESTOQUE ----------------------#
 LET p_ies_passou = FALSE
 IF p_dados_tela.ies_nf_aguard_nfe <> "7" THEN
    IF p_aviso_rec.ies_item_estoq = "N" AND
       p_dados_tela.ies_nf_aguard_nfe <> "4" THEN
       IF p_par_sup_compl.ies_conta_ok_n_est = "2" OR
         (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
          p_dados_tela.ies_especie_nf = "NFS") THEN
          LET p_ies_passou = TRUE
          LET p_aviso_rec.ies_liberacao_insp = "S"
          IF p_dados_tela.ies_nf_aguard_nfe = "T"
          THEN LET p_aviso_rec.ies_liberacao_cont = "S"
## OBS: ies_liberacao_cont deve ficar como N para efetuar a baixa de pedido de item Débito Direto no sup0530
          ELSE LET p_aviso_rec.ies_liberacao_cont = "N"
          END IF

## OBS: ies_situa_ar deve ficar como E para que seja chamado sup0530 e efetue a baixa de pedido Débito Direto
##      como sup1190 'contagem física' está diferente de 1 a contagem DD é sempre automática
          IF  p_dados_tela.ies_especie_nf    <> "NFR"    #OS. 503073
          AND p_dados_tela.ies_nf_aguard_nfe <> "X" THEN
             LET p_aviso_rec.ies_situa_ar = "E"
             LET p_aviso_rec.qtd_recebida       = p_array[p_ind].qtd_declarad_nf
          ELSE
             LET p_aviso_rec.ies_liberacao_insp = "N"
          END IF
       END IF
    END IF
 END IF
 #----------#

 INITIALIZE  p_cod_local_rec, p_ies_contagem  TO NULL
 CALL sup376_verifica_operacao_recebimento()
    RETURNING p_cod_local_rec, p_ies_contagem

 IF p_cod_local_rec IS NOT NULL AND
    p_cod_local_rec <> " " THEN
    LET p_aviso_rec.cod_local_estoq = p_cod_local_rec
 END IF

 CALL sup376_busca_parametros_item(p_aviso_rec.cod_item)
 LET p_parametros = p_item_parametro.parametros[17]
 IF p_parametros = "S" THEN
    LET p_cod_local_rec = p_array_compl[p_ind].cod_local_estoq
    IF p_cod_local_rec IS NOT NULL THEN
       LET p_aviso_rec.cod_local_estoq = p_cod_local_rec
       END IF
 END IF

 IF p_ies_busca_loclib = "S"
 THEN INITIALIZE p_cod_local_rec TO NULL
      CALL sup376_busca_loclib(p_aviso_rec.cod_item)
           RETURNING p_cod_local_rec
      IF p_cod_local_rec IS NOT NULL THEN
         LET p_aviso_rec.cod_local_estoq = p_cod_local_rec
      END IF
 END IF

 LET g_passou_skip_lote = 0
 #---- Verifica relacionamento natureza operacao X grupo despesa -----#
 IF p_dados_tela.ies_nf_aguard_nfe = "8" THEN
    CALL sup3762_busca_grupo_desp_nat_oper(m_ies_fat_unico) RETURNING p_cod_gru_desp
    IF p_cod_gru_desp IS NOT NULL THEN
       LET p_aviso_rec.gru_ctr_desp_item = p_cod_gru_desp
    END IF
 END IF

 #se empresa quer inspecao pelo cliente da triangulação e não pelo fornecedor da nota

 IF m_informa_cliente_triang_con = "S" AND p_dados_tela.ies_especie_nf = "NFR"
    AND p_dados_tela.ies_nf_aguard_nfe = "T" THEN
    CALL sup3760_fornecedor_relac_triangulacao(p_cod_empresa, p_dados_tela.num_aviso_rec,
                                               p_aviso_rec.gru_ctr_desp_item)
       RETURNING l_item_triang, l_triang_em_terc
    IF l_item_triang = 1 AND
       l_triang_em_terc = 0 THEN
       CALL sup3760_fornecedor_triangulacao(l_triang_em_terc, TRUE)
       #se foi incluido cliente de triangulacao
       WHENEVER ERROR CONTINUE
       SELECT parametro_texto INTO l_fornec_triang
         FROM sup_par_ar
        WHERE empresa = p_cod_empresa
          AND aviso_recebto     = p_dados_tela.num_aviso_rec
          AND seq_aviso_recebto = 0
          AND parametro     = "fornec_triangulacao"
       WHENEVER ERROR CONTINUE
       IF sqlca.sqlcode = 0 THEN
          #se considera empresa cliente, ou se não existe registro
          WHENEVER ERROR CONTINUE
          LET l_parametro = "N"
          SELECT parametro_ind INTO l_parametro
            FROM sup_par_it_forn
           WHERE empresa    = p_cod_empresa
             AND item       = p_aviso_rec.cod_item
             AND fornecedor = p_dados_tela.cod_fornecedor
             AND parametro  = "consdr_emp_cli"
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 OR l_parametro = "S" THEN
             WHENEVER ERROR CONTINUE
             INITIALIZE p_item_fornec.* TO NULL
             SELECT cod_empresa, cod_item, cod_fornecedor, cod_item_fornec,
                    ies_item_iso, dat_aprov, dat_entrega_ult, cnd_pgto,
                    cod_mod_embar, cod_moeda, ies_aprovado, cod_unid_med_forn,
                    fat_conver_unid, pct_particip_comp, ies_tip_entrega,
                    qtd_periodos_seg, qtd_lote_minimo, qtd_lote_maximo,
                    qtd_lote_multiplo, qtd_max_mes, qtd_dias_entrega,
                    ies_tip_preco, dat_ini_contrato, dat_fim_contrato,
                    ies_tem_inspecao, ies_tipo_inspecao, qtd_inspecao,
                    ies_tip_aprovacao, tex_observ, ies_reg_espec_icms,
                    qtd_entr_sem_insp
               INTO p_item_fornec.cod_empresa, p_item_fornec.cod_item, p_item_fornec.cod_fornecedor, p_item_fornec.cod_item_fornec,
                    p_item_fornec.ies_item_iso, p_item_fornec.dat_aprov, p_item_fornec.dat_entrega_ult, p_item_fornec.cnd_pgto,
                    p_item_fornec.cod_mod_embar, p_item_fornec.cod_moeda, p_item_fornec.ies_aprovado, p_item_fornec.cod_unid_med_forn,
                    p_item_fornec.fat_conver_unid,  p_item_fornec.pct_particip_comp,  p_item_fornec.ies_tip_entrega,
                    p_item_fornec.qtd_periodos_seg,  p_item_fornec.qtd_lote_minimo,  p_item_fornec.qtd_lote_maximo,
                    p_item_fornec.qtd_lote_multiplo,  p_item_fornec.qtd_max_mes,  p_item_fornec.qtd_dias_entrega,
                    p_item_fornec.ies_tip_preco,  p_item_fornec.dat_ini_contrato,  p_item_fornec.dat_fim_contrato,
                    p_item_fornec.ies_tem_inspecao,  p_item_fornec.ies_tipo_inspecao,  p_item_fornec.qtd_inspecao,
                    p_item_fornec.ies_tip_aprovacao,  p_item_fornec.tex_observ,  p_item_fornec.ies_reg_espec_icms,
                    p_item_fornec.qtd_entr_sem_insp
               FROM item_fornec
              WHERE item_fornec.cod_empresa    = p_cod_empresa
                AND item_fornec.cod_item       = p_aviso_rec.cod_item
                AND item_fornec.cod_fornecedor = l_fornec_triang
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
                CALL log003_err_sql("SELECAO","ITEM_FORNEC")
             END IF
          END IF
       END IF
    END IF
 END IF

 IF p_ies_passou = FALSE THEN
    IF p_ies_cont_insp_aut = "3" THEN
      LET p_ies_passou = TRUE
    END IF
    CALL sup376_verifica_item_fornec_insp() #OS 178472 - OS275852(Chamada função novamente!)
 END IF

 #--- Seta variaveis para itens com contagem automatica ---#
 ### OS 277425 ###
 LET l_grade_dimens = FALSE

 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                              p_cod_empresa,
                              p_aviso_rec.num_aviso_rec) = FALSE AND
   sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                           p_cod_empresa,
                           p_aviso_rec.num_aviso_rec) = FALSE THEN
    CALL sup0063_verifica_controles(1,
                                    p_aviso_rec.cod_item,
                                    "INCLUSAO",
                                    "SUP3760")
       RETURNING m_controles
    IF m_controles <> " " THEN
       IF sup3762_verifica_apenas_controle_lote_automatico(p_aviso_rec.cod_item) = FALSE THEN
          ### Irá obrigar contagem manual, pois precisa ser informada a grade
          ### da contagem.
          LET l_grade_dimens = TRUE
       END IF
    END IF
 END IF

 IF l_grade_dimens = TRUE THEN
    ### OS 277425 ###
    IF m_informou_grade = TRUE OR
         sup0812_verifica_nota_transferencia(p_cod_empresa,
                                             p_dados_tela.num_aviso_rec,
                                             p_dados_tela.num_nf,
                                             p_dados_tela.ser_nf,
                                             p_dados_tela.ssr_nf,
                                             p_dados_tela.cod_fornecedor,
                                             p_dados_tela.cod_operacao,
                                             p_dados_tela.cod_fiscal_compl) THEN
       ### Irá permitir CONTAGEM AUTOMATICA, se estiver parametrizado
       ### para tal, buscando a GRADE DO RECEBIMENTO para a contagem.
       ### ou se for nota fiscal de TRANSFERENCIA entre unidades !!!(OS380921)
       LET l_grade_dimens = FALSE
    END IF
 END IF

## 476411 (deve verificar contagem/inspeção automatica ou não usando verifica_cont_insp_autom,
##         em seguida deve verificar se trabalha com grade/dimensional para gerar contagem automática,
##         já a inspeção deve continuar obedecendo o critério normal de verificação (sup0090, skip lote ...etc)
 IF ((p_ies_cont_insp_aut="1" OR
      p_ies_cont_insp_aut="2" OR
      p_par_estoque.ies_custo_medio="D")    AND
      p_dados_tela.ies_nf_aguard_nfe <> "7" AND
      p_ies_passou = FALSE) OR
     (p_ies_contagem = "S") OR
     (p_ies_passou = TRUE   AND
      p_dados_tela.ies_nf_aguard_nfe = "5" )AND
      p_dados_tela.ies_nf_aguard_nfe <> "4" THEN


    CALL sup376_verifica_cont_insp_automat(p_aviso_rec.cod_item, m_cont_insp_especial)
         RETURNING p_ies_item_cont_aut, p_ies_item_insp_aut

    IF p_aviso_rec.ies_item_estoq = "S" THEN

       IF p_ies_contagem IS NOT NULL THEN

          LET l_item_wms = FALSE

          IF g_ies_wis_instalado = "S" THEN
             IF p_aviso_rec.cod_item IS NOT NULL AND
                p_aviso_rec.cod_item <> " " THEN
                CALL vdp3188_item_sob_controle_wis(p_cod_empresa,p_aviso_rec.cod_item)
                RETURNING l_sucesso , l_item_wms
             END IF
          END IF

          IF g_ies_wms_instalado = "S" THEN
             CALL wms0004_item_sob_controle_wms(p_cod_empresa,p_aviso_rec.cod_item)
             RETURNING l_sucesso , l_item_wms
          END IF

          IF l_item_wms = FALSE THEN
             IF p_ies_contagem = "S" THEN
                LET p_ies_item_cont_aut = "S"
             ELSE
                LET p_ies_item_cont_aut = "N"
             END IF
          ELSE
             LET p_ies_item_cont_aut = "N"
          END IF

       END IF

    END IF

    IF (p_ies_item_cont_aut = "S" OR
        p_par_estoque.ies_custo_medio = "D") AND
       sup376_verifica_itens_invent() = FALSE THEN
       IF p_ies_item_insp_aut = "S" THEN
          LET p_aviso_rec.ies_liberacao_insp = "S"
          IF p_ies_item_cont_aut = "S" THEN
             LET p_aviso_rec.ies_situa_ar = "E"
             LET p_aviso_rec.qtd_recebida = p_aviso_rec.qtd_declarad_nf
          ELSE LET p_aviso_rec.ies_situa_ar = "C"
          END IF
       ELSE
          LET p_aviso_rec.ies_liberacao_insp = "N"
          IF p_ies_item_cont_aut = "S" THEN
             LET p_aviso_rec.ies_situa_ar = "I"
             LET p_aviso_rec.qtd_recebida = p_aviso_rec.qtd_declarad_nf
          ELSE LET p_aviso_rec.ies_situa_ar = "C"
          END IF
       END IF
    ELSE
       LET p_aviso_rec.ies_situa_ar = "C"
       IF p_ies_item_insp_aut = "S" THEN
          LET p_aviso_rec.ies_liberacao_insp = "S"
       ELSE
          LET p_aviso_rec.ies_liberacao_insp = "N"
       END IF
    END IF
 END IF

 IF l_grade_dimens = TRUE AND
     p_dados_tela.ies_nf_aguard_nfe <> "4" THEN
    IF p_ies_passou = FALSE THEN
       LET p_ies_item_cont_aut = "N"
       IF p_aviso_rec.ies_item_estoq = "S" THEN
          LET p_aviso_rec.ies_liberacao_cont = "N"
          LET p_aviso_rec.ies_situa_ar  = "C"
          ## A inspeção será realizada conforme parâmetros (sup0090, etc...)
       ELSE
          LET p_aviso_rec.ies_liberacao_cont = "S"
          LET p_aviso_rec.ies_liberacao_insp = "S"
          LET p_aviso_rec.ies_situa_ar  = "E"
       END IF
    END IF
 END IF

 IF (p_dados_tela.ies_nf_aguard_nfe = "2" OR
     p_dados_tela.ies_nf_aguard_nfe = "5") AND
     l_grade_dimens = FALSE THEN
    LET p_aviso_rec.ies_liberacao_insp = "S"
 END IF

 IF m_cont_insp_especial = "S" AND
    l_grade_dimens = FALSE THEN
    IF (p_aviso_rec.cod_item IS NULL OR p_aviso_rec.cod_item = " ") OR
        p_aviso_rec.qtd_declarad_nf = 0 OR
       (p_aviso_rec.ies_item_estoq = "N" AND
        p_dados_tela.ies_nf_aguard_nfe <> "4") THEN
       LET p_aviso_rec.ies_liberacao_insp = "S"
       LET p_aviso_rec.ies_situa_ar       = "E"
       LET p_aviso_rec.qtd_recebida       = p_aviso_rec.qtd_declarad_nf
       LET p_aviso_rec.qtd_liber          = p_aviso_rec.qtd_declarad_nf #ch738229 Antonio
    END IF
 END IF

 CALL sup376_verifica_avf_insp_ar()

# OS 487300 - foi deixado em comentário a parte descrita abaixo pois quando trabalha com grade/dimensional
#             os controles já são informados na contagem do material (conforme mudança de conceito efetuada
#             a partir da v0500)
#
#IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
#                             p_cod_empresa,
#                             p_aviso_rec.num_aviso_rec) = FALSE AND
#   sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
#                           p_cod_empresa,
#                           p_aviso_rec.num_aviso_rec) = FALSE THEN
#   IF p_aviso_rec.ies_item_estoq = "S" AND
#      l_grade_dimens = FALSE THEN
#      CALL sup0063_verifica_controles(1, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles
#      IF m_controles <> " " THEN
#         IF p_aviso_rec.ies_situa_ar = "E" THEN
#            LET p_aviso_rec.ies_situa_ar = "I"
#         END IF
#         LET p_aviso_rec.ies_liberacao_insp = "N"
#      END IF
#   ELSE
#      CALL sup0063_verifica_controles(11, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles
#      IF m_controles <> " " THEN
#         IF p_aviso_rec.ies_situa_ar = "E" THEN
#            LET p_aviso_rec.ies_situa_ar = "I"
#         END IF
#         LET p_aviso_rec.ies_liberacao_insp = "N"
#      END IF
#   END IF
#END IF

 IF m_cont_insp_especial = "S" AND
    l_grade_dimens = FALSE THEN
    IF (p_aviso_rec.cod_item IS NULL OR p_aviso_rec.cod_item = " ") OR
        p_aviso_rec.qtd_declarad_nf = 0 OR
       (p_aviso_rec.ies_item_estoq = "N" AND
        p_dados_tela.ies_nf_aguard_nfe <> "4") THEN
       LET p_aviso_rec.ies_liberacao_insp = "S"
       LET p_aviso_rec.ies_situa_ar       = "E"
       LET p_aviso_rec.qtd_recebida       = p_aviso_rec.qtd_declarad_nf
    END IF
 END IF

 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                              p_cod_empresa,
                              p_aviso_rec.num_aviso_rec) = FALSE AND
   sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                           p_cod_empresa,
                           p_aviso_rec.num_aviso_rec) = FALSE THEN
    CALL sup0063_verifica_controles(1, p_aviso_rec.cod_item, "INCLUSAO","SUP3760")
       RETURNING m_controles

    #--inicio--vanderlei OS 383999 #
    IF NOT sup0063_grava_temp_controles(m_controles) THEN
       CALL log0030_mensagem('Houve erro na gravação da tabela W_CONTROLES.','stop')
       LET p_houve_erro = 1
    END IF
 END IF

 IF NOT p_houve_erro THEN
    IF sup0064_verif_ctr_grade_empresa_orig_dest(p_cod_empresa,
                                                 p_dados_tela.num_aviso_rec,
                                                 p_dados_tela.num_nf,
                                                 p_dados_tela.ser_nf,
                                                 p_dados_tela.ssr_nf,
                                                 p_dados_tela.cod_fornecedor,
                                                 p_dados_tela.cod_operacao,
                                                 p_aviso_rec.cod_item) THEN

       LET m_msg = 'Controles do item ',p_aviso_rec.num_seq CLIPPED,' estão diferentes da empresa origem. Grades/dim. deverão ser informados manualmente! Confirma?'
       INITIALIZE m_contagem_automatica TO NULL #727947 Antonio
       IF log0040_confirm(0,0,m_msg) THEN
          LET m_contagem_automatica = TRUE      #727947 Antonio
          LET p_aviso_rec.ies_liberacao_cont = "N"
          LET p_aviso_rec.ies_situa_ar       = "C"
       ELSE
          LET p_houve_erro = 1
       END IF
    END IF
 END IF
 #---fim----vanderlei OS 383999 #
 END FUNCTION

#---------------------------------------------#
 FUNCTION sup376_inicializa_variaveis_globais()
#---------------------------------------------#
 INITIALIZE p_num_ar376,p_ies_fornec_ativo                           TO NULL
 INITIALIZE p_ies_tip_entrada,p_conta                                TO NULL
 INITIALIZE p_tmp_transpor,p_item1,p_cod_uni_feder_f                 TO NULL
 INITIALIZE p_cod_cliente1,p_cod_cidade1                             TO NULL
 INITIALIZE p_cod_uni_feder1,p_cod_pais1,p_num_conta1                TO NULL
 INITIALIZE p_val_base,p_sequencia,p_cod_fornec144                   TO NULL
 INITIALIZE p_ind,p_ind1,p_ind2,p_ind3,p_ind5,p_ind8,p_ind9          TO NULL
 INITIALIZE p_cod_pais_emp,p_status,p_quantos                        TO NULL
 INITIALIZE p_ies_obj_entrada_fisc,p_cod_item_oc                     TO NULL
 INITIALIZE m_num_nf_cap,p_cancel,p_ies_pagamento,p_msg_qtd          TO NULL
 INITIALIZE p_ies_cons                                               TO NULL
 INITIALIZE p_sup_mes,p_sup_cap,p_sup449_cap,p_sup449_mes            TO NULL
 INITIALIZE p_sup_mes,p_sup_cap,p_pedidos,p_pedidos_p1               TO NULL
 INITIALIZE p_pedidos_p2,p_pedidos_p3,p_inclu_item,p_val_tot_liq     TO NULL
 INITIALIZE p_ordens,p_ordens_p1,p_ordens_p2,p_ordens_p3             TO NULL
 INITIALIZE p_ordens_p4,p_prog_ordem,p_prog_ordem1,p_prog_ordem2     TO NULL
 INITIALIZE p_retorno_3760,p_houve_erro                                   TO NULL
 INITIALIZE p_entra_array,p_houve_erro                               TO NULL
 INITIALIZE p_saldo_frete,p_saldo_icms,p_saldo_icms_c,p_entra_tot    TO NULL
 INITIALIZE p_pedido_sele,p_pedido_sele1,p_pedido_sele2              TO NULL
 INITIALIZE p_pedido_sele3,p_ordem_sele,p_ordem_sele1                TO NULL
 INITIALIZE p_ordem_sele2,p_ordem_sele3,p_ordem_sele4                TO NULL
 INITIALIZE p_declarad_sele,p_ies_reservou                           TO NULL
 INITIALIZE p_tot_itens                                              TO NULL
 INITIALIZE p_cod_item_pop,p_num_conhec,p_ser_conhec                 TO NULL
 INITIALIZE p_ssr_conhec,p_cod_transpor,p_fornec_incl_item           TO NULL
 INITIALIZE p_ies_informou_ped,p_qtd_array                           TO NULL
 INITIALIZE p_ind_tela, p_ies_incl_cap                               TO NULL
 INITIALIZE p_nom_resp_aceite_er                                     TO NULL
 INITIALIZE p_diferenca_f,p_diferenca_p                              TO NULL
 INITIALIZE p_frete_sup                 TO NULL
 INITIALIZE p_plano_contas              TO NULL
 INITIALIZE p_des_pendencia             TO NULL
 INITIALIZE p_it_prg_entr               TO NULL
 INITIALIZE p_it_prg_entr_reser         TO NULL
 INITIALIZE p_item_sup                  TO NULL
 INITIALIZE p_par_estoque               TO NULL
 INITIALIZE p_ies_contrib_ipi           TO NULL
 INITIALIZE p_soma_reserva2,p_soma_reserva3                         TO NULL
 INITIALIZE p_prx_seq,p_num_seq,p_cod_fiscal_forma                  TO NULL
 INITIALIZE p_qtd_declarad_nf, p_primeira_vez                       TO NULL
 INITIALIZE comando3                                             TO NULL
 INITIALIZE p_aviso_rec.*               TO NULL
 INITIALIZE p_nf_sup.*                  TO NULL
 INITIALIZE p_par_con.*                 TO NULL
 INITIALIZE p_par_sup.*                 TO NULL
 INITIALIZE p_par_sup_compl.*           TO NULL
 INITIALIZE p_ar_ped.*                  TO NULL
 INITIALIZE p_ar_diverg.*               TO NULL
 INITIALIZE p_prog_ordem_sup.*          TO NULL
 INITIALIZE p_empresa.*                 TO NULL
 INITIALIZE p_ordem_sup.*               TO NULL
 INITIALIZE p_cod_fiscal_item           TO NULL
 INITIALIZE p_pre_unit_nf               TO NULL
 INITIALIZE p_prim_digito,p_ult_digitos,p_cod_uni_feder            TO NULL
 INITIALIZE p_dest_aviso_rec.*          TO NULL
 INITIALIZE p_fat_conver_unid,p_num_conta_sal                      TO NULL
 INITIALIZE p_fornecedor.*              TO NULL
 INITIALIZE p_maior_data,p_menor_data,p_ies_tem_inspecao           TO NULL
 INITIALIZE p_pedido_sup.*              TO NULL
 INITIALIZE p_dados_tela.*              TO NULL
 INITIALIZE p_dados_tela_f.*            TO NULL
 INITIALIZE p_dados_telar.*             TO NULL
 INITIALIZE p_dados_telar_f.*           TO NULL
 INITIALIZE p_formonly.*                TO NULL
 INITIALIZE p_formonlyr.*               TO NULL
 INITIALIZE p_funcao_menu               TO NULL
 INITIALIZE p_cod_item,p_dif_aceita     TO NULL
 INITIALIZE p_sub                       TO NULL
 INITIALIZE p_array                     TO NULL
 INITIALIZE p_array_it_prg_entr         TO NULL
 INITIALIZE p_array_compl               TO NULL
 INITIALIZE p_nota.*                    TO NULL
 INITIALIZE p_array_pedidos             TO NULL
 INITIALIZE p_cod_ret_imp               TO NULL
 END FUNCTION

#------------------------------------#
 FUNCTION sup376_inicializa_input()
#------------------------------------#

 LET p_dados_tela.ser_nf            = sup376_busca_par_sup_pad("ser_nf_376",3)
 LET p_dados_tela.ssr_nf            = sup376_busca_par_sup_pad("ssr_nf_376",2)
 LET p_dados_tela.ies_especie_nf    = sup376_busca_par_sup_pad("especie_nf_376",3)
 LET p_dados_tela.ies_nf_aguard_nfe = sup376_busca_par_sup_pad("tipo_nf_376",3)
 IF sqlca.sqlcode <> 0 OR
    p_dados_tela.ies_nf_aguard_nfe IS NULL THEN
    LET p_dados_tela.ies_nf_aguard_nfe = 1
 END IF

 LET p_dados_tela.cod_operacao      = sup376_busca_par_sup_pad("cod_cfop_376",3)
 LET p_dados_tela.cnd_pgto_nf       = sup376_busca_par_sup_pad("cnd_pgto_nf_376",2)
 LET p_dados_tela.cod_mod_embar     = sup376_busca_par_sup_pad("cod_mod_embar_376",2)
END FUNCTION

#------------------------------------------#
 FUNCTION sup376_deleta_inss_auton(p_nr_nf,p_num_seq)
#------------------------------------------#
 DEFINE p_nr_nf   LIKE reten_inss.num_ad_nf_orig,
        p_num_seq LIKE aviso_rec.num_seq

 DELETE FROM inss_auton
  WHERE inss_auton.cod_empresa    = p_cod_empresa
    AND inss_auton.num_ad_nf_orig = p_nr_nf
    AND inss_auton.ser_nf         = p_dados_tela.ser_nf
    AND inss_auton.ssr_nf         = p_dados_tela.ssr_nf
    AND inss_auton.ies_especie_nf = p_dados_tela.ies_especie_nf
    AND inss_auton.cod_fornecedor = p_dados_tela.cod_fornecedor

 END FUNCTION

#-----------------------------------------------#
 FUNCTION sup376_alimenta_audit(l_acao,l_tabela,
                                l_num_ar, l_seq,
                                l_pedido, l_num_oc,
                                l_num_prog)
#-----------------------------------------------#
 DEFINE l_caminho CHAR(100),
        l_texto   CHAR(080),
        l_acao    CHAR(20),
        l_tabela  CHAR(20),
        l_num_ar  LIKE aviso_rec.num_aviso_rec,
        l_seq     LIKE aviso_rec.num_seq,
        l_pedido  LIKE pedido_sup.num_pedido,
        l_num_oc  LIKE ordem_sup.num_oc,
        l_num_prog LIKE prog_ordem_sup.num_prog_entrega

 LET l_caminho = p_user CLIPPED,".sup3760.bg"

 IF g_ies_audit = "N"     OR
    g_ies_audit IS NULL THEN
    CALL log150_procura_caminho("LST") RETURNING l_caminho
    LET l_caminho = l_caminho CLIPPED, p_user CLIPPED,".sup3760.bg"
    CALL STARTLOG(l_caminho)
    LET g_ies_audit = "S"
 END IF

 LET l_texto = "ERRO ",sqlca.sqlcode USING "#####&"," - ",l_acao," ",l_tabela

 CALL ERRORLOG(l_texto)

 LET l_texto = "A.R. Nr.: ",l_num_ar USING "#####&",
               " - Sequencia: ",l_seq USING "##&",
               " - Ped.: ",l_pedido USING "#####&",
               " - O.C.: ",l_num_oc USING "#####&",
               " - Prog.: ",l_num_prog USING "##&"

 CALL ERRORLOG(l_texto)
 LET l_texto = NULL
 CALL ERRORLOG(l_texto)
 END FUNCTION

#--------------------------------------------#
 FUNCTION sup376_verifica_relacionamento_nfs()
#--------------------------------------------#
 DEFINE l_ies_interf_cre   CHAR(01),
        l_parcretxt        CHAR(500),
        l_dev_mestre       RECORD LIKE dev_mestre.*

 SELECT par_ies
   INTO l_ies_interf_cre
   FROM par_sup_pad
  WHERE cod_empresa   = p_cod_empresa
    AND cod_parametro = "ies_interf_cre"
 IF l_ies_interf_cre IS NULL THEN
    LET l_ies_interf_cre = "N"
 END IF

 SELECT parametro
   INTO l_parcretxt
   FROM par_cre_txt

 IF (p_nf_sup.ies_especie_nf = "NFD" OR
     p_ies_tip_entrada = "5") AND
     l_ies_interf_cre = "S" THEN

     INITIALIZE l_dev_mestre.* TO NULL
     SELECT *
       INTO l_dev_mestre.*
       FROM dev_mestre
      WHERE cod_empresa    = p_nf_sup.cod_empresa
        AND num_nff        = p_nf_sup.num_aviso_rec
        AND num_nff_origem IS NOT NULL
        AND num_nff_origem > 0
     IF sqlca.sqlcode = 0 THEN
       RETURN TRUE
     END IF
 END IF
 RETURN FALSE
 END FUNCTION

#----------------------------------------------#
 FUNCTION sup3760_verifica_devolucao(l_operacao)
#----------------------------------------------#
 DEFINE p_cont             SMALLINT,
        p_num_docum        LIKE docum.num_docum,
        p_ies_interf_cre   CHAR(01),
        p_parcretxt        CHAR(500),
        p_docum            RECORD LIKE docum.*,
        p_dev_mestre       RECORD LIKE dev_mestre.*,
        p_num_docum_origem LIKE docum.num_docum_origem,
        p_num_docum_or_aux LIKE docum.num_docum_origem,
        l_cod_cliente      LIKE docum.cod_cliente,
        sql_stmt           CHAR(2000),
        l_contador         SMALLINT,
        l_continua         SMALLINT,
        l_operacao         CHAR(10)

 INITIALIZE p_ies_interf_cre TO NULL
 SELECT par_ies
   INTO p_ies_interf_cre
   FROM par_sup_pad
  WHERE cod_empresa   = p_cod_empresa
    AND cod_parametro = "ies_interf_cre"
 IF p_ies_interf_cre IS NULL THEN
    LET p_ies_interf_cre = "N"
 END IF

 INITIALIZE p_parcretxt TO NULL
 SELECT parametro
   INTO p_parcretxt
   FROM par_cre_txt

 IF (p_nf_sup.ies_especie_nf = "NFD" OR
     p_ies_tip_entrada = "5") AND
     p_ies_interf_cre  = "S" THEN
     IF find4GLFunction('supy121_valida_alteracao_dev_clie') THEN
        IF NOT supy121_valida_alteracao_dev_clie(p_nf_sup.cod_empresa,
                                                 p_nf_sup.num_aviso_rec,
                                                 0,
                                                 l_operacao) THEN
           RETURN TRUE
        END IF
     END IF

     INITIALIZE l_contador TO NULL
     WHENEVER ERROR CONTINUE
     SELECT COUNT(*)
       INTO l_contador
       FROM sup_nf_devol_cli
      WHERE empresa           = p_nf_sup.cod_empresa
        AND aviso_recebto     = p_nf_sup.num_aviso_rec
     WHENEVER ERROR STOP

     IF sqlca.sqlcode <> 0 OR l_contador IS NULL THEN
        LET l_contador = 0
     END IF

     IF l_contador = 0 THEN
        INITIALIZE p_dev_mestre.* TO NULL
        SELECT *
          INTO p_dev_mestre.*
          FROM dev_mestre
         WHERE cod_empresa    = p_nf_sup.cod_empresa
           AND num_nff        = p_nf_sup.num_aviso_rec
           AND num_nff_origem IS NOT NULL
        IF sqlca.sqlcode <> 0 THEN
           RETURN FALSE
        END IF
        LET l_continua = TRUE
     ELSE
        DECLARE cq_num_nf_saida CURSOR FOR
        SELECT UNIQUE(nota_fiscal_fatura)
          FROM sup_nf_devol_cli
         WHERE empresa           = p_cod_empresa
           AND aviso_recebto     = p_nf_sup.num_aviso_rec

        WHENEVER ERROR CONTINUE
        OPEN cq_num_nf_saida

        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("OPEN","CQ_NUM_NF_SAIDA")
           RETURN TRUE
        END IF

        FETCH cq_num_nf_saida INTO p_dev_mestre.num_nff_origem
        WHENEVER ERROR STOP

        IF sqlca.sqlcode = 0 THEN
           LET l_continua = TRUE
        ELSE
           RETURN FALSE
        END IF
     END IF

     WHILE l_continua

        IF p_dev_mestre.num_nff_origem > 0 THEN
           LET p_num_docum_origem = p_dev_mestre.num_nff_origem USING "&&&&&&"
           LET p_num_docum_or_aux = p_dev_mestre.num_nff_origem

           LET sql_stmt = "SELECT docum.* ",
                            "FROM docum ",
                           "WHERE docum.cod_empresa         = """,m_cod_empresa_uni,""" ",
                             "AND docum.ies_tip_docum       = ""DP"" ",
                             "AND docum.ies_tip_docum_orig  = ""NF"" ",
                             "AND (docum.num_docum_origem   = """,p_num_docum_origem,""" ",
                              "OR  docum.num_docum_origem   = """,p_num_docum_or_aux,""") ",
                          "UNION ALL ",
                          "SELECT docum.* ",
                            "FROM docum, docum_anterior, cre_doc_ant_compl ",
                           "WHERE docum.cod_empresa                      = """,m_cod_empresa_uni,""" ",
                             "AND docum.ies_tip_docum_orig               = ""NF"" ",
                             "AND docum.ies_tip_docum                    = ""DP"" ",
                             "AND docum.num_docum_origem                 IS NULL ",
                             "AND docum_anterior.cod_empresa             = docum.cod_empresa ",
                             "AND docum_anterior.num_docum               = docum.num_docum ",
                             "AND docum_anterior.ies_tip_docum           = ""DP"" ",
                             "AND docum_anterior.ies_tip_docum_orig      = ""NF"" ",
                             "AND docum_anterior.num_docum_orig[1,6]     = """,p_num_docum_or_aux,""" ",
                             "AND cre_doc_ant_compl.empresa              = """,m_cod_empresa_uni,""" ",
                             "AND cre_doc_ant_compl.num_docum            = docum_anterior.num_docum ",
                             "AND cre_doc_ant_compl.tip_docum            = docum_anterior.ies_tip_docum ",
                             "AND cre_doc_ant_compl.sequencia_docum      = docum_anterior.num_seq_docum ",
                             "AND cre_doc_ant_compl.parametro            = ""empresa_consol"" ",
                             "AND cre_doc_ant_compl.texto_parametro[1,2] = """,p_cod_empresa,""" "

           PREPARE st_docum FROM sql_stmt
           DECLARE cq_docum CURSOR FOR st_docum

           LET p_retorno_3760 = FALSE
           FOREACH cq_docum INTO p_docum.*

              IF p_docum.ies_pgto_docum <> "A" THEN
                 LET p_cont = 0
                 LET p_num_docum_origem = p_nf_sup.num_nf USING "&&&&&&"
                 #OS 371663 - Thiago
                 SELECT count(*)
                   INTO p_cont
                   FROM docum_pgto a, docum_abat b
                  WHERE a.cod_empresa    = p_docum.cod_empresa
                    AND a.num_docum      = p_docum.num_docum
                    AND a.ies_tip_docum  = "DP"
                    AND a.ies_forma_pgto = "DV"
                    AND a.num_lote_pgto  = 5100
                    AND b.cod_empresa    = p_docum.cod_empresa
                    AND b.num_docum      = p_docum.num_docum
                    AND b.ies_tip_docum  = "DP"
                    AND b.num_seq_docum  = a.num_seq_docum
                    AND b.num_nota_cred  = p_num_docum_origem

                 IF p_cont > 0 THEN
                    CALL log0030_mensagem("Esta devolucao gerou abatimento em uma Duplicata. Contatar Setor de Cobranca.","exclamation")
                    LET p_retorno_3760 = TRUE
                    EXIT FOREACH
                 END IF
              ELSE
                 IF p_parcretxt[309] = "S" THEN
                    SELECT num_docum
                      FROM docum_posterior
                     WHERE cod_empresa        = p_docum.cod_empresa
                        AND ies_tip_docum      = "NC"
                        AND num_docum_post     = p_docum.num_docum
                        AND ies_tip_docum_post = p_docum.ies_tip_docum
                        AND num_seq_docum      = 1
                    IF sqlca.sqlcode = 0 THEN
                       ERROR "Esta devolucao possui Nota de Credito c/ Vinculacao.Contatar Setor de Cobranca"
                       LET p_retorno_3760 = TRUE
                       EXIT FOREACH
                    END IF
                 END IF
              END IF
           END FOREACH

           IF p_retorno_3760 = TRUE THEN
              IF l_contador > 0 THEN
                 WHENEVER ERROR CONTINUE
                 CLOSE cq_num_nf_saida
                 FREE cq_num_nf_saida
                 WHENEVER ERROR STOP
              END IF
              RETURN TRUE
           END IF
        END IF

        IF l_contador = 0 THEN
           LET l_continua = FALSE
        ELSE
           WHENEVER ERROR CONTINUE
           FETCH cq_num_nf_saida INTO p_dev_mestre.num_nff_origem
           WHENEVER ERROR STOP

           IF sqlca.sqlcode <> 0 THEN
              LET l_continua = FALSE
           END IF
        END IF
    END WHILE

    LET p_num_docum_origem    = p_nf_sup.num_nf

    INITIALIZE l_cod_cliente TO NULL
    DECLARE cq_cliente CURSOR FOR
    SELECT clientes.cod_cliente
      FROM clientes, fornecedor
     WHERE fornecedor.cod_fornecedor = p_nf_sup.cod_fornecedor
       AND clientes.num_cgc_cpf = fornecedor.num_cgc_cpf
       AND clientes.ies_situacao  IN ("S","A")
    FOREACH cq_cliente INTO l_cod_cliente
      EXIT FOREACH
    END FOREACH

    LET sql_stmt = "SELECT docum.* ",
                     "FROM docum ",
                    "WHERE docum.cod_empresa         = """,m_cod_empresa_uni,""" ",
                      "AND docum.cod_cliente         = """,l_cod_cliente,""" ",
                      "AND docum.ies_tip_docum       = ""NC"" ",
                      "AND docum.ies_tip_docum_orig  = ""NF"" ",
                      "AND docum.num_docum_origem    = """,p_num_docum_origem,""" ",
                   "UNION ALL ",
                   "SELECT docum.* ",
                     "FROM docum, docum_anterior, cre_doc_ant_compl ",
                    "WHERE docum.cod_empresa                      = """,m_cod_empresa_uni,""" ",
                      "AND docum.cod_cliente                      = """,l_cod_cliente,""" ",
                      "AND docum.ies_tip_docum_orig               = ""NF"" ",
                      "AND docum.ies_tip_docum                    = ""NC"" ",
                      "AND docum.num_docum_origem                 IS NULL ",
                      "AND docum_anterior.cod_empresa             = docum.cod_empresa ",
                      "AND docum_anterior.num_docum               = docum.num_docum ",
                      "AND docum_anterior.ies_tip_docum           = ""NC"" ",
                      "AND docum_anterior.ies_tip_docum_orig      = ""NF"" ",
                      "AND docum_anterior.num_docum_orig[1,6]     = """,p_num_docum_origem,""" ",
                      "AND cre_doc_ant_compl.empresa              = """,m_cod_empresa_uni,""" ",
                      "AND cre_doc_ant_compl.num_docum            = docum_anterior.num_docum ",
                      "AND cre_doc_ant_compl.tip_docum            = docum_anterior.ies_tip_docum ",
                      "AND cre_doc_ant_compl.sequencia_docum      = docum_anterior.num_seq_docum ",
                      "AND cre_doc_ant_compl.parametro            = ""empresa_consol"" ",
                      "AND cre_doc_ant_compl.texto_parametro[1,2] = """,p_cod_empresa,""" "

    PREPARE st_nc_vinc FROM sql_stmt
    DECLARE cq_nc_vinc CURSOR FOR st_nc_vinc
    FOREACH cq_nc_vinc INTO p_docum.*
    IF p_docum.ies_pgto_docum = "A" THEN
       IF p_parcretxt[309] = "S"
       THEN SELECT * FROM docum_posterior
             WHERE cod_empresa    = p_docum.cod_empresa
               AND num_docum      = p_docum.num_docum
               AND ies_tip_docum  = p_docum.ies_tip_docum
               AND num_seq_docum  = 1
         IF sqlca.sqlcode = 0 THEN
            ERROR "Esta devolucao possui Nota de Credito c/ Vinculacao.Contatar Setor de Cobranca"
            RETURN TRUE
         END IF
       END IF
    ELSE
       ERROR "NC ja utilizada em outra Duplicada.Contatar Setor de Cobranca"
       RETURN TRUE
    END IF
    LET p_ies_canc_nc = TRUE
    END FOREACH
 END IF

 RETURN FALSE

 END FUNCTION


#---------------------------------------#
 FUNCTION sup376_cancela_nota_credito()
#---------------------------------------#
  DEFINE  p_docum_obs            RECORD LIKE docum_obs.*,
          p_docum                RECORD LIKE docum.*,
          p_num_doc_origem       CHAR(10),
          p_num_doc_origem_aux   CHAR(10),
          sql_stmt              CHAR(2000),
          l_cod_cliente      LIKE clientes.cod_cliente

  LET  p_num_doc_origem     =  p_dados_tela.num_nf  USING "&&&&&&"
  LET  p_num_doc_origem_aux =  p_dados_tela.num_nf


  INITIALIZE l_cod_cliente TO NULL
    WHENEVER ERROR CONTINUE
    DECLARE cq_cliente2 CURSOR FOR
    SELECT clientes.cod_cliente
      FROM clientes, fornecedor
     WHERE fornecedor.cod_fornecedor = p_nf_sup.cod_fornecedor
       AND clientes.num_cgc_cpf = fornecedor.num_cgc_cpf
       AND clientes.ies_situacao  IN ("S","A")
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DECLARE","CQ_CLIENTE")
    END IF
    WHENEVER ERROR CONTINUE
    FOREACH cq_cliente2 INTO l_cod_cliente
    WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          EXIT FOREACH
       END IF
       EXIT FOREACH
    END FOREACH


  LET sql_stmt = "SELECT docum.* ",
                   "FROM docum ",
                  "WHERE docum.cod_empresa         = """,m_cod_empresa_uni,""" ",
                    "AND docum.cod_cliente         = """,l_cod_cliente,""" ",
                    "AND docum.ies_tip_docum       = ""NC"" ",
                    "AND docum.ies_tip_docum_orig  = ""NF"" ",
                    "AND docum.ies_pgto_docum      = 'A' ", #Espindola - Nao deve cancelar documentos cujo pagamento ja foi feito
                    "AND (docum.num_docum_origem   = """,p_num_doc_origem,""" ",
                     "OR  docum.num_docum_origem   = """,p_num_doc_origem_aux,""") ",
                 "UNION ALL ",
                 "SELECT docum.* ",
                   "FROM docum, docum_anterior, cre_doc_ant_compl ",
                  "WHERE docum.cod_empresa                      = """,m_cod_empresa_uni,""" ",
                    "AND docum.ies_tip_docum_orig               = ""NF"" ",
                    "AND docum.ies_tip_docum                    = ""NC"" ",
                    "AND docum.ies_pgto_docum                   = 'A' ", #Espindola - Nao deve cancelar documentos cujo pagamento ja foi feito
                    "AND docum.num_docum_origem                 IS NULL ",
                    "AND docum_anterior.cod_empresa             = docum.cod_empresa ",
                    "AND docum_anterior.num_docum               = docum.num_docum ",
                    "AND docum_anterior.ies_tip_docum           = ""NC"" ",
                    "AND docum_anterior.ies_tip_docum_orig      = ""NF"" ",
                    "AND docum_anterior.num_docum_orig[1,6]     = """,p_num_doc_origem_aux,""" ",
                    "AND cre_doc_ant_compl.empresa              = """,m_cod_empresa_uni,""" ",
                    "AND cre_doc_ant_compl.num_docum            = docum_anterior.num_docum ",
                    "AND cre_doc_ant_compl.tip_docum            = docum_anterior.ies_tip_docum ",
                    "AND cre_doc_ant_compl.sequencia_docum      = docum_anterior.num_seq_docum ",
                    "AND cre_doc_ant_compl.parametro            = ""empresa_consol"" ",
                    "AND cre_doc_ant_compl.texto_parametro[1,2] = """,p_cod_empresa,""" "

  PREPARE st_canc_nc FROM sql_stmt
  DECLARE cq_canc_nc CURSOR FOR st_canc_nc

  FOREACH cq_canc_nc INTO p_docum.*
      UPDATE docum SET ies_situa_docum = "C",
                       dat_alter_situa = today
       WHERE cod_empresa        = p_docum.cod_empresa
         AND num_docum          = p_docum.num_docum
         AND ies_tip_docum      = p_docum.ies_tip_docum
      IF sqlca.sqlcode = 0 THEN
         LET p_docum_obs.num_seq_docum = 0
         WHENEVER ERROR CONTINUE
         SELECT MAX(num_seq_docum)
           INTO p_docum_obs.num_seq_docum
           FROM docum_obs
          WHERE docum_obs.cod_empresa    = p_docum.cod_empresa
            AND docum_obs.num_docum      = p_docum.num_docum
            AND docum_obs.ies_tip_docum  = p_docum.ies_tip_docum
         WHENEVER ERROR STOP
         IF p_docum_obs.num_seq_docum IS NULL OR
            p_docum_obs.num_seq_docum = 0 THEN
            LET p_docum_obs.num_seq_docum  = 1
         ELSE
            LET p_docum_obs.num_seq_docum = p_docum_obs.num_seq_docum + 1
         END IF

         LET p_docum_obs.cod_empresa    = p_docum.cod_empresa
         LET p_docum_obs.num_docum      = p_docum.num_docum
         LET p_docum_obs.ies_tip_docum  = p_docum.ies_tip_docum

         LET p_docum_obs.dat_obs        = today
         LET p_docum_obs.dat_atualiz    = today
         LET p_docum_obs.tex_obs_1      = "CANCELAMENTO DE NC, DEVIDO A EXCLUSAO DA NF DE DEVOLUCAO QUE A GEROU"
         LET p_docum_obs.tex_obs_2      = "OCORRIDO EM ", today USING "dd/mm/yyyy"," AS ",TIME," HRS. "
         LET p_docum_obs.tex_obs_3 = "PELO LOGIN ",p_user
         WHENEVER ERROR CONTINUE
          INSERT INTO docum_obs VALUES(p_docum_obs.*)
         WHENEVER ERROR STOP
      END IF
  END FOREACH
END FUNCTION

#-----------------------------#
 FUNCTION sup376_libera_wis()
#-----------------------------#
 DEFINE l_ies_nf_com_erro     LIKE nf_sup.ies_nf_com_erro,
        l_nom_resp_aceite_er  LIKE nf_sup.nom_resp_aceite_er,
        l_sucesso             SMALLINT,
        l_item_wms            SMALLINT,
        l_gravou_wis          SMALLINT

 INITIALIZE l_item_wms, l_sucesso TO NULL

 LET l_gravou_wis = FALSE

 DECLARE cq_liber_wis CURSOR FOR
  SELECT *
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa    = p_cod_empresa
     AND aviso_rec.num_aviso_rec  = p_dados_tela.num_aviso_rec
 FOREACH cq_liber_wis INTO p_aviso_rec.*
    IF p_aviso_rec.cod_item IS NOT NULL AND
       p_aviso_rec.cod_item <> " " THEN
       CALL vdp3188_item_sob_controle_wis(p_cod_empresa,p_aviso_rec.cod_item)
       RETURNING l_sucesso,l_item_wms
       IF l_item_wms THEN
          SELECT ies_nf_com_erro, nom_resp_aceite_er
            INTO l_ies_nf_com_erro, l_nom_resp_aceite_er
            FROM nf_sup
           WHERE cod_empresa     = p_dados_tela.cod_empresa
             AND num_aviso_rec   = p_dados_tela.num_aviso_rec
          IF l_ies_nf_com_erro = "S" THEN
             IF l_nom_resp_aceite_er IS NOT NULL OR
                l_nom_resp_aceite_er <> "" THEN
                #IF sup376_grava_wis() THEN
                #   LET l_gravou_wis = TRUE
                #END IF
             ELSE
                CALL log0030_mensagem(" Funcao nao permitida para nota com erros","exclamation")
             END IF
          ELSE
 #             IF sup376_grava_wis() THEN
 #                LET l_gravou_wis = TRUE
 #             END IF
          END IF
       ELSE
          CALL log0030_mensagem("Item deve estar cadastrado como item WIS ","exclamation")
       END IF
    END IF
 END FOREACH

# IF l_gravou_wis = TRUE THEN
#    CALL sup376_grava_wis_mestre()
# END IF

END FUNCTION
{
#---------------------------#
 FUNCTION sup376_grava_wis()
#---------------------------#
  DEFINE l_wis_nf_item RECORD LIKE wis_nf_item.*,
         l_sucesso     SMALLINT,
         l_item_wms    SMALLINT,
         l_ies_insp    CHAR(01),
         l_tipo        CHAR(01)

  WHENEVER ERROR CONTINUE
  SELECT ies_tem_inspecao
    INTO l_ies_insp
    FROM item_fornec
   WHERE cod_empresa = p_cod_empresa
     AND cod_item = p_aviso_rec.cod_item
     AND cod_fornecedor = p_dados_tela.cod_fornecedor
  WHENEVER ERROR STOP

 IF l_ies_insp = "N" OR l_ies_insp = "2" OR l_ies_insp = "4" THEN
    LET l_wis_nf_item.ies_tem_inspecao = "N"
 ELSE
    LET l_wis_nf_item.ies_tem_inspecao = "S"
 END IF
  LET l_wis_nf_item.num_nff = p_dados_tela.num_nf
  LET l_wis_nf_item.cod_fornecedor = p_dados_tela.cod_fornecedor
  LET l_wis_nf_item.num_agenda = 0
  LET l_wis_nf_item.cod_item = p_aviso_rec.cod_item
  LET l_wis_nf_item.cod_faixa = 0
  LET l_wis_nf_item.qtd_item = p_aviso_rec.qtd_declarad_nf
  LET l_wis_nf_item.dat_fabricacao = NULL
  LET l_wis_nf_item.num_aviso_rec = p_aviso_rec.num_aviso_rec
  LET l_wis_nf_item.num_seq = p_aviso_rec.num_seq
  LET l_wis_nf_item.cod_erro = NULL
  LET l_wis_nf_item.dat_processamento = NULL

  INSERT INTO wis_nf_item VALUES (l_wis_nf_item.*)
       IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("INCLUSAO","WIS_NF_ITEM")
       RETURN FALSE
    END IF
    RETURN TRUE
 END FUNCTION
}
#-------------------------------------#
 FUNCTION sup376_verifica_dados_wis()
#-------------------------------------#

 DEFINE l_item_wms   LIKE aviso_rec.cod_item

 INITIALIZE p_array TO NULL

 WHENEVER ERROR CONTINUE

  SELECT *
    FROM wis_nf_mestre
   WHERE cod_empresa    = p_dados_tela.cod_empresa
     AND num_nff        = p_dados_tela.num_nf
     AND cod_fornecedor = p_dados_tela.cod_fornecedor
 WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     CALL log0030_mensagem(" Dados já processados para Interface WIS ","exclamation")
     RETURN TRUE
  END IF
  IF sqlca.sqlcode = 100 THEN
     RETURN FALSE
  END IF
  RETURN FALSE

END FUNCTION

#---------------------------------------------#
 FUNCTION sup376_verifica_item_wis(l_cod_item)
#---------------------------------------------#

 DEFINE l_cod_item LIKE aviso_rec.cod_item

  WHENEVER ERROR CONTINUE
    SELECT *
      FROM wis_nf_item
     WHERE cod_fornecedor = p_dados_tela.cod_fornecedor
       AND num_nff        = p_dados_tela.num_nf
       AND cod_item       = l_cod_item
  WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
      RETURN TRUE
    ELSE
      RETURN FALSE
    END IF

 END FUNCTION

#------ Chamada feita pelo sup3762 -----------#
 FUNCTION sup376_verifica_item_wms(l_cod_item)
#---------------------------------------------#
 DEFINE l_cod_item     LIKE aviso_rec.cod_item,
        l_sucesso_sql  SMALLINT,
        l_ies_item_wms SMALLINT

 IF g_ies_wms_instalado = "S" AND sup376_verifica_interf_ent_wms() THEN

     CALL wms0004_item_sob_controle_wms(p_cod_empresa, l_cod_item)
          RETURNING l_sucesso_sql, l_ies_item_wms

     IF l_sucesso_sql AND l_ies_item_wms THEN
       RETURN TRUE
     END IF

 END IF

 RETURN FALSE

END FUNCTION

{
#----------------------------------#
 FUNCTION sup376_grava_wis_mestre()
#----------------------------------#
 DEFINE l_wis_nf_mestre  RECORD LIKE wis_nf_mestre.*,
        l_cod_tipo       CHAR(01),
        l_contador       SMALLINT

 LET l_wis_nf_mestre.cod_fornecedor = p_dados_tela.cod_fornecedor
 LET l_wis_nf_mestre.num_nff = p_dados_tela.num_nf
 LET l_wis_nf_mestre.num_agenda = 0
 LET l_wis_nf_mestre.ser_nff = p_dados_tela.ser_nf
 LET l_wis_nf_mestre.dat_emissao = p_dados_tela.dat_emis_nf
 LET l_wis_nf_mestre.cod_empresa = p_cod_empresa

 WHENEVER ERROR CONTINUE
 SELECT count(*)
   INTO l_contador
   FROM wis_nf_item
  WHERE num_aviso_rec = p_dados_tela.num_aviso_rec
 WHENEVER ERROR STOP

  IF l_contador <> 0 THEN
     LET l_wis_nf_mestre.cod_sit = 15
     LET l_wis_nf_mestre.importe_nff = NULL
     LET l_wis_nf_mestre.id_autorizacao = NULL
     LET l_wis_nf_mestre.cod_func_autoriz = NULL
     LET l_wis_nf_mestre.cod_erro = NULL
     LET l_wis_nf_mestre.dat_processamento = NULL

     INSERT INTO wis_nf_mestre VALUES (l_wis_nf_mestre.*)
       IF sqlca.sqlcode = 0 THEN
          CALL log0030_mensagem(" Dados WIS enviados com sucesso !","info")
       END IF
       IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql("INCLUSAO","WIS_NF_MESTRE")
       END IF

  END IF

 END FUNCTION
}
#--------------------------------#
 FUNCTION sup376_exclusao_nota()
#--------------------------------#
 DEFINE p_achou_seq           SMALLINT,
        p_nr_nf               CHAR(7),
        l_cont                SMALLINT,
        l_num_nf              LIKE reten_irrf_pg.num_nf,
        l_num_ar_imp          LIKE aviso_rec_proc_imp.num_aviso_rec,
        l_num_ar_proc         LIKE processo_imp.num_aviso_rec,
        l_ies_situa_import    LIKE nf_sup.ies_situa_import,
        l_ies_efetivou        SMALLINT,
        lr_nf_sup_erro        RECORD LIKE nf_sup_erro.*,
        l_num_oc_oln          LIKE ordem_sup.num_oc,
        l_pre_unit_oc_oln     LIKE ordem_sup.pre_unit_oc,
        l_dat_emis_oln        LIKE ordem_sup.dat_entrega_prev,
        l_qtd_recebida        LIKE ordem_sup.qtd_solic,
        l_fat_conver_unid     LIKE ordem_sup.fat_conver_unid,
        l_qtd_item            LIKE ordem_sup.qtd_solic,
        l_val_liquido_item    LIKE aviso_rec.val_liquido_item,
        l_num_seq             LIKE aviso_rec.num_seq

 DEFINE p_item_dev_terc       RECORD LIKE item_dev_terc.*,
        l_item_ret_terc       RECORD LIKE item_ret_terc.*,
        l_conta               LIKE plano_contas.num_conta,
        l_prog_contagem       LIKE par_sup_pad.par_txt,
        l_ies_volume          LIKE item_ctr_grade.ies_volume,
        lr_ar_x_nf_pend       RECORD LIKE ar_x_nf_pend.*,
        l_nf_remessa          LIKE sup_retn_item_terc.nf_remessa,
        l_seq_nf_remessa      LIKE sup_retn_item_terc.seq_nf_remessa,
        l_seq_tabulacao       LIKE sup_retn_item_terc.seq_tabulacao,
        l_qtd_devolvida       LIKE sup_retn_item_terc.qtd_devolvida,
        l_cod_fornecedor      LIKE nf_sup.cod_fornecedor,
        sql_stmt              CHAR(1000),
        l_parametro           LIKE sup_par_ar.parametro,
        l_nf_deposit          CHAR(1),
        l_dat_entrada_nf      DATE,
        l_status              SMALLINT,
        l_cliente_55          SMALLINT,
        l_sup_ar_imp_cana     SMALLINT #809554

  DEFINE lr_transf_pat        RECORD
                              empresa_destino     LIKE fat_transf_pat.empresa_destino,
                              inventario_destino  LIKE fat_transf_pat.inventario_destino,
                              aviso_recebto       LIKE fat_transf_pat.aviso_recebto,
                              seq_aviso_recebto   LIKE fat_transf_pat.seq_aviso_recebto,
                              dat_entrada         LIKE fat_transf_pat.dat_entrada,
                              trans_nota_fiscal   LIKE fat_nf_transf_pat.trans_nota_fiscal,
                              num_parcela         LIKE patrparc.num_parcela,
                              inventario_origem   LIKE fat_transf_pat.inventario_origem,
                              num_parcela_orig    LIKE fat_transf_pat.parc_inv_origem,
                              seq_item_nf         LIKE fat_transf_pat.seq_item_nf
                              END RECORD

 LET l_ies_efetivou = FALSE

  SELECT *
   INTO p_nf_sup.*
   FROM nf_sup
  WHERE nf_sup.cod_empresa   = p_cod_empresa
    AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec

 CALL log2250_busca_parametro(p_cod_empresa,"efet_valid_prim_nf_deposit")
      RETURNING l_nf_deposit, l_status

 IF NOT l_status THEN
    LET l_nf_deposit = 'N'
 END IF

 IF sup3762_verifica_item_dev_terc(m_contr_terc_no_dep) THEN
    #Chamada da mensagem retirada pois a funcao do sup3762 ja apresenta mensagem (OS522401)
    #CALL log0030_mensagem("Nota tipo A/B relacionada com nota tipo A/B(SUP2300), excluir relacionamento","exclamation")
    RETURN
 END IF

 IF sup376_verifica_classificacao_sucata() = TRUE THEN
    CALL log0030_mensagem(" Existe classificacao de sucata/materia-prima para este AR. ","exclamation")
    RETURN
 END IF


 LET m_nfr_import = FALSE
 IF sup3760_nfr_consignatario("EXCLUSAO") THEN
   LET m_nfr_import = TRUE
 END IF

 IF p_dados_tela.cod_operacao[1] = "7" OR m_nfr_import THEN
    IF sup3760_possui_rateio_compl() THEN
       ERROR " Nota fiscal possui rateio de despesa complementar de importacao (SUP5010) "
       RETURN
    END IF

    LET m_num_processo = sup3760_busca_numero_processo_importacao()
    IF m_num_processo IS NULL THEN
       LET m_num_processo = m_inicio_provisao
    END IF

    IF (m_ies_utiliz_provisao = "N" OR
       (m_ies_utiliz_provisao = "S" AND
        m_num_processo < m_inicio_provisao) OR
       (m_ies_utiliz_provisao = "S" AND m_utiliz_nfm_import = "S" AND
        m_num_processo >= m_inicio_provisao)) THEN
       LET l_num_ar_proc = sup3760_leitura_processo_imp(m_num_processo,"AR")
       IF l_num_ar_proc IS NOT NULL THEN
          INITIALIZE l_ies_situa_import TO NULL
          SELECT ies_situa_import
            INTO l_ies_situa_import
            FROM nf_sup
           WHERE cod_empresa   = p_cod_empresa
             AND num_aviso_rec = l_num_ar_proc
          WHENEVER ERROR STOP
          IF l_ies_situa_import IS NOT NULL AND
             l_ies_situa_import = "E" THEN
             IF NOT sup3760_verifica_nfp_incl_apos_encerr(p_cod_empresa,
                                                          p_dados_tela.num_aviso_rec) THEN
                ERROR " Processo de importacao ja encerrado "
                RETURN
             END IF
          END IF
       END IF
    END IF
 END IF

 DECLARE cq_num_seqs CURSOR FOR
 SELECT num_seq, num_pedido, num_oc
  FROM aviso_rec
 WHERE cod_empresa   = p_cod_empresa
   AND num_aviso_rec = p_dados_tela.num_aviso_rec
   AND num_pedido    > 0
 ORDER BY num_oc

 LET m_count_seq = 1
 INITIALIZE ma_inf_ar TO NULL
 FOREACH cq_num_seqs INTO ma_inf_ar[m_count_seq].num_seq,
                          ma_inf_ar[m_count_seq].num_pedido,
                          ma_inf_ar[m_count_seq].num_oc
    LET m_count_seq = m_count_seq + 1
    IF m_count_seq > 999 THEN
       CALL log0030_mensagem("Estouro de array","stop")
       EXIT FOREACH
    END IF
 END FOREACH
 IF m_count_seq > 999 THEN
    LET p_houve_erro = TRUE
    RETURN
 END IF
 LET m_count_seq = m_count_seq - 1

 IF p_dados_tela.ies_nf_aguard_nfe = "4" THEN
    IF sup376_nota_faturamento() THEN
       ERROR " Excluir nota de faturamento de consignacao "
       RETURN
    END IF
 END IF

 IF p_dados_tela.ies_especie_nf = "NFM" THEN
    WHENEVER ERROR CONTINUE
    LET l_cont = 0
    SELECT COUNT(*)
      INTO l_cont
      FROM ar_x_nf_pend
     WHERE cod_empresa    = p_cod_empresa
       AND num_nf         = p_dados_tela.num_nf
       AND ser_nf         = p_dados_tela.ser_nf
       AND ssr_nf         = p_dados_tela.ssr_nf
       AND cod_fornecedor = p_dados_tela.cod_fornecedor
    WHENEVER ERROR STOP
    IF l_cont > 0 THEN
       ERROR " Existe NFP relacionada com esta NFM "
       RETURN
    END IF
 END IF

 IF log004_confirm(21,44) THEN
    LET p_houve_erro = FALSE
    IF sup3762_verifica_impostos_ja_pagos() THEN
       LET p_houve_erro = TRUE
       RETURN
    END IF

    WHENEVER ERROR CONTINUE
    CALL log085_transacao("BEGIN")
    WHENEVER ERROR STOP

    LET p_houve_erro = FALSE

    {IF p_dados_tela.ies_nf_aguard_nfe = "5" THEN
       WHENEVER ERROR CONTINUE
       UPDATE est_trans_de_terc
          SET ies_situacao   = "3",
              num_aviso_rec  = NULL,
              num_seq        = NULL
        WHERE cod_empresa    = p_cod_empresa
          AND num_aviso_rec  = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF SQLCA.SQLCODE <> 0 THEN
          LET p_houve_erro = TRUE
          CALL log003_err_sql("UPDATE","EST_TRANS_DE_TERC")
          WHENEVER ERROR CONTINUE
          CALL log085_transacao("ROLLBACK")
          WHENEVER ERROR STOP
          RETURN
       END IF
    END IF}

   # INICIO OS 532222
   IF find4GLFunction('supy75_verifica_cliente_859') THEN
      IF supy75_verifica_cliente_859() THEN
         IF find4GLFunction('supy75_atualiza_wbt_nota_fiscal') THEN
            CALL supy75_atualiza_wbt_nota_fiscal(4,2,"",p_cod_empresa,p_dados_tela.num_aviso_rec)
         END IF
      END IF
   END IF
   # FIM OS 532222

   IF m_cred_st_fat = "S"
   OR m_cred_st_fat = "E" THEN
      IF NOT sup1466_valida_saldo_com_revd_st(p_cod_empresa,p_dados_tela.num_aviso_rec,0,"EXCLUSAO") THEN
         LET p_houve_erro = TRUE
         WHENEVER ERROR CONTINUE
         CALL log085_transacao("ROLLBACK")
         WHENEVER ERROR STOP
         RETURN
      END IF
   END IF

   IF m_ies_relac_nf_benef = "S" THEN
      IF NOT sup1277_exclusao_ar(p_cod_empresa, p_dados_tela.num_aviso_rec) THEN
         LET p_houve_erro = TRUE
         WHENEVER ERROR CONTINUE
         CALL log085_transacao("ROLLBACK")
         WHENEVER ERROR STOP
         RETURN
      END IF
   END IF

   IF p_dados_tela.ies_nf_aguard_nfe <> "4" OR
      ( p_dados_tela.ies_nf_aguard_nfe = "4" AND
        sup376_nota_faturamento() = FALSE ) THEN

    DECLARE cq_excnot CURSOR WITH HOLD FOR
     SELECT *
       FROM aviso_rec
      WHERE cod_empresa    = p_cod_empresa
        AND num_aviso_rec  = p_dados_tela.num_aviso_rec

    FOREACH cq_excnot INTO p_aviso_rec.*


## OS 439703 (deixamos em comentário IF abaixo pois, o sup6410 chamado pelo sup0530
## já efetua atualização deste registro
{      IF p_dados_tela.ies_nf_aguard_nfe = "5" THEN
          DECLARE cq_dev_terc CURSOR FOR
          SELECT *
            FROM item_dev_terc
           WHERE item_dev_terc.cod_empresa      = p_cod_empresa
             AND item_dev_terc.num_nf_retorno   = p_nf_sup.num_nf
             AND item_dev_terc.num_sequencia_nf = p_aviso_rec.num_seq

          FOREACH cq_dev_terc INTO p_item_dev_terc.*
             WHENEVER ERROR CONTINUE
             UPDATE item_de_terc
                SET qtd_tot_devolvida = qtd_tot_devolvida - p_item_dev_terc.qtd_devolvida
              WHERE item_de_terc.cod_empresa      = p_item_dev_terc.cod_empresa
                AND item_de_terc.num_nf           = p_item_dev_terc.num_nf
                AND item_de_terc.ser_nf           = p_item_dev_terc.ser_nf
                AND item_de_terc.ssr_nf           = p_item_dev_terc.ssr_nf
                AND item_de_terc.ies_especie_nf   = p_item_dev_terc.ies_especie_nf
                AND item_de_terc.cod_fornecedor   = p_item_dev_terc.cod_fornecedor
                AND item_de_terc.num_sequencia    = p_item_dev_terc.num_sequencia
             WHENEVER ERROR STOP
             IF SQLCA.SQLCODE <> 0 THEN
                LET p_houve_erro = TRUE
                CALL log003_err_sql("UDPATE","ITEM_DE_TERC")
                EXIT FOREACH
             END IF

             WHENEVER ERROR CONTINUE
             DELETE FROM item_dev_terc
              WHERE item_dev_terc.cod_empresa      = p_item_dev_terc.cod_empresa
                AND item_dev_terc.num_nf           = p_item_dev_terc.num_nf
                AND item_dev_terc.ser_nf           = p_item_dev_terc.ser_nf
                AND item_dev_terc.ssr_nf           = p_item_dev_terc.ssr_nf
                AND item_dev_terc.ies_especie_nf   = p_item_dev_terc.ies_especie_nf
                AND item_dev_terc.cod_fornecedor   = p_item_dev_terc.cod_fornecedor
                AND item_dev_terc.num_sequencia    = p_item_dev_terc.num_sequencia
             WHENEVER ERROR STOP
             IF SQLCA.SQLCODE <> 0 THEN
                LET p_houve_erro = TRUE
                CALL log003_err_sql("DELETE","ITEM_DEV_TERC")
                EXIT FOREACH
             END IF
          END FOREACH

          IF p_houve_erro THEN
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             RETURN
          END IF
       END IF
}

       ## OS 407088
       CALL sup3762_busca_fornecedor_triangulacao(p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq) RETURNING l_cod_fornecedor

       IF p_dados_tela.ies_nf_aguard_nfe = "4" THEN

          WHENEVER ERROR CONTINUE
          DELETE FROM sup_item_terc_end
          WHERE empresa           = p_cod_empresa
            AND nota_fiscal       = p_nf_sup.num_nf
            AND serie_nota_fiscal = p_nf_sup.ser_nf
            AND subserie_nf       = p_nf_sup.ssr_nf
            AND espc_nota_fiscal  = p_nf_sup.ies_especie_nf
            AND fornecedor        = l_cod_fornecedor
            AND seq_aviso_recebto = p_aviso_rec.num_seq
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
            CALL log003_err_sql("EXCLUSAO","SUP_ITEM_TERC_END")
            LET p_houve_erro = TRUE
            WHENEVER ERROR CONTINUE
            CALL log085_transacao("ROLLBACK")
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO NOTA")
            END IF
            RETURN
          END IF

          WHENEVER ERROR CONTINUE
          DELETE FROM item_de_terc
           WHERE cod_empresa  = p_cod_empresa
             AND num_nf         = p_nf_sup.num_nf
             AND ser_nf         = p_nf_sup.ser_nf
             AND ssr_nf         = p_nf_sup.ssr_nf
             AND ies_especie_nf = p_nf_sup.ies_especie_nf
             AND cod_fornecedor = l_cod_fornecedor
             AND num_sequencia  = p_aviso_rec.num_seq
          WHENEVER ERROR STOP
          IF SQLCA.SQLCODE <> 0 THEN
             LET p_houve_erro = TRUE
             CALL log003_err_sql("DELETE","ITEM_DE_TERC")
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             RETURN
          END IF
       END IF

       IF sup376_verifica_cond_delecao("EX_NOTA") = TRUE THEN
          IF p_nf_sup.num_conhec IS NOT NULL AND p_nf_sup.num_conhec > 0 THEN
             CALL log0030_mensagem("Existe frete relacionado com a Nota. Excluir relacionamento.","exclamation")
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             RETURN
          ELSE
             IF sup3760_valida_frete_cif_nf() = TRUE THEN
                CALL log0030_mensagem("Existe frete relacionado com a Nota. Excluir relacionamento.","exclamation")
                WHENEVER ERROR CONTINUE
                CALL log085_transacao("ROLLBACK")
                WHENEVER ERROR STOP
                RETURN
             END IF
             IF p_dados_tela.ies_nf_aguard_nfe <> "7" THEN
                IF p_dados_tela.ies_nf_aguard_nfe <> "5" THEN
                   IF sup376_possui_avf_insp_ar() = FALSE THEN
                      IF p_aviso_rec.ies_liberacao_insp = "S" AND
                         p_aviso_rec.ies_situa_ar = "E" THEN

                         ### OS237529 ###
                         INITIALIZE l_prog_contagem TO NULL
                         SELECT par_txt
                           INTO l_prog_contagem
                           FROM par_sup_pad
                          WHERE par_sup_pad.cod_empresa   = p_cod_empresa
                            AND par_sup_pad.cod_parametro = "prog_contagem"
                         IF sqlca.sqlcode <> 0 OR
                            l_prog_contagem IS NULL THEN
                            LET l_prog_contagem = " "
                         END IF

                         IF l_prog_contagem = "sup0799" THEN
                            WHENEVER ERROR CONTINUE
                            CALL log085_transacao("ROLLBACK")
                            WHENEVER ERROR STOP
                            CALL log0030_mensagem(" Exclua primeiramente resultado de contagem - SUP0799 ","exclamation")
                            RETURN
                         END IF

                         ERROR " Aguarde ... Excluindo Inspecao ... "
                         CALL log120_procura_caminho("sup0570") RETURNING comando3
                         LET comando3 = comando3 CLIPPED, " ",  p_cod_empresa, " ",
                                                          p_aviso_rec.num_aviso_rec,  " ",
                                                          p_aviso_rec.num_seq, " ",
                                                          "EXCLUSAO"," ",
                                                          "SUP3760"
                         RUN comando3 RETURNING p_cancel

                         LET p_ies_situa_ar = NULL
                         CALL sup376_busca_aviso_rec(p_cod_empresa, p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq)
                         LET p_ies_situa_ar = p_aviso_rec.ies_situa_ar

                         IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                                      p_cod_empresa,
                                                      p_aviso_rec.num_aviso_rec) = FALSE AND
                            sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                                                    p_cod_empresa,
                                                    p_aviso_rec.num_aviso_rec) = FALSE THEN
                            IF p_aviso_rec.ies_item_estoq = "S" THEN
                               CALL sup0063_verifica_controles(1, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles
                            ELSE
                               CALL sup0063_verifica_controles(11, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles
                            END IF
                         END IF

                         IF p_ies_custo_grade = "S" AND
                            m_controles <> " "     THEN
                            ## Quando a empresa utiliza custo por grade, a contagem
                            ## eh excluida ja quando faz a exclusao da inspecao.
                            IF p_ies_situa_ar <> "C" THEN
                               WHENEVER ERROR CONTINUE
                               CALL log085_transacao("ROLLBACK")
                               WHENEVER ERROR STOP
                               CALL log0030_mensagem(" Problemas na exclusao da inspecao. ","exclamation")
                               RETURN
                            END IF
                         ELSE
                            IF p_ies_situa_ar <> "I" THEN
                               WHENEVER ERROR CONTINUE
                               CALL log085_transacao("ROLLBACK")
                               WHENEVER ERROR STOP
                               CALL log0030_mensagem(" Problemas na exclusao da inspecao. ","exclamation")
                               RETURN
                            END IF
                         END IF
                         ERROR " Exclusao de inspecao realizada com sucesso. "
                      END IF
                   ELSE
                      IF p_aviso_rec.ies_item_estoq = "S" THEN
                         IF avf1003_exclusao_qualidade(p_aviso_rec.num_aviso_rec,
                                                       p_aviso_rec.num_seq) = FALSE THEN
                            WHENEVER ERROR CONTINUE
                            CALL log085_transacao("ROLLBACK")
                            WHENEVER ERROR STOP
                            CALL log0030_mensagem(" Problemas na exclusao da inspecao (AVF). ","exclamation")
                            RETURN
                         ELSE
                            #efetiva transacao para não bloquear
                            #exclusão de inspeção no SUP0570
                            WHENEVER ERROR CONTINUE
                                CALL log085_transacao("COMMIT")
                            WHENEVER ERROR STOP
                            IF sqlca.sqlcode <> 0 THEN
                               CALL log003_err_sql("EFETIVACAO","NF_SUP")
                               CALL log085_transacao("ROLLBACK") #OS596059
                               RETURN
                            END IF

                            WHENEVER ERROR CONTINUE
                            CALL log085_transacao("BEGIN")
                            WHENEVER ERROR STOP
                         END IF
                      ELSE
                         #efetiva transacao para não bloquear
                         #exclusão de inspeção no SUP0570
                         WHENEVER ERROR CONTINUE
                             CALL log085_transacao("COMMIT")
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            CALL log003_err_sql("EFETIVACAO","NF_SUP")
                            CALL log085_transacao("ROLLBACK") #OS596059
                            RETURN
                         END IF

                         WHENEVER ERROR CONTINUE
                         CALL log085_transacao("BEGIN")
                         WHENEVER ERROR STOP
                      END IF
                   END IF
                END IF

                IF p_aviso_rec.ies_liberacao_cont = "S" THEN
                    ERROR " Aguarde ... Excluindo contagem ... "

                    CALL sup3760_atualiza_nota(p_cod_empresa, p_dados_tela.num_nf, p_dados_tela.ser_nf,
                                               p_dados_tela.ssr_nf, p_dados_tela.cod_fornecedor,
                                               p_dados_tela.num_aviso_rec, p_dados_tela.cnd_pgto_nf)

                    CALL log120_procura_caminho("sup0530") RETURNING comando3
                    LET comando3 = comando3 CLIPPED, " ", p_cod_empresa,
                                                     " ", p_aviso_rec.num_aviso_rec,
                                                     " ", p_aviso_rec.num_seq,
                                                     " ", 3760,
                                                     " ", "S",
                                                     " ", "EXCLUSAO",
                                                     " ", 0,
                                                     " ", "S",
                                                     " ", "S"
                    RUN comando3 RETURNING p_cancel
                    LET p_ies_situa_ar = NULL
                    CALL sup376_busca_aviso_rec(p_cod_empresa, p_aviso_rec.num_aviso_rec, p_aviso_rec.num_seq)
                    LET p_ies_situa_ar = p_aviso_rec.ies_situa_ar
                    IF p_ies_situa_ar <> "C" THEN
                       WHENEVER ERROR CONTINUE
                       CALL log085_transacao("ROLLBACK")
                       WHENEVER ERROR STOP
                       CALL log0030_mensagem(" Problemas na exclusao da contagem. ","exclamation")
                       RETURN
                    END IF
                    ERROR " Exclusao de contagem realizada com sucesso. "
                END IF
             END IF
          END IF
        END IF
        WHENEVER ERROR CONTINUE
        LET l_cont = 0
        SELECT count(*)
          INTO l_cont
          FROM deb_fornec
         WHERE cod_empresa   = p_cod_empresa
           AND num_aviso_rec = p_aviso_rec.num_aviso_rec
           AND num_seq       = p_aviso_rec.num_seq
        WHENEVER ERROR STOP
        IF l_cont = 0 THEN
        ELSE CALL log0030_mensagem(" Existe deb_fornec - excluir registro no sup5960","exclamation")
             SLEEP 2
             LET p_houve_erro = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             RETURN
        END IF

        WHENEVER ERROR CONTINUE
        LET l_cont = 0
        SELECT count(*)
          INTO l_cont
          FROM dev_fornec
         WHERE cod_empresa   = p_cod_empresa
           AND num_aviso_rec = p_aviso_rec.num_aviso_rec
           AND num_seq       = p_aviso_rec.num_seq
        WHENEVER ERROR STOP
        IF l_cont = 0 THEN
        ELSE CALL log0030_mensagem(" Existe devolução a fornecedor - excluir registro no sup0460","exclamation")
             SLEEP 2
             LET p_houve_erro = TRUE
             WHENEVER ERROR CONTINUE
             CALL log085_transacao("ROLLBACK")
             WHENEVER ERROR STOP
             RETURN
        END IF
    END FOREACH
   END IF

   DECLARE cq_excpatr CURSOR WITH HOLD FOR
     SELECT *
       FROM aviso_rec
      WHERE cod_empresa    = p_cod_empresa
        AND num_aviso_rec  = p_aviso_rec.num_aviso_rec

   FOREACH cq_excpatr INTO p_aviso_rec.*
      ### OS 154880 ###
      IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql("LEITURA","AVISO_REC")
         LET p_houve_erro = TRUE
         EXIT FOREACH
      END IF

      IF NOT sup3762_verifica_devol_nf_consig(p_nf_sup.ies_especie_nf,
                                              p_nf_sup.ies_nf_aguard_nfe,
                                              p_nf_sup.cod_empresa,
                                              p_nf_sup.num_nf,
                                              p_nf_sup.cod_fornecedor,
                                              p_aviso_rec.cod_item) THEN #-- OS 495219

         RETURN
      END IF

      IF p_ies_obt_inf_com = "S" AND
      sup0812_verifica_nota_transferencia(p_cod_empresa,
                                         p_dados_tela.num_aviso_rec,
                                         p_dados_tela.num_nf,
                                         p_dados_tela.ser_nf,
                                         p_dados_tela.ssr_nf,
                                         p_dados_tela.cod_fornecedor,
                                         p_dados_tela.cod_operacao,
                                         p_dados_tela.cod_fiscal_compl) THEN
         IF g_ies_tip_controle = "J" OR
            g_ies_tip_controle = "I" THEN  #eduardo o.s.290535 18/11/03

            INITIALIZE sql_stmt TO NULL

            LET l_cliente_55 = FALSE
            IF find4GLFunction("supy62_empresa_55") THEN
               LET l_cliente_55 = supy62_empresa_55()
            END IF

            IF l_cliente_55 = TRUE  THEN
               IF m_ies_fat_unico THEN
                  LET sql_stmt = "SELECT inventario_destino ",
                                   "FROM fat_nf_transf_pat ",
                                  "WHERE empresa_destino    = """,p_cod_empresa,""" ",
                                    "AND aviso_recebto      = ",p_aviso_rec.num_aviso_rec," ",
                                    "AND seq_item_ar        = ",p_aviso_rec.num_seq
               ELSE
                  LET sql_stmt = "SELECT inventario_destino ",
                                   "FROM fat_transf_pat ",
                                  "WHERE empresa_destino    = """,p_cod_empresa,""" ",
                                    "AND aviso_recebto      = ",p_aviso_rec.num_aviso_rec," ",
                                    "AND seq_aviso_recebto  = ",p_aviso_rec.num_seq
               END IF


               WHENEVER ERROR CONTINUE
               PREPARE var_fat_transf1 FROM sql_stmt
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql("PREPARE SQL","VAR_FAT_TRANSF1")
                  LET p_houve_erro = TRUE
                  WHENEVER ERROR CONTINUE
                  CALL log085_transacao("ROLLBACK")
                  WHENEVER ERROR STOP
                  RETURN
               END IF

               WHENEVER ERROR CONTINUE
               DECLARE cq_fat_transf CURSOR FOR var_fat_transf1
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql("DECLARE CURSOR","CQ_FAT_TRANSF")
                  LET p_houve_erro = TRUE
                  WHENEVER ERROR CONTINUE
                  CALL log085_transacao("ROLLBACK")
                  WHENEVER ERROR STOP
                  RETURN
               END IF

               WHENEVER ERROR CONTINUE
               OPEN cq_fat_transf
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql("OPEN CURSOR","CQ_FAT_TRANSF")
                  LET p_houve_erro = TRUE
                  WHENEVER ERROR CONTINUE
                  CALL log085_transacao("ROLLBACK")
                  WHENEVER ERROR STOP
                  RETURN
               END IF

               WHENEVER ERROR CONTINUE
               FETCH cq_fat_transf INTO lr_transf_pat.inventario_destino
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  IF g_ies_tip_controle = "I" THEN
                     WHENEVER ERROR CONTINUE
                     CLOSE cq_fat_transf
                     FREE cq_fat_transf
                     WHENEVER ERROR STOP
                     EXIT FOREACH
                  ELSE
                     LET p_houve_erro = TRUE
                     ERROR " Nao encontrado relacionadomento NF origem/dest SUP1421"
                     SLEEP 2
                     WHENEVER ERROR CONTINUE
                     CLOSE cq_fat_transf
                     FREE cq_fat_transf
                     WHENEVER ERROR STOP
                     WHENEVER ERROR CONTINUE
                     CALL log085_transacao("ROLLBACK")
                     WHENEVER ERROR STOP
                     RETURN
                  END IF
               END IF
               WHENEVER ERROR CONTINUE
               CLOSE cq_fat_transf
               FREE cq_fat_transf
               WHENEVER ERROR STOP
            END IF

            IF m_ies_fat_unico THEN
               LET sql_stmt =
                 " SELECT fat_nf_transf_pat.empresa_destino, ",
                        " fat_nf_transf_pat.inventario_destino, ",
                        " fat_nf_transf_pat.aviso_recebto, ",
                        " fat_nf_transf_pat.seq_item_ar, ",
                        " fat_nf_transf_pat.dat_ent_ar, ",
                        " fat_nf_transf_pat.trans_nota_fiscal, ",
                        " fat_nf_transf_pat.inventario_origem, ",
                        " fat_nf_transf_pat.parc_inv_origem, ",
                        " fat_nf_transf_pat.seq_item_nf ",
                   " FROM fat_nf_mestre, fat_nf_transf_pat ",
                  " WHERE fat_nf_mestre.empresa               = """, p_cod_emp_transf, """ ",
                    " AND fat_nf_mestre.nota_fiscal           = ", p_dados_tela.num_nf,
                    " AND fat_nf_mestre.serie_nota_fiscal     = """,p_dados_tela.ser_nf,""" ",
                    " AND fat_nf_mestre.subserie_nf           = ",p_dados_tela.ssr_nf," ",
                    " AND fat_nf_mestre.tip_nota_fiscal       = ""FATPRDSV"" ",
                    " AND fat_nf_mestre.sit_nota_fiscal       = ""N"" ",
                    " AND fat_nf_transf_pat.empresa           = fat_nf_mestre.empresa ",
                    " AND fat_nf_transf_pat.trans_nota_fiscal = fat_nf_mestre.trans_nota_fiscal ",
                    " AND fat_nf_transf_pat.empresa_destino   = """, p_cod_empresa, """ ",
                    " AND fat_nf_transf_pat.aviso_recebto     = ",p_aviso_rec.num_aviso_rec," ",
                    " AND fat_nf_transf_pat.seq_item_ar       = ", p_aviso_rec.num_seq
                    #não está dentro de loop para considerar o código do item e seq. do AR
                    #" AND fat_nf_transf_pat.inventario_origem = """, p_aviso_rec.cod_item, """ ",
                    #" AND fat_nf_transf_pat.seq_item_nf       = ", p_aviso_rec.num_seq
            ELSE
               LET sql_stmt = " SELECT empresa_destino, ",
                                     " inventario_destino, ",
                                     " aviso_recebto, ",
                                     " seq_aviso_recebto, ",
                                     " dat_entrada, ",
                                     " 0, ",
                                     " inventario_origem, ",
                                     " parc_inv_origem, ",
                                     " seq_item_nf ",
                                " FROM fat_transf_pat ",
                               " WHERE empresa_destino    = """, p_cod_empresa, """ ",
                                 #" AND inventario_origem  = """, p_aviso_rec.cod_item, """ ",
                                 " AND nota_fiscal        = ", p_dados_tela.num_nf,
                                 " AND aviso_recebto      = ",p_aviso_rec.num_aviso_rec," ",
                                 " AND seq_aviso_recebto  = ", p_aviso_rec.num_seq
                                 #" AND seq_item_nf        = ", p_aviso_rec.num_seq
            END IF

            WHENEVER ERROR CONTINUE
            PREPARE var_fat_transf FROM sql_stmt
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql("PREPARE SQL","VAR_FAT_TRANSF")
               LET p_houve_erro = TRUE
            END IF

            WHENEVER ERROR CONTINUE
            DECLARE cl_fat_transf1 CURSOR FOR var_fat_transf
            WHENEVER ERROR STOP
            IF sqlca.sqlcode <> 0 THEN
               CALL log003_err_sql("DECLARE CURSOR","CL_FAT_TRANSF1")
               LET p_houve_erro = TRUE
            END IF

            WHENEVER ERROR CONTINUE
            FOREACH cl_fat_transf1 INTO lr_transf_pat.empresa_destino,
                                        lr_transf_pat.inventario_destino,
                                        lr_transf_pat.aviso_recebto,
                                        lr_transf_pat.seq_aviso_recebto,
                                        lr_transf_pat.dat_entrada,
                                        lr_transf_pat.trans_nota_fiscal,
                                        lr_transf_pat.inventario_origem,
                                        lr_transf_pat.num_parcela_orig,
                                        lr_transf_pat.seq_item_nf
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql("FOREACH","CL_FAT_TRANSF1")
                  LET p_houve_erro = TRUE
                  EXIT FOREACH
               END IF

               IF m_ies_fat_unico THEN
                  WHENEVER ERROR CONTINUE
                  UPDATE fat_nf_transf_pat
                     SET empresa_destino    = NULL,
                         inventario_destino = NULL,
                         aviso_recebto      = NULL,
                         seq_item_ar        = NULL,
                         dat_ent_ar         = NULL
                   WHERE empresa_origem     = p_cod_emp_transf
                     AND inventario_origem  = lr_transf_pat.inventario_origem
                     AND trans_nota_fiscal  = lr_transf_pat.trans_nota_fiscal
                     AND seq_item_nf        = lr_transf_pat.seq_item_nf
                  WHENEVER ERROR STOP
                  IF sqlca.sqlcode <> 0 THEN
                     LET p_houve_erro = TRUE
                     CALL log003_err_sql("ATUALIZACAO","FAT_NF_TRANSF_PAT")
                     EXIT FOREACH
                  END IF
               ELSE
                  WHENEVER ERROR CONTINUE
                  UPDATE fat_transf_pat
                     SET empresa_destino    = NULL,
                         inventario_destino = NULL,
                         aviso_recebto      = NULL,
                         seq_aviso_recebto  = NULL,
                         dat_entrada        = NULL
                   WHERE empresa_origem     = p_cod_emp_transf
                     AND inventario_origem  = lr_transf_pat.inventario_origem
                     AND nota_fiscal        = p_dados_tela.num_nf
                     AND seq_item_nf        = lr_transf_pat.seq_item_nf
                  WHENEVER ERROR STOP
                  IF sqlca.sqlcode <> 0 THEN
                     LET p_houve_erro = TRUE
                     CALL log003_err_sql("ATUALIZACAO","FAT_TRANSF_PAT")
                     EXIT FOREACH
                  END IF
               END IF

               IF NOT p_houve_erro THEN
                  WHENEVER ERROR CONTINUE
                  DECLARE cq_parcelas_inv1 CURSOR FOR
                  SELECT parametro_val
                    FROM sup_par_ar
                   WHERE empresa           = p_cod_empresa
                     AND aviso_recebto     = p_dados_tela.num_aviso_rec
                     AND seq_aviso_recebto = 0
                     AND trim(parametro[1,15]) = trim(lr_transf_pat.inventario_destino)
                  WHENEVER ERROR STOP
                  IF sqlca.sqlcode <> 0 THEN
                     CALL log003_err_sql("DECLARE CURSOR","CQ_PARCELAS_INV1")
                     LET p_houve_erro = TRUE
                     EXIT FOREACH
                  END IF

                  LET lr_transf_pat.num_parcela = -1

                  WHENEVER ERROR CONTINUE
                  FOREACH cq_parcelas_inv1 INTO lr_transf_pat.num_parcela
                     IF sqlca.sqlcode <> 0 THEN
                        CALL log003_err_sql("FOREACH CURSOR","CQ_PARCELAS_INV1")
                        LET p_houve_erro = TRUE
                        EXIT FOREACH
                     END IF

                     WHENEVER ERROR CONTINUE
                     DELETE FROM patrval
                      WHERE cod_empresa       = p_cod_empresa
                        AND cod_empresa_estab = p_cod_empresa
                        AND num_invent        = lr_transf_pat.inventario_destino
                        AND num_parcela       = lr_transf_pat.num_parcela
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        LET p_houve_erro = TRUE
                        CALL log003_err_sql("EXCLUSAO","PATRVAL")
                        EXIT FOREACH
                     END IF
                     WHENEVER ERROR CONTINUE
                     DELETE FROM patrparc
                      WHERE cod_empresa       = p_cod_empresa
                        AND cod_empresa_estab = p_cod_empresa
                        AND num_invent        = lr_transf_pat.inventario_destino
                        AND num_parcela       = lr_transf_pat.num_parcela
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        LET p_houve_erro = TRUE
                        CALL log003_err_sql("EXCLUSAO","PATRPARC")
                        EXIT FOREACH
                     END IF
                     WHENEVER ERROR CONTINUE
                     DELETE FROM patrparc_desc
                      WHERE cod_empresa       = p_cod_empresa
                        AND cod_empresa_estab = p_cod_empresa
                        AND num_invent        = lr_transf_pat.inventario_destino
                        AND num_parcela       = lr_transf_pat.num_parcela
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        LET p_houve_erro = TRUE
                        CALL log003_err_sql("EXCLUSAO","PATRPARC")
                        EXIT FOREACH
                     END IF
                     IF log0150_verifica_se_tabela_existe("pat_dad_compl_ent") THEN
                        WHENEVER ERROR CONTINUE
                        DELETE FROM pat_dad_compl_ent ##OS 578053
                         WHERE empresa            = p_cod_empresa
                           AND emp_estab          = p_cod_empresa
                           AND inventario         = lr_transf_pat.inventario_destino
                           AND parcela_inventario = lr_transf_pat.num_parcela
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode <> 0 THEN
                           CALL log003_err_sql("DELETE","PAT_DAD_COMPL_ENT")
                           LET p_houve_erro = TRUE
                           EXIT FOREACH
                        END IF
                     END IF
                     IF log0150_verifica_se_tabela_existe("hist_alteracao") THEN
                        WHENEVER ERROR CONTINUE
                        DELETE FROM hist_alteracao ##OS 570482
                         WHERE cod_empresa        = p_cod_empresa
                           AND cod_empresa_estab  = p_cod_empresa
                           AND num_invent         = lr_transf_pat.inventario_destino
                           AND num_parcela        = lr_transf_pat.num_parcela
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode <> 0 THEN
                           CALL log003_err_sql("DELETE","HIST_ALTERACAO")
                           LET p_houve_erro = TRUE
                           EXIT FOREACH
                        END IF

                        WHENEVER ERROR CONTINUE
                        DELETE FROM hist_alteracao ##OS 570482
                         WHERE cod_empresa        = p_cod_empresa
                           AND cod_empresa_estab  = p_cod_empresa
                           AND num_invent         = lr_transf_pat.inventario_origem
                           AND num_parcela        = lr_transf_pat.num_parcela_orig
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode <> 0 THEN
                           CALL log003_err_sql("(3)DELETE","HIST_ALTERACAO")
                           LET p_houve_erro = TRUE
                           EXIT FOREACH
                        END IF
                     END IF
                  END FOREACH
                  FREE cq_parcelas_inv1
                  WHENEVER ERROR STOP

                  IF p_houve_erro THEN
                     EXIT FOREACH
                  END IF

                  IF lr_transf_pat.num_parcela = -1 THEN
                     WHENEVER ERROR CONTINUE
                     DELETE FROM patrval
                     WHERE cod_empresa       = p_cod_empresa
                       AND cod_empresa_estab = p_cod_empresa
                       AND num_invent        = lr_transf_pat.inventario_destino
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        LET p_houve_erro = TRUE
                        CALL log003_err_sql("EXCLUSAO","PATRVAL")
                        EXIT FOREACH
                     END IF

                     WHENEVER ERROR CONTINUE
                     DELETE FROM patrparc
                      WHERE cod_empresa       = p_cod_empresa
                        AND cod_empresa_estab = p_cod_empresa
                        AND num_invent        = lr_transf_pat.inventario_destino
                     WHENEVER ERROR STOP
                     IF sqlca.sqlcode <> 0 THEN
                        LET p_houve_erro = TRUE
                        CALL log003_err_sql("EXCLUSAO","PATRPARC")
                        EXIT FOREACH
                     END IF
                     IF log0150_verifica_se_tabela_existe("pat_dad_compl_ent") THEN
                        WHENEVER ERROR CONTINUE
                        DELETE FROM pat_dad_compl_ent ##OS 578053
                         WHERE empresa            = p_cod_empresa
                           AND emp_estab          = p_cod_empresa
                           AND inventario         = lr_transf_pat.inventario_destino
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode <> 0 THEN
                           CALL log003_err_sql("(2)DELETE","PAT_DAD_COMPL_ENT")
                           LET p_houve_erro = TRUE
                           EXIT FOREACH
                        END IF
                     END IF
                     IF log0150_verifica_se_tabela_existe("hist_alteracao") THEN
                        WHENEVER ERROR CONTINUE
                        DELETE FROM hist_alteracao ##OS 570482
                         WHERE cod_empresa        = p_cod_empresa
                           AND cod_empresa_estab  = p_cod_empresa
                           AND num_invent         = lr_transf_pat.inventario_destino
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode <> 0 THEN
                           CALL log003_err_sql("(2)DELETE","HIST_ALTERACAO")
                           LET p_houve_erro = TRUE
                           EXIT FOREACH
                        END IF
                        WHENEVER ERROR CONTINUE
                        DELETE FROM hist_alteracao ##OS 570482
                         WHERE cod_empresa        = p_cod_empresa
                           AND cod_empresa_estab  = p_cod_empresa
                           AND num_invent         = lr_transf_pat.inventario_origem
                        WHENEVER ERROR STOP
                        IF sqlca.sqlcode <> 0 THEN
                           CALL log003_err_sql("(4)DELETE","HIST_ALTERACAO")
                           LET p_houve_erro = TRUE
                           EXIT FOREACH
                        END IF
                     END IF
                  END IF
               END IF
               WHENEVER ERROR CONTINUE
            END FOREACH
            FREE cl_fat_transf1
            WHENEVER ERROR STOP
         END IF

         INSERT INTO nf_sup_erro ( empresa, num_aviso_rec, num_seq, des_pendencia_item, ies_origem_erro, ies_erro_grave )  VALUES ( p_aviso_rec.cod_empresa,
                                         p_aviso_rec.num_aviso_rec,
                                         p_aviso_rec.num_seq,
                                         " Item da NF de origem pendente de recebimento ",
                                         "1",
                                         "S"
)

      END IF

      WHENEVER ERROR CONTINUE
      ### FIM OS 154880 ###
   END FOREACH

   IF p_houve_erro THEN
      WHENEVER ERROR CONTINUE
      CALL log085_transacao("ROLLBACK")
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO NOTA")
      END IF
   END IF

   DELETE FROM nf_sup_erro
    WHERE nf_sup_erro.empresa = p_cod_empresa
      AND nf_sup_erro.num_aviso_rec = p_aviso_rec.num_aviso_rec

   LET p_nr_nf = p_dados_tela.num_nf

   CALL sup376_deleta_inss_auton(p_nr_nf,p_aviso_rec.num_seq)

   CALL sup3760_transfere_h_est_trans_de_terc()

   IF p_dados_tela.ies_nf_aguard_nfe = "4" THEN
      WHENEVER ERROR CONTINUE
      DELETE FROM est_trans_de_terc
       WHERE cod_empresa    = p_cod_empresa
         AND num_nf         = p_dados_tela.num_nf
         AND ser_nf         = p_dados_tela.ser_nf
         AND ssr_nf         = p_dados_tela.ssr_nf
         AND ies_especie_nf = p_dados_tela.ies_especie_nf
         AND cod_fornecedor = p_dados_tela.cod_fornecedor
         AND ies_situacao   = "3"
      WHENEVER ERROR STOP
      IF SQLCA.SQLCODE <> 0 THEN
         LET p_houve_erro = TRUE
         CALL log003_err_sql("DELETE","EST_TRANS_DE_TERC")
         WHENEVER ERROR CONTINUE
         CALL log085_transacao("ROLLBACK")
         WHENEVER ERROR STOP
         RETURN
      END IF
   END IF

   IF ((p_dados_tela.cod_operacao[1] = "7" AND
      (p_dados_tela.ies_especie_nf = "NFE" OR
       p_dados_tela.ies_especie_nf = "NFP" )) OR m_nfr_import) AND
     ((m_ies_utiliz_provisao = "S" AND
       m_utiliz_nfm_import = "N" AND
       m_num_processo >= m_inicio_provisao) OR
       p_nf_sup.ies_situa_import = "R") THEN
      LET m_num_processo = sup3760_busca_numero_processo_importacao()
      IF m_num_processo IS NULL THEN
         LET m_num_processo = -1
      END IF
      IF m_num_processo <> -1 THEN
         IF m_num_processo >= g_proc_ini_os163407 THEN
            IF NOT imp0101_desfaz_rateio(m_num_processo,p_dados_tela.num_aviso_rec,-1) THEN
               ERROR "Problema ao desfazer o rateio das despesas de importacao"
               SLEEP 2
               LET p_houve_erro = TRUE
               WHENEVER ERROR CONTINUE
               CALL log085_transacao("ROLLBACK")
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO NOTA")
               END IF
               RETURN
            END IF
         ELSE
            IF NOT imp0101_desfaz_rateio_ant(m_num_processo,p_dados_tela.num_aviso_rec,-1) THEN
               ERROR "Problema ao desfazer o rateio das despesas de importacao"
               SLEEP 2
               LET p_houve_erro = TRUE
               WHENEVER ERROR CONTINUE
               CALL log085_transacao("ROLLBACK")
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO NOTA")
               END IF
               RETURN
            END IF
         END IF
      END IF
   END IF

   #FLUXO DE CAIXA
   IF NOT fcl1150_integra_ar_fcx(p_cod_empresa,p_dados_tela.num_aviso_rec,"EX") THEN
      LET p_houve_erro = TRUE
      WHENEVER ERROR CONTINUE
      CALL log085_transacao("ROLLBACK")
      WHENEVER ERROR STOP
      RETURN
   END IF

   WHENEVER ERROR CONTINUE
   DELETE FROM nfe_sup_compl
    WHERE nfe_sup_compl.cod_empresa   = p_cod_empresa
      AND nfe_sup_compl.num_aviso_rec = p_aviso_rec.num_aviso_rec

   DELETE FROM dest_aviso_rec
    WHERE  dest_aviso_rec.cod_empresa = p_cod_empresa
      AND  dest_aviso_rec.num_aviso_rec = p_aviso_rec.num_aviso_rec

   IF p_ies_contab_aen = "4" THEN
      DELETE FROM dest_aviso_rec4
       WHERE  dest_aviso_rec4.cod_empresa = p_cod_empresa
         AND  dest_aviso_rec4.num_aviso_rec = p_aviso_rec.num_aviso_rec
   END IF

   DELETE FROM ar_ped
    WHERE  ar_ped.cod_empresa = p_cod_empresa
      AND  ar_ped.num_aviso_rec = p_aviso_rec.num_aviso_rec
   WHENEVER ERROR STOP

  WHENEVER ERROR CONTINUE
  DELETE FROM ar_nf_item
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP

  WHENEVER ERROR CONTINUE
  DELETE FROM ar_diverg
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_aviso_rec.num_aviso_rec

  DELETE FROM ar_diverg_provid
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_aviso_rec.num_aviso_rec

  DELETE FROM dev_item
   WHERE cod_empresa = p_cod_empresa
     AND num_nff     = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_nf_devol_cli
   WHERE empresa       = p_cod_empresa
     AND aviso_recebto = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP

  #809554
  IF log0150_verifica_se_tabela_existe("sup_ar_imp_cana") THEN
     LET l_sup_ar_imp_cana = TRUE
  END IF

  IF l_sup_ar_imp_cana THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM sup_ar_imp_cana
      WHERE empresa       = p_cod_empresa
        AND aviso_recebto = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","sup_ar_imp_cana")
     END IF
  END IF
  #809554
  IF find4GLFunction('supy121_excluir_mov_comissoes_dev_clie') THEN
     IF NOT supy121_excluir_mov_comissoes_dev_clie(p_cod_empresa,
                                                p_dados_tela.num_aviso_rec,
                                                "EXCLUSAO") THEN
        LET p_houve_erro = TRUE
     END IF
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_trib_benef_nf_devol_cli
   WHERE empresa       = p_cod_empresa
     AND aviso_recebto = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("(4)DELETE","SUP_TRIB_BENEF_NF_DEVOL_CLI")
     LET p_houve_erro = TRUE
     WHENEVER ERROR CONTINUE
     CALL log085_transacao("ROLLBACK")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO ITEM")
     END IF
     RETURN
  END IF

  WHENEVER ERROR CONTINUE #OS450170
    SELECT sup_par_ar.parametro_val
      INTO m_num_ar_relac
      FROM sup_par_ar
     WHERE sup_par_ar.empresa           = p_cod_empresa
       AND sup_par_ar.aviso_recebto     = p_dados_tela.num_aviso_rec
       AND sup_par_ar.seq_aviso_recebto = 1
       AND sup_par_ar.parametro         = "final_cfop"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     WHENEVER ERROR CONTINUE
       DELETE FROM sup_par_ar
        WHERE empresa           = p_cod_empresa
          AND aviso_recebto     = m_num_ar_relac
          AND seq_aviso_recebto = 1
          AND parametro         = "final_cfop"
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_PAR_AR")
        LET p_houve_erro = TRUE
     ELSE
        IF sup3760_verifica_num_ar(m_num_ar_relac) THEN
           CALL sup3760_verifica_cfop_retr_serv()
        END IF
     END IF
  END IF

  IF NOT sup3760_limpa_ar_despesa_compl_imp() THEN
     LET p_houve_erro = TRUE
     WHENEVER ERROR CONTINUE
     CALL log085_transacao("ROLLBACK")
     WHENEVER ERROR STOP
     RETURN
  END IF

  #--#Atualiza monitor de integracao (caso existir documento)
  IF m_utiliz_totvs_colab = "S" THEN
     IF NOT sup13429_integra_erp_monitor(p_dados_tela.cod_empresa,     p_dados_tela.num_nf,
                                         p_dados_tela.ser_nf,          p_dados_tela.ssr_nf,
                                         p_dados_tela.cod_fornecedor,  p_dados_tela.dat_emis_nf,
                                         "EXCLUSAO") THEN
        LET p_houve_erro = TRUE
        WHENEVER ERROR CONTINUE
        CALL log085_transacao("ROLLBACK")
        WHENEVER ERROR STOP
        RETURN
     END IF
  END IF
  WHENEVER ERROR CONTINUE
  DELETE FROM sup_par_ar
   WHERE empresa       = p_cod_empresa
     AND aviso_recebto = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP

  WHENEVER ERROR CONTINUE
    DELETE
      FROM sup_ar_imp_cana
     WHERE empresa         = p_cod_empresa
       AND aviso_recebto   = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","SUP_AR_IMP_CANA")
     RETURN
  END IF

  IF find4GLFunction('supy5_cliente_78') THEN
     IF supy5_cliente_78() = TRUE THEN
        LET l_parametro = "nfdigit_4032_", p_dados_tela.num_nf USING "&&&&&&&"
        WHENEVER ERROR CONTINUE
        DELETE FROM sup_par_ar
         WHERE empresa           = p_cod_empresa
           AND aviso_recebto     = 0
           AND seq_aviso_recebto = 0
           AND parametro         = l_parametro
        WHENEVER ERROR STOP

        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("delete","sup_par_ar")
        END IF
     END IF
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_compl_nf_sup
   WHERE empresa       = p_cod_empresa
     AND aviso_recebto = p_aviso_rec.num_aviso_rec

#### OS 139067
  DELETE FROM ar_subst_tribut
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP

  ##Excluir o relacionamento dos fretes/CON ICMS ST com a NFE,
  ##para que se possa reprocessar a geração automática da NFE (SUP1265).
  IF p_dados_tela.ies_especie_nf = "NFE" THEN ##OS 337055
     WHENEVER ERROR CONTINUE
     DELETE FROM sup_par_ar
      WHERE empresa       = p_cod_empresa
        AND parametro     = "nfe_icms_st"
        AND parametro_val = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP

     WHENEVER ERROR CONTINUE
     DELETE FROM sup_par_frete
      WHERE empresa       = p_cod_empresa
        AND parametro     = "nfe_icms_st"
        AND parametro_val = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP
  END IF

  IF m_exporta_nf = "A" THEN
     CALL sup3762_exclui_conta_corrente("E")
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM ar_os_esp
   WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP

  #IF p_par_sup_compl.ies_rastreio = "1" THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM avf_insp_ar
      WHERE avf_insp_ar.empresa       = p_cod_empresa
        AND avf_insp_ar.aviso_recebto = p_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP

     WHENEVER ERROR CONTINUE #OS560935
       DELETE FROM avf_pl_insp_ar
        WHERE avf_pl_insp_ar.empresa       = p_cod_empresa
          AND avf_pl_insp_ar.aviso_recebto = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql('DELETE','AVF_PL_INSP_AR')
     END IF
  #END IF

## OS 412491
  IF (p_dados_tela.ies_especie_nf    = "NFR" OR
      p_dados_tela.ies_especie_nf    = "NFE") AND
      p_dados_tela.ies_nf_aguard_nfe = "X" THEN
     CALL sup3760_exclui_nf_consig("NOTA",p_aviso_rec.num_aviso_rec,0)
  ELSE
#    IF sup3762_verifica_operacao_srig(m_ies_fat_unico) THEN
#      IF g_ies_retorno_ind = TRUE OR
#         g_ret_sem_ind = TRUE THEN
         IF sup376_elimina_item_ret_terc(p_nf_sup.num_aviso_rec,0,"2") = FALSE THEN
            LET p_houve_erro = TRUE
            WHENEVER ERROR CONTINUE
            CALL log085_transacao("ROLLBACK")
            WHENEVER ERROR STOP
            RETURN
         END IF
#      END IF
#    END IF
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM aviso_rec
   WHERE cod_empresa = p_cod_empresa
     AND num_aviso_rec = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("EXCLUSAO","AVISO_REC")
     LET p_houve_erro = TRUE
  END IF

  ### OS 277425 ###
  IF sup3766_exclui_sup_ar_grade(p_cod_empresa,
                                 p_aviso_rec.num_aviso_rec,
                                 0) = FALSE THEN
     LET p_houve_erro = TRUE
  END IF
  ### OS 277425 ###
  IF sup1283_exclui_sup_ar_grade(p_cod_empresa,
                                 p_aviso_rec.num_aviso_rec,
                                 0) = FALSE THEN
     LET p_houve_erro = TRUE
     WHENEVER ERROR CONTINUE
     CALL log085_transacao("ROLLBACK")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO NOTA")
     END IF
     RETURN
  END IF
  ### FIM OS 277425 ###

  ### OS 159597 ###
  IF m_contr_pes_rec = 'S' THEN #eduardo - o.s.290538 19/11/03
     WHENEVER ERROR CONTINUE
     UPDATE sup_ctr_balanca
        SET aviso_recebto     = NULL
      WHERE empresa           = p_cod_empresa
        AND num_docum         = p_dados_tela.num_nf
        AND serie_nota_fiscal = p_dados_tela.ser_nf
        AND subserie_nf       = p_dados_tela.ssr_nf
        AND fornecedor        = p_dados_tela.cod_fornecedor
        AND seq_nota_fiscal   > 0
        AND tip_pesagem       = "1"
     WHENEVER ERROR STOP
  END IF

  IF p_dados_tela.ies_nf_aguard_nfe = "A" THEN
     DELETE FROM ar_depos
      WHERE cod_empresa   = p_cod_empresa
        AND num_aviso_rec = p_dados_tela.num_aviso_rec
  END IF

  IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
     DELETE FROM item_de_terc_dep
      WHERE cod_empresa     = p_cod_empresa
        AND num_nf          = p_dados_tela.num_nf
        AND ser_nf          = p_dados_tela.ser_nf
        AND ies_especie_nf  = p_dados_tela.ies_especie_nf
        AND cod_fornecedor  = p_dados_tela.cod_fornecedor

     DELETE FROM ar_fornec_depos
      WHERE cod_empresa   = p_cod_empresa
        AND num_ar_depos  = p_dados_tela.num_aviso_rec
  END IF

  IF NOT sup1031_grava_audit_ar(p_aviso_rec.num_aviso_rec,
                                0, ##EXCLUSAO TOTAL DA NOTA FISCAL
                                "SUP3760","5") THEN
     LET p_houve_erro = TRUE
  END IF

  IF p_dados_tela.cod_empresa_estab IS NULL THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM rec_find_ent_ar
      WHERE empresa         = p_cod_empresa
        AND empresa_estabel IS NULL
        AND aviso_recebto   = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP
  ELSE
     WHENEVER ERROR CONTINUE
     DELETE FROM rec_find_ent_ar
      WHERE empresa         = p_cod_empresa
        AND empresa_estabel = p_dados_tela.cod_empresa_estab
        AND aviso_recebto   = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM aviso_rec_compl_sq
   WHERE cod_empresa  = p_cod_empresa
     AND num_aviso_rec = p_aviso_rec.num_aviso_rec

  DELETE FROM aviso_rec_aux
   WHERE cod_empresa = p_cod_empresa
     AND num_aviso_rec = p_aviso_rec.num_aviso_rec

  WHENEVER ERROR CONTINUE
  DELETE FROM dev_mestre
   WHERE cod_empresa = p_cod_empresa
     AND num_nff     = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("EXCLUSAO","DEV_MESTRE")
     LET p_houve_erro = TRUE
     WHENEVER ERROR CONTINUE
     CALL log085_transacao("ROLLBACK")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO NOTA")
     END IF
     RETURN
  END IF

  WHENEVER ERROR CONTINUE
  DELETE FROM audit_sup_cre
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_dados_tela.num_aviso_rec
  IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("EXCLUSAO","AUDIT_SUP_CRE")
     LET p_houve_erro = TRUE
     WHENEVER ERROR CONTINUE
     CALL log085_transacao("ROLLBACK")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO NOTA")
     END IF
     RETURN
  END IF

  DELETE FROM ar_frete_cesta
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_dados_tela.num_aviso_rec

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_item_terc_end
  WHERE empresa           = p_cod_empresa
    AND nota_fiscal       = p_nf_sup.num_nf
    AND serie_nota_fiscal = p_nf_sup.ser_nf
    AND subserie_nf       = p_nf_sup.ssr_nf
    AND espc_nota_fiscal  = p_nf_sup.ies_especie_nf
    AND fornecedor        = l_cod_fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("EXCLUSAO","SUP_ITEM_TERC_END")
     LET p_houve_erro = TRUE
     WHENEVER ERROR CONTINUE
     CALL log085_transacao("ROLLBACK")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO NOTA")
     END IF
     RETURN
  END IF

  DELETE FROM item_de_terc
   WHERE cod_empresa    = p_cod_empresa
     AND num_nf         = p_dados_tela.num_nf
     AND ser_nf         = p_dados_tela.ser_nf
     AND ssr_nf         = p_dados_tela.ssr_nf
     AND ies_especie_nf = p_dados_tela.ies_especie_nf
     AND cod_fornecedor = l_cod_fornecedor

  DELETE FROM item_de_terc_compl
   WHERE cod_empresa    = p_cod_empresa
     AND num_nf         = p_dados_tela.num_nf
     AND ser_nf         = p_dados_tela.ser_nf
     AND ssr_nf         = p_dados_tela.ssr_nf
     AND ies_especie_nf = p_dados_tela.ies_especie_nf
     AND cod_fornec_nf  = l_cod_fornecedor

  DELETE FROM item_de_terc_area
   WHERE cod_empresa    = p_cod_empresa
     AND num_nf         = p_dados_tela.num_nf
     AND ser_nf         = p_dados_tela.ser_nf
     AND ssr_nf         = p_dados_tela.ssr_nf
     AND ies_especie_nf = p_dados_tela.ies_especie_nf
     AND cod_fornecedor = l_cod_fornecedor

  DELETE FROM item_dev_terc_comp
   WHERE item_dev_terc_comp.cod_empresa = p_cod_empresa
     AND item_dev_terc_comp.num_nf = p_dados_tela.num_nf
     AND item_dev_terc_comp.ser_nf = p_dados_tela.ser_nf
     AND item_dev_terc_comp.ssr_nf = p_dados_tela.ssr_nf
     AND item_dev_terc_comp.num_sequencia = p_num_seq
  WHENEVER ERROR STOP

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_nf_reajus
   WHERE sup_nf_reajus.empresa = p_cod_empresa
     AND sup_nf_reajus.ar_reajus = p_dados_tela.num_aviso_rec

  DELETE FROM sup_nf_fat_remessa
   WHERE sup_nf_fat_remessa.empresa           = p_cod_empresa
     AND sup_nf_fat_remessa.nota_fiscal       = p_dados_tela.num_nf
     AND sup_nf_fat_remessa.serie_nota_fiscal = p_dados_tela.ser_nf
     AND sup_nf_fat_remessa.subserie_nf       = p_dados_tela.ssr_nf
     AND sup_nf_fat_remessa.espc_nota_fiscal  = p_dados_tela.ies_especie_nf
     AND sup_nf_fat_remessa.fornecedor        = p_dados_tela.cod_fornecedor
  WHENEVER ERROR STOP

  DELETE FROM ar_iss
   WHERE cod_empresa = p_cod_empresa
     AND num_aviso_rec = p_aviso_rec.num_aviso_rec

  IF g_ies_tex_inst = "S" THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM ar_ped_tex
      WHERE cod_empresa      = p_cod_empresa
        AND num_aviso_rec    = p_dados_tela.num_aviso_rec
        AND num_seq          = p_aviso_rec.num_seq
     DELETE FROM nf_sup_tex_cap_con
      WHERE cod_empresa      = p_cod_empresa
        AND num_aviso_rec    = p_dados_tela.num_aviso_rec
        AND num_seq          = p_aviso_rec.num_seq
     WHENEVER ERROR STOP
  END IF

  IF m_exst_rel_fre_indt THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM sup_relc_ftre_indt
      WHERE sup_relc_ftre_indt.empresa   = p_cod_empresa
        AND sup_relc_ftre_indt.aviso_recebto = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_RELC_FTRE_INDT")
     END IF
     ## OS 518223 ##
     IF find4GLFunction('supy61_gera_mvto_comodato') THEN
        IF NOT supy61_gera_mvto_comodato(p_dados_tela.cod_empresa,
                                         p_dados_tela.num_aviso_rec,
                                         "E") THEN
           WHENEVER ERROR CONTINUE
           CALL log085_transacao("ROLLBACK")
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("ROLLBACK","TRANSACAO")
           END IF
           RETURN
        END IF
     END IF
     ## OS 518223 ##
  END IF

  #-- OS 737190 inicio --#
  IF find4GLFunction('supy160_cliente_318') THEN
     IF supy160_nota_nfr_tipo_a_com_qtd(p_cod_empresa, p_aviso_rec.num_aviso_rec, " ") THEN
        LET p_houve_erro = TRUE
        CALL log0030_mensagem("Não é permitido excluir nota NFR do tipo A quando existe quantidade liberada.","info")
     END IF
  END IF
  #-- OS 737190 fim --#
  WHENEVER ERROR CONTINUE
  DELETE FROM nf_sup
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0  THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM sup_infc_strib_nfe
      WHERE empresa            = p_cod_empresa
        AND nf_entrada         = p_dados_tela.num_nf
        AND serie_nf_entrada   = p_dados_tela.ser_nf
        AND subserie_nfe       = p_dados_tela.ssr_nf
        AND especie_nf_entrada = p_dados_tela.ies_especie_nf
        AND fornecedor         = p_dados_tela.cod_fornecedor

     DELETE FROM vencimento_nff
      WHERE cod_empresa = p_cod_empresa
        AND num_nf      = p_dados_tela.num_nf
        AND ser_nf      = p_dados_tela.ser_nf
        AND ssr_nf      = p_dados_tela.ssr_nf
        AND cod_fornecedor  = p_dados_tela.cod_fornecedor

     DELETE FROM nf_sup_aux
      WHERE cod_empresa = p_cod_empresa
        AND num_aviso_rec = p_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP

     IF p_dados_tela.ies_especie_nf = "NFM" THEN
        WHENEVER ERROR CONTINUE
        DELETE FROM nf_pend
         WHERE cod_empresa    = p_cod_empresa
           AND num_nf         = p_dados_tela.num_nf
           AND ser_nf         = p_dados_tela.ser_nf
           AND ssr_nf         = p_dados_tela.ssr_nf
           AND cod_fornecedor = p_dados_tela.cod_fornecedor
        WHENEVER ERROR STOP
     END IF

     IF p_dados_tela.ies_especie_nf = "NFP" THEN
        DECLARE cq_ar_x_nf_pend4 CURSOR FOR
        SELECT *
          FROM ar_x_nf_pend
         WHERE cod_empresa   = p_cod_empresa
           AND num_aviso_rec = p_dados_tela.num_aviso_rec

        FOREACH cq_ar_x_nf_pend4 INTO lr_ar_x_nf_pend.*
           WHENEVER ERROR CONTINUE
           UPDATE nf_pend
              SET qtd_regularizada = qtd_regularizada -
                                     lr_ar_x_nf_pend.qtd_regularizada
            WHERE cod_empresa    = lr_ar_x_nf_pend.cod_empresa
              AND num_nf         = lr_ar_x_nf_pend.num_nf
              AND ser_nf         = lr_ar_x_nf_pend.ser_nf
              AND ssr_nf         = lr_ar_x_nf_pend.ssr_nf
              AND cod_fornecedor = lr_ar_x_nf_pend.cod_fornecedor
              AND cod_item       = lr_ar_x_nf_pend.cod_item
           WHENEVER ERROR STOP
        END FOREACH

        WHENEVER ERROR CONTINUE
        DELETE FROM ar_x_nf_pend
         WHERE cod_empresa    = p_cod_empresa
           AND num_aviso_rec  = p_dados_tela.num_aviso_rec
        WHENEVER ERROR STOP
     END IF

     IF p_dados_tela.ies_especie_nf = "CON" THEN
        CALL sup376_exclui_pedagio_frete()
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM reten_iss
      WHERE cod_empresa    = p_cod_empresa
        AND num_ad_nf_orig = p_dados_tela.num_nf
        AND ser_nf         = p_dados_tela.ser_nf
        AND ssr_nf         = p_dados_tela.ssr_nf
        AND ies_especie_nf = p_dados_tela.ies_especie_nf
        AND cod_fornecedor = p_dados_tela.cod_fornecedor

     DELETE FROM reten_inss
      WHERE cod_empresa    = p_cod_empresa
        AND num_ad_nf_orig = p_dados_tela.num_nf
        AND ser_nf         = p_dados_tela.ser_nf
        AND ssr_nf         = p_dados_tela.ssr_nf
        AND ies_especie_nf = p_dados_tela.ies_especie_nf
        AND cod_fornecedor = p_dados_tela.cod_fornecedor
     WHENEVER ERROR STOP

     #eduardo o.s.335020
     CALL sup3760_exclusao_nota_2()
     #Eduardo o.s.335020

      IF m_utiliza_dds_fortaleza = "S" THEN
        WHENEVER ERROR CONTINUE
        DELETE FROM cap_sistema_dds
          WHERE empresa           = p_cod_empresa
            AND ad_nota_fiscal    = p_dados_tela.num_nf
            AND serie_nota_fiscal = p_dados_tela.ser_nf
            AND subserie_nf       = p_dados_tela.ssr_nf
            AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
            AND fornecedor        = p_dados_tela.cod_fornecedor
        WHENEVER ERROR STOP
     END IF


     DELETE FROM reten_inss_rur
      WHERE cod_empresa    = p_cod_empresa
        AND num_ad_nf_orig = p_dados_tela.num_nf
        AND ser_nf         = p_dados_tela.ser_nf
        AND ssr_nf         = p_dados_tela.ssr_nf
        AND ies_especie_nf = p_dados_tela.ies_especie_nf
        AND cod_fornecedor = p_dados_tela.cod_fornecedor

     IF p_aviso_rec.cod_operac_estoq = p_cod_oper_ent_ind THEN

        WHENEVER ERROR CONTINUE
        DELETE FROM sup_item_terc_end
        WHERE sup_item_terc_end.empresa           = p_cod_empresa
          AND sup_item_terc_end.nota_fiscal       = p_nf_sup.num_nf
          AND sup_item_terc_end.serie_nota_fiscal = p_nf_sup.ser_nf
          AND sup_item_terc_end.subserie_nf       = p_nf_sup.ssr_nf
          AND sup_item_terc_end.espc_nota_fiscal  = p_nf_sup.ies_especie_nf
          AND sup_item_terc_end.fornecedor        = l_cod_fornecedor
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 and sqlca.sqlcode <> 100 THEN
           CALL log003_err_sql("EXCLUSAO","SUP_ITEM_TERC_END")
           LET p_houve_erro = TRUE
           WHENEVER ERROR CONTINUE
           CALL log085_transacao("ROLLBACK")
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO NOTA")
           END IF
           RETURN
        END IF

        DELETE FROM item_de_terc
         WHERE item_de_terc.cod_empresa    = p_cod_empresa
           AND item_de_terc.num_nf         = p_dados_tela.num_nf
           AND item_de_terc.ser_nf         = p_dados_tela.ser_nf
           AND item_de_terc.ssr_nf         = p_dados_tela.ssr_nf
           AND item_de_terc.ies_especie_nf = p_dados_tela.ies_especie_nf
           AND item_de_terc.cod_fornecedor = l_cod_fornecedor
     END IF
     IF p_aviso_rec.cod_operac_estoq = p_oper_ent_ind_g THEN
        DECLARE cq_ret CURSOR FOR
        SELECT *
          FROM item_ret_terc
         WHERE item_ret_terc.cod_empresa = p_cod_empresa
           AND item_ret_terc.num_nf      = p_dados_tela.num_nf
           AND item_ret_terc.ser_nf         = p_dados_tela.ser_nf
           AND item_ret_terc.ssr_nf         = p_dados_tela.ssr_nf
           AND item_ret_terc.ies_especie_nf = p_dados_tela.ies_especie_nf
           AND item_ret_terc.cod_fornecedor = p_dados_tela.cod_fornecedor

        FOREACH cq_ret INTO l_item_ret_terc.*
            UPDATE item_em_terc
               SET item_em_terc.qtd_tot_recebida = item_em_terc.qtd_tot_recebida -
                                                   l_item_ret_terc.qtd_devolvida
             WHERE item_em_terc.cod_empresa = l_item_ret_terc.cod_empresa
               AND item_em_terc.num_nf      = l_item_ret_terc.num_nf_remessa
               AND item_em_terc.num_sequencia = l_item_ret_terc.num_sequencia_nf

           DELETE FROM item_ret_terc
            WHERE item_ret_terc.cod_empresa = l_item_ret_terc.cod_empresa
              AND num_nf         = l_item_ret_terc.num_nf
              AND ser_nf         = l_item_ret_terc.ser_nf
              AND ssr_nf         = l_item_ret_terc.ssr_nf
              AND ies_especie_nf = l_item_ret_terc.ies_especie_nf
              AND cod_fornecedor = l_item_ret_terc.cod_fornecedor
              AND num_sequencia_ar = l_item_ret_terc.num_sequencia_ar
        END FOREACH
     END IF

     DELETE FROM reten_inss_rur
      WHERE cod_empresa    = p_cod_empresa
        AND num_ad_nf_orig = p_dados_tela.num_nf
        AND ser_nf         = p_dados_tela.ser_nf
        AND ssr_nf         = p_dados_tela.ssr_nf
        AND ies_especie_nf = p_dados_tela.ies_especie_nf
        AND cod_fornecedor = p_dados_tela.cod_fornecedor

     LET l_num_nf = p_dados_tela.num_nf
     DELETE FROM reten_irrf_pg
      WHERE cod_empresa    = p_cod_empresa
        AND num_nf         = l_num_nf
        AND ser_nf         = p_dados_tela.ser_nf
        AND ssr_nf         = p_dados_tela.ssr_nf
        AND ies_especie_nf = p_dados_tela.ies_especie_nf
        AND cod_fornecedor = p_dados_tela.cod_fornecedor

     DELETE FROM aviso_rec_compl
      WHERE cod_empresa   = p_cod_empresa
        AND num_aviso_rec = p_aviso_rec.num_aviso_rec

     DELETE FROM ar_pis_cofins
      WHERE cod_empresa   = p_cod_empresa
        AND num_aviso_rec = p_aviso_rec.num_aviso_rec

     #OS 359707
     WHENEVER ERROR CONTINUE
       DELETE FROM obf_dvcli_piscofin
        WHERE empresa           = p_cod_empresa
          AND aviso_recebto     = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP

     WHENEVER ERROR CONTINUE
       DELETE FROM obf_p_dvcli_cofins
        WHERE empresa           = p_cod_empresa
          AND aviso_recebto     = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP
     #OS 359707

     WHENEVER ERROR CONTINUE ##OS 361268
     DELETE FROM sup_par_devol_cli
      WHERE empresa           = p_cod_empresa
        AND aviso_recebto     = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP

     WHENEVER ERROR CONTINUE
     DELETE FROM sup_ar_piscofim
      WHERE empresa       = p_cod_empresa
        AND aviso_recebto = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP

     WHENEVER ERROR CONTINUE
     DELETE FROM sup_fr_pis_cofins
      WHERE empresa       = p_cod_empresa
        AND aviso_recebto = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP

     IF NOT sup3760_desfaz_relac_desp_proc() THEN
        LET p_houve_erro = TRUE
        WHENEVER ERROR CONTINUE
        CALL log085_transacao("ROLLBACK")
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("ROLLBACK TRANSACTION","EXCLUSAO NOTA")
        END IF
        RETURN
     END IF

     ##Se for integração ON-LINE poderá existir lançamentos contábeis para o documento,
     ##já que o indicador ies_incl_contab só passará para "S" quando for efetuado
     ##a integração contábil (geração do lote ou arquivo texto).
     IF NOT supr6_integracao_batch(p_cod_empresa) AND
        supr6_data_posterior_data_corte_logix_10(p_cod_empresa,
                                                 p_dados_tela.dat_entrada_nf) THEN

        IF NOT supr6_validacao_data_inicial_e_final_processamento(p_cod_empresa,
                                                                  p_dados_tela.dat_entrada_nf,
                                                                  p_dados_tela.dat_entrada_nf,
                                                                  "MANUAL",
                                                                  FALSE) THEN
           LET p_houve_erro = TRUE
        ELSE
           IF m_dat_entrada_ant IS NULL THEN
              LET l_dat_entrada_nf = p_dados_tela.dat_entrada_nf
           ELSE
              LET l_dat_entrada_nf = m_dat_entrada_ant
           END IF

           IF NOT supr6_exclui_lancamento_contabil_documento("MANUAL",
                                                             p_cod_empresa,
                                                             p_dados_tela.num_nf,
                                                             p_dados_tela.ser_nf,
                                                             p_dados_tela.ssr_nf,
                                                             p_dados_tela.ies_especie_nf,
                                                             p_dados_tela.cod_fornecedor,
                                                             p_dados_tela.num_aviso_rec,
                                                             l_dat_entrada_nf,
                                                             0,FALSE) THEN
              LET p_houve_erro = TRUE
           END IF
        END IF
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM aviso_rec_proc_imp
      WHERE cod_empresa   = p_cod_empresa
        AND num_aviso_rec = p_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("EXCLUSÃO","AVISO_REC_PROC_IMP")
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM ar_iss
     WHERE cod_empresa = p_cod_empresa
       AND num_aviso_rec = p_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("EXCLUSÃO","AR_ISS")
     END IF

     IF sup3760_cursor_excl_sup_retn_item_terc(FALSE) = FALSE THEN
        LET p_houve_erro = TRUE
     END IF

     IF NOT p_houve_erro THEN
        WHENEVER ERROR CONTINUE
        OPEN cq_exclui_grd USING p_cod_empresa,
                                 p_dados_tela.num_nf,
                                 p_dados_tela.ser_nf,
                                 p_dados_tela.ssr_nf,
                                 p_dados_tela.ies_especie_nf,
                                 p_dados_tela.cod_fornecedor
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("OPEN","SUP_RETN_ITEM_TERC(3)")
           LET p_houve_erro = TRUE
        END IF

        IF NOT p_houve_erro THEN
           WHILE TRUE
              WHENEVER ERROR CONTINUE
              FETCH cq_exclui_grd INTO l_nf_remessa, l_seq_nf_remessa,
                                       l_seq_tabulacao, l_qtd_devolvida
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 IF sqlca.sqlcode <> 100 THEN
                    CALL log003_err_sql("FETCH","SUP_RETN_ITEM_TERC(3)")
                    LET p_houve_erro = TRUE
                 END IF

                 EXIT WHILE
              END IF

              WHENEVER ERROR CONTINUE
              UPDATE sup_itterc_grade
                 SET sup_itterc_grade.qtd_tot_receb = sup_itterc_grade.qtd_tot_receb -
                                                      l_qtd_devolvida
               WHERE sup_itterc_grade.empresa       = p_cod_empresa
                 AND sup_itterc_grade.nota_fiscal   = l_nf_remessa
                 AND sup_itterc_grade.seq_item_nf   = l_seq_nf_remessa
                 AND sup_itterc_grade.fornecedor    = p_dados_tela.cod_fornecedor
                 AND sup_itterc_grade.seq_tabulacao = l_seq_tabulacao
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("UPDATE","SUP_ITTERC_GRADE(3)")
                 LET p_houve_erro = TRUE
              END IF

              WHENEVER ERROR CONTINUE
              IF p_houve_erro THEN
                 EXIT WHILE
              END IF
           END WHILE
        END IF
     END IF

     WHENEVER ERROR CONTINUE
     DELETE FROM sup_retn_item_terc
      WHERE sup_retn_item_terc.empresa           = p_cod_empresa
        AND sup_retn_item_terc.nota_fiscal       = p_dados_tela.num_nf
        AND sup_retn_item_terc.serie_nota_fiscal = p_dados_tela.ser_nf
        AND sup_retn_item_terc.subserie_nf       = p_dados_tela.ssr_nf
        AND sup_retn_item_terc.espc_nota_fiscal  = p_dados_tela.ies_especie_nf
        AND sup_retn_item_terc.fornecedor        = p_dados_tela.cod_fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DELETE","SUP_RETN_ITEM_TERC(3)")
        LET p_houve_erro = TRUE
     END IF

     #IF p_ies_interf_cre = "S" THEN
     #    IF p_dados_tela.ies_especie_nf = "NFD" OR
     #       p_ies_tip_entrada = "5" THEN
     #        CALL log0030_mensagem("ATENCAO !!! Estes dados ja foram baixados no Contas a Receber ","info")
     #    END IF
     # END IF
      IF (p_dados_tela.cod_operacao[1] = "7" OR m_nfr_import) AND
          #p_dados_tela.ies_especie_nf <> "NFM" AND
         (p_par_sup_compl.ies_mod_importacao = "L" OR
          p_par_sup_compl.ies_mod_importacao = "S") THEN
         IF m_num_processo IS NOT NULL AND m_num_processo <> -1 THEN
            DECLARE cq_ar_proc_imp CURSOR FOR
            SELECT num_aviso_rec
              FROM aviso_rec_proc_imp
             WHERE cod_empresa  = p_dados_tela.cod_empresa
               AND num_processo = m_num_processo

            INITIALIZE l_num_ar_imp TO NULL
            OPEN cq_ar_proc_imp
            FETCH cq_ar_proc_imp INTO l_num_ar_imp
            CLOSE cq_ar_proc_imp

            IF l_num_ar_imp IS NULL THEN
               WHENEVER ERROR CONTINUE
               UPDATE processo_imp
                  SET num_aviso_rec = NULL,
                      ies_situacao  = "4"
                WHERE cod_empresa      = p_dados_tela.cod_empresa
                  AND num_aviso_rec    IS NOT NULL
                  AND num_aviso_rec    = p_dados_tela.num_aviso_rec
                  AND ies_versao_atual = "S"
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql("(1)MODIFICACAO","PROCESSO_IMP")
                  LET p_houve_erro = TRUE
               ELSE
                  CALL imp0024_mov_even(p_cod_empresa,m_num_processo,
                                        34," ",TODAY)
               END IF
            ELSE
               LET l_num_ar_proc = sup3760_leitura_processo_imp(m_num_processo,"AR")
               IF l_num_ar_proc = p_dados_tela.num_aviso_rec THEN
                  WHENEVER ERROR CONTINUE
                  UPDATE processo_imp
                     SET num_aviso_rec    = l_num_ar_imp
                   WHERE cod_empresa      = p_dados_tela.cod_empresa
                     AND num_processo     = m_num_processo
                     AND ies_versao_atual = "S"
                  WHENEVER ERROR STOP
                  IF sqlca.sqlcode <> 0 THEN
                     CALL log003_err_sql("(2)MODIFICACAO","PROCESSO_IMP")
                     LET p_houve_erro = TRUE
                  END IF
               END IF
            END IF
         END IF
      ELSE
         IF p_dados_tela.cod_operacao[1] = "7" THEN
            IF p_dados_tela.ies_especie_nf = 'NFM' AND
               (p_par_sup_compl.ies_mod_importacao = "L" OR
                p_par_sup_compl.ies_mod_importacao = "S") THEN
               LET m_num_processo = sup3760_busca_numero_proc_imp()
               WHENEVER ERROR CONTINUE
               UPDATE processo_imp
                  SET num_aviso_rec = NULL,
                      ies_situacao  = "4"
                WHERE cod_empresa      = p_dados_tela.cod_empresa
                  AND num_aviso_rec    IS NOT NULL
                  AND num_aviso_rec    = p_dados_tela.num_aviso_rec
                  AND ies_versao_atual = "S"
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0 THEN
                  CALL log003_err_sql("(1)MODIFICACAO","PROCESSO_IMP")
                  LET p_houve_erro = TRUE
               ELSE
                  CALL imp0024_mov_even(p_cod_empresa,m_num_processo,
                                        34," ",TODAY)
               END IF
            END IF
         END IF
      END IF

      #--------------------------#
      # Alteração WMS OS: 450083 #
      #--------------------------#
      IF p_houve_erro = FALSE THEN
         IF m_wms_instal = "S" AND l_nf_deposit = 'S' THEN
            IF NOT sup3760_exclui_atualiza_prim_nf_deposit() THEN
               LET p_houve_erro = TRUE
            END IF
         END IF
         IF m_wms_instal = "S" THEN
            IF wms6135_exclui_relacionamento_cesv(p_dados_tela.cod_empresa,
                                                  p_dados_tela.num_nf,
                                                  p_dados_tela.ser_nf,
                                                  p_dados_tela.ssr_nf,
                                                  p_dados_tela.ies_especie_nf,
                                                  p_dados_tela.cod_fornecedor) = FALSE THEN

               LET p_houve_erro = TRUE
            END IF
         END IF
      END IF
      #--------------------------#

      IF p_houve_erro = FALSE THEN
         #FLUXO DE CAIXA
         CALL sup3760_atualizar_ordens_fluxo()
      END IF

      IF p_houve_erro = FALSE THEN
         MESSAGE " Nota Fiscal excluida com sucesso. " ATTRIBUTE(REVERSE)
         IF p_ies_canc_nc = TRUE
         THEN CALL sup376_cancela_nota_credito()
         END IF
         INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
         INITIALIZE p_formonly.* TO NULL
         CLEAR FORM
      END IF
  ELSE
      CALL log003_err_sql("EXCLUSAO","NF_SUP")
      LET p_houve_erro = TRUE
  END IF

  IF p_houve_erro = FALSE THEN
     WHENEVER ERROR CONTINUE
         CALL log085_transacao("COMMIT")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 THEN
       IF p_ies_usa_ae = "S" THEN
          CALL sup376_consiste_ae(p_aviso_rec.num_aviso_rec)
       END IF
     ELSE
       INITIALIZE p_msg TO NULL
       LET p_msg = "Erro efetivacao dados= ", sqlca.sqlcode CLIPPED
       CALL log0030_mensagem(p_msg,"stop")
       CALL log085_transacao("ROLLBACK") #OS596059
       RETURN
     END IF
  ELSE
     WHENEVER ERROR CONTINUE
     CALL log085_transacao("ROLLBACK")
     WHENEVER ERROR STOP
  END IF
 END IF
 END FUNCTION

#------------------------------------#
 FUNCTION sup3760_exclusao_nota_2()
#------------------------------------#
   WHENEVER ERROR CONTINUE
      DELETE FROM cap_sest_senat
       WHERE empresa           = p_cod_empresa
         AND ad_nf_origem      = p_dados_tela.num_nf
         AND serie_nota_fiscal = p_dados_tela.ser_nf
         AND subserie_nf       = p_dados_tela.ssr_nf
         AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
         AND fornecedor        = p_dados_tela.cod_fornecedor

      DELETE FROM cap_ret_inss_auton
       WHERE empresa           = p_cod_empresa
         AND ad_nf_origem      = p_dados_tela.num_nf
         AND serie_nota_fiscal = p_dados_tela.ser_nf
         AND subserie_nf       = p_dados_tela.ssr_nf
         AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
         AND fornecedor        = p_dados_tela.cod_fornecedor

      DELETE FROM cap_ret_inss_compl
       WHERE empresa           = p_cod_empresa
         AND ad_nf_origem      = p_dados_tela.num_nf
         AND serie_nota_fiscal = p_dados_tela.ser_nf
         AND subserie_nf       = p_dados_tela.ssr_nf
         AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
         AND fornecedor        = p_dados_tela.cod_fornecedor

      DELETE FROM cap_ret_proalminas
       WHERE empresa           = p_cod_empresa
         AND ad_nf_origem      = p_dados_tela.num_nf
         AND serie_nota_fiscal = p_dados_tela.ser_nf
         AND subserie_nf       = p_dados_tela.ssr_nf
         AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
         AND fornecedor        = p_dados_tela.cod_fornecedor

      DELETE FROM cap_iss_compl
       WHERE empresa           = p_cod_empresa
         AND ad_nota_fiscal    = p_dados_tela.num_nf
         AND serie_nota_fiscal = p_dados_tela.ser_nf
         AND subserie_nf       = p_dados_tela.ssr_nf
         AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
         AND fornecedor        = p_dados_tela.cod_fornecedor

      DELETE FROM cap_iss_eletronico
       WHERE empresa           = p_cod_empresa
         AND ad_nota_fiscal    = p_dados_tela.num_nf
         AND serie_nota_fiscal = p_dados_tela.ser_nf
         AND subserie_nf       = p_dados_tela.ssr_nf
         AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
         AND fornecedor        = p_dados_tela.cod_fornecedor
   WHENEVER ERROR STOP

END FUNCTION

#------------------------------------------------#
 FUNCTION sup376_verifica_classificacao_sucata()
#------------------------------------------------#
 DEFINE l_contador    SMALLINT

 LET l_contador = NULL
 WHENEVER ERROR CONTINUE
 SELECT COUNT(*)
   INTO l_contador
   FROM tran_class_sucata
  WHERE tran_class_sucata.cod_empresa   = p_cod_empresa
    AND tran_class_sucata.num_aviso_rec = p_dados_tela.num_aviso_rec
    AND tran_class_sucata.ies_status    = "1"
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 OR
    l_contador IS NULL THEN
    LET l_contador = 0
 END IF

 IF l_contador > 0 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

#-------------------------------------------------------------------#
 FUNCTION sup3760_exclui_nf_consig(l_tipo, l_num_aviso_rec, l_num_seq_arg)
#-------------------------------------------------------------------#

  DEFINE  l_num_transac   INTEGER ,
          l_qtd_devolvida LIKE item_ret_terc.qtd_devolvida,
          l_qtd_dev_cons  LIKE nf_consig_dev.qtd_devolvida,
          l_tipo          CHAR(20),
          l_qtd_saldo     LIKE item_ret_terc.qtd_devolvida,
          l_num_aviso_rec LIKE aviso_rec.num_aviso_rec,
          l_num_seq_arg   LIKE aviso_rec.num_seq,
          l_num_seq       LIKE aviso_rec.num_seq,
          l_cod_item      LIKE aviso_rec.cod_item,
          l_serie_nff     CHAR(02),
          l_num_pedido    LIKE fat_item_grd_consg.pedido,
          l_ord_montag    LIKE fat_item_grd_consg.ord_montag,
          l_seq_tabulacao LIKE fat_item_grd_consg.seq_tabulacao,
          l_qtd_tot_receb LIKE sup_itterc_grade.qtd_tot_receb,
          l_cod_cliente   LIKE nf_consig.cod_cliente,
          sql_stmt        CHAR(1000)

  INITIALIZE l_num_pedido, l_ord_montag,
             l_seq_tabulacao TO NULL

  LET p_num_nf_dev    = 0
  LET p_num_seq_dev   = 0
  LET l_qtd_dev_cons  = 0
  LET l_num_transac   = 0
  LET l_qtd_devolvida = 0
  LET l_qtd_tot_receb = 0

  WHENEVER ERROR CONTINUE
  DECLARE cq_ar_nf CURSOR WITH HOLD FOR
  SELECT aviso_rec.*
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa = p_cod_empresa
     AND aviso_rec.num_aviso_rec = p_nf_sup.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","AVISO_REC1")
     LET p_houve_erro = TRUE
     RETURN
  END IF


  WHENEVER ERROR CONTINUE
  FOREACH cq_ar_nf INTO l_num_seq,
                        l_cod_item

     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("FOREACH","AVISO_REC1")
        LET p_houve_erro = TRUE
        EXIT FOREACH
     END IF

     IF l_tipo <> "NOTA" THEN
        IF l_num_seq <> l_num_seq_arg THEN
           CONTINUE FOREACH
        END IF
     END IF

     LET sql_stmt = " SELECT num_nf, ",
                           " num_item, ",
                           " qtd_devolvida, ",
                           " serie_nota_fiscal ",
                      " FROM nf_consig_dev ",
                     " WHERE cod_empresa     = """, p_cod_empresa, """ ",
                       " AND aviso_recebto   = ", l_num_aviso_rec,
                       " AND num_nf_cliente  = ", p_nf_sup.num_nf,
                       " AND cod_item        = """, l_cod_item, """ "

     IF l_num_seq_arg > 0 THEN
        LET sql_stmt = sql_stmt CLIPPED,
                       " AND sequencia_aviso_recebto = ", l_num_seq_arg
     END IF

     WHENEVER ERROR CONTINUE
     PREPARE var_nf_consigd FROM sql_stmt
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("PREPARE","var_nf_consigd")
        LET p_houve_erro = TRUE
        EXIT FOREACH
     END IF

     WHENEVER ERROR CONTINUE
     DECLARE cl_nf_consigd CURSOR WITH HOLD FOR var_nf_consigd
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("DECLARE","CL_NF_CONSIGD")
        LET p_houve_erro = TRUE
        EXIT FOREACH
     END IF

     WHENEVER ERROR CONTINUE
     FOREACH cl_nf_consigd INTO p_num_nf_dev, p_num_seq_dev, l_qtd_dev_cons, l_serie_nff
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("FOREACH","CL_NF_CONSIGD")
           LET p_houve_erro = TRUE
           EXIT FOREACH
        END IF

        IF m_ies_fat_unico THEN

           WHENEVER ERROR CONTINUE
           UPDATE fat_ctr_terc_nf
              SET qtd_devolvida = qtd_devolvida - l_qtd_dev_cons # ???
            WHERE empresa           = p_cod_empresa
              AND trans_nota_fiscal = l_trans_nota_fiscal
              AND seq_item_nf       = p_num_seq_dev
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("UPDATE","FAT_CTR_TERC_NF")
              LET p_houve_erro = TRUE
              EXIT FOREACH
           END IF

        ELSE

           WHENEVER ERROR CONTINUE
           UPDATE nf_consig_item
              SET nf_consig_item.qtd_devolvida = qtd_devolvida - l_qtd_dev_cons
            WHERE nf_consig_item.cod_empresa       = p_cod_empresa
              AND nf_consig_item.num_nff           = p_num_nf_dev
              AND nf_consig_item.cod_item          = l_cod_item
              AND nf_consig_item.num_sequencia     = p_num_seq_dev
              AND nf_consig_item.serie_nota_fiscal = l_serie_nff
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("UPDATE","NF_CONSIG_ITEM")
              LET p_houve_erro = TRUE
              EXIT FOREACH
           END IF

        END IF

        LET l_qtd_saldo = l_qtd_dev_cons

        WHENEVER ERROR CONTINUE
        DECLARE cq_ftit_grd_cons CURSOR FOR
        SELECT fat_item_grd_consg.pedido,
               fat_item_grd_consg.ord_montag,
               fat_item_grd_consg.seq_tabulacao,
               fat_item_grd_consg.qtd_devolvida
          FROM fat_item_grd_consg
         WHERE fat_item_grd_consg.empresa           = p_cod_empresa
           AND fat_item_grd_consg.nota_fiscal       = p_num_nf_dev
           AND fat_item_grd_consg.serie_nota_fiscal = l_serie_nff
           AND fat_item_grd_consg.sequencia_item    = p_num_seq_dev
           AND fat_item_grd_consg.item              = l_cod_item
           AND fat_item_grd_consg.fornecedor        = p_nf_sup.cod_fornecedor
         ORDER BY fat_item_grd_consg.seq_tabulacao
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DECLARE","FAT_ITEM_GRD_CONSG")
           LET p_houve_erro = TRUE
           EXIT FOREACH
        END IF

        WHENEVER ERROR CONTINUE
        FOREACH cq_ftit_grd_cons INTO l_num_pedido, l_ord_montag,
                                      l_seq_tabulacao, l_qtd_devolvida

           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("FOREACH","FAT_ITEM_GRD_CONSG")
              LET p_houve_erro = TRUE
              EXIT FOREACH
           END IF

           IF l_qtd_devolvida > 0 THEN
              IF l_qtd_devolvida > l_qtd_saldo THEN
                 LET l_qtd_devolvida = l_qtd_devolvida - l_qtd_saldo
                 LET l_qtd_saldo     = 0
              ELSE
                 LET l_qtd_saldo = l_qtd_saldo - l_qtd_devolvida
                 LET l_qtd_devolvida = 0
              END IF

              WHENEVER ERROR CONTINUE
              UPDATE fat_item_grd_consg
                 SET fat_item_grd_consg.qtd_devolvida = l_qtd_devolvida
               WHERE fat_item_grd_consg.empresa           = p_cod_empresa
                 AND fat_item_grd_consg.nota_fiscal       = p_num_nf_dev
                 AND fat_item_grd_consg.serie_nota_fiscal = l_serie_nff
                 AND fat_item_grd_consg.pedido            = l_num_pedido
                 AND fat_item_grd_consg.sequencia_item    = p_num_seq_dev
                 AND fat_item_grd_consg.ord_montag        = l_ord_montag
                 AND fat_item_grd_consg.item              = l_cod_item
                 AND fat_item_grd_consg.fornecedor        = p_nf_sup.cod_fornecedor
                 AND fat_item_grd_consg.seq_tabulacao     = l_seq_tabulacao
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("UPDATE","FAT_ITEM_GRD_CONSG")
                 LET p_houve_erro = TRUE
                 EXIT FOREACH
              END IF

              WHENEVER ERROR CONTINUE
              IF l_qtd_saldo = 0 THEN
                 EXIT FOREACH
              END IF
           END IF
        END FOREACH
        WHENEVER ERROR STOP

        FREE cq_ftit_grd_cons

        IF p_houve_erro = TRUE THEN
           EXIT FOREACH
        END IF

        LET l_qtd_saldo = l_qtd_dev_cons

        WHENEVER ERROR CONTINUE
        DECLARE cq_itterc_grade CURSOR FOR
         SELECT sup_itterc_grade.seq_tabulacao,
                sup_itterc_grade.qtd_tot_receb
           FROM sup_itterc_grade
          WHERE sup_itterc_grade.empresa     = p_cod_empresa
            AND sup_itterc_grade.nota_fiscal = p_num_nf_dev
            AND sup_itterc_grade.seq_item_nf = p_num_seq_dev
            AND sup_itterc_grade.fornecedor  = p_nf_sup.cod_fornecedor
          ORDER BY sup_itterc_grade.seq_tabulacao
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DECLARE","SUP_ITTERC_GRADE")
           LET p_houve_erro = TRUE
           EXIT FOREACH
        END IF

        WHENEVER ERROR CONTINUE
        FOREACH cq_itterc_grade INTO l_seq_tabulacao, l_qtd_tot_receb
        WHENEVER ERROR STOP

           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("FOREACH","SUP_ITTERC_GRADE")
              LET p_houve_erro = TRUE
              EXIT FOREACH
           END IF

           IF l_qtd_tot_receb > 0 THEN
              IF l_qtd_tot_receb > l_qtd_saldo THEN
                 LET l_qtd_tot_receb = l_qtd_tot_receb - l_qtd_saldo
                 LET l_qtd_saldo     = 0
              ELSE
                 LET l_qtd_saldo = l_qtd_saldo - l_qtd_tot_receb
                 LET l_qtd_tot_receb = 0
              END IF

              WHENEVER ERROR CONTINUE
              UPDATE sup_itterc_grade
                 SET sup_itterc_grade.qtd_tot_receb = l_qtd_tot_receb
               WHERE sup_itterc_grade.empresa       = p_cod_empresa
                 AND sup_itterc_grade.nota_fiscal   = p_num_nf_dev
                 AND sup_itterc_grade.seq_item_nf   = p_num_seq_dev
                 AND sup_itterc_grade.fornecedor    = p_nf_sup.cod_fornecedor
                 AND sup_itterc_grade.seq_tabulacao = l_seq_tabulacao
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log003_err_sql("UPDATE","SUP_ITTERC_GRADE")
                 LET p_houve_erro = TRUE
                 EXIT FOREACH
              END IF

              WHENEVER ERROR CONTINUE
              IF l_qtd_saldo = 0 THEN
                 EXIT FOREACH
              END IF
           END IF
        END FOREACH
        WHENEVER ERROR STOP

        FREE cq_itterc_grade
        IF p_houve_erro = TRUE THEN
           CONTINUE FOREACH
        END IF

        WHENEVER ERROR CONTINUE
        SELECT *
          FROM item_em_terc
         WHERE item_em_terc.cod_empresa    = p_cod_empresa
           AND item_em_terc.num_nf         = p_num_nf_dev
           AND item_em_terc.num_sequencia  = p_num_seq_dev
           AND item_em_terc.cod_fornecedor = p_nf_sup.cod_fornecedor
        WHENEVER ERROR STOP
        IF SQLCA.SQLCODE = 0 THEN
           WHENEVER ERROR CONTINUE
           UPDATE item_em_terc
              SET qtd_tot_recebida = qtd_tot_recebida - l_qtd_dev_cons
            WHERE item_em_terc.cod_empresa    = p_cod_empresa
              AND item_em_terc.num_nf         = p_num_nf_dev
              AND item_em_terc.num_sequencia  = p_num_seq_dev
              AND item_em_terc.cod_fornecedor = p_nf_sup.cod_fornecedor
           WHENEVER ERROR STOP
           IF SQLCA.SQLCODE = 0 THEN
              LET l_qtd_devolvida = 0

              WHENEVER ERROR CONTINUE
              SELECT num_transac ,qtd_devolvida
                INTO l_num_transac ,l_qtd_devolvida
                FROM item_ret_terc
               WHERE item_ret_terc.cod_empresa      = p_cod_empresa
                 AND item_ret_terc.num_nf           = p_nf_sup.num_nf
                 AND item_ret_terc.ser_nf           = p_nf_sup.ser_nf
                 AND item_ret_terc.ssr_nf           = p_nf_sup.ssr_nf
                 AND item_ret_terc.ies_especie_nf   = p_nf_sup.ies_especie_nf
                 AND item_ret_terc.cod_fornecedor   = p_nf_sup.cod_fornecedor
                 AND item_ret_terc.num_nf_remessa   = p_num_nf_dev
                 AND item_ret_terc.num_sequencia_nf = p_num_seq_dev
              WHENEVER ERROR STOP
              IF SQLCA.SQLCODE = 0 THEN
                 IF l_qtd_devolvida = l_qtd_dev_cons THEN
                    WHENEVER ERROR CONTINUE
                    DELETE FROM item_ret_terc
                     WHERE item_ret_terc.cod_empresa = p_cod_empresa
                       AND item_ret_terc.num_transac = l_num_transac
                    WHENEVER ERROR STOP
                    IF sqlca.sqlcode <> 0 THEN
                       CALL log003_err_sql("EXCLUSAO","ITEM_RET_TERC")
                       LET p_houve_erro = TRUE
                       EXIT FOREACH
                    END IF

                 ## 408466 (alterado na OS 404133)
                 #Excluir a sup_retn_item_terc

                    WHENEVER ERROR CONTINUE
                    DELETE FROM sup_retn_item_terc
                     WHERE empresa           = p_cod_empresa
                       AND nota_fiscal       = p_nf_sup.num_nf
                       AND serie_nota_fiscal = p_nf_sup.ser_nf
                       AND subserie_nf       = p_nf_sup.ssr_nf
                       AND espc_nota_fiscal  = p_nf_sup.ies_especie_nf
                       AND fornecedor        = p_nf_sup.cod_fornecedor
                       AND seq_aviso_recebto = l_num_seq
                       AND nf_remessa        = p_num_nf_dev
                       AND seq_nf_remessa    = p_num_seq_dev
                    WHENEVER ERROR STOP
                    IF sqlca.sqlcode <> 0 THEN
                       CALL log003_err_sql("EXCLUSAO","SUP_RETN_ITEM_TERC(4)")
                       LET p_houve_erro = TRUE
                       EXIT FOREACH
                    END IF
                 END IF
              END IF
           END IF
        END IF

        WHENEVER ERROR CONTINUE
     END FOREACH
     WHENEVER ERROR STOP

     IF p_houve_erro = TRUE THEN
        EXIT FOREACH
     END IF

     IF l_num_seq_arg > 0 THEN
        WHENEVER ERROR CONTINUE
        DELETE FROM nf_consig_dev
         WHERE cod_empresa             = p_cod_empresa
           AND serie_nota_fiscal       = l_serie_nff
           AND num_nf                  = p_num_nf_dev
           AND cod_item                = l_cod_item
           AND aviso_recebto           = l_num_aviso_rec
           AND sequencia_aviso_recebto = l_num_seq_arg
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("EXCLUSAO","NF_CONSIG_DEV")
           LET p_houve_erro = TRUE
           EXIT FOREACH
        END IF
     ELSE
        WHENEVER ERROR CONTINUE
        DELETE FROM nf_consig_dev
         WHERE cod_empresa             = p_cod_empresa
           AND serie_nota_fiscal       = l_serie_nff
           AND num_nf                  = p_num_nf_dev
           AND cod_item                = l_cod_item
           AND aviso_recebto           = l_num_aviso_rec
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("EXCLUSAO","NF_CONSIG_DEV")
           LET p_houve_erro = TRUE
           EXIT FOREACH
        END IF
     END IF

     WHENEVER ERROR CONTINUE
  END FOREACH
  WHENEVER ERROR STOP

 END FUNCTION

#--------------------------------------#
 FUNCTION sup376_exclui_pedagio_frete()
#--------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT pedagio_frete.cod_empresa
   FROM pedagio_frete
  WHERE cod_empresa    = p_cod_empresa
    AND num_nf_conhec  = p_nf_sup.num_nf
    AND ser_nf_conhec  = p_nf_sup.ser_nf
    AND ssr_nf_conhec  = p_nf_sup.ssr_nf
    AND ies_especie_nf = p_nf_sup.ies_especie_nf
    AND cod_fornecedor = p_nf_sup.cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    WHENEVER ERROR CONTINUE
    DELETE FROM pedagio_frete
     WHERE cod_empresa    = p_cod_empresa
       AND num_nf_conhec  = p_nf_sup.num_nf
       AND ser_nf_conhec  = p_nf_sup.ser_nf
       AND ssr_nf_conhec  = p_nf_sup.ssr_nf
       AND ies_especie_nf = p_nf_sup.ies_especie_nf
       AND cod_fornecedor = p_nf_sup.cod_fornecedor
    WHENEVER ERROR STOP
 END IF

 END FUNCTION

#-----------------------------------------#
 FUNCTION sup3760_desfaz_relac_desp_proc()
#-----------------------------------------#
  DEFINE l_ind              SMALLINT,
         l_qtd_rateio       LIKE imp_desp_proc_item.val_rateio,
         l_saldo            LIKE imp_desp_proc_item.val_rateio,
         l_houve_erro       SMALLINT,
         l_count            SMALLINT

  DEFINE lr_desp_proc_item  RECORD LIKE imp_desp_proc_item.*

  LET l_houve_erro   = FALSE
  LET m_num_processo = sup3760_busca_numero_processo_importacao()

# variável m_existe_despprit - verifica se tabela existe
  IF m_existe_despprit THEN
     INITIALIZE l_count TO NULL
     WHENEVER ERROR CONTINUE
     SELECT COUNT(*)
       INTO l_count
       FROM imp_desp_proc_item
      WHERE empresa  = p_cod_empresa
        AND processo = m_num_processo
     WHENEVER ERROR STOP
     IF l_count IS NULL THEN
        LET l_count = 0
     END IF
     IF sqlca.sqlcode <> -206 AND l_count > 0 THEN
        FOR l_ind = 1 TO m_count_seq
           DECLARE cq_desf_relac CURSOR FOR
           SELECT *
             FROM imp_desp_proc_item
            WHERE empresa           = p_cod_empresa
              AND aviso_recebto     = p_aviso_rec.num_aviso_rec
              AND sequencia_recebto = ma_inf_ar[l_ind].num_seq
              AND sequencia_rateio  = 0

           FOREACH cq_desf_relac INTO lr_desp_proc_item.*
              LET m_num_processo = lr_desp_proc_item.processo
              WHENEVER ERROR CONTINUE
              INITIALIZE l_qtd_rateio TO NULL
              SELECT SUM(qtd_rateio)
                INTO l_qtd_rateio
                FROM imp_desp_proc_item
               WHERE empresa           = lr_desp_proc_item.empresa
                 AND processo          = lr_desp_proc_item.processo
                 AND aviso_recebto     IS NULL
                 AND sequencia_recebto IS NULL
                 AND despesa           = lr_desp_proc_item.despesa
                 AND sequencia_despesa = lr_desp_proc_item.sequencia_despesa
                 AND pedido            = lr_desp_proc_item.pedido
                 AND ordem_compra      = lr_desp_proc_item.ordem_compra
              WHENEVER ERROR STOP
              IF l_qtd_rateio IS NULL THEN
                 LET l_qtd_rateio = 0
              END IF
              LET l_saldo = lr_desp_proc_item.qtd_rateio + l_qtd_rateio
              WHENEVER ERROR CONTINUE
              DELETE FROM imp_desp_proc_item
               WHERE empresa           = lr_desp_proc_item.empresa
                 AND processo          = lr_desp_proc_item.processo
                 AND aviso_recebto     = lr_desp_proc_item.aviso_recebto
                 AND sequencia_recebto = lr_desp_proc_item.sequencia_recebto
                 AND despesa           = lr_desp_proc_item.despesa
                 AND sequencia_despesa = lr_desp_proc_item.sequencia_despesa
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("EXCLUSAO","IMP_DESP_PROC_ITEM")
                LET l_houve_erro = TRUE
                EXIT FOREACH
              END IF

              WHENEVER ERROR CONTINUE
              DELETE FROM imp_desp_proc_item
               WHERE empresa           = lr_desp_proc_item.empresa
                 AND processo          = lr_desp_proc_item.processo
                 AND aviso_recebto     IS NULL
                 AND sequencia_recebto IS NULL
                 AND despesa           = lr_desp_proc_item.despesa
                 AND sequencia_despesa = lr_desp_proc_item.sequencia_despesa
                 AND pedido            = lr_desp_proc_item.pedido
                 AND ordem_compra      = lr_desp_proc_item.ordem_compra
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
                CALL log003_err_sql("EXCLUSAO","IMP_DESP_PROC_ITEM")
                LET l_houve_erro = TRUE
                EXIT FOREACH
              END IF

              WHENEVER ERROR CONTINUE
              INSERT INTO imp_desp_proc_item VALUES(lr_desp_proc_item.empresa,
                                                    lr_desp_proc_item.processo,
                                                    lr_desp_proc_item.despesa,
                                                    lr_desp_proc_item.sequencia_despesa,
                                                    NULL,
                                                    NULL,
                                                    lr_desp_proc_item.pedido,
                                                    lr_desp_proc_item.ordem_compra,
                                                    l_saldo,
                                                    0,
                                                    lr_desp_proc_item.sequencia_rateio,
                                                    lr_desp_proc_item.qtd_rateio_imp,
                                                    lr_desp_proc_item.val_rateio_imp)
              WHENEVER ERROR STOP

              IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("INCLUSAO","IMP_DESP_PROC_ITEM")
                LET l_houve_erro = TRUE
                EXIT FOREACH
              END IF
           END FOREACH
           IF l_houve_erro THEN
              EXIT FOR
           END IF
        END FOR
     END IF
  END IF

  IF l_houve_erro THEN
     RETURN FALSE
  END IF
  RETURN TRUE
 END FUNCTION

#-----------------------------#
 FUNCTION sup376_nfe_emitida()
#-----------------------------#
 DEFINE l_ies_nfe_emit      LIKE nfe_sup_compl.ies_nfe_emit,
        l_ies_alt_nfe_emit  CHAR(01)

 LET l_ies_nfe_emit = " "
 SELECT ies_nfe_emit
   INTO l_ies_nfe_emit
   FROM nfe_sup_compl
  WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = p_dados_tela.num_aviso_rec
 IF l_ies_nfe_emit = " " OR l_ies_nfe_emit IS NULL THEN
    LET l_ies_nfe_emit = "N"
 END IF

 # ---- 598943/610663 ---- #
 IF l_ies_nfe_emit = "N" THEN
    WHENEVER ERROR CONTINUE
    SELECT "S"
      INTO l_ies_nfe_emit
      FROM sup_par_ar
     WHERE empresa           = p_cod_empresa
       AND aviso_recebto     = p_dados_tela.num_aviso_rec
       AND seq_aviso_recebto = 0
       AND parametro         = 'num_nf_atualizado'
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("SELECT","SUP_PAR_AR")
    END IF
 END IF
 # ---- 598943/610663 ---- #

 LET m_ies_alt_nfe_emit = " "
 WHENEVER ERROR CONTINUE
 SELECT par_ies
   INTO m_ies_alt_nfe_emit
   FROM par_sup_pad
  WHERE cod_empresa   = p_cod_empresa
    AND cod_parametro = "ies_alt_nfe_emit"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR m_ies_alt_nfe_emit = " " OR m_ies_alt_nfe_emit IS NULL THEN
    LET l_ies_alt_nfe_emit = "N"
 END IF

 IF l_ies_nfe_emit = "S" AND m_ies_alt_nfe_emit = "N" THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

#------------------------------------#
 FUNCTION sup376_existe_frete_relac()
#------------------------------------#
 DEFINE l_conhec LIKE nf_sup.num_conhec

 INITIALIZE l_conhec TO NULL
 SELECT num_conhec
   INTO l_conhec
   FROM nf_sup
  WHERE nf_sup.cod_empresa   = p_cod_empresa
    AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec
 IF l_conhec IS NULL OR
    l_conhec = " " THEN
    LET l_conhec = 0
 END IF

 IF l_conhec <> 0 THEN
    RETURN TRUE
 END IF

 RETURN FALSE
 END FUNCTION

#--------------------------#
 FUNCTION sup376_copia_nf()
#--------------------------#
 DEFINE l_tela_ativa            SMALLINT

 LET l_tela_ativa = TRUE
 CALL log130_procura_caminho("sup37609") RETURNING comando3
 OPEN WINDOW w_sup37609 AT 5,22 WITH FORM comando3
      ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, COMMENT LINE LAST,FORM LINE 1)

 LET INT_FLAG =0
 INITIALIZE p_ordens, p_ordens_p1, p_ordens_p2, p_ordens_p3, p_ordens_p4 TO NULL
 INITIALIZE p_pedidos, p_pedidos_p1, p_pedidos_p2, p_pedidos_p3 TO NULL
 INITIALIZE p_prog_ordem TO NULL
 INITIALIZE p_prog_ordem1 TO NULL
 INITIALIZE p_prog_ordem2 TO NULL
 INITIALIZE p_aviso_rec_compl.* TO NULL
 INITIALIZE p_array, p_array_dev_trans TO NULL
 INITIALIZE p_array_compl TO NULL
 INITIALIZE p_cod_ret_imp TO NULL

 INPUT BY NAME m_dados_copia.* WITHOUT DEFAULTS

   AFTER FIELD num_nf_dest
     IF m_dados_copia.num_nf_dest IS NULL OR
        m_dados_copia.num_nf_dest = " " THEN
        ERROR " Nota Fiscal Destino deve ser informada "
        NEXT FIELD num_nf_dest
     END IF

   BEFORE FIELD ser_nf_dest
      LET m_dados_copia.ser_nf_dest = p_dados_tela.ser_nf
      DISPLAY m_dados_copia.ser_nf_dest TO ser_nf_dest

   AFTER FIELD ser_nf_dest
      IF m_serie_branca = "S" THEN
         IF m_dados_copia.ser_nf_dest IS NULL THEN
            LET m_dados_copia.ser_nf_dest = " "
         END IF
      ELSE
         IF m_dados_copia.ser_nf_dest IS NULL OR
            m_dados_copia.ser_nf_dest = " " THEN
            ERROR " Serie Nota Fiscal Destino deve ser informada "
            NEXT FIELD ser_nf_dest
         END IF
      END IF
      #--inicio--vanderlei OS 409196 #
      IF NOT sup3760_consiste_ser_nf(m_dados_copia.ser_nf_dest) THEN
         CALL log0030_mensagem('Série da nota fiscal inválida conforme legislação de ICMS nacional.\nSão válidos somente 1 á 9,B,C,D,U,BU,CU,DU,(branco) e as séries cadastradas no SUP1371.','exclamation')
         NEXT FIELD ser_nf_dest
      END IF
      #---fim----vanderlei OS 409196 #

   BEFORE FIELD ssr_nf_dest
     LET m_dados_copia.ssr_nf_dest = p_dados_tela.ssr_nf
     DISPLAY m_dados_copia.ssr_nf_dest TO ssr_nf_dest

   AFTER FIELD ssr_nf_dest
     IF m_dados_copia.ssr_nf_dest IS NULL OR
        m_dados_copia.ssr_nf_dest = " " THEN
        ERROR " Sub-Serie Nota Fiscal Destino deve ser informada "
        NEXT FIELD ssr_nf_dest
     END IF

   BEFORE FIELD fornec_dest
     LET m_dados_copia.fornec_dest = p_dados_tela.cod_fornecedor
     DISPLAY m_dados_copia.fornec_dest TO fornec_dest
     CALL sup3760_botao_zoom("ON",1,23)

   AFTER FIELD fornec_dest
     CALL sup3760_botao_zoom("OFF",1,23)
     IF m_dados_copia.fornec_dest IS NULL OR
        m_dados_copia.fornec_dest = " " THEN
        ERROR " Fornecedor Nota Fiscal Destino deve ser informada "
        NEXT FIELD fornec_dest
     END IF
   #  IF sup376_verifica_nf_existe() THEN
   #     ERROR " Nota Fiscal ja existente "
   #     NEXT FIELD num_nf_dest
   #  END IF
   #--inicio--vanderlei OS 332356 #
   BEFORE FIELD ies_nf_aguard_nfe_dest
     LET m_dados_copia.ies_nf_aguard_nfe_dest = p_dados_tela.ies_nf_aguard_nfe
     DISPLAY m_dados_copia.ies_nf_aguard_nfe_dest TO ies_nf_aguard_nfe_dest

   AFTER FIELD ies_nf_aguard_nfe_dest
     IF m_dados_copia.ies_nf_aguard_nfe_dest IS NULL OR
        m_dados_copia.ies_nf_aguard_nfe_dest = " " THEN
        ERROR " Tipo Nota Fiscal Destino deve ser informada "
        NEXT FIELD ies_nf_aguard_nfe_dest
     END IF
###  OS 374310 - retirada chamada da entrada de PC/OC na opção cópia
#    IF sup376_entrada_pedido_ordem("COPIA") = FALSE THEN
#    END IF
     LET p_entrou_pedido = "N"
#    IF p_pedidos IS NOT NULL THEN
#       CALL sup376_busca_infor_pedidos()
#    END IF
###  OS 374310 - verifica se a NF já foi incluida no sistema
     WHENEVER ERROR CONTINUE
     SELECT cod_empresa
       FROM nf_sup
      WHERE cod_empresa = p_cod_empresa
        AND num_nf = m_dados_copia.num_nf_dest
        AND ser_nf = m_dados_copia.ser_nf_dest
        AND ssr_nf = m_dados_copia.ssr_nf_dest
# 454017
#       AND ies_especie_nf = p_dados_tela.ies_especie_nf
        AND cod_fornecedor = m_dados_copia.fornec_dest
     IF sqlca.sqlcode = 0 THEN
        ERROR "Nota Fiscal já cadastrada."
        NEXT FIELD num_nf_dest
     END IF
     WHENEVER ERROR STOP

  ON KEY(control-w,f1)
     #lds IF NOT LOG_logix_versao5() THEN
     #lds CONTINUE INPUT
     #lds END IF
   CALL log140_procura_caminho("sup3760.iem") RETURNING m_arq_help
   OPTIONS
      HELP FILE m_arq_help
      CALL sup376_help()

   ON KEY (control-z, f4)
   CASE
      WHEN infield(fornec_dest)
         LET m_dados_copia.fornec_dest = sup162_popup_fornecedor()
         CURRENT WINDOW IS w_sup37609
         IF m_dados_copia.fornec_dest IS NOT NULL  THEN
            DISPLAY m_dados_copia.fornec_dest TO fornec_dest
         END IF
   END CASE
   #---fim----vanderlei OS 332356 #
 END INPUT

 IF INT_FLAG = 0 THEN
    IF log004_confirm(22,44) THEN
       CLOSE WINDOW w_sup37609
       CURRENT WINDOW IS w_sup37601
       LET l_tela_ativa = FALSE
       CALL sup376_processa_copia()
    END IF
 END IF

 IF l_tela_ativa = TRUE THEN
    CLOSE WINDOW w_sup37609
 END IF

 CURRENT WINDOW IS w_sup37601

 END FUNCTION

#---------------------------------------------#
 FUNCTION sup3760_valida_cnd_pgto_nf(l_funcao)
#---------------------------------------------#
  DEFINE l_funcao        CHAR(30),
         l_num_pedido    LIKE aviso_rec.num_pedido,
         l_forn_possui_pc SMALLINT

## 500471
 IF (p_dados_tela.ies_nf_aguard_nfe = "7" OR #OS500471
    (m_nf_aguard_nfe_ant IS NOT NULL AND
     m_nf_aguard_nfe_ant = 7)) THEN
     IF p_array_pedidos[1].num_pedido IS NOT NULL OR #OS477406
        p_array_compl[1].num_pedido IS NOT NULL THEN #OS500471
        IF p_dados_tela.ies_especie_nf <> "NFR" THEN
           RETURN TRUE
        END IF
     END IF
  END IF

  IF p_dados_tela.cnd_pgto_nf IS NULL THEN
     ERROR " Informe a condicao de pagamento."
     RETURN FALSE
  END IF
  IF sup376_verifica_cnd_pgto() THEN
     ERROR "Condicao de Pagamento nao cadastrada"
     RETURN FALSE
  END IF

  IF find4GLFunction('capy106_verifica_condicao_ativa') THEN
     IF p_array_pedidos[1].num_pedido IS NULL THEN
        IF NOT capy106_verifica_condicao_ativa(p_dados_tela.cnd_pgto_nf) THEN
           CALL log0030_mensagem('Condição informada não está ativa.Ver CAP0215.','excla')
           RETURN FALSE
        END IF
     END IF
  END IF

  IF p_ies_pagamento = "1" THEN
     ERROR " Tipo da condicao de pagamento nao pode ser PAGO. "
     RETURN FALSE
  END IF

  IF p_ies_pagamento = "2" THEN
     IF p_dados_tela.ies_especie_nf = "NFD" OR
        p_ies_tip_entrada = "5" THEN
        IF sup376_verifica_cli_especial("2") = FALSE THEN
           ERROR "Condicao de pagamento invalida para Codigo de operacao"
           RETURN FALSE
        END IF
     END IF
##### OS 45648 - permite entrada via contas a pagar para que a contabilizacao
#####           , nas devolucoes, seja lancada no respectivo cliente
     IF p_dados_tela.ies_especie_nf = "NFR" THEN
        ERROR "Condicao de pagamento invalida para a Especie "
        RETURN FALSE
     END IF
     IF p_dados_tela.ies_especie_nf = "NFC" THEN
        IF l_funcao = "MODIFICACAO" THEN
           WHENEVER ERROR CONTINUE
           INITIALIZE l_num_pedido TO NULL
           SELECT num_pedido
             INTO l_num_pedido
             FROM aviso_rec
            WHERE cod_empresa   = p_cod_empresa
              AND num_aviso_rec = p_dados_tela.num_aviso_rec
              AND num_seq       = 1
           WHENEVER ERROR STOP

           IF l_num_pedido IS NULL THEN
              IF p_ies_pagamento = "2" THEN
                 IF (p_par_sup_compl.ies_nf_compl_preco = "3" OR
                     p_par_sup_compl.ies_nf_compl_preco = "4") AND
                    p_ies_entr_sem_ped = FALSE THEN
                    ERROR "Empresa nao permite entrada de NFC sem pedido de compra"
                    RETURN FALSE
                 END IF
              END IF
           END IF
        ELSE
           IF (p_pedidos[1,5] = "XXXXX") OR
              (p_pedidos IS NULL)        THEN
              IF p_ies_pagamento = "2" THEN
                 IF (p_par_sup_compl.ies_nf_compl_preco = "3" OR
                     p_par_sup_compl.ies_nf_compl_preco = "4") AND
                    p_ies_entr_sem_ped = FALSE THEN
                    ERROR "Empresa nao permite entrada de NFC sem pedido de compra"
                    RETURN FALSE
                 END IF
              END IF
           END IF
        END IF
     END IF
     IF p_dados_tela.ies_especie_nf = "NFE" THEN
        IF l_funcao = "MODIFICACAO" THEN
           WHENEVER ERROR CONTINUE
           INITIALIZE l_num_pedido TO NULL
           SELECT num_pedido
             INTO l_num_pedido
             FROM aviso_rec
            WHERE cod_empresa   = p_cod_empresa
              AND num_aviso_rec = p_dados_tela.num_aviso_rec
              AND num_seq       = 1
           WHENEVER ERROR STOP

           IF l_num_pedido IS NULL THEN
              IF p_ies_pagamento = "2" THEN
                 IF (p_par_sup_compl.ies_nf_compl_preco = "2" OR
                     p_par_sup_compl.ies_nf_compl_preco = "4") AND
                     p_ies_entr_sem_ped = FALSE THEN
                    ERROR "Empresa nao permite entrada de NFE sem pedido de compra."
                    RETURN FALSE
                 END IF
              END IF
           END IF
        ELSE
           IF (p_pedidos[1,5] = "XXXXX") OR
              (p_pedidos IS NULL)        THEN
              IF p_ies_pagamento = "2" THEN
                 IF (p_par_sup_compl.ies_nf_compl_preco = "2" OR
                     p_par_sup_compl.ies_nf_compl_preco = "4") AND
                     p_ies_entr_sem_ped = FALSE THEN
                    ERROR "Empresa nao permite entrada de NFE sem pedido de compra."
                    RETURN FALSE
                 END IF
              END IF
           END IF
        END IF
     END IF
     IF p_dados_tela.ies_especie_nf <> "NFR" AND
        p_dados_tela.ies_especie_nf <> "NFD" AND
        p_dados_tela.ies_especie_nf <> "NFC" AND
        p_dados_tela.ies_especie_nf <> "CON" AND
        p_dados_tela.ies_especie_nf <> "NFE" THEN
        IF p_par_sup.ies_entrada_sem_pc = "N" AND
           p_ies_informou_ped = "N" AND
           p_ies_entr_sem_ped = FALSE THEN

           LET l_forn_possui_pc = TRUE
           IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
              LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
           END IF

           IF l_forn_possui_pc THEN
              IF find4GLFunction('supy23_valida_pc') THEN
                 IF supy23_valida_pc() = TRUE OR
                    (supy23_valida_pc() = FALSE AND sup0812_verifica_nota_transferencia(p_cod_empresa,
                                                                                        p_dados_tela.num_aviso_rec,
                                                                                        p_dados_tela.num_nf,
                                                                                        p_dados_tela.ser_nf,
                                                                                        p_dados_tela.ssr_nf,
                                                                                        p_dados_tela.cod_fornecedor,
                                                                                        p_dados_tela.cod_operacao,
                                                                                        p_dados_tela.cod_fiscal_compl) = FALSE) THEN
                    ERROR "Funcao nao permitida, empresa nao permite entrada sem Pedido de Compra"
                    RETURN FALSE
                 END IF
              END IF
           END IF
        ELSE
           IF l_funcao <> "MODIFICACAO" THEN
              IF p_dados_tela.ies_especie_nf = "NFM" AND m_controla_gao = "S" THEN
                 IF p_array_pedidos[1].num_pedido IS NULL OR
                    p_array_pedidos[1].num_pedido = " " THEN
                    CALL log0030_mensagem(" Função não permitida, NFM com controle de GAO exige pedido de compra","exclamation")
                    RETURN FALSE
                 END IF
              END IF
           END IF
        END IF
     END IF
  END IF

  RETURN TRUE
 END FUNCTION

#--------------------------------#
 FUNCTION sup376_processa_copia()
#--------------------------------#
 DEFINE p_ind_insert  SMALLINT,
        p_par_forn    CHAR(01),
        l_caminho     CHAR(100),
        l_item_wis    SMALLINT,
        l_sucesso     SMALLINT,
        l_status      SMALLINT,
        l_cfop_destino LIKE aviso_rec.cod_fiscal_item

 LET p_ind_insert = 0
 LET int_flag = 0
 LET p_houve_erro = 0

 LET m_num_ar_ant = p_dados_tela.num_aviso_rec

 SELECT *
   INTO p_nf_sup.*
   FROM nf_sup
  WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = m_num_ar_ant

 LET p_nf_sup.num_nf         = m_dados_copia.num_nf_dest
 LET p_nf_sup.ser_nf         = m_dados_copia.ser_nf_dest
 LET p_nf_sup.ssr_nf         = m_dados_copia.ssr_nf_dest
 #--inicio--vanderlei OS 332356 #
 LET p_nf_sup.cod_fornecedor     = m_dados_copia.fornec_dest
 LET p_nf_sup.ies_nf_aguard_nfe  = m_dados_copia.ies_nf_aguard_nfe_dest
 LET p_nf_sup.ies_incl_cap       = "N"
 LET p_nf_sup.ies_incl_contab    = "N"
 #---fim----vanderlei OS 332356 #
 LET p_nf_sup.dat_emis_nf    = TODAY
 LET p_nf_sup.dat_entrada_nf = TODAY
 LET p_houve_erro = FALSE
 LET p_nf_sup.num_conhec = 0
 LET p_nf_sup.ser_conhec = " "
 LET p_nf_sup.ssr_conhec = 0
 LET p_nf_sup.cod_transpor = 0

 LET p_dados_tela.ies_nf_aguard_nfe = p_nf_sup.ies_nf_aguard_nfe
 LET p_dados_tela.cod_fornecedor    = p_nf_sup.cod_fornecedor

 INITIALIZE l_status,
            p_ies_tip_entrada,
            m_ies_obj_entrada TO NULL

 CALL sup376_busca_cond_pgto_cap(p_nf_sup.cnd_pgto_nf)
 LET p_ies_pagamento = p_cond_pgto_cap.ies_pagamento

### OS 374310
 IF sup3760_verifica_copia_sem_pedido() = FALSE THEN
    RETURN
 END IF

 CALL log085_transacao("BEGIN")
 IF sup376_obtem_num_aviso_rec_copia() = FALSE THEN
    CALL log0030_mensagem(" Parametros não encontrados","exclamation")
    CALL log085_transacao("ROLLBACK")
    RETURN
 ELSE
    WHENEVER ERROR CONTINUE
        CALL log085_transacao("COMMIT")
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       LET p_msg = "Erro na efetivação dos dados. SQLCA.SQLCODE = ", sqlca.SQLCODE CLIPPED
       CALL log0030_mensagem(p_msg,"stop")
       CALL log085_transacao("ROLLBACK") #OS596059
       RETURN
    END IF
 END IF

### OS 374310
 LET p_nf_sup.num_aviso_rec  = p_dados_tela.num_aviso_rec

 CALL sup0686_retorna_tip_obj_entrada(p_dados_tela.cod_operacao,
                                      p_dados_tela.cod_fiscal_compl)
                                      RETURNING l_status,
                                                p_ies_tip_entrada,
                                                m_ies_obj_entrada

 WHILE TRUE
    MESSAGE " Aguarde ... Efetuando Copia  da Nota Fiscal ... " ATTRIBUTE(REVERSE)

    CALL log085_transacao("BEGIN")

    LET p_cont_aut_terc = FALSE
    LET p_aguarda_fatura = "N"

    LET p_ind = 0
    DECLARE cm_ar_copia CURSOR FOR
     SELECT *
       FROM aviso_rec
      WHERE cod_empresa   = p_cod_empresa
        AND num_aviso_rec = m_num_ar_ant
    FOREACH cm_ar_copia INTO p_aviso_rec.*
       LET p_ind = p_ind + 1

       LET p_array[p_ind].seq              = p_ind
       LET p_array[p_ind].cod_item         = p_aviso_rec.cod_item
       LET p_array[p_ind].qtd_declarad_nf  = p_aviso_rec.qtd_declarad_nf
       LET p_array[p_ind].cod_unid_med_nf  = p_aviso_rec.cod_unid_med_nf
       LET p_array[p_ind].pre_unit_nf      = p_aviso_rec.pre_unit_nf
       LET p_array[p_ind].val_liquido_item = p_aviso_rec.val_liquido_item
       LET p_array[p_ind].den_item         = p_aviso_rec.den_item
       LET p_array[p_ind].cod_cla_fisc_nf  = p_aviso_rec.cod_cla_fisc_nf
       LET p_array[p_ind].pct_ipi          = p_aviso_rec.pct_ipi_declarad

       CALL sup376_move_campos_ar_copia()

       LET p_aviso_rec.num_aviso_rec       = p_dados_tela.num_aviso_rec
       LET p_aviso_rec.num_seq             = p_ind
       LET p_aviso_rec.qtd_recebida        = 0
       LET p_aviso_rec.qtd_liber           = 0
       LET p_aviso_rec.qtd_liber_excep     = 0
       LET p_aviso_rec.qtd_rejeit          = 0
       LET p_aviso_rec.qtd_devolvid        = 0
       LET p_aviso_rec.val_devoluc         = 0
       LET p_aviso_rec.ies_liberacao_cont  = "N"

       IF p_dados_tela.ies_especie_nf <> "NFD" AND
          p_array_compl[p_ind].num_pedido > 0  THEN
          #ver
          CALL sup376_inclui_ar_ped()
       END IF

       LET p_parametros = NULL

       IF p_dados_tela.ies_especie_nf = "NFR" THEN
          LET p_par_forn = NULL
          CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor,
                                                  p_aviso_rec.cod_item,
                                                  p_dados_tela.dat_emis_nf,
                                                  p_dados_tela.num_aviso_rec) RETURNING p_par_forn

          IF p_par_forn = "3" THEN
             LET p_aguarda_fatura = "S"
          END IF

          IF p_par_forn = "1" THEN
             LET p_cont_aut_terc = TRUE
          END IF

          IF p_par_forn = "3" AND
             p_dados_tela.ies_nf_aguard_nfe <> "7" THEN #736225 Antonio/Carla
             IF sup376_gera_item_d_terc() = FALSE THEN
             END IF
             LET p_aviso_rec.ies_item_estoq = "N"
             LET p_aviso_rec.ies_situa_ar   = "C"
             LET p_aviso_rec.ies_liberacao_cont = "N"
             LET p_array_compl[p_ind].move_estoque = "N"
          ELSE
             CALL sup376_busca_parametros_item(p_array[p_ind].cod_item)
             LET p_parametros = p_item_parametro.parametros[2,2]
             IF p_parametros = "1" THEN
                LET p_aviso_rec.ies_item_estoq = "N"
                LET p_array_compl[p_ind].move_estoque = "N"
                LET p_array_compl[p_ind].ies_item_estoq = "N"
             ELSE
                IF p_dados_tela.ies_nf_aguard_nfe <> "4" AND
                   p_dados_tela.ies_nf_aguard_nfe <> "5" AND
                   (p_parametros <> "6" OR p_parametros IS NULL)THEN
                   ##Para não efetuar esta pergunta para cada item no processamente do cópia,
                   ##será atribuido o indicador de item estoque da nota fiscal que está sendo
                   ##copiada.
                   #IF log0040_confirm(18,10,"Este item deve ser movimentado na conta ESTOQUE?") THEN
                      LET p_array_compl[p_ind].move_estoque   = p_aviso_rec.ies_item_estoq
                      LET p_array_compl[p_ind].ies_item_estoq = p_aviso_rec.ies_item_estoq
                   #ELSE
                   #   LET p_array_compl[p_ind].move_estoque   = "N"
                   #   LET p_array_compl[p_ind].ies_item_estoq = "N"
                   #END IF
                ELSE
                   IF p_parametros = "6" THEN #OS 329662
                      IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
                         LET p_aviso_rec.ies_item_estoq = "N"
                         LET p_array_compl[p_ind].move_estoque = "N"
                         LET p_array_compl[p_ind].ies_item_estoq = "N"
                      ELSE
                         LET p_aviso_rec.ies_item_estoq = "S"
                         LET p_array_compl[p_ind].move_estoque = "S"
                         LET p_array_compl[p_ind].ies_item_estoq = "S"
                      END IF
                   ELSE
                      LET p_aviso_rec.ies_item_estoq = "N"
                      LET p_array_compl[p_ind].move_estoque = "N"
                      LET p_array_compl[p_ind].ies_item_estoq = "N"
                   END IF
                END IF
             END IF
             IF p_dados_tela.ies_nf_aguard_nfe = "T" THEN
                IF sup376_gera_item_d_terc() = FALSE THEN
                END IF
             END IF
          END IF
       ELSE
          IF p_dados_tela.ies_nf_aguard_nfe = "T" THEN
             IF sup376_gera_item_d_terc() = FALSE THEN
             END IF
          END IF
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "2" OR
          p_dados_tela.ies_nf_aguard_nfe = "5" THEN
          LET p_aviso_rec.ies_liberacao_insp = "S"
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
          LET p_aviso_rec.ies_item_estoq = "N"
          LET p_array_compl[p_ind].move_estoque = "N"
          LET p_array_compl[p_ind].ies_item_estoq = "N"
       END IF


       IF (p_parametros = "6" AND
         ((p_dados_tela.ies_nf_aguard_nfe = "A" AND
           m_contr_terc_no_dep = 'N') OR
          (p_dados_tela.ies_nf_aguard_nfe = "B" AND
           m_contr_terc_no_dep = 'S'))) THEN
          IF sup376_gera_item_d_terc() = FALSE THEN
          END IF
       END IF

       IF p_dados_tela.ies_especie_nf = "NFR" AND
          m_ies_obj_entrada = "99" THEN
          LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
       END IF

##### O.S. 245661
       IF p_dados_tela.ies_especie_nf = "NFR" THEN
          IF p_dados_tela.ies_nf_aguard_nfe = "4" THEN
             IF p_aviso_rec.ies_incid_icms_ite <> "E" THEN
                LET p_aviso_rec.gru_ctr_desp_item = p_cod_grp_desp_nfr
             END IF
             LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]

             IF m_pc_nf_consig = "S" THEN
                IF p_aviso_rec.num_oc IS NULL OR p_aviso_rec.num_oc = 0 THEN
                   LET p_houve_erro = TRUE
                   ERROR "Deverá ser informado pedido de compra (NF remessa consignacao)"
                   SLEEP 3
                   EXIT FOREACH
                END IF
#### DUVIDA PAULA - VER COM MARILDA (A PARTE ABAIXO ESTA SEM COMENTARIO PARA V0410 cliente 55
                {IF NOT sup3760_oc_consig_remessa(p_aviso_rec.num_oc) THEN
                   LET p_houve_erro = TRUE
                   ERROR "Ordem de compra ",p_aviso_rec.num_oc USING "<<<<<<<<&",
                         "deve ser de remessa de consignacao"
                   SLEEP 3
                   EXIT FOREACH
                END IF}
             END IF
          ELSE
             IF m_ies_obj_entrada = "99" AND
                p_dados_tela_f.val_tot_icms_nf_d = 0  AND
                p_dados_tela_f.val_ipi_nf        = 0   THEN
   ################### OS 180603
                IF  m_grupo_despesa_nfr = "S" AND p_dados_tela.ies_especie_nf = "NFR"
                AND (p_aviso_rec.num_oc = 0 OR p_aviso_rec.num_oc IS NULL) THEN
                   IF p_ies_pagamento = 3 THEN
                   ELSE
                      LET p_aviso_rec.gru_ctr_desp_item    = m_ies_obj_entrada
                   END IF
                ELSE
                   LET p_aviso_rec.gru_ctr_desp_item    = m_ies_obj_entrada
                END IF
             END IF
          END IF
       END IF

       IF p_dados_tela.ies_especie_nf = "NFR" AND
          p_dados_tela.ies_nf_aguard_nfe = "4" AND
          p_dados_tela_f.val_ipi_nf <> 0 AND
          (p_ies_obj_entrada_fisc = "3" OR p_ies_obj_entrada_fisc = "4") THEN
       ELSE
          IF p_dados_tela.ies_especie_nf = "NFR" AND
             p_ies_achou_itsup  = FALSE THEN
             LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
          ELSE
             IF (p_dados_tela.ies_especie_nf = "NFD" OR
                 p_ies_tip_entrada = "5") AND
                ((p_array_compl[p_ind].ies_tip_item = "C" OR
                  p_array_compl[p_ind].ies_tip_item = "B") OR
                  p_ies_achou_itsup = FALSE) THEN
                 LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
             END IF
          END IF
       END IF
       IF p_ies_cfop99 = "S" AND
          m_ies_obj_entrada = "99" THEN
          LET p_aviso_rec.cod_fiscal_item[3,5] = p_dados_tela.cod_operacao[3,5]
          LET p_aviso_rec_compl_sq.cod_fiscal_compl  = p_dados_tela.cod_fiscal_compl
       END IF

       # Inicio chamado 740.538
       WHENEVER ERROR CONTINUE
       SELECT cod_lin_prod, cod_lin_recei, cod_seg_merc, cod_cla_uso
         INTO p_array_compl[p_ind].cod_lin_prod, p_array_compl[p_ind].cod_lin_recei,
              p_array_compl[p_ind].cod_seg_merc, p_array_compl[p_ind].cod_cla_uso
         FROM item
        WHERE cod_empresa = p_cod_empresa
          AND cod_item    = p_aviso_rec.cod_item
       WHENEVER ERROR STOP

       IF SQLCA.SQLCODE <> 0 THEN
          CALL log003_err_sql("SELECT","ITEM")
       END IF
       # Fim chamado 740.538

       CALL sup376_inclui_dest_entrega(p_array[p_ind].val_liquido_item)

       IF p_dados_tela.ies_especie_nf = "NFR" OR
          p_dados_tela.ies_especie_nf = "NFD" OR
          p_dados_tela.ies_especie_nf = "NFC" THEN

          LET p_aviso_rec.ies_liberacao_ar = "2"
          LET p_aviso_rec.ies_diverg_listada = "S"
          IF p_array_compl[p_ind].move_estoque = "S" THEN
             LET p_aviso_rec.ies_situa_ar = "C"
             LET p_aviso_rec.ies_item_estoq   = "S"
             LET p_aviso_rec.ies_liberacao_ar = "1"
          END IF
       END IF

       #--------------------class. fiscal-----------------------#
       IF p_aviso_rec.ies_item_estoq = "N" THEN
          IF p_aviso_rec.cod_cla_fisc_nf IS NOT NULL AND
             p_aviso_rec.cod_cla_fisc_nf <> " " THEN
             LET p_aviso_rec.cod_cla_fisc = p_aviso_rec.cod_cla_fisc_nf
          END IF
       END IF

       IF p_aviso_rec.num_oc <> 0 THEN
          LET p_cod_secao_rec = NULL
          INITIALIZE p_ordem_sup.* TO NULL
          CALL sup3762_busca_ordem_sup(p_aviso_rec.cod_empresa,
                                      p_aviso_rec.num_oc)
          LET p_cod_secao_rec    = p_ordem_sup.cod_secao_receb
          IF p_array_compl[p_ind].move_estoque IS NULL OR
             p_array_compl[p_ind].move_estoque = " " THEN
             LET p_ies_item_estoq = p_ordem_sup.ies_item_estoq
          ELSE
             LET p_ies_item_estoq = p_array_compl[p_ind].move_estoque
          END IF

          LET p_ies_insp_recebto = p_ordem_sup.ies_insp_recebto
          IF p_cod_secao_rec IS NOT NULL AND
             p_cod_secao_rec <> " " THEN
             LET p_aviso_rec.cod_local_estoq = p_cod_secao_rec
          END IF
          LET p_aviso_rec.ies_item_estoq = p_ies_item_estoq
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "5" THEN
          LET p_aviso_rec.ies_liberacao_cont = "N"
          LET p_aviso_rec.ies_liberacao_insp = "S"
          LET p_aviso_rec.ies_situa_ar       = "E"
          LET p_aviso_rec.qtd_recebida       = p_aviso_rec.qtd_declarad_nf
       ELSE
          CALL sup376_analisa_contagem_inspecao()
       END IF

       IF p_aviso_rec.num_oc <> 0 THEN
          IF p_aviso_rec.ies_item_estoq = "N" THEN
#### OS 286425 - NFR consignacao com OC relacionada (obedece inspecao cadastrada para material)
             IF p_ies_insp_recebto IS NOT NULL AND
                ((p_ies_insp_recebto <> "4") OR
                 (p_ies_insp_recebto = "4" AND
                 p_dados_tela.ies_nf_aguard_nfe = "4")) THEN
                LET p_aviso_rec.ies_liberacao_insp = "N"
                LET p_aviso_rec.ies_liberacao_cont = "N"
                IF p_par_sup_compl.ies_conta_ok_n_est = "2" OR
                  (p_par_sup_compl.ies_conta_ok_n_est = "3" AND
                   p_dados_tela.ies_especie_nf = "NFS") THEN
                   LET p_aviso_rec.ies_situa_ar = "I"
                ELSE
                   LET p_aviso_rec.ies_situa_ar = "C"
                END IF
             ELSE
                LET p_aviso_rec.ies_liberacao_insp = "S"
             END IF
          END IF
       END IF

       IF p_dados_tela.ies_especie_nf = "NFM" THEN
          LET p_aviso_rec.ies_situa_ar = "E"
          LET p_aviso_rec.ies_item_estoq = "N"
       END IF

       IF p_dados_tela.ies_nf_aguard_nfe = "4"
       THEN LET p_aviso_rec.ies_item_estoq = "N"
       END IF

       IF p_aviso_rec.ies_tip_incid_ipi IS NULL THEN
          LET p_aviso_rec.ies_tip_incid_ipi = " "
       END IF

       CALL sup3760_verifica_codigo_fiscal_item(p_dados_tela.cod_operacao,
                                                p_dados_tela.ies_nf_aguard_nfe)

       IF p_dados_tela.ies_nf_aguard_nfe = "5" AND
          p_dados_tela.ies_especie_nf = "NFC" THEN
          CALL sup3760_busca_grupo_X_tipo_despesa()
       END IF

       CALL sup3760_verifica_cfop_destino(p_dados_tela.cod_operacao)
            RETURNING p_status, l_cfop_destino

       IF p_status THEN
          LET p_aviso_rec.cod_fiscal_item = l_cfop_destino
       END IF

       CALL sup3760_verifica_insp_nfr()

       WHENEVER ERROR CONTINUE
       INSERT INTO aviso_rec VALUES (p_aviso_rec.*)
       WHENEVER ERROR STOP

       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INCLUSAO","AVISO_REC")
          LET p_houve_erro = TRUE
          EXIT FOREACH
       ELSE

          IF m_cred_st_fat = "S"    #OS. 479344
          OR m_cred_st_fat = "E" THEN
             IF NOT sup2621_verifica_nota_transferencia(p_aviso_rec.*, p_dados_tela.cod_fornecedor) THEN
             END IF
          END IF                    #OS. 479344

          IF NOT sup1031_grava_audit_ar(p_aviso_rec.num_aviso_rec,
                                        p_aviso_rec.num_seq,
                                        "SUP3760","1") THEN
             LET p_houve_erro = TRUE
             EXIT FOREACH
          END IF

          IF find4GLFunction('supy23_atualiza_oc_pd_fluxo_caixa') THEN
             IF NOT supy23_atualiza_oc_pd_fluxo_caixa(p_ordem_sup.cod_empresa,
                                                      p_ordem_sup.cod_item,
                                                      p_ordem_sup.num_oc,
                                                      p_ordem_sup.cod_fornecedor,
                                                      p_ordem_sup.cnd_pgto,
                                                      p_ordem_sup.cod_mod_embar,
                                                      p_ordem_sup.cod_moeda,
                                                      p_aviso_rec.pre_unit_nf) THEN
                LET p_houve_erro = TRUE
                EXIT FOREACH
             END IF
          END IF

          IF m_gera_rsv_transf = "S" AND
             p_dados_tela.ies_nf_aguard_nfe  = "8" THEN
             CALL sup3760_carrega_strib_nfe()
          END IF
       END IF

       LET p_aviso_rec_compl_sq.cod_empresa       = p_aviso_rec.cod_empresa
       LET p_aviso_rec_compl_sq.cod_empresa_estab = p_aviso_rec.cod_empresa_estab
       LET p_aviso_rec_compl_sq.num_aviso_rec     = p_aviso_rec.num_aviso_rec
       LET p_aviso_rec_compl_sq.num_seq           = p_aviso_rec.num_seq
       LET p_aviso_rec_compl_sq.val_base_d_ipi_it = 0
       IF p_aviso_rec_compl_sq.cod_fiscal_compl IS NULL THEN
          LET p_aviso_rec_compl_sq.cod_fiscal_compl = 0
       END IF
       INSERT INTO aviso_rec_compl_sq VALUES (p_aviso_rec_compl_sq.*)
       IF sqlca.sqlcode <> 0  THEN
          CALL log003_err_sql("INCLUSAO","AVISO_REC_COMPL_SQ")
          LET p_houve_erro = TRUE
       END IF

       IF p_nfe_import = TRUE THEN
          IF NOT sup376_rateio_desp_aces() THEN
             LET p_houve_erro = TRUE
             EXIT FOREACH
          END IF
          CALL sup376_grava_aviso_rec_proc_imp()

          IF p_dados_tela.dat_entrada_nf >= "01/05/2004" THEN
              CALL sup3760_grava_ar_piscofim()
              IF p_houve_erro = TRUE THEN
                 EXIT FOREACH
              END IF
          END IF
       END IF

       IF p_nfm_import = TRUE THEN
           WHENEVER ERROR CONTINUE
           INSERT INTO sup_par_ar (empresa          ,
                                   aviso_recebto    ,
                                   seq_aviso_recebto,
                                   parametro        ,
                                   par_ind_especial ,
                                   parametro_texto  ,
                                   parametro_val    ,
                                   parametro_dat    )
           																							VALUES (p_cod_empresa,
                                          p_dados_tela.num_aviso_rec,
                                          p_ind,
                                          "valor_ii",
                                          NULL,
                                          NULL,
                                          p_array_imp[p_ind].val_ii,
                                          NULL)
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              LET p_houve_erro = TRUE
              EXIT FOREACH
           END IF
       END IF

       {awc}
       CALL sup376_gera_iss()

       IF p_nf_sup.ies_especie_nf = "NFM" THEN
          IF p_aviso_rec.cod_item IS NULL OR
             p_aviso_rec.cod_item =  " "  THEN
             EXIT FOREACH
          ELSE
            WHENEVER ERROR CONTINUE
             INSERT INTO nf_pend VALUES(p_cod_empresa, m_dados_copia.num_nf_dest,
                                        m_dados_copia.ser_nf_dest, m_dados_copia.ssr_nf_dest,
                                        m_dados_copia.fornec_dest,
                                        p_aviso_rec.cod_item,
                                        p_aviso_rec.qtd_declarad_nf, 0, NULL,
                                        TODAY)
            WHENEVER ERROR STOP
            IF sqlca.sqlcode = -239 OR
               SQLCA.sqlcode = -268 THEN
               UPDATE nf_pend
                  SET qtd_recebida = qtd_recebida + p_aviso_rec.qtd_declarad_nf
                WHERE cod_empresa    = p_cod_empresa
                  AND num_nf         = m_dados_copia.num_nf_dest
                  AND ser_nf         = m_dados_copia.ser_nf_dest
                  AND ssr_nf         = m_dados_copia.ssr_nf_dest
                  AND cod_fornecedor = m_dados_copia.fornec_dest
                  AND cod_item       = p_aviso_rec.cod_item
            END IF
          END IF
       END IF
    END FOREACH
    #Para cada AR

    ### Gravando/atualizando item_de_terc para transferencia de beneficiamento ###
    IF (p_dados_tela.cod_emp_benef IS NOT NULL AND
        p_dados_tela.cod_emp_benef <> " ") AND m_transf_saida <> "S" THEN

       CALL log120_procura_caminho("sup2480") RETURNING comando3
       LET comando3 = comando3 CLIPPED          ," ",
                      p_cod_empresa             ," ",
                      p_dados_tela.cod_emp_benef," ",
                      p_dados_tela.num_nf
       RUN comando3 RETURNING p_cancel
    END IF

    #-----------------inclusao de ar complementar--------------#
    LET p_aviso_rec_compl.cod_empresa     = p_cod_empresa
    LET p_aviso_rec_compl.num_aviso_rec   = p_dados_tela.num_aviso_rec
    LET p_aviso_rec_compl.cod_transpor    = NULL
    LET p_aviso_rec_compl.den_transpor    = NULL
    LET p_aviso_rec_compl.num_placa_veic  = NULL
    LET p_aviso_rec_compl.num_di          = NULL

    IF g_ies_transf_benef = FALSE OR
       g_ies_transf_benef IS NULL THEN
       IF p_ies_cod_operac IS NULL OR
          p_ies_cod_operac = "N" OR
          p_ies_cod_operac = " " THEN
          LET p_dados_tela.cod_operac_estoq = " "
       END IF
    END IF

    IF p_dados_tela.cod_operacao[1] = "5" THEN
       LET p_cod_fiscal_c = "1.",p_dados_tela.cod_operacao[3,5]
    END IF

    IF p_dados_tela.cod_operacao[1] = "6" THEN
       LET p_cod_fiscal_c = "2.",p_dados_tela.cod_operacao[3,5]
    END IF

    IF p_dados_tela.cod_operacao[1] = "7" THEN
       LET p_cod_fiscal_c = "3.",p_dados_tela.cod_operacao[3,5]
    END IF

    IF p_dados_tela.cod_fiscal_compl IS NULL THEN
       LET p_dados_tela.cod_fiscal_compl = 0
    END IF

    IF sup0812_verifica_nota_transferencia(p_cod_empresa,
                                           p_dados_tela.num_aviso_rec,
                                           p_dados_tela.num_nf,
                                           p_dados_tela.ser_nf,
                                           p_dados_tela.ssr_nf,
                                           p_dados_tela.cod_fornecedor,
                                           p_dados_tela.cod_operacao,
                                           p_dados_tela.cod_fiscal_compl) = TRUE AND
       p_dados_tela.cod_operacao[1,1] <> "3" THEN
       IF p_dados_tela.cod_operac_estoq IS NULL OR
          p_dados_tela.cod_operac_estoq = " " THEN
          LET p_dados_tela.cod_operac_estoq = p_oper_trans_unid
       END IF
       IF p_ies_obt_inf_com = "S" THEN
          LET p_aviso_rec_compl.cod_empresa_orig = p_cod_emp_transf
       END IF
    END IF
    ### OS 186311
    IF p_dados_tela.ies_nf_aguard_nfe = "P" THEN
       IF p_dados_tela.cod_operac_estoq IS NULL OR
          p_dados_tela.cod_operac_estoq = " " THEN
          LET p_dados_tela.cod_operac_estoq = g_operac_permuta
       END IF
    END IF

    LET p_aviso_rec_compl.cod_operacao = p_dados_tela.cod_operac_estoq

    INITIALIZE p_aviso_rec_compl.cod_moeda_forn TO NULL
    IF p_ies_indexacao = "N" THEN
       IF p_cod_moeda_ped IS NOT NULL AND
          p_par_con.cod_moeda_padrao <> p_cod_moeda_ped AND
          p_fornecedor.cod_pais = p_cod_pais_emp THEN
          LET p_aviso_rec_compl.cod_moeda_forn = p_cod_moeda_ped
       END IF
    ELSE
       LET p_aviso_rec_compl.cod_moeda_forn = p_cod_moeda_ped #798794#
    END IF

    IF p_aviso_rec_compl.cod_moeda_forn = 0 THEN
       LET p_aviso_rec_compl.cod_moeda_forn = NULL
    END IF

    LET p_aviso_rec_compl.cod_fiscal_compl = p_dados_tela.cod_fiscal_compl
    LET p_aviso_rec_compl.ies_situacao     = "N"
    IF p_aviso_rec_compl.cod_fiscal_compl IS NULL THEN
       LET p_aviso_rec_compl.cod_fiscal_compl = 0
    END IF
    # OS 489183 #
    LET p_aviso_rec_compl.ies_situacao = "N"
    IF p_nfe_import = TRUE THEN
       LET p_aviso_rec_compl.num_di = p_processo_imp.num_di
    END IF
    # OS 489183 #
    INSERT INTO aviso_rec_compl VALUES (p_aviso_rec_compl.*)
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("INCLUSAO","AVISO_REC_COMPL")
       LET p_houve_erro = TRUE
    END IF

    IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
       IF p_processo_imp.num_aviso_rec IS NULL OR
          p_processo_imp.num_aviso_rec = " " THEN
          UPDATE processo_imp
             SET num_aviso_rec = p_dados_tela.num_aviso_rec,
                 ies_situacao = "5"
           WHERE cod_empresa  = p_processo_imp.cod_empresa
             AND num_processo = p_processo_imp.num_processo
             AND num_versao   = p_processo_imp.num_versao
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("ATUALIZACAO","PROCESSO_IMP")
             LET p_houve_erro = TRUE
          END IF
       END IF
    END IF

    IF sup376_inclusao_nf_sup_copia()  THEN
       LET p_dados_tela.* = p_dados_telar.*
       IF p_ies_cod_operac = "S" THEN
       ELSE
          LET p_dados_tela.cod_operac_estoq = NULL
       END IF
       IF p_ies_cod_operac = "S" THEN
       ELSE
          LET p_dados_tela.cod_operac_estoq = p_dados_telar.cod_operac_estoq
       END IF
       LET p_ies_cons = FALSE

       CALL sup376_verifica_inclusao_vencimento_nff()

       #--#796313 - Espindola - Projeto Totvs Colaboracao #--#
       #--#Atualiza monitor de integracao (caso existir documento)
       IF m_utiliz_totvs_colab = "S" THEN
          IF NOT sup13429_integra_erp_monitor(p_nf_sup.cod_empresa,    p_nf_sup.num_nf,
                                              p_nf_sup.ser_nf,         p_nf_sup.ssr_nf,
                                              p_nf_sup.cod_fornecedor, p_nf_sup.dat_emis_nf,
                                              "INCLUSAO") THEN
             LET p_houve_erro = TRUE
          END IF
       END IF
       WHENEVER ERROR CONTINUE
       SELECT empresa
         FROM nf_sup_erro
        WHERE nf_sup_erro.empresa            = p_cod_empresa
          AND nf_sup_erro.num_aviso_rec      = p_nf_sup.num_aviso_rec
          AND nf_sup_erro.num_seq            = 0
          AND nf_sup_erro.des_pendencia_item = "Falta efetuar consistencia"
          AND nf_sup_erro.ies_origem_erro    = "1"
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = NOTFOUND THEN

          WHENEVER ERROR CONTINUE
          INSERT INTO nf_sup_erro (empresa,
                                   num_aviso_rec,
                                   num_seq,
                                   des_pendencia_item,
                                   ies_origem_erro,
                                   ies_erro_grave)
                           VALUES (p_cod_empresa,
                                   p_nf_sup.num_aviso_rec,
                                   0,
                                   "Falta efetuar consistencia",
                                   "1",
                                   "S")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET p_houve_erro = TRUE
          END IF
       END IF

       #FLUXO DE CAIXA
       IF NOT fcl1150_integra_ar_fcx(p_cod_empresa,
                                     p_nf_sup.num_aviso_rec,"IN") THEN
          LET p_houve_erro = TRUE
       END IF
       EXIT WHILE
    ELSE
       INITIALIZE p_array TO NULL
       INITIALIZE p_dados_tela.*, p_cod_ret_imp TO NULL
       INITIALIZE p_dados_telar.* TO NULL
       INITIALIZE p_formonly.* TO NULL
       INITIALIZE p_formonlyr.* TO NULL
       LET p_formonly.* = p_formonlyr.*
       IF m_pc_nf_consig = "N" THEN
          MESSAGE " NOTA DE REMESSA DE CONSIGNACAO NAO PODE TER ORDEM/PEDIDO RELACIONADA " ATTRIBUTE(REVERSE)
       END IF
       CLEAR FORM
       CALL log085_transacao("ROLLBACK")
       RETURN
    END IF
 END WHILE

 #--inicio--vanderlei OS 383999 #
 IF NOT sup0064_controla_grade_dimensional(p_cod_empresa,
                                           p_aviso_rec.cod_item,
                                           p_nf_sup.num_aviso_rec,
                                           p_aviso_rec.num_seq) THEN
    LET p_houve_erro = 1
 END IF
 #---fim----vanderlei OS 383999 #

 IF p_houve_erro = FALSE THEN
    WHENEVER ERROR CONTINUE
        CALL log085_transacao("COMMIT")
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       LET p_msg = "Erro na efetivação dos dados. SQLCA.SQLCODE = ", sqlca.SQLCODE CLIPPED
       CALL log0030_mensagem(p_msg,"stop")
       CALL log085_transacao("ROLLBACK") #OS596059
       RETURN
    ELSE
       IF p_nfe_import = TRUE THEN
          CALL imp0024_mov_even(p_cod_empresa,p_processo_imp.num_processo,
                                27," ",TODAY)
       END IF
       IF sup3760_informa_peso() = TRUE THEN
          IF m_peso_nf IS NOT NULL AND
             m_peso_nf <> " " THEN
             DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
             DISPLAY "Peso NF: ", m_peso_nf ," "       AT 21,02 ATTRIBUTE(REVERSE)
          ELSE
             DISPLAY "                           "  AT 21,02
          END IF
       ELSE
          INITIALIZE m_peso_nf TO NULL
          DISPLAY "                           "  AT 21,02
       END IF
       MESSAGE " Inclusao da NOTA FISCAL efetuada com sucesso. "
       ATTRIBUTE(REVERSE)
       CALL sup376_funcoes_apos_inclusao()
       CALL log006_exibe_teclas("01", p_versao)
       #DISPLAY BY NAME p_dados_tela.*
       #CURRENT WINDOW IS w_sup37601
       #CALL sup376_exibe_array()
    END IF
 ELSE
    ERROR "Houveram problemas no processamento "
     DISPLAY "                                                             "  AT 9,11
    MESSAGE " Inclusao Cancelada. "
    CALL log085_transacao("ROLLBACK")
 END IF

 END FUNCTION

#-------------------------------------------#
 FUNCTION sup376_obtem_num_aviso_rec_copia()
#-------------------------------------------#
 DEFINE l_prx_num_ar LIKE par_sup_pad.par_val

 INITIALIZE m_dat_hor_proces TO NULL

 WHENEVER ERROR CONTINUE
 DECLARE cm_par_sup1 CURSOR FOR
  SELECT par_val INTO p_dados_tela.num_aviso_rec
    FROM par_sup_pad
   WHERE cod_empresa = p_cod_empresa
     AND cod_parametro = "num_prx_ar"
 FOR UPDATE
 OPEN cm_par_sup1
 FETCH cm_par_sup1
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    IF p_dados_tela.num_aviso_rec > 999998 THEN
       LET l_prx_num_ar = 1
    ELSE
       LET l_prx_num_ar = p_dados_tela.num_aviso_rec + 1
    END IF
    WHENEVER ERROR CONTINUE
    UPDATE par_sup_pad
       SET par_val = l_prx_num_ar
     WHERE CURRENT OF cm_par_sup1
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("MODIFICACAO","PAR_SUP_PAD")
       CLOSE cm_par_sup1
       RETURN FALSE
    ELSE
       LET m_dat_hor_proces = CURRENT
       CLOSE cm_par_sup1
       RETURN TRUE
    END IF
 ELSE
    CALL log003_err_sql("LEITURA","PAR_SUP_PAD")
    CLOSE cm_par_sup1
    RETURN FALSE
 END IF
 END FUNCTION

### OS 374310
#-------------------------------------------#
 FUNCTION sup3760_verifica_copia_sem_pedido()
#-------------------------------------------#
 DEFINE l_ies_compl_preco  LIKE par_sup_compl.ies_nf_compl_preco,
        l_ies_entrada_s_pc LIKE par_sup.ies_entrada_sem_pc

 INITIALIZE l_ies_compl_preco, l_ies_entrada_s_pc TO NULL

 WHENEVER ERROR CONTINUE
 SELECT ies_entrada_sem_pc
   INTO l_ies_entrada_s_pc
   FROM par_sup
  WHERE cod_empresa = p_cod_empresa
 WHENEVER ERROR STOP

 WHENEVER ERROR CONTINUE
 SELECT ies_nf_compl_preco
   INTO l_ies_compl_preco
   FROM par_sup_compl
  WHERE cod_empresa = p_cod_empresa
 WHENEVER ERROR STOP

 IF p_dados_tela.ies_especie_nf = "NFC" THEN
    IF p_ies_pagamento = "2" THEN
       IF (l_ies_compl_preco = "3" OR
           l_ies_compl_preco = "4") THEN
          ERROR "Empresa não permite entrada de NFC sem pedido de compra."
          RETURN FALSE
       END IF
    END IF
 END IF
 IF p_dados_tela.ies_especie_nf = "NFE" THEN
    IF p_ies_pagamento = "2" THEN
       IF (l_ies_compl_preco = "2" OR
           l_ies_compl_preco = "4") THEN
           ERROR "Empresa não permite entrada de NFE sem pedido de compra."
          RETURN FALSE
       END IF
    END IF
 END IF
 IF p_dados_tela.ies_especie_nf <> "NFR" AND
    p_dados_tela.ies_especie_nf <> "NFD" AND
    p_dados_tela.ies_especie_nf <> "NFC" AND
    p_dados_tela.ies_especie_nf <> "CON" AND
    p_dados_tela.ies_especie_nf <> "NFE" THEN
    IF l_ies_entrada_s_pc = "N" THEN
       ERROR "Empresa não permite entrada de nota sem pedido de compra."
       RETURN FALSE
    ELSE
       IF p_dados_tela.ies_especie_nf = "NFM" AND m_controla_gao = "S" THEN
          IF p_array_pedidos[1].num_pedido IS NULL OR
             p_array_pedidos[1].num_pedido = " " THEN
             CALL log0030_mensagem(" Função não permitida, NFM com controle de GAO exige pedido de compra","exclamation")
             RETURN FALSE
          END IF
       END IF
    END IF
 END IF

 RETURN TRUE
 END FUNCTION

#----------------------------------------------#
 FUNCTION sup376_contagem_custo_diario(l_tipo)
#----------------------------------------------#
 DEFINE l_cont SMALLINT,
        l_tipo SMALLINT

 LET l_cont = 0

 IF m_ies_custo_medio = "D" THEN
    CASE l_tipo
       WHEN 1
         SELECT COUNT(*)
           INTO l_cont
           FROM aviso_rec
          WHERE aviso_rec.cod_empresa        = p_cod_empresa
            AND aviso_rec.num_aviso_rec      = p_dados_tela.num_aviso_rec
            AND aviso_rec.ies_liberacao_cont = "S"
            AND aviso_rec.ies_item_estoq     = "S"
           #ja fez contagem nao deixa modificar
         IF sqlca.sqlcode = 100 OR l_cont IS NULL THEN
            LET l_cont = 0
         END IF
         IF l_cont > 0 THEN
            ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
            RETURN TRUE
         END IF
      WHEN 2
         SELECT num_aviso_rec
           FROM aviso_rec
          WHERE aviso_rec.cod_empresa        = p_cod_empresa
            AND aviso_rec.num_aviso_rec      = p_dados_tela.num_aviso_rec
            AND aviso_rec.num_seq            = p_array[p_ind].seq
            AND aviso_rec.ies_liberacao_cont = "S"
            AND aviso_rec.ies_item_estoq     = "S"
           #ja fez contagem nao deixa modificar
         IF sqlca.sqlcode = 0 THEN
            ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
            RETURN TRUE
         END IF
    END CASE
 END IF

 RETURN FALSE

 END FUNCTION

#-------------------------------#
 FUNCTION sup376_aprov_tecnica()
#-------------------------------#
 DEFINE l_cont SMALLINT

 LET l_cont = 0
 WHENEVER ERROR CONTINUE
 SELECT COUNT(*)
   INTO l_cont
   FROM um_aprov_tecnica
  WHERE cod_empresa = p_cod_empresa
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR
    l_cont IS NULL THEN
    LET l_cont = 0
 END IF

 IF l_cont = 0 THEN
    RETURN FALSE
 END IF

 RETURN TRUE

 END FUNCTION
#-----------------------------------#
 FUNCTION sup376_cond_pgto_com_pag()
#-----------------------------------#
 DEFINE l_tipo CHAR(01)

 LET l_tipo = " "
 SELECT ies_pagamento
   INTO l_tipo
   FROM cond_pgto_cap
  WHERE cnd_pgto = p_dados_tela.cnd_pgto_nf
 IF sqlca.sqlcode = 100 THEN
    ERROR " Condicao de pagamento nao cadastrada CAP "
 END IF

 IF l_tipo = "2" THEN
    RETURN TRUE
 END IF

 RETURN FALSE

 END FUNCTION

#--------------------------------------#
 FUNCTION sup3760_verifica_nf_transf()
#--------------------------------------#
  DEFINE l_cod_fiscal          LIKE cod_fiscal_sup.cod_fiscal,
         l_ies_tip_entrada     LIKE cod_fiscal_sup.ies_tip_entrada,
         l_status              SMALLINT

  LET l_cod_fiscal = p_dados_tela.cod_operacao
  IF p_dados_tela.cod_operacao[1] = "5" THEN
     LET l_cod_fiscal[1,2] = "1."
  END IF
  IF p_dados_tela.cod_operacao[1] = "6" THEN
     LET l_cod_fiscal[1,2] = "2."
  END IF
  IF p_dados_tela.cod_operacao[1] = "7" THEN
     LET l_cod_fiscal[1,2] = "3."
  END IF

  INITIALIZE l_ies_tip_entrada TO NULL
  CALL sup0686_retorna_tipo_entrada(l_cod_fiscal,
                                    p_dados_tela.cod_fiscal_compl)
                                    RETURNING l_status,
                                              l_ies_tip_entrada
  WHENEVER ERROR STOP

  IF l_ies_tip_entrada = "2" THEN
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#-------------------------------------#
 FUNCTION sup376_exibe_dados_pesagem()
#-------------------------------------#
 DEFINE l_ind               SMALLINT,
        l_peso_liquido      LIKE sup_ctr_balanca.qtd_peso_entrada,
        l_peso_entrada      LIKE sup_ctr_balanca.qtd_peso_entrada,
        l_peso_saida        LIKE sup_ctr_balanca.qtd_peso_saida,
        l_seq_pesagem       LIKE sup_ctr_balanca.sequencia_pesagem,
        l_seq_nf            LIKE sup_ctr_balanca.seq_nota_fiscal,
        l_cod_item          LIKE sup_ctr_balanca.item,
        l_pesagem_entr      LIKE sup_ctr_balanca.pesagem_entrada,
        l_pesagem_sai       LIKE sup_ctr_balanca.pesagem_saida,
        la_array        ARRAY[999] OF RECORD
                                         seq              LIKE aviso_rec.num_seq,
                                         cod_item         LIKE aviso_rec.cod_item,
                                         cod_unid_med_nf  LIKE item.cod_unid_med,
                                         qtd_declarad_nf  LIKE aviso_rec.qtd_declarad_nf,
                                         qtd_pesagem      LIKE sup_ctr_balanca.qtd_peso_entrada,
                                         seq_pesagem      LIKE sup_ctr_balanca.sequencia_pesagem,
                                         den_item         LIKE item.den_item,
                                         pesagem_entrada  LIKE sup_ctr_balanca.pesagem_entrada,
                                         pesagem_saida    LIKE sup_ctr_balanca.pesagem_saida
                                      END RECORD
 LET l_ind = 1

 DECLARE cq_busca_peso CURSOR FOR
    SELECT qtd_peso_entrada,
           qtd_peso_saida,
           sequencia_pesagem,
           seq_nota_fiscal,
           item,
           pesagem_entrada,
           pesagem_saida
      FROM sup_ctr_balanca
     WHERE empresa           = p_cod_empresa
       AND num_docum         = p_nf_sup.num_nf
       AND serie_nota_fiscal = p_nf_sup.ser_nf
       AND subserie_nf       = p_nf_sup.ssr_nf
       AND fornecedor        = p_nf_sup.cod_fornecedor
       AND seq_nota_fiscal   > 0
       AND tip_pesagem       = "1"
       AND aviso_recebto     IS NOT NULL
 FOREACH cq_busca_peso INTO l_peso_entrada,
                            l_peso_saida,
                            l_seq_pesagem,
                            l_seq_nf,
                            l_cod_item,
                            l_pesagem_entr,
                            l_pesagem_sai

    SELECT qtd_declarad_nf
      INTO la_array[l_ind].qtd_declarad_nf
      FROM aviso_rec
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_nf_sup.num_aviso_rec
       AND num_seq       = l_seq_nf

    LET la_array[l_ind].seq             = l_seq_nf
    LET la_array[l_ind].cod_item        = l_cod_item

    LET l_peso_liquido = l_peso_entrada - l_peso_saida
    LET la_array[l_ind].qtd_pesagem     = l_peso_liquido
    LET la_array[l_ind].seq_pesagem     = l_seq_pesagem
    LET la_array[l_ind].pesagem_entrada = l_pesagem_entr
    LET la_array[l_ind].pesagem_saida   = l_pesagem_sai

    SELECT den_item_reduz,
           cod_unid_med
      INTO la_array[l_ind].den_item,
           la_array[l_ind].cod_unid_med_nf
      FROM item
     WHERE cod_empresa = p_cod_empresa
       AND cod_item    = l_cod_item

    LET l_ind = l_ind + 1
 END FOREACH

 CALL log006_exibe_teclas("01 02 17 18", p_versao)
 CALL log130_procura_caminho("sup37610") RETURNING comando3
 OPEN WINDOW w_sup37610 AT 06,02 WITH FORM comando3
      ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, FORM LINE 1)
 CALL set_count(999)
 DISPLAY ARRAY la_array TO s_sup37610.*

 IF int_flag  THEN
    LET int_flag = 0
 ELSE
    LET l_ind = arr_curr()
 END IF

 CLOSE WINDOW w_sup37610
 END FUNCTION

#--------------------------------------------#
 FUNCTION sup3760_oc_consig_remessa(l_num_oc)
#--------------------------------------------#
  DEFINE l_num_oc          LIKE ordem_sup.num_oc,
         l_cod_tip_despesa LIKE ordem_sup.cod_tip_despesa,
         l_gru_ctr_desp    LIKE ordem_sup.gru_ctr_desp

  IF  p_tip_desp_cons_fat = 0 AND m_cod_tip_desp_cons = 0
  AND p_cod_grp_desp_nfr  = 0 AND m_cod_grp_desp_fat  = 0 THEN
     RETURN FALSE
  END IF

  WHENEVER ERROR CONTINUE
  SELECT cod_tip_despesa, gru_ctr_desp
    INTO l_cod_tip_despesa, l_gru_ctr_desp
    FROM ordem_sup
   WHERE cod_empresa      = p_cod_empresa
     AND num_oc           = l_num_oc
     AND ies_versao_atual = "S"
  WHENEVER ERROR STOP

  IF l_cod_tip_despesa = m_cod_tip_desp_cons
  OR l_gru_ctr_desp    = p_cod_grp_desp_nfr THEN
     RETURN TRUE
  END IF

  RETURN FALSE
 END FUNCTION

#------------------------------------#
 FUNCTION sup3760_verifica_inspecao()
#------------------------------------#
  DEFINE l_cont         SMALLINT
  LET l_cont = 0
  SELECT count(*)
    INTO l_cont
    FROM aviso_rec, nf_sup
   WHERE aviso_rec.cod_empresa   = nf_sup.cod_empresa
     AND aviso_rec.num_aviso_rec = nf_sup.num_aviso_rec
     AND aviso_rec.cod_empresa   = p_cod_empresa
     AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
     AND ((aviso_rec.ies_item_estoq     = "S" AND
           aviso_rec.ies_liberacao_cont = "S")
      OR  nf_sup.ies_incl_contab       IN ("S","M"))
  IF l_cont > 0 THEN
     RETURN TRUE
  END IF
  RETURN FALSE
 END FUNCTION

#------------------------------------------#
 FUNCTION  sup376_verifica_interf_ent_wms()
#------------------------------------------#

WHENEVER ERROR CONTINUE

SELECT par_ies
  FROM par_sup_pad
 WHERE cod_empresa   = p_cod_empresa
   AND cod_parametro = "ies_interf_ent_wms"
   AND par_ies       = "S"
WHENEVER ERROR STOP
IF SQLCA.sqlcode = 0 THEN
   RETURN TRUE
END IF
IF SQLCA.sqlcode <> 100 OR SQLCA.sqlcode <> NOTFOUND THEN
 CALL log003_err_sql("SELECT","PAR_SUP_PAD")
END IF
RETURN FALSE

END FUNCTION


#------------------------------------------#
 FUNCTION sup376_verifica_cod_fiscal_item()
#------------------------------------------#
 DEFINE sql_stmt       CHAR(1000)

 INITIALIZE sql_stmt, m_cod_parametro TO NULL

 LET m_cod_parametro = "sup0699_" CLIPPED,
                       p_aviso_rec.cod_fiscal_item CLIPPED,"_" CLIPPED

 LET sql_stmt = "SELECT par_txt[6,10] ",
                "  FROM par_sup_pad ",
                " WHERE cod_empresa = ","'",p_cod_empresa,"'"," ",
                "   AND cod_parametro MATCHES '",m_cod_parametro CLIPPED,"*'"

 LET sql_stmt = sql_stmt CLIPPED

 PREPARE var_par_sup_pad_2 FROM sql_stmt

 DECLARE cq_relac_cfop_2 CURSOR FOR var_par_sup_pad_2

 FOREACH cq_relac_cfop_2 INTO p_aviso_rec.cod_fiscal_item
    EXIT FOREACH
 END FOREACH

 UPDATE aviso_rec
    SET cod_fiscal_item = p_aviso_rec.cod_fiscal_item
  WHERE aviso_rec.cod_empresa   = p_cod_empresa
    AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec
    AND aviso_rec.num_seq       = p_aviso_rec.num_seq
 IF SQLCA.SQLCODE <> 0 THEN
    CALL log003_err_sql("MODIFICACAO","AVISO_REC")
 END IF

 END FUNCTION

#----------------------------------#
 FUNCTION sup3760_busca_ped_venda()
#----------------------------------#
 DEFINE enter              CHAR(100),
        l_tipo             CHAR(01)

 INITIALIZE p_cod_emp_transf TO NULL
 SELECT cod_empresa_orig
   INTO p_cod_emp_transf
   FROM aviso_rec_compl
  WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = p_dados_tela.num_aviso_rec
 IF sqlca.sqlcode <> 0 OR
    p_cod_emp_transf IS NULL THEN
    IF p_dados_tela.cod_emp_benef IS NULL THEN
       ERROR " Empresa origem nao encontrada "
       SLEEP 2
       RETURN FALSE
    ELSE
       LET p_cod_emp_transf = p_dados_tela.cod_emp_benef
    END IF
 END IF

 INITIALIZE m_pedido_venda1 TO NULL

 IF m_ies_fat_unico THEN

    WHENEVER ERROR CONTINUE
    SELECT UNIQUE(pedido)
      INTO m_pedido_venda1
      FROM fat_nf_mestre, fat_nf_item
     WHERE fat_nf_mestre.empresa            = p_cod_emp_transf
       AND fat_nf_mestre.nota_fiscal        = p_dados_tela.num_nf
       AND fat_nf_mestre.serie_nota_fiscal  = p_dados_tela.ser_nf
       AND fat_nf_mestre.subserie_nf        = p_dados_tela.ssr_nf
       AND fat_nf_mestre.tip_nota_fiscal    = "FATPRDSV"
       AND fat_nf_mestre.sit_nota_fiscal    = "N"
       AND fat_nf_item.empresa              = fat_nf_mestre.empresa
       AND fat_nf_item.trans_nota_fiscal    = fat_nf_mestre.trans_nota_fiscal
       AND fat_nf_item.pedido               = m_pedido_venda
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 OR
       m_pedido_venda1 IS NULL THEN
       LET m_pedido_venda1 = 0
    END IF

    IF m_pedido_venda1 = 0 THEN
       WHENEVER ERROR CONTINUE
       SELECT UNIQUE(pedido)
         INTO m_pedido_venda1
         FROM fat_nf_mestre_hist, fat_nf_item_hist
        WHERE fat_nf_mestre_hist.empresa            = p_cod_emp_transf
          AND fat_nf_mestre_hist.nota_fiscal        = p_dados_tela.num_nf
          AND fat_nf_mestre_hist.serie_nota_fiscal  = p_dados_tela.ser_nf
          AND fat_nf_mestre_hist.subserie_nf        = p_dados_tela.ssr_nf
          AND fat_nf_mestre_hist.tip_nota_fiscal    = "FATPRDSV"
          AND fat_nf_mestre_hist.sit_nota_fiscal    = "N"
          AND fat_nf_item_hist.empresa              = fat_nf_mestre_hist.empresa
          AND fat_nf_item_hist.trans_nota_fiscal    = fat_nf_mestre_hist.trans_nota_fiscal
          AND fat_nf_item_hist.pedido               = m_pedido_venda
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 OR
          m_pedido_venda1 IS NULL THEN
          LET m_pedido_venda1 = 0
       END IF
    END IF

 ELSE

    WHENEVER ERROR CONTINUE
    SELECT UNIQUE(num_pedido)
      INTO m_pedido_venda1
      FROM nf_item_ser
     WHERE cod_empresa = p_cod_emp_transf
       AND num_nff     = p_dados_tela.num_nf
       AND ser_nff     = p_dados_tela.ser_nf
       AND num_pedido  = m_pedido_venda
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 OR
       m_pedido_venda1 IS NULL THEN
       LET m_pedido_venda1 = 0
    END IF

    IF m_pedido_venda1 = 0 THEN
       WHENEVER ERROR CONTINUE
       SELECT unique(num_pedido)
         INTO m_pedido_venda1
         FROM nf_item
        WHERE nf_item.cod_empresa = p_cod_emp_transf
          AND nf_item.num_nff     = p_dados_tela.num_nf
          AND nf_item.num_pedido  = m_pedido_venda
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 OR
         m_pedido_venda1 IS NULL THEN
         LET m_pedido_venda1 = 0
      END IF
    END IF

    IF m_pedido_venda1 = 0 THEN
       WHENEVER ERROR CONTINUE
       SELECT unique(num_pedido)
         INTO m_pedido_venda1
         FROM nf_item_hist
        WHERE nf_item_hist.cod_empresa = p_cod_emp_transf
          AND nf_item_hist.num_nff     = p_dados_tela.num_nf
          AND nf_item_hist.num_pedido  = m_pedido_venda
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 OR
          m_pedido_venda1 IS NULL THEN
          LET m_pedido_venda1 = 0
       END IF
    END IF

 END IF

 RETURN TRUE

 END FUNCTION

#-----------------------------------------------#
 FUNCTION sup3760_verifica_param_item_rastreab()
#-----------------------------------------------#
 DEFINE lr_ctr_gr_orig RECORD LIKE item_ctr_grade.*,
        lr_ctr_gr_dest RECORD LIKE item_ctr_grade.*,
        enter          CHAR(01)

 INITIALIZE lr_ctr_gr_orig, lr_ctr_gr_dest TO NULL

 SELECT *
   INTO lr_ctr_gr_orig.*
   FROM item_ctr_grade
  WHERE cod_empresa = p_dados_tela.cod_emp_benef
    AND cod_item    = p_aviso_rec.cod_item
 IF sqlca.sqlcode = 0 THEN

     SELECT *
       INTO lr_ctr_gr_dest.*
       FROM item_ctr_grade
      WHERE cod_empresa = p_cod_empresa
        AND cod_item    = p_aviso_rec.cod_item
     IF sqlca.sqlcode <> 0 THEN
        IF sup3760_transf_saida_somente_lote(lr_ctr_gr_orig.*) THEN ## Verificar comentários dentro da função.
           RETURN TRUE
        ELSE
           PROMPT " Falta cadastro de rastreabilidade do item para empresa destino. Ver MAN9890 " FOR CHAR enter
           RETURN FALSE
        END IF
     ELSE
        IF lr_ctr_gr_orig.ies_endereco <> lr_ctr_gr_dest.ies_endereco THEN
           PROMPT " Controle de endereco difere da empresa origem/destino. Ver MAN9890." FOR CHAR enter
           RETURN FALSE
        END IF

        IF lr_ctr_gr_orig.ies_volume <> lr_ctr_gr_dest.ies_volume THEN
           PROMPT " Controle de volume difere da empresa origem/destino. Ver MAN9890." FOR CHAR enter
           RETURN FALSE
        END IF

        IF lr_ctr_gr_orig.ies_dat_producao <> lr_ctr_gr_dest.ies_dat_producao THEN
           PROMPT " Controle de data de producao difere da empresa origem/destino. Ver MAN9890." FOR CHAR enter
           RETURN FALSE
        END IF

        IF lr_ctr_gr_orig.ies_dat_validade <> lr_ctr_gr_dest.ies_dat_validade THEN
           PROMPT " Controle de data de validade difere da empresa origem/destino. Ver MAN9890." FOR CHAR enter
           RETURN FALSE
        END IF

        IF lr_ctr_gr_orig.ies_comprimento <> lr_ctr_gr_dest.ies_comprimento THEN
           PROMPT " Controle de data de validade difere da empresa origem/destino. Ver MAN9890." FOR CHAR enter
           RETURN FALSE
        END IF

        IF lr_ctr_gr_orig.ies_largura <> lr_ctr_gr_dest.ies_largura THEN
           PROMPT " Controle de largura difere da empresa origem/destino. Ver MAN9890." FOR CHAR enter
           RETURN FALSE
        END IF

        IF lr_ctr_gr_orig.ies_altura <> lr_ctr_gr_dest.ies_altura THEN
           PROMPT " Controle de altura difere da empresa origem/destino. Ver MAN9890." FOR CHAR enter
           RETURN FALSE
        END IF

        IF lr_ctr_gr_orig.ies_diametro <> lr_ctr_gr_dest.ies_diametro THEN
           PROMPT " Controle de diametro difere da empresa origem/destino. Ver MAN9890." FOR CHAR enter
           RETURN FALSE
        END IF

     END IF

  END IF

  RETURN TRUE

 END FUNCTION

#--------------------------------------------------#
 FUNCTION sup3760_busca_cnpj_insc(l_cod_empresa,
                                  l_num_aviso_rec,
                                  l_cod_fornecedor)
#--------------------------------------------------#
   DEFINE l_cod_fornecedor   LIKE fornecedor.cod_fornecedor,
          l_cod_empresa      LIKE empresa.cod_empresa, #801178#
          l_num_aviso_rec    LIKE aviso_rec.num_aviso_rec #801178#

   WHENEVER ERROR CONTINUE
   SELECT num_cgc_cpf
     INTO m_num_cgc_cpf
     FROM fornecedor
    WHERE cod_fornecedor = l_cod_fornecedor
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0   AND
      sqlca.sqlcode <> 100 THEN
      INITIALIZE m_num_cgc_cpf TO NULL
   END IF

   #801178#
   WHENEVER ERROR CONTINUE
   SELECT parametro_texto
     INTO m_ins_estadual
     FROM sup_par_ar
    WHERE empresa           = l_cod_empresa
      AND aviso_recebto     = l_num_aviso_rec
      AND seq_aviso_recebto = 0
      AND parametro         = "ins_estadual_ar"
   WHENEVER ERROR STOP
   #---fim--- 801178#
   IF sqlca.sqlcode <> 0 THEN
      WHENEVER ERROR CONTINUE
      SELECT ins_estadual
        INTO m_ins_estadual
        FROM fornecedor
       WHERE cod_fornecedor = l_cod_fornecedor
      WHENEVER ERROR STOP

      IF sqlca.sqlcode <> 0 THEN
         INITIALIZE m_ins_estadual TO NULL
      END IF
   END IF

 END FUNCTION

#------------------------------------#
 FUNCTION sup3760_carrega_strib_nfe()
#------------------------------------#
 DEFINE lr_nf_item    ARRAY[999] OF RECORD
                                       num_sequencia  LIKE nf_item.num_sequencia,
                                       cod_item       LIKE nf_item.cod_item,
                                       qtd_item       LIKE nf_item.qtd_item,
                                       num_pedido     LIKE nf_item.num_pedido,
                                       num_om         LIKE nf_item.num_om
                                    END RECORD,
        l_val_base_icm      DECIMAL(17,6),
        l_val_icm           DECIMAL(17,6),
        l_val_base_ret      DECIMAL(17,6),
        l_val_icms_ret      DECIMAL(17,6),
        l_num_seq           LIKE aviso_rec.num_seq,
        l_ser_nff           LIKE fat_nf_mestre.serie_nota_fiscal,
        l_num_oc_ar         LIKE aviso_rec.num_oc,
        l_ind               SMALLINT,
        l_num_seq_ped       LIKE nf_item.num_sequencia,
        #--inicio--vanderlei OS 329518 #
        l_ord_montag        LIKE ar_nf_item.ord_montag,
        sql_stmt            CHAR(1000),
        #---fim----vanderlei OS 329518 #
        l_ser_nf_fatura     LIKE fat_nf_mestre.serie_nota_fiscal,
        l_trans_nf_fatura   LIKE fat_nf_mestre.trans_nota_fiscal,
        l_seq_item_nf       LIKE fat_nf_item.seq_item_nf

 INITIALIZE lr_nf_item TO NULL
 LET l_val_base_icm = 0
 LET l_val_icm      = 0
 LET l_val_base_ret = 0
 LET l_val_icms_ret = 0
 LET l_ind = 1
 DECLARE cq_ar CURSOR FOR
    SELECT num_oc
      FROM aviso_rec
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_aviso_rec.num_aviso_rec
       AND num_seq       = p_aviso_rec.num_seq
 WHENEVER ERROR CONTINUE
 FOREACH cq_ar INTO l_num_oc_ar
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("FOREACH CURSOR","CQ_AR")
 END IF

    WHENEVER ERROR CONTINUE
    SELECT num_pedido_fornec
      INTO m_num_ped_fornec
      FROM prog_ordem_sup
     WHERE cod_empresa      = p_cod_empresa
       AND num_oc           = l_num_oc_ar
       AND num_versao       = 001
       AND num_prog_entrega = 001
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("SELECT","PROG_ORDEM_SUP")
    END IF

    LET m_pedido_venda = m_num_ped_fornec[1,6]
    IF sup3760_busca_ped_venda() THEN
    ELSE
       RETURN
    END IF

    INITIALIZE l_num_seq_ped, l_ord_montag TO NULL
    WHENEVER ERROR CONTINUE
    SELECT num_sequencia,
           ord_montag
      INTO l_num_seq_ped,
           l_ord_montag
      FROM ar_nf_item
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_aviso_rec.num_aviso_rec
       AND num_seq       = p_aviso_rec.num_seq
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("LEITURA","AR_NF_ITEM")
    END IF

    INITIALIZE l_ser_nff TO NULL
    IF NOT m_ies_fat_unico THEN
       WHENEVER ERROR CONTINUE
       SELECT ser_nff
         INTO l_ser_nff
         FROM nf_mestre
        WHERE cod_empresa = p_cod_emp_transf
          AND num_nff     = p_dados_tela.num_nf
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("SELECAO","NF_MESTRE")
          LET p_houve_erro = TRUE
          RETURN
       END IF
    ELSE
       LET l_ser_nff = p_dados_tela.ser_nf
    END IF

    IF m_ies_fat_unico THEN
       LET sql_stmt = "SELECT fat_nf_item.seq_item_pedido,",
                            " fat_nf_item.item,",
                            " fat_nf_item.qtd_item,",
                            " fat_nf_item.pedido,",
                            " fat_nf_item.ord_montag, ",
                            " fat_nf_mestre.trans_nota_fiscal, ",
                            " fat_nf_item.seq_item_nf ",
                       " FROM fat_nf_mestre, fat_nf_item",
                      " WHERE fat_nf_mestre.empresa            = """, p_cod_emp_transf, """ ",
                        " AND fat_nf_mestre.nota_fiscal        = ", p_dados_tela.num_nf,
                        " AND fat_nf_mestre.serie_nota_fiscal  = """,p_dados_tela.ser_nf,""" ",
                        " AND fat_nf_mestre.subserie_nf        = ",p_dados_tela.ssr_nf,
                        " AND fat_nf_mestre.tip_nota_fiscal    = ""FATPRDSV"" ",
                        " AND fat_nf_mestre.sit_nota_fiscal    = ""N"" ",
                        " AND fat_nf_item.empresa              = fat_nf_mestre.empresa ",
                        " AND fat_nf_item.trans_nota_fiscal    = fat_nf_mestre.trans_nota_fiscal ",
                        " AND fat_nf_item.pedido               = ", m_pedido_venda,
                        " AND fat_nf_item.seq_item_pedido      = ", l_num_seq_ped

    ELSE
       LET sql_stmt = "SELECT num_sequencia,",
                            " cod_item,",
                            " qtd_item,",
                            " num_pedido,",
                            " num_om, ",
                            " 0, 0 ",
                       " FROM nf_item",
                      " WHERE cod_empresa   = '", p_cod_emp_transf, "'",
                        " AND num_nff       = ", p_dados_tela.num_nf,
                        " AND num_pedido    = ", m_pedido_venda,
                        " AND num_sequencia = ", l_num_seq_ped
    END IF

    IF l_ord_montag IS NOT NULL THEN
       LET sql_stmt = sql_stmt CLIPPED, " AND num_om    = ", l_ord_montag
    END IF

    WHENEVER ERROR CONTINUE
    PREPARE var_query_2 FROM sql_stmt
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("PREPARE","VAR_QUERY_2")
       LET p_houve_erro = TRUE
       RETURN
    END IF

    WHENEVER ERROR CONTINUE
    DECLARE cq_nf_item CURSOR WITH HOLD FOR var_query_2
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("LEITURA","CQ_NF_ITEM")
       LET p_houve_erro = TRUE
       RETURN
    END IF

    WHENEVER ERROR CONTINUE
    FOREACH cq_nf_item INTO lr_nf_item[l_ind].*, l_trans_nf_fatura, l_seq_item_nf
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("FOREACH","CQ_NF_ITEM")
          LET p_houve_erro = TRUE
          EXIT FOREACH
       END IF

       LET l_val_base_icm = 0
       LET l_val_icm      = 0
       LET l_val_base_ret = 0
       LET l_val_icms_ret = 0

       IF m_ies_fat_unico THEN
          IF vdpm214_fat_nf_item_fisc_leitura(p_dados_tela.cod_emp_benef,
                                              l_trans_nf_fatura,
                                              l_seq_item_nf,
                                              "ICMS",FALSE,TRUE) THEN
             LET l_val_base_icm = vdpm214_fat_nf_item_fisc_get_bc_tributo_tot()
             LET l_val_icm      = vdpm214_fat_nf_item_fisc_get_val_tributo_tot()
          END IF

          IF vdpm214_fat_nf_item_fisc_leitura(p_dados_tela.cod_emp_benef,
                                              l_trans_nf_fatura,
                                              l_seq_item_nf,
                                              "ICMS_ST",FALSE,TRUE) THEN
             LET l_val_base_ret = vdpm214_fat_nf_item_fisc_get_bc_tributo_tot()
             LET l_val_icms_ret = vdpm214_fat_nf_item_fisc_get_val_tributo_tot()
          END IF
       ELSE
          WHENEVER ERROR CONTINUE
          SELECT val_base_icm,
                 val_icm,
                 val_base_ret,
                 val_icm_ret
            INTO l_val_base_icm,
                 l_val_icm,
                 l_val_base_ret,
                 l_val_icms_ret
            FROM nf_item_fiscal
           WHERE cod_empresa   = p_dados_tela.cod_emp_benef
             AND num_nff       = p_dados_tela.num_nf
             AND num_pedido    = lr_nf_item[l_ind].num_pedido
             AND num_sequencia = lr_nf_item[l_ind].num_sequencia
             AND ordem_montag  = lr_nf_item[l_ind].num_om
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("LEITURA","NF_ITEM_FISCAL")
          END IF
       END IF

       IF l_val_base_icm IS NOT NULL THEN

          LET l_val_base_icm = l_val_base_icm / lr_nf_item[l_ind].qtd_item
          LET l_val_icm      = l_val_icm      / lr_nf_item[l_ind].qtd_item
          LET l_val_base_ret = l_val_base_ret / lr_nf_item[l_ind].qtd_item
          LET l_val_icms_ret = l_val_icms_ret / lr_nf_item[l_ind].qtd_item

         WHENEVER ERROR CONTINUE
          SELECT empresa
            FROM sup_infc_strib_nfe
           WHERE empresa            = p_cod_empresa
             AND nf_entrada         = p_dados_tela.num_nf
             AND serie_nf_entrada   = l_ser_nff
             AND subserie_nfe       = p_dados_tela.ssr_nf
             AND especie_nf_entrada = p_dados_tela.ies_especie_nf
             AND fornecedor         = p_dados_tela.cod_fornecedor
             AND seq_item_nfe       = p_aviso_rec.num_seq
          IF sqlca.sqlcode = 0 THEN
             DELETE FROM sup_infc_strib_nfe
              WHERE empresa            = p_cod_empresa
                AND nf_entrada         = p_dados_tela.num_nf
                AND serie_nf_entrada   = l_ser_nff
                AND subserie_nfe       = p_dados_tela.ssr_nf
                AND especie_nf_entrada = p_dados_tela.ies_especie_nf
                AND fornecedor         = p_dados_tela.cod_fornecedor
                AND seq_item_nfe       = p_aviso_rec.num_seq
             IF sqlca.sqlcode <> 0 THEN
                CALL log003_err_sql("EXCLUSAO","SUP_INFC_STRIB_NFE")
             ELSE
                INSERT INTO sup_infc_strib_nfe VALUES(p_cod_empresa,
                                                      p_dados_tela.num_nf,
                                                      l_ser_nff,
                                                      p_dados_tela.ssr_nf,
                                                      p_dados_tela.ies_especie_nf,
                                                      p_dados_tela.cod_fornecedor,
                                                      p_aviso_rec.num_seq,
                                                      p_dados_tela.dat_entrada_nf,
                                                      lr_nf_item[l_ind].cod_item,
                                                      lr_nf_item[l_ind].qtd_item,
                                                      0,
                                                      l_val_base_icm,
                                                      l_val_icm,
                                                      l_val_base_ret,
                                                      l_val_icms_ret)
             END IF
          ELSE

             INSERT INTO sup_infc_strib_nfe VALUES(p_cod_empresa,
                                                   p_dados_tela.num_nf,
                                                   l_ser_nff,
                                                   p_dados_tela.ssr_nf,
                                                   p_dados_tela.ies_especie_nf,
                                                   p_dados_tela.cod_fornecedor,
                                                   p_aviso_rec.num_seq,
                                                   p_dados_tela.dat_entrada_nf,
                                                   lr_nf_item[l_ind].cod_item,
                                                   lr_nf_item[l_ind].qtd_item,
                                                   0,
                                                   l_val_base_icm,
                                                   l_val_icm,
                                                   l_val_base_ret,
                                                   l_val_icms_ret)
         END IF
         WHENEVER ERROR STOP
       END IF

       LET l_ind = l_ind + 1
    END FOREACH
 END FOREACH

 END FUNCTION

#---------------------------------------#
 FUNCTION sup3760_usa_orcamento_online()
#---------------------------------------#
 DEFINE lr_plano_contas  RECORD LIKE plano_contas.*,
        lr_aviso_rec     RECORD LIKE aviso_rec.*,
        l_num_conta      LIKE dest_aviso_rec.num_conta_deb_desp,
        l_dat_entrada_nf LIKE nf_sup.dat_entrada_nf,
        l_conta_valida   SMALLINT

 INITIALIZE l_num_conta,
            lr_aviso_rec.* TO NULL

 LET l_conta_valida = FALSE

 IF m_ies_bloq_cc_os <> "5" THEN
    RETURN FALSE
 END IF

 WHENEVER ERROR CONTINUE
 SELECT nf_sup.dat_entrada_nf
   INTO l_dat_entrada_nf
   FROM nf_sup
  WHERE nf_sup.cod_empresa   = p_cod_empresa
    AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec
 WHENEVER ERROR STOP

 DECLARE cq_oln_busca_cta_nf CURSOR FOR
 SELECT num_conta_deb_desp
   FROM dest_aviso_rec
  WHERE dest_aviso_rec.cod_empresa   = p_cod_empresa
    AND dest_aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec

 FOREACH cq_oln_busca_cta_nf INTO l_num_conta
    CALL con088_verifica_cod_conta(p_cod_empresa,
                                   l_num_conta,
                                   "S",
                                   l_dat_entrada_nf)
    RETURNING lr_plano_contas.*, p_status

    IF lr_plano_contas.ies_tip_conta = 8
    OR lr_plano_contas.ies_tip_conta = 9 THEN
       LET l_conta_valida = TRUE
       EXIT FOREACH
    END IF
 END FOREACH

 IF l_conta_valida = FALSE THEN
    RETURN FALSE
 END IF

 DECLARE cq_oln_aviso_rec CURSOR FOR
 SELECT aviso_rec.*
   FROM aviso_rec
  WHERE aviso_rec.cod_empresa   = p_cod_empresa
    AND aviso_rec.num_aviso_rec = p_dados_tela.num_aviso_rec

 FOREACH cq_oln_aviso_rec INTO lr_aviso_rec.*
   IF  lr_aviso_rec.ies_situa_ar = "C"
   AND lr_aviso_rec.ies_liberacao_cont = "N" THEN
      RETURN FALSE
   END IF
 END FOREACH

 RETURN TRUE

 END FUNCTION

#-------------------------------------------#
 FUNCTION sup3760_testa_cit_item(l_cod_item)
#-------------------------------------------#
 DEFINE l_cod_item LIKE item.cod_item

 WHENEVER ERROR CONTINUE
 SELECT cit_item.cod_item
   FROM cit_item
  WHERE cit_item.cod_item = l_cod_item
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    RETURN TRUE
 END IF

 RETURN FALSE

 END FUNCTION

#------------------------------------#
 FUNCTION sup3760_leitura_parametro()
#------------------------------------#
  DEFINE l_cod_emp_consol LIKE empresa.cod_empresa,
         l_status         SMALLINT

  CALL sup0063_cria_temp_controle()
  CALL sup3766_cria_temp()

  #-- OS 548208 inicio --#
  INITIALIZE m_cons_val_ret_rem TO NULL
  WHENEVER ERROR CONTINUE
    SELECT par_ies
      INTO m_cons_val_ret_rem
      FROM par_sup_pad
     WHERE par_sup_pad.cod_empresa    = p_cod_empresa
       AND par_sup_pad.cod_parametro  = 'cons_val_ret_rem'
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0
  OR m_cons_val_ret_rem IS NULL
  OR m_cons_val_ret_rem = " " THEN
     LET m_cons_val_ret_rem = "N"
  END IF
  #-- OS 548208 fim --#

  INITIALIZE m_informa_controles_sup3760 TO NULL #OS544582
  CALL log2250_busca_parametro(p_cod_empresa,"informa_controles_sup3760")
    RETURNING m_informa_controles_sup3760, l_status
  IF l_status = FALSE
  OR m_informa_controles_sup3760 IS NULL
  OR m_informa_controles_sup3760 = " " THEN
     LET m_informa_controles_sup3760 = "N"
  END IF

  #-- OS 562700 inicio --#
  INITIALIZE m_ies_nf_remessa_x_especie TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"ies_nf_remessa_x_especie")
    RETURNING m_ies_nf_remessa_x_especie, l_status
  IF l_status = FALSE
  OR m_ies_nf_remessa_x_especie IS NULL
  OR m_ies_nf_remessa_x_especie = " " THEN
     LET m_ies_nf_remessa_x_especie = "0"
  END IF
  #-- OS 562700 fim --#
  #--------------------------#
  # Alteração WMS OS: 450083 #
  #--------------------------#
  CALL log2250_busca_parametro(p_cod_empresa,"wms_instal")                     RETURNING m_wms_instal, l_status
  IF  m_wms_instal = "S" THEN
      CALL log2250_busca_parametro(p_cod_empresa,'segmto_utilizacao')
           RETURNING m_segmento, l_status
      IF  m_segmento <> "I" THEN
          CALL log2250_busca_parametro(p_cod_empresa,"utiliza_codf_item_deposit")      RETURNING m_utiliza_codf_deposit, l_status
      ELSE
          LET m_utiliza_codf_deposit = "S"
      END IF
  END IF
  CALL log2250_busca_parametro(p_cod_empresa,"cfop_nota_fiscal_provis")        RETURNING m_cfop_nota_fiscal_provis, l_status
  CALL log2250_busca_parametro(p_cod_empresa,"cfop_nota_fiscal_definit")       RETURNING m_cfop_nota_fiscal_definit, l_status
  CALL log2250_busca_parametro(p_cod_empresa,"cfop_compl_nota_fiscal_provis")  RETURNING m_cfop_compl_nota_fiscal_provis, l_status
  CALL log2250_busca_parametro(p_cod_empresa,"cfop_compl_nota_fiscal_definit") RETURNING m_cfop_compl_nota_fiscal_definit, l_status
  CALL log2250_busca_parametro(p_cod_empresa,"segmto_utilizacao")              RETURNING m_segmto_utilizacao, l_status
  #---------------#

  CALL sup1566_utiliza_faturamento_unico(p_cod_empresa)
       RETURNING m_ies_fat_unico

  CALL log2250_busca_parametro(p_cod_empresa,'envia_email_solic_rec_pc')
     RETURNING m_env_email_solic_rec_pc, l_status

  IF NOT l_status OR
     m_env_email_solic_rec_pc = ' ' OR
     m_env_email_solic_rec_pc IS NULL THEN
     LET m_env_email_solic_rec_pc = 'N'
  END IF

  CALL log2250_busca_parametro(p_cod_empresa,"valida_nf_frete_filiais")
     RETURNING m_valida_nf_frete_filiais, l_status
  IF l_status = FALSE OR m_valida_nf_frete_filiais IS NULL OR m_valida_nf_frete_filiais = " " THEN
     LET m_valida_nf_frete_filiais = "N" #CH784820
  END IF

  #CH805555
  INITIALIZE m_alter_den_item_nf TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"alter_den_item_nf")
     RETURNING m_alter_den_item_nf, l_status
  IF l_status = FALSE OR m_alter_den_item_nf IS NULL OR m_alter_den_item_nf = " " THEN
     LET m_alter_den_item_nf = "S"
  END IF

  #CH783559
  INITIALIZE m_exigir_duplicata_nfs TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "exigir_duplicata_nfs")
     RETURNING m_exigir_duplicata_nfs, p_status
  IF p_status = FALSE OR
     m_exigir_duplicata_nfs IS NULL OR
     m_exigir_duplicata_nfs = ' ' THEN
     LET m_exigir_duplicata_nfs = 'N'
  END IF
  #CH783559

  LET m_existe_tab_oc_nf = log0150_verifica_se_tabela_existe("sup_oc_nota_fiscal")
  LET m_exst_rel_fre_indt = log0150_verifica_se_tabela_existe('sup_relc_ftre_indt')
  LET m_existe_despprit = log0150_verifica_se_tabela_existe('imp_desp_proc_item')
  #inicio OS 514411#
  INITIALIZE m_qtd_dias_final_export TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"qtd_dias_final_export")
       RETURNING m_qtd_dias_final_export, p_status
  IF p_status = FALSE THEN
     LET m_qtd_dias_final_export = ""
  END IF
  #fim OS 514411#

  WHENEVER ERROR CONTINUE
  LET m_dat_fim_valid = MDY("12","31","2002")
  SELECT par_data
    INTO m_dat_fim_valid
    FROM par_sup_pad
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "dat_fim_valid"
  IF m_dat_fim_valid IS NULL OR
     m_dat_fim_valid = " " THEN
     LET m_dat_fim_valid = MDY("12","31","2002")
  END IF

  #-- Inicio OS.: 521861 --#
  INITIALIZE m_inclui_observacao_item_ar TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "inclui_observacao_item_ar")
     RETURNING m_inclui_observacao_item_ar, l_status
  IF l_status = FALSE OR
     m_inclui_observacao_item_ar IS NULL OR
     m_inclui_observacao_item_ar = " " THEN
     LET m_inclui_observacao_item_ar = 'N'
  END IF
  #-- Fim OS.: 521861 --#
  ###OS 205024###
  INITIALIZE m_ies_bloq_cc_os TO NULL
  SELECT par_ies
    INTO m_ies_bloq_cc_os
    FROM par_sup_pad
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "ies_bloq_cc_os"
  IF sqlca.sqlcode <> 0 OR
     m_ies_bloq_cc_os IS NULL OR
     m_ies_bloq_cc_os = " " THEN
     LET m_ies_bloq_cc_os = "N"
  END IF

  INITIALIZE m_controla_gao TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_ind_especial
    INTO m_controla_gao
    FROM gao_par_padrao
   WHERE empresa = p_cod_empresa
     AND parametro = "controla_gao"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR
     m_controla_gao IS NULL OR
     m_controla_gao = " " THEN
     LET m_controla_gao = "N"
  END IF

  INITIALIZE m_orcamento_periodo TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_ind_especial
    INTO m_orcamento_periodo
    FROM gao_par_padrao
   WHERE empresa = p_cod_empresa
     AND parametro = "orcamento_periodo"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR
     m_orcamento_periodo IS NULL OR
     m_orcamento_periodo = " " THEN
     LET m_orcamento_periodo = "N"
  END IF

  INITIALIZE m_usa_cond_pagto TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_ind_especial
    INTO m_usa_cond_pagto
    FROM gao_par_padrao
   WHERE empresa = p_cod_empresa
     AND parametro = "usa_cond_pagto"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR
     m_usa_cond_pagto IS NULL OR
     m_usa_cond_pagto = " " THEN
     LET m_usa_cond_pagto = "N"
  END IF

  INITIALIZE m_tem_valid_fim TO NULL
  IF sup0686_cod_fiscal_tem_dat_fim_valid() THEN
     LET m_tem_valid_fim = TRUE
  ELSE
     LET m_tem_valid_fim = FALSE
  END IF

  LET m_utiliz_totvs_colab = sup376_busca_par_sup_pad("utiliz_totvs_colab",1) #796313 - Espindola - Projeto Totvs Colaboracao
  IF m_utiliz_totvs_colab IS NULL
  OR m_utiliz_totvs_colab = " " THEN
     LET m_utiliz_totvs_colab = "N"
  END IF
  INITIALIZE p_ies_custo_grade TO NULL
  LET p_ies_custo_grade = sup376_busca_par_sup_pad("ies_informa_custo_gr",1)
  IF sqlca.sqlcode <> 0 OR p_ies_custo_grade = " " OR p_ies_custo_grade IS NULL THEN
     LET p_ies_custo_grade = "N"
  END IF

  INITIALIZE p_ies_cfop99 TO NULL
  LET p_ies_cfop99 = sup376_busca_par_sup_pad("ies_cfop99",1)
  IF sqlca.sqlcode <> 0 OR p_ies_cfop99 IS NULL OR p_ies_cfop99 = " " THEN
     LET p_ies_cfop99 = "N"
  END IF

  INITIALIZE m_ies_cit_item TO NULL
  LET m_ies_cit_item = sup376_busca_par_sup_pad("ies_cit_item",1)
  IF sqlca.sqlcode <> 0 OR m_ies_cit_item IS NULL OR m_ies_cit_item = " " THEN
     LET m_ies_cit_item = "N"
  END IF

  INITIALIZE g_ies_wis_instalado TO NULL
  LET g_ies_wis_instalado  = sup376_busca_par_sup_pad("ies_wis_instalado",1)
  IF sqlca.sqlcode <> 0 OR g_ies_wis_instalado IS NULL OR g_ies_wis_instalado = " " THEN
     LET g_ies_wis_instalado = "N"
  END IF

  IF wms0004_wms_instalado(p_cod_empresa) THEN
    LET g_ies_wms_instalado = "S"
  ELSE
    LET g_ies_wms_instalado = "N"
  END IF

  INITIALIZE g_ies_tex_inst TO NULL
  LET g_ies_tex_inst  = sup376_busca_par_sup_pad("ies_tex_inst",1)
  IF sqlca.sqlcode <> 0 OR
     g_ies_tex_inst IS NULL OR
     g_ies_tex_inst = " "   THEN
     LET g_ies_tex_inst = "N"
  END IF

  INITIALIZE m_perm_copia_nf TO NULL
  LET m_perm_copia_nf = sup376_busca_par_sup_pad("perm_copia_nf",1)
  IF sqlca.sqlcode <> 0 OR
     m_perm_copia_nf IS NULL OR
     m_perm_copia_nf = " " THEN
     LET  m_perm_copia_nf = "N"
  END IF

  INITIALIZE m_perm_alt_cnd_emb TO NULL
  LET m_perm_alt_cnd_emb = sup376_busca_par_sup_pad("perm_alt_cnd_emb",1)
   IF sqlca.sqlcode <> 0 OR
      m_perm_alt_cnd_emb IS NULL OR
      m_perm_alt_cnd_emb = " " THEN
      LET m_perm_alt_cnd_emb = "1"
          #Continua permitindo alterar Condicao de pagamento e modo de embarque normalmente.
   END IF

  INITIALIZE m_mod_emb_nf_transf TO NULL
  LET m_mod_emb_nf_transf = sup376_busca_par_sup_pad("mod_emb_nf_transf",1)
  IF sqlca.sqlcode <> 0 OR
     m_mod_emb_nf_transf IS NULL OR
     m_mod_emb_nf_transf = " " THEN
     LET m_mod_emb_nf_transf = "N"
         #Continua obdecendo o parametro perm_alt_cnd_emb inclusive para nota de transferencia.
  END IF

  INITIALIZE p_ies_rec_item_cancel TO NULL
  LET p_ies_rec_item_cancel = sup376_busca_par_sup_pad("ies_rec_item_cancel",1)
  IF sqlca.sqlcode <> 0 OR
     p_ies_rec_item_cancel IS NULL OR
     p_ies_rec_item_cancel = " "   THEN
     LET p_ies_rec_item_cancel = "S"
  END IF

  INITIALIZE p_ies_cont_insp_aut TO NULL
  LET p_ies_cont_insp_aut = sup376_busca_par_sup_pad("ies_cont_insp_aut",1)
  IF sqlca.sqlcode <> 0 OR
     p_ies_cont_insp_aut IS NULL OR
     p_ies_cont_insp_aut = " "   THEN
     LET p_ies_cont_insp_aut = "3"
  END IF

  INITIALIZE p_ies_obt_inf_com TO NULL
  LET p_ies_obt_inf_com = sup376_busca_par_sup_pad("ies_obt_inf_tr_unid",1)
  IF sqlca.sqlcode <> 0 OR
     p_ies_obt_inf_com IS NULL OR
     p_ies_obt_inf_com = " "   THEN
     LET p_ies_obt_inf_com = "N"
  END IF

  INITIALIZE m_exporta_nf TO NULL
  LET m_exporta_nf = sup376_busca_par_sup_pad("exporta_nf",1)
  IF m_exporta_nf IS NULL OR m_exporta_nf = " " THEN
     LET m_exporta_nf = "D"
  END IF

  LET m_qtd_dias_nf_venc = sup376_busca_par_sup_pad("qtd_dias_nf_venc",2)

  INITIALIZE m_bloq_entr_data TO NULL
  LET m_bloq_entr_data = sup376_busca_par_sup_pad("bloq_entr_data",1)
  IF m_bloq_entr_data IS NULL OR m_bloq_entr_data = " " THEN
     LET m_bloq_entr_data = "N"
  END IF

  INITIALIZE m_bloq_entr_preco TO NULL
  LET m_bloq_entr_preco = sup376_busca_par_sup_pad("bloq_entr_preco",1)
  IF m_bloq_entr_preco IS NULL OR m_bloq_entr_preco = " " THEN
     LET m_bloq_entr_preco = "N"
  END IF

  ##O.S 186311
  LET g_nat_oper_permuta = sup376_busca_par_sup_pad("nat_oper_permuta",2)

  LET g_operac_permuta = sup376_busca_par_sup_pad("operac_permuta",3)

  INITIALIZE p_ies_busca_loclib TO NULL
  LET p_ies_busca_loclib = sup376_busca_par_sup_pad("ies_busca_loclib",1)
  IF sqlca.sqlcode <> 0 OR
     p_ies_busca_loclib IS NULL OR
     p_ies_busca_loclib = " "   THEN
     LET p_ies_busca_loclib = "N"
  END IF

  INITIALIZE p_oper_trans_unid TO NULL
  LET p_oper_trans_unid = sup376_busca_par_sup_pad("cod_oper_trans_unid",3)
  IF sqlca.sqlcode <> 0 OR p_oper_trans_unid IS NULL THEN
     LET p_oper_trans_unid = " "
  END IF

  INITIALIZE m_prog_conhec_frete TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"programa_conhecimento_frete")
     RETURNING m_prog_conhec_frete, p_status

  IF m_prog_conhec_frete = " " OR
     m_prog_conhec_frete IS NULL THEN
     LET m_prog_conhec_frete = "sup0580"
  END IF

  INITIALIZE p_ies_indexacao TO NULL
  LET p_ies_indexacao = sup376_busca_par_sup_pad("ies_indexacao",1)
  IF sqlca.sqlcode <> 0 OR
     p_ies_indexacao IS NULL THEN
     LET p_ies_indexacao = "S"
  END IF

  INITIALIZE m_empr_utiliz_mp66 TO NULL
  LET m_empr_utiliz_mp66 = sup376_busca_par_sup_pad("ies_cred_pis",1)
  IF sqlca.sqlcode <> 0 OR m_empr_utiliz_mp66 IS NULL OR
     m_empr_utiliz_mp66 = " " THEN
     LET m_empr_utiliz_mp66 = "N"
  END IF

  INITIALIZE p_oper_ent_ind_g TO NULL
  SELECT par_txt
    INTO p_oper_ent_ind_g
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "oper_ent_ind_g"

  INITIALIZE m_ies_control_consig TO NULL
  SELECT par_ies
    INTO m_ies_control_consig
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa = p_cod_empresa
     AND par_sup_pad.cod_parametro = "ies_control_consig"
  IF m_ies_control_consig IS NULL OR
     m_ies_control_consig = " " THEN
     LET m_ies_control_consig = "N"
  END IF

  INITIALIZE p_cod_oper_ent_ind TO NULL
  SELECT par_txt
    INTO p_cod_oper_ent_ind
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "cod_oper_ent_ind"

  LET p_ies_entr_sem_ped = FALSE
  WHENEVER ERROR CONTINUE
  SELECT usuario
    FROM sup_lim_sped_com
   WHERE sup_lim_sped_com.empresa = p_cod_empresa
     AND sup_lim_sped_com.usuario = p_user
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     LET p_ies_entr_sem_ped = TRUE
  ELSE
     WHENEVER ERROR CONTINUE
     SELECT nom_usuario
       FROM usu_entr_sem_ped
      WHERE usu_entr_sem_ped.cod_empresa = p_cod_empresa
        AND usu_entr_sem_ped.nom_usuario = p_user
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 THEN
        LET p_ies_entr_sem_ped = TRUE
     ELSE
        LET p_ies_entr_sem_ped = FALSE
     END IF
  END IF

  INITIALIZE m_cnpj_nf_com_pc TO NULL
  LET m_cnpj_nf_com_pc = sup376_busca_par_sup_pad("cnpj_nf_com_pc",1)
  IF sqlca.sqlcode <> 0 OR m_cnpj_nf_com_pc IS NULL OR
     m_cnpj_nf_com_pc = " " THEN
     LET m_cnpj_nf_com_pc = "N"
  END IF

  INITIALIZE m_cfop_nfr TO NULL
  LET m_cfop_nfr = sup376_busca_par_sup_pad("cfop_nfr",1)
  IF sqlca.sqlcode <> 0 OR m_cfop_nfr IS NULL OR
     m_cfop_nfr = " " THEN
     LET m_cfop_nfr = "N"
  END IF

  INITIALIZE m_cfop_nfs TO NULL
  LET m_cfop_nfs = sup376_busca_par_sup_pad("cfop_nfs",1)
  IF sqlca.sqlcode <> 0 OR m_cfop_nfs IS NULL OR
     m_cfop_nfs = " " THEN
     LET m_cfop_nfs = "N"
  END IF

  INITIALIZE m_serie_nfs TO NULL
  LET m_serie_nfs = sup376_busca_par_sup_pad("serie_nfs",1)

  INITIALIZE m_cont_insp_especial TO NULL
  LET m_cont_insp_especial = sup376_busca_par_sup_pad("cont_insp_especial",1)
  IF sqlca.sqlcode <> 0 OR m_cont_insp_especial IS NULL OR
     m_cont_insp_especial = " " THEN
     LET m_cont_insp_especial = "N"
  END IF

  INITIALIZE g_icms_total_nf TO NULL
  LET g_icms_total_nf = sup376_busca_par_sup_pad("icms_total_nf",1)
  IF sqlca.sqlcode <> 0 OR g_icms_total_nf IS NULL OR
     g_icms_total_nf = " " THEN
     LET g_icms_total_nf = "N"
  END IF

  INITIALIZE g_dat_icms_tot_nf TO NULL
  LET g_dat_icms_tot_nf = sup376_busca_par_sup_pad("icms_total_nf",5)

  INITIALIZE m_ies_utiliz_provisao TO NULL
  SELECT par_ies
     INTO m_ies_utiliz_provisao
     FROM par_imp
    WHERE par_imp.cod_empresa   = p_cod_empresa
      AND par_imp.cod_parametro = "ies_utiliz_provisao"

  IF sqlca.sqlcode <> 0 OR m_ies_utiliz_provisao IS NULL OR
     m_ies_utiliz_provisao = " " THEN
     LET m_ies_utiliz_provisao = "N"
  END IF

  IF m_ies_utiliz_provisao = "S" THEN
     INITIALIZE m_inicio_provisao TO NULL
     SELECT par_val
       INTO m_inicio_provisao
       FROM par_imp
      WHERE cod_empresa   = p_cod_empresa
        AND cod_parametro = "inicio_provisao"
     IF sqlca.sqlcode <> 0 OR m_inicio_provisao IS NULL OR
        m_inicio_provisao = " " THEN
        CALL log0030_mensagem("Falta cadastrar apartir de que processo sera utiliz. provisao","exclamation")
        LET m_inicio_provisao = -1
     END IF

     ##Criacao das tabelas temporarias do imp0101 no sup3760 devido ao
     ##problema do Oracle/Sql Server de efetivar a transacao ao efetuar
     ##a criacao de temporarias.
     IF NOT imp0101_cria_temp() THEN
        RETURN FALSE
     END IF
     IF NOT imp0101_cria_temp2() THEN
        RETURN FALSE
     END IF
  END IF

  INITIALIZE g_proc_ini_os163407 TO NULL
  SELECT par_num
    INTO g_proc_ini_os163407
    FROM par_imp
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "proc_ini_os163407"

  INITIALIZE m_utiliz_nfm_import TO NULL
  SELECT par_ies
    INTO m_utiliz_nfm_import
    FROM par_imp
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "utiliz_nfm_import"

  IF sqlca.sqlcode <> 0 OR m_utiliz_nfm_import IS NULL OR
     m_utiliz_nfm_import = " " THEN
     LET m_utiliz_nfm_import = "N"
  END IF

  INITIALIZE m_recalcula_impostos_nf_imp TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"recalcula_impostos_nf_imp")
       RETURNING m_recalcula_impostos_nf_imp, p_status
  IF m_recalcula_impostos_nf_imp IS NULL
  OR m_recalcula_impostos_nf_imp = " " THEN
     LET m_recalcula_impostos_nf_imp = "N"
  END IF

  INITIALIZE m_grupo_despesa_nfr TO NULL
  LET m_grupo_despesa_nfr = sup376_busca_par_sup_pad("grupo_despesa_nfr",1)
  IF m_grupo_despesa_nfr IS NULL THEN
     LET m_grupo_despesa_nfr = "S"
  END IF

  INITIALIZE p_ies_interf_cre TO NULL
  LET p_ies_interf_cre = sup376_busca_par_sup_pad("ies_interf_cre",1)
  IF sqlca.sqlcode <> 0 OR
     p_ies_interf_cre IS NULL OR
     p_ies_interf_cre = " " THEN
     LET p_ies_interf_cre = "N"
  END IF

  INITIALIZE m_ies_anexa_dupl TO NULL
  SELECT par_vdp.par_vdp_txt[45,45]
    INTO m_ies_anexa_dupl
    FROM par_vdp
   WHERE par_vdp.cod_empresa = p_cod_empresa
  IF m_ies_anexa_dupl IS NULL OR
     m_ies_anexa_dupl = " " THEN
     LET m_ies_anexa_dupl = "N"
  END IF

  INITIALIZE m_cod_empresa_uni TO NULL
  IF m_ies_anexa_dupl = "S" THEN
     ### OS 143111
     SELECT par_vdp_txt[158,159]
       INTO m_cod_empresa_uni
       FROM par_vdp
      WHERE par_vdp.cod_empresa = p_cod_empresa
  END IF
  IF m_cod_empresa_uni IS NULL OR
     m_cod_empresa_uni = " " THEN
     LET m_cod_empresa_uni = p_cod_empresa
  END IF

  INITIALIZE l_cod_emp_consol TO NULL
  WHENEVER ERROR CONTINUE
  SELECT cod_empresa
    INTO l_cod_emp_consol
    FROM empresa_consol
   WHERE cod_programa    = "VDP0225"
     AND cod_empr_consol = p_cod_empresa
  WHENEVER ERROR STOP

  IF l_cod_emp_consol IS NOT NULL AND
     l_cod_emp_consol <> " " THEN
     LET m_cod_empresa_uni = l_cod_emp_consol
  END IF

  INITIALIZE p_mot_remes_terc TO NULL
  LET p_mot_remes_terc = sup376_busca_par_sup_pad("cod_mot_rem_terc",3)
  IF sqlca.sqlcode <> 0 OR
     p_mot_remes_terc IS NULL THEN
     LET p_mot_remes_terc = "  "
  END IF

  LET p_qtd_dias_emis_doc = sup376_busca_par_sup_pad("qtd_dias_emis_doc",2)
  IF sqlca.sqlcode = 0 THEN
     LET p_cons_data = TRUE
  END IF

  INITIALIZE p_tip_desp_cons_fat TO NULL
  LET p_tip_desp_cons_fat = sup376_busca_par_sup_pad("tip_desp_cons_fat",2)

  INITIALIZE p_cod_grp_desp_nfr TO NULL
  LET p_cod_grp_desp_nfr = sup376_busca_par_sup_pad("cod_grp_desp_nfr",2)
  IF p_cod_grp_desp_nfr IS NULL THEN
     LET p_cod_grp_desp_nfr = " "
  END IF

  INITIALIZE m_ies_armaz_itau TO NULL
  LET m_ies_armaz_itau = sup376_busca_par_sup_pad("ies_armaz_itau",1)
  IF m_ies_armaz_itau IS NULL OR
     m_ies_armaz_itau = " " THEN
     LET m_ies_armaz_itau = "N"
  END IF

  INITIALIZE p_ies_entrada_maior TO NULL
  LET p_ies_entrada_maior = sup376_busca_par_sup_pad("ies_entrada_maior",1)
  IF p_ies_entrada_maior IS NULL OR
     p_ies_entrada_maior = " "   OR
     sqlca.sqlcode <> 0          THEN
     LET p_ies_entrada_maior = "N"
  END IF

  INITIALIZE p_ies_item_nfd_nfr TO NULL
  LET p_ies_item_nfd_nfr = sup376_busca_par_sup_pad("ies_item_nfd_nfr",1)
  IF p_ies_item_nfd_nfr IS NULL OR
     p_ies_item_nfd_nfr = " "   OR
     sqlca.sqlcode <> 0         THEN
     LET p_ies_item_nfd_nfr = "N"
  END IF

  LET p_ies_usa_ae = sup376_busca_par_sup_pad("ies_usa_ae",1)
  IF p_ies_usa_ae IS NULL OR
     p_ies_usa_ae = " "   OR
     sqlca.sqlcode <> 0   THEN
     LET p_ies_usa_ae = "N"
  END IF

  LET p_orig_uf_frt_nf_i = sup376_busca_par_sup_pad("orig_uf_frt_nf_imp",1)
  IF (p_orig_uf_frt_nf_i <> "1" AND
      p_orig_uf_frt_nf_i <> "2") OR
     sqlca.sqlcode <> 0         THEN
     INITIALIZE p_orig_uf_frt_nf_i TO NULL
  END IF

  LET g_uf_trans_nfdr = sup376_busca_par_sup_pad("uf_trans_nfdr",1)
  IF (g_uf_trans_nfdr <> "1" AND
      g_uf_trans_nfdr <> "2") OR
     sqlca.sqlcode <> 0 THEN
     INITIALIZE g_uf_trans_nfdr TO NULL
  END IF

  INITIALIZE p_ies_mod_contrato TO NULL
  LET p_ies_mod_contrato = sup376_busca_par_sup_pad("ies_modulo_contrato",1)
  IF sqlca.sqlcode <> 0 OR
     p_ies_mod_contrato IS NULL OR
     p_ies_mod_contrato = " " THEN
     LET p_ies_mod_contrato = "N"
  END IF

  INITIALIZE p_ies_grava_erro_4 TO NULL
  LET p_ies_grava_erro_4 = sup376_busca_par_sup_pad("ies_grava_erro_4",1)
  IF sqlca.sqlcode <> 0 OR
     p_ies_grava_erro_4 IS NULL THEN
     LET p_ies_grava_erro_4 = "S"
  END IF

  INITIALIZE p_ies_pc_ant_fornec TO NULL
  LET p_ies_pc_ant_fornec = sup376_busca_par_sup_pad("ies_pc_ant_fornec",1)
  IF sqlca.sqlcode <> 0 OR
     p_ies_pc_ant_fornec IS NULL THEN
     LET p_ies_pc_ant_fornec = "N"
  END IF

  INITIALIZE p_ies_transf_unid TO NULL
  LET p_ies_transf_unid = sup376_busca_par_sup_pad("ies_obt_inf_tr_unid",1)
  IF sqlca.sqlcode <> 0 OR
     p_ies_transf_unid IS NULL THEN
     LET p_ies_transf_unid = "N"
  END IF

  INITIALIZE p_cod_oper_ent_comp TO NULL
  LET p_cod_oper_ent_comp = sup376_busca_par_sup_pad("cod_oper_ent_compon",3)
  IF sqlca.sqlcode <> 0 OR
     p_cod_oper_ent_comp IS NULL THEN
     LET p_cod_oper_ent_comp = " "
  END IF

  INITIALIZE m_incid_icms_nfs TO NULL
  LET m_incid_icms_nfs = sup376_busca_par_sup_pad("incid_icms_nfs",1)
  IF sqlca.sqlcode <> 0 OR
     m_incid_icms_nfs IS NULL THEN
     LET m_incid_icms_nfs = " "
  END IF

  INITIALIZE m_pc_nf_consig TO NULL
  LET m_pc_nf_consig = sup376_busca_par_sup_pad("pc_nf_consig",1)
  IF sqlca.sqlcode <> 0 OR m_pc_nf_consig IS NULL OR m_pc_nf_consig = " " THEN
     LET m_pc_nf_consig = "N"
  END IF

  INITIALIZE m_cod_tip_desp_cons TO NULL
  SELECT cod_tip_desp_cons INTO m_cod_tip_desp_cons
    FROM par_sup_compl_1
   WHERE cod_empresa = p_cod_empresa
  IF sqlca.sqlcode <> 0 THEN
     LET m_cod_tip_desp_cons = 0
  END IF

  INITIALIZE m_cod_grp_desp_fat TO NULL
  SELECT par_val INTO m_cod_grp_desp_fat
    FROM par_sup_pad
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "cod_grp_desp_fat"
  IF sqlca.sqlcode <> 0 THEN
     LET m_cod_grp_desp_fat = 0
  END IF

  SELECT * INTO p_par_estoque.*
    FROM par_estoque
   WHERE par_estoque.cod_empresa = p_cod_empresa

  SELECT * INTO p_par_sup.*
    FROM par_sup
   WHERE par_sup.cod_empresa = p_cod_empresa

  LET m_mes_fecha_01 = "N"
  WHENEVER ERROR CONTINUE
  SELECT par_ies
    INTO m_mes_fecha_01
    FROM par_sup_pad
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "mes_fecha_01"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR
     m_mes_fecha_01 IS NULL OR
     m_mes_fecha_01 = " " THEN
     LET m_mes_fecha_01 = "N"
  END IF

  SELECT ies_cod_cgc INTO p_ies_cod_cgc
    FROM par_fornecedor

  SELECT * INTO p_par_sup_compl.*
    FROM par_sup_compl
   WHERE par_sup_compl.cod_empresa = p_cod_empresa

  SELECT * INTO p_par_sup_compl_1.*
    FROM par_sup_compl_1
   WHERE par_sup_compl_1.cod_empresa = p_cod_empresa

  IF sqlca.sqlcode <> 0  THEN
     CALL log003_err_sql("LEITURA","PAR_SUP_COMPL_1")
     RETURN FALSE
  END IF

  INITIALIZE p_qtd_dig_cfop TO NULL
  SELECT par_ies INTO p_qtd_dig_cfop
    FROM par_sup_pad
   WHERE cod_empresa = p_cod_empresa
     AND cod_parametro = "qtd_dig_cfop"

  INITIALIZE p_nf_item.* TO NULL
  INITIALIZE p_ar_os_esp.* TO NULL
  INITIALIZE p_aviso_rec_compl.* TO NULL

  SELECT par_con.*, par_con.ies_contab_aen
    INTO p_par_con.*, p_ies_contab_aen
    FROM par_con
   WHERE par_con.cod_empresa = p_cod_empresa

  IF sqlca.sqlcode <> 0  THEN
     CALL log003_err_sql("LEITURA","par_con")
     RETURN FALSE
  END IF

  SELECT *
    INTO p_par_cap.*
    FROM par_cap
   WHERE cod_empresa = p_cod_empresa
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("LEITURA","PAR_CAP")
     RETURN FALSE
  END IF

  LET m_ies_custo_medio = " "
  SELECT ies_custo_medio
    INTO m_ies_custo_medio
    FROM par_estoque
   WHERE cod_empresa = p_cod_empresa
  IF SQLCA.SQLCODE <> 0 THEN
     ERROR "Verificar parametrizacao de Custo Medio para essa empresa"
     SLEEP 3
  END IF

  ###OS159597###
  INITIALIZE m_contr_pes_rec TO NULL
  SELECT par_ies
    INTO m_contr_pes_rec
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa    = p_cod_empresa
     AND par_sup_pad.cod_parametro  = "contr_pes_rec"
  IF sqlca.sqlcode <> 0 OR
     m_contr_pes_rec IS NULL OR
     m_contr_pes_rec = " " THEN
     LET m_contr_pes_rec = "N"
  END IF

  INITIALIZE m_transf_estoq TO NULL
  SELECT par_ies
    INTO m_transf_estoq
    FROM par_sup_pad
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "transf_estoq"
  IF sqlca.sqlcode <> 0 OR
     m_transf_estoq IS NULL OR
     m_transf_estoq = " " THEN
     LET m_transf_estoq = "N"
  END IF

   LET m_gera_rsv_transf = NULL
   SELECT par_sup_pad.par_ies
     INTO m_gera_rsv_transf
     FROM par_sup_pad
    WHERE par_sup_pad.cod_empresa   = p_cod_empresa
      AND par_sup_pad.cod_parametro = "gera_rsv_transf"
   IF sqlca.sqlcode <> 0 OR
      m_gera_rsv_transf IS NULL THEN
      LET m_gera_rsv_transf = "N"
   END IF

  INITIALIZE m_ies_cnpj_insc TO NULL
  LET m_ies_cnpj_insc = sup376_busca_par_sup_pad("ies_cnpj_insc",1)
  IF sqlca.sqlcode <> 0 OR m_ies_cnpj_insc IS NULL THEN
     LET m_ies_cnpj_insc = "N"
  END IF

  ### OS219022 ###
  LET m_serie_branca = sup376_busca_par_sup_pad("serie_branca",1)
  IF sqlca.sqlcode <> 0 OR
     m_serie_branca IS NULL THEN
     LET m_serie_branca = "N"
  END IF

  WHENEVER ERROR STOP

  INITIALIZE m_ies_inf_aut_barra TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_ies INTO m_ies_inf_aut_barra
    FROM par_sup_pad
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "ies_inf_aut_barra"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR m_ies_inf_aut_barra IS NULL OR m_ies_inf_aut_barra = " " THEN
     LET m_ies_inf_aut_barra = "N"
  END IF

  INITIALIZE m_transf_saida TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_ies INTO m_transf_saida
    FROM par_sup_pad
   WHERE cod_empresa   = p_cod_empresa
     AND cod_parametro = "transf_saida"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR m_transf_saida IS NULL OR m_transf_saida = " " THEN
     LET m_transf_saida = "N"
  END IF

  INITIALIZE m_proc_imp_rec_nfr_consig TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"proc_imp_rec_nfr_consignatario")
        RETURNING m_proc_imp_rec_nfr_consig, p_status
  IF p_status = FALSE OR
     m_proc_imp_rec_nfr_consig IS NULL OR
     m_proc_imp_rec_nfr_consig = " " THEN
     LET m_proc_imp_rec_nfr_consig = "N"
  END IF

  #OS. 457661
  INITIALIZE m_permite_alterar_nfs_transito TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"permite_alterar_nfs_transito")
        RETURNING m_permite_alterar_nfs_transito, p_status
  IF p_status = FALSE OR
     m_permite_alterar_nfs_transito IS NULL OR
     m_permite_alterar_nfs_transito = " " THEN
     LET m_permite_alterar_nfs_transito = "N"
  END IF


  #OS 359707
  INITIALIZE m_consiste_nf_integr TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"consiste_nf_ja_integr_cap_con")
       RETURNING m_consiste_nf_integr, p_status
  IF   (m_consiste_nf_integr <> "S"
  AND   m_consiste_nf_integr <> "N")
  OR    m_consiste_nf_integr IS NULL
  THEN LET m_consiste_nf_integr = "N"
  END IF
  #OS 359707

  # BEGIN OS.534634
  INITIALIZE g_gerar_cred_impostos_nfm_import TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"gerar_cred_impostos_nfm_import")
  RETURNING g_gerar_cred_impostos_nfm_import, p_status
  IF p_status = FALSE OR
     g_gerar_cred_impostos_nfm_import IS NULL OR g_gerar_cred_impostos_nfm_import = " " THEN
     LET g_gerar_cred_impostos_nfm_import = '0'
  END IF

  INITIALIZE m_grupo_desp_nfp_com_cred_nfm TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"grupo_desp_nfp_com_cred_nfm")
  RETURNING m_grupo_desp_nfp_com_cred_nfm, p_status
  IF p_status = FALSE OR
     m_grupo_desp_nfp_com_cred_nfm IS NULL OR m_grupo_desp_nfp_com_cred_nfm = " " THEN
     LET m_grupo_desp_nfp_com_cred_nfm = '0'
  END IF
  # END OS.534634

  INITIALIZE m_consulta_ord_descres TO NULL
  CALL log2250_busca_parametro(p_cod_empresa,"consulta_registro_ordem_decres")
       RETURNING m_consulta_ord_descres, p_status

  IF m_consulta_ord_descres IS NULL OR m_consulta_ord_descres = " " THEN
     LET m_consulta_ord_descres = "N"
  END IF

  INITIALIZE m_ent_manual_transf TO NULL #OS372636
  CALL log2250_busca_parametro(p_cod_empresa,"permite_ent_manual_transf_unid")
       RETURNING m_ent_manual_transf, p_status
  IF m_ent_manual_transf IS NULL OR m_ent_manual_transf = " " THEN
     LET m_ent_manual_transf = "N"
  END IF

  INITIALIZE m_trata_nf_em_transito TO NULL ##OS 369029
  CALL log2250_busca_parametro(p_cod_empresa,"efet_tratamento_nf_em_transito")
       RETURNING m_trata_nf_em_transito, p_status

  IF m_trata_nf_em_transito IS NULL OR m_trata_nf_em_transito = " " THEN
     LET m_trata_nf_em_transito = "N"
  END IF

  INITIALIZE m_contr_terc_no_dep TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "contr_terceiro_no_depositante")
       RETURNING m_contr_terc_no_dep, p_status

  IF m_contr_terc_no_dep IS NULL OR m_contr_terc_no_dep = " " THEN
     LET m_contr_terc_no_dep = "N"
  END IF

  INITIALIZE m_gerar_os_recb_mat_terc TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "gerar_os_recb_mat_terc")
  RETURNING m_gerar_os_recb_mat_terc, p_status

  IF (m_gerar_os_recb_mat_terc IS NULL) OR (m_gerar_os_recb_mat_terc = " ") THEN
     LET m_gerar_os_recb_mat_terc = "N"
  END IF

  CALL log2250_busca_parametro(p_cod_empresa,"data_emissao_ped_compra_gao")
      RETURNING m_cons_dat_emis_ped, p_status

  IF p_status = FALSE OR m_cons_dat_emis_ped IS NULL OR m_cons_dat_emis_ped = " " THEN
     LET m_cons_dat_emis_ped = "N"
  END IF

   CALL log2250_busca_parametro(p_cod_empresa,"utiliza_dds_fortaleza")
     RETURNING m_utiliza_dds_fortaleza, p_status
  IF NOT p_status OR m_utiliza_dds_fortaleza IS NULL  THEN
     LET m_utiliza_dds_fortaleza = "N"
  END IF

  CALL log2250_busca_parametro(p_cod_empresa,"confirmacao_nf_compex_mat_prim")
       RETURNING m_confirm_compex_mp, p_status

  IF NOT p_status OR m_confirm_compex_mp IS NULL OR m_confirm_compex_mp = " " THEN
     LET m_confirm_compex_mp = "N"
  END IF

  CALL log2250_busca_parametro(p_cod_empresa,"confirmacao_nf_compex_imobiliz")
       RETURNING m_confirm_compex_ciap, p_status

  IF NOT p_status OR m_confirm_compex_ciap IS NULL OR m_confirm_compex_ciap = " " THEN
     LET m_confirm_compex_ciap = "N"
  END IF

  INITIALIZE m_cnd_pgto_sem_intr_cap TO NULL ##OS 437323
  CALL log2250_busca_parametro(p_cod_empresa,"cond_pgto_padrao_sem_intr_cap")
       RETURNING m_cnd_pgto_sem_intr_cap, p_status

  INITIALIZE m_pct_toler_nf TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "pct_toler_pre_unit_oc_x_nf")
     RETURNING m_pct_toler_nf, p_status
  IF p_status = FALSE OR
     m_pct_toler_nf IS NULL THEN
     LET m_pct_toler_nf = 0
  END IF

  INITIALIZE m_pct_toler_custo TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "pct_toler_pre_unit_oc_x_custo")
     RETURNING m_pct_toler_custo, p_status
  IF p_status = FALSE OR
     m_pct_toler_custo IS NULL THEN
     LET m_pct_toler_custo = 0
  END IF

  INITIALIZE m_diver_nf TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "diver_pre_unit_oc_x_nf")
     RETURNING m_diver_nf, p_status
  IF p_status = FALSE OR
     m_diver_nf IS NULL THEN
     LET m_diver_nf = " "
  END IF

  INITIALIZE m_diver_custo TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "diver_pre_unit_oc_x_custo")
     RETURNING m_diver_custo, p_status
  IF p_status = FALSE OR
     m_diver_custo IS NULL THEN
     LET m_diver_custo = " "
  END IF

  ### Buscando parâmetro "Crédito de ST no faturamento de item comprado para revenda"
  ### Processo de Entradas(2)/Recebimento de Materias(51)/Impostos(60)
  CALL log2250_busca_parametro(p_cod_empresa, "cred_st_faturam_it_compra_revd")
     RETURNING m_cred_st_fat, l_status

  IF NOT l_status OR
     m_cred_st_fat IS NULL OR
     m_cred_st_fat = " " THEN
     LET m_cred_st_fat = "N"
  END IF

  INITIALIZE m_mov_qtd_ser TO NULL

  CALL log2250_busca_parametro(p_cod_empresa, "mov_quantidade_unica_por_serie")
       RETURNING m_mov_qtd_ser, p_status

  IF p_status = FALSE OR m_mov_qtd_ser IS NULL OR m_mov_qtd_ser = " " THEN
     LET m_mov_qtd_ser = "N"
  END IF

  # OS 409509 Niara
  CALL log2250_busca_parametro(p_cod_empresa,'uti_cfop_compl_dic_sergipe')
       RETURNING m_cfop_compl_dic_se, l_status
  IF m_cfop_compl_dic_se IS NULL OR m_cfop_compl_dic_se = ' ' THEN
     LET m_cfop_compl_dic_se = 'N'
  END IF
  #

  #INICIO O.S. 472270
  CALL log2250_busca_parametro(p_cod_empresa, "ies_msg_controlar_terceiros")
       RETURNING m_ies_msg_contr_terc, p_status
  IF p_status = FALSE OR
     m_ies_msg_contr_terc = " " OR
     m_ies_msg_contr_terc IS NULL THEN
     LET m_ies_msg_contr_terc = 'N'
  END IF
  #FIM O.S. 472270

# OS 479248
  INITIALIZE m_ies_local_insp TO NULL
  WHENEVER ERROR CONTINUE
  SELECT par_ies
    INTO m_ies_local_insp
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa = p_cod_empresa
     AND par_sup_pad.cod_parametro = "ies_local_insp"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR
     m_ies_local_insp IS NULL THEN
     LET m_ies_local_insp = "N"
  END IF

  INITIALIZE m_visualizar_notas_em_transito TO NULL #OS477406
  CALL log2250_busca_parametro(p_cod_empresa, "visualizar_notas_em_transito")
     RETURNING m_visualizar_notas_em_transito, p_status
  IF p_status = FALSE
  OR m_visualizar_notas_em_transito IS NULL
  OR m_visualizar_notas_em_transito = " " THEN
     LET m_visualizar_notas_em_transito = "N"
  END IF

 CALL log2250_busca_parametro(p_cod_empresa,"consiste_nf_apos_modificacao")
    RETURNING m_cons_modific, p_status
 IF p_status = FALSE OR
    m_cons_modific IS NULL OR
    m_cons_modific = " " THEN
    LET m_cons_modific = "S"
 END IF

 IF m_consistir_oc_estrutura = " " OR
  m_consistir_oc_estrutura IS NULL THEN
   CALL log2250_busca_parametro(p_cod_empresa,"consistir_oc_estrutura")
        RETURNING m_consistir_oc_estrutura, p_status
   IF p_status = FALSE OR
      m_consistir_oc_estrutura  IS NULL OR
      m_consistir_oc_estrutura  = " " THEN
      LET m_consistir_oc_estrutura  = "N"
   END IF
 END IF

 INITIALIZE m_permite_transf_duplicada_emp TO NULL
 CALL log2250_busca_parametro(p_cod_empresa,"permite_transf_duplicada_emp")
       RETURNING m_permite_transf_duplicada_emp, p_status
 IF p_status = FALSE OR
    m_permite_transf_duplicada_emp IS NULL OR
    m_permite_transf_duplicada_emp = " " THEN
    LET m_permite_transf_duplicada_emp = "N"
 END IF

 INITIALIZE p_status TO NULL  ###OS 512218
 CALL log2250_busca_parametro(p_cod_empresa,"devol_consig_venda_parcial")
      RETURNING m_devol_consig_venda_parcial, p_status
 IF p_status = FALSE OR
    m_devol_consig_venda_parcial IS NULL OR
    m_devol_consig_venda_parcial = " " THEN
    LET m_devol_consig_venda_parcial = "N"
 END IF

 INITIALIZE p_status TO NULL  ###OS 509930
 CALL log2250_busca_parametro(p_cod_empresa,"devol_cliente_parcial")
      RETURNING m_devol_cliente_parcial, p_status
 IF p_status = FALSE OR
    m_devol_cliente_parcial IS NULL OR
    m_devol_cliente_parcial = " " THEN
    LET m_devol_cliente_parcial= "N"
 END IF

 #O.S. 529316
 INITIALIZE m_abre_aut_tela_erros TO NULL
 CALL log2250_busca_parametro(p_cod_empresa, "abre_aut_tela_erros")
    RETURNING m_abre_aut_tela_erros, p_status
 IF p_status = FALSE OR m_abre_aut_tela_erros IS NULL THEN
    LET m_abre_aut_tela_erros = "N"
 END IF
 #O.S. 529316

 #550500#
 INITIALIZE m_atualiza_nf_trans TO NULL
 CALL log2250_busca_parametro(p_cod_empresa, "atualiza_ser_ssr_esp_nf_trans")
    RETURNING m_atualiza_nf_trans, p_status

 IF p_status = FALSE OR m_atualiza_nf_trans IS NULL OR m_atualiza_nf_trans = ' ' THEN
    LET m_atualiza_nf_trans = 'N'
 END IF

  #--inicio--OS 555962 #
  CALL log2250_busca_parametro(p_cod_empresa, "altera_cndpgto_mod_nf_transito")
     RETURNING m_altera_cndpgto_mod_nf_transito, p_status

  IF p_status = FALSE OR
     m_altera_cndpgto_mod_nf_transito IS NULL OR
     m_altera_cndpgto_mod_nf_transito = ' ' THEN
     LET m_altera_cndpgto_mod_nf_transito = 'N'
  END IF
  #---fim----OS 555962 #

  #OS564136
  # O Parâmetro abaixo permite que seja incluida mesma nota/serie/subsérie/fornecedor para empresas
  # diferentes quando for NFE e não possuir CAP centralizado
  CALL log2250_busca_parametro(p_cod_empresa,"permite_ent_mesma_nfe_emp_dif")
  RETURNING m_permite_ent_mesma_nfe_emp_dif, p_status
  IF p_status = FALSE OR
     m_permite_ent_mesma_nfe_emp_dif IS NULL OR
     m_permite_ent_mesma_nfe_emp_dif = " " THEN
     LET m_permite_ent_mesma_nfe_emp_dif = "N"
  END IF
  #FIM OS564136

  #--inicio--OS 534866 #
  INITIALIZE m_utiliza_nf_eletronica TO NULL
  CALL log2250_busca_parametro(p_cod_empresa, "utiliza_nf_eletr")
     RETURNING m_utiliza_nf_eletronica, p_status

  IF p_status = FALSE OR m_utiliza_nf_eletronica IS NULL OR m_utiliza_nf_eletronica = ' ' THEN
     LET m_utiliza_nf_eletronica = 'N'
  END IF
  #---fim----OS 534866 #

  #--inicio--OS 502143 #
  IF find4GLFunction('supy101_cliente_319') THEN
     IF supy101_cliente_319() = TRUE  THEN
        CALL log2250_busca_parametro(p_cod_empresa, "cod_item_cred_transf_icms")
            RETURNING m_cod_item_cred_transf_icms, p_status

         IF p_status = FALSE OR
            m_cod_item_cred_transf_icms IS NULL THEN
            LET m_cod_item_cred_transf_icms = ' '
         END IF
     END IF
  END IF
  #---fim----OS 502143 #


 #OS 561.763
 INITIALIZE m_exigir_dupl_nff_vencto_pc TO NULL
 CALL log2250_busca_parametro(p_cod_empresa, "exigir_dupl_nff_vencto_pc")
    RETURNING m_exigir_dupl_nff_vencto_pc, p_status
 IF p_status = FALSE OR
    m_exigir_dupl_nff_vencto_pc IS NULL OR
    m_exigir_dupl_nff_vencto_pc = ' ' THEN
    LET m_exigir_dupl_nff_vencto_pc = 'N'
 END IF
 #OS 561.763

 # CH 739942 - Rafael F. B. - 11/01/2010 #
 CALL log2250_busca_parametro(p_cod_empresa, "permite_alt_inf_compl_nf_cap")
      RETURNING m_permite_alt_inf_compl_nf_cap, l_status
 IF l_status = FALSE OR
    m_permite_alt_inf_compl_nf_cap IS NULL OR
    m_permite_alt_inf_compl_nf_cap = " " THEN
    LET m_permite_alt_inf_compl_nf_cap = "N"
 END IF


 #769302#
 WHENEVER ERROR CONTINUE
 SELECT par_ies
   INTO m_transf_incid_its
   FROM par_sup_pad
  WHERE par_sup_pad.cod_empresa   = p_cod_empresa
    AND par_sup_pad.cod_parametro = 'transf_incid_its'
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 OR
    m_transf_incid_its IS NULL OR
    m_transf_incid_its = ' ' THEN
    LET m_transf_incid_its = 'N'
 END IF
 #---fi--- 769302#

 # CH 762211
 CALL log2250_busca_parametro(p_cod_empresa, "utiliza_numeracao_nf_digitos")
      RETURNING m_utiliza_num_nfe, l_status
 IF l_status = FALSE OR
    m_utiliza_num_nfe IS NULL OR
    m_utiliza_num_nfe = " " THEN
    LET m_utiliza_num_nfe = "N"
 END IF
 INITIALIZE m_altera_nfm_7_para_6_aut TO NULL
 CALL log2250_busca_parametro(p_cod_empresa, "altera_nfm_7_para_6_automatico")
      RETURNING m_altera_nfm_7_para_6_aut, l_status
 IF l_status = FALSE OR
    m_altera_nfm_7_para_6_aut IS NULL OR
    m_altera_nfm_7_para_6_aut = " " THEN
    LET m_altera_nfm_7_para_6_aut = "N"
 END IF

 CALL log2250_busca_parametro(p_cod_empresa,'ies_informa_relac_nf_benef')
       RETURNING m_ies_relac_nf_benef, l_status
 IF m_ies_relac_nf_benef IS NULL OR m_ies_relac_nf_benef = ' ' THEN
    LET m_ies_relac_nf_benef = 'N'
 END IF


 INITIALIZE m_mod_embarque_nfm_importacao TO NULL
 CALL log2250_busca_parametro(p_cod_empresa, "mod_embarque_nfm_importacao")
    RETURNING m_mod_embarque_nfm_importacao, l_status
 IF l_status = FALSE THEN
    LET m_mod_embarque_nfm_importacao = ' '
 END IF


 INITIALIZE m_selec_itens_nfp_importacao TO NULL
 CALL log2250_busca_parametro(p_cod_empresa, "selec_itens_nfp_importacao")
    RETURNING m_selec_itens_nfp_importacao, l_status
 IF l_status = FALSE THEN
    LET m_selec_itens_nfp_importacao = 'N'
 END IF

 RETURN TRUE

 END FUNCTION

#---------------------------------------#
 FUNCTION sup3760_possui_rateio_compl()
#---------------------------------------#
  DEFINE l_count  SMALLINT

  INITIALIZE l_count TO NULL
  WHENEVER ERROR CONTINUE
  SELECT COUNT(*)
    INTO l_count
    FROM relac_nf_import_it
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP

  IF l_count > 0 THEN
     RETURN TRUE
  END IF
  RETURN FALSE

 END FUNCTION

#-----------------------------------------#
 FUNCTION sup3760_atualizar_ordens_fluxo()
#-----------------------------------------#
  DEFINE l_ind SMALLINT

  #FLUXO DE CAIXA
  FOR l_ind = 1 TO 999
      IF ma_inf_ar[l_ind].num_pedido IS NULL THEN
         EXIT FOR
      END IF

      IF l_ind > 1 THEN
         #Não processar a mesma ordem mais de uma vez
         IF ma_inf_ar[l_ind].num_oc = ma_inf_ar[l_ind - 1].num_oc THEN
            CONTINUE FOR
         END IF
      END IF

      #Atualizar saldo da ordem de compra no
      #fluxo de caixa após exclusão de inf. fiscais do AR
      IF NOT fcl1150_integra_oc_fcx(p_dados_tela.cod_empresa,
                                    ma_inf_ar[l_ind].num_oc,"IN") THEN
         LET p_houve_erro = TRUE
         EXIT FOR
      END IF
  END FOR
 END FUNCTION

#------------------------------------------------#
 FUNCTION sup3760_transfere_h_est_trans_de_terc()
#------------------------------------------------#
 DEFINE lr_h_est_trans_terc RECORD LIKE h_est_trans_terc.*

 INITIALIZE lr_h_est_trans_terc TO NULL
 DECLARE cq_busca_h_terc CURSOR WITH HOLD FOR
    SELECT *
      FROM h_est_trans_terc
     WHERE cod_empresa    = p_cod_empresa
       AND num_nf         = p_dados_tela.num_nf
       AND ser_nf         = p_dados_tela.ser_nf
       AND ssr_nf         = p_dados_tela.ssr_nf
       AND ies_especie_nf = p_dados_tela.ies_especie_nf
       AND cod_fornecedor = p_dados_tela.cod_fornecedor
       AND ies_situacao   = "3"
 FOREACH cq_busca_h_terc INTO lr_h_est_trans_terc.*
    LET lr_h_est_trans_terc.num_transac = 0

    WHENEVER ERROR CONTINUE
    INSERT INTO est_trans_de_terc ( cod_empresa, dat_movto, num_nf, ser_nf, ssr_nf, ies_especie_nf, cod_fornecedor, num_sequencia, cod_item, cod_local, num_lote, qtd_consumo, ies_situacao, num_pedido, num_oc, nom_usuario_fat, dat_autoriz_fat, hor_autoriz_fat, nom_usuario_valid, dat_validacao_fat, hor_validacao_fat, tex_observ, num_aviso_rec, num_seq, num_transac_origem, num_transac_dest, num_versao_cot )  VALUES ( lr_h_est_trans_terc.cod_empresa, lr_h_est_trans_terc.dat_movto, lr_h_est_trans_terc.num_nf, lr_h_est_trans_terc.ser_nf, lr_h_est_trans_terc.ssr_nf, lr_h_est_trans_terc.ies_especie_nf, lr_h_est_trans_terc.cod_fornecedor, lr_h_est_trans_terc.num_sequencia, lr_h_est_trans_terc.cod_item, lr_h_est_trans_terc.cod_local, lr_h_est_trans_terc.num_lote, lr_h_est_trans_terc.qtd_consumo, lr_h_est_trans_terc.ies_situacao, lr_h_est_trans_terc.num_pedido, lr_h_est_trans_terc.num_oc, lr_h_est_trans_terc.nom_usuario_fat, lr_h_est_trans_terc.dat_autoriz_fat, lr_h_est_trans_terc.hor_autoriz_fat, lr_h_est_trans_terc.nom_usuario_valid, lr_h_est_trans_terc.dat_validacao_fat, lr_h_est_trans_terc.hor_validacao_fat, lr_h_est_trans_terc.tex_observ, lr_h_est_trans_terc.num_aviso_rec, lr_h_est_trans_terc.num_seq, lr_h_est_trans_terc.num_transac_origem, lr_h_est_trans_terc.num_transac_dest, lr_h_est_trans_terc.num_versao_cot)
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("INCLUSAO","EST_TRANS_DE_TERC")
    ELSE
       WHENEVER ERROR CONTINUE
       DELETE FROM h_est_trans_terc
        WHERE cod_empresa    = p_cod_empresa
          AND num_nf         = p_dados_tela.num_nf
          AND ser_nf         = p_dados_tela.ser_nf
          AND ssr_nf         = p_dados_tela.ssr_nf
          AND ies_especie_nf = p_dados_tela.ies_especie_nf
          AND cod_fornecedor = p_dados_tela.cod_fornecedor
          AND ies_situacao   = "3"
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("EXCLUSAO","H_EST_TRANS_TERC")
       END IF
    END IF
 END FOREACH

 END FUNCTION

#------------------------------------------------------#
 FUNCTION sup3760_busca_pct_bc_pis(l_funcao, l_num_seq)
#------------------------------------------------------#

  DEFINE l_funcao         CHAR(08),
         l_num_seq        LIKE aviso_rec.num_seq,
         lr_nf_sup_erro   RECORD LIKE nf_sup_erro.*,
         l_utiliza_perc_mes_atual CHAR(01)

  #O percentual de redução de PIS/COFINS são iguais, porisso esta sendo verificado somente
  #a existência do percentual do PIS
  INITIALIZE m_pct_bc_pis TO NULL
  WHENEVER ERROR CONTINUE
    SELECT pct_bas_calc
      INTO m_pct_bc_pis
      FROM sup_pct_bc_imposto
     WHERE imposto = "1"
       AND empresa = p_cod_empresa
       AND mes     = MONTH(p_dados_tela.dat_entrada_nf)
       AND ano     = YEAR(p_dados_tela.dat_entrada_nf)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("LEITURA","SUP_PCT_BC_IMPOSTO")
     RETURN FALSE
  END IF

  IF m_pct_bc_pis IS NULL THEN
     INITIALIZE l_utiliza_perc_mes_atual TO NULL
     CALL log2250_busca_parametro(p_cod_empresa,"utiliza_perc_mes_atual")
        RETURNING l_utiliza_perc_mes_atual, p_status

     IF l_utiliza_perc_mes_atual IS NULL
     OR l_utiliza_perc_mes_atual = " " THEN
        LET l_utiliza_perc_mes_atual = "0"
     END IF

     IF l_funcao = "REDUCAO" THEN
        ERROR "Não possui percentual de redução de base PIS/COFINS para o período (SUP0988)"
     ELSE
        IF l_utiliza_perc_mes_atual = 1 OR l_utiliza_perc_mes_atual = 3 THEN
           RETURN FALSE
        ELSE
           LET lr_nf_sup_erro.empresa            = p_cod_empresa
           LET lr_nf_sup_erro.num_aviso_rec      = p_dados_tela.num_aviso_rec
           LET lr_nf_sup_erro.num_seq            = l_num_seq
           LET lr_nf_sup_erro.ies_origem_erro    = "1"
           LET lr_nf_sup_erro.ies_erro_grave     = "N"
           LET lr_nf_sup_erro.des_pendencia_item =
               "Nao possui PCT redução base PIS/COFINS p/ período (SUP0988)"
           LET lr_nf_sup_erro.num_transac        = 0

           WHENEVER ERROR CONTINUE
             INSERT INTO nf_sup_erro ( empresa, num_aviso_rec, num_seq, des_pendencia_item, ies_origem_erro, ies_erro_grave )
          VALUES ( lr_nf_sup_erro.empresa, lr_nf_sup_erro.num_aviso_rec, lr_nf_sup_erro.num_seq, lr_nf_sup_erro.des_pendencia_item, lr_nf_sup_erro.ies_origem_erro, lr_nf_sup_erro.ies_erro_grave)
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("INCLUSAO","NF_SUP_ERRO(2)")
           END IF
        END IF
     END IF
     RETURN FALSE
  END IF

  RETURN TRUE

END FUNCTION

#-------------------------------------#
 FUNCTION sup3760_consiste_pedido_nf()
#-------------------------------------#
  DEFINE l_nota_fiscal       LIKE sup_oc_nota_fiscal.nota_fiscal,
         l_serie_nota_fiscal LIKE sup_oc_nota_fiscal.serie_nota_fiscal,
         l_subserie_nf       LIKE sup_oc_nota_fiscal.subserie_nf

  #OS 220554
  IF m_existe_tab_oc_nf AND p_array_pedidos[1].num_pedido > 0 THEN
     CALL sup6516_busca_nf_pedido(p_cod_empresa,p_array_pedidos[1].num_pedido)
          RETURNING l_nota_fiscal, l_serie_nota_fiscal, l_subserie_nf
     IF l_nota_fiscal > 0 THEN
        IF  p_dados_tela.num_nf = l_nota_fiscal
        AND p_dados_tela.ser_nf = l_serie_nota_fiscal
        AND p_dados_tela.ssr_nf = l_subserie_nf THEN
        ELSE
           ERROR "Número da nota fiscal não confere com pedido (NF ",
                 l_nota_fiscal USING "<<<<<&","/",
                 l_serie_nota_fiscal,"/",
                 l_subserie_nf USING "<&",")"
           RETURN FALSE
        END IF
     END IF
  END IF

  RETURN TRUE
 END FUNCTION

#-------------------------------------------------------------------------#
 FUNCTION sup3760_conversao_item_codigo_barra(l_cod_item,l_cod_fornecedor)
#-------------------------------------------------------------------------#
  DEFINE l_cod_item        LIKE item.cod_item,
         l_cod_fornecedor  LIKE fornecedor.cod_fornecedor,
         l_cod_item_barra  LIKE item.cod_item,
         l_ind             SMALLINT,
         l_codigo_numerico SMALLINT

  IF m_ies_inf_aut_barra = "N" THEN
     RETURN l_cod_item
  END IF

  IF l_cod_item IS NOT NULL AND l_cod_item <> " " THEN
     WHENEVER ERROR CONTINUE
     SELECT den_item
       FROM item
      WHERE cod_empresa = p_cod_empresa
        AND cod_item    = l_cod_item
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        LET l_codigo_numerico = TRUE
        FOR l_ind = 1 TO LENGTH(l_cod_item)
           IF l_cod_item[l_ind] < "0" OR l_cod_item[l_ind] > "9" THEN
              LET l_codigo_numerico = FALSE
              EXIT FOR
           END IF
        END FOR

        IF l_codigo_numerico THEN
           INITIALIZE l_cod_item_barra TO NULL

           WHENEVER ERROR CONTINUE
           SELECT cod_item INTO l_cod_item_barra
             FROM item_barra_fornec
            WHERE cod_empresa       = p_cod_empresa
              AND cod_item_bar_forn = l_cod_item
              AND cod_fornecedor    = l_cod_fornecedor
           WHENEVER ERROR STOP
           IF sqlca.sqlcode = 0 THEN
              RETURN l_cod_item_barra
           END IF

           WHENEVER ERROR CONTINUE
           SELECT cod_item INTO l_cod_item_barra
             FROM item_barra
            WHERE cod_empresa        = p_cod_empresa
              AND cod_item_barra_dig = l_cod_item
           WHENEVER ERROR STOP
           IF sqlca.sqlcode = 0 THEN
              RETURN l_cod_item_barra
           END IF
        END IF
     END IF
  END IF

  RETURN l_cod_item
 END FUNCTION

#-----------------------------------------------------------#
 FUNCTION sup3760_pedido_ordem_valido(l_num_pedido,l_num_oc)
#-----------------------------------------------------------#
  DEFINE l_num_pedido   LIKE pedido_sup.num_pedido,
         l_num_oc       LIKE ordem_sup.num_oc,
         l_ies_situacao LIKE pedido_sup.ies_situa_ped

  INITIALIZE l_ies_situacao TO NULL
  WHENEVER ERROR CONTINUE
  SELECT ies_situa_ped INTO l_ies_situacao
    FROM pedido_sup
   WHERE cod_empresa      = p_cod_empresa
     AND num_pedido       = l_num_pedido
     AND ies_versao_atual = "S"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     ERROR " Pedido de compra ",l_num_pedido USING "<<<<<&",
           " não cadastrado "
     RETURN FALSE
  END IF
  IF l_ies_situacao <> "R" THEN
     ERROR " Pedido de compra ",l_num_pedido USING "<<<<<&",
           " não liberado para recebimento. "
     RETURN FALSE
  END IF

  INITIALIZE l_ies_situacao TO NULL
  WHENEVER ERROR CONTINUE
  SELECT ies_situa_oc INTO l_ies_situacao
    FROM ordem_sup
   WHERE cod_empresa      = p_cod_empresa
     AND num_oc           = l_num_oc
     AND ies_versao_atual = "S"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     ERROR " Ordem de compra ",l_num_oc USING "<<<<<<<<&",
           " não cadastrada "
     RETURN FALSE
  END IF
  IF l_ies_situacao <> "R" THEN
     ERROR " Ordem de compra ",l_num_oc USING "<<<<<<<<&",
           " não liberada para recebimento. "
     RETURN FALSE
  END IF

  RETURN TRUE
 END FUNCTION

#----------------------#
 FUNCTION sup3760_zoom() #Rafael - OS312341
#----------------------#

  DEFINE l_num_ad         LIKE ad_mestre.num_ad,
         l_cod_emp_ad     LIKE ad_mestre.cod_empresa,
         comando          CHAR(500)

  MENU "OPCAO"

    BEFORE MENU
      IF m_ies_bloq_cc_os <> "5" AND
         m_controla_gao = "N" THEN
         HIDE OPTION "orcamenTo_contas" #778654#
      END IF

      # OS 527755
      IF find4GLFunction('supy5_cliente_78') THEN
         IF supy5_cliente_78() = FALSE  THEN
            HIDE OPTION "OC_estoque"
            HIDE OPTION "oC_dd"
            HIDE OPTION "Receb_esperados"
            HIDE OPTION "Receb_realizados"
         END IF
      ELSE
         HIDE OPTION "OC_estoque"
         HIDE OPTION "oC_dd"
         HIDE OPTION "Receb_esperados"
         HIDE OPTION "Receb_realizados"
      END IF

      IF NOT sup1473_exibe_livro_fiscal(p_cod_empresa) THEN
         HIDE OPTION "Livro_fiscal"
      END IF

    COMMAND "Itens"    "Consulta os itens da N.F."
      HELP 025
      MESSAGE ""
       DISPLAY "                             " AT 19,50
       DISPLAY "                        " AT 19,02
       DISPLAY "                                                             "  AT 9,11
      IF p_dados_tela.num_nf IS NULL THEN
         CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
      ELSE
         CALL sup376_zoom_itens()
      END IF
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF
    COMMAND "Pedidos"   "Consulta Pedido/O.C. relacionadas ao item"
      HELP 026
      MESSAGE ""
      DISPLAY "                             " AT 19,50
      DISPLAY "                        " AT 19,02
      DISPLAY "                                                             "  AT 9,11
      IF p_dados_tela.num_nf    IS NULL THEN
         CALL log0030_mensagem(" Consulte previamente para executar esta funcao","exclamation")
      ELSE
         CALL sup405_consulta_ped_oc_item(p_cod_empresa, p_dados_tela.num_aviso_rec)

      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)
      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF

    COMMAND KEY ("T") "orcamenTo_contas" "Consulta Orcamento das Contas" #778654#
      HELP 001
      MESSAGE ""
      IF m_controla_gao = "S" THEN
         CALL log120_procura_caminho("gao0008") RETURNING comando
      ELSE
         CALL log120_procura_caminho("oln0300") RETURNING comando
      END IF
      RUN comando RETURNING p_cancel
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601

    COMMAND KEY ("D") "AD_AP" "Consulta apropriações de despesas CAP"
      HELP 058
      IF log005_seguranca(p_user,"CAP","CAP0220","CO")  THEN  #807088
         CALL  sup3760_verifica_ad_nf() RETURNING l_num_ad, l_cod_emp_ad
         CALL log120_procura_caminho("cap0220") RETURNING comando
         IF l_num_ad IS NOT NULL OR
            l_num_ad <> " "      AND
            l_cod_emp_ad IS NOT NULL OR
            l_cod_emp_ad = " "     THEN
            LET comando = comando CLIPPED, " ", l_num_ad, " ", l_cod_emp_ad
         END IF
         RUN comando RETURNING p_cancel
      ELSE
         CALL log0030_mensagem("Usuário não autorizado a utilizar o sistema","info")
      END IF

    COMMAND "Livro_fiscal" "Visualiza layout impressão livro de registro de entrada."
      HELP 060
      IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","CO")  THEN
         IF p_dados_tela.num_nf IS NULL THEN
            CALL log0030_mensagem(" Consulte previamente para executar esta função","exclamation")
         ELSE
            CALL sup1473_visualiza_livro_fiscal(p_nf_sup.cod_empresa_estab,
                                                p_nf_sup.cod_regist_entrada,
                                                p_nf_sup.num_aviso_rec,
                                                p_nf_sup.dat_entrada_nf,
                                                "","","","","","","",
                                                p_nf_sup.cod_empresa)

            CALL log006_exibe_teclas("01", p_versao)
            CURRENT WINDOW IS w_sup37601
         END IF
      ELSE
         CALL log0030_mensagem("Usuário não autorizado a utilizar o sistema","info")
      END IF

     # OS 527755
     COMMAND KEY ("O") "OC_estoque" "Ordem de compra - item de estoque"
       HELP 065
       MESSAGE ""
       CALL log120_procura_caminho("sup0290") RETURNING comando
       RUN comando RETURNING p_cancel

     COMMAND KEY ("C") "oC_dd" "Ordem compra débito direto "
       HELP 066
       MESSAGE ""
       CALL log120_procura_caminho("sup0300") RETURNING comando
       RUN comando RETURNING p_cancel

     COMMAND KEY ("E") "Receb_esperados" "Recebimentos esperados "
       HELP 067
       MESSAGE ""
       CALL log120_procura_caminho("sup0500") RETURNING comando
       RUN comando RETURNING p_cancel

     COMMAND KEY ("R") "Receb_realizados" "Recebimentos realizados"
       HELP 068
       MESSAGE ""
       CALL log120_procura_caminho("sup0540") RETURNING comando
       RUN comando RETURNING p_cancel

    COMMAND "Fim" "Retorna ao Menu Anterior"
      HELP 008
      EXIT MENU



  #lds COMMAND KEY ("F11") "Sobre" "Informações sobre a aplicação (F11)."
  #lds CALL LOG_info_sobre(sourceName(),p_versao)

  END MENU

 END FUNCTION

#--------------------------------#
 FUNCTION sup3760_verifica_ad_nf()
#--------------------------------#

  DEFINE l_num_ad         LIKE ad_mestre.num_ad,
         l_cod_emp_ad     LIKE ad_mestre.cod_empresa,
         l_num_nf         LIKE ad_mestre.num_nf

  INITIALIZE l_num_ad,
             l_cod_emp_ad,
             l_num_nf      TO NULL

  LET l_num_nf = p_dados_tela.num_nf

  IF p_dados_tela.num_nf IS NULL THEN
     LET l_num_ad = " "
     LET l_cod_emp_ad = " "
  ELSE
     WHENEVER ERROR CONTINUE
     SELECT a.cod_empresa, a.num_ad
       INTO l_cod_emp_ad, l_num_ad
       FROM ad_mestre a
      WHERE a.cod_empresa_orig = p_dados_tela.cod_empresa
        AND a.num_nf           = l_num_nf
        AND a.ser_nf           = p_dados_tela.ser_nf
        AND a.ssr_nf           = p_dados_tela.ssr_nf
        AND a.cod_fornecedor   = p_dados_tela.cod_fornecedor
     WHENEVER ERROR CONTINUE
     IF SQLCA.sqlcode <> 0 THEN
        LET l_num_ad = " "
        LET l_cod_emp_ad = " "
     END IF
  END IF

  RETURN l_num_ad, l_cod_emp_ad

 END FUNCTION

#---------------------------------------------------------#
FUNCTION sup3760_fornecedor_triangulacao(l_triang_em_terc, l_final_transac)
#---------------------------------------------------------#
 DEFINE lr_dados RECORD
                    cod_fornecedor LIKE nf_sup.cod_fornecedor,
                    raz_social     LIKE fornecedor.raz_social
                  END RECORD,
        #--inicio--vanderlei OS 402676 #
        l_triang_em_terc         SMALLINT,
        l_erro                   SMALLINT,
        #---fim----vanderlei OS 402676 #
        l_final_transac          SMALLINT,
        l_msg                    CHAR(100)

 INITIALIZE lr_dados TO NULL

 WHENEVER ERROR CONTINUE
 SELECT parametro_texto
   INTO lr_dados.cod_fornecedor
   FROM sup_par_ar
  WHERE empresa = p_cod_empresa
    AND aviso_recebto     = p_dados_tela.num_aviso_rec
    AND seq_aviso_recebto = 0
    AND parametro     = "fornec_triangulacao"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    CALL sup3760_raz_social_fornecedor(lr_dados.cod_fornecedor) RETURNING lr_dados.raz_social
 END IF

 CALL log130_procura_caminho("sup3760g") RETURNING comando3
 OPEN WINDOW w_sup3760g AT 06,02 WITH FORM comando3
      ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, FORM LINE 1)
 DISPLAY BY NAME lr_dados.*


 CALL log006_exibe_teclas("01 02 03 07", p_versao)

 CURRENT WINDOW IS w_sup3760g

 LET int_flag = 0

 INPUT BY NAME lr_dados.* WITHOUT DEFAULTS

    BEFORE FIELD cod_fornecedor
       CALL sup3760_botao_zoom("ON",2,11)

    AFTER FIELD cod_fornecedor
       IF lr_dados.cod_fornecedor IS NOT NULL THEN
       #   ERROR 'Informe o código do fornecedor.'
       #   NEXT FIELD cod_fornecedor
       #ELSE

          CALL sup3760_raz_social_fornecedor(lr_dados.cod_fornecedor) RETURNING lr_dados.raz_social

          #--inicio--vanderlei OS 402676 #
          IF lr_dados.raz_social IS NULL OR lr_dados.raz_social = " " THEN
             CALL log0030_mensagem('Fornecedor não cadastrado.','exclamation')
             NEXT FIELD cod_fornecedor
          END IF

          # -- Efetua consistência para fornecedor triangulação somente se o grupo de -- #
          # -- despesa do item for do tipo 'R', ou seja, triângulação "item_em_terc"  -- #
          IF l_triang_em_terc THEN
             IF NOT sup3760_fornec_triang_cadastrado_sup0220(p_cod_empresa,
                                                             p_dados_tela.cod_fornecedor,
                                                             lr_dados.cod_fornecedor) THEN
                CALL log0030_mensagem('Fornecedor informado não cadastrado como triangulação no VDP0815(Opção: iNf.compl) para o fornecedor da nota fiscal.','exclamation')
                NEXT FIELD cod_fornecedor
             END IF
          END IF
          #---fim----vanderlei OS 402676 #
          DISPLAY BY NAME lr_dados.raz_social
       END IF
       CALL sup3760_botao_zoom("OFF",2,11)

    ON KEY (control-z, f4)
         LET lr_dados.cod_fornecedor = sup162_popup_fornecedor()
         IF lr_dados.cod_fornecedor IS NOT NULL  THEN
            CURRENT WINDOW IS w_sup3760g
            DISPLAY BY NAME lr_dados.cod_fornecedor
         END IF
         CURRENT WINDOW IS w_sup3760g

    ON KEY (control-w, f1)
       #lds IF NOT LOG_logix_versao5() THEN
       #lds CONTINUE INPUT
       #lds END IF
       CALL sup376_help()

    AFTER INPUT
       IF int_flag = 0 THEN
          #--inicio--vanderlei OS 409196 #
          IF m_dados_copia.ser_nf_dest IS NULL THEN
             LET m_dados_copia.ser_nf_dest = ' '
          END IF
          #---fim----vanderlei OS 409196 #
          IF lr_dados.cod_fornecedor IS NOT NULL THEN
          #   ERROR 'Informe o código do fornecedor.'
          #   SLEEP 1
          #   NEXT FIELD cod_fornecedor
          #ELSE

             CALL sup3760_raz_social_fornecedor(lr_dados.cod_fornecedor) RETURNING lr_dados.raz_social
             DISPLAY BY NAME lr_dados.raz_social

             #-- OS 777422 fim --#
             WHENEVER ERROR CONTINUE
             SELECT cod_fornecedor
               FROM item_de_terc
              WHERE cod_empresa    = p_cod_empresa
                AND num_nf         = p_dados_tela.num_nf
                AND ser_nf         = p_dados_tela.ser_nf
                AND ssr_nf         = p_dados_tela.ssr_nf
                AND ies_especie_nf = p_dados_tela.ies_especie_nf
                AND cod_fornecedor = lr_dados.cod_fornecedor
             WHENEVER ERROR STOP
             IF sqlca.sqlcode = 0
             OR sqlca.sqlcode = -284 THEN
                LET l_msg = "Controle de terceiro já informado para NF ",p_dados_tela.num_nf CLIPPED," Sér ",p_dados_tela.ser_nf CLIPPED," Sub ",p_dados_tela.ssr_nf CLIPPED," Fornecedor ",lr_dados.cod_fornecedor CLIPPED," Espécie ",p_dados_tela.ies_especie_nf
                CALL log0030_mensagem(l_msg,"info")
                NEXT FIELD cod_fornecedor
             END IF
             #-- OS 777422 fim --#

### PAULA 407088 - pesquisa item_de_terc e atualiza o fornecedor
             WHENEVER ERROR CONTINUE
             SELECT cod_fornecedor
               FROM item_de_terc
              WHERE cod_empresa    = p_cod_empresa
                AND num_nf         = p_dados_tela.num_nf
                AND ser_nf         = p_dados_tela.ser_nf
                AND ssr_nf         = p_dados_tela.ssr_nf
                AND ies_especie_nf = p_dados_tela.ies_especie_nf
                AND cod_fornecedor = p_dados_tela.cod_fornecedor
             WHENEVER ERROR STOP
             IF sqlca.sqlcode = 0 OR
                sqlca.sqlcode = -284 THEN
                WHENEVER ERROR CONTINUE
                UPDATE item_de_terc
                   SET cod_fornecedor = lr_dados.cod_fornecedor
                 WHERE cod_empresa    = p_cod_empresa
                   AND num_nf         = p_dados_tela.num_nf
                   AND ser_nf         = p_dados_tela.ser_nf
                   AND ssr_nf         = p_dados_tela.ssr_nf
                   AND ies_especie_nf = p_dados_tela.ies_especie_nf
                   AND cod_fornecedor = p_dados_tela.cod_fornecedor
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("ATUALIZACAO","ITEM_DE_TERC")
                   LET int_flag = TRUE
                END IF
                IF p_ies_contab_aen = "4" THEN
                   WHENEVER ERROR CONTINUE
                   UPDATE item_de_terc_area
                      SET cod_fornecedor = lr_dados.cod_fornecedor
                    WHERE cod_empresa    = p_cod_empresa
                      AND num_nf         = p_dados_tela.num_nf
                      AND ser_nf         = p_dados_tela.ser_nf
                      AND ssr_nf         = p_dados_tela.ssr_nf
                      AND ies_especie_nf = p_dados_tela.ies_especie_nf
                      AND cod_fornecedor = p_dados_tela.cod_fornecedor
                   WHENEVER ERROR STOP
                END IF
                WHENEVER ERROR CONTINUE
                UPDATE item_de_terc_compl
                   SET cod_cliente = lr_dados.cod_fornecedor,
                       cod_fornec_nf = lr_dados.cod_fornecedor
                 WHERE cod_empresa    = p_cod_empresa
                   AND num_nf         = p_dados_tela.num_nf
                   AND ser_nf         = p_dados_tela.ser_nf
                   AND ssr_nf         = p_dados_tela.ssr_nf
                   AND ies_especie_nf = p_dados_tela.ies_especie_nf
                   AND cod_fornec_nf  = p_dados_tela.cod_fornecedor
                WHENEVER ERROR STOP

                WHENEVER ERROR CONTINUE
                UPDATE sup_item_terc_end SET fornecedor = lr_dados.cod_fornecedor
                 WHERE empresa           = p_cod_empresa
                   AND nota_fiscal       = p_dados_tela.num_nf
                   AND serie_nota_fiscal = p_dados_tela.ser_nf
                   AND subserie_nf       = p_dados_tela.ssr_nf
                   AND espc_nota_fiscal  = p_dados_tela.ies_especie_nf
                   AND fornecedor        = p_dados_tela.cod_fornecedor
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("UPDATE","SUP_ITEM_TERC_END")
                   LET INT_FLAG = TRUE
                END IF

             END IF

             IF log0150_verifica_se_coluna_existe("nf_sup_erro","aviso_recebto") = FALSE THEN
                WHENEVER ERROR CONTINUE
                DELETE FROM nf_sup_erro
                 WHERE empresa            = p_cod_empresa
                   AND num_aviso_rec      = p_aviso_rec.num_aviso_rec
                   AND des_pendencia_item = "Falta relacionar fornecedor triangulação. "
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("EXCLUSAO","NF_SUP_ERRO")
                END IF
             ELSE
                WHENEVER ERROR CONTINUE
                DELETE FROM nf_sup_erro
                 WHERE empresa            = p_cod_empresa
                   AND aviso_recebto      = p_aviso_rec.num_aviso_rec
                   AND des_pendencia_item = "Falta relacionar fornecedor triangulação. "
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   CALL log003_err_sql("EXCLUSAO","NF_SUP_ERRO")
                END IF
             END IF
          END IF
       END IF

 END INPUT

 CALL sup3760_botao_zoom("OFF",2,11)

 IF int_flag THEN
    LET int_flag = FALSE
    ERROR 'Relacionamento cancelado.'
 ELSE
    LET l_erro = 0                         #Vanderlei - OS 402676 #
    IF NOT l_final_transac THEN
       CALL log085_transacao("BEGIN")
    END IF
    WHENEVER ERROR CONTINUE
    SELECT parametro_texto
      FROM sup_par_ar
     WHERE empresa = p_cod_empresa
       AND aviso_recebto     = p_dados_tela.num_aviso_rec
       AND seq_aviso_recebto = 0
       AND parametro     = "fornec_triangulacao"
    WHENEVER ERROR CONTINUE
    IF sqlca.sqlcode <> 0 THEN
       WHENEVER ERROR CONTINUE
       INSERT INTO sup_par_ar VALUES (p_cod_empresa,
                                      p_dados_tela.num_aviso_rec,
                                      0,
                                      "fornec_triangulacao",
                                      NULL,
                                      lr_dados.cod_fornecedor,
                                      NULL,
                                      NULL)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INCLUSAO","SUP_PAR_AR3")
          LET l_erro = 1                               #Vanderlei - OS 402676 #
          #CALL log085_transacao("ROLLBACK")
          #ERROR 'Relacionamento cancelado.'
       ELSE
          LET l_erro = 0                               #Vanderlei - OS 402676 #
          #CALL log085_transacao("COMMIT")
          #ERROR 'Relacionamento efetuado com sucesso.'
          #SLEEP 2
       END IF
    ELSE
    #--inicio--vanderlei OS 402676 #
       IF lr_dados.cod_fornecedor IS NULL OR lr_dados.cod_fornecedor = " " THEN
          WHENEVER ERROR CONTINUE
          DELETE FROM sup_par_ar
           WHERE empresa           = p_cod_empresa
             AND aviso_recebto     = p_dados_tela.num_aviso_rec
             AND seq_aviso_recebto = 0
             AND parametro         = "fornec_triangulacao"
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("EXCLUSÃO","SUP_PAR_AR")
             LET l_erro = 1
          END IF
       ELSE
          WHENEVER ERROR CONTINUE
          UPDATE sup_par_ar
             SET parametro_texto = lr_dados.cod_fornecedor
           WHERE empresa           = p_cod_empresa
             AND aviso_recebto     = p_dados_tela.num_aviso_rec
             AND seq_aviso_recebto = 0
             AND parametro         = "fornec_triangulacao"
          WHENEVER ERROR CONTINUE
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("ATUALIZACAO","SUP_PAR_AR4")
             LET l_erro = 1
          END IF
       END IF
    END IF
    IF NOT l_final_transac THEN
       IF l_erro THEN
          CALL log085_transacao("ROLLBACK")
          ERROR 'Relacionamento cancelado.'
       ELSE
          WHENEVER ERROR CONTINUE
              CALL log085_transacao("COMMIT")
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             CALL log003_err_sql("COMMIT","FORNECEDOR_TRIANGULACAO")
             CALL log085_transacao("ROLLBACK") #OS596059
          ELSE
             ERROR 'Relacionamento efetuado com sucesso.'
          END IF
       END IF
    END IF
    #---fim----vanderlei OS 402676 #
 END IF
 CLOSE WINDOW w_sup3760g

END FUNCTION

#----------------------------------------------#
 FUNCTION sup3760_verifica_nota_integrada_wms()
#----------------------------------------------#
 DEFINE l_item_wms           SMALLINT,
        l_ind_envio_interf   SMALLINT,
        l_sucesso            SMALLINT

  IF g_ies_wms_instalado = "S" THEN
     LET l_ind_envio_interf = 0
     WHENEVER ERROR CONTINUE
     SELECT COUNT(*)
       INTO l_ind_envio_interf
       FROM wms_e_nf_item a, wms_e_entrada_veic b
      WHERE a.fornecedor         = p_dados_tela.cod_fornecedor
        AND a.num_nota_fiscal    = p_dados_tela.num_nf
        AND a.serie_nota_fiscal  = p_dados_tela.ser_nf
        AND a.subserie_nf        = p_dados_tela.ssr_nf
        AND b.entrada_veiculo    = a.entrada_veiculo
        AND b.cod_empresa        = p_cod_empresa
        AND b.ind_envio_interf   = "S"
     WHENEVER ERROR STOP
     IF l_ind_envio_interf > 0 THEN
        RETURN TRUE
     END IF
 END IF

 RETURN FALSE
END FUNCTION

### OS 358438
#---------------------------------------------#
 FUNCTION sup376_registra_impressao_nfd_tipo_9()
#---------------------------------------------#
 WHENEVER ERROR CONTINUE
 INSERT INTO sup_par_ar VALUES (p_dados_tela.cod_empresa,
                                p_dados_tela.num_aviso_rec,
                                0,
                                "imprime_nfd_tipo9",
                                "S",
                                NULL,
                                NULL,
                                NULL)
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("INCLUSAO","SUP_PAR_AR3")
    LET p_retorno_3760 = TRUE
 END IF

 END FUNCTION

#-----------------------------------#
 FUNCTION sup376_imprime_nfd_tipo_9()
#-----------------------------------#
 DEFINE l_par_ind_esp        LIKE sup_par_ar.par_ind_especial

 IF p_dados_tela.ies_especie_nf = "NFD" AND
    p_nf_sup.ies_nf_aguard_nfe = "9" THEN
 ELSE RETURN FALSE
 END IF

 INITIALIZE l_par_ind_esp TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_ind_especial
   INTO l_par_ind_esp
   FROM sup_par_ar
  WHERE empresa           = p_cod_empresa
    AND aviso_recebto     = p_nf_sup.num_aviso_rec
    AND seq_aviso_recebto = 0
    AND parametro         = "imprime_nfd_tipo9"
 WHENEVER ERROR STOP
 IF l_par_ind_esp = "S" THEN
    RETURN TRUE
 END IF
 RETURN FALSE
 END FUNCTION

#--------------------------------------------#
 FUNCTION sup3760_busca_grupo_X_tipo_despesa()
#--------------------------------------------#

 DEFINE l_gru_ctr_desp_compl  LIKE aviso_rec.gru_ctr_desp_item,
        l_tip_desp_compl_cons LIKE aviso_rec.cod_tip_despesa

  INITIALIZE l_gru_ctr_desp_compl,
             l_tip_desp_compl_cons TO NULL

  WHENEVER ERROR CONTINUE
  SELECT par_val
    INTO l_gru_ctr_desp_compl
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "gru_ctr_desp_compl"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 AND
     l_gru_ctr_desp_compl IS NOT NULL AND
     l_gru_ctr_desp_compl <> " " THEN
     LET p_aviso_rec.gru_ctr_desp_item = l_gru_ctr_desp_compl
  END IF

  WHENEVER ERROR CONTINUE
  SELECT par_val
    INTO l_tip_desp_compl_cons
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa   = p_cod_empresa
     AND par_sup_pad.cod_parametro = "tip_desp_compl_cons"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 AND
     l_tip_desp_compl_cons IS NOT NULL AND
     l_tip_desp_compl_cons <> " " THEN
     LET p_aviso_rec.cod_tip_despesa = l_tip_desp_compl_cons
  END IF

 END FUNCTION

#--------------------------------------------------------------------------------#
 FUNCTION sup3760_verifica_codigo_fiscal_item(l_cod_operacao, l_ies_nf_aguard_nfe)
#--------------------------------------------------------------------------------#

  DEFINE l_cod_fisc          LIKE obf_cfop_cod_fisc.cod_fiscal,
         l_cod_fiscal        CHAR(05),
         l_cod_operacao      CHAR(05),
         l_ies_nf_aguard_nfe LIKE nf_sup.ies_nf_aguard_nfe

  INITIALIZE l_cod_fisc, l_cod_fiscal TO NULL
  WHENEVER ERROR CONTINUE
  SELECT cod_fiscal
    INTO l_cod_fisc
    FROM obf_cfop_cod_fisc
   WHERE obf_cfop_cod_fisc.ind_nf_agda_nfe = l_ies_nf_aguard_nfe
     AND obf_cfop_cod_fisc.cfop            = l_cod_operacao
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 AND
     l_cod_fisc IS NOT NULL AND
     l_cod_fisc <> " " THEN
     IF l_cod_operacao[1] = "5" THEN
        LET l_cod_fiscal  = "1.",l_cod_fisc
     END IF
     IF l_cod_operacao[1] = "6" THEN
        LET l_cod_fiscal  = "2.",l_cod_fisc
     END IF
     IF l_cod_operacao[1] = "7" THEN
        LET l_cod_fiscal  = "3.",l_cod_fisc
     END IF
     LET p_aviso_rec.cod_fiscal_item = l_cod_fiscal
  END IF

 END FUNCTION

#-----------------------------------------------------#
 FUNCTION sup3760_passa_parametro(l_funcao,
                                  l_cod_empresa,
                                  l_num_aviso_rec,
                                  l_cod_operacao,
                                  l_cod_fiscal_compl,
                                  l_dat_emis_nf,
                                  l_dat_entrada_nf,
                                  l_cnd_pgto_nf,
                                  l_cod_mod_embar,
                                  l_ies_nf_aguard_nfe,
                                  l_ies_impostos,
                                  l_cod_emp_benef,
                                  l_cod_operac_estoq,
                                  l_cod_fornecedor,
                                  l_ser_nf,
                                  l_ssr_nf,
                                  l_ies_especie_nf)
#------------------------------------------------------#
  DEFINE l_primeira_vez        SMALLINT,
         l_data_atual          DATE,
         l_hora_atual          DATETIME HOUR TO SECOND,
         l_erro                SMALLINT,
         l_funcao              CHAR(30),
         l_inclusao            SMALLINT,
         l_cod_empresa         LIKE aviso_rec.cod_empresa,
         l_num_aviso_rec       LIKE aviso_rec.num_aviso_rec,
         l_cod_operacao        CHAR(05),
         l_cod_fiscal_compl    INTEGER,
         l_dat_emis_nf         LIKE nf_sup.dat_emis_nf,
         l_dat_entrada_nf      LIKE nf_sup.dat_entrada_nf,
         l_cnd_pgto_nf         LIKE nf_sup.cnd_pgto_nf,
         l_cod_mod_embar       LIKE nf_sup.cod_mod_embar,
         l_ies_nf_aguard_nfe   LIKE nf_sup.ies_nf_aguard_nfe,
         l_ies_impostos        CHAR(01),
         l_cod_emp_benef       LIKE empresa.cod_empresa,
         l_cod_operac_estoq    LIKE estoque_operac.cod_operacao,
         l_cod_fornecedor      LIKE fornecedor.cod_fornecedor,
         l_ser_nf              LIKE nf_sup.ser_nf,
         l_ssr_nf              LIKE nf_sup.ssr_nf,
         l_ies_especie_nf      LIKE nf_sup.ies_especie_nf



  LET l_primeira_vez = TRUE
  LET l_data_atual = TODAY
  LET l_hora_atual = TIME

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                -- Numero do programa
                         p_user,                   -- Nome do login do usuario
                         l_data_atual,             -- Data do processamento
                         l_hora_atual,             -- Hora de processamento
                         1,                        -- Numero do argumento
                         1,                        -- Numero do indice do argumento
                         "",                       -- Argumento de indicador especial
                         l_cod_empresa,            -- Argumento texto
                         "",                       -- Argumento valor
                         "",                       -- Argumento numero
                         "")                       -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  LET l_primeira_vez = FALSE

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                  -- Numero do programa
                         p_user,                     -- Nome do login do usuario
                         l_data_atual,               -- Data do processamento
                         l_hora_atual,               -- Hora de processamento
                         2,                          -- Numero do argumento
                         1,                          -- Numero do indice do argumento
                         "",                         -- Argumento de indicador especial
                         "",                         -- Argumento texto
                         "",                         -- Argumento valor
                         l_num_aviso_rec,             -- Argumento numero
                         "")                         -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                 -- Numero do programa
                         p_user,                    -- Nome do login do usuario
                         l_data_atual,              -- Data do processamento
                         l_hora_atual,              -- Hora de processamento
                         3,                         -- Numero do argumento
                         1,                         -- Numero do indice do argumento
                         "",                        -- Argumento de indicador especial
                         l_cod_operacao,            -- Argumento texto
                         "",                        -- Argumento valor
                         "",                        -- Argumento numero
                         "")                        -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                     -- Numero do programa
                         p_user,                        -- Nome do login do usuario
                         l_data_atual,                  -- Data do processamento
                         l_hora_atual,                  -- Hora de processamento
                         4,                             -- Numero do argumento
                         1,                             -- Numero do indice do argumento
                         "",                            -- Argumento de indicador especial
                         "",                            -- Argumento texto
                         "",                            -- Argumento valor
                         l_cod_fiscal_compl,            -- Argumento numero
                         "")                            -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                 -- Numero do programa
                         p_user,                    -- Nome do login do usuario
                         l_data_atual,              -- Data do processamento
                         l_hora_atual,              -- Hora de processamento
                         5,                         -- Numero do argumento
                         1,                         -- Numero do indice do argumento
                         "",                        -- Argumento de indicador especial
                         "",                        -- Argumento texto
                         "",                        -- Argumento valor
                         "",                        -- Argumento numero
                         l_dat_emis_nf)             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                    -- Numero do programa
                         p_user,                       -- Nome do login do usuario
                         l_data_atual,                 -- Data do processamento
                         l_hora_atual,                 -- Hora de processamento
                         6,                            -- Numero do argumento
                         1,                            -- Numero do indice do argumento
                         "",                           -- Argumento de indicador especial
                         "",                           -- Argumento texto
                         "",                           -- Argumento valor
                         "",                           -- Argumento numero
                         l_dat_entrada_nf)             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                -- Numero do programa
                         p_user,                   -- Nome do login do usuario
                         l_data_atual,             -- Data do processamento
                         l_hora_atual,             -- Hora de processamento
                         7,                        -- Numero do argumento
                         1,                        -- Numero do indice do argumento
                         "",                       -- Argumento de indicador especial
                         "",                       -- Argumento texto
                         "",                       -- Argumento valor
                         l_cnd_pgto_nf,            -- Argumento numero
                         "")                       -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                  -- Numero do programa
                         p_user,                     -- Nome do login do usuario
                         l_data_atual,               -- Data do processamento
                         l_hora_atual,               -- Hora de processamento
                         8,                          -- Numero do argumento
                         1,                          -- Numero do indice do argumento
                         "",                         -- Argumento de indicador especial
                         "",                         -- Argumento texto
                         "",                         -- Argumento valor
                         l_cod_mod_embar,            -- Argumento numero
                         "")                         -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                      -- Numero do programa
                         p_user,                         -- Nome do login do usuario
                         l_data_atual,                   -- Data do processamento
                         l_hora_atual,                   -- Hora de processamento
                         9,                              -- Numero do argumento
                         1,                              -- Numero do indice do argumento
                         "",                             -- Argumento de indicador especial
                         l_ies_nf_aguard_nfe,            -- Argumento texto
                         "",                             -- Argumento valor
                         "",                             -- Argumento numero
                         "")                             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                      -- Numero do programa
                         p_user,                         -- Nome do login do usuario
                         l_data_atual,                   -- Data do processamento
                         l_hora_atual,                   -- Hora de processamento
                         10,                             -- Numero do argumento
                         1,                              -- Numero do indice do argumento
                         l_ies_impostos,                 -- Argumento de indicador especial
                         "",                             -- Argumento texto
                         "",                             -- Argumento valor
                         "",                             -- Argumento numero
                         "")                             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                      -- Numero do programa
                         p_user,                         -- Nome do login do usuario
                         l_data_atual,                   -- Data do processamento
                         l_hora_atual,                   -- Hora de processamento
                         11,                             -- Numero do argumento
                         1,                              -- Numero do indice do argumento
                         "",                             -- Argumento de indicador especial
                         l_cod_emp_benef,                -- Argumento texto
                         "",                             -- Argumento valor
                         "",                             -- Argumento numero
                         "")                             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                      -- Numero do programa
                         p_user,                         -- Nome do login do usuario
                         l_data_atual,                   -- Data do processamento
                         l_hora_atual,                   -- Hora de processamento
                         12,                             -- Numero do argumento
                         1,                              -- Numero do indice do argumento
                         "",                             -- Argumento de indicador especial
                         l_cod_operac_estoq,             -- Argumento texto
                         "",                             -- Argumento valor
                         "",                             -- Argumento numero
                         "")                             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                      -- Numero do programa
                         p_user,                         -- Nome do login do usuario
                         l_data_atual,                   -- Data do processamento
                         l_hora_atual,                   -- Hora de processamento
                         13,                             -- Numero do argumento
                         1,                              -- Numero do indice do argumento
                         "",                             -- Argumento de indicador especial
                         l_cod_fornecedor,               -- Argumento texto
                         "",                             -- Argumento valor
                         "",                             -- Argumento numero
                         "")                             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  #INICIO OS 550500
  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                      -- Numero do programa
                         p_user,                         -- Nome do login do usuario
                         l_data_atual,                   -- Data do processamento
                         l_hora_atual,                   -- Hora de processamento
                         14,                             -- Numero do argumento
                         1,                              -- Numero do indice do argumento
                         "",                             -- Argumento de indicador especial
                         l_ser_nf,                       -- Argumento texto
                         "",                             -- Argumento valor
                         "",                             -- Argumento numero
                         "")                             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                      -- Numero do programa
                         p_user,                         -- Nome do login do usuario
                         l_data_atual,                   -- Data do processamento
                         l_hora_atual,                   -- Hora de processamento
                         15,                             -- Numero do argumento
                         1,                              -- Numero do indice do argumento
                         "",                             -- Argumento de indicador especial
                         "",                             -- Argumento texto
                         "",                             -- Argumento valor
                         l_ssr_nf,                       -- Argumento numero
                         "")                             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                      -- Numero do programa
                         p_user,                         -- Nome do login do usuario
                         l_data_atual,                   -- Data do processamento
                         l_hora_atual,                   -- Hora de processamento
                         16,                             -- Numero do argumento
                         1,                              -- Numero do indice do argumento
                         "",                             -- Argumento de indicador especial
                         l_ies_especie_nf,               -- Argumento texto
                         "",                             -- Argumento valor
                         "",                             -- Argumento numero
                         "")                             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  IF l_funcao = 'INCLUSAO' THEN
     LET l_inclusao = TRUE
  ELSE
     LET l_inclusao = FALSE
  END IF
  CALL sup3760_trans_arg(l_primeira_vez,     ------ Indica a primeira vez
                         "sup3771",                      -- Numero do programa
                         p_user,                         -- Nome do login do usuario
                         l_data_atual,                   -- Data do processamento
                         l_hora_atual,                   -- Hora de processamento
                         17,                             -- Numero do argumento
                         1,                              -- Numero do indice do argumento
                         l_inclusao,                     -- Argumento de indicador especial
                         "",                             -- Argumento texto
                         "",                             -- Argumento valor
                         "",                             -- Argumento numero
                         "")                             -- Argumento data
       RETURNING l_erro

  IF l_erro THEN
     RETURN FALSE
  END IF

  #FIM OS 550500
  RETURN TRUE

 END FUNCTION

#--------------------------------------------------------------------------#
 FUNCTION sup3760_trans_arg(l_primeira_vez,
                            l_num_programa,
                            l_login_usuario,
                            l_data_proc,
                            l_hora_proc,
                            l_num_arg,
                            l_indice_arg,
                            l_arg_ies,
                            l_arg_txt,
                            l_arg_val,
                            l_arg_num,
                            l_arg_data)
#--------------------------------------------------------------------------#
  DEFINE l_num_programa       LIKE tran_arg.num_programa,
         l_login_usuario      LIKE tran_arg.login_usuario,
         l_data_proc          LIKE tran_arg.data_proc,
         l_hora_proc          LIKE tran_arg.hora_proc,
         l_num_arg            LIKE tran_arg.num_arg,
         l_indice_arg         LIKE tran_arg.indice_arg,
         l_arg_ies            LIKE tran_arg.arg_ies,
         l_arg_txt            LIKE tran_arg.arg_txt,
         l_arg_val            LIKE tran_arg.arg_val,
         l_arg_num            LIKE tran_arg.arg_num,
         l_arg_data           LIKE tran_arg.arg_data,
         l_primeira_vez       SMALLINT

  DEFINE l_data               LIKE tran_arg.data_proc,
         l_hora               LIKE tran_arg.hora_proc


  WHENEVER ERROR CONTINUE
  SELECT UNIQUE data_proc, hora_proc
    INTO l_data, l_hora
    FROM tran_arg
   WHERE tran_arg.cod_empresa   = p_cod_empresa
     AND tran_arg.num_programa  = l_num_programa
     AND tran_arg.login_usuario = l_login_usuario
     AND tran_arg.num_arg       = 1
  WHENEVER ERROR STOP

  IF sqlca.sqlcode = 0 THEN
     IF l_primeira_vez THEN
        IF l_data = l_data_proc THEN
           IF (l_hora_proc - l_hora) < INTERVAL(2) MINUTE TO MINUTE THEN
              SLEEP(120)
           END IF
        ELSE
           IF (l_data + 1 UNITS DAY) = l_data_proc THEN
              IF l_hora > "23:57:30" THEN
                 SLEEP(120)
              END IF
           END IF
        END IF
        WHENEVER ERROR CONTINUE
        DELETE FROM tran_arg
         WHERE cod_empresa = p_cod_empresa
           AND num_programa = l_num_programa
           AND login_usuario = l_login_usuario
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 0 THEN
        ELSE
          CALL log003_err_sql("Inclusao", "TRAN_ARG")
          RETURN TRUE
        END  IF
     END IF
  END IF

  WHENEVER ERROR CONTINUE
  SELECT *
    FROM tran_arg
   WHERE tran_arg.cod_empresa   = p_cod_empresa
     AND tran_arg.num_programa  = l_num_programa
     AND tran_arg.login_usuario = l_login_usuario
     AND tran_arg.num_arg       = l_num_arg
     AND tran_arg.indice_arg    = l_indice_arg
  WHENEVER ERROR STOP

  IF sqlca.sqlcode = 0 THEN
     WHENEVER ERROR CONTINUE
     DELETE FROM tran_arg
      WHERE cod_empresa         = p_cod_empresa
        AND num_programa        = l_num_programa
        AND login_usuario       = l_login_usuario
        AND tran_arg.num_arg    = l_num_arg
        AND tran_arg.indice_arg = l_indice_arg
      WHENEVER ERROR STOP

      IF SQLCA.sqlcode <> 0 THEN
         CALL log003_err_sql("EXCLUSAO","TRAN_ARG1")
      END IF
  END IF

  WHENEVER ERROR CONTINUE
  INSERT INTO tran_arg VALUES (p_cod_empresa,
                               l_num_programa,
                               l_login_usuario,
                               l_data_proc,
                               l_hora_proc,
                               l_num_arg,
                               l_indice_arg,
                               l_arg_ies,
                               l_arg_txt,
                               l_arg_val,
                               l_arg_num,
                               l_arg_data )
  WHENEVER ERROR STOP

  IF sqlca.sqlcode = 0 THEN
  ELSE
     CALL log003_err_sql("INCLUSAO", "TRAN_ARG")
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#--------------------------------------------------#
FUNCTION sup3760_verifica_desconto_acrescimo_nf()
#--------------------------------------------------#

  WHENEVER ERROR CONTINUE
  SELECT nf_sup.num_aviso_rec
    FROM nf_sup
   WHERE nf_sup.cod_empresa   = p_cod_empresa
     AND nf_sup.num_aviso_rec = p_dados_tela.num_aviso_rec
     AND ((nf_sup.val_tot_desc  <> 0) OR
          (nf_sup.val_tot_acresc <> 0))
  WHENEVER ERROR STOP

  IF sqlca.sqlcode = 0 THEN RETURN TRUE
  ELSE RETURN FALSE
  END IF

END FUNCTION

#----------------------------------------#
 FUNCTION sup3770_verifica_despesa_itens()
#----------------------------------------#

   DEFINE l_cod_tip_despesa SMALLINT

   WHENEVER ERROR CONTINUE
   DECLARE cq_despesa_item CURSOR FOR
   SELECT cod_tip_despesa
     FROM aviso_rec
    WHERE cod_empresa   = p_cod_empresa
      AND num_aviso_rec = p_nf_sup.num_aviso_rec
   WHENEVER ERROR STOP

   FOREACH cq_despesa_item INTO l_cod_tip_despesa

      WHENEVER ERROR CONTINUE
      SELECT ies_mes_compet
        FROM tipo_despesa
       WHERE cod_empresa     = p_cod_empresa
         AND cod_tip_despesa = l_cod_tip_despesa
         AND ies_mes_compet <> '0'
      WHENEVER ERROR STOP

      IF sqlca.sqlcode = 0 THEN
         RETURN TRUE
      END IF

      WHENEVER ERROR CONTINUE
      SELECT ies_categoria
        FROM tipo_despesa_compl
       WHERE cod_empresa     = p_cod_empresa
         AND cod_tip_despesa = l_cod_tip_despesa
         AND ies_categoria  <> '0'
      WHENEVER ERROR STOP

      IF sqlca.sqlcode = 0 THEN
         RETURN TRUE
      END IF

      WHENEVER ERROR CONTINUE
      SELECT parametro_booleano
        FROM cap_par_tip_desp
       WHERE empresa            = p_cod_empresa
         AND tip_despesa        = l_cod_tip_despesa
         AND parametro_booleano <> '0'
         AND parametro          = 'usa_ctrl_trava_iss'
      WHENEVER ERROR STOP

      IF sqlca.sqlcode = 0 THEN
         RETURN TRUE
      END IF

   END FOREACH

   RETURN FALSE

END FUNCTION

#---------------------------------------------------------#
 FUNCTION sup3760_verifica_cfop_avf_insp_ar(l_cod_operacao)
#---------------------------------------------------------#
 DEFINE l_cod_operacao LIKE cod_fiscal_sup.cod_fiscal,
        l_cfop         LIKE cod_fiscal_sup.cod_fiscal

 DECLARE cq_cfop3 SCROLL CURSOR WITH HOLD FOR
  SELECT par_sup_pad.par_txt
    FROM par_sup_pad
   WHERE par_sup_pad.cod_empresa    = p_cod_empresa
     AND par_sup_pad.cod_parametro  LIKE "cfp_sem_insp_avf_%"

 FOREACH cq_cfop3 INTO l_cfop

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("LEITURA","PAR_SUP_PAD")
       EXIT FOREACH
    END IF

    IF l_cod_operacao[3,5] = l_cfop THEN
       RETURN TRUE
    END IF

 END FOREACH

 RETURN FALSE

END FUNCTION

#--inicio--vanderlei OS 393178 #
#-----------------------------------------------------#
 FUNCTION sup3760_item_bonificado(l_empresa,
                                  l_aviso_recebto,
                                  l_seq_aviso_recebto,
                                  l_parametro)
#-----------------------------------------------------#
 DEFINE l_empresa               LIKE sup_par_ar.empresa,
        l_aviso_recebto         LIKE sup_par_ar.aviso_recebto,
        l_seq_aviso_recebto     LIKE sup_par_ar.seq_aviso_recebto,
        l_parametro             LIKE sup_par_ar.parametro,
        l_par_ind_especial      LIKE sup_par_ar.par_ind_especial

 INITIALIZE l_par_ind_especial TO NULL
 WHENEVER ERROR CONTINUE
 SELECT par_ind_especial
   INTO l_par_ind_especial
   FROM sup_par_ar
  WHERE empresa           = l_empresa
    AND aviso_recebto     = l_aviso_recebto
    AND seq_aviso_recebto = l_seq_aviso_recebto
    AND parametro         = l_parametro
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
    CALL log003_err_sql("LEITURA","SUP_PAR_AR")
 END IF

 RETURN l_par_ind_especial
 END FUNCTION
#---fim----vanderlei OS 393178 #
#--inicio--vanderlei OS 400614 #
#--------------------------------------------------#
 FUNCTION sup3760_ies_item_ctr_estoq(l_cod_empresa,
                                     l_cod_item)
#--------------------------------------------------#
 DEFINE l_cod_empresa                     LIKE aviso_rec.cod_empresa,
        l_cod_item                        LIKE item.cod_item,
        l_ies_ctr_estoque                 LIKE item.ies_ctr_estoque

 INITIALIZE l_ies_ctr_estoque TO NULL
 WHENEVER ERROR CONTINUE
 SELECT ies_ctr_estoque
   INTO l_ies_ctr_estoque
   FROM item
  WHERE cod_empresa = l_cod_empresa
    AND cod_item    = l_cod_item
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("LEITURA","ITEM")
 END IF

 IF l_ies_ctr_estoque = 'S' THEN
    RETURN TRUE
 END IF

 RETURN FALSE
 END FUNCTION
#---fim----vanderlei OS 400614 #

## OS 407766 ##
#-------------------------------------------------------#
 FUNCTION sup3760_determina_indicador_da(l_cod_empresa,
                                         l_num_processo)
#-------------------------------------------------------#
  DEFINE l_cod_empresa     LIKE processo_imp.cod_empresa,
         l_num_processo    LIKE processo_imp.num_processo,
         l_val_desp_icms   LIKE imp_desp_proc_item.val_rateio
         #l_val_desp_icms2  LIKE imp_desp_proc_item.val_rateio

  ##Despesas que fazem parte somente na base de cálculo do ICMS e do PIS/COFINS
  INITIALIZE l_val_desp_icms TO NULL
  WHENEVER ERROR CONTINUE
  SELECT SUM(imp_desp_proc_item.val_rateio_imp)
    INTO l_val_desp_icms
    FROM imp_desp_proc_item, despesa_imp, imp_par_despesa
   WHERE imp_desp_proc_item.empresa          = l_cod_empresa
     AND imp_desp_proc_item.processo         = l_num_processo
     AND imp_desp_proc_item.sequencia_rateio = 0
     AND despesa_imp.cod_despesa             = imp_desp_proc_item.despesa
     AND despesa_imp.ies_base_calc_ii        = "N"
     AND despesa_imp.ies_base_calc_ipi       = "N"
     AND despesa_imp.ies_base_calc_icms      = "S"
     AND imp_par_despesa.despesa_import      = despesa_imp.cod_despesa
     AND imp_par_despesa.parametro           = "calcula_pis_cofins"
     AND imp_par_despesa.parametro_ind       = "S"
  WHENEVER ERROR STOP

  IF l_val_desp_icms IS NULL THEN
     LET l_val_desp_icms = 0
  END IF

  {
  ##Despesas que fazem parte somente na base de cálculo do ICMS
  INITIALIZE l_val_desp_icms2 TO NULL
  WHENEVER ERROR CONTINUE
  SELECT SUM(imp_desp_proc_item.val_rateio_imp)
    INTO l_val_desp_icms2
    FROM imp_desp_proc_item, despesa_imp, imp_par_despesa
   WHERE imp_desp_proc_item.empresa          = l_cod_empresa
     AND imp_desp_proc_item.processo         = l_num_processo
     AND imp_desp_proc_item.sequencia_rateio = 0
     AND despesa_imp.cod_despesa             = imp_desp_proc_item.despesa
     AND despesa_imp.ies_base_calc_ii        = "N"
     AND despesa_imp.ies_base_calc_ipi       = "N"
     AND despesa_imp.ies_base_calc_icms      = "S"
     AND imp_par_despesa.despesa_import      = despesa_imp.cod_despesa
     AND imp_par_despesa.parametro           = "calcula_pis_cofins"
     AND imp_par_despesa.parametro_ind       = "N"
  WHENEVER ERROR STOP

  IF l_val_desp_icms2 IS NULL THEN
     LET l_val_desp_icms2 = 0
  END IF
  }

  IF l_val_desp_icms > 0 THEN
     RETURN "P" ##Indica que a despesa acessória deverá fazer parte da base de cálculo do
                ##PIS/COFINS importação

  ELSE
     ##OS 423011 - Caso não tenha despesa acessória que entre na BC do PIS/COFINS importação,
     ##então deverá colocar o indicador sempre como N, isto porque a legislação
     ##atual (MP 572) fala que as DA´s não devem fazer parte da BC do PIS/COFINS importação.
     #IF l_val_desp_icms2 > 0 THEN
        RETURN "N" ##Indica que a despesa acessória não deverá fazer parte da base de
                   ##cálculo do PIS/COFINS importação
     #ELSE
     #   RETURN "P"
     #END IF
  END IF

 END FUNCTION
##FIM OS 407766 ##

#---------------------------------------------------------------#
 FUNCTION sup3760_busca_dat_ref_cotacao_moeda(l_cod_moeda,
                                              l_cod_fornecedor,
                                              l_dat_ref)
#---------------------------------------------------------------#
 DEFINE l_cod_moeda          LIKE moeda.cod_moeda,
        l_cod_fornecedor     LIKE fornecedor.cod_fornecedor,
        l_qt_dias_retroceder LIKE sup_par_fornecedor.parametro_val,
        l_ies_dia_util_mes   LIKE sup_par_fornecedor.parametro_booleano,
        l_parametro          LIKE sup_par_fornecedor.parametro,
        l_dat_ref            DATE

 LET l_parametro = "busca_dat_cotacao", l_cod_moeda USING "<<<"

 INITIALIZE l_qt_dias_retroceder,
            l_ies_dia_util_mes TO NULL

 WHENEVER ERROR CONTINUE
 SELECT sup_par_fornecedor.parametro_val,
        sup_par_fornecedor.parametro_booleano
   INTO l_qt_dias_retroceder,
        l_ies_dia_util_mes
   FROM sup_par_fornecedor
  WHERE sup_par_fornecedor.empresa    = p_cod_empresa
    AND sup_par_fornecedor.fornecedor = l_cod_fornecedor
    AND sup_par_fornecedor.parametro  = l_parametro
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 100 THEN
    WHENEVER ERROR CONTINUE
    SELECT sup_par_fornecedor.parametro_val,
           sup_par_fornecedor.parametro_booleano
      INTO l_qt_dias_retroceder,
           l_ies_dia_util_mes
      FROM sup_par_fornecedor
     WHERE sup_par_fornecedor.empresa    = p_cod_empresa
       AND sup_par_fornecedor.fornecedor = "0"
       AND sup_par_fornecedor.parametro  = l_parametro
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 AND
       sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("LEITURA","SUP_PAR_FORNECEDOR")
    END IF
 ELSE
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("LEITURA","SUP_PAR_FORNECEDOR")
    END IF
 END IF

 IF l_qt_dias_retroceder IS NOT NULL AND
    l_qt_dias_retroceder > 0 THEN
    LET l_dat_ref = l_dat_ref - l_qt_dias_retroceder UNITS DAY
 ELSE
    IF l_ies_dia_util_mes IS NOT NULL AND
       l_ies_dia_util_mes = 1 THEN # primeiro dia util
       CALL sup2771_busca_primeiro_dia_util_mes(p_cod_empresa,
                                                l_dat_ref) RETURNING l_dat_ref
    ELSE
       IF l_ies_dia_util_mes IS NOT NULL AND
          l_ies_dia_util_mes = 2 THEN # ultimo dia util
          CALL sup2771_busca_ultimo_dia_util_mes_ant(p_cod_empresa,
                                                     l_dat_ref) RETURNING l_dat_ref
       END IF
    END IF
 END IF

 RETURN l_dat_ref

END FUNCTION
#--inicio--vanderlei OS 393937 #
#-------------------------------------------------------#
 FUNCTION sup3760_nf_dev_relac_nf_saida(l_empresa,
                                        l_aviso_recebto,
                                        l_funcao)
#-------------------------------------------------------#
 DEFINE l_empresa                           LIKE sup_nf_devol_cli.empresa,
        l_aviso_recebto                     LIKE sup_nf_devol_cli.aviso_recebto,
        l_existe_relac                      SMALLINT,
        l_permite_mod                       CHAR(01),
        l_funcao                            CHAR(11)

 INITIALIZE l_permite_mod TO NULL
 IF l_funcao = "MODIFICACAO" THEN
    CALL log2250_busca_parametro(l_empresa, "permite_mod_nfd_com_nf_saida")
       RETURNING l_permite_mod, p_status
 END IF

 IF l_permite_mod IS NULL OR l_permite_mod = " " THEN
    LET l_permite_mod = 'N'
 END IF

 LET l_existe_relac = 0

 IF p_dados_tela.ies_especie_nf = 'NFD' OR
    p_ies_tip_entrada = '5'             THEN
    IF l_permite_mod = 'N' THEN
       CALL sup3760_existe_relac_sup_nf_devol_cli(l_empresa,
                                                  l_aviso_recebto)
          RETURNING l_existe_relac

       IF NOT l_existe_relac THEN #alteração alemão
          CALL sup3760_existe_dev_mestre(l_empresa,
                                         l_aviso_recebto)
             RETURNING l_existe_relac
       END IF
    END IF
 END IF

 RETURN l_existe_relac
 END FUNCTION

#---------------------------------------------------------------#
 FUNCTION sup3760_existe_relac_sup_nf_devol_cli(l_empresa,
                                                l_aviso_recebto)
#---------------------------------------------------------------#
 DEFINE l_empresa                           LIKE sup_nf_devol_cli.empresa,
        l_aviso_recebto                     LIKE sup_nf_devol_cli.aviso_recebto

 IF log0150_verifica_se_tabela_existe("sup_nf_devol_cli") THEN
    WHENEVER ERROR CONTINUE
    SELECT aviso_recebto
      FROM sup_nf_devol_cli
     WHERE empresa            = l_empresa
       AND aviso_recebto      = l_aviso_recebto
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> -284 THEN
       IF sqlca.sqlcode <> 100 THEN
          CALL log003_err_sql("LEITURA","SUP_NF_DEVOL_CLI")
       END IF
       RETURN FALSE
    END IF

    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF
 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup3760_existe_dev_mestre(l_cod_empresa,
                                    l_num_nff)
#-------------------------------------------------#
 DEFINE l_cod_empresa               LIKE dev_mestre.cod_empresa,
        l_num_nff                   LIKE dev_mestre.num_nff

 WHENEVER ERROR CONTINUE
 SELECT num_nff
   FROM dev_mestre
  WHERE cod_empresa = l_cod_empresa
    AND num_nff     = l_num_nff
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("LEITURA","DEV_MESTRE")
    END IF
    RETURN FALSE
 END IF

 RETURN TRUE
 END FUNCTION
#---fim----vanderlei OS 393937 #

#---------------------------------------#
 FUNCTION sup3760_permite_alteracao_gao()
#---------------------------------------#

  DEFINE l_count              SMALLINT,
         l_num_conta          LIKE dest_aviso_rec.num_conta_deb_desp,
         l_permite_alt        SMALLINT

  LET l_count = 0
  WHENEVER ERROR CONTINUE
  SELECT COUNT(*)
    INTO l_count
    FROM gao_cad_controle
   WHERE gao_cad_controle.empresa = p_aviso_rec.cod_empresa
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 OR l_count IS NULL THEN
     LET l_count = 0
  END IF

  LET l_permite_alt = TRUE

  #Incluido rotina para que caso controle GAO e tenha registro na tabela gao_conta_contab
  #para a conta relacionada ao item no sup3220 e já tenha sido efetuada contagem/inspeção,
  #somente permita modificar o preço unitário/data entrada caso a inspeção/contagem seja excluida. Após
  #modificação a contagem/inspeção deve ser realizada novamente, porém pelo processo manual.
  #Isto para que seja realiazado o empenho de valores correto no GAO.
  INITIALIZE l_num_conta TO NULL

  WHENEVER ERROR CONTINUE
  DECLARE cq_contas CURSOR FOR
  SELECT dest_aviso_rec.num_conta_deb_desp
    FROM dest_aviso_rec
   WHERE dest_aviso_rec.cod_empresa   = p_aviso_rec.cod_empresa
     AND dest_aviso_rec.num_aviso_rec = p_aviso_rec.num_aviso_rec
     AND dest_aviso_rec.num_seq       = p_aviso_rec.num_seq
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","CQ_CONTAS")
  END IF

  WHENEVER ERROR CONTINUE
  FOREACH cq_contas INTO l_num_conta

     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("FOREACH","CQ_CONTAS")
        EXIT FOREACH
     END IF

     IF l_count > 0 THEN
        WHENEVER ERROR CONTINUE
        SELECT gao_cad_controle.conta_contab
          FROM gao_cad_controle
         WHERE gao_cad_controle.empresa            = p_aviso_rec.cod_empresa
           AND gao_cad_controle.conta_contab       = l_num_conta
           AND gao_cad_controle.controla_orcamento = "S"
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 0 THEN
           IF p_aviso_rec.ies_liberacao_cont = "S" THEN
              LET l_permite_alt = FALSE
           END IF
        END IF
     ELSE
        WHENEVER ERROR CONTINUE
        SELECT gao_conta_contab.*
          FROM gao_conta_contab
         WHERE gao_conta_contab.empresa      = p_aviso_rec.cod_empresa
           AND gao_conta_contab.conta_contab = l_num_conta
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 0 THEN
           IF p_aviso_rec.ies_liberacao_cont = "S" THEN
              LET l_permite_alt = FALSE
           END IF
        END IF
     END IF

     WHENEVER ERROR CONTINUE
     IF NOT l_permite_alt THEN
        EXIT FOREACH
     END IF
  END FOREACH
  WHENEVER ERROR STOP

  RETURN l_permite_alt

 END FUNCTION
#----------------------------------------------------#
 FUNCTION sup3760_verifica_controle_dds_fortaleza()
#----------------------------------------------------#

  DEFINE l_resp        CHAR(01),
         l_resp_modelo CHAR(01),
         l_natureza    CHAR(01),
         l_modelo_dds  CHAR(01),
         l_serie_dds   CHAR(02)

  DEFINE lr_cap_sistema_dds       RECORD LIKE cap_sistema_dds.*

  LET l_resp = 'N'

  WHILE TRUE
     OPEN WINDOW w_dds_fortaleza AT 08,13 WITH 11 ROWS, 42 COLUMNS
          ATTRIBUTE(BORDER, PROMPT LINE LAST, MESSAGE LINE LAST)
           DISPLAY "                   ATENÇÃO                  " AT  1,1
           DISPLAY "                   =======                  " AT  2,1
           DISPLAY "                                            " AT  3,1
           DISPLAY "      O parâmetro de utilização do ISS      " AT  4,1
           DISPLAY "  Eletrônico esta ativo para esta empresa.  " AT  5,1
          DISPLAY "  Deseja incluir esta NF/AD nos documentos  " AT  6,1
           DISPLAY "   para geração do arquivo texto do d.d.s   " AT  7,1
          DISPLAY "              fortaleza? (S/N)              " AT  8,1
           DISPLAY "                                            " AT  9,1
          PROMPT  "Deseja incluir AD/NF na DDS (S/N)?" FOR CHAR l_resp
     CLOSE WINDOW w_dds_fortaleza

     IF UPSHIFT(l_resp) = "S" THEN
        CALL log130_procura_caminho("sup3760h") RETURNING comando3
        OPEN WINDOW w_sup3760h AT 6,10  WITH FORM comando3
        ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST)

        CALL log006_exibe_teclas("01 02 03 07", p_versao)
           CURRENT WINDOW IS w_sup3760h

        LET int_flag = FALSE

        INPUT m_natureza,
              l_serie_dds,
              l_modelo_dds
         FROM natureza,
              serie_dds,
              modelo_dds

           AFTER FIELD natureza
              IF m_natureza NOT MATCHES "[A-I]" THEN
                 CALL log0030_mensagem("Natureza inválida.","info")
                 NEXT FIELD natureza
              END IF

              IF m_natureza IS NULL THEN
                 CALL log0030_mensagem("Natureza não informada.","info")
                 NEXT FIELD natureza
              END IF

           BEFORE FIELD modelo_dds
              IF l_modelo_dds IS NULL THEN
                 IF p_nf_sup.ssr_nf MATCHES "[1-9]" THEN
                    LET l_modelo_dds = p_nf_sup.ssr_nf
                 ELSE
                    LET l_modelo_dds = " "
                 END IF
              END IF

          AFTER FIELD modelo_dds
             IF l_modelo_dds <> " " AND l_modelo_dds <> p_nf_sup.ssr_nf THEN
                PROMPT "Modelo inválido para essa subsérie. Deseja continuar S/N ?" ATTRIBUTE (REVERSE) FOR l_resp_modelo
                IF l_resp_modelo = "N" OR l_resp_modelo = "n" THEN
                   NEXT FIELD modelo_dds
                END IF
             ELSE
                IF l_modelo_dds IS NULL THEN
                   LET l_modelo_dds = " "
                END IF
             END IF

          AFTER FIELD serie_dds
             IF l_serie_dds IS NULL THEN
                CALL log0030_mensagem("Série não informada.","info")
                NEXT FIELD serie_dds
             END IF

       AFTER INPUT
           IF m_natureza IS NULL THEN
              CALL log0030_mensagem("Natureza não informada.","info")
              NEXT FIELD natureza
           END IF

           IF l_serie_dds IS NULL THEN
             CALL log0030_mensagem("Série não informada.","info")
             NEXT FIELD serie_dds
           END IF

           IF l_modelo_dds IS NULL THEN
              LET l_modelo_dds = " "
           END IF

           ON KEY (control-w, f1)
              #lds IF NOT LOG_logix_versao5() THEN
              #lds CONTINUE INPUT
              #lds END IF
              CALL sup376_help()

           ON KEY (control-z, f4)
              CALL sup376_popups("INCLUSAO")

       END INPUT

       IF int_flag = 0 THEN
          LET lr_cap_sistema_dds.empresa            = p_nf_sup.cod_empresa
          LET lr_cap_sistema_dds.ad_nota_fiscal     = p_nf_sup.num_nf
          LET lr_cap_sistema_dds.serie_nota_fiscal  = p_nf_sup.ser_nf
          LET lr_cap_sistema_dds.subserie_nf        = p_nf_sup.ssr_nf
          LET lr_cap_sistema_dds.espc_nota_fiscal   = p_nf_sup.ies_especie_nf
          LET lr_cap_sistema_dds.fornecedor         = p_nf_sup.cod_fornecedor
          LET lr_cap_sistema_dds.natureza_operacao  = m_natureza
          #LET lr_cap_sistema_dds.modelo_dds         = l_modelo_dds
          #LET lr_cap_sistema_dds.serie_dds          = l_serie_dds

           WHENEVER ERROR CONTINUE
            INSERT INTO cap_sistema_dds (empresa,
                                         ad_nota_fiscal,
                                         serie_nota_fiscal,
                                         subserie_nf,
                                         espc_nota_fiscal,
                                         fornecedor,
                                         natureza_operacao,
                                         modelo_dds,
                                         serie_dds)
                                 VALUES (lr_cap_sistema_dds.empresa,
                                         lr_cap_sistema_dds.ad_nota_fiscal,
                                         lr_cap_sistema_dds.serie_nota_fiscal,
                                         lr_cap_sistema_dds.subserie_nf,
                                         lr_cap_sistema_dds.espc_nota_fiscal,
                                         lr_cap_sistema_dds.fornecedor,
                                         lr_cap_sistema_dds.natureza_operacao,
                                         l_modelo_dds,
                                         l_serie_dds)
           WHENEVER ERROR STOP
           IF SQLCA.SQLCODE <> 0 AND NOT log0030_err_sql_registro_duplicado() THEN
              CALL log003_err_sql("INSERT", "cap_sistema_dds")
              CALL log0030_mensagem("Inclusão cancelada.","info")
              CLOSE WINDOW w_sup3760h
              EXIT WHILE
           END IF
           CALL log0030_mensagem("Inclusão efetuada com sucesso.","info")
        ELSE
           CALL log0030_mensagem("Inclusão cancelada.","info")
           CLOSE WINDOW w_sup3760h
           EXIT WHILE
        END IF
        CLOSE WINDOW w_sup3760h
        EXIT WHILE
     ELSE
        IF UPSHIFT(l_resp) = "N"   THEN
           EXIT WHILE
        END IF
     END IF
  END WHILE

END FUNCTION

#----------------------------------------------------------#
 FUNCTION sup3760_transf_saida_somente_lote(lr_item_ctr_grade)
#----------------------------------------------------------#
 DEFINE lr_item_ctr_grade RECORD LIKE item_ctr_grade.*,
        l_ies_controles   SMALLINT

 LET l_ies_controles = FALSE

 ## Situação específica do cliente RICLAN (O.S.420516)
 ## Caso parâmetro 'Verifica transf nat saída (2,3,4)' do sup6600 estiver ativo
 ## e Tipo da Nota for 'T' , e item tiver controle somente de lote,
 ## não necessita item_ctr_grade na empresa destino.

 IF p_dados_tela.ies_nf_aguard_nfe <> 'T' THEN
    RETURN FALSE
 END IF

 IF m_transf_saida <> "S" THEN
    RETURN FALSE
 END IF

 IF (lr_item_ctr_grade.num_grade_1 IS NOT NULL AND
     lr_item_ctr_grade.num_grade_1 <> 0)
 OR (lr_item_ctr_grade.num_grade_2 IS NOT NULL AND
     lr_item_ctr_grade.num_grade_2 <> 0)
 OR (lr_item_ctr_grade.num_grade_3 IS NOT NULL AND
     lr_item_ctr_grade.num_grade_3 <> 0)
 OR (lr_item_ctr_grade.num_grade_4 IS NOT NULL AND
     lr_item_ctr_grade.num_grade_4 <> 0)
 OR (lr_item_ctr_grade.num_grade_5 IS NOT NULL AND
     lr_item_ctr_grade.num_grade_5 <> 0) THEN
    LET l_ies_controles = TRUE
 END IF

 IF lr_item_ctr_grade.ies_endereco = "S" THEN
    LET l_ies_controles = TRUE
 END IF

 IF lr_item_ctr_grade.ies_volume = "S" THEN
    LET l_ies_controles = TRUE
 END IF

 IF lr_item_ctr_grade.ies_dat_producao = "S" THEN
    LET l_ies_controles = TRUE
 END IF

 IF lr_item_ctr_grade.ies_dat_validade = "S" THEN
    LET l_ies_controles = TRUE
 END IF

 IF lr_item_ctr_grade.ies_comprimento = "S" THEN
    LET l_ies_controles = TRUE
 END IF

 IF lr_item_ctr_grade.ies_largura = "S" THEN
    LET l_ies_controles = TRUE
 END IF

 IF lr_item_ctr_grade.ies_altura = "S" THEN
    LET l_ies_controles = TRUE
 END IF

 IF lr_item_ctr_grade.ies_diametro = "S" THEN
    LET l_ies_controles = TRUE
 END IF

 IF l_ies_controles THEN
    RETURN FALSE
 ELSE
    RETURN TRUE
 END IF

 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup360_busca_data_emissao_pedido_compra()
#-------------------------------------------------#

  DEFINE l_data      LIKE pedido_sup.dat_emis

  IF m_cons_dat_emis_ped = "S"          AND
     p_aviso_rec.num_pedido IS NOT NULL AND
     p_aviso_rec.num_pedido > 0         THEN
     WHENEVER ERROR CONTINUE
     SELECT pedido_sup.dat_emis
       INTO l_data
       FROM pedido_sup
      WHERE pedido_sup.cod_empresa      = p_aviso_rec.cod_empresa
        AND pedido_sup.num_pedido       = p_aviso_rec.num_pedido
        AND pedido_sup.ies_versao_atual = "S"
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 OR l_data IS NULL THEN
        LET l_data = p_dados_tela.dat_entrada_nf  #789788  - Espindola
     END IF
  ELSE
     LET l_data = p_dados_tela.dat_entrada_nf #789788  - Espindola
  END IF

  RETURN l_data

 END FUNCTION
#--inicio--vanderlei OS 402676 #
#----------------------------------------------------------------------#
 FUNCTION sup3760_fornec_triang_cadastrado_sup0220(l_empresa,
                                                   l_fornecedor,
                                                   l_fornecedor_triang)
#----------------------------------------------------------------------#
 DEFINE l_empresa                            LIKE sup_par_fornecedor.empresa,
        l_fornecedor                         LIKE fornecedor.cod_fornecedor,
        l_fornecedor_triang                  LIKE sup_par_fornecedor.fornecedor,
        l_parametro                          LIKE sup_par_fornecedor.parametro

 LET l_parametro[ 1,15] = l_fornecedor_triang
 LET l_parametro[16,17] = 'FT'

 WHENEVER ERROR CONTINUE
 SELECT sup_par_fornecedor.parametro
   FROM sup_par_fornecedor
  WHERE sup_par_fornecedor.empresa         = l_empresa
    AND sup_par_fornecedor.fornecedor      = l_fornecedor
    AND sup_par_fornecedor.parametro[1,17] = l_parametro
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("LEITURA","SUP_PAR_FORNECEDOR")
    END IF
    RETURN FALSE
 END IF

 RETURN TRUE
 END FUNCTION

#-------------------------------------------------------------#
 FUNCTION sup3760_fornecedor_relac_triangulacao(l_cod_empresa,
                                                l_num_aviso_rec,
                                                l_gru_ctr_desp_item)
#---------------------------------------------------------------#
 DEFINE l_cod_empresa                  LIKE aviso_rec.cod_empresa,
        l_num_aviso_rec                LIKE aviso_rec.num_aviso_rec,
        l_gru_ctr_desp_item            LIKE aviso_rec.gru_ctr_desp_item,
        l_relac_terceirizacao          LIKE obf_par_grp_desp.parametro_ind,
        l_item_triang                  SMALLINT,
        l_triang_em_terc               SMALLINT

 INITIALIZE l_relac_terceirizacao TO NULL
 LET l_item_triang = 0

 IF l_gru_ctr_desp_item = ' ' OR l_gru_ctr_desp_item IS NULL THEN
    WHENEVER ERROR CONTINUE
    DECLARE cq_fornec_triang CURSOR FOR
    SELECT gru_ctr_desp_item
      FROM aviso_rec
     WHERE cod_empresa   = l_cod_empresa
       AND num_aviso_rec = l_num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("DECLARE","CQ_FORNEC_TRIANG")
       RETURN FALSE
    END IF


    WHENEVER ERROR CONTINUE
    FOREACH cq_fornec_triang INTO l_gru_ctr_desp_item

       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("FOREACH","CQ_FORNEC_TRIANG")
          EXIT FOREACH
       END IF

       LET l_triang_em_terc = 0

       WHENEVER ERROR CONTINUE
       SELECT parametro_ind
         INTO l_relac_terceirizacao
         FROM obf_par_grp_desp
        WHERE empresa         = l_cod_empresa
          AND grp_ctr_despesa = l_gru_ctr_desp_item
          AND unid_federal    = " "    #a U.F será sempre em branco para este parametro neste caso
          AND parametro       = "relac_terceirizacao"
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 THEN
          #-- "T" - Fornecedor triangulação(Itens de terceiros)  "R" - Fornecedor triangulação(Itens em terceiros) --#
          IF l_relac_terceirizacao = "T" OR l_relac_terceirizacao = "R" THEN
             LET l_item_triang = 1

             IF l_relac_terceirizacao = "R" THEN
                LET l_triang_em_terc = 1
             END IF
          END IF
       END IF

       WHENEVER ERROR CONTINUE
    END FOREACH
    WHENEVER ERROR STOP

    WHENEVER ERROR CONTINUE
    FREE cq_fornec_triang
    WHENEVER ERROR STOP
 ELSE
    LET l_triang_em_terc = 0

    WHENEVER ERROR CONTINUE
    SELECT parametro_ind
      INTO l_relac_terceirizacao
      FROM obf_par_grp_desp
     WHERE empresa         = l_cod_empresa
       AND grp_ctr_despesa = l_gru_ctr_desp_item
       AND unid_federal    = " "    #a U.F será sempre em branco para este parametro neste caso
       AND parametro       = "relac_terceirizacao"
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       #-- "T" - Fornecedor triangulação(Itens de terceiros)  "R" - Fornecedor triangulação(Itens em terceiros) --#
       IF l_relac_terceirizacao = "T" OR l_relac_terceirizacao = "R" THEN
          LET l_item_triang = 1

          IF l_relac_terceirizacao = "R" THEN
             LET l_triang_em_terc = 1
          END IF
       END IF
    END IF
 END IF

 RETURN l_item_triang, l_triang_em_terc

 END FUNCTION

#---------------------------------------------------------------------#
 FUNCTION sup3760_relac_fornec_triang_cadastr_sup0220(l_cod_empresa,
                                                      l_num_aviso_rec,
                                                      l_fornecedor)
#---------------------------------------------------------------------#
 DEFINE l_cod_empresa                  LIKE aviso_rec.cod_empresa,
        l_num_aviso_rec                LIKE aviso_rec.num_aviso_rec,
        l_fornecedor                   LIKE fornecedor.cod_fornecedor,
        l_raz_social                   LIKE fornecedor.raz_social,
        l_fornecedor_triang            LIKE sup_par_fornecedor.fornecedor,
        l_parametro                    LIKE sup_par_ar.parametro,
        l_item_triang                  SMALLINT,
        l_triang_em_terc               SMALLINT,
        l_ind                          SMALLINT,
        l_sem_erro                     SMALLINT,
        l_caminho                      CHAR(150),
        la_fornec_triang               ARRAY[10] OF RECORD
                                                       cod_fornecedor  LIKE fornecedor.cod_fornecedor,
                                                       raz_social      LIKE fornecedor.raz_social
                                                    END RECORD

 LET l_sem_erro = 1

 CALL sup3760_fornecedor_relac_triangulacao(l_cod_empresa, l_num_aviso_rec, ' ')
    RETURNING l_item_triang, l_triang_em_terc

 IF l_triang_em_terc THEN
    WHENEVER ERROR CONTINUE
    DECLARE cq_lista_fornec_triang CURSOR WITH HOLD FOR
     SELECT parametro
       FROM sup_par_fornecedor
      WHERE empresa         = l_cod_empresa
        AND fornecedor      = l_fornecedor
        AND parametro[16,17] = 'FT'
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("LEITURA","SUP_PAR_FORNECEDOR")
       RETURN FALSE
    END IF

    LET l_ind = 1
    WHENEVER ERROR CONTINUE
    FOREACH cq_lista_fornec_triang INTO l_parametro
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql('FOREACH','CQ_LISTA_FORNEC_TRIANG')
          RETURN FALSE
       END IF

       LET la_fornec_triang[l_ind].cod_fornecedor = l_parametro[1,15]
       LET la_fornec_triang[l_ind].raz_social     = sup3760_raz_social_fornecedor(la_fornec_triang[l_ind].cod_fornecedor)

       LET l_ind = l_ind + 1
    END FOREACH
    FREE cq_lista_fornec_triang
    WHENEVER ERROR STOP

    ## Corrigido na O.S.426421, estava subtraindo 1 de 1 quando não
    ## entrava no cursor cq_lista_fornec_triang gerando l_ind = 0
    ## e programa estava abortando no
    ## LET l_fornecedor_triang = la_fornec_triang[l_ind].cod_fornecedor
    ## pois não existe posição de cursor = 0
    IF l_ind > 1 THEN
       LET l_ind = l_ind - 1
    END IF

    LET int_flag = 0
    IF l_ind > 1 THEN
       CALL log006_exibe_teclas("01 02",p_versao)
       CALL log130_procura_caminho("sup02202" ) RETURNING l_caminho
       OPEN WINDOW w_sup0220 AT 4,5 WITH FORM l_caminho
          ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, FORM LINE 1)

          LET l_raz_social = sup3760_raz_social_fornecedor(l_fornecedor)
          DISPLAY l_cod_empresa TO cod_empresa
          DISPLAY l_fornecedor  TO cod_fornec_principal
          DISPLAY l_raz_social  TO raz_social_principal

          CALL SET_COUNT(l_ind)
          DISPLAY ARRAY la_fornec_triang TO sr_fornec_triang.*
          LET l_ind = ARR_CURR()

       CLOSE WINDOW w_sup0220
    END IF

    IF NOT int_flag THEN
       LET l_fornecedor_triang = la_fornec_triang[l_ind].cod_fornecedor

       CALL sup3760_atualiza_sup_par_ar(l_cod_empresa,l_num_aviso_rec,0,"fornec_triangulacao",'', l_fornecedor_triang,'','')
          RETURNING l_sem_erro
    END IF
 END IF

 RETURN l_sem_erro
 END FUNCTION

#---------------------------------------------------------#
 FUNCTION sup3760_atualiza_sup_par_ar(l_empresa,
                                      l_aviso_recebto,
                                      l_seq_aviso_recebto,
                                      l_parametro,
                                      l_par_ind_especial,
                                      l_parametro_texto,
                                      l_parametro_val,
                                      l_parametro_dat)
#---------------------------------------------------------#
 DEFINE l_empresa                      LIKE sup_par_ar.empresa,
        l_aviso_recebto                LIKE sup_par_ar.aviso_recebto,
        l_seq_aviso_recebto            LIKE sup_par_ar.seq_aviso_recebto,
        l_parametro                    LIKE sup_par_ar.parametro,
        l_par_ind_especial             LIKE sup_par_ar.par_ind_especial,
        l_parametro_texto              LIKE sup_par_ar.parametro_texto,
        l_parametro_val                LIKE sup_par_ar.parametro_val,
        l_parametro_dat                LIKE sup_par_ar.parametro_dat

 WHENEVER ERROR CONTINUE
 DELETE FROM sup_par_ar
  WHERE empresa           = l_empresa
    AND aviso_recebto     = l_aviso_recebto
    AND seq_aviso_recebto = l_seq_aviso_recebto
    AND parametro         = l_parametro
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("EXCLUSÃO","SUP_PAR_AR")
    RETURN FALSE
 END IF

 WHENEVER ERROR CONTINUE
 INSERT INTO sup_par_ar
  (empresa,
   aviso_recebto,
   seq_aviso_recebto,
   parametro,
   par_ind_especial,
   parametro_texto,
   parametro_val,
   parametro_dat)
 VALUES
  (l_empresa,
   l_aviso_recebto,
   l_seq_aviso_recebto,
   l_parametro,
   l_par_ind_especial,
   l_parametro_texto,
   l_parametro_val,
   l_parametro_dat)
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("INCLUSÃO","SUP_PAR_AR")
    RETURN FALSE
 END IF

 RETURN TRUE
 END FUNCTION

#--------------------------------------------------------#
 FUNCTION sup3760_raz_social_fornecedor(l_cod_fornecedor)
#--------------------------------------------------------#
 DEFINE l_cod_fornecedor        LIKE fornecedor.cod_fornecedor,
        l_raz_social            LIKE fornecedor.raz_social

 INITIALIZE l_raz_social TO NULL
 WHENEVER ERROR CONTINUE
   SELECT raz_social
     INTO l_raz_social
     FROM fornecedor
    WHERE cod_fornecedor = l_cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("LEITURA","FORNECEDOR")
    END IF
 END IF

 RETURN l_raz_social

 END FUNCTION
#----fim---vanderlei OS 402676 #

#--inicio--vanderlei OS 402649 #
#------------------------------------------------------------------------#
 FUNCTION sup3760_solicita_confirm_recal_imposto_declar(l_cod_empresa,
                                                        l_ies_especie_nf,
                                                        l_num_aviso_rec)
#------------------------------------------------------------------------#
 DEFINE l_cod_empresa                     LIKE empresa.cod_empresa,
        l_ies_solic_recal_imposto         CHAR(01),
        l_ies_especie_nf                  LIKE nf_sup.ies_especie_nf,
        l_num_aviso_rec                   LIKE aviso_rec.num_aviso_rec

 IF l_ies_especie_nf = 'NFC' AND sup3760_soma_valor_unit_item(l_cod_empresa, l_num_aviso_rec) THEN
    INITIALIZE l_ies_solic_recal_imposto TO NULL
    CALL log2250_busca_parametro(l_cod_empresa, "mensagem_recalcula_imposto_nfc")
       RETURNING l_ies_solic_recal_imposto, p_status

    IF l_ies_solic_recal_imposto IS NULL OR l_ies_solic_recal_imposto = " " THEN
       LET l_ies_solic_recal_imposto = "S"
    END IF

    IF l_ies_solic_recal_imposto <> "S" THEN
       RETURN FALSE
    END IF
 END IF

 IF sup3760_nota_integrada_gecex(l_cod_empresa, l_num_aviso_rec) THEN   #OS. 419996 - KORDSA
    RETURN FALSE
 END IF

 RETURN TRUE
 END FUNCTION

#------------------------------------------------------#
 FUNCTION sup3760_soma_valor_unit_item(l_cod_empresa,
                                       l_num_aviso_rec)
#------------------------------------------------------#
 DEFINE l_cod_empresa                     LIKE empresa.cod_empresa,
        l_num_aviso_rec                   LIKE aviso_rec.num_aviso_rec,
        l_val_liquido_item                LIKE aviso_rec.val_liquido_item

 WHENEVER ERROR CONTINUE
 SELECT SUM(aviso_rec.val_liquido_item)
   INTO l_val_liquido_item
   FROM aviso_rec
  WHERE aviso_rec.cod_empresa   = l_cod_empresa
    AND aviso_rec.num_aviso_rec = l_num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("LEITURA","AVISO_REC")
 END IF

 IF l_val_liquido_item = 0 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF
 END FUNCTION
#----fim---vanderlei OS 402649 #

#--------------------------------------------------------------#
 FUNCTION sup3760_exclusao_inclusao_item_compex(l_cod_empresa,
                                                l_num_aviso_rec)
#--------------------------------------------------------------#

  DEFINE l_cod_empresa   LIKE aviso_rec.cod_empresa,
         l_num_aviso_rec LIKE aviso_rec.num_aviso_rec,
         l_num_seq       LIKE aviso_rec.num_seq,
         l_cod_item      LIKE item.cod_item

  #Apenas para função incl.itens, pois na exclui itens já efetua exclusão da sup_par_ar.
  CALL sup3760_exclui_sup_par_ar_compex(l_cod_empresa, l_num_aviso_rec)

  WHENEVER ERROR CONTINUE
  DECLARE cq_compex CURSOR FOR
  SELECT aviso_rec.cod_empresa,
         aviso_rec.num_aviso_rec,
         aviso_rec.num_seq,
         aviso_rec.cod_item
    FROM aviso_rec
   WHERE aviso_rec.cod_empresa   = l_cod_empresa
     AND aviso_rec.num_aviso_rec = l_num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE","AVISO_REC")
  END IF

  WHENEVER ERROR CONTINUE
  FOREACH cq_compex INTO l_cod_empresa, l_num_aviso_rec,
                         l_num_seq, l_cod_item

     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("FOREACH","AVISO_REC")
     END IF

     CALL sup3760_verifica_regime_compex(l_cod_empresa, l_num_aviso_rec,
                                         l_num_seq, l_cod_item)

     WHENEVER ERROR CONTINUE
  END FOREACH
  WHENEVER ERROR STOP

  WHENEVER ERROR CONTINUE
  FREE cq_compex
  WHENEVER ERROR STOP

 END FUNCTION

#------------------------------------------------------------------------#
 FUNCTION sup3760_exclui_sup_par_ar_compex(l_cod_empresa, l_num_aviso_rec)
#------------------------------------------------------------------------#

  DEFINE l_cod_empresa   LIKE aviso_rec.cod_empresa,
         l_num_aviso_rec LIKE aviso_rec.num_aviso_rec

  WHENEVER ERROR CONTINUE
  DELETE FROM sup_par_ar
   WHERE sup_par_ar.empresa         = l_cod_empresa
     AND sup_par_ar.aviso_recebto   = l_num_aviso_rec
     AND sup_par_ar.parametro[1,14] = 'regime_compex_'
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DELETE","SUP_PAR_AR")
  END IF

 END FUNCTION

#----------------------------------------------------------------------#
 FUNCTION sup3760_verifica_regime_compex(l_cod_empresa, l_num_aviso_rec,
                                         l_num_seq, l_cod_item)
#----------------------------------------------------------------------#

  DEFINE l_ies_obj_entrada LIKE grupo_ctr_desp.ies_obj_entrada,
         l_cod_empresa     LIKE aviso_rec.cod_empresa,
         l_num_aviso_rec   LIKE aviso_rec.num_aviso_rec,
         l_num_seq         LIKE aviso_rec.num_seq,
         l_cod_item        LIKE aviso_rec.cod_item,
         l_parametro_val   LIKE sup_par_ar.parametro_val

  WHENEVER ERROR CONTINUE
  SELECT a.ies_obj_entrada
    INTO l_ies_obj_entrada
    FROM grupo_ctr_desp a, item_sup b
   WHERE a.cod_empresa  = l_cod_empresa
     AND a.gru_ctr_desp = b.gru_ctr_desp
     AND b.cod_empresa  = l_cod_empresa
     AND b.cod_item     = l_cod_item
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("SELECT","GRUPO_CTR_DESP")
  END IF

  IF l_ies_obj_entrada = "1" THEN
     LET l_parametro_val = 1
     IF m_confirm_compex_mp = "S" THEN
        IF NOT m_solicitou_mp THEN
           LET m_solicitou_mp = TRUE
           LET m_confirmou_mp = log0040_confirm(12,15,"Nota fiscal possui informação regime COMPEX para matéria prima?")
        END IF

        IF NOT m_confirmou_mp THEN
           LET l_parametro_val = 2
        END IF
     END IF

     CALL sup3760_inclui_sup_par_ar_compex("regime_compex_mp", l_cod_empresa,
                                           l_num_aviso_rec, l_num_seq, l_parametro_val)
  END IF

  IF l_ies_obj_entrada = "6" THEN
     LET l_parametro_val = 1
     IF m_confirm_compex_ciap = "S" THEN
        IF NOT m_solicitou_ciap THEN
           LET m_solicitou_ciap = TRUE
           LET m_confirmou_ciap = log0040_confirm(12,15,"Nota fiscal possui informação regime COMPEX para ativo imobilizado(CIAP)?")
        END IF

        IF NOT m_confirmou_ciap THEN
           LET l_parametro_val = 2
        END IF
     END IF

     CALL sup3760_inclui_sup_par_ar_compex("regime_compex_ciap", l_cod_empresa,
                                           l_num_aviso_rec, l_num_seq, l_parametro_val)
  END IF

 END FUNCTION

#--------------------------------------------------------------------#
 FUNCTION sup3760_inclui_sup_par_ar_compex(l_parametro, l_cod_empresa,
                                           l_num_aviso_rec, l_num_seq,
                                           l_parametro_val)
#--------------------------------------------------------------------#

  DEFINE l_parametro     LIKE sup_par_ar.parametro,
         l_cod_empresa   LIKE aviso_rec.cod_empresa,
         l_num_aviso_rec LIKE aviso_rec.num_aviso_rec,
         l_parametro_val LIKE sup_par_ar.parametro_val,
         l_num_seq       LIKE aviso_rec.num_seq

  WHENEVER ERROR CONTINUE
  SELECT sup_par_ar.empresa
    FROM sup_par_ar
   WHERE sup_par_ar.empresa           = l_cod_empresa
     AND sup_par_ar.aviso_recebto     = l_num_aviso_rec
     AND sup_par_ar.seq_aviso_recebto = l_num_seq
     AND sup_par_ar.parametro         = l_parametro
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     WHENEVER ERROR CONTINUE
     INSERT INTO sup_par_ar VALUES(l_cod_empresa,
                                   l_num_aviso_rec,
                                   l_num_seq,
                                   l_parametro,
                                   "N",NULL,
                                   l_parametro_val,TODAY)
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("INSERT","SUP_PAR_AR")
     END IF
  ELSE
     WHENEVER ERROR CONTINUE
     UPDATE sup_par_ar
        SET sup_par_ar.par_ind_especial = "N",
            sup_par_ar.parametro_val    = l_parametro_val
      WHERE sup_par_ar.empresa           = l_cod_empresa
        AND sup_par_ar.aviso_recebto     = l_num_aviso_rec
        AND sup_par_ar.seq_aviso_recebto = l_num_seq
        AND sup_par_ar.parametro         = l_parametro
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("UPDATE","SUP_PAR_AR")
     END IF
  END IF

 END FUNCTION

#-----------------------------------------------------------------#
 FUNCTION sup3760_verifica_fornec_incl_regime_compex(l_cod_empresa,
                                                     l_dat_emis_nf,
                                                     l_fornecedor)
#-----------------------------------------------------------------#

  DEFINE l_cod_empresa     LIKE sup_par_fornecedor.empresa,
         l_dat_emis_nf     LIKE nf_sup.dat_entrada_nf,
         l_fornecedor      LIKE nf_sup.cod_fornecedor,
         l_parametro_texto LIKE sup_par_fornecedor.parametro_texto,
         l_dat_ini_mp      LIKE nf_sup.dat_entrada_nf,
         l_dat_fim_mp      LIKE nf_sup.dat_entrada_nf,
         l_dat_ini_ciap    LIKE nf_sup.dat_entrada_nf,
         l_dat_fim_ciap    LIKE nf_sup.dat_entrada_nf

  INITIALIZE l_parametro_texto TO NULL

  WHENEVER ERROR CONTINUE
  SELECT sup_par_fornecedor.parametro_texto
    INTO l_parametro_texto
    FROM sup_par_fornecedor
   WHERE sup_par_fornecedor.empresa    = l_cod_empresa
     AND sup_par_fornecedor.fornecedor = l_fornecedor
     AND sup_par_fornecedor.parametro  = "regime_espec_compex"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     RETURN FALSE
  END IF

  LET l_dat_ini_mp   = l_parametro_texto[1,10]
  LET l_dat_fim_mp   = l_parametro_texto[12,21]
  LET l_dat_ini_ciap = l_parametro_texto[23,32]
  LET l_dat_fim_ciap = l_parametro_texto[34,43]

  IF ((l_dat_ini_mp <= l_dat_emis_nf     AND
       l_dat_fim_mp >= l_dat_emis_nf)    OR
      (l_dat_ini_ciap <= l_dat_emis_nf   AND
       l_dat_fim_ciap >= l_dat_emis_nf)) THEN
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#--inicio--vanderlei OS 409196 #
#------------------------------------------#
 FUNCTION sup3760_consiste_ser_nf(l_ser_nf)
#------------------------------------------#
 DEFINE l_ser_nf            LIKE nf_sup.ser_nf

 IF p_dados_tela.ies_especie_nf = "CON" THEN
    IF sup3760_valida_ser_nf(l_ser_nf, 'FRETE') THEN
       RETURN TRUE
    END IF

    IF l_ser_nf MATCHES "[BCU]" OR l_ser_nf = "BU" OR l_ser_nf = "CU" OR l_ser_nf = " " THEN
       RETURN TRUE
    END IF

 ELSE
    IF sup3760_valida_ser_nf(l_ser_nf, 'NOTAF') THEN
       RETURN TRUE
    END IF

    IF l_ser_nf MATCHES "[1-9B-DU]" OR l_ser_nf = "BU" OR l_ser_nf = "CU" OR l_ser_nf = "DU" OR l_ser_nf = " " THEN
       RETURN TRUE
    END IF

 END IF

 RETURN FALSE

 END FUNCTION

#------------------------------------------------#
 FUNCTION sup3760_valida_ser_nf(l_ser_nf, l_tipo)
#------------------------------------------------#
 DEFINE l_ser_nf            LIKE nf_sup.ser_nf,
        l_tipo              CHAR(05),
        l_tipo_ser          CHAR(01),
        l_ser_nf_s_num      LIKE nf_sup.ser_nf

 # ch 731810
 IF sup3760_ies_utiliza_nfe(p_dados_tela.cod_fornecedor) = "S" THEN
   CALL log0800_filter_number(l_ser_nf) RETURNING l_ser_nf_s_num

   IF l_ser_nf <> l_ser_nf_s_num AND
      l_ser_nf_s_num IS NOT NULL AND
      l_ser_nf_s_num <> " " THEN
      RETURN FALSE
    END IF

   RETURN TRUE
 END IF

 # -- l_tipo[1,1] - Está variável pode assumir o valor "NOTAF" tipo "N", ou "FRETE" tipo "F" -- #
 LET l_tipo_ser = l_tipo[1,1]

 WHENEVER ERROR CONTINUE
 SELECT cod_parametro
   FROM par_sup_pad
  WHERE cod_empresa   = p_cod_empresa
    AND cod_parametro LIKE 'serie_excecao%'
    AND par_txt       = l_ser_nf
    AND par_ies       IN('A', l_tipo_ser)
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql("LEITURA","PAR_SUP_PAD")
    END IF
    RETURN FALSE
 END IF

 RETURN TRUE
 END FUNCTION
#---fim----vanderlei OS 409196 #

#--------------------------------------------#
 FUNCTION sup3760_busca_cond_pgto_sem_pgto()
#--------------------------------------------#
  ##OS 437323
  IF m_cnd_pgto_sem_intr_cap IS NOT NULL AND
     m_cnd_pgto_sem_intr_cap <> " " THEN
     LET p_dados_tela.cnd_pgto_nf = m_cnd_pgto_sem_intr_cap
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#-------------------------------------------------------------------------#
 FUNCTION sup3760_atualiza_item_de_terc(l_val_remessa, l_cod_cla_fisc,
                                        l_den_item, l_cod_unid_med,
                                        l_dat_emis_nf, l_dat_entrada_nf,
                                        l_num_nf, l_ser_nf, l_ssr_nf,
                                        l_cod_fornecedor, l_ies_especie_nf,
                                        l_num_sequencia, l_ind)
#-------------------------------------------------------------------------#

  DEFINE l_ind                 SMALLINT,
         l_num_nf              LIKE item_de_terc.num_nf,
         l_ser_nf              LIKE item_de_terc.ser_nf,
         l_ssr_nf              LIKE item_de_terc.ssr_nf,
         l_den_item            LIKE item_de_terc.den_item,
         l_sql_stmt            CHAR(5000),
         l_dat_emis_nf         LIKE item_de_terc.dat_emis_nf,
         l_val_remessa         LIKE item_de_terc.val_remessa,
         l_cod_cla_fisc        LIKE item_de_terc.cod_cla_fisc,
         l_cod_unid_med        LIKE item_de_terc.cod_unid_med,
         l_num_sequencia       LIKE item_de_terc.num_sequencia,
         l_dat_entrada_nf      LIKE item_de_terc.dat_entrada_nf,
         l_cod_fornecedor      LIKE item_de_terc.cod_fornecedor,
         l_ies_especie_nf      LIKE item_de_terc.ies_especie_nf,
         l_val_remessa_char    CHAR(30)

  LET l_val_remessa_char = l_val_remessa     USING '--------------&.&&'

  WHENEVER ERROR CONTINUE
  SELECT item_de_terc.num_nf
    FROM item_de_terc
   WHERE item_de_terc.cod_empresa    = p_cod_empresa
     AND item_de_terc.num_nf         = l_num_nf
     AND item_de_terc.ser_nf         = l_ser_nf
     AND item_de_terc.ssr_nf         = l_ssr_nf
     AND item_de_terc.cod_fornecedor = l_cod_fornecedor
     AND item_de_terc.ies_especie_nf = l_ies_especie_nf
     AND item_de_terc.num_sequencia  = l_num_sequencia
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     LET l_sql_stmt = " UPDATE item_de_terc "

     IF l_ind = 1 THEN
        LET l_sql_stmt = l_sql_stmt CLIPPED,
                         " SET item_de_terc.val_remessa = ",log2260_troca_virgula_por_ponto (l_val_remessa_char),", ",
                             " item_de_terc.cod_cla_fisc   = """,l_cod_cla_fisc,""", ",
                             " item_de_terc.den_item       = ? ,",
                             " item_de_terc.cod_unid_med   = """,l_cod_unid_med,""" "
     ELSE
        LET l_sql_stmt = l_sql_stmt CLIPPED,
                         " SET item_de_terc.dat_emis_nf    = """,l_dat_emis_nf,""", ",
                             " item_de_terc.dat_entrada_nf = """,l_dat_entrada_nf,""" "
     END IF

     LET l_sql_stmt = l_sql_stmt CLIPPED,
                       " WHERE item_de_terc.cod_empresa    = """,p_cod_empresa,""" ",
                         " AND item_de_terc.num_nf         = ",l_num_nf," ",
                         " AND item_de_terc.ser_nf         = """,l_ser_nf,""" ",
                         " AND item_de_terc.ssr_nf         = ",l_ssr_nf," ",
                         " AND item_de_terc.cod_fornecedor = """,l_cod_fornecedor,""" ",
                         " AND item_de_terc.ies_especie_nf = """,l_ies_especie_nf,""" ",
                         " AND item_de_terc.num_sequencia  = ",l_num_sequencia," "

     WHENEVER ERROR CONTINUE
     PREPARE var_update FROM l_sql_stmt
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("PREPARE","ITEM_DE_TERC")
        RETURN FALSE
     END IF

     WHENEVER ERROR CONTINUE
     IF l_ind = 1 THEN
        EXECUTE var_update USING l_den_item
     ELSE
        EXECUTE var_update
     END IF
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("UPADTE","ITEM_DE_TERC")
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#-------------------------------------------------#
 FUNCTION sup3760_via_transporte(l_cod_empresa,
                                 l_cod_fornecedor)
#-------------------------------------------------#
 DEFINE l_cod_empresa    LIKE empresa.cod_empresa,
        l_cod_fornecedor LIKE fornecedor.cod_fornecedor,
        l_parametro_val  LIKE via_transporte.cod_via_transporte,
        l_count          INTEGER,
        l_status         SMALLINT

 LET l_count = 0

 WHENEVER ERROR CONTINUE
 DECLARE cq_sup_par_forn CURSOR WITH HOLD FOR
  SELECT parametro_val
    FROM sup_par_fornecedor
   WHERE empresa            = l_cod_empresa
     AND fornecedor         = l_cod_fornecedor
     AND parametro[1,15]   = "meio_transporte"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql ("LEITURA","SUP_PAR_FORNECEDOR")
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cq_sup_par_forn INTO l_parametro_val
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","SUP_PAR_FORNECEDOR")
       EXIT FOREACH
    END IF
    LET l_count = l_count + 1
    IF l_count = 1 THEN
       LET m_via_transporte_nota = l_parametro_val
    END IF
 END FOREACH

 IF l_count > 0 THEN
    IF l_count > 1 THEN
       CALL sup3760_popup_via_transpor(l_cod_empresa,
                                       l_cod_fornecedor) RETURNING m_via_transporte_nota
    END IF
 ELSE
    INITIALIZE m_via_transporte_nota TO NULL
    CALL log2250_busca_parametro(l_cod_empresa,"via_transporte_padrao")
       RETURNING m_via_transporte_nota, l_status
    IF NOT l_status THEN
       LET m_via_transporte_nota = NULL
    END IF
 END IF

 END FUNCTION

#-----------------------------------------------------#
 FUNCTION sup3760_popup_via_transpor(l_cod_empresa,
                                     l_cod_fornecedor)
#-----------------------------------------------------#
 DEFINE l_cod_empresa    LIKE empresa.cod_empresa,
        l_cod_fornecedor LIKE fornecedor.cod_fornecedor,
        l_condicao       CHAR(500),
        l_via_transp     LIKE via_transporte.cod_via_transporte

 LET l_condicao = " cod_via_transporte IN ( SELECT parametro_val ",
                  " FROM sup_par_fornecedor ",
                 " WHERE empresa = """,l_cod_empresa,""" ",
                   " AND fornecedor = """,l_cod_fornecedor,""" ",
                   " AND parametro[1,15] = ""meio_transporte"" ) "

 WHILE TRUE
    LET l_via_transp =
        log009_popup(8,10, ------------------------- Linha/Coluna da Janela
        "MEIOS DE TRANSPORTE",                    -- Cabecalho da Janela
        "via_transporte",                         -- Nome da Tabela no Sistema
        "cod_via_transporte",                     -- Nome da Primeira Coluna
        "den_via_transporte",                     -- Nome da Segunda  Coluna
        "vdp2520",                                -- Nome do Prog.Manutencao
        "N",                                      -- Testa cod_empresa (S/N) ?
        l_condicao) -------------------------------- Where Clause do SELECT

    IF l_via_transp IS NULL
    OR l_via_transp = ' ' THEN
       ERROR 'Escolha uma das vias de transporte do fornecedor.'
    ELSE
       ERROR ' '
       EXIT WHILE
    END IF

 END WHILE

 RETURN l_via_transp

 END FUNCTION

#--inicio--vanderlei OS 434072 #
#---------------------------------------------------#
 FUNCTION sup3760_exclui_sup_par_ar(l_empresa,
                                    l_aviso_recebto,
                                    l_parametro)
#---------------------------------------------------#
 DEFINE l_empresa                LIKE sup_par_ar.empresa,
        l_aviso_recebto          LIKE sup_par_ar.aviso_recebto,
        l_parametro              LIKE sup_par_ar.parametro

 WHENEVER ERROR CONTINUE
 DELETE FROM sup_par_ar
  WHERE empresa       = l_empresa
    AND aviso_recebto = l_aviso_recebto
    AND parametro     = l_parametro
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql('EXCLUSÃO','SUP_PAR_AR')
 END IF
 END FUNCTION
#---fim----vanderlei OS 434072

#------------------------------------------#
 FUNCTION sup3760_recupera_operacao_estoq()
#------------------------------------------#
  DEFINE l_cod_operacao_x    CHAR(04),
         l_cod_fiscal_compl  LIKE aviso_rec_compl.cod_fiscal_compl,
         l_cod_operacao      CHAR(04)

  INITIALIZE l_cod_operacao_x TO NULL

  LET l_cod_operacao = p_par_sup.cod_operac_estoq_c

  LET l_cod_fiscal_compl = 0

  WHENEVER ERROR CONTINUE
   SELECT cod_fiscal_compl
     INTO l_cod_fiscal_compl
     FROM aviso_rec_compl
    WHERE cod_empresa   = p_cod_empresa
      AND num_aviso_rec = p_aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF SQLCA.SQLCODE <> 0 THEN
     LET l_cod_fiscal_compl = 0
  END IF

  IF p_ies_cod_operac = "S" OR
     p_nf_sup.ies_nf_aguard_nfe = "5" OR
     p_nf_sup.ies_nf_aguard_nfe = "P" OR
     sup0812_verifica_nota_transferencia(p_cod_empresa,
                                         p_aviso_rec.num_aviso_rec,
                                         p_nf_sup.num_nf,
                                         p_nf_sup.ser_nf,
                                         p_nf_sup.ssr_nf,
                                         p_nf_sup.cod_fornecedor,
                                         p_nf_sup.cod_operacao,
                                         l_cod_fiscal_compl) OR
     sup3762_verifica_operacao_srig(m_ies_fat_unico) THEN

     WHENEVER ERROR CONTINUE
      SELECT cod_operacao
        INTO l_cod_operacao_x
        FROM aviso_rec_compl
       WHERE aviso_rec_compl.cod_empresa   = p_cod_empresa
         AND aviso_rec_compl.num_aviso_rec = p_aviso_rec.num_aviso_rec
     WHENEVER ERROR STOP
     IF l_cod_operacao_x IS NOT NULL AND l_cod_operacao_x <> " " THEN
        LET l_cod_operacao = l_cod_operacao_x
     END IF
  ELSE
     WHENEVER ERROR CONTINUE
      SELECT cod_operacao
        INTO l_cod_operacao_x
        FROM tipo_desp_oper_ct
       WHERE tipo_desp_oper_ct.cod_empresa     = p_cod_empresa
         AND tipo_desp_oper_ct.cod_tip_despesa = p_aviso_rec.cod_tip_despesa
     WHENEVER ERROR STOP
     IF SQLCA.SQLCODE = 0 THEN
        IF l_cod_operacao_x IS NOT NULL AND l_cod_operacao_x <> " " THEN
           LET l_cod_operacao = l_cod_operacao_x
        END IF
     END IF
  END IF

  IF p_nf_sup.ies_nf_aguard_nfe = "4" THEN

     IF m_ies_armaz_itau = 'S' THEN

        LET l_cod_operacao_x = NULL

        WHENEVER ERROR CONTINUE
         SELECT par_sup_pad.par_txt
           INTO l_cod_operacao_x
           FROM par_sup_pad
          WHERE par_sup_pad.cod_empresa = p_cod_empresa
            AND par_sup_pad.cod_parametro = "cod_oper_ajust_ent"
        WHENEVER ERROR STOP
        IF SQLCA.SQLCODE <> 0 OR l_cod_operacao_x IS NULL THEN
           LET l_cod_operacao_x = " "
        END IF
        IF l_cod_operacao_x <> " " THEN
           LET l_cod_operacao = l_cod_operacao_x
        END IF
     END IF
  END IF

  RETURN l_cod_operacao

END FUNCTION

#--inicio--OS 414316 #
#--------------------------------------------------#
 FUNCTION sup3760_existe_h_nf_sup(l_cod_empresa,
                                  l_num_nf,
                                  l_ser_nf,
                                  l_ssr_nf,
                                  l_ies_especie_nf,
                                  l_cod_fornecedor,
                                  l_dat_emis_nf)  #809554
#--------------------------------------------------#
 DEFINE l_cod_empresa                        LIKE nf_sup.cod_empresa,
        l_num_nf                             LIKE nf_sup.num_nf,
        l_ser_nf                             LIKE nf_sup.ser_nf,
        l_ssr_nf                             LIKE nf_sup.ssr_nf,
        l_ies_especie_nf                     LIKE nf_sup.ies_especie_nf,
        l_cod_fornecedor                     LIKE nf_sup.cod_fornecedor,
        l_dat_emis_nf                        LIKE nf_sup.dat_emis_nf  #809554


 WHENEVER ERROR CONTINUE
 SELECT cod_empresa
   FROM h_nf_sup
  WHERE cod_empresa    = l_cod_empresa
    AND num_nf         = l_num_nf
    AND ser_nf         = l_ser_nf
    AND ssr_nf         = l_ssr_nf
    #AND ies_especie_nf = l_ies_especie_nf #A56550
    AND cod_fornecedor = l_cod_fornecedor
    AND dat_emis_nf    = l_dat_emis_nf    #809554
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND
    sqlca.sqlcode <> -284 THEN #A56550
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql('LEITURA','NF_SUP')
    END IF
    RETURN FALSE
 END IF

 RETURN TRUE
 END FUNCTION

#------------------------------------------------------------#
 FUNCTION sup3760_existe_cap_h_ad_mestre(l_empresa,
                                         l_nota_fiscal,
                                         l_fornecedor,
                                         l_serie_nota_fiscal,
                                         l_subserie_nf)
#------------------------------------------------------------#
 DEFINE l_empresa                           LIKE cap_h_ad_mestre.empresa,
        l_nota_fiscal                       LIKE cap_h_ad_mestre.nota_fiscal,
        l_fornecedor                        LIKE cap_h_ad_mestre.fornecedor,
        l_serie_nota_fiscal                 LIKE cap_h_ad_mestre.serie_nota_fiscal,
        l_subserie_nf                       LIKE cap_h_ad_mestre.subserie_nf

 WHENEVER ERROR CONTINUE
 SELECT empresa
   FROM cap_h_ad_mestre
  WHERE empresa            = l_empresa
    AND nota_fiscal        = l_nota_fiscal
    AND fornecedor         = l_fornecedor
    AND serie_nota_fiscal  = l_serie_nota_fiscal
    AND subserie_nf        = l_subserie_nf
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql('LEITURA','CAP_H_AD_MESTRE')
    END IF
    RETURN FALSE
 END IF

 RETURN TRUE
 END FUNCTION

#---------------------------------------------------#
 FUNCTION sup3760_existe_h_frete_sup(l_cod_empresa,
                                     l_cod_transpor,
                                     l_num_conhec,
                                     l_ser_conhec,
                                     l_ssr_conhec)
#---------------------------------------------------#
 DEFINE l_cod_empresa                 LIKE h_frete_sup.cod_empresa,
        l_cod_transpor                LIKE h_frete_sup.cod_transpor,
        l_num_conhec                  LIKE h_frete_sup.num_conhec,
        l_ser_conhec                  LIKE h_frete_sup.ser_conhec,
        l_ssr_conhec                  LIKE h_frete_sup.ssr_conhec

 WHENEVER ERROR CONTINUE
 SELECT cod_empresa
   FROM h_frete_sup
  WHERE cod_empresa  = l_cod_empresa
    AND cod_transpor = l_cod_transpor
    AND num_conhec   = l_num_conhec
    AND ser_conhec   = l_ser_conhec
    AND ssr_conhec   = l_ssr_conhec
 WHENEVER ERROR STOP
 #A95984
 IF sqlca.sqlcode <> 0 THEN
    IF sqlca.sqlcode <> 100 THEN
       CALL log003_err_sql('LEITURA','H_FRETE_SUP')
    END IF
    RETURN ''
 ELSE
   IF sqlca.sqlcode = 0 AND p_dados_tela.ies_especie_nf = 'CON' THEN
      RETURN ' Em histórico.'
   END IF
 END IF

 END FUNCTION
#---fim----OS 414316 #

#--------------------------------------#
 FUNCTION sup3760_insere_nfe_sup_compl()
#--------------------------------------#

 DEFINE lr_nfe_sup_compl RECORD LIKE nfe_sup_compl.*

 INITIALIZE lr_nfe_sup_compl.* TO NULL

 LET lr_nfe_sup_compl.cod_empresa      = p_cod_empresa
 LET lr_nfe_sup_compl.num_aviso_rec    = p_dados_tela.num_aviso_rec
 LET lr_nfe_sup_compl.den_embal        = " "
 LET lr_nfe_sup_compl.qtd_volumes      = 0
 LET lr_nfe_sup_compl.peso_bruto       = 0
 LET lr_nfe_sup_compl.peso_liquido     = 0
 LET lr_nfe_sup_compl.ies_proc_nfs     = "2"
 LET lr_nfe_sup_compl.num_proc_imp_nfs = NULL
 LET lr_nfe_sup_compl.texto_obs1       = 0
 LET lr_nfe_sup_compl.texto_obs2       = 0
 LET lr_nfe_sup_compl.texto_compl1     = " "
 LET lr_nfe_sup_compl.texto_compl2     = " "
 LET lr_nfe_sup_compl.ies_nfe_emit     = "N"

 WHENEVER ERROR CONTINUE
 SELECT cod_empresa
   FROM nfe_sup_compl
  WHERE cod_empresa   = lr_nfe_sup_compl.cod_empresa
    AND num_aviso_rec = lr_nfe_sup_compl.num_aviso_rec
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 0 THEN
    RETURN TRUE
 END IF

 WHENEVER ERROR CONTINUE
 SELECT cod_empresa
   FROM nfe_sup_compl
  WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = p_dados_tela.num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    WHENEVER ERROR CONTINUE
    UPDATE nfe_sup_compl SET ies_proc_nfs = '2'
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("UPDATE","NFE_SUP_COMPL")
    END IF
 ELSE
    WHENEVER ERROR CONTINUE
    INSERT INTO nfe_sup_compl (cod_empresa,  num_aviso_rec,    den_embal,
                               qtd_volumes,  peso_bruto,       peso_liquido,
                               ies_proc_nfs, num_proc_imp_nfs, texto_obs1,
                               texto_obs2,   texto_compl1,     texto_compl2,
                               ies_nfe_emit)
                       VALUES (lr_nfe_sup_compl.cod_empresa,  lr_nfe_sup_compl.num_aviso_rec,    lr_nfe_sup_compl.den_embal,
                               lr_nfe_sup_compl.qtd_volumes,  lr_nfe_sup_compl.peso_bruto,       lr_nfe_sup_compl.peso_liquido,
                               lr_nfe_sup_compl.ies_proc_nfs, lr_nfe_sup_compl.num_proc_imp_nfs, lr_nfe_sup_compl.texto_obs1,
                               lr_nfe_sup_compl.texto_obs2,   lr_nfe_sup_compl.texto_compl1,     lr_nfe_sup_compl.texto_compl2,
                               lr_nfe_sup_compl.ies_nfe_emit)
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("INSERT","nfe_sup_compl")
       RETURN FALSE
    END IF
 END IF

 RETURN TRUE
 END FUNCTION

#--------------------------------------------#
 FUNCTION sup3760_busca_proc_imp_nfe_nfp_nfm()
#--------------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT processo_imp.*
   INTO p_processo_imp.*
   FROM processo_imp
  WHERE processo_imp.cod_empresa      = p_cod_empresa
    AND processo_imp.num_processo     = p_dados_tela.num_nf
    AND processo_imp.cod_exportador   = p_dados_tela.cod_fornecedor
    AND processo_imp.ies_versao_atual = "S"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    RETURN TRUE
 ELSE
    IF sqlca.sqlcode <> NOTFOUND THEN
       CALL log003_err_sql("LEITURA","PROCESSO_IMP")
    END IF
    RETURN FALSE
 END IF

 END FUNCTION

#------------------------------------#
 FUNCTION sup3760_busca_proc_imp_nfr()
#------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT processo_imp.*
   INTO p_processo_imp.*
   FROM processo_imp
  WHERE processo_imp.cod_empresa       = p_cod_empresa
    AND processo_imp.num_processo      = p_dados_tela.num_nf
    AND processo_imp.cod_consignatario = p_dados_tela.cod_fornecedor
    AND processo_imp.ies_versao_atual  = "S"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    RETURN TRUE
 ELSE
    IF sqlca.sqlcode <> NOTFOUND THEN
       CALL log003_err_sql("LEITURA","PROCESSO_IMP")
    END IF
    RETURN FALSE
 END IF

 END FUNCTION

#-----------------------------------------------------#
 FUNCTION sup3760_processo_importacao(l_ies_especie_nf)
#-----------------------------------------------------#
 DEFINE l_ies_especie_nf CHAR(10),
        l_busca_situacao SMALLINT,
        l_existe_proc    SMALLINT,
        l_msg            CHAR(80)

 DEFINE l_ies_situa_import LIKE nf_sup.ies_situa_import

 IF p_entrou_pedido = "N" THEN

    IF l_ies_especie_nf = "NFE/NFP" OR
       l_ies_especie_nf = "NFM" THEN
       CALL sup3760_busca_proc_imp_nfe_nfp_nfm() RETURNING l_existe_proc

    ELSE
       IF l_ies_especie_nf = "NFR" THEN
          CALL sup3760_busca_proc_imp_nfr() RETURNING l_existe_proc
       END IF
    END IF

    IF l_existe_proc THEN

       LET l_busca_situacao = FALSE

       IF l_ies_especie_nf = "NFM" THEN
          IF m_ies_utiliz_provisao = "N" OR
            (m_ies_utiliz_provisao = "S" AND
             p_processo_imp.num_processo < m_inicio_provisao) THEN
             LET l_busca_situacao = TRUE
          END IF
       ELSE
          IF (m_ies_utiliz_provisao = "N" OR
             (m_ies_utiliz_provisao = "S" AND
              p_processo_imp.num_processo < m_inicio_provisao) OR
             (m_ies_utiliz_provisao = "S" AND m_utiliz_nfm_import = "S" AND
              p_processo_imp.num_processo >= m_inicio_provisao)) THEN
             LET l_busca_situacao = TRUE
          END IF
       END IF

       IF l_busca_situacao THEN
          IF p_processo_imp.num_aviso_rec IS NOT NULL THEN
             WHENEVER ERROR CONTINUE
             INITIALIZE l_ies_situa_import TO NULL
             SELECT nf_sup.ies_situa_import
               INTO l_ies_situa_import
               FROM nf_sup
              WHERE nf_sup.cod_empresa   = p_cod_empresa
                AND nf_sup.num_aviso_rec = p_processo_imp.num_aviso_rec
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 AND
                sqlca.sqlcode <> NOTFOUND THEN
                CALL log003_err_sql("LEITURA","NF_SUP")
             END IF

             IF l_ies_situa_import IS NOT NULL AND
                l_ies_situa_import = "E" THEN
                IF p_dados_tela.ies_especie_nf = "NFP" THEN
                   LET l_msg = "Processo de importação já encerrado.\n",
                               "Continuar a inclusão desta nota fiscal,\n",
                               "sendo que na mesma não constará despesas complementares\n",
                               "(despesas rateadas pelo IMP0029)?"
                   IF log0040_confirm(5,5,l_msg) THEN
                      LET m_nfp_incl_apos_encerr = TRUE
                   ELSE
                      RETURN FALSE
                   END IF
                ELSE
                   ERROR " Processo de importacao ja encerrado "
                   RETURN FALSE
                END IF
             END IF
          END IF
       END IF

       LET l_msg = "Existe Processo de Importacao para esta ", l_ies_especie_nf CLIPPED, ". Considerar dados?"
       IF log0040_confirm(21,23,l_msg) THEN
          IF p_processo_imp.ies_pgto_impostos IS NULL OR
             p_processo_imp.ies_pgto_impostos = " " OR
             p_processo_imp.ies_pgto_impostos = "N" THEN
             CALL log0030_mensagem("Nao possui numero da DI ou pagamento impostos para o Processo de Importacao","exclamation")
          ELSE
             IF p_processo_imp.num_aviso_rec IS NOT NULL AND
                p_processo_imp.num_aviso_rec <> 0 THEN
                LET l_msg = "Este Processo de Importacao ja tem AR: ", p_processo_imp.num_aviso_rec, " Confirma recebimento? "
                IF log0040_confirm(21,23, l_msg) THEN
                   CASE l_ies_especie_nf
                     WHEN "NFE/NFP" LET p_nfe_import = TRUE
                     WHEN "NFM"     LET p_nfm_import = TRUE
                     WHEN "NFR"     LET m_nfr_import = TRUE
                                    LET p_nfe_import = TRUE
                   END CASE
                END IF
             ELSE
                CASE l_ies_especie_nf
                  WHEN "NFE/NFP" LET p_nfe_import = TRUE
                  WHEN "NFM"     LET p_nfm_import = TRUE
                  WHEN "NFR"     LET m_nfr_import = TRUE
                                 LET p_nfe_import = TRUE
                END CASE
             END IF
          END IF
       END IF
    END IF
 END IF

 IF p_nfm_import = TRUE THEN
    CALL sup3760_busca_mod_embar_sem_frete()
       RETURNING p_dados_tela.cod_mod_embar, p_formonly.tex_tip_frete
    DISPLAY BY NAME p_dados_tela.cod_mod_embar, p_formonly.tex_tip_frete
 END IF

 RETURN TRUE

 END FUNCTION


#--------------------------------------------------------------------#
 FUNCTION sup3760_nota_integrada_gecex(l_cod_empresa, l_num_aviso_rec)
#--------------------------------------------------------------------#

 DEFINE l_cod_empresa   LIKE empresa.cod_empresa,
        l_num_aviso_rec LIKE aviso_rec.num_aviso_rec

 WHENEVER ERROR CONTINUE
 SELECT empresa
   FROM sup_par_ar
  WHERE empresa           = l_cod_empresa
    AND aviso_recebto     = l_num_aviso_rec
    AND seq_aviso_recebto = 0
    AND parametro         = 'nfe_integrada_gecex'
    AND par_ind_especial  = 'S'
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 0
 OR sqlca.sqlcode = -284 THEN
    RETURN TRUE
 END IF

 RETURN FALSE
 END FUNCTION

#-------------------------------------------------------------#
 FUNCTION sup3760_fornecedor_processo_imp(l_cod_fornecedor_nf)
#-------------------------------------------------------------#
  DEFINE l_num_processo         LIKE aviso_rec_proc_imp.num_processo,
         l_cod_fornecedor_proc  LIKE nf_sup.cod_fornecedor,
         l_cod_fornecedor_nf    LIKE nf_sup.cod_fornecedor

  LET l_num_processo = sup3760_busca_numero_processo_importacao()

  LET l_cod_fornecedor_proc = sup3760_leitura_processo_imp(l_num_processo,"FORN")
  IF l_cod_fornecedor_proc IS NULL OR l_cod_fornecedor_proc = " " THEN
     LET l_cod_fornecedor_proc = l_cod_fornecedor_nf
  END IF

  RETURN l_cod_fornecedor_proc

 END FUNCTION

#---------------------------------------------------#
 FUNCTION sup3760_busca_numero_processo_importacao()
#---------------------------------------------------#
  DEFINE  l_num_processo    LIKE aviso_rec_proc_imp.num_processo

  WHENEVER ERROR CONTINUE
  INITIALIZE l_num_processo TO NULL
  SELECT UNIQUE(num_processo)
    INTO l_num_processo
    FROM aviso_rec_proc_imp
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("LEITURA","AVISO_REC_PROC_IMP")
  END IF

  RETURN l_num_processo
 END FUNCTION

#-----------------------------------------------------#
 FUNCTION sup3760_leitura_processo_imp(l_num_processo,
                                       l_tipo_reg)
#-----------------------------------------------------#
  DEFINE l_num_processo      LIKE processo_imp.num_processo,
         l_tipo_reg          CHAR(04),
         l_cod_fornecedor    LIKE processo_imp.cod_exportador,
         l_num_aviso_rec     LIKE processo_imp.num_aviso_rec

  INITIALIZE l_cod_fornecedor, l_num_aviso_rec TO NULL

  IF l_num_processo IS NOT NULL AND l_num_processo <> -1 THEN
     WHENEVER ERROR CONTINUE
     SELECT cod_exportador, num_aviso_rec
       INTO l_cod_fornecedor, l_num_aviso_rec
       FROM processo_imp
      WHERE cod_empresa      = p_cod_empresa
        AND num_processo     = l_num_processo
        AND ies_versao_atual = "S"
     WHENEVER ERROR STOP
  END IF

  IF l_tipo_reg = "FORN" THEN
     RETURN l_cod_fornecedor
  END IF

  RETURN l_num_aviso_rec

 END FUNCTION

#--------------------------------------------#
 FUNCTION sup3760_nfr_consignatario(l_funcao)
#--------------------------------------------#
 DEFINE l_funcao                     CHAR(11),
        l_num_processo               LIKE processo_imp.num_processo

  IF p_dados_tela.ies_especie_nf = "NFR" AND
     m_proc_imp_rec_nfr_consig = "S" THEN
     IF l_funcao = "INCLUSAO" THEN
        RETURN TRUE
     ELSE
        LET l_num_processo = sup3760_busca_numero_processo_importacao()
        IF l_num_processo > 0 THEN
           RETURN TRUE
        END IF
     END IF
  END IF

  RETURN FALSE
 END FUNCTION

#---------------------------------------#
 FUNCTION sup3760_consiste_nf_transito()
#---------------------------------------#
  DEFINE l_nfs_eletronica    SMALLINT

  LET l_nfs_eletronica = FALSE
  WHENEVER ERROR CONTINUE
  SELECT sup_par_ar.parametro_val
    FROM sup_par_ar
   WHERE sup_par_ar.empresa           = p_cod_empresa
     AND sup_par_ar.aviso_recebto     = p_nf_sup.num_aviso_rec
     AND sup_par_ar.seq_aviso_recebto = 0
     AND sup_par_ar.parametro         = "num_nf_eletronica"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     LET l_nfs_eletronica = TRUE
  END IF

  IF m_trata_nf_em_transito = "S" OR l_nfs_eletronica THEN
     RETURN TRUE
  END IF
  RETURN FALSE
 END FUNCTION

#------------------------------#
 FUNCTION sup3760_altera_oc_pc()
#------------------------------#
 DEFINE l_ind         SMALLINT,
        l_cod_item    LIKE ordem_sup.cod_item,
        l_den_item    LIKE item.den_item,
        l_cod_uni_med LIKE ordem_sup.cod_unid_med

 FOR l_ind = 1 TO 999

    IF  p_array_pedidos[l_ind].num_pedido IS NOT NULL
    AND p_array_pedidos[l_ind].num_pedido <> " "
    AND p_array_pedidos[l_ind].num_pedido <> 0 THEN

       INITIALIZE l_cod_item, l_den_item, l_cod_uni_med TO NULL

       WHENEVER ERROR CONTINUE
       SELECT item.cod_item, item.den_item, item.cod_unid_med
         INTO l_cod_item,    l_den_item,    l_cod_uni_med
         FROM item, ordem_sup
        WHERE item.cod_empresa           = p_cod_empresa
          AND ordem_sup.cod_empresa      = p_cod_empresa
          AND ordem_sup.num_oc           = p_array_pedidos[l_ind].num_oc
          AND ordem_sup.cod_item         = item.cod_item
          AND ordem_sup.ies_versao_atual = 'S'
       WHENEVER ERROR STOP

       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("SELECT","ORDEM_SUP")
          RETURN FALSE
       END IF

       WHENEVER ERROR CONTINUE
       UPDATE aviso_rec SET num_pedido      = p_array_pedidos[l_ind].num_pedido,
                            num_oc          = p_array_pedidos[l_ind].num_oc,
                            cod_item        = l_cod_item,
                            den_item        = l_den_item,
                            cod_unid_med_nf = l_cod_uni_med
                 WHERE cod_empresa   = p_cod_empresa
                   AND num_aviso_rec = p_dados_tela.num_aviso_rec
                   AND num_seq       = l_ind
       WHENEVER ERROR STOP

       IF sqlca.sqlcode <> 0 THEN
          RETURN FALSE
       END IF

    ELSE
       EXIT FOR
    END IF

 END FOR

 RETURN TRUE
 END FUNCTION

#--------------------------------#
 FUNCTION sup3760_modifica_oc_pc()
#--------------------------------#
 DEFINE l_funcao     CHAR(15)

 LET p_pedidos_p1  = p_pedidos[1,500]
 LET p_pedidos_p2  = p_pedidos[501,1000]
 LET p_pedidos_p3  = p_pedidos[1001,1200]
 LET p_ordens_p1   = p_ordens[1,500]
 LET p_ordens_p2   = p_ordens[501,1000]
 LET p_ordens_p3   = p_ordens[1001,1500]
 LET p_ordens_p4   = p_ordens[1501,1800]
 LET p_prog_ordem1 = p_prog_ordem[1,300]
 LET p_prog_ordem2 = p_prog_ordem[301,600]

 INITIALIZE p_array_volta, p_array_ped_aux TO NULL

 CALL sup3760_grava_parametro_alteracao()

 LET l_funcao = ""

 CALL sup385_entrada_pedidos(p_cod_empresa, p_dados_tela.cod_fornecedor, p_pedidos_p1,
                             p_pedidos_p2,  p_pedidos_p3, p_ordens_p1,   p_ordens_p2,
                             p_ordens_p3,   p_ordens_p4,  p_prog_ordem1, p_prog_ordem2,
                             p_retorno_3760, p_fornec_incl_item, p_dados_tela.num_aviso_rec, l_funcao)
      RETURNING p_pedidos_p1,  p_pedidos_p2,  p_pedidos_p3,  p_ordens_p1,
                p_ordens_p2,   p_ordens_p3,   p_ordens_p4,   p_prog_ordem1,
                p_prog_ordem2, p_retorno_3760, p_qtd_entreg1, p_qtd_entreg2,
                p_qtd_entreg3, p_qtd_entreg4, p_qtd_entreg5, p_qtd_entreg6

 IF p_retorno_3760 <> FALSE THEN

    WHENEVER ERROR CONTINUE
    CALL log085_transacao("BEGIN")
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
    END IF

    IF sup3760_altera_oc_pc() THEN
       WHENEVER ERROR CONTINUE
           CALL log085_transacao("COMMIT")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log085_transacao("ROLLBACK") #OS596059
       ELSE
          MESSAGE "Modificação efetuada com sucesso." ATTRIBUTE(REVERSE)
       END IF
    ELSE
       WHENEVER ERROR CONTINUE
           CALL log085_transacao("ROLLBACK")
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
       END IF

       ERROR "Modificação cancelada."
    END IF
 ELSE
    CALL log0030_mensagem("Alteração de OC/PC cancelada.","exclamation")
 END IF

 END FUNCTION

#-------------------------------------------#
 FUNCTION sup3760_grava_parametro_alteracao()
#-------------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT empresa
   FROM sup_par_ar
  WHERE empresa           = p_cod_empresa
    AND aviso_recebto     = p_dados_tela.num_aviso_rec
    AND seq_aviso_recebto = 0
    AND parametro         = 'consiste_num_oc_pc'
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 100 THEN

    WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_ar (empresa,            aviso_recebto,
                            seq_aviso_recebto,  parametro,
                            par_ind_especial,   parametro_texto,
                            parametro_val,      parametro_dat)
                    VALUES (p_cod_empresa,      p_dados_tela.num_aviso_rec,
                            0,                  'consiste_num_oc_pc',
                            '',                 '',
                            '',                 '')
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("INSERT","SUP_PAR_AR")
    END IF

 END IF

 END FUNCTION

#--------------------------------------------------#
 FUNCTION sup3760_busca_especie_nf(l_cod_empresa,
                                   l_num_aviso_rec)
#--------------------------------------------------#
  DEFINE l_cod_empresa    LIKE nf_sup.cod_empresa,
         l_num_aviso_rec  LIKE nf_sup.num_aviso_rec,
         l_ies_especie_nf LIKE nf_sup.ies_especie_nf,
         l_status         SMALLINT,
         l_msg_erro       CHAR(100)

  INITIALIZE l_ies_especie_nf TO NULL

  CALL supm20_nf_sup_leitura_ar(l_cod_empresa,
                                l_num_aviso_rec,
                                FALSE,
                                TRUE)
     RETURNING l_status, l_msg_erro

  IF l_status THEN
     LET l_ies_especie_nf = supm20_nf_sup_get_ies_especie_nf()
  END IF

  RETURN l_ies_especie_nf

 END FUNCTION

#-------------------------------------------------------#
 FUNCTION sup3760_verifica_cfop_destino(l_cfop_origem)
#-------------------------------------------------------#
 DEFINE l_cfop_destino      LIKE aviso_rec.cod_fiscal_item,
        l_cfop_origem       LIKE aviso_rec.cod_fiscal_item,
        l_cfop              LIKE aviso_rec.cod_fiscal_item

  IF log0150_verifica_se_tabela_existe("sup_dpara_cfop") THEN
     WHENEVER ERROR CONTINUE
       SELECT cfop_destino
         INTO l_cfop
         FROM sup_dpara_cfop
        WHERE empresa     = p_cod_empresa
          AND cfop_origem = l_cfop_origem
     WHENEVER ERROR STOP

     IF sqlca.sqlcode = 0 THEN
        CASE l_cfop_origem[1,1]
          WHEN "5" LET l_cfop_destino = "1",l_cfop[2,5]
          WHEN "6" LET l_cfop_destino = "2",l_cfop[2,5]
          WHEN "7" LET l_cfop_destino = "3",l_cfop[2,5]
        END CASE

        RETURN TRUE, l_cfop_destino
     END IF
  END IF

  RETURN FALSE, l_cfop_destino

END FUNCTION

#------------------------------------------------------#
 FUNCTION sup3760_inclui_modifica_classif_nfc(l_funcao)
#------------------------------------------------------#
 DEFINE l_funcao   CHAR(20),
        l_achou    SMALLINT,
        l_msg_erro CHAR(100)

 INITIALIZE m_classif_nfc TO NULL
 CALL log130_procura_caminho("sup3760c") RETURNING comando3

 OPEN WINDOW w_sup3760c AT 10,10 WITH FORM comando3
 ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, FORM LINE 1)

 INITIALIZE m_classif_nfc TO NULL
 CALL supm72_sup_par_ar_set_null()
 CALL supm72_sup_par_ar_leitura(p_cod_empresa,
                                p_dados_tela.num_aviso_rec,
                                0,
                                "classif_nfc",
                                FALSE,
                                TRUE) RETURNING l_achou

 IF l_achou THEN
    LET m_classif_nfc = supm72_sup_par_ar_get_par_ind_especial()

    CASE m_classif_nfc
       WHEN "1" DISPLAY "Complemento imposto" TO den_classif_nfc
       WHEN "2" DISPLAY "Complemento Valor" TO den_classif_nfc
    END CASE

    DISPLAY m_classif_nfc TO classif_nfc
 END IF

 LET int_flag = 0
 INPUT m_classif_nfc WITHOUT DEFAULTS FROM classif_nfc  # OS 540842->"WITHOUT DEFAULTS"

    AFTER FIELD classif_nfc
       IF m_classif_nfc IS NOT NULL AND
          m_classif_nfc <> "1" AND
          m_classif_nfc <> "2" THEN
          CALL log0030_mensagem("Classificação da nota fiscal complementar inválida.","exclamation")
          NEXT FIELD classif_nfc
       END IF
       CASE m_classif_nfc
       WHEN "1" DISPLAY "Complemento imposto" TO den_classif_nfc
       WHEN "2" DISPLAY "Complemento Valor" TO den_classif_nfc
       END CASE

    AFTER INPUT
       IF NOT int_flag THEN
          IF m_classif_nfc IS NULL OR
             m_classif_nfc = " " THEN
             CALL log0030_mensagem("Classificação da nota fiscal complementar não informada.","exclamation")
             NEXT FIELD classif_nfc
          END IF
       END IF

    ON KEY (control-z, f4)
      CALL sup376_popups(l_funcao)

 END INPUT

 CLOSE WINDOW w_sup3760c
 CURRENT WINDOW IS w_sup37601

 IF int_flag THEN
    LET int_flag = 0
    RETURN FALSE
 END IF

 IF l_achou THEN
    CALL supm72_sup_par_ar_set_par_ind_especial(m_classif_nfc)
    CALL supm72_sup_par_ar_set_parametro_dat(TODAY)

    IF NOT supt72_sup_par_ar_modifica(TRUE,TRUE) THEN
       RETURN FALSE
    END IF

 ELSE
    CALL supm72_sup_par_ar_set_null()
    CALL supm72_sup_par_ar_set_empresa(p_cod_empresa)
    CALL supm72_sup_par_ar_set_aviso_recebto(p_dados_tela.num_aviso_rec)
    CALL supm72_sup_par_ar_set_seq_aviso_recebto(0)
    CALL supm72_sup_par_ar_set_parametro("classif_nfc")
    CALL supm72_sup_par_ar_set_par_ind_especial(m_classif_nfc)
    CALL supm72_sup_par_ar_set_parametro_dat(TODAY)

    IF NOT supt72_sup_par_ar_inclui(TRUE,TRUE) THEN
       RETURN FALSE
    END IF

 END IF

 RETURN TRUE

 END FUNCTION

#-----------------------------------------------------------------------------------------#
 FUNCTION sup3760_verifica_item_de_terc(l_num_nf, l_ser_nf, l_ssr_nf, l_cod_fornecedor,
                                        l_ies_especie_nf, l_num_sequencia)
#-----------------------------------------------------------------------------------------#
 DEFINE l_num_nf            LIKE item_de_terc.num_nf,
        l_ser_nf            LIKE item_de_terc.ser_nf,
        l_ssr_nf            LIKE item_de_terc.ssr_nf,
        l_cod_fornecedor    LIKE item_de_terc.cod_fornecedor,
        l_ies_especie_nf    LIKE item_de_terc.ies_especie_nf,
        l_num_sequencia     LIKE item_de_terc.num_sequencia

 WHENEVER ERROR CONTINUE
  SELECT item_de_terc.num_nf
    FROM item_de_terc
   WHERE item_de_terc.cod_empresa    = p_cod_empresa
     AND item_de_terc.num_nf         = l_num_nf
     AND item_de_terc.ser_nf         = l_ser_nf
     AND item_de_terc.ssr_nf         = l_ssr_nf
     AND item_de_terc.cod_fornecedor = l_cod_fornecedor
     AND item_de_terc.ies_especie_nf = l_ies_especie_nf
     AND item_de_terc.num_sequencia  = l_num_sequencia
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 0 THEN
    RETURN TRUE
 END IF

 RETURN FALSE

END FUNCTION

#-------------------------------------------#
 FUNCTION sup3760_recalcula_impostos_nf_imp()
#-------------------------------------------#

 DEFINE l_val_ipi_d    LIKE aviso_rec.val_ipi_decl_item,
        l_val_ipi_c    LIKE aviso_rec.val_ipi_decl_item,
        l_val_icm_d    LIKE aviso_rec.val_icms_item_d,
        l_val_icm_c    LIKE aviso_rec.val_icms_item_d,
        l_val_desp     LIKE aviso_rec.val_icms_desp_aces,
        l_val_contab   LIKE aviso_rec.val_contabil_item,
        l_val_ipi_tot  LIKE aviso_rec.val_icms_item_d,
        l_val_icm_tot  LIKE aviso_rec.val_icms_item_d,
        l_val_nf_tot   LIKE aviso_rec.val_icms_item_d,
        l_achou        CHAR(01)

 WHENEVER ERROR CONTINUE
 DECLARE cq_recalcula_imp CURSOR WITH HOLD FOR
 SELECT val_ipi_decl_item, val_ipi_calc_item, val_contabil_item,
        val_icms_item_d, val_icms_item_c, val_icms_desp_aces
   FROM aviso_rec
  WHERE cod_empresa   = p_aviso_rec.cod_empresa
    AND num_aviso_rec = p_aviso_rec.num_aviso_rec
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","cq_recalcula_imp")
    RETURN
 END IF

 LET l_val_ipi_tot = 0
 LET l_val_icm_tot = 0
 LET l_val_nf_tot  = 0

 LET l_achou = "N"
 WHENEVER ERROR CONTINUE
 FOREACH cq_recalcula_imp INTO l_val_ipi_d, l_val_ipi_c, l_val_contab,
                               l_val_icm_d, l_val_icm_c, l_val_desp
 WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","cq_recalcula_imp")
       RETURN
    END IF
    LET l_achou = "S"

    IF l_val_ipi_d > 0 THEN
       LET l_val_ipi_tot = l_val_ipi_tot + l_val_ipi_d
    ELSE
       LET l_val_ipi_tot = l_val_ipi_tot + l_val_ipi_c
    END IF

    IF l_val_icm_d > 0 THEN
       LET l_val_icm_tot = l_val_icm_tot + l_val_desp + l_val_icm_d
    ELSE
       LET l_val_icm_tot = l_val_icm_tot + l_val_desp + l_val_icm_c
    END IF

    LET l_val_nf_tot = l_val_nf_tot + l_val_contab

 END FOREACH
 FREE cq_recalcula_imp

 IF l_achou = "S" THEN

    DISPLAY l_val_ipi_tot, l_val_icm_tot,     l_val_nf_tot
         TO val_ipi_nf,    val_tot_icms_nf_d, val_tot_nf_d

    WHENEVER ERROR CONTINUE
    UPDATE nf_sup
       SET val_tot_nf_d      = l_val_nf_tot,
           val_tot_icms_nf_d = l_val_icm_tot,
           val_ipi_nf        = l_val_ipi_tot
     WHERE cod_empresa   = p_aviso_rec.cod_empresa
       AND num_aviso_rec = p_aviso_rec.num_aviso_rec
    WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("UPDATE","NF_SUP")
       RETURN
    END IF

 END IF

 END FUNCTION

#-----------------------------------#
 FUNCTION sup3760_verifica_tip_frete()
#-----------------------------------#
 DEFINE l_ies_tip_frete LIKE modo_embarque.ies_tip_frete

 INITIALIZE l_ies_tip_frete TO NULL
 WHENEVER ERROR CONTINUE
 SELECT modo_embarque.ies_tip_frete
   INTO l_ies_tip_frete
   FROM modo_embarque
  WHERE modo_embarque.cod_mod_embar = p_dados_tela.cod_mod_embar
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("LEITURA","MODO_EMBARQUE")
    RETURN FALSE
 END IF

 IF p_dados_tela.ies_especie_nf = "NFS" AND
    l_ies_tip_frete = "2" THEN
    CALL log0030_mensagem("Nota fiscal de serviço não possui frete.","exclamation")
    RETURN FALSE
 END IF

 RETURN TRUE

 END FUNCTION

#-----------------------------------#
 FUNCTION sup3760_assume_erros_nf()
#-----------------------------------#
 DEFINE l_num_proc_imp_nfs LIKE nfe_sup_compl.num_proc_imp_nfs,
        l_num_nf           LIKE nf_sup.num_nf,
        l_count            SMALLINT

 DEFINE l_usr_aut_libr_erro SMALLINT

 CALL sup376_busca_nf_sup(p_nf_sup.num_aviso_rec)

 INITIALIZE l_count TO NULL
 WHENEVER ERROR CONTINUE
 SELECT COUNT(*)
   INTO l_count
   FROM nf_sup_erro
  WHERE nf_sup_erro.empresa       = p_nf_sup.cod_empresa
    AND nf_sup_erro.num_aviso_rec = p_nf_sup.num_aviso_rec
    AND nf_sup_erro.ies_origem_erro <> "4"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("LEITURA","NF_SUP_ERRO")
 END IF

 IF l_count IS NULL THEN
    LET l_count = 0
 END IF

 IF l_count = 0 THEN
    CALL log0030_mensagem(" Não foram detectados erros na consistência da nota fiscal. ","exclamation")
 ELSE

    LET l_usr_aut_libr_erro = FALSE

    WHENEVER ERROR CONTINUE
    INITIALIZE l_count TO NULL
    SELECT COUNT(*)
      INTO l_count
      FROM sup_resp_libr_erro
     WHERE sup_resp_libr_erro.empresa = p_nf_sup.cod_empresa
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("LEITURA","SUP_RESP_LIBR_ERRO")
    END IF

    IF l_count IS NULL OR l_count = " " OR l_count = 0 THEN
       LET l_count = 0
       LET l_usr_aut_libr_erro = TRUE
    END IF

    IF l_count > 0 THEN
       WHENEVER ERROR CONTINUE
       SELECT sup_resp_libr_erro.usuario
         FROM sup_resp_libr_erro
        WHERE sup_resp_libr_erro.empresa = p_nf_sup.cod_empresa
          AND sup_resp_libr_erro.usuario = p_user
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 THEN
          LET l_usr_aut_libr_erro = TRUE
       END IF
    END IF

    IF l_usr_aut_libr_erro = TRUE THEN

       CALL sup431_assumir_erros(p_nf_sup.cod_empresa, p_nf_sup.num_aviso_rec)

       CALL sup376_consulta_dados()

       IF p_nf_sup.ies_nf_com_erro = "N" OR
          p_nf_sup.nom_resp_aceite_er IS NOT NULL THEN

          IF p_nf_sup.ies_especie_nf = "NFD" AND
            (p_nf_sup.ies_nf_aguard_nfe <> "6" AND
             p_nf_sup.ies_nf_aguard_nfe <> "9") AND
             g_ies_tex_inst = "S" THEN

             LET p_val_imposto = p_nf_sup.val_ipi_nf +
                                 p_nf_sup.val_tot_icms_nf_d

             IF sup6983_gera_arquivo(p_nf_sup.num_aviso_rec,
                                     p_nf_sup.num_nf,
                                     0,
                                     p_nf_sup.num_nf,
                                     p_nf_sup.dat_entrada_nf,
                                     p_val_imposto,
                                     p_nf_sup.val_tot_nf_d,
                                     "SUP3760") THEN
             END IF

          ELSE

             WHENEVER ERROR CONTINUE
             SELECT sup_par_ar.empresa
               FROM sup_par_ar
              WHERE empresa           = p_nf_sup.cod_empresa
                AND aviso_recebto     = p_nf_sup.num_aviso_rec
                AND seq_aviso_recebto = "1"
                AND parametro         = "interface_nf_sup6981"
             WHENEVER ERROR STOP
             IF sqlca.sqlcode = 0 THEN

                WHENEVER ERROR CONTINUE
                SELECT num_proc_imp_nfs
                  INTO l_num_proc_imp_nfs
                  FROM nfe_sup_compl
                 WHERE cod_empresa   = p_nf_sup.cod_empresa
                   AND num_aviso_rec = p_nf_sup.num_aviso_rec
                WHENEVER ERROR STOP
                IF sqlca.sqlcode <> 0 THEN
                   LET l_num_nf = p_nf_sup.num_nf
                ELSE
                   IF l_num_proc_imp_nfs <> " " AND
                      l_num_proc_imp_nfs IS NOT NULL THEN
                      LET l_num_nf = l_num_proc_imp_nfs
                   ELSE
                      LET l_num_nf = p_nf_sup.num_nf
                   END IF
                END IF

                IF p_nf_sup.ies_especie_nf = "NFD"  AND
                   p_nf_sup.ies_nf_aguard_nfe = "6" AND
                   g_ies_tex_inst = "S" THEN

                   LET p_val_imposto = p_nf_sup.val_ipi_nf +
                                       p_nf_sup.val_tot_icms_nf_d

                   IF sup6983_gera_arquivo(p_nf_sup.num_aviso_rec,
                                           l_num_nf,0,l_num_nf,
                                           p_nf_sup.dat_entrada_nf,
                                           p_val_imposto,
                                           p_nf_sup.val_tot_nf_d,
                                           "SUP3760") THEN
                   END IF

                END IF

             END IF

          END IF

          CALL sup376_verifica_frete()
          CALL sup376_gera_movimento_estoque("NORMAL","ASSUMIR")

       END IF

       IF l_usr_aut_libr_erro = TRUE THEN

          CALL sup1473_integra_nf_cap_livro_fiscal(p_nf_sup.num_nf,
                                                   p_nf_sup.ser_nf,
                                                   p_nf_sup.ssr_nf,
                                                   "NOTA","", "", "",
                                                   p_nf_sup.cod_empresa, "",
                                                   p_nf_sup.cod_fornecedor,
                                                   p_nf_sup.ies_especie_nf)


          IF NOT supr6_contabilizacao_por_documento(p_nf_sup.cod_empresa,
                                                    p_nf_sup.num_nf,
                                                    p_nf_sup.ser_nf,
                                                    p_nf_sup.ssr_nf,
                                                    p_nf_sup.ies_especie_nf,
                                                    p_nf_sup.cod_fornecedor,
                                                    p_nf_sup.dat_entrada_nf,
                                                    p_nf_sup.num_aviso_rec,FALSE) THEN
             CALL log0030_mensagem("Ocorreram erros na contabilização do documento.","exclamation")
          END IF

          IF m_num_prog_arg <> "SUP0480X" THEN
             INITIALIZE p_msg TO NULL
             LET p_msg = " ERROS ASSUMIDOS POR:  ", p_nf_sup.nom_resp_aceite_er CLIPPED
             CALL log0030_mensagem(p_msg,"info")
          END IF

       END IF

    ELSE
       CALL log0030_mensagem(" Usuário não autorizado a assumir erros da nota fiscal. ","exclamation")
    END IF

 END IF

 END FUNCTION

#-------------------------------------#
 FUNCTION sup3760_botao_zoom(l_status,
                             l_linha,
                             l_coluna)
#-------------------------------------#
 DEFINE l_status     CHAR(03),
        l_linha      SMALLINT,
        l_coluna     SMALLINT

 IF l_status = 'ON' THEN
    IF g_ies_grafico THEN
       --# CALL fgl_dialog_setkeylabel('Control-Z','Zoom')
    ELSE
       DISPLAY "( Zoom )" AT l_linha,l_coluna
    END IF
 ELSE
    IF g_ies_grafico THEN
       --# CALL fgl_dialog_setkeylabel('Control-Z','')
    ELSE
       DISPLAY "--------" AT l_linha,l_coluna
    END IF
 END IF
 END FUNCTION

#-----------------------------------------------------#
 FUNCTION sup3760_mostra_nf_transito(l_cod_fornecedor)
#-----------------------------------------------------#

  DEFINE l_cod_fornecedor  LIKE fornecedor.cod_fornecedor,
         l_ind             SMALLINT,
         l_arr_curr        SMALLINT

  DEFINE la_nf_transito    ARRAY[500] OF RECORD
                             dat_emis_nf LIKE nf_sup.dat_emis_nf,
                             num_nf      LIKE nf_sup.num_nf,
                             ser_nf      LIKE nf_sup.ser_nf,
                             ssr_nf      LIKE nf_sup.ssr_nf
                           END RECORD

  DEFINE la_ies_especie_nf ARRAY[500] OF LIKE nf_sup.ies_especie_nf

  INITIALIZE la_nf_transito, la_ies_especie_nf, l_ind TO NULL

  IF  g_cod_forn_sup3850 IS NOT NULL
  AND g_cod_forn_sup3850 <> " " THEN
     LET p_dados_tela.cod_fornecedor = l_cod_fornecedor
  END IF

  LET int_flag = FALSE

  WHENEVER ERROR CONTINUE
   DECLARE cq_nf_transito CURSOR FOR
    SELECT dat_emis_nf, num_nf, ser_nf, ssr_nf, ies_especie_nf
      FROM nf_sup
     WHERE cod_empresa       = p_cod_empresa
       AND cod_fornecedor    = l_cod_fornecedor
       AND ies_nf_aguard_nfe = "7"
     ORDER BY dat_emis_nf
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF sqlca.sqlcode <> 100 THEN
        CALL log003_err_sql("DECLARE","NF_SUP")
     END IF

     RETURN FALSE
  ELSE
     LET l_ind = 1

     WHENEVER ERROR CONTINUE
      FOREACH cq_nf_transito INTO la_nf_transito[l_ind].*, la_ies_especie_nf[l_ind]
         IF sqlca.sqlcode <> 0 THEN
            IF sqlca.sqlcode <> 100 THEN
               CALL log003_err_sql("FOREACH CURSOR","CQ_POCESSAR")
            END IF

            RETURN FALSE
         END IF

         LET l_ind = l_ind + 1
         IF l_ind > 500 THEN
            EXIT FOREACH
         END IF
      END FOREACH
     WHENEVER ERROR STOP

     LET l_ind = l_ind - 1

     IF l_ind > 0 THEN
        CALL log130_procura_caminho("sup3760i") RETURNING comando3
        OPEN WINDOW w_sup3760i AT 7,20 WITH FORM comando3
          ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, COMMENT LINE LAST)


        CALL set_count(l_ind)
        DISPLAY ARRAY la_nf_transito TO sr_nf_transito.*

        LET l_arr_curr = arr_curr()

        CLOSE WINDOW w_sup3760i

        CURRENT WINDOW IS w_sup37601

        IF int_flag THEN
           RETURN FALSE
        ELSE
           IF sup3760_carrega_dados_nf_transito(la_nf_transito[l_arr_curr].*,
                                                la_ies_especie_nf[l_arr_curr],
                                                l_cod_fornecedor) THEN
              RETURN TRUE
           ELSE
              RETURN FALSE
           END IF
        END IF
     END IF
  END IF

  FREE cq_nf_transito

  RETURN FALSE

END FUNCTION

#------------------------------------------------------------#
 FUNCTION sup3760_carrega_dados_nf_transito(lr_nf_transito,
                                            l_ies_especie_nf,
                                            l_cod_fornecedor)
#------------------------------------------------------------#

  DEFINE lr_nf_transito   RECORD
                            dat_emis_nf LIKE nf_sup.dat_emis_nf,
                            num_nf      LIKE nf_sup.num_nf,
                            ser_nf      LIKE nf_sup.ser_nf,
                            ssr_nf      LIKE nf_sup.ssr_nf
                          END RECORD

  DEFINE l_ies_especie_nf LIKE nf_sup.ies_especie_nf,
         l_cod_fornecedor LIKE nf_sup.cod_fornecedor

  WHENEVER ERROR CONTINUE
    SELECT UNIQUE nf_sup.num_aviso_rec,
           nf_sup.num_nf,
           nf_sup.ser_nf,
           nf_sup.ssr_nf,
           nf_sup.ies_especie_nf,
           nf_sup.ies_nf_aguard_nfe,
           nf_sup.cod_operacao,
           nf_sup.dat_emis_nf,
           nf_sup.dat_entrada_nf,
           nf_sup.cnd_pgto_nf,
           nf_sup.cod_mod_embar,
           aviso_rec_compl.cod_fiscal_compl
      INTO p_dados_tela.num_aviso_rec,
           p_dados_tela.num_nf,
           p_dados_tela.ser_nf,
           p_dados_tela.ssr_nf,
           p_dados_tela.ies_especie_nf,
           p_dados_tela.ies_nf_aguard_nfe,
           p_dados_tela.cod_operacao,
           p_dados_tela.dat_emis_nf,
           p_dados_tela.dat_entrada_nf,
           p_dados_tela.cnd_pgto_nf,
           p_dados_tela.cod_mod_embar,
           p_dados_tela.cod_fiscal_compl
      FROM nf_sup, aviso_rec, aviso_rec_compl
     WHERE nf_sup.cod_empresa            = p_cod_empresa
       AND nf_sup.num_nf                 = lr_nf_transito.num_nf
       AND nf_sup.ser_nf                 = lr_nf_transito.ser_nf
       AND nf_sup.ssr_nf                 = lr_nf_transito.ssr_nf
       AND nf_sup.ies_especie_nf         = l_ies_especie_nf
       AND nf_sup.cod_fornecedor         = l_cod_fornecedor
       AND nf_sup.cod_empresa            = aviso_rec.cod_empresa
       AND nf_sup.num_aviso_rec          = aviso_rec.num_aviso_rec
       AND aviso_rec_compl.cod_empresa   = aviso_rec.cod_empresa
       AND aviso_rec_compl.num_aviso_rec = aviso_rec.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("SELECT","NF_SUP")
     RETURN FALSE
  END IF

  LET m_nf_aguard_nfe_ant = p_dados_tela.ies_nf_aguard_nfe
  CALL sup3760_exibe_dados_nf_transito()

  LET g_modifica_nf_transito = TRUE

  IF int_flag THEN
     CLEAR FORM
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF

END FUNCTION

#------------------------------------------#
 FUNCTION sup3760_exibe_dados_nf_transito()
#------------------------------------------#

  LET p_dados_tela.cod_empresa = p_cod_empresa

  CALL sup376_verifica_impostos_informados()
     RETURNING p_dados_tela.ies_impostos

  IF p_ies_cod_operac = "S" THEN
     INITIALIZE p_dados_tela.cod_operac_estoq TO NULL

     WHENEVER ERROR CONTINUE
       SELECT cod_operacao
         INTO p_dados_tela.cod_operac_estoq
         FROM aviso_rec_compl
        WHERE aviso_rec_compl.cod_empresa   = p_cod_empresa
          AND aviso_rec_compl.num_aviso_rec = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("SELECT","AVISO_REC_COMPL")
     END IF
  END IF

  DISPLAY BY NAME p_dados_tela.num_aviso_rec
  DISPLAY BY NAME p_dados_tela.num_nf
  DISPLAY BY NAME p_dados_tela.ser_nf
  DISPLAY BY NAME p_dados_tela.ssr_nf
  DISPLAY BY NAME p_dados_tela.ies_especie_nf
  DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
  DISPLAY BY NAME p_dados_tela.cod_operac_estoq
  DISPLAY BY NAME p_dados_tela.cod_operacao
  DISPLAY BY NAME p_dados_tela.dat_emis_nf
  DISPLAY BY NAME p_dados_tela.dat_entrada_nf
  DISPLAY BY NAME p_dados_tela.cnd_pgto_nf
  DISPLAY BY NAME p_dados_tela.cod_mod_embar
  DISPLAY BY NAME p_dados_tela.cod_fiscal_compl
  DISPLAY BY NAME p_dados_tela.ies_impostos

  CALL sup376_exibe_array()

END FUNCTION

#-------------------------------------------#
 FUNCTION sup3760_busca_den_item(l_cod_item)
#-------------------------------------------#

  DEFINE l_cod_item LIKE item.cod_item

  WHENEVER ERROR CONTINUE
    SELECT den_item
      INTO m_den_item
      FROM item
     WHERE cod_empresa = p_cod_empresa
       AND cod_item    = l_cod_item
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("SELECT","ITEM")
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF

END FUNCTION

#------------------------------------------------#
 FUNCTION sup3760_grava_ind_nfp_incl_apos_encerr()
#------------------------------------------------#

 WHENEVER ERROR CONTINUE
 INSERT INTO sup_par_ar (empresa,
                         aviso_recebto,
                         seq_aviso_recebto,
                         parametro,
                         par_ind_especial,
                         parametro_texto,
                         parametro_val,
                         parametro_dat)
                         VALUES
                        (p_dados_tela.cod_empresa,
                         p_dados_tela.num_aviso_rec,
                         0,
                         "nfp_incl_apos_encerr",
                         "S",
                         NULL,
                         NULL,
                         TODAY)
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("INCLUSÃO","SUP_PAR_AR")
    RETURN FALSE
 ELSE
    RETURN TRUE
 END IF

 END FUNCTION

#--------------------------------------------------------------#
 FUNCTION sup3760_verifica_nfp_incl_apos_encerr(l_cod_empresa,
                                                l_num_aviso_rec)
#--------------------------------------------------------------#
 DEFINE l_cod_empresa    LIKE sup_par_ar.empresa,
        l_num_aviso_rec  LIKE sup_par_ar.aviso_recebto

 WHENEVER ERROR CONTINUE
 SELECT sup_par_ar.empresa
   FROM sup_par_ar
  WHERE sup_par_ar.empresa           = l_cod_empresa
    AND sup_par_ar.aviso_recebto     = l_num_aviso_rec
    AND sup_par_ar.seq_aviso_recebto = 0
    AND sup_par_ar.parametro         = "nfp_incl_apos_encerr"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    RETURN TRUE
 ELSE
    IF sqlca.sqlcode <> NOTFOUND THEN
       CALL log003_err_sql("LEITURA","SUP_PAR_AR")
    END IF
    RETURN FALSE
 END IF

 END FUNCTION

#------------------------------------#
 FUNCTION sup3760_ver_nota_duplicada()
#------------------------------------#
DEFINE l_cod_empresa_aux LIKE nf_sup.cod_empresa,
       l_msg             CHAR(60),
       l_num_cgc         LIKE fornecedor.num_cgc_cpf,
       l_status          SMALLINT

  IF p_dados_tela.ies_especie_nf <> 'NFE' THEN # OS 554725 Se não for NFE não permite incluir nota fiscal duplicada em empresas diferentes, mesmo que o parâmetro esteja setado com 'S'.
     LET m_permite_ent_mesma_nfe_emp_dif = 'N'
  END IF

  IF m_permite_transf_duplicada_emp = "N" THEN #600670
     WHENEVER ERROR CONTINUE
      DECLARE cq_empresa CURSOR FOR
       SELECT UNIQUE nf_sup.cod_empresa
         FROM nf_sup
        WHERE nf_sup.cod_empresa     <> p_cod_empresa
          AND nf_sup.num_nf          = p_dados_tela.num_nf
          #AND nf_sup.ies_especie_nf  = p_dados_tela.ies_especie_nf #A88484
          AND nf_sup.ser_nf          = p_dados_tela.ser_nf
          AND nf_sup.ssr_nf          = p_dados_tela.ssr_nf
          AND nf_sup.cod_fornecedor  = p_dados_tela.cod_fornecedor
     WHENEVER ERROR STOP

     IF sqlca.sqlcode  = 0 THEN

        WHENEVER ERROR CONTINUE
         FOREACH cq_empresa INTO l_cod_empresa_aux
        WHENEVER ERROR STOP
           IF sqlca.sqlcode = 0 THEN
              LET l_msg = "Nota fiscal já cadastrada na empresa ",l_cod_empresa_aux
              CALL log0030_mensagem(l_msg, "info")
              RETURN TRUE
           END IF
        END FOREACH
     END IF

     FREE cq_empresa
  ELSE
     IF m_permite_ent_mesma_nfe_emp_dif = "N" AND p_dados_tela.ies_especie_nf = 'NFE' THEN #600670
        WHENEVER ERROR CONTINUE
         DECLARE cq_empresa1 CURSOR FOR
          SELECT UNIQUE nf_sup.cod_empresa
            FROM nf_sup
           WHERE nf_sup.cod_empresa     <> p_cod_empresa
             AND nf_sup.num_nf          = p_dados_tela.num_nf
             #AND nf_sup.ies_especie_nf  = p_dados_tela.ies_especie_nf #A88484
             AND nf_sup.ser_nf          = p_dados_tela.ser_nf
             AND nf_sup.ssr_nf          = p_dados_tela.ssr_nf
             AND nf_sup.cod_fornecedor  = p_dados_tela.cod_fornecedor
        WHENEVER ERROR STOP

        IF sqlca.sqlcode  = 0 THEN

           WHENEVER ERROR CONTINUE
            FOREACH cq_empresa1 INTO l_cod_empresa_aux
           WHENEVER ERROR STOP
              IF sqlca.sqlcode = 0 THEN
                 LET l_msg = "Nota fical já cadastrada na empresa ",l_cod_empresa_aux
                 CALL log0030_mensagem(l_msg, "info")
                 RETURN TRUE
              END IF
           END FOREACH
        END IF

        FREE cq_empresa1
     ELSE

        INITIALIZE l_status TO NULL
        CALL sup3762_busca_num_cgc_cpf_fornecedor(p_dados_tela.cod_fornecedor)RETURNING l_num_cgc,l_status
        IF l_status = FALSE THEN
           INITIALIZE l_num_cgc TO NULL
        END IF

        IF NOT sup3760_verifica_fornec_emp(l_num_cgc) THEN
           WHENEVER ERROR CONTINUE
            DECLARE cq_empresa2 CURSOR FOR
             SELECT UNIQUE nf_sup.cod_empresa
               FROM nf_sup
              WHERE nf_sup.cod_empresa     <> p_cod_empresa
                AND nf_sup.num_nf          = p_dados_tela.num_nf
                #AND nf_sup.ies_especie_nf  = p_dados_tela.ies_especie_nf #A88484
                AND nf_sup.ser_nf          = p_dados_tela.ser_nf
                AND nf_sup.ssr_nf          = p_dados_tela.ssr_nf
                AND nf_sup.cod_fornecedor  = p_dados_tela.cod_fornecedor
           WHENEVER ERROR STOP

           IF sqlca.sqlcode  = 0 THEN

              WHENEVER ERROR CONTINUE
               FOREACH cq_empresa2 INTO l_cod_empresa_aux
              WHENEVER ERROR STOP
                 IF sqlca.sqlcode = 0 THEN
                    LET l_msg = "Nota fiscal já cadastrada na empresa ",l_cod_empresa_aux
                    CALL log0030_mensagem(l_msg, "info")
                    RETURN TRUE
                 END IF
              END FOREACH

              FREE cq_empresa2
           END IF
        END IF
     END IF
  END IF
 RETURN FALSE

 END FUNCTION

#----------------------------------------------------------------------------------------------#
 FUNCTION sup3760_atualiza_nota(l_cod_empresa, l_num_nf, l_ser_nf, l_ssr_nf, l_cod_fornecedor,
                                l_num_aviso_rec, l_cnd_pgto_nf)
#----------------------------------------------------------------------------------------------#
 # OS 485.525
 DEFINE l_cod_empresa       LIKE empresa.cod_empresa,
        l_empresa           LIKE empresa.cod_empresa,
        l_num_nf            LIKE nf_sup.num_nf,
        l_ser_nf            LIKE nf_sup.ser_nf,
        l_ssr_nf            LIKE nf_sup.ssr_nf,
        l_cod_fornecedor    LIKE nf_sup.cod_fornecedor,
        l_num_aviso_rec     LIKE nf_sup.num_aviso_rec,
        l_cnd_pgto_nf       LIKE nf_sup.cnd_pgto_nf,
        l_ies_pagamento     LIKE cond_pgto_cap.ies_pagamento,
        l_ies_incl_cap      LIKE nf_sup.ies_incl_cap

 WHENEVER ERROR CONTINUE
 SELECT ies_pagamento
   INTO l_ies_pagamento
   FROM cond_pgto_cap
  WHERE cnd_pgto = l_cnd_pgto_nf
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 0 AND l_ies_pagamento = "3" THEN
    WHENEVER ERROR CONTINUE
     SELECT cod_empresa_destin
       INTO l_empresa
       FROM emp_orig_destino
      WHERE cod_empresa_orig = l_cod_empresa
    WHENEVER ERROR STOP

    IF sqlca.sqlcode = 100 THEN
       LET l_empresa = l_cod_empresa
    END IF

    {Utilizar o conceito de empresa origem / destino - cap1010}
    WHENEVER ERROR CONTINUE
    SELECT num_ad
      FROM ad_mestre
     WHERE cod_empresa    = l_empresa
       AND num_nf         = l_num_nf
       AND cod_fornecedor = l_cod_fornecedor
       AND ser_nf         = l_ser_nf
       AND ssr_nf         = l_ssr_nf
    WHENEVER ERROR STOP

    #IF sqlca.sqlcode = 100 THEN
    #   LET l_ies_incl_cap = "N"
    #ELSE
    #   LET l_ies_incl_cap = "S"
    #END IF
    IF sqlca.sqlcode = 0 THEN
       LET l_ies_incl_cap = "S"
    ELSE
       LET l_ies_incl_cap = "N"
    END IF

    WHENEVER ERROR CONTINUE
     UPDATE nf_sup
        SET ies_incl_cap  = l_ies_incl_cap
      WHERE cod_empresa   = l_cod_empresa
        AND num_aviso_rec = l_num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("UPDATE","NF_SUP")
              END IF
           END IF

 END FUNCTION

#--------------------------------------------#
 FUNCTION sup3760_mostra_conhec_sup_frete_x()
#--------------------------------------------#
 DEFINE l_conhec LIKE sup_frete_x_nf_entrada.conhec,
        l_coluna SMALLINT,
        l_linha  CHAR(37),
        l_inicio CHAR(03)

 WHENEVER ERROR CONTINUE
 DECLARE cq_argum_sup_frete_x CURSOR FOR
 SELECT UNIQUE conhec
   FROM sup_frete_x_nf_entrada
  WHERE sup_frete_x_nf_entrada.empresa       = p_cod_empresa
    AND sup_frete_x_nf_entrada.aviso_recebto = p_dados_tela.num_aviso_rec #roberta p_nf_sup.num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","SUP_FRETE_X_NF_ENTRADA")
 END IF
 INITIALIZE l_conhec TO NULL

 LET l_coluna = 42
 INITIALIZE l_linha TO NULL

 WHENEVER ERROR CONTINUE
 FOREACH cq_argum_sup_frete_x INTO l_conhec
 WHENEVER ERROR STOP

    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_ARGUM_SUP_FRETE_X")
    END IF

    IF l_conhec IS NOT NULL THEN
        #DISPLAY " ",l_conhec," " AT 19,l_coluna ATTRIBUTE(REVERSE)
        IF l_linha IS NULL THEN
           LET l_linha = l_conhec CLIPPED
        ELSE
           LET l_linha = l_linha CLIPPED, l_conhec CLIPPED
        END IF
    END IF

    #LET l_coluna = l_coluna + 8
 END FOREACH

 LET l_inicio = "   "
 DISPLAY l_inicio  AT 19,42 ATTRIBUTE(REVERSE)
 DISPLAY l_linha AT 19,45 ATTRIBUTE(REVERSE)

 FREE cq_argum_sup_frete_x

 END FUNCTION

#---------------------------------------#
 FUNCTION sup3760_informa_peso()
#---------------------------------------#

  IF m_informa_peso_entrada_nf = "S" THEN
     IF m_funcao = "INCLUSAO"  THEN
        INITIALIZE m_peso_nf TO NULL
     END IF

     CALL log130_procura_caminho("sup3760j") RETURNING comando3
     OPEN WINDOW w_sup3760j AT 07,13 WITH FORM comando3
      ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST)

     CALL log006_exibe_teclas("01,02,07", p_versao)
       CURRENT WINDOW IS w_sup3760j

     LET int_flag = 0

     DISPLAY BY NAME m_peso_nf

     INPUT BY NAME m_peso_nf WITHOUT DEFAULTS

        AFTER FIELD m_peso_nf
          IF m_peso_nf IS NULL OR
             m_peso_nf = " " THEN
             IF log0040_confirm(10,25,"Peso da nota fiscal não informado. Deseja continuar?") = TRUE THEN
                CALL sup3760_insere_peso_nf()
                EXIT INPUT
                RETURN FALSE
             ELSE
                NEXT FIELD m_peso_nf
             END IF
          ELSE
           CALL sup3760_insere_peso_nf()
          END IF

          ON KEY (f1, control-w)
             #lds IF NOT LOG_logix_versao5() THEN
             #lds CONTINUE INPUT
             #lds END IF
             CALL sup376_help()
     END INPUT

     CLOSE WINDOW w_sup3760j
  ELSE
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#---------------------------------------#
 FUNCTION sup3760_insere_peso_nf()
#---------------------------------------#
  DEFINE l_commit SMALLINT

  LET l_commit = TRUE

  WHENEVER ERROR CONTINUE
      CALL log085_transacao("BEGIN")
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("BEGIN","SUP_PAR_AR")
    RETURN
  END IF

  IF m_funcao = ("INCLUSAO") THEN
     WHENEVER ERROR CONTINUE
      INSERT INTO sup_par_ar(empresa,
                             aviso_recebto,
                             seq_aviso_recebto,
                             parametro,
                             par_ind_especial,
                             parametro_texto,
                             parametro_val,
                             parametro_dat)
                     VALUES (p_cod_empresa,
                             p_dados_tela.num_aviso_rec,
                             "1",
                             "peso_entrada_nf",
                             NULL,
                             p_user,
                             m_peso_nf,
                             TODAY)
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
         LET l_commit = FALSE
         CALL log003_err_sql("INSERT","SUP_PAR_AR")
     END IF
  ELSE
     IF m_funcao = ("MODIFICACAO") THEN
        WHENEVER ERROR CONTINUE
          SELECT empresa
            FROM sup_par_ar
           WHERE empresa           = p_cod_empresa
             AND aviso_recebto     = p_dados_tela.num_aviso_rec
             AND seq_aviso_recebto = "1"
             AND parametro         = "peso_entrada_nf"
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 100 THEN
           WHENEVER ERROR CONTINUE
             INSERT INTO sup_par_ar(empresa,
                                    aviso_recebto,
                                    seq_aviso_recebto,
                                    parametro,
                                    par_ind_especial,
                                    parametro_texto,
                                    parametro_val,
                                    parametro_dat)
                            VALUES (p_cod_empresa,
                                    p_dados_tela.num_aviso_rec,
                                    "1",
                                    "peso_entrada_nf",
                                    NULL,
                                    p_user,
                                    m_peso_nf,
                                    TODAY)
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
               LET l_commit = FALSE
               CALL log003_err_sql("INSERT","SUP_PAR_AR")
           END IF
        ELSE
           IF sqlca.sqlcode = 0 THEN
              WHENEVER ERROR CONTINUE
                UPDATE sup_par_ar
                   SET parametro_texto = p_user,
                       parametro_val   = m_peso_nf,
                       parametro_dat   = TODAY
                 WHERE empresa           = p_cod_empresa
                   AND aviso_recebto     = p_dados_tela.num_aviso_rec
                   AND seq_aviso_recebto = "1"
                   AND parametro         = "peso_entrada_nf"
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                  LET l_commit = FALSE
                  CALL log003_err_sql("UPDATE","SUP_PAR_AR")
              END IF
           END IF
        END IF
     END IF
  END IF

  IF l_commit = TRUE THEN
     WHENEVER ERROR CONTINUE
         CALL log085_transacao("COMMIT")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
         CALL log003_err_sql("COMMIT","SUP_PAR_AR")
         CALL log085_transacao("ROLLBACK") #OS596059
     END IF
  ELSE
     WHENEVER ERROR CONTINUE
       CALL log085_transacao("ROLLBACK")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("ROLLBACK","SUP_PAR_AR")
     END IF

  END IF


 END FUNCTION

#---------------------------------------#
 FUNCTION sup3760_busca_peso_nf()
#---------------------------------------#

  IF m_informa_peso_entrada_nf = "S" THEN
     WHENEVER ERROR CONTINUE
       SELECT parametro_val
         INTO m_peso_nf
         FROM sup_par_ar
        WHERE empresa           = p_cod_empresa
          AND aviso_recebto     = p_dados_tela.num_aviso_rec
          AND seq_aviso_recebto = "1"
          AND parametro         = "peso_entrada_nf"
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        INITIALIZE m_peso_nf TO NULL
        DISPLAY "                           "  AT 21,02
     ELSE
        IF m_peso_nf IS NOT NULL AND
           m_peso_nf <> " " THEN

           DISPLAY "Peso NF: ", m_peso_nf ," "  AT 21,02 ATTRIBUTE(REVERSE)
        ELSE
           INITIALIZE m_peso_nf TO NULL

           DISPLAY "                          "  AT 21,02
        END IF

     END IF

  END IF

 END FUNCTION

#-----------------------------------#
 FUNCTION sup3760_verifica_insp_nfr()
#-----------------------------------#

 IF  (p_dados_tela.ies_especie_nf      = "NFR" OR
      p_dados_tela.ies_especie_nf      = "NFE")    #Toda NFR tipo X (Devolucao de Consignacao)
 AND p_dados_tela.ies_nf_aguard_nfe = "X"      #Deve ter a inspecao informada (chamada atraves do sup0530/sup0331
 AND p_aviso_rec.ies_item_estoq     = "N" THEN #Ou informada manualmente
    LET p_aviso_rec.ies_liberacao_insp = "N"
    LET p_aviso_rec.ies_situa_ar       = "I"
    LET p_aviso_rec.qtd_liber          = 0
    LET p_aviso_rec.qtd_liber_excep    = 0
    LET p_aviso_rec.qtd_rejeit         = 0

    IF p_aviso_rec.ies_liberacao_cont = "S" THEN
       IF p_aviso_rec.qtd_recebida = 0 THEN
          LET p_aviso_rec.qtd_recebida = p_aviso_rec.qtd_declarad_nf
       END IF
    END IF

    LET m_controles   = " "

    CALL sup0063_verifica_controles(1, p_aviso_rec.cod_item, "INCLUSAO","SUP3760") RETURNING m_controles

    IF m_controles <> " " THEN                  #Todo item com controle de dimensional deve ter a
       LET p_aviso_rec.ies_liberacao_cont = "N" #contagem efetuada manualmente SUP8740
       LET p_aviso_rec.ies_situa_ar       = "C"
       LET p_aviso_rec.qtd_recebida       = 0
    END IF

 END IF

 #-- OS 737190 inicio --#
 IF find4GLFunction('supy160_cliente_318')THEN
    IF supy160_nota_nfr_tipo_a(p_cod_empresa, p_aviso_rec.num_aviso_rec) THEN
       LET p_aviso_rec.ies_situa_ar       = "I"
       LET p_aviso_rec.ies_liberacao_insp = "N"
    END IF
 END IF
 #-- OS 737190 fim --#
 END FUNCTION

#--------------------------#
 FUNCTION sup3760_fretes()
#--------------------------#


MENU "OPCAO"

    COMMAND KEY ("T")"freTe" "Manutencao dos dados do frete "
      HELP 021
      MESSAGE ""
      DISPLAY "                                                                               " AT 19,01
      DISPLAY "                                                             "  AT 9,11
      IF p_nf_sup.num_conhec <> 0 THEN
         CALL log120_procura_caminho(m_prog_conhec_frete) RETURNING comando3
         IF p_nf_sup.ser_conhec IS NULL OR
            p_nf_sup.ser_conhec = " " THEN
            LET p_nf_sup.ser_conhec = "@"
         END IF
         LET comando3 = comando3 CLIPPED, " ", p_cod_empresa, " ",
                                               p_nf_sup.num_conhec, " ",
                                               p_nf_sup.ser_conhec, " ",
                                               p_nf_sup.ssr_conhec, " ",
                                               p_nf_sup.cod_transpor, " ",
                                               "sup3760"," ", 0, 0, " ",0, " ",0
         RUN comando3 RETURNING p_cancel
         IF p_nf_sup.ser_conhec = "@" THEN
            LET p_nf_sup.ser_conhec = " "
         END IF
      ELSE
         CALL log120_procura_caminho(m_prog_conhec_frete) RETURNING comando3
         LET comando3 = comando3 CLIPPED
         RUN comando3 RETURNING p_cancel
      END IF
      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)

      #A27360#
      IF p_nf_sup.num_conhec = 0 THEN
         IF find4GLFunction('supy13_busca_conhec') = TRUE THEN
            CALL supy13_busca_conhec(p_cod_empresa,
                                     p_nf_sup.num_aviso_rec)
                           RETURNING p_nf_sup.cod_transpor,
                                     p_nf_sup.num_conhec,
                                     p_nf_sup.ser_conhec,
                                     p_nf_sup.ssr_conhec
         END IF
      END IF
      #---fim--- A27360#

      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
         DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF

    COMMAND KEY ("+")"+-frete_cesta" "Manutencao dos dados do frete CIF."
      HELP 022
      MESSAGE ""
      DISPLAY "                                                                               " AT 19,01
      DISPLAY "                                                             "  AT 9,11

      #--inicio--OS 728028 #
      IF find4GLFunction('supy13_busca_conhec') = TRUE THEN
         CALL supy13_busca_conhec(p_cod_empresa,
                                  p_nf_sup.num_aviso_rec)
                        RETURNING p_nf_sup.cod_transpor,
                                  p_nf_sup.num_conhec,
                                  p_nf_sup.ser_conhec,
                                  p_nf_sup.ssr_conhec

      END IF

      CALL log120_procura_caminho("sup3430") RETURNING comando3
      LET comando3 = comando3 CLIPPED, " ",
                     p_nf_sup.cod_transpor, " ",#728028
                     p_nf_sup.num_conhec, " ",
                     p_nf_sup.ser_conhec, " ",
                     p_nf_sup.ssr_conhec, " ",
                     p_nf_sup.num_aviso_rec, " ",
                     "SUP3760"
      RUN comando3 RETURNING p_cancel


      CALL log006_exibe_teclas("01", p_versao)
      CURRENT WINDOW IS w_sup37601
      DISPLAY " Nr. Itens: ", p_tot_itens ," "  AT 19,02 ATTRIBUTE(REVERSE)

      IF p_nf_sup.num_conhec <> 0 THEN
         DISPLAY " Conhecimento: ",p_nf_sup.num_conhec," " AT 19,20 ATTRIBUTE(REVERSE)
         CALL sup3760_mostra_conhec_sup_frete_x()
      END IF
      #---fim----OS 728028 #


      CALL sup376_consulta_dados()
      IF p_ies_canc = TRUE THEN
          DISPLAY " NOTA FISCAL CANCELADA " AT 19,50 ATTRIBUTE(REVERSE)
      END IF

    COMMAND KEY("R")  "Fretes_relacionados"  "Consulta fretes relacionados"
      HELP 017
      MESSAGE ""
      IF p_dados_tela.num_aviso_rec IS NOT NULL THEN
         CALL log120_procura_caminho("sup1571") RETURNING comando3
         LET comando3 = comando3 CLIPPED, " ",p_cod_empresa, " ", p_dados_tela.num_aviso_rec, " ", "0", " sup3760"
         RUN comando3 RETURNING p_cancel
         LET p_cancel = p_cancel / 256
      ELSE
         CALL log0030_mensagem(" Consulte previamente para executar esta funcao", "info")
      END IF


    COMMAND "Fim" "Retorna ao Menu Anterior"
      HELP 008
      EXIT MENU



  #lds COMMAND KEY ("F11") "Sobre" "Informações sobre a aplicação (F11)."
  #lds CALL LOG_info_sobre(sourceName(),p_versao)

  END MENU


END FUNCTION

#----------------------------------------------#
 FUNCTION sup3760_verifica_fornec_emp(l_num_cgc)
#----------------------------------------------#
 DEFINE l_num_cgc      LIKE fornecedor.num_cgc_cpf

 WHENEVER ERROR CONTINUE
 SELECT cod_empresa
   FROM empresa
  WHERE num_cgc = l_num_cgc
    AND cod_empresa <> p_cod_empresa
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 0
 OR sqlca.sqlcode = -284 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

#-------------------------------#
 FUNCTION sup3760_relaciona_nf()
#-------------------------------#

  IF p_dados_tela.num_aviso_rec IS NULL
  OR p_dados_tela.num_aviso_rec = " " THEN
     CALL log0030_mensagem("Consulte previamente para executar esta função.", "info")
     RETURN
  END IF

  CALL log006_exibe_teclas("01", p_versao)

  CALL log130_procura_caminho("sup3760k") RETURNING m_comando
  OPEN WINDOW w_sup3760k AT 2,2 WITH FORM m_comando
    ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, COMMENT LINE LAST)

  CALL sup3760_busca_num_ar_relac()

  MENU "OPÇÃO"
    COMMAND "Incluir" "Inclui relacionamento entre NF's."
      HELP 001
      MESSAGE ""
      IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","IN") THEN
         IF NOT sup3760_verifica_nf_sup_erro(p_dados_tela.num_aviso_rec) THEN
            CALL log0030_mensagem("AR não possue erro de CFOP serviço/retorno simbolico.","info")
         ELSE
            CALL sup3760_inclusao_nf_relac()
            EXIT MENU

            CLEAR FORM
            CLOSE WINDOW w_sup3760k
         END IF
      END IF

    COMMAND "Excluir" "Permite excluir os relacionamento entre as NF's."
      HELP 003
      MESSAGE ""
      IF log005_seguranca(p_user,"SUPRIMEN","SUP3760","EX") THEN
         IF m_num_ar_relac IS NULL THEN
            CALL log0030_mensagem("AR não possue relacionamento para ser excluido.","info")
         ELSE
            IF sup3760_excluir_relacionamento_ar() THEN
               EXIT MENU

               CLEAR FORM
               CLOSE WINDOW w_sup3760k
            END IF
         END IF
      END IF

    COMMAND KEY ("!")
      PROMPT "Digite o comando: " FOR m_comando
      RUN m_comando
      PROMPT "Tecle ENTER para continuar" FOR CHAR m_comando

    COMMAND "Fim" "Retorna ao menu anterior."
      HELP 008
      MESSAGE ""
      EXIT MENU
  END MENU

  CLEAR FORM
  CLOSE WINDOW w_sup3760k

END FUNCTION

#------------------------------------#
 FUNCTION sup3760_inclusao_nf_relac()
#------------------------------------#

  DEFINE l_comando CHAR(100)

  IF sup3760_entrada_dados_nf_relac() THEN
     WHENEVER ERROR CONTINUE
         CALL log085_transacao("BEGIN")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("BEGIN","INCLUSAO")
        RETURN
     END IF

     WHENEVER ERROR CONTINUE
       INSERT INTO sup_par_ar(empresa,
                              aviso_recebto,
                              seq_aviso_recebto,
                              parametro,
                              par_ind_especial,
                              parametro_texto,
                              parametro_val,
                              parametro_dat)
       VALUES (p_cod_empresa,
               p_dados_tela.num_aviso_rec,
               1,
               "final_cfop", " ", " ",
               m_num_ar_relac, " ")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 THEN
        WHENEVER ERROR CONTINUE
          INSERT INTO sup_par_ar(empresa,
                                 aviso_recebto,
                                 seq_aviso_recebto,
                                 parametro,
                                 par_ind_especial,
                                 parametro_texto,
                                 parametro_val,
                                 parametro_dat)
          VALUES (p_cod_empresa,
                  m_num_ar_relac, 1,
                  "final_cfop", " ", " ",
                  p_dados_tela.num_aviso_rec, " ")
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 0 THEN
           WHENEVER ERROR CONTINUE
               CALL log085_transacao("COMMIT")
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("COMMIT","INCLUSAO")
              CALL log085_transacao("ROLLBACK") #OS596059
              RETURN
           ELSE
              MESSAGE "Inclusão efetuada com sucesso." ATTRIBUTE(REVERSE)

              CALL log120_procura_caminho("sup0680") RETURNING l_comando
              LET l_comando = l_comando CLIPPED," ",p_cod_empresa,
                                                " ",m_num_ar_relac,
                                                " S",
                                                " ",0
              RUN l_comando RETURNING p_cancel

              # Inicio chamado 835591
              IF NOT sup3760_insere_parametro_sup1544(p_dados_tela.num_aviso_rec) THEN
                 RETURN
              END IF
              # Fim chamado 835591

              ERROR " Aguarde... Efetuando consistencia da NF. "
              CALL log120_procura_caminho("sup0680") RETURNING l_comando
              LET l_comando = l_comando CLIPPED," ",p_cod_empresa,
                                                " ",p_dados_tela.num_aviso_rec,
                                                " S",
                                                " ",0
              RUN l_comando RETURNING p_cancel

              # Inicio chamado 835591
              IF NOT sup3760_elimina_parametro_sup1544(p_dados_tela.num_aviso_rec) THEN
                 RETURN
              END IF
              # Fim chamado 835591

              CALL obf3760_inclusao_obf_nf_eletr(p_dados_tela.*)

              ERROR " "

              WHENEVER ERROR CONTINUE
                SELECT COUNT(*)
                  INTO p_tem_erro
                  FROM nf_sup_erro
                 WHERE nf_sup_erro.empresa       = p_cod_empresa
                   AND nf_sup_erro.num_aviso_rec = p_dados_tela.num_aviso_rec
                   AND nf_sup_erro.ies_origem_erro <> "4"
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 OR p_tem_erro IS NULL THEN
                 LET p_tem_erro = 0
              END IF

              IF p_tem_erro > 0 THEN
                 CALL log0030_mensagem("Foram detectados erros na consistencia da Nota Fiscal ","exclamation")
                 #O.S. 529316
                 IF p_dados_tela.num_nf IS NOT NULL
                 AND m_abre_aut_tela_erros = "S" THEN
                    CALL sup376_busca_nf_sup(p_dados_tela.num_aviso_rec)
                    LET p_nom_resp_aceite_er = p_nf_sup.nom_resp_aceite_er
                    CALL sup377_zoom_erros(p_cod_empresa, p_dados_tela.num_aviso_rec, p_nom_resp_aceite_er)
                 END IF
                 #O.S. 529316
              ELSE
                 CALL log0030_mensagem("Não foram detectados erros na consistencia da Nota Fiscal ","exclamation")
              END IF

              DISPLAY p_dados_tela.num_aviso_rec TO m_num_ar
              DISPLAY BY NAME m_num_ar_relac
           END IF
        ELSE
           CALL log003_err_sql("INSERT","SUP_PAR_AR")

           WHENEVER ERROR CONTINUE
               CALL log085_transacao("ROLLBACK")
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("ROLLBACK","INCLUSAO")
           END IF

           RETURN
        END IF
     ELSE
        CALL log003_err_sql("INSERT","SUP_PAR_AR")

        WHENEVER ERROR CONTINUE
            CALL log085_transacao("ROLLBACK")
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("ROLLBACK","INCLUSAO")
        END IF

        RETURN
     END IF
  ELSE
     CLEAR FORM
     ERROR "Inclusão cancelada."
  END IF

END FUNCTION

#--------------------------------------------#
 FUNCTION sup3760_excluir_relacionamento_ar()
#--------------------------------------------#

  DEFINE l_comando CHAR(100)

  IF log0040_confirm(17,40,"Confirma a exclusão do registro?") THEN
     WHENEVER ERROR CONTINUE
         CALL log085_transacao("BEGIN")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("BEGIN","EXCLUIR_RELACIONAMENTO_AR")
        RETURN FALSE
     END IF

     WHENEVER ERROR CONTINUE
       DELETE FROM sup_par_ar
        WHERE empresa           = p_cod_empresa
          AND aviso_recebto     = p_dados_tela.num_aviso_rec
          AND seq_aviso_recebto = 1
          AND parametro         = "final_cfop"
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 THEN
        WHENEVER ERROR CONTINUE
          DELETE FROM sup_par_ar
           WHERE empresa           = p_cod_empresa
             AND aviso_recebto     = m_num_ar_relac
             AND seq_aviso_recebto = 1
             AND parametro         = "final_cfop"
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("DELETE","SUP_PAR_AR")

           WHENEVER ERROR CONTINUE
               CALL log085_transacao("ROLLBACK")
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("ROLLBACK","EXCLUIR_RELACIONAMENTO_AR")
           END IF

           RETURN FALSE
        ELSE
           WHENEVER ERROR CONTINUE
               CALL log085_transacao("COMMIT")
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log003_err_sql("COMMIT","EXCLUIR_RELACIONAMENTO_AR")
              CALL log085_transacao("ROLLBACK") #OS596059
              RETURN FALSE
           END IF

           MESSAGE "Exclusão efetuada com sucesso." ATTRIBUTE(REVERSE)
           CLEAR FORM

           IF sup3760_verifica_num_ar(m_num_ar_relac) THEN
              ERROR " Aguarde... Efetuando consistencia da NF. "
              CALL log120_procura_caminho("sup0680") RETURNING l_comando
              LET l_comando = l_comando CLIPPED," ",p_cod_empresa,
                                                " ",m_num_ar_relac,
                                                " S",
                                                " ",0
              RUN l_comando RETURNING p_cancel

              CALL obf3760_inclusao_obf_nf_eletr(p_dados_tela.*)
           END IF

           IF sup3760_verifica_num_ar(p_dados_tela.num_aviso_rec) THEN
              # Inicio chamado 835591
              IF NOT sup3760_insere_parametro_sup1544(p_dados_tela.num_aviso_rec) THEN
                 RETURN FALSE
              END IF
              # Fim chamado 835591

              ERROR " Aguarde... Efetuando consistencia da NF. "
              CALL log120_procura_caminho("sup0680") RETURNING l_comando
              LET l_comando = l_comando CLIPPED," ",p_cod_empresa,
                                                " ",p_dados_tela.num_aviso_rec,
                                                " S",
                                                " ",0
              RUN l_comando RETURNING p_cancel

              # Inicio chamado 835591
              IF NOT sup3760_elimina_parametro_sup1544(p_dados_tela.num_aviso_rec) THEN
                 RETURN FALSE
              END IF
              # Fim chamado 835591

              CALL obf3760_inclusao_obf_nf_eletr(p_dados_tela.*)
           END IF

           ERROR " "

           WHENEVER ERROR CONTINUE
             SELECT COUNT(*)
               INTO p_tem_erro
               FROM nf_sup_erro
              WHERE nf_sup_erro.empresa       = p_cod_empresa
                AND nf_sup_erro.num_aviso_rec = p_dados_tela.num_aviso_rec
                AND nf_sup_erro.ies_origem_erro <> "4"
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 OR p_tem_erro IS NULL THEN
              LET p_tem_erro = 0
           END IF

           IF p_tem_erro > 0 THEN
              CALL log0030_mensagem(" Foram detectados erros na consistencia da Nota Fiscal ","exclamation")
              #O.S. 529316
              IF p_dados_tela.num_nf IS NOT NULL
              AND m_abre_aut_tela_erros = "S" THEN
                 CALL sup376_busca_nf_sup(p_dados_tela.num_aviso_rec)
                 LET p_nom_resp_aceite_er = p_nf_sup.nom_resp_aceite_er
                 CALL sup377_zoom_erros(p_cod_empresa, p_dados_tela.num_aviso_rec, p_nom_resp_aceite_er)
              END IF
              #O.S. 529316
           ELSE
              CALL log0030_mensagem(" Nao foram detectados erros na consistencia da Nota Fiscal ","exclamation")
           END IF

           RETURN TRUE
        END IF
     ELSE
        CALL log003_err_sql("DELETE","SUP_PAR_AR")

        WHENEVER ERROR CONTINUE
            CALL log085_transacao("ROLLBACK")
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql("ROLLBACK","EXCLUIR_RELACIONAMENTO_AR")
        END IF

        RETURN FALSE
     END IF
  ELSE
     ERROR "Exclusão cancelada."

     RETURN FALSE
  END IF

END FUNCTION

#-----------------------------------------#
 FUNCTION sup3760_entrada_dados_nf_relac()
#-----------------------------------------#

  DEFINE l_funcao CHAR(15)

  CALL log006_exibe_teclas("01 02 07",p_versao)
  CURRENT WINDOW IS w_sup3760k

  DISPLAY p_cod_empresa TO empresa
  DISPLAY p_dados_tela.num_aviso_rec TO m_num_ar

  INITIALIZE m_num_ar_relac TO NULL

  LET int_flag = FALSE

  INPUT BY NAME m_num_ar_relac WITHOUT DEFAULTS

    BEFORE FIELD m_num_ar_relac
      IF g_ies_grafico THEN
         --# CALL fgl_dialog_setkeylabel('control-z','Zoom')
      ELSE
         DISPLAY "( Zoom )" AT 3,37
      END IF

    AFTER FIELD m_num_ar_relac
      IF g_ies_grafico THEN
         --# CALL fgl_dialog_setkeylabel('control-z',NULL)
      ELSE
         DISPLAY "--------" AT 3,37
      END IF

      IF m_num_ar_relac IS NULL
      OR m_num_ar_relac = " " THEN
         CALL log0030_mensagem("Informe o número do AR.","info")
         NEXT FIELD m_num_ar_relac
      END IF

      IF NOT sup3760_verifica_nf_sup_erro(m_num_ar_relac) THEN
         CALL log0030_mensagem("AR não possue item com CFOP serviço/retorno simbolico.","info")
         NEXT FIELD m_num_ar_relac
      END IF

    ON KEY(control-w, f1)
      CALL sup376_help()

    ON KEY (control-z, f4)
      CALL sup376_popups(l_funcao)

    AFTER INPUT
      IF int_flag = 0 THEN
         IF m_num_ar_relac IS NULL
         OR m_num_ar_relac = " " THEN
            CALL log0030_mensagem("Informe o número do AR.","info")
            NEXT FIELD m_num_ar_relac
         END IF
      END IF
  END INPUT

  CALL log006_exibe_teclas("01",p_versao)
  CURRENT WINDOW IS w_sup3760k

  IF int_flag THEN
     LET int_flag = 0
     CLEAR FORM
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF

END FUNCTION

#-------------------------------------#
 FUNCTION sup3760_busca_num_ar_relac()
#-------------------------------------#

  WHENEVER ERROR CONTINUE
    SELECT parametro_val
      INTO m_num_ar_relac
      FROM sup_par_ar
     WHERE empresa           = p_cod_empresa
       AND aviso_recebto     = p_dados_tela.num_aviso_rec
       AND seq_aviso_recebto = 1
       AND parametro         = "final_cfop"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     DISPLAY p_dados_tela.num_aviso_rec TO m_num_ar
     DISPLAY BY NAME m_num_ar_relac
  END IF

END FUNCTION

#------------------------------------------------------#
 FUNCTION sup3760_verifica_nf_sup_erro(l_num_aviso_rec)
#------------------------------------------------------#

  DEFINE l_num_aviso_rec LIKE aviso_rec.num_aviso_rec,
         l_cfop_retn     SMALLINT,
         l_cfop_serv     SMALLINT

  LET l_cfop_retn = FALSE
  LET l_cfop_serv = FALSE

  WHENEVER ERROR CONTINUE
    SELECT num_aviso_rec
      FROM nf_sup_erro
     WHERE empresa            = p_cod_empresa
       AND num_aviso_rec      = l_num_aviso_rec
       AND num_seq            = 1
       AND ies_origem_erro    = '1'
       AND des_pendencia_item = "Nota Fiscal não possui item que tenha CFOP serviço"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET l_cfop_retn = FALSE
  ELSE
     LET l_cfop_retn = TRUE

     IF l_num_aviso_rec = p_dados_tela.num_aviso_rec THEN
        LET m_cfop_serv = FALSE
     END IF
  END IF

  WHENEVER ERROR CONTINUE
    SELECT num_aviso_rec
      FROM nf_sup_erro
     WHERE empresa             = p_cod_empresa
       AND num_aviso_rec       = l_num_aviso_rec
       AND num_seq             = 1
       AND ies_origem_erro     = '1'
       AND des_pendencia_item  = "Nota Fiscal não possui item que tenha CFOP retorno simbolico"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET l_cfop_serv = FALSE
  ELSE
     LET l_cfop_serv = TRUE

     IF l_num_aviso_rec = p_dados_tela.num_aviso_rec THEN
        LET m_cfop_serv = TRUE
     END IF
  END IF

  IF l_cfop_retn = FALSE AND l_cfop_serv = FALSE
  OR l_cfop_retn = TRUE  AND l_cfop_serv = TRUE THEN
     RETURN FALSE
  END IF

  RETURN TRUE

END FUNCTION

#------------------------------------------#
 FUNCTION sup3760_verifica_num_ar(l_num_ar)
#------------------------------------------#

  DEFINE l_num_ar LIKE aviso_rec.num_aviso_rec

  WHENEVER ERROR CONTINUE
    SELECT aviso_rec.num_aviso_rec
      FROM aviso_rec
     WHERE aviso_rec.cod_empresa   = p_cod_empresa
       AND aviso_rec.num_aviso_rec = l_num_ar
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF

END FUNCTION

#------------------------------------------#
 FUNCTION sup3760_verifica_cfop_retr_serv()
#------------------------------------------#

  DEFINE l_cod_fiscal_item LIKE aviso_rec.cod_fiscal_item,
         l_cfop_retr       SMALLINT,
         l_cfop_serv       SMALLINT,
         l_pos             SMALLINT,
         l_cfop            CHAR(03)

  WHENEVER ERROR CONTINUE
   DECLARE cq_cfop_itens CURSOR FOR
    SELECT aviso_rec.cod_fiscal_item
      FROM aviso_rec
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = m_num_ar_relac
  WHENEVER ERROR STOP
  IF sqlca.sqlcode != 0 THEN
     CALL log003_err_sql("DECLARE","CQ_CFOP_ITENS")
  END IF

  LET l_cfop_retr = FALSE
  LET l_cfop_serv = FALSE

  WHENEVER ERROR CONTINUE
   FOREACH cq_cfop_itens INTO l_cod_fiscal_item
      IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
         CALL log003_err_sql("FOREACH CURSOR","CQ_CFOP_ITENS")
      END IF

      LET l_pos  = LENGTH(l_cod_fiscal_item)

      IF l_pos < 5 THEN
         CONTINUE FOREACH
      END IF

      LET l_cfop = l_cod_fiscal_item[l_pos-2,l_pos]

      WHENEVER ERROR CONTINUE
        SELECT fim_cfop_nf_retn
          FROM sup_cfop_retn_serv
         WHERE empresa          = p_cod_empresa
           AND fim_cfop_nf_retn = l_cfop
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 THEN
         IF sqlca.sqlcode <> NOTFOUND THEN
            CALL log003_err_sql('SELECT','SUP_CFOP_RETN_SERV')
         END IF
      ELSE
         LET l_cfop_retr = TRUE
      END IF

      WHENEVER ERROR CONTINUE
        SELECT fim_cfop_nf_retn
          FROM sup_cfop_retn_serv
         WHERE empresa            = p_cod_empresa
           AND final_cfop_nf_serv = l_cfop
      WHENEVER ERROR STOP
      IF sqlca.sqlcode <> 0 THEN
         IF sqlca.sqlcode <> NOTFOUND THEN
            CALL log003_err_sql('SELECT','SUP_CFOP_RETN_SERV')
         END IF
      ELSE
         LET l_cfop_serv = TRUE
      END IF

      IF  l_cfop_retr = TRUE
      AND l_cfop_serv = TRUE THEN
         EXIT FOREACH
      END IF
   END FOREACH
  WHENEVER ERROR STOP

  IF l_cfop_retr = TRUE AND l_cfop_serv = FALSE THEN
     CALL sup3760_inclui_nf_sup_erro(1,"1","S","Nota Fiscal não possui item que tenha CFOP serviço")
  ELSE
     IF l_cfop_retr = FALSE AND l_cfop_serv = TRUE THEN
        CALL sup3760_inclui_nf_sup_erro(1,"1","S","Nota Fiscal não possui item que tenha CFOP retorno simbolico")
     END IF
  END IF

  FREE cq_cfop_itens

END FUNCTION

#--------------------------------------------------------------------------#
 FUNCTION sup3760_inclui_nf_sup_erro(l_num_seq,l_origem,l_erro_grave,l_msg)
#--------------------------------------------------------------------------#

  DEFINE lr_nf_sup_erro RECORD LIKE nf_sup_erro.*,
         l_num_seq      LIKE nf_sup_erro.num_seq,
         l_origem       LIKE nf_sup_erro.ies_origem_erro,
         l_erro_grave   LIKE nf_sup_erro.ies_erro_grave,
         l_msg          LIKE nf_sup_erro.des_pendencia_item

 LET lr_nf_sup_erro.empresa            = p_cod_empresa
 LET lr_nf_sup_erro.num_aviso_rec      = m_num_ar_relac
 LET lr_nf_sup_erro.num_seq            = l_num_seq
 LET lr_nf_sup_erro.ies_origem_erro    = l_origem
 LET lr_nf_sup_erro.ies_erro_grave     = l_erro_grave
 LET lr_nf_sup_erro.des_pendencia_item = l_msg

 WHENEVER ERROR CONTINUE
   INSERT INTO nf_sup_erro(empresa,
                           num_aviso_rec,
                           num_seq,
                           des_pendencia_item,
                           ies_origem_erro,
                           ies_erro_grave)
   VALUES (lr_nf_sup_erro.empresa,
           lr_nf_sup_erro.num_aviso_rec,
           lr_nf_sup_erro.num_seq,
           lr_nf_sup_erro.des_pendencia_item,
           lr_nf_sup_erro.ies_origem_erro,
           lr_nf_sup_erro.ies_erro_grave)
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("INCLUSAO","NF_SUP_ERRO")
 END IF

END FUNCTION

## 534641
#--------------------------------------------------#
FUNCTION sup3760_verifica_sup_fornec(l_cod_fornec,
                                     l_cod_fiscal)
#--------------------------------------------------#

DEFINE l_cod_fornec   LIKE fornecedor.cod_fornecedor,
       l_cod_fiscal   LIKE cod_fiscal_sup.cod_fiscal

 LET l_cod_fiscal = l_cod_fiscal[3,5]


 IF NOT log0150_verifica_se_tabela_existe("sup_fornec_tri_ter") THEN
    RETURN " "
 END IF

 WHENEVER ERROR CONTINUE
 SELECT fornec_depositante
   FROM sup_fornec_tri_ter
  WHERE empresa         = p_cod_empresa
    AND fornecedor      = l_cod_fornec
    AND cod_fisc_fornec = l_cod_fiscal
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 OR
    sqlca.sqlcode = -284 THEN
    RETURN "A"
 END IF

 WHENEVER ERROR CONTINUE
 SELECT fornecedor
   FROM sup_fornec_tri_ter
  WHERE empresa             = p_cod_empresa
    AND fornec_depositante  = l_cod_fornec
    AND cod_fisc_depos      = l_cod_fiscal
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 OR
    sqlca.sqlcode = -284 THEN
    RETURN "B"
 END IF

# 534641
RETURN " "

END FUNCTION
# 534641
#----------------------------------#
FUNCTION sup3760_cad_item_triang(l_cod_fornecedor,
                                 l_cod_fiscal,
                                 l_cod_item,
                                 l_tipo)
#----------------------------------#

DEFINE l_cod_fornecedor LIKE fornecedor.cod_fornecedor,
       l_cod_fiscal     LIKE nf_sup.cod_operacao,
       l_cod_item       LIKE item.cod_item,
       l_tipo           CHAR(01)

 IF NOT log0150_verifica_se_tabela_existe("sup_fornec_tri_ter") THEN
    RETURN FALSE
 END IF

 LET l_cod_fiscal = l_cod_fiscal[3,5]

 IF l_tipo = "A" THEN
    WHENEVER ERROR CONTINUE
    SELECT empresa
      FROM sup_fornec_tri_ter
     WHERE empresa         = p_cod_empresa
       AND fornecedor      = l_cod_fornecedor
       AND cod_fisc_fornec = l_cod_fiscal
       AND item            = l_cod_item
    WHENEVER ERROR STOP
 ELSE
    WHENEVER ERROR CONTINUE
    SELECT empresa
      FROM sup_fornec_tri_ter
     WHERE empresa            = p_cod_empresa
       AND fornec_depositante = l_cod_fornecedor
       AND cod_fisc_depos     = l_cod_fiscal
       AND item               = l_cod_item
    WHENEVER ERROR STOP
 END IF

 IF sqlca.sqlcode = 0 OR
    sqlca.sqlcode = -284 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

END FUNCTION
# 534641
#534641
#-------------------------------------#
FUNCTION sup3760_informa_nf_cobraca()
#-------------------------------------#

DEFINE l_num_nf_cobranca LIKE nf_sup.num_nf,
       l_achou           SMALLINT


 CALL log006_exibe_teclas("01", p_versao)
 CALL log130_procura_caminho("sup3760s") RETURNING comando3
 OPEN WINDOW w_sup3760s AT 5,5 WITH FORM comando3
      ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, COMMENT LINE LAST)

 LET l_achou = FALSE
 #BUSCA OS DADOS E VERIFICA SE JA EXISTE NOTA FISCAL DE COBRANÇA CADASTRADA
 WHENEVER ERROR CONTINUE
  SELECT parametro_val
    INTO l_num_nf_cobranca
    FROM sup_par_ar
   WHERE empresa           = p_cod_empresa
     AND aviso_recebto     = p_dados_tela.num_aviso_rec
     AND parametro         = "nf_cobr_fornec"
     AND seq_aviso_recebto = 0
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    LET l_achou = TRUE
    CURRENT WINDOW IS w_sup3760s
    DISPLAY BY NAME l_num_nf_cobranca
 END IF

 LET INT_FLAG = 0
 CALL log006_exibe_teclas("01 02 07", p_versao)
 CURRENT WINDOW IS w_sup3760s
 INPUT BY NAME l_num_nf_cobranca WITHOUT DEFAULTS

 ON KEY (f1, control-w)
       #lds IF NOT LOG_logix_versao5() THEN
       #lds CONTINUE INPUT
       #lds END IF
       CALL sup376_help()
 AFTER INPUT

 #SE NÃO EXISTIR NOTA DE COBRANÇA FAZ A INCLUSÃO.. SENÃO MODIFICAÇÃO
 IF NOT l_achou THEN
    IF l_num_nf_cobranca IS NOT NULL AND
       l_num_nf_cobranca <> " " AND
       l_num_nf_cobranca <> 0 THEN
       WHENEVER ERROR CONTINUE
       INSERT INTO sup_par_ar (empresa          ,
                               aviso_recebto    ,
                               seq_aviso_recebto,
                               parametro        ,
                               par_ind_especial ,
                               parametro_texto  ,
                               parametro_val    ,
                               parametro_dat)
                       VALUES (p_cod_empresa,
                               p_dados_tela.num_aviso_rec,
                               0,
                               "nf_cobr_fornec",
                               NULL,
                               NULL,
                               l_num_nf_cobranca,
                               NULL)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <>  0 THEN
          CALL log003_err_sql("INSERT","PAR_SUP_PAD")
       END IF
    END IF
 ELSE
    WHENEVER ERROR CONTINUE
    UPDATE sup_par_ar SET parametro_val = l_num_nf_cobranca
     WHERE empresa           = p_cod_empresa
       AND aviso_recebto     = p_dados_tela.num_aviso_rec
       AND seq_aviso_recebto = 0
       AND parametro         = "nf_cobr_fornec"
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("UPDATE","PAR_SUP_PAD")
    END IF
 END IF

END INPUT

CLOSE WINDOW w_sup3760s

END FUNCTION
#534641
#-----------------------------------------#
FUNCTION sup3760_verifica_fornec_depos(l_cod_fornecedor)
#-----------------------------------------#
DEFINE l_cod_fornecedor   LIKE fornecedor.cod_fornecedor,
       l_cod_fornec_depos LIKE fornecedor.cod_fornecedor,
       l_condicao         CHAR(200)

 IF NOT log0150_verifica_se_tabela_existe("sup_fornec_tri_ter") THEN
    RETURN FALSE
 END IF

 WHENEVER ERROR CONTINUE
 SELECT fornec_depositante
   INTO l_cod_fornec_depos
   FROM sup_fornec_tri_ter
  WHERE empresa = p_cod_empresa
    AND fornecedor         = l_cod_fornecedor
    AND fornec_depositante = l_cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode =  0 THEN
    WHENEVER ERROR CONTINUE
    SELECT fornec_depositante
      FROM sup_fornec_tri_ter
    WHERE empresa    = p_cod_empresa
      AND fornecedor = l_cod_fornecedor
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       RETURN FALSE
    ELSE
       IF sqlca.sqlcode = -284 THEN
          RETURN TRUE
       END IF
    END IF
 ELSE
    RETURN FALSE
 END IF
#retornando falso, nao encontrou fornecedor, pode deixar incluir nota tipo A
#retornando true, o fornecedor e depositante são os mesmo unicamente. não incluir nota tipo A

END FUNCTION

#534641
#-----------------------------------------#
FUNCTION sup3760_verifica_necessita_pc(l_cod_fornecedor,
                                       l_cod_fiscal,
                                       l_tipo)
#-----------------------------------------#

DEFINE l_cod_fornecedor     LIKE fornecedor.cod_fornecedor,
       l_cod_fiscal         LIKE cod_fiscal_sup.cod_fiscal,
       l_tipo               CHAR(01),
       l_necessidade_pedido CHAR(01)

 IF NOT log0150_verifica_se_tabela_existe("sup_fornec_tri_ter") THEN
    RETURN TRUE
 END IF

 IF l_tipo = "A" THEN
    IF l_cod_fiscal IS NULL
    OR l_cod_fiscal = " " THEN
       WHENEVER ERROR CONTINUE
       SELECT UNIQUE necessidade_pedido
         INTO l_necessidade_pedido
         FROM sup_fornec_tri_ter
        WHERE empresa            = p_cod_empresa
          AND fornecedor         = l_cod_fornecedor
       WHENEVER ERROR STOP
    ELSE
       LET l_cod_fiscal = l_cod_fiscal[3,5]
       WHENEVER ERROR CONTINUE
       SELECT UNIQUE necessidade_pedido
         INTO l_necessidade_pedido
         FROM sup_fornec_tri_ter
        WHERE empresa            = p_cod_empresa
          AND fornecedor         = l_cod_fornecedor
          AND cod_fisc_fornec    = l_cod_fiscal
       WHENEVER ERROR STOP
       IF sqlca.sqlcode < 0 THEN
          CALL log003_err_sql("SELECT","SUP_FORNEC_TRI_TER")
       END IF
    END IF
 ELSE
    IF l_cod_fiscal IS NULL
    OR l_cod_fiscal = " " THEN
       WHENEVER ERROR CONTINUE
       SELECT UNIQUE necessidade_pedido
         INTO l_necessidade_pedido
         FROM sup_fornec_tri_ter
        WHERE empresa            = p_cod_empresa
          AND fornec_depositante = l_cod_fornecedor
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("SELECT","SUP_FORNEC_TRI_TER")
       END IF

    ELSE
       LET l_cod_fiscal = l_cod_fiscal[3,5]
       WHENEVER ERROR CONTINUE
       SELECT UNIQUE necessidade_pedido
         INTO l_necessidade_pedido
         FROM sup_fornec_tri_ter
        WHERE empresa            = p_cod_empresa
          AND fornec_depositante = l_cod_fornecedor
          AND cod_fisc_depos     = l_cod_fiscal
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("SELECT","SUP_FORNEC_TRI_TER")
       END IF
    END IF
 END IF

 IF sqlca.sqlcode <> 0 THEN
    LET l_necessidade_pedido = 'N'
 END IF

 IF (p_pedidos[1,5] = "XXXXX") OR
    (p_pedidos IS NULL) THEN
    IF #p_par_sup.ies_entrada_sem_pc = "N" AND
       p_ies_informou_ped = "N" AND
       p_ies_entr_sem_ped = FALSE THEN
       IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
          IF supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor) THEN
             IF l_necessidade_pedido = "S" THEN
                RETURN FALSE
             ELSE
                RETURN TRUE
             END IF
          END IF
       ELSE
          IF l_necessidade_pedido = "S" THEN
             RETURN FALSE
          ELSE
             RETURN TRUE
          END IF
       END IF
    END IF
 END IF

 RETURN TRUE

END FUNCTION
#534641

#----------------------------------------------#
 FUNCTION sup3760_existe_cadastro_triangulacao()
#----------------------------------------------#
 DEFINE l_cod_operacao       LIKE nf_sup.cod_operacao

 LET l_cod_operacao     = p_dados_tela.cod_operacao[3,5]
 WHENEVER ERROR CONTINUE
 SELECT empresa
   FROM sup_fornec_tri_ter
  WHERE empresa = p_cod_empresa
    AND (fornecedor         = p_dados_tela.cod_fornecedor
      OR fornec_depositante = p_dados_tela.cod_fornecedor)
    AND (cod_fisc_fornec    = l_cod_operacao
      OR cod_fisc_depos     = l_cod_operacao)
 WHENEVER ERROR STOP

 IF sqlca.sqlcode = 0
 OR sqlca.sqlcode - 284 THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION
#-------------------------------------------------------------------------#
 FUNCTION sup3760_verifica_saldo_transf_grade(l_cod_item,l_qtd_movto, l_local_est_orig,
                                             l_sit_est_orig,l_lote_orig)
#-------------------------------------------------------------------------#
  DEFINE l_cod_item          LIKE estoque_trans.cod_item,
         l_qtd_movto         LIKE estoque_trans.qtd_movto,
         l_local_est_orig    LIKE estoque_trans.cod_local_est_orig,
         l_qtd_saldo         LIKE estoque_lote.qtd_saldo,
         l_qtd_reservada     LIKE estoque_loc_reser.qtd_reservada,
         l_sit_est_orig      LIKE estoque_trans.ies_sit_est_orig,
         l_lote_orig         LIKE estoque_trans.num_lote_orig

  IF l_lote_orig IS NULL OR
     l_lote_orig = " " THEN
     WHENEVER ERROR CONTINUE
     SELECT qtd_saldo
       INTO l_qtd_saldo
       FROM estoque_lote
      WHERE cod_empresa   = p_cod_empresa
        AND cod_item      = l_cod_item
        AND cod_local     = l_local_est_orig
        AND (num_lote IS NULL OR num_lote = " ")
        AND ies_situa_qtd = l_sit_est_orig
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 AND
        sqlca.sqlcode <> 100 THEN
        CALL log003_err_sql("LEITURA","estoque_lote")
     END IF
  ELSE
     WHENEVER ERROR CONTINUE
     SELECT qtd_saldo
       INTO l_qtd_saldo
       FROM estoque_lote
      WHERE cod_empresa   = p_cod_empresa
        AND cod_item      = l_cod_item
        AND cod_local     = l_local_est_orig
        AND num_lote      = l_lote_orig
        AND ies_situa_qtd = l_sit_est_orig
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 AND
        sqlca.sqlcode <> 100 THEN
        CALL log003_err_sql("LEITURA","estoque_lote")
     END IF
  END IF
  IF l_qtd_saldo IS NULL THEN
     LET l_qtd_saldo = 0
  END IF

  IF l_lote_orig IS NULL OR
     l_lote_orig = " " THEN
     WHENEVER ERROR CONTINUE
     SELECT SUM(qtd_reservada)
       INTO l_qtd_reservada
       FROM estoque_loc_reser
      WHERE cod_empresa = p_cod_empresa
        AND cod_item    = l_cod_item
        AND cod_local   = l_local_est_orig
        AND (num_lote IS NULL OR num_lote = " ")
        AND ies_situacao NOT IN ("L","C")
     WHENEVER ERROR STOP
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 AND
        sqlca.sqlcode <> 100 THEN
        CALL log003_err_sql("LEITURA","estoque_loc_reser")
     END IF
  ELSE
     WHENEVER ERROR CONTINUE
     SELECT SUM(qtd_reservada)
       INTO l_qtd_reservada
       FROM estoque_loc_reser
      WHERE cod_empresa = p_cod_empresa
        AND cod_item    = l_cod_item
        AND cod_local   = l_local_est_orig
        AND num_lote    = l_lote_orig
        AND ies_situacao NOT IN ("L","C")
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 AND
        sqlca.sqlcode <> 100 THEN
        CALL log003_err_sql("LEITURA","estoque_loc_reser")
     END IF
  END IF

  IF l_qtd_reservada IS NULL THEN
     LET l_qtd_reservada = 0
  END IF

  IF (l_qtd_saldo - l_qtd_reservada) < l_qtd_movto THEN
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#--------------------------------------------------------------------#
 FUNCTION sup3760_zera_num_pedido(lr_estoque_trans,lr_estoque_trans_end)
#--------------------------------------------------------------------#
 DEFINE lr_estoque_trans_end  RECORD LIKE estoque_trans_end.*,
        lr_estoque_trans      RECORD LIKE estoque_trans.*,
        lr_estoque_lote_ender RECORD LIKE estoque_lote_ender.*,
        l_qtd_saldo           LIKE estoque_lote_ender.qtd_saldo,
        l_num_ped_ven         LIKE estoque_lote_ender.num_ped_ven,
        l_num_seq_ped_ven     LIKE estoque_lote_ender.num_seq_ped_ven,
        l_num_transac         INTEGER,
        l_houve_erro          SMALLINT,
        l_qtd_saldo_total     SMALLINT,
        l_diferenca           SMALLINT

 LET l_houve_erro = FALSE
 LET l_qtd_saldo_total = 0

 WHENEVER ERROR CONTINUE
 FOREACH cq_est_lote_ender3
   USING lr_estoque_trans_end.cod_empresa,
         lr_estoque_trans.cod_item,
         lr_estoque_trans_end.endereco,
         lr_estoque_trans_end.num_volume,
         lr_estoque_trans_end.cod_grade_1,
         lr_estoque_trans_end.cod_grade_2,
         lr_estoque_trans_end.cod_grade_3,
         lr_estoque_trans_end.cod_grade_4,
         lr_estoque_trans_end.cod_grade_5,
         lr_estoque_trans_end.dat_hor_producao,
         lr_estoque_trans_end.dat_hor_validade,
         lr_estoque_trans_end.num_peca,
         lr_estoque_trans_end.num_serie,
         lr_estoque_trans_end.comprimento,
         lr_estoque_trans_end.largura,
         lr_estoque_trans_end.altura,
         lr_estoque_trans_end.diametro,
         lr_estoque_trans_end.dat_hor_reserv_1,
         lr_estoque_trans_end.dat_hor_reserv_2,
         lr_estoque_trans_end.dat_hor_reserv_3,
         lr_estoque_trans_end.qtd_reserv_1,
         lr_estoque_trans_end.qtd_reserv_2,
         lr_estoque_trans_end.qtd_reserv_3,
         lr_estoque_trans_end.num_reserv_1,
         lr_estoque_trans_end.num_reserv_2,
         lr_estoque_trans_end.num_reserv_3,
         lr_estoque_trans_end.tex_reservado
    INTO lr_estoque_lote_ender.cod_empresa         ,
         lr_estoque_lote_ender.cod_item            ,
         lr_estoque_lote_ender.cod_local           ,
         lr_estoque_lote_ender.num_lote            ,
         lr_estoque_lote_ender.endereco            ,
         lr_estoque_lote_ender.num_volume          ,
         lr_estoque_lote_ender.cod_grade_1         ,
         lr_estoque_lote_ender.cod_grade_2         ,
         lr_estoque_lote_ender.cod_grade_3         ,
         lr_estoque_lote_ender.cod_grade_4         ,
         lr_estoque_lote_ender.cod_grade_5         ,
         lr_estoque_lote_ender.dat_hor_producao    ,
         lr_estoque_lote_ender.num_ped_ven         ,
         lr_estoque_lote_ender.num_seq_ped_ven     ,
         lr_estoque_lote_ender.ies_situa_qtd       ,
         lr_estoque_lote_ender.qtd_saldo           ,
         lr_estoque_lote_ender.num_transac         ,
         lr_estoque_lote_ender.ies_origem_entrada  ,
         lr_estoque_lote_ender.dat_hor_validade    ,
         lr_estoque_lote_ender.num_peca            ,
         lr_estoque_lote_ender.num_serie           ,
         lr_estoque_lote_ender.comprimento         ,
         lr_estoque_lote_ender.largura             ,
         lr_estoque_lote_ender.altura              ,
         lr_estoque_lote_ender.diametro            ,
         lr_estoque_lote_ender.dat_hor_reserv_1    ,
         lr_estoque_lote_ender.dat_hor_reserv_2    ,
         lr_estoque_lote_ender.dat_hor_reserv_3    ,
         lr_estoque_lote_ender.qtd_reserv_1        ,
         lr_estoque_lote_ender.qtd_reserv_2        ,
         lr_estoque_lote_ender.qtd_reserv_3        ,
         lr_estoque_lote_ender.num_reserv_1        ,
         lr_estoque_lote_ender.num_reserv_2        ,
         lr_estoque_lote_ender.num_reserv_3        ,
         lr_estoque_lote_ender.tex_reservado
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("FOREACH","CQ_EST_LOTE_ENDER3")
       RETURN FALSE
    END IF

    IF lr_estoque_lote_ender.qtd_saldo = lr_estoque_trans.qtd_movto
    AND l_qtd_saldo_total = 0 THEN
       WHENEVER ERROR CONTINUE
       UPDATE estoque_lote_ender
          SET num_ped_ven     = 0,
              num_seq_ped_ven = 0
        WHERE estoque_lote_ender.cod_empresa        = lr_estoque_trans_end.cod_empresa
          AND estoque_lote_ender.num_transac        = lr_estoque_lote_ender.num_transac
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          LET l_houve_erro = TRUE
          EXIT FOREACH
       ELSE
          EXIT FOREACH
       END IF
    ELSE
       IF lr_estoque_lote_ender.qtd_saldo < lr_estoque_trans.qtd_movto THEN
          WHENEVER ERROR CONTINUE
          UPDATE estoque_lote_ender
             SET num_ped_ven     = 0,
                 num_seq_ped_ven = 0
           WHERE estoque_lote_ender.cod_empresa        = lr_estoque_trans_end.cod_empresa
             AND estoque_lote_ender.num_transac        = lr_estoque_lote_ender.num_transac
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET l_houve_erro = TRUE
             EXIT FOREACH
          ELSE
             LET l_qtd_saldo_total = l_qtd_saldo_total + lr_estoque_lote_ender.qtd_saldo
             IF lr_estoque_trans.qtd_movto = l_qtd_saldo_total THEN
                EXIT FOREACH
             END IF
          END IF
       ELSE
          IF l_qtd_saldo_total <> 0 THEN
             LET l_diferenca = lr_estoque_trans.qtd_movto - l_qtd_saldo_total
             LET l_diferenca = lr_estoque_lote_ender.qtd_saldo - l_diferenca
          ELSE
             LET l_diferenca = lr_estoque_lote_ender.qtd_saldo - lr_estoque_trans.qtd_movto
          END IF
          WHENEVER ERROR CONTINUE
          UPDATE estoque_lote_ender
             SET num_ped_ven     = 0,
                 num_seq_ped_ven = 0
           WHERE estoque_lote_ender.cod_empresa        = lr_estoque_trans_end.cod_empresa
             AND estoque_lote_ender.num_transac        = lr_estoque_lote_ender.num_transac
          WHENEVER ERROR STOP
          IF sqlca.sqlcode <> 0 THEN
             LET l_houve_erro = TRUE
             EXIT FOREACH
          ELSE
             WHENEVER ERROR CONTINUE
             INSERT INTO estoque_lote_ender (cod_empresa         ,
                                             cod_item            ,
                                             cod_local           ,
                                             num_lote            ,
                                             endereco            ,
                                             num_volume          ,
                                             cod_grade_1         ,
                                             cod_grade_2         ,
                                             cod_grade_3         ,
                                             cod_grade_4         ,
                                             cod_grade_5         ,
                                             dat_hor_producao    ,
                                             num_ped_ven         ,
                                             num_seq_ped_ven     ,
                                             ies_situa_qtd       ,
                                             qtd_saldo           ,
                                             num_transac         ,
                                             ies_origem_entrada  ,
                                             dat_hor_validade    ,
                                             num_peca            ,
                                             num_serie           ,
                                             comprimento         ,
                                             largura             ,
                                             altura              ,
                                             diametro            ,
                                             dat_hor_reserv_1    ,
                                             dat_hor_reserv_2    ,
                                             dat_hor_reserv_3    ,
                                             qtd_reserv_1        ,
                                             qtd_reserv_2        ,
                                             qtd_reserv_3        ,
                                             num_reserv_1        ,
                                             num_reserv_2        ,
                                             num_reserv_3        ,
                                             tex_reservado       )
                                     VALUES (lr_estoque_lote_ender.cod_empresa         ,
                                             lr_estoque_lote_ender.cod_item            ,
                                             lr_estoque_lote_ender.cod_local           ,
                                             lr_estoque_lote_ender.num_lote            ,
                                             lr_estoque_lote_ender.endereco            ,
                                             lr_estoque_lote_ender.num_volume          ,
                                             lr_estoque_lote_ender.cod_grade_1         ,
                                             lr_estoque_lote_ender.cod_grade_2         ,
                                             lr_estoque_lote_ender.cod_grade_3         ,
                                             lr_estoque_lote_ender.cod_grade_4         ,
                                             lr_estoque_lote_ender.cod_grade_5         ,
                                             lr_estoque_lote_ender.dat_hor_producao    ,
                                             lr_estoque_lote_ender.num_ped_ven         ,
                                             lr_estoque_lote_ender.num_seq_ped_ven     ,
                                             lr_estoque_lote_ender.ies_situa_qtd       ,
                                             l_diferenca                               , #qtd_saldo
                                             0                                         ,
                                             lr_estoque_lote_ender.ies_origem_entrada  ,
                                             lr_estoque_lote_ender.dat_hor_validade    ,
                                             lr_estoque_lote_ender.num_peca            ,
                                             lr_estoque_lote_ender.num_serie           ,
                                             lr_estoque_lote_ender.comprimento         ,
                                             lr_estoque_lote_ender.largura             ,
                                             lr_estoque_lote_ender.altura              ,
                                             lr_estoque_lote_ender.diametro            ,
                                             lr_estoque_lote_ender.dat_hor_reserv_1    ,
                                             lr_estoque_lote_ender.dat_hor_reserv_2    ,
                                             lr_estoque_lote_ender.dat_hor_reserv_3    ,
                                             lr_estoque_lote_ender.qtd_reserv_1        ,
                                             lr_estoque_lote_ender.qtd_reserv_2        ,
                                             lr_estoque_lote_ender.qtd_reserv_3        ,
                                             lr_estoque_lote_ender.num_reserv_1        ,
                                             lr_estoque_lote_ender.num_reserv_2        ,
                                             lr_estoque_lote_ender.num_reserv_3        ,
                                             lr_estoque_lote_ender.tex_reservado       )
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                LET l_houve_erro = TRUE
                EXIT FOREACH
             END IF
          END IF
       END IF
    END IF
 END FOREACH
 WHENEVER ERROR STOP

 FREE cq_est_lote_ender3

 IF l_houve_erro = FALSE THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF

 END FUNCTION

 #-----------------------------------------------------------------------------------------------#
 FUNCTION sup3760_busca_local_motivo_remessa(l_cod_empresa,l_cod_fornecedor, l_num_nf_remessa, l_num_sequencia_nf)
#-----------------------------------------------------------------------------------------------#

  DEFINE l_cod_empresa            LIKE item_ret_terc.cod_empresa,
         l_num_nf_remessa         LIKE item_ret_terc.num_nf_remessa,
         l_num_sequencia_nf       LIKE item_ret_terc.num_sequencia_nf,
         l_cod_local_est_orig     LIKE estoque_trans.cod_local_est_orig,
         l_ies_sit_est_orig       LIKE estoque_trans.ies_sit_est_orig,
         l_cod_local_est_dest     LIKE estoque_trans.cod_local_est_dest,
         l_ies_sit_est_dest       LIKE estoque_trans.ies_sit_est_dest,
         l_cod_motivo_remessa     LIKE item_em_terc.cod_motivo_remessa,
         l_cod_fornecedor         LIKE item_ret_terc.cod_fornecedor

  INITIALIZE l_cod_motivo_remessa, l_cod_local_est_orig, l_ies_sit_est_orig,
             l_cod_local_est_dest, l_ies_sit_est_dest TO NULL

  WHENEVER ERROR CONTINUE
  SELECT item_em_terc.cod_motivo_remessa
    INTO l_cod_motivo_remessa
    FROM item_em_terc
   WHERE item_em_terc.cod_empresa    = l_cod_empresa
     AND item_em_terc.cod_fornecedor = l_cod_fornecedor
     AND item_em_terc.num_nf         = l_num_nf_remessa
     AND item_em_terc.num_sequencia  = l_num_sequencia_nf
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET l_cod_motivo_remessa = " "
  END IF

  WHENEVER ERROR CONTINUE
  SELECT motivo_remessa.cod_local_remessa,
         motivo_remessa.ies_situa_remessa,
         motivo_remessa.cod_local_retorno,
         motivo_remessa.ies_situa_retorno
    INTO l_cod_local_est_orig, l_ies_sit_est_orig,
         l_cod_local_est_dest, l_ies_sit_est_dest
    FROM motivo_remessa
   WHERE motivo_remessa.cod_empresa        = l_cod_empresa
     AND motivo_remessa.cod_motivo_remessa = l_cod_motivo_remessa
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     LET l_cod_local_est_orig = NULL
     LET l_ies_sit_est_orig   = NULL
     LET l_cod_local_est_dest = NULL
     LET l_ies_sit_est_dest   = NULL
  END IF

  RETURN l_cod_local_est_orig, l_ies_sit_est_orig,
         l_cod_local_est_dest, l_ies_sit_est_dest

 END FUNCTION

#--------------------------------------------------------------------#
#                                                                    #
#                          FUNÇÕES DO WMS                            #
#                                                                    #
#--------------------------------------------------------------------#

# Passo 4 #
#-----------------------------------------------#
 FUNCTION sup3760_wms_tipo_documento(l_parametro,
                                     l_funcao)
#-----------------------------------------------#
  DEFINE l_parametro       CHAR(1),
         l_funcao          CHAR(30),
         l_altera          SMALLINT,
         l_continua        SMALLINT,
         l_tela            CHAR(100),
         l_msg             CHAR(100)

  DEFINE lr_tip_documento  RECORD
                             tip_documento CHAR(1)
                           END RECORD

  INITIALIZE m_tipo_documento_old TO NULL

  CALL log130_procura_caminho("sup3760p") RETURNING l_tela
  OPEN WINDOW w_sup3760p AT 7,12 WITH FORM l_tela
       ATTRIBUTE (BORDER, PROMPT LINE LAST ,FORM LINE 1)

  CALL log006_exibe_teclas("01,02,07", p_versao)
    CURRENT WINDOW IS w_sup3760p

  # Indica que o processo foi cancelado
  LET l_continua = TRUE

  IF l_funcao = "MODIFICACAO" THEN
     IF p_dados_tela.ies_nf_aguard_nfe = "A" THEN
        LET lr_tip_documento.tip_documento = "P"
     ELSE
        IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
           LET lr_tip_documento.tip_documento = "D"
        ELSE
           LET lr_tip_documento.tip_documento = "N"
        END IF
     END IF
     LET m_tipo_documento_old = lr_tip_documento.tip_documento
  ELSE
     LET lr_tip_documento.tip_documento = "P"
  END IF

  LET int_flag = 0
  INPUT BY NAME lr_tip_documento.* WITHOUT DEFAULTS
     AFTER FIELD tip_documento
        LET m_tipo_documento = lr_tip_documento.tip_documento
        # Se o tipo for alterado de "Normal" para "Definido":
        # -> Verificar se o código do fornecedor que está na tela é um depositante.
        # -> Verificar se os itens existentes na NF pertencem ao depositante em questão.
        IF l_funcao = "MODIFICACAO" THEN
           IF m_tipo_documento_old = "N" AND
              m_tipo_documento     = "D" THEN
              IF NOT sup3760_altera_normal_definitivo() THEN
                  NEXT FIELD tip_documento
              END IF
           END IF
           IF m_tipo_documento_old = "N" AND
              m_tipo_documento     = "P" THEN
              IF NOT sup3760_altera_normal_provisorio() THEN
                 NEXT FIELD tip_documento
              END IF
           END IF
           IF m_tipo_documento_old = "P" AND
              m_tipo_documento     = "D" THEN
              IF NOT sup3760_altera_provisorio_definitivo() THEN
                 NEXT FIELD tip_documento
              END IF
           END IF
           IF  m_tipo_documento = "D" THEN
              # OS 547161
              IF log0040_confirm(17,40,"Nota Fiscal será utilizada para regularização fiscal?") THEN
                 LET m_utiliz_regulariz_fiscal = "S"
              ELSE
                 LET m_utiliz_regulariz_fiscal = "N"
              END IF

           END IF
        ELSE
           # OS 547161
           # INCLUSÃO
           IF m_tipo_documento = "D" THEN
              IF log0040_confirm(17,40,"Nota Fiscal será utilizada para regularização fiscal?") THEN
                 LET m_utiliz_regulariz_fiscal = "S"
              ELSE
                 LET m_utiliz_regulariz_fiscal = "N"
              END IF
           END IF
        END IF

     AFTER INPUT
        IF int_flag = 0 THEN
           # Passo 4.1 #
           IF l_parametro = "O" AND
              lr_tip_documento.tip_documento = "P" THEN
              LET p_dados_tela.ies_nf_aguard_nfe = "A"
              LET l_altera = FALSE
           ELSE
              # Passo 4.2 #
              IF l_parametro = "O" AND
                 lr_tip_documento.tip_documento = "D" THEN
                 LET p_dados_tela.ies_nf_aguard_nfe = "B"
                 LET l_altera = FALSE
              ELSE
                 # Passo 4.3 #
                 IF l_parametro = "O" AND
                    lr_tip_documento.tip_documento = "N" THEN
                    LET l_altera = TRUE
                 END IF
              END IF
           END IF
           LET m_tipo_documento = lr_tip_documento.tip_documento
           IF m_tipo_documento_old = "P" OR
              m_tipo_documento_old = "D" THEN
              IF m_tipo_documento  = "N" THEN
                 LET p_dados_tela.ies_nf_aguard_nfe = "1"
              END IF
           END IF
        ELSE
           LET l_continua = FALSE
        END IF
  END INPUT

#  # Alimenta a variável modular usada em outro processo da parte do WMS
#  LET p_tipo_documento = lr_tip_documento.tip_documento

  CLOSE WINDOW w_sup3760p

  RETURN l_altera, l_continua

 END FUNCTION

#--------------------------------------------------#
 FUNCTION sup3760_itens_pertencem_deposit(l_deposit)
#--------------------------------------------------#
  DEFINE l_deposit         LIKE wms_item_complemento.item_deposit,
         l_ind             SMALLINT,
         l_status          SMALLINT,
         l_item_nao_existe SMALLINT,
         l_sucesso_sql     SMALLINT,
         l_ies_item_wms    SMALLINT

  LET l_item_nao_existe = FALSE

  FOR l_ind = 1 TO 999

      IF p_array_wms[l_ind].cod_item IS NULL OR
         p_array_wms[l_ind].cod_item = " " THEN
         EXIT FOR
      END IF

      # Verifica se é um item controlado pelo WMS.

      CALL wms0004_item_sob_controle_wms(p_cod_empresa, p_array_wms[l_ind].cod_item)
           RETURNING l_sucesso_sql, l_ies_item_wms

      # Se o item é controlado pelo WMS, verificar se pertecem ao depositante (Fornecedor tela).
      IF l_ies_item_wms THEN

          LET l_status = FALSE

          CALL wmst81_wms_item_complemento_busca_item(p_cod_empresa,
                                                      l_deposit,
                                                      p_array_wms[l_ind].cod_item CLIPPED,1) # Valida Item 25 posições.
                                                      RETURNING l_status, m_item_interno
          IF l_status = FALSE  THEN
             # Verifica se foi informado item 15 posições para o depositante.
             WHENEVER ERROR CONTINUE
               SELECT item
                 FROM wms_item_complemento
                WHERE empresa = p_cod_empresa
                  AND deposit = l_deposit
                  AND item    = p_array_wms[l_ind].cod_item  # Item 15 posições
             WHENEVER ERROR STOP
             IF sqlca.sqlcode <> 0 THEN
                LET l_item_nao_existe = TRUE
                LET m_item_interno = p_array_wms[l_ind].cod_item
                EXIT FOR
             END IF
          END IF
      END IF

  END FOR

  IF l_item_nao_existe = TRUE THEN
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF

 END FUNCTION

# Passo 5 #
#-----------------------------------------------#
 FUNCTION sup3760_wms_emit_cnpj_inscr_estadual()
#-----------------------------------------------#
  DEFINE l_tipo         CHAR(1),
         l_altera       SMALLINT,
         l_continua     SMALLINT,
         l_cnpj         LIKE fornecedor.num_cgc_cpf,
         l_ins_estadual LIKE fornecedor.ins_estadual,
         l_tela         CHAR(100),
         l_valor        CHAR(20)

  DEFINE lr_emitente RECORD
                        cnpj           CHAR(19),
                        inscr_estadual CHAR(16),
                        emitente       CHAR(15),
                        raz_social     CHAR(50)
                     END RECORD

  CALL log130_procura_caminho("sup3760q") RETURNING l_tela
  OPEN WINDOW w_sup3760q AT 7,2 WITH FORM l_tela
       ATTRIBUTE (BORDER, PROMPT LINE LAST ,FORM LINE 1)

  CALL log006_exibe_teclas("01,02,07", p_versao)
    CURRENT WINDOW IS w_sup3760q

  # Indica que o processo foi cancelado
  LET l_continua = TRUE

  INITIALIZE lr_emitente TO NULL
  LET int_flag = 0
  INPUT BY NAME lr_emitente.cnpj,
                lr_emitente.inscr_estadual,
                lr_emitente.emitente,
                lr_emitente.raz_social WITHOUT DEFAULTS

     AFTER INPUT
        IF int_flag = 0 THEN
           IF lr_emitente.cnpj IS NULL OR
              lr_emitente.cnpj = " " THEN
              CALL log0030_processa_mensagem("CNPJ/CPF não preenchido.","exclamation",0)
              NEXT FIELD cnpj
           END IF

           IF lr_emitente.inscr_estadual IS NULL OR
              lr_emitente.inscr_estadual = " " THEN
              WHENEVER ERROR CONTINUE
              SELECT cod_fornecedor, raz_social
                INTO lr_emitente.emitente,
                     lr_emitente.raz_social
                FROM fornecedor
               WHERE num_cgc_cpf  = lr_emitente.cnpj
                 AND ins_estadual IS NULL
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log0030_processa_mensagem("Emitente não cadastrado.","exclamation",0)
                 NEXT FIELD cnpj
              ELSE
                 DISPLAY BY NAME lr_emitente.*
              END IF
           ELSE
              WHENEVER ERROR CONTINUE
              SELECT cod_fornecedor, raz_social
                INTO lr_emitente.emitente,
                     lr_emitente.raz_social
                FROM fornecedor
               WHERE num_cgc_cpf  = lr_emitente.cnpj
                 AND ins_estadual = lr_emitente.inscr_estadual
              WHENEVER ERROR STOP
              IF sqlca.sqlcode <> 0 THEN
                 CALL log0030_processa_mensagem("Emitente não cadastrado.","exclamation",0)
                 NEXT FIELD cnpj
              ELSE
                 DISPLAY BY NAME lr_emitente.*
              END IF
           END IF
        END IF

     ON KEY (control-z,f4)
        CALL sup3760_wms_popup("sup3760q") RETURNING lr_emitente.cnpj,
                                                     lr_emitente.inscr_estadual,
                                                     lr_emitente.emitente,
                                                     lr_emitente.raz_social
        DISPLAY BY NAME lr_emitente.*

  END INPUT

  IF int_flag = 0 THEN
     LET l_continua = TRUE
  ELSE
     LET l_continua = FALSE
  END IF

  CLOSE WINDOW w_sup3760q

  RETURN lr_emitente.emitente, lr_emitente.raz_social, l_continua

 END FUNCTION

#----------------------------------#
 FUNCTION sup3760_wms_popup(l_tela)
#----------------------------------#
  DEFINE l_tela CHAR(8)

  DEFINE l_cnpj           LIKE fornecedor.num_cgc_cpf,
         l_inscr_estadual LIKE fornecedor.ins_estadual,
         l_emitente       LIKE fornecedor.cod_fornecedor,
         l_raz_social     LIKE fornecedor.raz_social,
         l_fornecedor     LIKE fornecedor.cod_fornecedor

  CASE l_tela
     WHEN "sup3760q"
        LET l_fornecedor = sup162_popup_fornecedor()
        CURRENT WINDOW IS w_sup3760q
        IF l_fornecedor IS NOT NULL THEN
           WHENEVER ERROR CONTINUE
           SELECT num_cgc_cpf, ins_estadual,
                  cod_fornecedor, raz_social
             INTO l_cnpj,
                  l_inscr_estadual,
                  l_emitente,
                  l_raz_social
             FROM fornecedor
            WHERE cod_fornecedor = l_fornecedor
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log0030_processa_mensagem("Emitente não cadastrado.","exclamation",0)
           END IF
        END IF

     WHEN "sup3760r"
        LET l_fornecedor = wms6130_popup_forn_cli_depos("3")
        CURRENT WINDOW IS w_sup3760r
        IF l_fornecedor IS NOT NULL THEN
           WHENEVER ERROR CONTINUE
           SELECT num_cgc_cpf, ins_estadual,
                  cod_fornecedor, raz_social
             INTO l_cnpj,
                  l_inscr_estadual,
                  l_emitente,
                  l_raz_social
             FROM fornecedor
            WHERE cod_fornecedor = l_fornecedor
           WHENEVER ERROR STOP
           IF sqlca.sqlcode <> 0 THEN
              CALL log0030_processa_mensagem("Depositante não cadastrado.","exclamation",0)
           END IF
        END IF
  END CASE

  RETURN l_cnpj,
         l_inscr_estadual,
         l_emitente,
         l_raz_social

 END FUNCTION

# Passo 7 #
# Passo 8 #
#----------------------------------------------------#
 FUNCTION sup3760_wms_busca_cfop(l_segmto_utilizacao)
#----------------------------------------------------#
  DEFINE l_cod_pais_uni_feder       CHAR(3),
         l_cod_pais_fornecedor      CHAR(3),
         l_cod_uni_feder_fornecedor CHAR(2),
         l_parametro_cfop           CHAR(5),
         l_parametro_cfop_compl     CHAR(5),
         l_segmto_utilizacao        CHAR(1),
         l_status                   SMALLINT

  IF m_wms_instal = "S" THEN
     INITIALIZE l_parametro_cfop, l_parametro_cfop_compl TO NULL
     IF l_segmto_utilizacao = "O" AND
        p_dados_tela.ies_nf_aguard_nfe = "A" THEN

        CALL log2250_busca_parametro(p_cod_empresa,"cfop_nota_fiscal_provis") RETURNING l_parametro_cfop, l_status
        CALL log2250_busca_parametro(p_cod_empresa,"cfop_compl_nota_fiscal_provis") RETURNING l_parametro_cfop_compl, l_status
     ELSE
        IF l_segmto_utilizacao = "O" AND
           p_dados_tela.ies_nf_aguard_nfe = "B" THEN

           CALL log2250_busca_parametro(p_cod_empresa,"cfop_nota_fiscal_definit") RETURNING l_parametro_cfop, l_status
           CALL log2250_busca_parametro(p_cod_empresa,"cfop_compl_nota_fiscal_definit") RETURNING l_parametro_cfop_compl, l_status
        END IF
     END IF

     IF ((l_parametro_cfop       IS NOT NULL AND
          l_parametro_cfop       <> ' ') AND
         (l_parametro_cfop_compl IS NOT NULL AND
          l_parametro_cfop_compl <> ' ')) THEN
        # Caso ambos os parâmetros tenham algum valor então deverá
        # buscar ...
        # Passo 7.1 #
        WHENEVER ERROR CONTINUE
           SELECT cod_pais
             INTO l_cod_pais_uni_feder
             FROM uni_feder
            WHERE cod_uni_feder = p_empresa.uni_feder
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 0 THEN
           # Passo 7.2 #
           WHENEVER ERROR CONTINUE
              SELECT cod_pais, cod_uni_feder
                INTO l_cod_pais_fornecedor, l_cod_uni_feder_fornecedor
                FROM fornecedor
               WHERE cod_fornecedor = p_dados_tela.cod_fornecedor
           WHENEVER ERROR STOP
           IF sqlca.sqlcode = 0 THEN
              IF l_cod_pais_uni_feder <>  l_cod_pais_fornecedor THEN
                 LET p_dados_tela.cod_operacao     = "7.", l_parametro_cfop
                 LET p_dados_tela.cod_fiscal_compl = l_parametro_cfop_compl
              ELSE
                 IF p_empresa.uni_feder = l_cod_uni_feder_fornecedor THEN
                    LET p_dados_tela.cod_operacao  = "5.", l_parametro_cfop
                 ELSE
                    LET p_dados_tela.cod_operacao  = "6.", l_parametro_cfop
                 END IF
                 LET p_dados_tela.cod_fiscal_compl = l_parametro_cfop_compl
              END IF
           END IF
        END IF
     END IF
  END IF

 END FUNCTION

# Passo 9  #
# Passo 10 #
#----------------------------------#
 FUNCTION sup3760_wms_depositante()
#----------------------------------#
  DEFINE l_parametro       CHAR(1),
         l_status          SMALLINT,
         l_parametro_texto CHAR(1),
         l_contrato        LIKE wms_contrato.contrato,
         l_regime_armazen  SMALLINT,
         l_tipo            CHAR(1),
         l_tela            CHAR(100),
         l_msg             CHAR(100),
         l_deposit         LIKE fornecedor.cod_fornecedor,
         l_cgc           LIKE empresa.num_cgc,
         l_ins_estadual  LIKE empresa.ins_estadual

  DEFINE lr_depositante RECORD
                           num_docto_provisorio        LIKE nf_sup.num_nf,
                           serie_docto_provisorio      LIKE nf_sup.ser_nf,
                           subserie_docto_provisorio   LIKE nf_sup.ssr_nf,
                           especie_docto_provisorio    LIKE nf_sup.ies_especie_nf,
                           emitente                    LIKE fornecedor.cod_fornecedor,
                           raz_social                  CHAR(50),
                           cnpj                        CHAR(19),
                           inscr_estadual              CHAR(16),
                           depositante                 CHAR(15),
                           den_depositante             LIKE fornecedor.raz_social
                        END RECORD

  INITIALIZE l_tipo TO NULL
  IF m_wms_instal = "S" THEN
     CALL log130_procura_caminho("sup3760r") RETURNING l_tela
     OPEN WINDOW w_sup3760r AT 8,2 WITH FORM l_tela
          ATTRIBUTE (BORDER, PROMPT LINE LAST ,FORM LINE 1)

     CALL log006_exibe_teclas("01,02,07", p_versao)
       CURRENT WINDOW IS w_sup3760r

     LET lr_depositante.num_docto_provisorio      = p_dados_tela.num_nf
     LET lr_depositante.serie_docto_provisorio    = p_dados_tela.ser_nf
     LET lr_depositante.subserie_docto_provisorio = p_dados_tela.ssr_nf
     LET lr_depositante.especie_docto_provisorio  = p_dados_tela.ies_especie_nf
     LET lr_depositante.emitente                  = p_dados_tela.cod_fornecedor
     WHENEVER ERROR CONTINUE
     SELECT raz_social_reduz
       INTO lr_depositante.raz_social
       FROM fornecedor
      WHERE cod_fornecedor = p_dados_tela.cod_fornecedor
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        LET lr_depositante.raz_social = " "
     END IF

     CALL log2250_busca_parametro(p_cod_empresa,"iden_emit_cnpj_inscr_estadual") RETURNING l_parametro, l_status
     LET int_flag = 0
     INPUT BY NAME lr_depositante.* WITHOUT DEFAULTS

        BEFORE FIELD cnpj
           IF l_parametro = "N" THEN
              NEXT FIELD depositante
           END IF

        BEFORE FIELD inscr_estadual
           IF l_parametro = "N" THEN
              NEXT FIELD depositante
           END IF

        BEFORE FIELD depositante
           IF l_parametro = "S" THEN
              NEXT FIELD den_depositante
           END IF
        IF m_wms_instal = "S" AND m_segmento = "I" THEN
            # Se for indústria, sugere o depositante como sendo a própria empresa
            WHENEVER ERROR CONTINUE
            SELECT empresa.num_cgc,
                   empresa.ins_estadual
              INTO l_cgc,
                   l_ins_estadual
              FROM empresa
             WHERE empresa.cod_empresa = p_cod_empresa
            WHENEVER ERROR STOP
            IF  sqlca.sqlcode = 0 THEN
                # Verifica se existe um depositante que seja a própria empresa
                WHENEVER ERROR CONTINUE
                SELECT fornecedor.cod_fornecedor
                  INTO l_deposit
                  FROM fornecedor
                 WHERE fornecedor.num_cgc_cpf = l_cgc
                   AND fornecedor.ins_estadual = l_ins_estadual
                WHENEVER ERROR STOP
                IF  sqlca.sqlcode = 0 THEN
                    LET lr_depositante.depositante = l_deposit
                    IF supm2_fornecedor_leitura(l_deposit,TRUE,1) THEN
                       LET lr_depositante.den_depositante = supm2_fornecedor_get_raz_social()
                    ELSE
                       LET lr_depositante.den_depositante = ''
                    END IF
                    DISPLAY lr_depositante.depositante TO depositante
                    DISPLAY lr_depositante.den_depositante TO den_depositante
                END IF
            END IF
        END IF

        AFTER FIELD depositante
           IF lr_depositante.depositante IS NULL OR
              lr_depositante.depositante = '' THEN
              DISPLAY " " TO depositante
           END IF
           IF m_alterou_tipo_modif THEN
              IF m_tipo_documento_old = "N" OR m_tipo_documento_old = "D" THEN
                 IF m_tipo_documento  = "P" THEN
                    IF NOT sup3760_itens_pertencem_deposit(lr_depositante.depositante) THEN
                       INITIALIZE l_msg TO NULL
                       LET l_msg = "Item ", m_item_interno CLIPPED, " não pertence ao depositante da nota fiscal."
                       CALL log0030_processa_mensagem(l_msg,"exclamation",0)
                       NEXT FIELD depositante
                    END IF
                 END IF
              END IF
           END IF

        AFTER INPUT
           IF int_flag = 0 THEN
              LET m_possui_regime_filial = FALSE
              IF l_parametro = 'S' THEN
                 IF lr_depositante.cnpj IS NULL OR
                    lr_depositante.cnpj = " " THEN
                    CALL log0030_processa_mensagem("CNPJ/CPF não preenchido.","exclamation",0)
                    NEXT FIELD cnpj
                 END IF

                 IF lr_depositante.inscr_estadual IS NULL OR
                    lr_depositante.inscr_estadual = " " THEN
                    WHENEVER ERROR CONTINUE
                    SELECT cod_fornecedor, raz_social
                      INTO lr_depositante.depositante,
                           lr_depositante.den_depositante
                      FROM fornecedor
                     WHERE num_cgc_cpf = lr_depositante.cnpj
                       AND ins_estadual IS NULL
                    WHENEVER ERROR STOP
                    IF sqlca.sqlcode <> 0 THEN
                       CALL log0030_processa_mensagem("Depositante não cadastrado.","exclamation",0)
                       NEXT FIELD cnpj
                    ELSE
                       DISPLAY BY NAME lr_depositante.*
                    END IF
                 ELSE
                    WHENEVER ERROR CONTINUE
                    SELECT cod_fornecedor, raz_social
                      INTO lr_depositante.depositante,
                           lr_depositante.den_depositante
                      FROM fornecedor
                     WHERE num_cgc_cpf  = lr_depositante.cnpj
                       AND ins_estadual = lr_depositante.inscr_estadual
                    WHENEVER ERROR STOP
                    IF sqlca.sqlcode <> 0 THEN
                       CALL log0030_processa_mensagem("Depositante não cadastrado.","exclamation",0)
                       NEXT FIELD cnpj
                    ELSE
                       DISPLAY BY NAME lr_depositante.*
                    END IF
                 END IF
#                 IF lr_depositante.depositante = lr_depositante.emitente THEN
#                    CALL log0030_processa_mensagem("Depositante deve ser diferente do emitente.","exclamation",0)
#                    NEXT FIELD cnpj
#                 END IF

                 # Buscar na tabela sup_par_fornecedor
                 # se o código informado é de um depositante
                 WHENEVER ERROR CONTINUE
                 SELECT parametro_texto
                   INTO l_parametro_texto
                   FROM sup_par_fornecedor
                  WHERE empresa    = "SE"
                    AND fornecedor = lr_depositante.depositante
                    AND parametro  = "ies_depositante"
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode = 0        OR
                    sqlca.sqlcode = NOTFOUND THEN
                    IF l_parametro_texto = "N" THEN
                       CALL log0030_processa_mensagem("Emitente informado não é um depositante.","exclamation",0)
                       NEXT FIELD cnpj
                    END IF
                 END IF

                 CALL wmst15_retorna_contrato_ativo_deposit(p_cod_empresa,
                                                            lr_depositante.depositante,
                                                            TODAY,
                                                            0) RETURNING l_contrato, l_status
                 IF l_contrato = "0" THEN
                    CALL log0030_processa_mensagem("Depositante não possui contrato ativo.","exclamation",0)
                    NEXT FIELD cnpj
                 ELSE
                    IF  m_segmento <> "I" THEN # Marcegaglia 14/07
                        LET m_possui_regime_filial = FALSE
                        IF wmsm15_wms_contrato_leitura(p_cod_empresa,
                                                       wmst15_wms_contrato_busca_transacao(p_cod_empresa,l_contrato) ,
                                                       TRUE,
                                                       1) THEN
                           IF wmsm15_wms_contrato_get_regime_armazen() = "F" THEN
                              CALL log0030_processa_mensagem("Regime de armazenagem deste depositante é FILIAL, a nota fiscal será considerada como DEFINITIVA.","exclamation",0)
                              LET l_tipo = "B"
                              LET m_possui_regime_filial = TRUE
                           END IF
                        END IF
                    END IF
                 END IF
              ELSE
                 WHENEVER ERROR CONTINUE
                 SELECT cod_fornecedor, raz_social
                   INTO lr_depositante.depositante,
                        lr_depositante.den_depositante
                   FROM fornecedor
                  WHERE cod_fornecedor = lr_depositante.depositante
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode <> 0 THEN
                    CALL log0030_processa_mensagem("Depositante não cadastrado.","exclamation",0)
                    NEXT FIELD depositante
                 ELSE
                    DISPLAY BY NAME lr_depositante.*
                 END IF

#                 IF lr_depositante.depositante = lr_depositante.emitente THEN
#                    CALL log0030_processa_mensagem("Depositante deve ser diferente do emitente.","exclamation",0)
#                    NEXT FIELD cnpj
#                 END IF

                 # Buscar na tabela sup_par_fornecedor
                 # se o código informado é de um depositante
                 WHENEVER ERROR CONTINUE
                 SELECT parametro_texto
                   INTO l_parametro_texto
                   FROM sup_par_fornecedor
                  WHERE empresa    = "SE"
                    AND fornecedor = lr_depositante.depositante
                    AND parametro  = "ies_depositante"
                 WHENEVER ERROR STOP
                 IF sqlca.sqlcode = 0        OR
                    sqlca.sqlcode = NOTFOUND THEN
                    IF l_parametro_texto = "N" THEN
                       CALL log0030_processa_mensagem("Emitente informado não é um depositante.","exclamation",0)
                       NEXT FIELD cnpj
                    END IF
                 END IF

                 CALL wmst15_retorna_contrato_ativo_deposit(p_cod_empresa,
                                                            lr_depositante.depositante,
                                                            TODAY,
                                                            0) RETURNING l_contrato, l_status
                 IF l_contrato = "0" THEN
                    CALL log0030_processa_mensagem("Depositante não possui contrato ativo.","exclamation",0)
                    NEXT FIELD cnpj
                 ELSE
                    IF  m_segmento <> "I" THEN # Marcegaglia 14/07
                        LET m_possui_regime_filial = FALSE
                        IF wmsm15_wms_contrato_leitura(p_cod_empresa,
                                                       wmst15_wms_contrato_busca_transacao(p_cod_empresa,l_contrato) ,
                                                       TRUE,
                                                       1) THEN
                           IF wmsm15_wms_contrato_get_regime_armazen() = "F" THEN
                              CALL log0030_processa_mensagem("Regime de armazenagem deste depositante é FILIAL, a nota fiscal será considerada como DEFINITIVA.","exclamation",0)
                              LET l_tipo = "B"
                              LET m_possui_regime_filial = TRUE
                           END IF
                        END IF
                    END IF
                 END IF
              END IF
           END IF

        ON KEY (control-z,f4)
            CALL sup3760_wms_popup("sup3760r") RETURNING lr_depositante.cnpj,
                                                         lr_depositante.inscr_estadual,
                                                         lr_depositante.depositante,
                                                         lr_depositante.den_depositante
           IF l_parametro = 'N' THEN
              LET lr_depositante.cnpj           = NULL
              LET lr_depositante.inscr_estadual = NULL
           END IF

           DISPLAY BY NAME lr_depositante.*

     END INPUT

  END IF

  CLOSE WINDOW w_sup3760r

  # Alimenta a vaiável modular como depositante informado na tela
  LET m_wms_depositante = lr_depositante.depositante

  RETURN l_tipo, (NOT int_flag)

 END FUNCTION

# Passo 17 #
#------------------------------------------#
 FUNCTION sup376_insere_array_wms(p_funcao)
#------------------------------------------#
 DEFINE p_funcao                        CHAR(30),
        p_val_liquido_item              LIKE aviso_rec.val_liquido_item,
        p_val_liquido_ant               LIKE aviso_rec.val_liquido_item,
        p_par_forn                      CHAR(01),
        p_ind_ant                       SMALLINT,
        l_fat_conver_consig             LIKE item_fornec.fat_conver_unid,
        l_sucesso                       SMALLINT,
        l_item_wms                      SMALLINT,
        l_ind_envio_interf              SMALLINT,
        l_cod_cla_fisc_nf               LIKE aviso_rec.cod_cla_fisc_nf,
        l_qtd_declarad_nf               LIKE aviso_rec.qtd_declarad_nf,
        l_val_liquido_item              LIKE aviso_rec.val_liquido_item,
        l_pct_ipi                       LIKE aviso_rec.pct_ipi_tabela,
        l_ies_item_estoq                LIKE aviso_rec.ies_item_estoq,
        l_item_balanca                  LIKE sup_ctr_balanca.item,
        l_pes_liquido                   LIKE sup_ctr_balanca.pesagem_entrada,
        l_status                        SMALLINT,
        l_dat_fim_valid                 LIKE cod_fiscal_sup.dat_fim_valid,
        l_den_item                      LIKE item.den_item,
        l_aux                           SMALLINT,
        l_val_tot_piscofins             DECIMAL(17,6),
        l_grade                         SMALLINT,
        l_perg_it_movto_estoq           CHAR(1),         #Vanderlei - OS 400614 #
        l_entra_grades                  SMALLINT,
        l_ies_situacao                  CHAR(01),
        l_item_interno                  LIKE sup_par_itforn.item,
        l_item_depositante              CHAR(25),
        l_wms_item_aux                  CHAR(15),
        l_continua                      SMALLINT,
        l_wms_qtd_declarad_nf_aux       INTEGER,
        l_cod_unid_med                  LIKE item.cod_unid_med,
        l_depositante                   LIKE fornecedor.cod_fornecedor,
        l_sucesso_sql                   SMALLINT,
        l_forn_possui_pc                SMALLINT,
        l_ies_item_wms                  SMALLINT,
        l_sqlcode                       SMALLINT,
        l_possui_q04                    SMALLINT

 DEFINE la_dados_ant      ARRAY[999] OF RECORD
                          pre_unit_nf     LIKE aviso_rec.pre_unit_nf,
                          qtd_declarad_nf LIKE aviso_rec.qtd_declarad_nf
                          END RECORD

 CALL log006_exibe_teclas("01 02 03 07", p_versao)
 CURRENT WINDOW IS w_sup37601
 LET p_primeira_vez = TRUE
 LET p_funcao_menu = p_funcao
 LET l_possui_q04 = FALSE

 IF p_funcao = "MODIFICACAO" THEN
    CALL set_count(p_ind)
 ELSE
    # Alteração WMS OS: 450083
    {FOR l_aux = 1 TO 999
       INITIALIZE p_array[l_aux].* TO NULL
       INITIALIZE p_array_wms[l_aux].* TO NULL
       IF l_aux <= 4 THEN
          DISPLAY p_array_wms[l_aux].* TO s_sup37601[l_aux].*
       END IF
    END FOR}
    CALL set_count(999)
 END IF

 IF p_funcao <> "MODIFICACAO" THEN
    IF p_dados_tela.ies_especie_nf = "NFD" THEN
       IF g_ser_mark = FALSE THEN
          INITIALIZE p_array TO NULL
       END IF
    END IF
 END IF
 IF p_funcao = "INCLU.ITENS" THEN
    INITIALIZE p_ordens, p_ordens_p1, p_ordens_p2, p_ordens_p3, p_ordens_p4 TO NULL
    INITIALIZE p_pedidos, p_pedidos_p1, p_pedidos_p2, p_pedidos_p3 TO NULL
    INITIALIZE p_prog_ordem TO NULL
    INITIALIZE p_prog_ordem1 TO NULL
    INITIALIZE p_prog_ordem2 TO NULL
    IF p_dados_tela.ies_especie_nf = "NFD" OR
       p_dados_tela.ies_especie_nf = "NFR" THEN
    ELSE
# OS 463020
       WHILE TRUE
#      LABEL pedido:
          IF sup376_entrada_pedido_ordem(p_funcao) = FALSE THEN
             LET int_flag = 1
             RETURN FALSE
          ELSE
             IF (p_pedidos[1,5] = "XXXXX") OR
                (p_pedidos IS NULL) THEN
                IF p_par_sup.ies_entrada_sem_pc = "N" AND
                   p_ies_informou_ped = "N" AND
                   p_ies_entr_sem_ped = FALSE THEN

                   LET l_forn_possui_pc = TRUE
                   IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
                      LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
                   END IF

                   IF l_forn_possui_pc THEN
                      IF p_dados_tela.ies_especie_nf IS NOT NULL THEN
                         IF (p_dados_tela.ies_especie_nf <> "NFR" AND
                             p_dados_tela.ies_especie_nf <> "NFD" AND
                             p_dados_tela.ies_especie_nf <> "NFC" AND
                             p_dados_tela.ies_especie_nf <> "CON" AND
                             p_dados_tela.ies_especie_nf <> "NFE") OR
                            (p_par_sup_compl.ies_nf_compl_preco = "4" AND
                             (p_dados_tela.ies_especie_nf = "NFE" OR
                              p_dados_tela.ies_especie_nf = "NFC")) OR
                            (p_par_sup_compl.ies_nf_compl_preco = "3" AND
                             p_dados_tela.ies_especie_nf = "NFC") OR
                            (p_par_sup_compl.ies_nf_compl_preco = "2" AND
                             p_dados_tela.ies_especie_nf = "NFE") THEN
                            CALL log0030_mensagem(" Funcao nao permitida, empresa nao permite entrada sem pedido de compra","exclamation")
# 463020
                            CONTINUE WHILE
#                           GOTO pedido
                         END IF
                      END IF
                   END IF
                ELSE
                   IF p_dados_tela.ies_especie_nf = "NFM" AND m_controla_gao = "S" THEN
                      IF p_array_pedidos[1].num_pedido IS NULL OR
                         p_array_pedidos[1].num_pedido = " " THEN
                         CALL log0030_mensagem(" Função não permitida, NFM com controle de GAO exige pedido de compra","exclamation")
# 463020
                         CONTINUE WHILE
#                        GOTO pedido
                      END IF
                   END IF
                END IF
             END IF
          END IF
# 463020
          EXIT WHILE
       END WHILE
    END IF
 END IF

 IF p_funcao = "INCLUSAO" OR
    p_funcao = "INCLU.ITENS" THEN
    IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
       LET p_nf_sup.val_ipi_nf = 0
       LET p_nf_sup.val_tot_icms_nf_d = 0
       LET p_nf_sup.val_tot_nf_d = 0
       LET p_nf_sup.val_despesa_aces = 0
       LET p_dados_tela_f.val_ipi_nf = 0
       LET p_dados_tela_f.val_tot_icms_nf_d = 0
       LET p_dados_tela_f.val_tot_nf_d      = 0
    END IF

    FOR p_ind9 = 1 TO 999
       IF p_array_compl[p_ind9].num_oc IS NOT NULL AND
          p_array_compl[p_ind9].num_oc <> 0 THEN
          IF sup376_verifica_controla_valor(p_array_compl[p_ind9].num_oc) = TRUE THEN
             LET p_array_wms[p_ind9].pre_unit_nf = NULL
          END IF
          CALL sup376_processa_conversao(p_ind9)
          IF p_houve_erro THEN
             RETURN FALSE
          END IF
       END IF
    END FOR
 END IF

 IF p_funcao = "MODIFICACAO" THEN
    FOR p_ind9 = 1 TO 999
        IF p_array_wms[p_ind9].cod_item IS NOT NULL THEN
           LET p_array_compl[p_ind9].ies_bloqueada = "N"
        ELSE
           EXIT FOR
        END IF
    END FOR
 END IF
 IF p_funcao = "INCLU.ITENS"
 THEN
    FOR p_ind9 = 1 TO 999
        IF p_array_wms[p_ind9].cod_item IS NOT NULL THEN
           LET  p_array_wms[p_ind9].seq = (p_prx_seq - 1) + p_ind9
        END IF
    END FOR
 END IF
 IF p_aguard_5 = TRUE THEN
    IF p_funcao = "INCLUSAO" THEN
       LET p_dados_tela.ies_nf_aguard_nfe = "5"
       DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
    END IF

    IF p_ies_cod_operac IS NULL OR
       p_ies_cod_operac = "N" OR
       p_ies_cod_operac = " " THEN
    ELSE
       DISPLAY BY NAME p_dados_tela.cod_operac_estoq
    END IF
 END IF

 IF p_dados_tela.ies_nf_aguard_nfe = "D" AND
    p_funcao = "INCLUSAO" THEN
    IF g_ser_mark = FALSE THEN
       INITIALIZE p_array TO NULL
    END IF
 END IF

 LET m_alterou_preco = FALSE

 FOR l_aux = 1 TO 999
    LET la_dados_ant[l_aux].pre_unit_nf   = p_array_wms[l_aux].pre_unit_nf
    LET la_dados_ant[l_aux].qtd_declarad_nf = p_array_wms[l_aux].qtd_declarad_nf
 END FOR

 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                              p_cod_empresa,
                              p_dados_tela.num_aviso_rec) THEN
    FOR l_aux = 1 TO 999
       LET p_array_wms[l_aux].cod_item         = " "
       LET p_array_wms[l_aux].qtd_declarad_nf  = 0
       LET p_array_wms[l_aux].pre_unit_nf      = 0
       LET p_array_wms[l_aux].val_liquido_item = 0
    END FOR
 END IF

 #WMS - Início Chamado 763456
 IF find4GLFunction('wmsy18_permite_modificacao_item_nf_sup') THEN
    IF m_wms_instal = "S" THEN
       IF p_funcao = "INCLUSAO" AND m_wms_gravou_q04 THEN
          LET l_possui_q04 = TRUE
          CALL set_count(p_ind_tela)
       ELSE
          IF NOT wmsy18_permite_modificacao_item_nf_sup(p_cod_empresa,
                                                        p_dados_tela.num_aviso_rec, 1) THEN
             LET l_possui_q04 = TRUE
             LET p_ind_tela   = p_ind
          END IF
       END IF
    END IF
 END IF
 #WMS - Fim Chamado 763456

 INPUT ARRAY p_array_wms WITHOUT DEFAULTS FROM s_sup37601.*

    --#BEFORE INPUT
       --#  CALL fgl_dialog_setkeylabel('insert',NULL)
       --#  CALL fgl_dialog_setkeylabel('delete',NULL)

    ON KEY (INSERT)
       NEXT FIELD seq

    ON KEY (DELETE)
       NEXT FIELD seq

    BEFORE FIELD seq
       IF m_ver_aviso_rec = TRUE THEN
          EXIT INPUT
       END IF
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

       IF p_funcao = "INCLU.ITENS" THEN
          LET p_array_wms[1].seq = p_prx_seq
          DISPLAY p_array_wms[1].seq TO s_sup37601[1].seq
       END IF

       IF p_funcao <> "MODIFICACAO" THEN
          IF p_dados_tela.ies_especie_nf = "NFD" THEN
             IF g_ser_mark = FALSE THEN
                CALL sup376_inicializa_nfd_nfr()
                DISPLAY p_array_wms[p_ind].* TO s_sup37601[p_ind1].*
             END IF
          END IF
       END IF

        ### OS 159597
       IF m_contr_pes_rec = 'S' THEN #eduardo - o.s.290538 19/11/03
          WHENEVER ERROR CONTINUE
          INITIALIZE l_item_balanca, l_pes_liquido TO NULL
          SELECT item,
                 qtd_peso_entrada - qtd_peso_saida
            INTO l_item_balanca,
                 l_pes_liquido
            FROM sup_ctr_balanca
           WHERE empresa           = p_cod_empresa
             AND num_docum         = p_dados_tela.num_nf
             AND serie_nota_fiscal = p_dados_tela.ser_nf
             AND subserie_nf       = p_dados_tela.ssr_nf
             AND fornecedor        = p_dados_tela.cod_fornecedor
             AND seq_nota_fiscal   = p_ind
             AND tip_pesagem       = "1"
             AND aviso_recebto     IS NULL
          WHENEVER ERROR STOP
       END IF

       CURRENT WINDOW IS w_sup37601
       NEXT FIELD cod_item

    BEFORE FIELD cod_item
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       #WMS - Início Chamado 763456
       IF l_possui_q04 AND p_funcao <> "MODIFICACAO" THEN
           LET p_array[p_ind].seq              = p_array_wms[p_ind].seq
           LET p_array[p_ind].cod_item         = p_array_wms[p_ind].cod_item
           LET p_array[p_ind].qtd_declarad_nf  = p_array_wms[p_ind].qtd_declarad_nf
           LET p_array[p_ind].cod_unid_med_nf  = p_array_wms[p_ind].cod_unid_med_nf
           LET p_array[p_ind].pre_unit_nf      = p_array_wms[p_ind].pre_unit_nf
           LET p_array[p_ind].val_liquido_item = p_array_wms[p_ind].val_liquido_item
           LET p_array[p_ind].den_item         = p_array_wms[p_ind].den_item
           LET p_array[p_ind].cod_cla_fisc_nf  = p_array_wms[p_ind].cod_cla_fisc_nf
           LET p_array[p_ind].pct_ipi          = p_array_wms[p_ind].pct_ipi
          NEXT FIELD pre_unit_nf
       END IF
       #WMS - Fim Chamado 763456
       IF (p_dados_tela.ies_especie_nf <> "NFD" AND
           p_dados_tela.ies_especie_nf <> "NFR" AND
          (p_array_compl[p_ind].num_pedido IS NULL OR
           p_array_compl[p_ind].num_pedido = " "   OR
           p_array_compl[p_ind].num_pedido = 0))   OR
          (p_dados_tela.ies_especie_nf = "NFR" OR
           p_dados_tela.ies_especie_nf = "NFD") THEN
          CALL sup3760_botao_zoom("ON",3,68)
       END IF
       IF p_funcao = "INCLUSAO" THEN
          LET p_array_wms[p_ind].seq = p_ind
          DISPLAY p_array_wms[p_ind].seq TO s_sup37601[p_ind1].seq
       END IF
       IF p_funcao = "INCLU.ITENS" THEN
          IF p_ind1 > 1 THEN
             LET p_sequencia = NULL
             LET p_sequencia = p_array_wms[p_ind - 1].seq
             LET p_sequencia = p_sequencia + 1
             LET p_array_wms[p_ind].seq = p_sequencia
             DISPLAY p_array_wms[p_ind].seq TO s_sup37601[p_ind1].seq
          END IF
       END IF

       INITIALIZE p_cod_moeda_ped TO NULL
       IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
          LET p_cod_moeda_ped = p_processo_imp.cod_moeda
       ELSE
          CALL sup376_busca_pedido_sup(p_cod_empresa, p_array_compl[p_ind].num_pedido)
          LET p_cod_moeda_ped = p_pedido_sup.cod_moeda
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          LET p_array_compl[p_ind].qtd_declarad_nf = NULL
          IF p_array_wms[p_ind].cod_item IS NULL OR
             #nota de complemento de imposto só tem 1 item já que é sem informações..
             (sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                        p_cod_empresa,
                                        p_dados_tela.num_aviso_rec) AND
              p_ind >1) THEN
             LET p_entra_tot = "S"
             EXIT INPUT
          END IF

          CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array_wms[p_ind].seq)
          LET p_array_compl[p_ind].ies_bloqueada = "N"

          ### Nota de complemento de valor permite alterar o item!!!
          IF sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                                       p_cod_empresa,
                                       p_dados_tela.num_aviso_rec) = FALSE THEN
             NEXT FIELD cod_unid_med_nf
          END IF

       END IF
       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) THEN
          LET p_array_wms[p_ind].cod_item = " "
          NEXT FIELD qtd_declarad_nf
       END IF

    AFTER FIELD cod_item
       #LET p_array[p_ind].* = p_array_wms[p_ind].*

       LET p_array[p_ind].seq              = p_array_wms[p_ind].seq
       LET p_array[p_ind].cod_item         = p_array_wms[p_ind].cod_item
       LET p_array[p_ind].qtd_declarad_nf  = p_array_wms[p_ind].qtd_declarad_nf
       LET p_array[p_ind].cod_unid_med_nf  = p_array_wms[p_ind].cod_unid_med_nf
       LET p_array[p_ind].pre_unit_nf      = p_array_wms[p_ind].pre_unit_nf
       LET p_array[p_ind].val_liquido_item = p_array_wms[p_ind].val_liquido_item
       LET p_array[p_ind].den_item         = p_array_wms[p_ind].den_item
       LET p_array[p_ind].cod_cla_fisc_nf  = p_array_wms[p_ind].cod_cla_fisc_nf
       LET p_array[p_ind].pct_ipi          = p_array_wms[p_ind].pct_ipi

       IF p_array_wms[p_ind].cod_item IS NOT NULL AND
          p_array_wms[p_ind].cod_item <> " " AND int_flag = 0 THEN
          # Passo 18.1 #
          CALL sup3760_localiza_item_deposit_fornec(p_array_wms[p_ind].cod_item,
                                                    p_dados_tela.cod_fornecedor)
                                                    RETURNING l_item_depositante,
                                                              l_status,
                                                              l_continua
          IF l_status THEN
             #LET p_array[p_ind].cod_item = l_item_interno
             LET p_array_wms[p_ind].cod_item = l_item_depositante
             DISPLAY p_array_wms[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
          ELSE
             # Caso de erro de SQL
             IF l_continua = FALSE THEN
                #CALL log0030_processa_mensagem("Item do depositante não encontrado.","exclamation",0)
                NEXT FIELD cod_item
             END IF
          END IF

          # Passo 18.2 e Passo 18.3 #
          CALL sup3760_wms_busca_item_complemento(p_array_wms[p_ind].cod_item)
                                                  RETURNING l_item_interno,
                                                            l_status
          IF l_status THEN
             LET p_array[p_ind].cod_item = l_item_interno
             DISPLAY p_array_wms[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
          ELSE
             CALL log0030_processa_mensagem("Item não cadastrado ou pertencente a outro depositante.","exclamation",0)
             NEXT FIELD cod_item
          END IF

          CALL wmsm81_wms_item_complemento_leitura(p_cod_empresa,
                                                   p_array[p_ind].cod_item,
                                                   TRUE,
                                                   1) RETURNING l_status
       END IF

       CALL sup3760_botao_zoom("OFF",3,68)

       IF p_array[p_ind].cod_item IS NOT NULL AND
          p_array[p_ind].cod_item <> " " THEN
          #--------------------------#
          # Alteração WMS OS: 450083 #
          #--------------------------#

          # Não permitir digitar um item se ele for controlado pelo WMS
          # e não tiver controle de estoque.
          IF m_wms_instal = "S" THEN
             IF g_ies_wms_instalado = "S" THEN
                CALL wms0004_item_sob_controle_wms(p_cod_empresa, p_array[p_ind].cod_item )
                     RETURNING l_sucesso_sql, l_ies_item_wms
                IF l_sucesso_sql AND l_ies_item_wms THEN
                   IF NOT sup3760_ies_item_ctr_estoq(p_cod_empresa, p_array[p_ind].cod_item ) THEN
                      CALL log0030_mensagem('Para item controlado pelo WMS o mesmo deve possuir controle de estoque.','exclamation')
                      NEXT FIELD cod_item
                   END IF
                END IF
             END IF
          END IF
          #--------------------------#

          ### Não permitir digitar um item bloqueado pelo WMS (SIT_BLOQUEIO_ITEM igual a "1" na tabela WMS_ITEM_COMPLEMENTO)
          IF wms6135_verifica_bloqueio_wms(p_cod_empresa, p_array[p_ind].cod_item, 0) = FALSE THEN
             CALL log0030_mensagem('O item encontra-se bloqueado por não possuir saldo ou ter excedido o prazo de movimentação (MAN9922).','exclamation')
             NEXT FIELD cod_item
          END IF

       END IF

       IF p_funcao = "MODIFICACAO" THEN
          ### Nota de complemento de valor permite alterar o item!!!
          IF sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                                     p_cod_empresa,
                                     p_dados_tela.num_aviso_rec) = FALSE THEN
             NEXT FIELD den_item
          END IF
       END IF

       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

       #------------------------------------------------------------------------------------------#
       #Se for informado codigo de barra do item em tela, este será convertido para o código de
       #cadastro do item se o parametro para conversao automática estiver ativo e codigo informado
       #estiver registrado como codigo de barra valido na tabela ITEM_BARRA ou ITEM_BARRA_FORNEC.
       LET p_array[p_ind].cod_item =
           sup3760_conversao_item_codigo_barra(p_array[p_ind].cod_item,p_dados_tela.cod_fornecedor)
       #DISPLAY p_array[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
       #------------------------------------------------------------------------------------------#
       # Passo 18 - Busca item interno
       IF p_dados_tela.ies_nf_aguard_nfe = "A" OR
          p_dados_tela.ies_nf_aguard_nfe = "B" OR
          p_dados_tela.ies_nf_aguard_nfe = "7" THEN
          # Se a NF for do tipo 7-(Material em trânsito) exibir os códigos dos itens
          # do depositante se o mesmo for encontrado na wms_item_complemento.
          CALL wmst81_wms_item_complemento_get_dados_deposit(p_cod_empresa,
                                                             p_array[p_ind].cod_item,
                                                             1) RETURNING l_status,
                                                                          l_depositante,
                                                                          l_item_depositante
          IF l_item_depositante IS NOT NULL AND
             l_item_depositante <> " " THEN
             LET p_array_wms[p_ind].cod_item = l_item_depositante
             DISPLAY p_array_wms[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
          END IF
       END IF
       #------------------------------------------------------------------------------------------#

       IF m_ies_cit_item = "S" THEN
          IF sup3760_testa_cit_item(p_array[p_ind].cod_item) THEN
             ERROR "Produto Citricola, verificar tabela CIT_ITEM "
             NEXT FIELD cod_item
          END IF
       END IF

       CALL sup376_busca_item(p_cod_empresa, p_array[p_ind].cod_item)
            RETURNING p_status
       IF p_status = FALSE THEN
          #Se não existe na tabela ITEM, pesquisar o código do item informado
          #como código do item no cliente na tabela CLIENTE_ITEM.
          IF p_array[p_ind].cod_item IS NOT NULL AND
             p_array[p_ind].cod_item <> " " THEN
             IF p_dados_tela.ies_especie_nf = "NFD" OR
                p_dados_tela.ies_especie_nf = "NFR" THEN
                IF sup376_verifica_cliente_item() = FALSE THEN
                   ERROR " Material nao cadastrado "
                   NEXT FIELD cod_item
                END IF
             ELSE
                ERROR " Material nao cadastrado "
                NEXT FIELD cod_item
             END IF
          ELSE
             IF p_dados_tela.ies_especie_nf = "NFC" THEN
                LET p_array[p_ind].cod_item = " "
                LET p_array_wms[p_ind].cod_item = " "
             END IF
          END IF
       END IF

       #OS 492297
       IF p_array[p_ind].cod_item IS NOT NULL AND
          p_array[p_ind].cod_item <> " " THEN
          IF p_item.ies_situacao = 'I' THEN
          ## Permitir entrada de nota de devolução de cliente ou NFC para item inativo.
             IF (p_dados_tela.ies_especie_nf = 'NFD' OR p_ies_tip_entrada = '5') OR
                (p_dados_tela.ies_especie_nf = 'NFC') THEN
                IF log0040_confirm(0,0,'Item INATIVO. Continua processamento?') THEN
                ELSE NEXT FIELD cod_item
                END IF
             ELSE
                CALL log0030_mensagem('Item INATIVO.','excla')
                NEXT FIELD cod_item
             END IF
          ELSE
             IF p_item.ies_situacao = 'C' THEN
                IF p_ies_rec_item_cancel = 'S' THEN
                   IF log0040_confirm(0,0,'Material está CANCELADO. Continua processamento? ') THEN
                   ELSE NEXT FIELD cod_item
                   END IF
                ELSE
                   CALL log0030_mensagem('Material está CANCELADO.','excla')
                   NEXT FIELD cod_item
                END IF
             END IF
          END IF
       END IF

       IF sup3762_verifica_material_ipi(TRUE) = FALSE  THEN
          LET p_array_compl[p_ind].ies_item_estoq = "N"
          LET p_array_compl[p_ind].move_estoque   = "N"
          LET p_array_compl[p_ind].ies_liberacao_insp = "N"
          LET p_array_compl[p_ind].ies_controle_lote  = "N"
          LET p_array_compl[p_ind].cod_local_estoq    = " "
          LET p_array_compl[p_ind].cod_cla_fisc = " "
          LET p_array_compl[p_ind].pct_ipi_tabela = 0
       END IF

       IF find4GLFunction('supy22_busca_den_item') THEN
          CALL supy22_busca_den_item(p_cod_empresa, p_array_compl[p_ind].num_oc)
               RETURNING p_status, l_den_item
       ELSE
          LET p_status   = FALSE
          LET l_den_item = 0
       END IF

       IF p_status = TRUE THEN
          LET p_array[p_ind].den_item = l_den_item
       END IF

       DISPLAY p_array_wms[p_ind].den_item        TO s_sup37601[p_ind1].den_item
       DISPLAY p_array_wms[p_ind].cod_unid_med_nf TO s_sup37601[p_ind1].cod_unid_med_nf

       #------------- DEV. CLIENTES ---------------#
       IF (p_dados_tela.ies_especie_nf = "NFD" OR
           p_ies_tip_entrada = "5") THEN
          IF p_array_compl[p_ind].ies_item_estoq = "S" THEN
             IF p_par_sup_compl.cod_operac_dev_cli IS NOT NULL AND
                p_par_sup_compl.cod_operac_dev_cli <> " " THEN
             ELSE
                ERROR " Operacao de devolucao nao cadastrada - Ver SUP7160 "
                SLEEP 2
                LET p_array_compl[p_ind].ies_item_estoq = "N"
                LET p_array_compl[p_ind].move_estoque   = "N"
             END IF
          END IF
       END IF
       #------------- DEV. CLIENTES ---------------#
       LET l_ies_item_estoq = p_array_compl[p_ind].ies_item_estoq

       #--------------------------#
       # Alteração WMS OS: 450083 #
       #--------------------------#
       # Passo 24                 #
       IF m_wms_instal <> "S" THEN
          IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
             LET p_array_compl[p_ind].ies_item_estoq = "N"
          END IF
       END IF

       #-- Desativa flag no SUP3762 para que não busque a conta contábil      --#
       #-- no SUP1400, e sim apenas continue fazendo como é feito atualmente  --#
       CALL sup3762_seta_cta_n_estoq_ret_terc("N",p_ind) #Vanderlei - OS 382815 #
       IF p_dados_tela.ies_especie_nf = "NFR" AND m_nfr_import = FALSE THEN
          IF p_array[p_ind].cod_item IS NOT NULL AND
             p_array[p_ind].cod_item <> " " THEN
             IF l_ies_item_estoq = "S" THEN
                CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor, p_array[p_ind].cod_item,p_dados_tela.dat_emis_nf,p_dados_tela.num_aviso_rec)
                RETURNING p_par_forn
                IF p_par_forn <> "3" THEN
                   CALL sup376_busca_parametros_item(p_array[p_ind].cod_item)
                   LET p_parametros = p_item_parametro.parametros[2,2]
                   IF p_parametros = "1" THEN
                      LET p_array_compl[p_ind].move_estoque = "N"
                      LET p_array_compl[p_ind].ies_item_estoq = "N"
                   ELSE
                      IF p_dados_tela.ies_nf_aguard_nfe <> "4" AND
                         p_dados_tela.ies_nf_aguard_nfe <> "5" AND
                         (p_parametros <> "6" OR p_parametros IS NULL)THEN
                         IF p_dados_tela.ies_especie_nf = "NFR" AND
                            p_dados_tela.ies_nf_aguard_nfe = "X" THEN
                            LET p_array_compl[p_ind].move_estoque   = "N"
                            LET p_array_compl[p_ind].ies_item_estoq = "N"
                            #-- Ativa flag no SUP3762 para que busque a conta contábil no SUP1400  --#
                            CALL sup3762_seta_cta_n_estoq_ret_terc("S",p_ind) #Vanderlei - OS 382815 #
                         ELSE
                            IF log0040_confirm(18,10,"Este item deve ser movimentado na conta ESTOQUE?") THEN
                               LET p_array_compl[p_ind].move_estoque   = "S"
                               LET p_array_compl[p_ind].ies_item_estoq = "S"
                            ELSE
                               LET p_array_compl[p_ind].move_estoque   = "N"
                               LET p_array_compl[p_ind].ies_item_estoq = "N"
                               #-- Ativa flag no SUP3762 para que busque a conta contábil no SUP1400  --#
                               CALL sup3762_seta_cta_n_estoq_ret_terc("S",p_ind) #Vanderlei - OS 382815 #
                            END IF
                         END IF
                      ELSE
                         IF p_parametros = "6" THEN
                            IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
                               #--------------------------#
                               # Alteração WMS OS: 450083 #
                               #--------------------------#
                               # Passo 24                 #
                               IF m_wms_instal <> "S" THEN
                                  LET p_array_compl[p_ind].move_estoque = "N"
                                  LET p_array_compl[p_ind].ies_item_estoq = "N"
                               END IF
                            ELSE
                               LET p_array_compl[p_ind].move_estoque = "S"
                               LET p_array_compl[p_ind].ies_item_estoq = "S"
                            END IF
                         ELSE
                            LET p_array_compl[p_ind].move_estoque = "N"
                            LET p_array_compl[p_ind].ies_item_estoq = "N"
                         END IF
                      END IF
                   END IF
                END IF
             END IF
          END IF
       END IF
       IF p_dados_tela.ies_especie_nf <> "NFD" AND
          p_dados_tela.ies_especie_nf <> "NFR" OR
          (p_dados_tela.ies_especie_nf = "NFR" AND
          p_array_compl[p_ind].move_estoque = "S") THEN
          CALL sup376_verifica_fornec_credenc(p_array[p_ind].cod_item,
                                              p_dados_tela.cod_fornecedor)
       END IF
       IF p_array_compl[p_ind].num_pedido IS NOT NULL AND
          p_array_compl[p_ind].num_pedido <> 0 AND
          p_array_compl[p_ind].num_pedido <> " " THEN
          INITIALIZE p_ordem_sup.* TO NULL
          CALL sup3762_busca_ordem_sup(p_cod_empresa,
                                      p_array_compl[p_ind].num_oc)
          LET p_cod_item_oc = p_ordem_sup.cod_item
          IF p_dados_tela.ies_nf_aguard_nfe <> "D"
          THEN
              IF p_cod_item_oc <> p_array[p_ind].cod_item THEN
                CALL log0030_mensagem('Material informado difere do material da Ordem de Compra','excla')
                NEXT FIELD cod_item
              END IF
          ELSE WHENEVER ERROR CONTINUE
               SELECT * FROM item_em_terc_envio
                WHERE cod_empresa    = p_cod_empresa
                  AND ped_compra     = p_array_compl[p_ind].num_pedido
                  AND cod_compon     = p_array[p_ind].cod_item
               WHENEVER ERROR STOP
               IF sqlca.sqlcode <> 0
               THEN
                   CALL log0030_mensagem('Material informado não consta como Item Enviado a Terceiros','excla')
                   NEXT FIELD cod_item
               END IF
          END IF
       END IF

       IF l_item_balanca IS NOT NULL THEN
          IF l_item_balanca <> p_array[p_ind].cod_item THEN
             ERROR " Item informado difere do item da pesagem "
             NEXT FIELD cod_item
          END IF
       END IF

       #--inicio--vanderlei OS 400614 #
       CALL log2250_busca_parametro(p_cod_empresa,"pergunta_item_movto_estoq_nfd")
          RETURNING l_perg_it_movto_estoq, p_status

       IF p_array[p_ind].cod_item IS NOT NULL AND
          p_array[p_ind].cod_item <> " " THEN
          IF l_perg_it_movto_estoq = 'S' THEN
             IF (p_dados_tela.ies_especie_nf = 'NFD' OR p_ies_tip_entrada = '5') THEN
                IF sup3760_ies_item_ctr_estoq(p_cod_empresa, p_array[p_ind].cod_item) THEN
                   IF log0040_confirm(15,45,'Item deve movimentar estoque?') THEN
                      LET p_array_compl[p_ind].ies_item_estoq = 'S'
                      LET p_array_compl[p_ind].move_estoque   = 'S'
                   ELSE
                      LET p_array_compl[p_ind].ies_item_estoq = 'N'
                      LET p_array_compl[p_ind].move_estoque   = 'N'
                   END IF
                END IF
             END IF
          END IF
       END IF
       #---fim----vanderlei OS 400614 #

       LET l_forn_possui_pc = TRUE
       IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
          LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
       END IF

       IF  p_ies_informou_ped = 'N'
       AND NOT l_forn_possui_pc THEN
          IF find4GLFunction('supy12_item_possui_contrato') THEN
             CALL supy12_item_possui_contrato(p_dados_tela.cod_fornecedor, p_array[p_ind].cod_item)
                  RETURNING p_status, p_array[p_ind].pre_unit_nf
          ELSE
             LET p_status = TRUE
             LET p_array[p_ind].pre_unit_nf = 0
          END IF

          IF p_status = FALSE THEN
             CALL log0030_mensagem('Item não possui cotação de preço para este fornecedor.','exclamation')
             NEXT FIELD cod_item
          END IF
       END IF

       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) THEN
          IF p_array[p_ind].cod_item IS NOT NULL AND
             p_array[p_ind].cod_item <> " " THEN
             LET p_array[p_ind].cod_item = NULL
             LET p_array_wms[p_ind].cod_item = NULL

             #DISPLAY p_array[p_ind].cod_item TO s_sup37601[p_ind1].cod_item
             DISPLAY p_array_wms[p_ind].cod_item TO s_sup37601[p_ind1].cod_item

             CALL log0030_mensagem("Nota fiscal de complemento de imposto não deve ter item informado.","exclamation")

             NEXT FIELD cod_item
          END IF
       END IF

       # transfere os dados do p_array para o p_array_wms
       IF p_array[p_ind].den_item IS NOT NULL AND
          p_array[p_ind].den_item <> " " THEN
          LET p_array_wms[p_ind].den_item = p_array[p_ind].den_item
          DISPLAY p_array_wms[p_ind].den_item TO s_sup37601[p_ind1].den_item
       END IF
       IF p_array[p_ind].cod_unid_med_nf IS NOT NULL AND
          p_array[p_ind].cod_unid_med_nf <> " " THEN
          LET p_array_wms[p_ind].cod_unid_med_nf = p_array[p_ind].cod_unid_med_nf
          DISPLAY p_array_wms[p_ind].cod_unid_med_nf TO s_sup37601[p_ind1].cod_unid_med_nf
       END IF
       IF p_array[p_ind].pre_unit_nf IS NOT NULL AND
          p_array[p_ind].pre_unit_nf <> " " THEN
          LET p_array_wms[p_ind].pre_unit_nf = p_array[p_ind].pre_unit_nf
          DISPLAY p_array_wms[p_ind].pre_unit_nf TO s_sup37601[p_ind1].pre_unit_nf
       END IF
       IF p_array[p_ind].qtd_declarad_nf IS NOT NULL AND
          p_array[p_ind].qtd_declarad_nf THEN
          LET p_array_wms[p_ind].qtd_declarad_nf = p_array[p_ind].qtd_declarad_nf
          DISPLAY p_array_wms[p_ind].qtd_declarad_nf TO s_sup37601[p_ind1].qtd_declarad_nf
       END IF
       IF p_array[p_ind].val_liquido_item IS NOT NULL AND
          p_array[p_ind].val_liquido_item <> " " THEN
          LET p_array_wms[p_ind].val_liquido_item = p_array[p_ind].val_liquido_item
          DISPLAY p_array_wms[p_ind].val_liquido_item TO s_sup37601[p_ind1].val_liquido_item
       END IF
       IF p_array[p_ind].pct_ipi IS NOT NULL AND
          p_array[p_ind].pct_ipi <> " " THEN
          LET p_array_wms[p_ind].pct_ipi = p_array[p_ind].pct_ipi
       END IF
       IF p_array[p_ind].cod_cla_fisc_nf IS NOT NULL AND
          p_array[p_ind].cod_cla_fisc_nf <> " " THEN
          LET p_array_wms[p_ind].cod_cla_fisc_nf = p_array[p_ind].cod_cla_fisc_nf
          DISPLAY p_array_wms[p_ind].cod_cla_fisc_nf TO s_sup37601[p_ind1].cod_cla_fisc_nf
       END IF



    BEFORE FIELD den_item
       IF m_wms_instal = 'S' THEN
          IF m_tipo_documento = "N" THEN
             IF find4GLFunction('wms6612_retorna_indicador_aduaneiro_ar') THEN
                IF m_indicador_aduaneiro IS NULL OR m_indicador_aduaneiro = ' ' THEN
                   LET m_indicador_aduaneiro = wms6612_retorna_indicador_aduaneiro_ar(p_cod_empresa, p_dados_tela.num_aviso_rec)
                END IF
                IF p_dados_tela.num_aviso_rec IS NOT NULL AND
                   p_dados_tela.num_aviso_rec <> 0 AND
                   p_array[p_ind].cod_item IS NOT NULL AND
                   p_array[p_ind].cod_item <> ' ' AND
                   m_indicador_aduaneiro = 'T' THEN
                   IF NOT wms6612_tem_conferencia_alfandegado_ar(p_cod_empresa, p_dados_tela.num_aviso_rec) THEN
                      CALL wms6612_incluir_peso_item(p_dados_tela.num_aviso_rec,
                                                     p_array[p_ind].cod_item,
                                                     p_array[p_ind].seq)
                      CURRENT WINDOW IS w_sup37601
                   END IF
                END IF
             END IF
          END IF
       END IF
       IF m_alter_den_item_nf = 'N' THEN
           IF fgl_lastkey() = fgl_keyval("UP") OR
              fgl_lastkey() = fgl_keyval("LEFT") THEN
              NEXT FIELD val_liquido_item
           ELSE
              NEXT FIELD cod_cla_fisc_nf
           END IF
       END IF
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       #IF l_possui_q04 THEN #WMS - Chamado 763456
       #   NEXT FIELD pre_unit_nf
       #END IF
       IF p_dados_tela.ies_nf_aguard_nfe = "6" THEN #OS477994
          IF sup3760_busca_den_item(p_array_wms[p_ind].cod_item) THEN
             IF find4GLFunction('supy45_modifica_den_item') THEN
                IF supy45_modifica_den_item(p_dados_tela.num_aviso_rec, p_array_wms[p_ind].seq, m_den_item) THEN

                   CALL log006_exibe_teclas("01 02 03 07", p_versao)
                   CURRENT WINDOW IS w_sup37601

                   LET p_array_wms[p_ind].den_item = g_den_item
                   DISPLAY p_array_wms[p_ind].den_item TO s_sup37601[p_ind1].den_item

                   IF fgl_lastkey() = fgl_keyval("UP")
                   OR fgl_lastkey() = fgl_keyval("LEFT") THEN
                      NEXT FIELD val_liquido_item
                   ELSE
                      NEXT FIELD cod_cla_fisc_nf
                   END IF
                END IF
             END IF

             CALL log006_exibe_teclas("01 02 03 07", p_versao)
             CURRENT WINDOW IS w_sup37601
          END IF
       END IF #--

    AFTER FIELD  den_item
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       LET p_array[p_ind].den_item = p_array_wms[p_ind].den_item

    BEFORE FIELD cod_unid_med_nf
       CALL sup3760_botao_zoom("ON",3,68)
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       IF l_possui_q04 THEN #WMS - Chamado 763456
          NEXT FIELD pre_unit_nf
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array_wms[p_ind].seq)
          DISPLAY p_array_wms[p_ind].* TO s_sup37601[p_ind1].*
       END IF

    AFTER FIELD cod_unid_med_nf
       LET p_array[p_ind].cod_unid_med_nf = p_array_wms[p_ind].cod_unid_med_nf

       CALL sup3760_botao_zoom("OFF",3,68)
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       #809554
       IF p_array[p_ind].cod_unid_med_nf IS NOT NULL OR
          p_array[p_ind].cod_unid_med_nf <> " " THEN
          IF sup376_verifica_unid_med() = FALSE THEN
             ERROR " Código da unidade de medida não cadastrado. "
             NEXT FIELD cod_unid_med_nf
          END IF
       ELSE
          IF p_array[p_ind].cod_item <> NULL OR
             p_array[p_ind].cod_item <> " " THEN
             IF sup376_verifica_unid_med() = FALSE THEN
                ERROR " Código da unidade de medida não cadastrado. "
                NEXT FIELD cod_unid_med_nf
             END IF
          ELSE
             LET p_array[p_ind].cod_unid_med_nf = " "
          END IF
       END IF
       #809554

       #LET p_array[p_ind].cod_unid_med_nf = p_array_wms[p_ind].cod_unid_med_nf
       IF p_array[p_ind].cod_unid_med_nf IS NOT NULL AND
          p_array[p_ind].cod_unid_med_nf <> " " THEN
          LET p_array_wms[p_ind].cod_unid_med_nf = p_array[p_ind].cod_unid_med_nf
          DISPLAY p_array_wms[p_ind].cod_unid_med_nf TO s_sup37601[p_ind1].cod_unid_med_nf
       END IF

       IF find4GLFunction('supy31_valida_unid_med_fixa') THEN
          IF NOT supy31_valida_unid_med_fixa(p_array_compl[p_ind].ies_tip_item, p_array[p_ind].cod_unid_med_nf) THEN
             NEXT FIELD cod_unid_med_nf
          END IF
       END IF

       # Passo 19.1 #
       WHENEVER ERROR CONTINUE
          SELECT cod_unid_med
            INTO l_cod_unid_med
            FROM item
           WHERE cod_empresa  = p_cod_empresa
             AND cod_item = p_array[p_ind].cod_item
       WHENEVER ERROR STOP
       IF sqlca.sqlcode = 0 THEN
          IF m_wms_instal = 'S' THEN
             CALL wms0004_item_sob_controle_wms(p_cod_empresa, p_array[p_ind].cod_item) RETURNING l_sqlcode, l_status
             IF l_status THEN
                IF l_cod_unid_med <> p_array_wms[p_ind].cod_unid_med_nf THEN
                   IF wmsm81_wms_item_complemento_get_permite_conversao_unid_medida() = "S" THEN
                      WHENEVER ERROR CONTINUE
                         SELECT 1
                           FROM fat_conver
                          WHERE cod_empresa  = p_cod_empresa
                            AND cod_item = p_array[p_ind].cod_item
                            AND cod_unid_med_orig = l_cod_unid_med
                            AND cod_unid_med_dest = p_array_wms[p_ind].cod_unid_med_nf
                      WHENEVER ERROR STOP
                      IF sqlca.sqlcode = NOTFOUND THEN
                         WHENEVER ERROR CONTINUE
                            SELECT 1
                              FROM fat_conver
                             WHERE cod_empresa  = p_cod_empresa
                               AND cod_item = p_array[p_ind].cod_item
                               AND cod_unid_med_orig = p_array_wms[p_ind].cod_unid_med_nf
                               AND cod_unid_med_dest = l_cod_unid_med
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode = NOTFOUND THEN
                            CALL log0030_processa_mensagem("Unidade de medida informada não possui conversão para a unidade de medida do item.","exclamation",0)
                            NEXT FIELD cod_unid_med_nf
                         END IF
                      END IF
                   ELSE
                      CALL log0030_processa_mensagem("Item não permite conversão de unidade de medida.","exclamation",0)
                      NEXT FIELD cod_unid_med_nf
                   END IF
                END IF
             END IF
          END IF
       END IF

       IF p_funcao = "MODIFICACAO" AND
          p_array_compl[p_ind].ies_bloqueada = "S" THEN
          NEXT FIELD pre_unit_nf
       END IF

       ##### CITROSUCO OS 157335 #####
       IF m_ies_obj_entrada = "99" THEN
          IF (p_array_compl[p_ind].num_pedido IS NOT NULL AND
              p_array_compl[p_ind].num_pedido <> 0 AND
              p_array_compl[p_ind].num_pedido <> " ") THEN
              IF sup376_cond_pgto_com_pag() THEN
                 IF sup376_aprov_tecnica() THEN
                 #### TRABALHA COM APROVACAO TECNICA - SUP0289 ####
                   WHENEVER ERROR CONTINUE
                    SELECT cod_unid_med
                      FROM um_aprov_tecnica
                     WHERE cod_empresa  = p_cod_empresa
                       AND cod_unid_med = p_array_wms[p_ind].cod_unid_med_nf
                   WHENEVER ERROR STOP
                    IF sqlca.sqlcode = 100 THEN
                       ERROR " Unidade de Medida deve estar cadastrada SUP0141(Aprov.Tecnica)"
                       NEXT FIELD cod_unid_med_nf
                    END IF
                 END IF
              END IF
          END IF
       END IF
       ################################


    BEFORE FIELD cod_cla_fisc_nf
       CALL sup3760_botao_zoom("ON",3,68)
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       LET l_cod_cla_fisc_nf = p_array_wms[p_ind].cod_cla_fisc_nf
       #IF l_possui_q04 THEN #WMS - Chamado 763456
       #   NEXT FIELD pre_unit_nf
       #END IF

    AFTER FIELD cod_cla_fisc_nf
       CALL sup3760_botao_zoom("OFF",3,68)

       LET p_array[p_ind].cod_cla_fisc_nf = p_array_wms[p_ind].cod_cla_fisc_nf

       IF p_array_wms[p_ind].cod_cla_fisc_nf IS NOT NULL AND
          p_array_wms[p_ind].cod_cla_fisc_nf <> ' ' THEN
          IF NOT sup3762_verifica_cod_cla_fisc_nf(p_array_wms[p_ind].cod_cla_fisc_nf) THEN
             ERROR 'NBM nao cadastrado'
             NEXT FIELD cod_cla_fisc_nf
          END IF
       END IF

       IF p_array_wms[p_ind].den_item IS NOT NULL THEN
          IF m_tem_valid_fim THEN
             IF p_dados_tela.dat_entrada_nf > m_dat_fim_valid THEN
                IF p_dados_tela.cod_operacao[3,5] = "101" AND
                   p_ies_contrib_ipi = "S" THEN
                   IF p_array_wms[p_ind].cod_cla_fisc_nf IS NULL OR
                      p_array_wms[p_ind].cod_cla_fisc_nf = " " OR
                      p_array_wms[p_ind].cod_cla_fisc_nf = 0 THEN
                      ERROR "Informe classificacao fiscal"
                      NEXT FIELD cod_cla_fisc_nf
                   END IF
                END IF
             ELSE
                IF p_dados_tela.cod_operacao[3,4] = "11" AND
                   p_ies_contrib_ipi = "S" THEN
                   IF p_array_wms[p_ind].cod_cla_fisc_nf IS NULL OR
                      p_array_wms[p_ind].cod_cla_fisc_nf = " " OR
                      p_array_wms[p_ind].cod_cla_fisc_nf = 0 THEN
                      ERROR "Informe classificacao fiscal"
                      NEXT FIELD cod_cla_fisc_nf
                   END IF
                END IF
             END IF
          ELSE
             IF p_dados_tela.cod_operacao[3,4] = "11" AND
                p_ies_contrib_ipi = "S" THEN
                IF p_array_wms[p_ind].cod_cla_fisc_nf IS NULL OR
                   p_array_wms[p_ind].cod_cla_fisc_nf = " " OR
                   p_array_wms[p_ind].cod_cla_fisc_nf = 0 THEN
                   ERROR "Informe classificacao fiscal"
                   NEXT FIELD cod_cla_fisc_nf
                END IF
             END IF
         END IF
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(2) THEN
             IF l_cod_cla_fisc_nf <> p_array_wms[p_ind].cod_cla_fisc_nf THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_array_wms[p_ind].cod_cla_fisc_nf = l_cod_cla_fisc_nf
                DISPLAY p_array_wms[p_ind].cod_cla_fisc_nf TO cod_cla_fisc_nf
                NEXT FIELD cod_cla_fisc_nf
             END IF
          END IF
       END IF

      #LET p_array[p_ind].cod_cla_fisc_nf = p_array_wms[p_ind].cod_cla_fisc_nf
       IF p_array[p_ind].cod_cla_fisc_nf IS NOT NULL AND
          p_array[p_ind].cod_cla_fisc_nf <> " " THEN
          LET p_array_wms[p_ind].cod_cla_fisc_nf = p_array[p_ind].cod_cla_fisc_nf
          DISPLAY p_array_wms[p_ind].cod_cla_fisc_nf TO s_sup37601[p_ind1].cod_cla_fisc_nf
       END IF


    BEFORE FIELD qtd_declarad_nf
       IF m_wms_instal = 'S' THEN
             IF p_array[p_ind].cod_item IS NOT NULL OR
                p_array[p_ind].cod_item <> ' ' THEN
                IF find4GLFunction('wms6612_verifica_item_generico') THEN
                   IF NOT wms6612_verifica_item_generico(p_array[p_ind].cod_item,
                                                         m_indicador_aduaneiro) THEN
                      NEXT FIELD cod_item
                   END IF
                END IF
             END IF
       END IF
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

       LET l_qtd_declarad_nf = p_array_wms[p_ind].qtd_declarad_nf
       IF l_possui_q04 THEN #WMS - Chamado 763456
          NEXT FIELD pre_unit_nf
       END IF

       IF p_funcao = "MODIFICACAO" AND
          p_array_compl[p_ind].ies_bloqueada = "S" THEN
          LET p_array_compl[p_ind].ies_bloqueada = "N"
          NEXT FIELD cod_unid_med_nf
       END IF

       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) OR
          sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                                  p_cod_empresa,
                                  p_dados_tela.num_aviso_rec) THEN
          LET p_array_compl[p_ind].qtd_declarad_nf = 0
          NEXT FIELD cod_unid_med_nf
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          IF g_ies_wis_instalado = "S" THEN
             IF p_aviso_rec.cod_item IS NOT NULL AND
                p_aviso_rec.cod_item <> " " THEN
                CALL vdp3188_item_sob_controle_wis(p_cod_empresa,p_aviso_rec.cod_item)
                RETURNING l_sucesso,l_item_wms
                {IF l_item_wms THEN
                WHENEVER ERROR CONTINUE
                   SELECT *
                     FROM wis_nf_item
                    WHERE cod_fornecedor = p_dados_tela.cod_fornecedor
                      AND num_nf         = p_dados_tela.num_nf
                      AND cod_item       = p_array_wms[p_ind].cod_item
                WHENEVER ERROR STOP
                   IF sqlca.sqlcode = 0 THEN
                      ERROR " Item ja processado para Interface WIS, impossivel modificar Qtd. "
                      NEXT FIELD cod_unid_med_nf
                   END IF
                END IF}
             END IF
          ELSE
              IF g_ies_wms_instalado = "S" AND sup376_verifica_interf_ent_wms() THEN
                 CALL wms0004_item_sob_controle_wms(p_cod_empresa,p_array_wms[p_ind].cod_item)
                 RETURNING l_sucesso,l_item_wms
                 IF l_item_wms THEN
                 WHENEVER ERROR CONTINUE
                 SELECT COUNT(*)
                   INTO l_ind_envio_interf
                   FROM wms_e_nf_item a, wms_e_entrada_veic b
                  WHERE a.fornecedor         = p_dados_tela.cod_fornecedor
                    AND a.num_nota_fiscal    = p_dados_tela.num_nf
                    AND a.serie_nota_fiscal  = p_dados_tela.ser_nf
                    AND a.subserie_nf        = p_dados_tela.ssr_nf
                    AND a.item_terceiro      = p_array_wms[p_ind].cod_item
                    AND b.entrada_veiculo    = a.entrada_veiculo
                    AND b.ind_envio_interf   = "S"
                 WHENEVER ERROR STOP
                    IF sqlca.sqlcode = 0 AND l_ind_envio_interf > 0 THEN
                       ERROR " Item ja enviado ao LOGIX-WMS. Modificacao nao permitida. "
                       NEXT FIELD cod_unid_med_nf
                    END IF
                 END IF
              END IF
          END IF

         CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array_wms[p_ind].seq)

          IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = FALSE THEN
             IF sup376_verifica_update() = FALSE THEN
                LET p_array_compl[p_ind].ies_bloqueada = "S"
                LET p_array_compl[p_ind].qtd_declarad_nf = p_array_wms[p_ind].qtd_declarad_nf
                LET p_qtd_declarad_nf    = 0
                LET p_val_liquido_item   = 0
                LET p_qtd_declarad_nf    = p_array_wms[p_ind].qtd_declarad_nf
                LET p_pre_unit_nf        = p_array_wms[p_ind].pre_unit_nf
                LET p_val_liquido_item   = p_array_wms[p_ind].val_liquido_item
                DISPLAY p_array_wms[p_ind].* TO s_sup37601[p_ind1].*
                NEXT FIELD pre_unit_nf
             END IF
          ELSE
             NEXT FIELD pre_unit_nf
          END IF

       ELSE
          IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = TRUE THEN
             LET p_array_wms[p_ind].qtd_declarad_nf  = 0
             DISPLAY p_array_wms[p_ind].qtd_declarad_nf TO s_sup37601[p_ind1].qtd_declarad_nf
             NEXT FIELD pre_unit_nf
          END IF
       END IF

       IF l_item_balanca IS NOT NULL THEN
          LET p_array_wms[p_ind].qtd_declarad_nf = l_pes_liquido
          DISPLAY p_array_wms[p_ind].qtd_declarad_nf TO qtd_declarad_nf
       END IF

    AFTER FIELD qtd_declarad_nf
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

       LET p_array[p_ind].qtd_declarad_nf = p_array_wms[p_ind].qtd_declarad_nf

       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) THEN
          IF p_array_wms[p_ind].qtd_declarad_nf > 0 THEN
             LET p_array_wms[p_ind].qtd_declarad_nf = 0

             DISPLAY p_array_wms[p_ind].qtd_declarad_nf TO s_sup37601[p_ind1].qtd_declarad_nf

             CALL log0030_mensagem("Nota fiscal de complemento de imposto não deve ter quantidade informada.","exclamation")

             NEXT FIELD qtd_declarad_nf
          END IF
       END IF

       IF p_array_wms[p_ind].qtd_declarad_nf IS NOT NULL THEN
          IF p_dados_tela.ies_especie_nf = "NFC" THEN
             IF p_array_wms[p_ind].qtd_declarad_nf <> 0 THEN
                CALL log0030_mensagem("Nota fiscal de complemento não deve ter quantidade informada.","exclamation")
                NEXT FIELD qtd_declarad_nf
             END IF
          END IF
       ELSE
          IF p_dados_tela.ies_especie_nf = "NFC" THEN
             LET p_array_wms[p_ind].qtd_declarad_nf = 0
          END IF
       END IF

       SLEEP 1

       IF p_array_wms[p_ind].qtd_declarad_nf IS NOT NULL AND
          p_array_compl[p_ind].ar_com_pc = "S" THEN
          LET p_qtd_array = p_array_wms[p_ind].qtd_declarad_nf
          LET p_val_array = p_array_wms[p_ind].pre_unit_nf
          IF p_dados_tela.ies_especie_nf <> "NFD" THEN
             IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = FALSE THEN
                LET p_soma_reserva2 = NULL
                CALL sup386_popup_ordens_reservada(p_cod_empresa,
                     p_array_wms[p_ind].cod_item, p_array_compl[p_ind].num_pedido,
                     p_array_compl[p_ind].num_oc, p_array_compl[p_ind].num_prog_entrega,
                     p_qtd_array, "N" , p_funcao,
                     p_dados_tela.num_aviso_rec, p_array_wms[p_ind].seq, p_ind)
                     RETURNING p_soma_reserva2, p_ies_reservou, p_ord_forn
                     LET p_qtd_array = 0
                     LET p_val_array = 0
                     LET int_flag = 0
                     CALL log006_exibe_teclas("01 02 03 07", p_versao)
                     CURRENT WINDOW IS w_sup37601
             END IF
          END IF
          IF m_bloq_entr_data = "S" THEN
             IF NOT sup0949_verifica_diverg_dat_entrega(p_ind) THEN
                NEXT FIELD qtd_declarad_nf
             END IF
          END IF
       END IF

       IF p_funcao = "INCLUSAO" OR p_funcao =  "INCLU.ITENS"  THEN
          IF p_dados_tela.ies_especie_nf <> "NFR" AND
             p_dados_tela.ies_especie_nf <> "NFD" THEN
             IF p_array_wms[p_ind].cod_item  IS NOT NULL AND
                p_array_wms[p_ind].cod_item <> " " THEN
                IF (p_pedidos[1,5] = 'XXXXX') OR  # OS 390034 - Winston
                   (p_pedidos IS NULL) THEN
                   IF p_array_compl[p_ind].ar_com_pc <> "S" OR
                      p_array_compl[p_ind].ar_com_pc IS NULL   THEN
                      IF p_par_sup.ies_modulo_compras = "S" THEN

                         LET l_forn_possui_pc = TRUE
                         IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
                            LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
                         END IF

                         IF l_forn_possui_pc THEN
                            IF p_par_sup.ies_entrada_sem_pc = "N" AND
                               p_ies_entr_sem_ped = FALSE THEN
                               IF p_dados_tela.ies_especie_nf <> "NFC" AND
                                  p_dados_tela.ies_especie_nf <> "CON" AND
                                  p_dados_tela.ies_especie_nf <> "NFE" THEN
                                  ERROR "Empresa nao permite entrada de N.F. sem pedido de compra"
                                  NEXT FIELD cod_item
                               END IF
                               IF p_dados_tela.ies_especie_nf = "NFC" AND
                                  (p_par_sup_compl.ies_nf_compl_preco = "3" OR
                                   p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                  ERROR "Empresa nao permite entrada de NFC sem pedido de compra"
                                  NEXT FIELD cod_item
                               END IF
                               IF p_dados_tela.ies_especie_nf = "NFE" AND
                                  (p_par_sup_compl.ies_nf_compl_preco = "2" OR
                                   p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                  ERROR "Empresa nao permite entrada de NFE sem pedido de compra."
                                  NEXT FIELD cod_item
                               END IF
                            ELSE
                               IF p_dados_tela.ies_especie_nf = "NFM" AND m_controla_gao = "S" THEN
                                  IF p_array_pedidos[1].num_pedido IS NULL OR
                                     p_array_pedidos[1].num_pedido = " " THEN
                                     CALL log0030_mensagem(" Função não permitida, NFM com controle de GAO exige pedido de compra","exclamation")
                                     NEXT FIELD cod_item
                                  END IF
                               END IF
                            END IF
                         END IF
                      END IF
                   ELSE
                      IF p_ies_reservou = "N" THEN
                         IF p_par_sup.ies_modulo_compras = "S" THEN

                            LET l_forn_possui_pc = TRUE
                            IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
                               LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
                            END IF

                            IF l_forn_possui_pc THEN
                               IF p_par_sup.ies_entrada_sem_pc = "N" AND
                                  p_ies_entr_sem_ped = FALSE THEN
                                  IF p_dados_tela.ies_especie_nf <> "NFC" AND
                                     p_dados_tela.ies_especie_nf <> "CON" AND
                                     p_dados_tela.ies_especie_nf <> "NFE" THEN
                                     ERROR "Empresa nao permite entrada de N.F. sem pedido de compra"
                                     NEXT FIELD cod_item
                                  END IF
                                  IF p_dados_tela.ies_especie_nf = "NFC" AND
                                     (p_par_sup_compl.ies_nf_compl_preco = "3" OR
                                      p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                     ERROR "Empresa nao permite entrada de NFC sem pedido de compra"
                                     NEXT FIELD cod_item
                                  END IF
                                  IF p_dados_tela.ies_especie_nf = "NFE" AND
                                     (p_par_sup_compl.ies_nf_compl_preco = "2" OR
                                     p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                     ERROR "Empresa nao permite entrada de NFE sem pedido de compra."
                                     NEXT FIELD cod_item
                                  END IF
                               ELSE
                                  IF p_dados_tela.ies_especie_nf = "NFM" AND m_controla_gao = "S" THEN
                                     IF p_array_pedidos[1].num_pedido IS NULL OR
                                        p_array_pedidos[1].num_pedido = " " THEN
                                        CALL log0030_mensagem(" Função não permitida, NFM com controle de GAO exige pedido de compra","exclamation")
                                        NEXT FIELD cod_item
                                     END IF
                                  END IF
                               END IF
                            END IF
                         END IF
                      END IF
                   END IF
                END IF
             END IF
          END IF
       END IF

       LET p_somatorio_dif = 0
       FOR p_ind5 = 1 TO 50
           IF p_array_it_prg_entr[p_ind, p_ind5].qtd_solic IS NULL OR
              p_array_it_prg_entr[p_ind, p_ind5].qtd_solic = " "   OR
              p_array_it_prg_entr[p_ind, p_ind5].qtd_solic = 0 THEN
              EXIT FOR
           END IF
           IF p_array_compl[p_ind].num_oc <> 0        AND
              p_array_compl[p_ind].num_oc IS NOT NULL THEN
              INITIALIZE p_ordem_sup.* TO NULL
              CALL sup3762_busca_ordem_sup(p_cod_empresa,
                                          p_array_compl[p_ind].num_oc)

              LET p_fat_conver_unid = p_ordem_sup.fat_conver_unid
              IF sqlca.sqlcode <> 0 THEN
                 LET p_fat_conver_unid = 1
              END IF
           END IF
           IF p_fat_conver_unid = 0 THEN
              LET p_fat_conver_unid = 1
           END IF
           LET p_dif_aceite = 0
           IF p_array_compl[p_ind].pct_aceite_dif = 0
           AND p_dados_tela.ies_nf_aguard_nfe <> "5"
           THEN LET p_dif_aceite = (p_array_it_prg_entr[p_ind, p_ind5].qtd_solic
                    * p_par_sup.pct_maximo_div_q) / 100
           ELSE LET p_dif_aceite = (p_array_it_prg_entr[p_ind, p_ind5].qtd_solic
                    * p_array_compl[p_ind].pct_aceite_dif) / 100
           END IF
           LET p_somatorio_dif = p_somatorio_dif + p_dif_aceite
       END FOR
       LET p_array_compl[p_ind].tot_reserv_dif = 0
       LET p_array_compl[p_ind].tot_reserv_dif = p_somatorio_dif + p_soma_reserva2
       IF p_array_wms[p_ind].qtd_declarad_nf > (p_soma_reserva2 + p_somatorio_dif) AND p_dados_tela.ies_nf_aguard_nfe <> "D" THEN
          IF p_funcao <> "MODIFICACAO" OR
             p_funcao = "MODIFICACAO" AND p_msg_qtd = "S" THEN
             IF p_array_compl[p_ind].num_pedido IS NOT NULL AND
                p_array_compl[p_ind].num_pedido <> 0        AND
                p_array_compl[p_ind].ies_liquida_oc <> "3"  THEN
                IF p_dados_tela.ies_nf_aguard_nfe = "5" THEN
                   ERROR "ENTRADA SEM SALDO SUFICIENTE; CONTATAR COMPRADOR URGENTE "
                   NEXT FIELD qtd_declarad_nf
                END IF

                IF p_ies_entrada_maior = "N"  THEN
                   CALL log0030_mensagem("ENTRADA SEM SALDO SUFICIENTE; CONTATAR COMPRADOR URGENTE ","exclamation")
                ELSE
                   CALL log0030_mensagem("Entrada sem saldo suficiente.","exclamation")
                END IF
                IF p_ies_entrada_maior = "S"  THEN
                   IF log004_confirm(14,42) THEN
                   ELSE
                      NEXT FIELD qtd_declarad_nf
                   END IF
                ELSE
                   IF p_ies_entrada_maior = "C" THEN
                      IF p_aguard_5 = TRUE THEN
                         NEXT FIELD qtd_declarad_nf
                      ELSE
                         IF log004_confirm(14,42) THEN
                         ELSE
                            NEXT FIELD qtd_declarad_nf
                         END IF
                      END IF
                   ELSE
                      NEXT FIELD qtd_declarad_nf
                   END IF
                END IF
             END IF
          END IF
       END IF

       IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
          LET p_array_imp[p_ind].val_ii = (p_array_imp[p_ind].val_ii_tot *
                                           p_array_wms[p_ind].qtd_declarad_nf) /
                                           p_array_imp[p_ind].quantidade
          LET p_array_imp[p_ind].val_desp_imp =
                                          (p_array_imp[p_ind].val_desp_imp_tot *
                                           p_array_wms[p_ind].qtd_declarad_nf) /
                                           p_array_imp[p_ind].quantidade
          LET p_array_imp[p_ind].val_ipi =
                                          (p_array_imp[p_ind].val_ipi_tot *
                                           p_array_wms[p_ind].qtd_declarad_nf) /
                                           p_array_imp[p_ind].quantidade
          LET p_array_imp[p_ind].val_icms =
                                          (p_array_imp[p_ind].val_icms_tot *
                                           p_array_wms[p_ind].qtd_declarad_nf) /
                                           p_array_imp[p_ind].quantidade
       END IF

       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(2) THEN
             IF l_qtd_declarad_nf <> p_array_wms[p_ind].qtd_declarad_nf THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_array_wms[p_ind].qtd_declarad_nf = l_qtd_declarad_nf
                DISPLAY p_array_wms[p_ind].qtd_declarad_nf TO qtd_declarad_nf
                NEXT FIELD qtd_declarad_nf
             END IF
          END IF
       END IF

       # Transfere os dados para a p_array_wms
       IF p_array[p_ind].qtd_declarad_nf IS NOT NULL AND
          p_array[p_ind].qtd_declarad_nf THEN
          LET p_array_wms[p_ind].qtd_declarad_nf = p_array[p_ind].qtd_declarad_nf
          DISPLAY p_array_wms[p_ind].qtd_declarad_nf TO s_sup37601[p_ind1].qtd_declarad_nf
       END IF

       #LET p_array[p_ind].qtd_declarad_nf = p_array_wms[p_ind].qtd_declarad_nf

       # Passo 19 #
       LET l_wms_qtd_declarad_nf_aux = p_array_wms[p_ind].qtd_declarad_nf
       IF p_array_wms[p_ind].qtd_declarad_nf > l_wms_qtd_declarad_nf_aux THEN
          IF wmsm81_wms_item_complemento_get_unid_medida_fracion() = "N" THEN
             CALL log0030_processa_mensagem("Item não permite quantidade fracionada.","exclamation",0)
             NEXT FIELD qtd_declarad_nf
          END IF
       END IF


    BEFORE FIELD pre_unit_nf
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       IF p_funcao = "INCLUSAO" THEN
          IF p_dados_tela.ies_especie_nf <> "NFD" AND
             p_dados_tela.ies_especie_nf <> "NFR" THEN
             CALL sup3760_botao_zoom("ON",3,68)
          END IF
       END IF
       IF p_funcao = "MODIFICACAO" THEN
          CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array_wms[p_ind].seq)
          IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) THEN
             IF sup376_verifica_ar_item_contagem() THEN
                IF fgl_lastkey() = fgl_keyval("UP") THEN
                   NEXT FIELD cod_cla_fisc_nf
                ELSE
                   IF fgl_lastkey() = fgl_keyval("LEFT") THEN
                      NEXT FIELD cod_cla_fisc_nf
                   ELSE
                      NEXT FIELD pct_ipi
                   END IF
                END IF
             END IF
          END IF
       END IF
       LET p_base_ipi[p_ind].val_liquido_item = p_array_wms[p_ind].val_liquido_item
       LET p_array_compl[p_ind].alterou_val_liquido = FALSE

    AFTER FIELD pre_unit_nf
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

       LET p_array[p_ind].pre_unit_nf = p_array_wms[p_ind].pre_unit_nf

       CALL sup3760_botao_zoom("OFF",3,68)
       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) THEN
          IF p_array_wms[p_ind].pre_unit_nf > 0 THEN
             LET p_array_wms[p_ind].pre_unit_nf = 0

             DISPLAY p_array_wms[p_ind].pre_unit_nf TO s_sup37601[p_ind1].pre_unit_nf

             CALL log0030_mensagem("Nota fiscal de complemento de imposto não deve ter preço informado.","exclamation")

             NEXT FIELD pre_unit_nf
          END IF
       END IF
       IF p_ord_forn = FALSE AND
          p_funcao = "INCLUSAO" THEN
          IF (p_pedidos[1,5] = "XXXXX") OR
             (p_pedidos IS NULL) THEN
             IF p_par_sup.ies_entrada_sem_pc = "N" AND
                p_ies_entr_sem_ped = FALSE THEN
                LET p_ies_pagamento2 = NULL
                CALL sup376_busca_cond_pgto_cap(p_dados_tela.cnd_pgto_nf)
                LET p_ies_pagamento2 = p_cond_pgto_cap.ies_pagamento
                IF p_ies_pagamento2 = "3" THEN
                ELSE
                   ERROR " Nao ha ordens de compras para este Fornecedor "
                   NEXT FIELD qtd_declarad_nf
                END IF
             END IF
          END IF
       END IF

       IF p_array_compl[p_ind].ar_com_pc = "S" AND p_par_sup.ies_modulo_compras = "S" AND p_funcao = "INCLUSAO" THEN
          IF NOT sup3760_pedido_ordem_valido(p_array_compl[p_ind].num_pedido,
                                             p_array_compl[p_ind].num_oc) THEN
             NEXT FIELD pre_unit_nf
          END IF
       END IF

       IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) THEN
          IF p_array_wms[p_ind].pre_unit_nf IS NOT NULL THEN
             LET p_val_liquido_ant = p_array_wms[p_ind].val_liquido_item
             CALL sup376_calcula_val_liquido(p_funcao)
             DISPLAY p_array_wms[p_ind].val_liquido_item TO s_sup37601[p_ind1].val_liquido_item
          END IF
          IF p_array_wms[p_ind].qtd_declarad_nf IS NOT NULL AND
             p_array_compl[p_ind].ar_com_pc = "S"      THEN

             LET p_val_array = p_array_wms[p_ind].val_liquido_item

             IF p_dados_tela.ies_especie_nf <> "NFD" AND
                p_dados_tela.ies_especie_nf <> "NFR" THEN
                CALL sup861_popup_ordens_val_reserv(p_cod_empresa,
                     p_array_wms[p_ind].cod_item, p_array_compl[p_ind].num_pedido,
                     p_array_compl[p_ind].num_oc, p_array_compl[p_ind].num_prog_entrega,
                     p_val_array, "N", p_funcao,
                     p_dados_tela.num_aviso_rec, p_array_wms[p_ind].seq, p_ind)
                     RETURNING p_val_soma_reserva2, p_ies_reservou, p_ord_forn
                     LET p_val_array = 0
                     LET int_flag = 0
                     CURRENT WINDOW IS w_sup37601
             END IF
          END IF
          LET p_somatorio_dif = 0
          FOR p_ind5 = 1 TO 50
              IF p_array_it_prg_entr[p_ind, p_ind5].val_solic IS NULL OR
                 p_array_it_prg_entr[p_ind, p_ind5].val_solic = " "   OR
                 p_array_it_prg_entr[p_ind, p_ind5].val_solic = 0 THEN
                 EXIT FOR
              END IF
              LET p_dif_aceite = 0
              LET p_dif_aceite = (p_array_it_prg_entr[p_ind, p_ind5].val_solic * p_array_compl[p_ind].pct_aceite_dif) / 100
              LET p_somatorio_dif = p_somatorio_dif + p_dif_aceite
          END FOR
          LET p_array_compl[p_ind].tot_reserv_dif = 0
          LET p_array_compl[p_ind].tot_reserv_dif = p_somatorio_dif + p_val_soma_reserva2
          IF p_array_wms[p_ind].val_liquido_item > (p_val_soma_reserva2 + p_somatorio_dif) THEN
             IF p_funcao <> "MODIFICACAO" OR
                p_funcao = "MODIFICACAO"  THEN
                IF p_array_compl[p_ind].num_pedido IS NOT NULL AND
                   p_array_compl[p_ind].num_pedido <> 0        AND
                   p_array_compl[p_ind].ies_liquida_oc <> "3"  THEN
                   IF p_dados_tela.ies_nf_aguard_nfe = "5" THEN
                      ERROR "ENTRADA SEM SALDO SUFICIENTE; CONTATAR COMPRADOR URGENTE "
                      NEXT FIELD qtd_declarad_nf
                   END IF

                   IF p_ies_entrada_maior = "N"  THEN
                      ERROR "ENTRADA SEM SALDO SUFICIENTE; CONTATAR COMPRADOR URGENTE "
                   ELSE
                      ERROR "Entrada sem saldo suficiente."
                   END IF
                   IF p_ies_entrada_maior = "S"  THEN
                      IF log004_confirm(14,42) THEN
                      ELSE
                         NEXT FIELD pre_unit_nf
                      END IF
                   ELSE
                      IF p_ies_entrada_maior = "C" THEN
                         IF p_aguard_5 = TRUE THEN
                            NEXT FIELD pre_unit_nf
                         ELSE
                            IF log004_confirm(14,42) THEN
                            ELSE
                               NEXT FIELD pre_unit_nf
                            END IF
                         END IF
                      ELSE
                         NEXT FIELD pre_unit_nf
                      END IF
                   END IF
                END IF
             END IF
          END IF
       ELSE
          IF p_array_wms[p_ind].pre_unit_nf IS NOT NULL THEN
             LET p_val_liquido_ant = p_array_wms[p_ind].val_liquido_item
             CALL sup376_calcula_val_liquido(p_funcao)
             DISPLAY p_array_wms[p_ind].val_liquido_item TO s_sup37601[p_ind1].val_liquido_item
          END IF
       END IF

       IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = FALSE THEN
          IF fgl_lastkey() = fgl_keyval("UP") OR
             fgl_lastkey() = fgl_keyval("LEFT") THEN
             NEXT FIELD qtd_declarad_nf
          END IF
       ELSE
          NEXT FIELD pct_ipi
       END IF
       LET p_par_forn = NULL
       IF p_array_compl[p_ind].num_oc IS NOT NULL AND
          p_array_compl[p_ind].num_oc <> 0       THEN
          IF sup376_verifica_ordem_consig(p_array_compl[p_ind].num_oc) THEN
             LET p_par_forn = "3"
          END IF
       ELSE
          IF p_dados_tela.ies_especie_nf = "NFR" THEN
             CALL sup376_verifica_item_forn_particip(p_dados_tela.cod_fornecedor,
                                                     p_array_wms[p_ind].cod_item,
                                                     p_dados_tela.dat_emis_nf,
                                                     p_dados_tela.num_aviso_rec) RETURNING p_par_forn
          END IF
       END IF
       IF p_par_forn = "3" THEN
          CALL sup3762_le_cotacao_preco(p_dados_tela.cod_fornecedor,
                                       p_array_wms[p_ind].cod_item)

          CALL sup376_ver_fat_conver_consig(p_array_wms[p_ind].cod_item)
               RETURNING l_fat_conver_consig

          IF ((p_cotacao_preco.pre_unit_liquido * l_fat_conver_consig) <>
              p_array_wms[p_ind].pre_unit_nf) OR
             p_cotacao_preco.pre_unit_liquido IS NULL THEN
             ERROR " Preco do item difere do contrato ou NAO possui contrato de CONSIGNACAO." ATTRIBUTE (REVERSE)
             IF log004_confirm(21,42) THEN
             ELSE
                NEXT FIELD pre_unit_nf
             END IF
          END IF
       END IF

       IF p_funcao = "MODIFICACAO" THEN
          IF la_dados_ant[p_ind].pre_unit_nf <> p_array_wms[p_ind].pre_unit_nf THEN
             IF sup376_contagem_custo_diario(2) THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_array_wms[p_ind].pre_unit_nf = la_dados_ant[p_ind].pre_unit_nf
                DISPLAY p_array_wms[p_ind].pre_unit_nf TO pre_unit_nf
                NEXT FIELD pre_unit_nf
             END IF

             IF m_controla_gao = "S" THEN
                IF NOT sup3760_permite_alteracao_gao() THEN
                   CALL log0030_mensagem("Controle GAO ativo exclua Inspeção/Contagem antes de modificar o preço. Após realize Inspeção/Contagem manual.","excl")
                   LET p_array_wms[p_ind].pre_unit_nf = la_dados_ant[p_ind].pre_unit_nf
                   DISPLAY p_array_wms[p_ind].pre_unit_nf TO pre_unit_nf
                   NEXT FIELD pre_unit_nf
                END IF

                LET m_alterou_preco = TRUE
             END IF
          END IF
       END IF

       # Transfere os dados para a p_array_wms
       IF p_array[p_ind].pre_unit_nf IS NOT NULL AND
          p_array[p_ind].pre_unit_nf THEN
          LET p_array_wms[p_ind].pre_unit_nf = p_array[p_ind].pre_unit_nf
          DISPLAY p_array_wms[p_ind].pre_unit_nf TO s_sup37601[p_ind1].pre_unit_nf
       END IF
       IF p_array[p_ind].val_liquido_item IS NOT NULL AND
          p_array[p_ind].val_liquido_item <> " " THEN
          LET p_array_wms[p_ind].val_liquido_item = p_array[p_ind].val_liquido_item
          DISPLAY p_array_wms[p_ind].val_liquido_item TO s_sup37601[p_ind1].val_liquido_item
       END IF
       IF p_array[p_ind].pct_ipi IS NOT NULL AND
          p_array[p_ind].pct_ipi <> " " THEN
          LET p_array_wms[p_ind].pct_ipi = p_array[p_ind].pct_ipi
       END IF
       IF p_array[p_ind].cod_cla_fisc_nf IS NOT NULL AND
          p_array[p_ind].cod_cla_fisc_nf <> " " THEN
          LET p_array_wms[p_ind].cod_cla_fisc_nf = p_array[p_ind].cod_cla_fisc_nf
          DISPLAY p_array_wms[p_ind].cod_cla_fisc_nf TO s_sup37601[p_ind1].cod_cla_fisc_nf
       END IF
       #LET p_array[p_ind].pre_unit_nf = p_array_wms[p_ind].pre_unit_nf

    BEFORE FIELD val_liquido_item
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       LET l_val_liquido_item = p_array_wms[p_ind].val_liquido_item
       IF p_funcao = "MODIFICACAO" THEN
          CALL sup376_busca_aviso_rec(p_cod_empresa, p_dados_tela.num_aviso_rec, p_array_wms[p_ind].seq)
          IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) THEN
             IF sup376_verifica_ar_item_contagem() THEN
                IF fgl_lastkey() = fgl_keyval("UP") THEN
                   NEXT FIELD cod_cla_fisc_nf
                ELSE
                   IF fgl_lastkey() = fgl_keyval("LEFT") THEN
                      NEXT FIELD cod_cla_fisc_nf
                   ELSE
                      NEXT FIELD pct_ipi
                   END IF
                END IF
             END IF
          END IF
       END IF

    AFTER FIELD val_liquido_item
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

       LET p_array[p_ind].val_liquido_item = p_array_wms[p_ind].val_liquido_item

       IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                    p_cod_empresa,
                                    p_dados_tela.num_aviso_rec) THEN
          IF p_array_wms[p_ind].val_liquido_item > 0 THEN
             LET p_array_wms[p_ind].val_liquido_item = 0

             DISPLAY p_array_wms[p_ind].val_liquido_item TO s_sup37601[p_ind1].val_liquido_item

             CALL log0030_mensagem("Nota fiscal de complemento de imposto não deve ter valor informado.","exclamation")

             NEXT FIELD val_liquido_item
          END IF
       END IF

       IF p_funcao = "MODIFICACAO" THEN
          IF p_val_liquido_ant <> p_array_wms[p_ind].val_liquido_item
          THEN
             ERROR "Altera Base de Calculo do IPI ???" ATTRIBUTE(REVERSE)
             IF log004_confirm(21,39)
             THEN LET p_base_ipi[p_ind].val_liquido_item = p_val_liquido_ant
             END IF
             LET p_array_compl[p_ind].alterou_val_liquido = TRUE
          END IF
       END IF

       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(2) THEN
             IF l_val_liquido_item <> p_array_wms[p_ind].val_liquido_item THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_array_wms[p_ind].val_liquido_item = l_val_liquido_item
                DISPLAY p_array_wms[p_ind].val_liquido_item TO val_liquido_item
                NEXT FIELD val_liquido_item
             END IF
          END IF
       END IF

       # Transfere os dados para a p_array_wms
       IF p_array[p_ind].val_liquido_item IS NOT NULL AND
          p_array[p_ind].val_liquido_item <> " " THEN
          LET p_array_wms[p_ind].val_liquido_item = p_array[p_ind].val_liquido_item
          DISPLAY p_array_wms[p_ind].val_liquido_item TO s_sup37601[p_ind1].val_liquido_item
       END IF
       IF p_array[p_ind].pct_ipi IS NOT NULL AND
          p_array[p_ind].pct_ipi <> " " THEN
          LET p_array_wms[p_ind].pct_ipi = p_array[p_ind].pct_ipi
       END IF
       IF p_array[p_ind].cod_cla_fisc_nf IS NOT NULL AND
          p_array[p_ind].cod_cla_fisc_nf <> " " THEN
          LET p_array_wms[p_ind].cod_cla_fisc_nf = p_array[p_ind].cod_cla_fisc_nf
          DISPLAY p_array_wms[p_ind].cod_cla_fisc_nf TO s_sup37601[p_ind1].cod_cla_fisc_nf
       END IF

       LET p_array[p_ind].val_liquido_item = p_array_wms[p_ind].val_liquido_item


    BEFORE FIELD pct_ipi
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()
       LET l_pct_ipi = p_array_wms[p_ind].pct_ipi

    AFTER FIELD pct_ipi
       LET p_ind = arr_curr()
       LET p_ind1  = scr_line()

       LET p_array[p_ind].pct_ipi = p_array_wms[p_ind].pct_ipi

       IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = TRUE THEN
          IF fgl_lastkey() = fgl_keyval("UP")   OR
             fgl_lastkey() = fgl_keyval("LEFT") THEN
             NEXT FIELD pre_unit_nf
          END IF
       END IF
       ##Se for nota fiscal de importação não deverá verificar divergência de preço
       IF m_bloq_entr_preco = "S" AND p_array_compl[p_ind].ar_com_pc = "S" AND
          p_dados_tela.cod_operacao[1,1] <> "7" AND m_nfr_import = FALSE THEN
          IF NOT sup0949_verifica_diverg_preco_unit(p_funcao, p_ind, p_dados_tela.num_aviso_rec, p_array[p_ind].seq,
                                                    p_array[p_ind].pre_unit_nf, 'SUP3760') THEN
             NEXT FIELD pre_unit_nf
          END IF
       END IF

       IF p_funcao = "MODIFICACAO" THEN
          IF sup376_contagem_custo_diario(2) THEN
             IF l_pct_ipi <> p_array_wms[p_ind].pct_ipi THEN
                ERROR "Custo medio diario nao permite modificacao p/ recebimento com contagem efetuada."
                LET p_array_wms[p_ind].pct_ipi = l_pct_ipi
                DISPLAY p_array_wms[p_ind].pct_ipi TO pct_ipi
                NEXT FIELD pct_ipi
             END IF
          END IF
       END IF

       IF find4GLFunction('supy36_verifica_nf_retorno_industrializacao') THEN
          IF supy36_verifica_nf_retorno_industrializacao(p_dados_tela.cod_operacao,
                                                         p_dados_tela.cod_fiscal_compl) THEN

             IF find4GLFunction('supy36_executa_item_ret_terc') THEN
                CALL supy36_executa_item_ret_terc(p_dados_tela.cod_empresa,
                                                  p_dados_tela.num_nf,
                                                  p_dados_tela.ser_nf,
                                                  p_dados_tela.ssr_nf,
                                                  p_dados_tela.ies_especie_nf,
                                                  p_dados_tela.cod_fornecedor,
                                                  p_array_wms[p_ind].seq)
             END IF
          END IF
       END IF

       # Transfere os dados para a p_array_wms
       IF p_array[p_ind].pct_ipi IS NOT NULL AND
          p_array[p_ind].pct_ipi <> " " THEN
          LET p_array_wms[p_ind].pct_ipi = p_array[p_ind].pct_ipi
       END IF
       IF p_array[p_ind].cod_cla_fisc_nf IS NOT NULL AND
          p_array[p_ind].cod_cla_fisc_nf <> " " THEN
          LET p_array_wms[p_ind].cod_cla_fisc_nf = p_array[p_ind].cod_cla_fisc_nf
          DISPLAY p_array_wms[p_ind].cod_cla_fisc_nf TO s_sup37601[p_ind1].cod_cla_fisc_nf
       END IF


    AFTER INPUT
       IF int_flag = 0 THEN
          LET l_entra_grades   = TRUE
          # Transfere todos os dados da variável p_array_wms para p_array
          FOR l_aux = 1 TO 999
             LET l_wms_item_aux          = p_array[l_aux].cod_item
             #LET p_array[l_aux].*        = p_array_wms[l_aux].*

             LET p_array[l_aux].seq              = p_array_wms[l_aux].seq
             LET p_array[l_aux].cod_item         = p_array_wms[l_aux].cod_item
             LET p_array[l_aux].qtd_declarad_nf  = p_array_wms[l_aux].qtd_declarad_nf
             LET p_array[l_aux].cod_unid_med_nf  = p_array_wms[l_aux].cod_unid_med_nf
             LET p_array[l_aux].pre_unit_nf      = p_array_wms[l_aux].pre_unit_nf
             LET p_array[l_aux].val_liquido_item = p_array_wms[l_aux].val_liquido_item
             LET p_array[l_aux].den_item         = p_array_wms[l_aux].den_item
             LET p_array[l_aux].cod_cla_fisc_nf  = p_array_wms[l_aux].cod_cla_fisc_nf
             LET p_array[l_aux].pct_ipi          = p_array_wms[l_aux].pct_ipi

             IF l_wms_item_aux <> " " AND l_wms_item_aux IS NOT NULL THEN
                LET p_array[l_aux].cod_item = l_wms_item_aux
             END IF
          END FOR

          LET p_ind_ant = p_ind
          FOR p_ind = 1 TO 999
             LET m_informou_grade = FALSE
             IF p_array[p_ind].cod_item IS NULL OR
                p_array[p_ind].cod_item = " " THEN
                LET l_entra_grades = FALSE
                EXIT FOR
             END IF
             #CHAMADO A24579
             IF m_wms_instal = 'S' THEN
               IF find4GLFunction('wms6612_retorna_indicador_aduaneiro_ar') THEN
                  IF m_indicador_aduaneiro IS NULL OR m_indicador_aduaneiro = ' ' THEN
                     LET m_indicador_aduaneiro = wms6612_retorna_indicador_aduaneiro_ar(p_cod_empresa, p_dados_tela.num_aviso_rec)
                  END IF
                  IF p_array[p_ind].cod_item IS NOT NULL OR
                     p_array[p_ind].cod_item <> ' ' THEN
                     IF NOT wms6612_verifica_item_generico(p_array[p_ind].cod_item,
                                                           m_indicador_aduaneiro) THEN
                        NEXT FIELD cod_item
                     END IF
                  END IF
                  IF m_tipo_documento = "N" THEN
                     IF p_dados_tela.num_aviso_rec IS NOT NULL AND
                        p_dados_tela.num_aviso_rec <> 0 AND
                        p_array[p_ind].cod_item IS NOT NULL AND
                        p_array[p_ind].cod_item <> ' ' AND
                        m_indicador_aduaneiro = 'T' THEN
                        IF NOT wms6612_tem_conferencia_alfandegado_ar(p_cod_empresa, p_dados_tela.num_aviso_rec) THEN
                           WHENEVER ERROR CONTINUE
                             SELECT peso_item
                               FROM t_peso_item
                              WHERE aviso_rec = p_dados_tela.num_aviso_rec
                                AND item      = p_array[p_ind].cod_item
                                AND sequencia = p_array[p_ind].seq
                                AND peso_item > 0
                           WHENEVER ERROR STOP
                           IF sqlca.sqlcode = 100 THEN
                              CALL wms6612_incluir_peso_item(p_dados_tela.num_aviso_rec,
                                                             p_array[p_ind].cod_item,
                                                             p_array[p_ind].seq)
                              CURRENT WINDOW IS w_sup37601
                           END IF
                        END IF
                     END IF
                  END IF
               END IF
             END IF
             IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                          p_cod_empresa,
                                          p_dados_tela.num_aviso_rec) = FALSE AND
                sup1481_nfc_compl_valor(p_dados_tela.ies_especie_nf,
                                        p_cod_empresa,
                                        p_dados_tela.num_aviso_rec) = FALSE THEN

                IF m_mov_qtd_ser = "S" AND p_array[p_ind].qtd_declarad_nf > 1 THEN
                   CALL sup0063_verifica_controles(14,
                                                   p_array[p_ind].cod_item,
                                                   "INCLUSAO",
                                                   "SUP3760")
                      RETURNING m_controles

                   IF m_controles <> " " THEN
                      CALL sup0063_grava_temp_controles(m_controles)
                           RETURNING p_status

                      IF sup0063_existe_controle("11") THEN
                         CALL log0030_mensagem("Movimentação de quantidade deve ser única para item com controle de série.","exclamation")

                         LET l_entra_grades = FALSE
                      END IF
                   END IF
                END IF

                IF l_entra_grades THEN
                   CALL sup3766_informacao_grade_item(p_cod_empresa,
                                                      p_dados_tela.num_aviso_rec,
                                                      p_array[p_ind].seq,
                                                      p_array[p_ind].cod_item,
                                                      p_array[p_ind].qtd_declarad_nf,
                                                      p_array_compl[p_ind].ar_com_pc,
                                                      1,
                                                      p_array_compl[p_ind].num_oc)
                      RETURNING l_status, l_grade
                   IF l_status = FALSE THEN
                      LET p_houve_erro = TRUE
                   ELSE
                      IF l_grade = TRUE THEN
                         LET m_informou_grade = TRUE
                      ELSE
                         IF m_informa_controles_sup3760 = "S" THEN #OS544582
                            CALL sup0063_verifica_controles(14, p_array[p_ind].cod_item,"INCLUSAO","SUP3760")
                              RETURNING m_controles

                            IF m_controles <> " " THEN
                               IF log0040_confirm(12,15,"Obrigatório informar o controle de grade/dimensional. Informar controles?") THEN
                                  CALL sup3766_informacao_grade_item(p_cod_empresa,
                                                                     p_dados_tela.num_aviso_rec,
                                                                     p_array[p_ind].seq,
                                                                     p_array[p_ind].cod_item,
                                                                     p_array[p_ind].qtd_declarad_nf,
                                                                     p_array_compl[p_ind].ar_com_pc,
                                                                     0,
                                                                     p_array_compl[p_ind].num_oc)
                                    RETURNING l_status, l_grade

                                  IF l_status = FALSE THEN
                                     LET p_houve_erro = TRUE
                                  ELSE
                                     IF l_grade = TRUE THEN
                                        LET m_informou_grade = TRUE
                                     END IF
                                  END IF
                               ELSE
                                  NEXT FIELD cod_item
                               END IF
                            END IF
                         END IF
                      END IF
                   END IF
                END IF
             ELSE
                EXIT FOR
             END IF
          END FOR

          FOR p_ind = 1 TO 999

             IF p_dados_tela.ies_especie_nf = "NFC" AND
                p_array[p_ind].qtd_declarad_nf IS NULL THEN
                LET p_array[p_ind].qtd_declarad_nf = 0
             END IF

             IF m_contr_pes_rec = 'S' THEN   #eduardo o.s. 290538 19/11/03
                WHENEVER ERROR CONTINUE
                SELECT empresa
                  FROM sup_ctr_balanca
                 WHERE empresa           = p_cod_empresa
                   AND num_docum         = p_dados_tela.num_nf
                   AND serie_nota_fiscal = p_dados_tela.ser_nf
                   AND subserie_nf       = p_dados_tela.ssr_nf
                   AND fornecedor        = p_dados_tela.cod_fornecedor
                   AND seq_nota_fiscal   = p_array[p_ind].seq
                   AND tip_pesagem       = "1"
                   AND aviso_recebto     IS NULL
                WHENEVER ERROR STOP
                IF sqlca.sqlcode = 0 THEN
                   FOR l_aux = 1 TO 999
                      IF l_aux = p_ind THEN
                         CONTINUE FOR
                      END IF
                      IF p_array[p_ind].cod_item = p_array[l_aux].cod_item THEN
                         WHENEVER ERROR CONTINUE
                         SELECT empresa
                           FROM sup_ctr_balanca
                          WHERE empresa           = p_cod_empresa
                            AND num_docum         = p_dados_tela.num_nf
                            AND serie_nota_fiscal = p_dados_tela.ser_nf
                            AND subserie_nf       = p_dados_tela.ssr_nf
                            AND fornecedor        = p_dados_tela.cod_fornecedor
                            AND seq_nota_fiscal   = p_array[l_aux].cod_item
                            AND tip_pesagem       = "1"
                            AND aviso_recebto     IS NULL
                         WHENEVER ERROR STOP
                         IF sqlca.sqlcode <> 0 THEN
                            ERROR " Item informado ja possui sequencia com pesagem "
                            SLEEP 2
                            NEXT FIELD cod_item
                         END IF
                      END IF
                   END FOR
                END IF
             END IF

             IF p_array[p_ind].qtd_declarad_nf IS NOT NULL AND
                p_array_compl[p_ind].ar_com_pc = "S" THEN
                LET p_qtd_array = p_array[p_ind].qtd_declarad_nf
                LET p_val_array = p_array[p_ind].pre_unit_nf
                IF p_dados_tela.ies_especie_nf <> "NFD" THEN
                   IF sup376_verifica_controla_valor(p_array_compl[p_ind].num_oc) = FALSE THEN
                      LET p_soma_reserva2 = NULL
                      CALL sup386_popup_ordens_reservada(p_cod_empresa,
                        p_array[p_ind].cod_item, p_array_compl[p_ind].num_pedido,
                        p_array_compl[p_ind].num_oc, p_array_compl[p_ind].num_prog_entrega,
                        p_qtd_array, "N" , p_funcao,
                        p_dados_tela.num_aviso_rec, p_array[p_ind].seq, p_ind)
                        RETURNING p_soma_reserva2, p_ies_reservou, p_ord_forn
                        LET p_qtd_array = 0
                        LET p_val_array = 0
                        LET int_flag = 0
                        CALL log006_exibe_teclas("01 02 03 07", p_versao)
                        CURRENT WINDOW IS w_sup37601
                   END IF
                END IF
                IF m_bloq_entr_data = "S" THEN
                   IF NOT sup0949_verifica_diverg_dat_entrega(p_ind) THEN
                      NEXT FIELD qtd_declarad_nf
                   END IF
                END IF
                ##Se for nota fiscal de importação não deverá verificar divergência de preço
                IF m_bloq_entr_preco = "S" AND p_dados_tela.cod_operacao[1,1] <> "7" AND
                   m_nfr_import = FALSE AND p_array_compl[p_ind].ar_com_pc = "S" {760674} THEN
                   IF NOT sup0949_verifica_diverg_preco_unit(p_funcao, p_ind, p_dados_tela.num_aviso_rec, p_array[p_ind].seq,
                                                             p_array[p_ind].pre_unit_nf, 'SUP3760') THEN
                      NEXT FIELD pre_unit_nf
                   END IF
                END IF
             ELSE
                EXIT FOR
             END IF
          END FOR

          LET p_ind = p_ind_ant

          IF p_funcao = "MODIFICACAO" AND
             p_array_compl[p_ind].alterou_val_liquido = FALSE THEN
             IF p_val_liquido_ant <> p_array[p_ind].val_liquido_item THEN
                ERROR "Altera Base de Calculo do IPI ???" ATTRIBUTE (reverse)
                IF log004_confirm(21,39) THEN
                   LET p_base_ipi[p_ind].val_liquido_item = p_val_liquido_ant
                END IF
                LET p_array_compl[p_ind].alterou_val_liquido = TRUE
             END IF
          END IF

          IF p_ord_forn = FALSE AND
             p_funcao = "INCLUSAO" THEN
             IF (p_pedidos[1,5] = "XXXXX") OR
                (p_pedidos IS NULL)        THEN
                IF p_par_sup.ies_entrada_sem_pc = "N" AND
                   p_ies_entr_sem_ped = FALSE THEN
                   LET p_ies_pagamento2 = NULL
                   CALL sup376_busca_cond_pgto_cap(p_dados_tela.cnd_pgto_nf)
                   LET p_ies_pagamento2 = p_cond_pgto_cap.ies_pagamento
                   IF p_ies_pagamento2 = "3" THEN
                   ELSE
                      ERROR " Nao ha ordens de compras para este Fornecedor "
                      NEXT FIELD qtd_declarad_nf
                   END IF
                END IF
             END IF
          END IF

          LET p_ind = arr_count()

          FOR p_ind2 = 1 TO p_ind
             IF (p_array[p_ind2].cod_item IS NULL OR
                 p_array[p_ind2].cod_item = " ")  AND
                (p_array[p_ind2].den_item IS NULL OR
                 p_array[p_ind2].den_item = " ")  AND
                (p_array[p_ind2].cod_unid_med_nf IS NULL OR
                 p_array[p_ind2].cod_unid_med_nf = " ")  AND
                (p_array[p_ind2].qtd_declarad_nf IS NULL OR
                 p_array[p_ind2].qtd_declarad_nf = 0  OR
                 p_array[p_ind2].qtd_declarad_nf = " ")  AND
                (p_array[p_ind2].pre_unit_nf     IS NULL OR
                 p_array[p_ind2].pre_unit_nf     = 0     OR
                 p_array[p_ind2].pre_unit_nf = " ")      AND
                (p_array[p_ind2].val_liquido_item IS NULL OR
                 p_array[p_ind2].val_liquido_item = 0     OR
                 p_array[p_ind2].val_liquido_item = " ")  THEN
                 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                                              p_cod_empresa,
                                              p_dados_tela.num_aviso_rec) = FALSE THEN
                    INITIALIZE p_array[p_ind2].* TO NULL
                 END IF
             ELSE
                IF p_funcao = "MODIFICACAO" THEN
                   CALL sup376_verifica_update_after()

                   CALL sup3760_atualiza_item_de_terc(0, 0," ", " ", p_dados_tela.dat_emis_nf,
                                                      p_dados_tela.dat_entrada_nf,
                                                      p_dados_tela.num_nf, p_dados_tela.ser_nf,
                                                      p_dados_tela.ssr_nf, p_dados_tela.cod_fornecedor,
                                                      p_dados_tela.ies_especie_nf,
                                                      p_array[p_ind2].seq, 2)
                        RETURNING p_status
                END IF

                IF p_funcao = "INCLUSAO" OR
                   p_funcao =  "INCLU.ITENS" THEN

                   IF p_array_compl[p_ind2].ar_com_pc = "S" AND p_par_sup.ies_modulo_compras = "S" THEN
                      IF NOT sup3760_pedido_ordem_valido(p_array_compl[p_ind2].num_pedido,
                                                         p_array_compl[p_ind2].num_oc) THEN
                         NEXT FIELD cod_item
                      END IF
                   END IF

                   IF (p_dados_tela.ies_especie_nf <> "NFR" AND
                       p_dados_tela.ies_especie_nf <> "NFD") OR
                       m_nfr_import THEN
                      IF p_array[p_ind2].cod_item  IS NOT NULL AND
                         p_array[p_ind2].cod_item <> " " THEN
                         IF p_array_compl[p_ind2].ar_com_pc <> "S" OR
                            p_array_compl[p_ind2].ar_com_pc IS NULL THEN

                            LET l_forn_possui_pc = TRUE
                            IF find4GLFunction('supy5_fornecedor_possue_pc_oc') THEN
                               LET l_forn_possui_pc = supy5_fornecedor_possue_pc_oc(p_cod_empresa, p_dados_tela.cod_fornecedor)
                            END IF

                            IF l_forn_possui_pc THEN
                               IF p_par_sup.ies_modulo_compras = "S" THEN
                                  IF p_par_sup.ies_entrada_sem_pc = "N" AND
                                     p_ies_entr_sem_ped = FALSE THEN
                                     IF p_dados_tela.ies_especie_nf <> "NFC" AND
                                        p_dados_tela.ies_especie_nf <> "CON" AND
                                        p_dados_tela.ies_especie_nf <> "NFE" THEN
                                        ERROR "Empresa nao permite entrada de N.F. sem pedido de compra"
                                        NEXT FIELD cod_item
                                     END IF

                                     IF p_dados_tela.ies_especie_nf = "NFC" AND
                                        (p_par_sup_compl.ies_nf_compl_preco = "3" OR
                                         p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                        ERROR "Empresa nao permite entrada de NFC sem pedido de compra"
                                        NEXT FIELD cod_item
                                     END IF

                                     IF p_dados_tela.ies_especie_nf = "NFE"       AND
                                        (p_par_sup_compl.ies_nf_compl_preco = "2" OR
                                         p_par_sup_compl.ies_nf_compl_preco = "4") THEN
                                        ERROR "Empresa nao permite entrada de NFE sem pedido de compra."
                                        NEXT FIELD cod_item
                                     END IF
                                  ELSE
                                     IF p_dados_tela.ies_especie_nf = "NFM" AND m_controla_gao = "S" THEN
                                        IF p_array_pedidos[1].num_pedido IS NULL OR
                                           p_array_pedidos[1].num_pedido = " " THEN
                                           CALL log0030_mensagem(" Função não permitida, NFM com controle de GAO exige pedido de compra","exclamation")
                                           NEXT FIELD cod_item
                                        END IF
                                     END IF
                                  END IF
                               END IF
                            END IF
                         END IF
#### OS 63009 - calcula totais importacao
                         IF p_nfe_import = TRUE OR p_nfm_import = TRUE THEN
                            LET p_array_imp[p_ind2].val_ii =
                                           (p_array_imp[p_ind2].val_ii_tot *
                                            p_array[p_ind2].qtd_declarad_nf) /
                                            p_array_imp[p_ind2].quantidade
                            LET p_array_imp[p_ind2].val_desp_imp =
                                           (p_array_imp[p_ind2].val_desp_imp_tot *
                                            p_array[p_ind2].qtd_declarad_nf) /
                                            p_array_imp[p_ind2].quantidade
                            LET p_array_imp[p_ind2].val_ipi =
                                           (p_array_imp[p_ind2].val_ipi_tot *
                                            p_array[p_ind2].qtd_declarad_nf) /
                                            p_array_imp[p_ind2].quantidade
                            LET p_array_imp[p_ind2].val_icms =
                                           (p_array_imp[p_ind2].val_icms_tot *
                                            p_array[p_ind2].qtd_declarad_nf) /
                                            p_array_imp[p_ind2].quantidade
                            LET p_array_imp[p_ind2].val_da_icms =
                                           (p_array_imp[p_ind2].val_da_icms *
                                            p_array[p_ind2].qtd_declarad_nf) /
                                            p_array_imp[p_ind2].quantidade

                            LET p_nf_sup.val_ipi_nf = p_nf_sup.val_ipi_nf +
                                                      p_array_imp[p_ind2].val_ipi
                            IF m_num_processo >= g_proc_ini_os163407 THEN
                               LET p_nf_sup.val_despesa_aces = p_nf_sup.val_despesa_aces +
                                                               p_array_imp[p_ind2].val_da_icms
                            ELSE
                               LET p_nf_sup.val_despesa_aces = p_nf_sup.val_despesa_aces +
                                                               p_array_imp[p_ind2].val_ii +
                                                               p_array_imp[p_ind2].val_desp_imp
                            END IF
                            LET p_nf_sup.val_tot_icms_nf_d = p_nf_sup.val_tot_icms_nf_d +
                                                             p_array_imp[p_ind2].val_icms

                            CALL sup3762_busca_piscofins_imp() RETURNING l_val_tot_piscofins

                            IF  l_val_tot_piscofins IS NOT NULL
                            AND l_val_tot_piscofins <> 0 THEN
                               LET l_val_tot_piscofins = (l_val_tot_piscofins *
                                                          p_array[p_ind2].qtd_declarad_nf) /
                                                          p_array_imp[p_ind2].quantidade
                            END IF

                            IF g_icms_total_nf = "S" AND p_nf_sup.dat_entrada_nf >= g_dat_icms_tot_nf THEN
                               LET p_nf_sup.val_tot_nf_d = p_nf_sup.val_tot_nf_d +
                                                           p_array[p_ind2].val_liquido_item +
                                                           p_array_imp[p_ind2].val_ipi +
                                                           p_array_imp[p_ind2].val_icms +
                                                           l_val_tot_piscofins
                            ELSE
                               LET p_nf_sup.val_tot_nf_d = p_nf_sup.val_tot_nf_d +
                                                           p_array[p_ind2].val_liquido_item +
                                                           p_array_imp[p_ind2].val_ipi +
                                                           l_val_tot_piscofins
                            END IF
                            LET p_dados_tela_f.val_ipi_nf        = p_nf_sup.val_ipi_nf
                            LET p_dados_tela_f.val_tot_icms_nf_d = p_nf_sup.val_tot_icms_nf_d
                            LET p_dados_tela_f.val_tot_nf_d      = p_nf_sup.val_tot_nf_d
                         END IF
                      END IF
                   END IF
                END IF
                IF p_array[p_ind2].cod_item IS NULL OR
                   p_array[p_ind2].cod_item = " "   THEN
                   IF (p_dados_tela.ies_especie_nf <> "NFD" AND
                       p_dados_tela.ies_especie_nf <> "NFR" AND
                       p_dados_tela.ies_especie_nf <> "NFC") OR
                      ((p_dados_tela.ies_especie_nf = "NFD" OR
                        p_dados_tela.ies_especie_nf  =  "NFR") AND
                       p_ies_item_nfd_nfr          = "S")  THEN
                      ERROR "Informe codigo do item"
                      NEXT FIELD cod_item
                   ELSE
                      LET p_array[p_ind2].cod_item = " "
                   END IF
                ELSE
                   IF m_ies_cit_item = "S" THEN
                      IF sup3760_testa_cit_item(p_array[p_ind2].cod_item) THEN
                         ERROR "Produto Citricola, verificar tabela CIT_ITEM "
                         NEXT FIELD cod_item
                      END IF
                   END IF
                END IF
                IF p_array[p_ind2].den_item IS NULL     AND
                   p_dados_tela.ies_especie_nf <> "NFD" AND
                   p_dados_tela.ies_especie_nf <> "NFR" THEN
                   ERROR "Informe denominacao do item"
                   NEXT FIELD den_item
                END IF
                IF p_array[p_ind2].cod_unid_med_nf IS NULL AND
                   p_dados_tela.ies_especie_nf <> "NFD" AND
                   p_dados_tela.ies_especie_nf <> "NFR" AND
                   p_dados_tela.ies_especie_nf <> "NFC" THEN
                   ERROR "Informe unidade de medida"
                   NEXT FIELD cod_unid_med_nf
                END IF

                IF m_tem_valid_fim THEN
                   ### Tabela COD_FISCAL_SUP ja foi convertida.
                   INITIALIZE l_status, l_dat_fim_valid TO NULL
                   CALL sup0686_retorna_dat_fim_valid(p_dados_tela.cod_operacao,
                                                      p_dados_tela.cod_fiscal_compl)
                                                      RETURNING l_status,
                                                                l_dat_fim_valid
                   IF l_dat_fim_valid IS NULL THEN
                      IF p_dados_tela.cod_operacao[3,5] = "101" AND
                         p_ies_contrib_ipi = "S" AND
                         p_array[p_ind2].cod_item IS NOT NULL AND
                         p_array[p_ind2].cod_item <> " " THEN
                         IF p_array[p_ind2].cod_cla_fisc_nf IS NULL OR
                            p_array[p_ind2].cod_cla_fisc_nf = " " OR
                            p_array[p_ind2].cod_cla_fisc_nf = 0 THEN
                            ERROR "Informe classificacao fiscal"
                            NEXT FIELD cod_cla_fisc_nf
                         END IF
                      END IF
                   ELSE
                      IF p_dados_tela.cod_operacao[3,4] = "11" AND
                         p_ies_contrib_ipi = "S" AND
                         p_array[p_ind2].cod_item IS NOT NULL AND
                         p_array[p_ind2].cod_item <> " " THEN
                         IF p_array[p_ind2].cod_cla_fisc_nf IS NULL OR
                            p_array[p_ind2].cod_cla_fisc_nf = " " OR
                            p_array[p_ind2].cod_cla_fisc_nf = 0 THEN
                            ERROR "Informe classificacao fiscal"
                            NEXT FIELD cod_cla_fisc_nf
                         END IF
                      END IF
                   END IF
                ELSE
                   IF p_dados_tela.cod_operacao[3,4] = "11" AND
                      p_ies_contrib_ipi = "S" AND
                      p_array[p_ind2].cod_item IS NOT NULL AND
                      p_array[p_ind2].cod_item <> " " THEN
                      IF p_array[p_ind2].cod_cla_fisc_nf IS NULL OR
                         p_array[p_ind2].cod_cla_fisc_nf = " " OR
                         p_array[p_ind2].cod_cla_fisc_nf = 0 THEN
                         ERROR "Informe classificacao fiscal"
                         NEXT FIELD cod_cla_fisc_nf
                      END IF
                   END IF
                END IF

                IF p_array[p_ind2].qtd_declarad_nf CLIPPED IS NULL THEN
                   ERROR "Informe quantidade declarada"
                   NEXT FIELD qtd_declarad_nf
                END IF

                IF p_array[p_ind2].pre_unit_nf CLIPPED IS NULL THEN
                   ERROR "Informe preco unitario"
                   NEXT FIELD pre_unit_nf
                END IF

                IF p_array[p_ind2].val_liquido_item CLIPPED IS NULL THEN
                   ERROR "Informe valor liquido do item"
                   NEXT FIELD val_liquido_item
                END IF
             END IF
          END FOR

       END IF


    ON KEY (f1, control-w)
       CALL sup376_help()
    ON KEY (control-z, f4)
       CALL sup376_popups(p_funcao)
       LET int_flag = 0

 END INPUT

 LET p_ind = arr_curr()
 LET p_ind1 = scr_line()
 CALL sup3760_botao_zoom("OFF",3,68)
 CURRENT WINDOW IS w_sup37601

 IF sup1481_nfc_compl_imposto(p_dados_tela.ies_especie_nf,
                              p_cod_empresa,
                              p_dados_tela.num_aviso_rec) = FALSE THEN
    IF p_array_wms[1].cod_item IS NULL THEN
       IF (p_array_wms[1].den_item IS NULL OR
           p_array_wms[1].den_item = " ")  AND
          (p_array_wms[1].cod_unid_med_nf IS NULL OR
           p_array_wms[1].cod_unid_med_nf = " ")  AND
          (p_array_wms[1].qtd_declarad_nf IS NULL OR
           p_array_wms[1].qtd_declarad_nf = 0  OR
           p_array_wms[1].qtd_declarad_nf = " ")  AND
          (p_array_wms[1].pre_unit_nf     IS NULL OR
           p_array_wms[1].pre_unit_nf     = 0     OR
           p_array_wms[1].pre_unit_nf = " ")      AND
          (p_array_wms[1].val_liquido_item IS NULL OR
           p_array_wms[1].val_liquido_item = 0     OR
           p_array_wms[1].val_liquido_item = " ")  THEN
           ERROR "Nao foi informado item para esta nota"
           SLEEP 2
           LET int_flag = 1
           RETURN FALSE
        ELSE
           IF (p_dados_tela.ies_especie_nf <> "NFD" AND
               p_dados_tela.ies_especie_nf <> "NFR") THEN
              LET int_flag = 1
              RETURN FALSE
           END IF
        END IF
    END IF
 END IF

 IF p_dados_tela.cod_fornecedor IS NOT NULL THEN
    IF sup376_verifica_fornecedor() = FALSE THEN
       ERROR "Fornecedor excluido durante a operação."
       SLEEP 2
       LET int_flag = 1
    END IF
  END IF

 IF int_flag = 0 THEN
    RETURN TRUE
 ELSE
    FOR l_aux = 1 TO 999
       INITIALIZE p_array[p_ind].* TO NULL
       INITIALIZE p_array_wms[p_ind].* TO NULL
    END FOR
    RETURN FALSE
 END IF


 END FUNCTION

#------------------------------------------#
 FUNCTION sup3760_tempo_gasto(l_dathor_fim,
                              l_dathor_ini)
#------------------------------------------#
  DEFINE l_minutos      INTEGER,
         l_horas        INTEGER,
         l_dias         INTEGER,
         l_horas_totais INTEGER,
         l_segundos     INTEGER,
         l_tempo_gasto  CHAR(10),
         l_data         CHAR(20),
         l_dathor_fim   DATETIME YEAR TO SECOND,
         l_dathor_ini   DATETIME YEAR TO SECOND

  LET l_data = l_dathor_fim - l_dathor_ini
  # Contornando problema no TotvsTec espaço na primeira posição do retorno
  IF LENGTH(l_data) <= 19 THEN
     LET l_segundos = l_data[17,18]
     LET l_minutos  = l_data[14,15]
     LET l_horas    = l_data[11,12]
     LET l_dias     = l_data[08,09] * 24
  ELSE
     LET l_segundos = l_data[19,20]
     LET l_minutos  = l_data[16,17]
     LET l_horas    = l_data[13,14]
     LET l_dias     = l_data[10,11] * 24
  END IF

  LET l_horas_totais = l_dias + l_horas

  IF l_horas_totais > 99 THEN
     LET l_tempo_gasto = l_horas_totais USING "&&&", ":", l_minutos USING "&&", ":", l_segundos USING "&&"
  ELSE
     LET l_tempo_gasto = l_horas_totais USING "&&", ":", l_minutos USING "&&", ":", l_segundos USING "&&"
  END IF

  RETURN l_tempo_gasto
 END FUNCTION

# Passo 18 #
#-----------------------------------------------------------------------#
 FUNCTION sup3760_localiza_item_deposit_fornec(l_cod_item, l_fornecedor)
#-----------------------------------------------------------------------#
{ Localizar o item do depositante
}
  DEFINE l_cod_item         CHAR(25),
         l_fornecedor       LIKE fornecedor.cod_fornecedor,
         l_status           SMALLINT,
         l_item_depositante CHAR(25),
         l_continua         SMALLINT

  IF m_possui_regime_filial THEN
     LET l_fornecedor  = m_emitente_nf_filial
  END IF

  LET l_status = FALSE
  LET l_continua = TRUE
  IF ((p_dados_tela.ies_nf_aguard_nfe = "A") OR (p_dados_tela.ies_nf_aguard_nfe = "B" AND m_possui_regime_filial)) AND
     m_wms_depositante <> l_fornecedor THEN
     # Passo 18.1
     WHENEVER ERROR CONTINUE
        DECLARE cq_sup_par_itforn CURSOR FOR
        SELECT item
          FROM sup_par_itforn
         WHERE empresa         = p_cod_empresa
           AND fornecedor      = l_fornecedor
           AND parametro       = 'item_fornecedor_25'
           AND parametro_texto = l_cod_item
     WHENEVER ERROR STOP
     IF SQLCA.SQLCODE <> 0 THEN
        CALL log0030_processa_err_sql("DECLARE CURSOR","CQ_SUP_PAR_ITFORN", 0)
        LET l_continua = FALSE
     END IF

     WHENEVER ERROR CONTINUE
     OPEN cq_sup_par_itforn
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log0030_processa_err_sql("OPEN CURSOR","CQ_SUP_PAR_ITFORN", 0)
        LET l_continua = FALSE
     END IF

     WHENEVER ERROR CONTINUE
     FETCH cq_sup_par_itforn INTO l_item_depositante
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 THEN
        LET l_status = TRUE
     END IF
  END IF

  RETURN l_item_depositante, l_status, l_continua

 END FUNCTION

# Passo 18.2 #
#-------------------------------------------------------#
 FUNCTION sup3760_wms_busca_item_complemento(l_cod_item)
#-------------------------------------------------------#
{ Busca o item que deverá ser adicionado a variável p_array

Parametros:
   l_cod_item: Código do item da tela

Retorno:
   Código do Item e o Status da operação

}
  DEFINE l_cod_item         CHAR(25),
         l_status           SMALLINT,
         l_cod_item_erp     LIKE sup_par_itforn.item,
         l_sucesso_sql      SMALLINT,
         l_ies_item_wms     SMALLINT

  LET l_status = FALSE
  CALL wmst81_wms_item_complemento_busca_item(p_cod_empresa,
                                              m_wms_depositante,
                                              l_cod_item CLIPPED,1) # Valida Item 25 posições
                                              RETURNING l_status,
                                                        l_cod_item_erp # Retorna item de 15 posições.
  IF l_status THEN
     RETURN l_cod_item_erp, TRUE
  ELSE
     IF LENGTH(l_cod_item CLIPPED) > 15 THEN
        RETURN NULL, FALSE
     ELSE
        # Passo 18.3 #
        INITIALIZE l_status TO NULL
        CALL sup376_busca_item(p_cod_empresa, l_cod_item CLIPPED) RETURNING l_status
        IF l_status THEN
           IF m_tipo_documento = "P" OR    # Provisório
              m_tipo_documento = "D" THEN  # Definido
              # Verifica se o item de 15 posições pertence ao depositante.
              WHENEVER ERROR CONTINUE
              SELECT item
                FROM wms_item_complemento
               WHERE empresa = p_cod_empresa
                 AND deposit = m_wms_depositante
                 AND item    = l_cod_item  # Item 15 posições
              WHENEVER ERROR STOP
              IF sqlca.sqlcode = 0 THEN
                 RETURN l_cod_item CLIPPED, TRUE
              ELSE
                 # Verifica se o item está sob controle do WMS.
                 CALL wms0004_item_sob_controle_wms(p_cod_empresa,l_cod_item)
                      RETURNING l_sucesso_sql, l_ies_item_wms
                 # Se não estiver sendo controlado pelo WMS, permitir informar item.
                 IF NOT l_ies_item_wms THEN
                    RETURN l_cod_item CLIPPED, TRUE
                 END IF
              END IF
           ELSE
              # Tipo de Documento Normal -> Indica que a NF não será utilizada em processos do wms.
              RETURN l_cod_item CLIPPED, TRUE
           END IF
        ELSE
           RETURN NULL, FALSE
        END IF
     END IF
  END IF

  RETURN NULL, FALSE

 END FUNCTION

#---------------------------------------#
 FUNCTION sup3760_fornecedor_eh_deposit()
#---------------------------------------#
  DEFINE l_parametro_texto LIKE sup_par_ar.parametro_texto

  # Verifica se o fornecedor informado é um depositante.

  WHENEVER ERROR CONTINUE
  SELECT parametro_texto
    INTO l_parametro_texto
    FROM sup_par_fornecedor
   WHERE empresa    = "SE"
     AND fornecedor = p_dados_tela.cod_fornecedor
     AND parametro  = "ies_depositante"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0        OR
     sqlca.sqlcode = NOTFOUND THEN
     IF l_parametro_texto = "N" OR
        l_parametro_texto IS NULL OR
        l_parametro_texto = ' ' THEN
        CALL log0030_processa_mensagem("Fornecedor informado não é um depositante.","exclamation",0)
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#----------------------------------------------#
 FUNCTION sup3760_altera_provisorio_definitivo()
#----------------------------------------------#
# Verifica se o tipo do documento pode ser alterado de Provisório para Definido.

  # Somente permitir a troca se o fornecedor for um depositante.
  IF NOT sup3760_fornecedor_eh_deposit() THEN
     RETURN FALSE
  END IF

  # Somente permitir a troca se para o depositante existit um contrato ativo.
  IF NOT sup3760_possui_contrato_ativo_deposit() THEN
     RETURN FALSE
  END IF

  # Somente permitir a troca se o depositante for igual ao fornecedor.
  IF NOT sup3760_deposit_diferente_fornec() THEN
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#------------------------------------------#
 FUNCTION sup3760_altera_normal_provisorio()
#------------------------------------------#
# Verifica se o tipo do documento pode ser alterado de Normal para Provisório.

  # Somente permitir a troca se o fornecedor for um depositante.
  IF NOT sup3760_fornecedor_eh_deposit() THEN
     RETURN FALSE
  END IF

  # Somente permitir a troca se para o depositante existit um contrato ativo.
  IF NOT sup3760_possui_contrato_ativo_deposit() THEN
     RETURN FALSE
  END IF

  IF NOT sup3760_itens_nf_pertecem_deposit() THEN
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#-----------------------------------------------#
 FUNCTION sup3760_possui_contrato_ativo_deposit()
#-----------------------------------------------#
  DEFINE l_contrato        LIKE wms_contrato.contrato,
         l_status          SMALLINT

  CALL wmst15_retorna_contrato_ativo_deposit(p_cod_empresa,
                                             p_dados_tela.cod_fornecedor,
                                             TODAY,0) RETURNING l_contrato,
                                                                l_status
  IF l_contrato = "0" THEN
     CALL log0030_processa_mensagem("Depositante não possui contrato ativo.","exclamation",0)
     RETURN FALSE
  END IF

  RETURN  TRUE

 END FUNCTION

#------------------------------------------#
 FUNCTION sup3760_deposit_diferente_fornec()
#------------------------------------------#
  DEFINE l_wms_depositante CHAR(15)

  INITIALIZE l_wms_depositante TO NULL

  WHENEVER ERROR CONTINUE
  SELECT cod_depositante
   INTO l_wms_depositante
   FROM ar_depos
  WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("LEITURA","AR_DEPOS")
     RETURN FALSE
  ELSE
     IF l_wms_depositante <> p_dados_tela.cod_fornecedor THEN
        CALL log0030_mensagem("Depositante da nota fiscal é diferente do fornecedor. Tipo de documento não pode ser alterado para definitivo.","exclamation")
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#-------------------------------------------#
 FUNCTION sup3760_itens_nf_pertecem_deposit()
#-------------------------------------------#
# Verfica se os itens da NF que forem controlados pelo WMS pertencem ao depositante.
  DEFINE l_msg            CHAR(100)

  INITIALIZE l_msg TO NULL

  IF NOT sup3760_itens_pertencem_deposit(p_dados_tela.cod_fornecedor) THEN
     LET l_msg = "Item ", m_item_interno CLIPPED, " não pertence ao fornecedor da nota fiscal."
     CALL log0030_processa_mensagem(l_msg,"exclamation",0)
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#------------------------------------------#
 FUNCTION sup3760_altera_normal_definitivo()
#------------------------------------------#
# Verifica se o tipo do documento pode ser alterado de Normal para Definido.

  # Somente permitir a troca se o fornecedor for um depositante.
  IF NOT sup3760_fornecedor_eh_deposit() THEN
     RETURN FALSE
  END IF

  # Somente permitir a troca se para o depositante existit um contrato ativo.
  IF NOT sup3760_possui_contrato_ativo_deposit() THEN
     RETURN FALSE
  END IF

  IF NOT sup3760_itens_nf_pertecem_deposit() THEN
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#---------------------------------#
 FUNCTION sup3760_existe_ar_depos()
#---------------------------------#
  DEFINE l_cont SMALLINT

  LET l_cont = 0

  WHENEVER ERROR CONTINUE
  SELECT COUNT(*)
    INTO l_cont
    FROM aviso_rec
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 OR
     l_cont <> 0 THEN
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#-----------------------------------#
 FUNCTION sup3760_verifica_usuario()
#-----------------------------------#

  WHENEVER ERROR CONTINUE
    SELECT sup_par_usuario.usuario
      FROM sup_par_usuario
     WHERE sup_par_usuario.empresa   = p_cod_empresa
       AND sup_par_usuario.parametro = "unidade_funcional"
       AND sup_par_usuario.usuario   = p_user
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF

END FUNCTION

#OS490902
#---------------------------------------#
 FUNCTION sup3760_aprova_erro_qtd_dias()
#---------------------------------------#

  DEFINE l_ind       SMALLINT,
         l_arr_curr  SMALLINT,
         l_scr_line  SMALLINT,
         l_arr_count SMALLINT,
         l_entrou    SMALLINT,
         l_msg       CHAR(50)

  CALL log006_exibe_teclas("01",p_versao)

  CALL log130_procura_caminho("sup3760l") RETURNING comando3
  OPEN WINDOW w_sup3760l AT 7,20 WITH FORM comando3
     ATTRIBUTE(BORDER, MESSAGE LINE LAST, PROMPT LINE LAST, COMMENT LINE LAST)

  WHENEVER ERROR CONTINUE
   DECLARE cq_nf_erro CURSOR FOR
    SELECT "N", nf_sup.dat_emis_nf, nf_sup.num_nf, nf_sup.ser_nf, nf_sup.ssr_nf,
           aviso_rec.cod_item, nf_sup.num_aviso_rec, aviso_rec.num_seq
      FROM nf_sup, nf_sup_erro, aviso_rec
     WHERE nf_sup.cod_empresa             = p_cod_empresa
       AND nf_sup.cod_empresa             = nf_sup_erro.empresa
       AND nf_sup.cod_empresa             = aviso_rec.cod_empresa
       AND nf_sup.num_aviso_rec           = nf_sup_erro.num_aviso_rec
       AND nf_sup.num_aviso_rec           = aviso_rec.num_aviso_rec
       AND nf_sup_erro.num_seq            = aviso_rec.num_seq
       AND nf_sup_erro.des_pendencia_item = 'Data de validade não permite o recebimento do item'
     ORDER BY nf_sup.dat_emis_nf
  WHENEVER ERROR STOP
  IF  sqlca.sqlcode <> 0
  AND sqlca.sqlcode <> 100 THEN
      CALL log003_err_sql("DECLARE","NF_SUP / NF_SUP_ERRO / AVISO_REC")
  END IF

  LET l_ind    = 1
  LET l_entrou = FALSE

  WHENEVER ERROR CONTINUE
   FOREACH cq_nf_erro INTO ma_nf_erro[l_ind].seleciona,
                           ma_nf_erro[l_ind].dat_emis_nf,
                           ma_nf_erro[l_ind].num_nf,
                           ma_nf_erro[l_ind].ser_nf,
                           ma_nf_erro[l_ind].ssr_nf,
                           ma_nf_erro[l_ind].cod_item,
                           ma_aviso_rec[l_ind].num_aviso_rec,
                           ma_aviso_rec[l_ind].num_seq
      IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
         CALL log003_err_sql("FOREACH CURSOR","CQ_NF_ERRO")
      END IF

      LET l_ind = l_ind + 1
      LET l_entrou = TRUE

      IF l_ind > 500 THEN
         EXIT FOREACH
      END IF
   END FOREACH
  WHENEVER ERROR STOP

  IF l_entrou = FALSE THEN
     CALL log0030_mensagem("Não existem notas fiscais com erro a serem listadas.","info")
     RETURN
  END IF

  CALL log006_exibe_teclas("01 02 07",p_versao)
  CURRENT WINDOW IS w_sup3760l

  CALL set_count(l_ind - 1)

  LET int_flag = FALSE

  INPUT ARRAY ma_nf_erro WITHOUT DEFAULTS FROM sr_nf_erro.*
    --#ATTRIBUTES(INSERT ROW = FALSE, DELETE ROW = FALSE)

    BEFORE ROW
      LET l_arr_curr  = arr_curr()
      LET l_scr_line  = scr_line()
      LET l_arr_count = arr_count()

    AFTER FIELD seleciona
      IF ma_nf_erro[l_arr_curr].seleciona IS NOT NULL THEN
         IF  ma_nf_erro[l_arr_curr].seleciona <> "S"
         AND ma_nf_erro[l_arr_curr].seleciona <> "N" THEN
            CALL log0030_mensagem("Valor inválido.","excl")
            NEXT FIELD seleciona
         END IF
      ELSE
         CALL log0030_mensagem("Campo não preenchido.","excl")
         NEXT FIELD seleciona
      END IF

      IF ma_nf_erro[l_arr_curr].seleciona = "S" THEN
         IF sup3760_verifica_aprovacao_erro(l_arr_curr) THEN
            LET l_msg = "NF já aprovada. Usuário - ", m_user CLIPPED, " no dia ", m_data, ". "
            CALL log0030_mensagem(l_msg,"excl")
            LET ma_nf_erro[l_arr_curr].seleciona = "N"
            DISPLAY ma_nf_erro[l_arr_curr].* TO sr_nf_erro[l_arr_curr].*
         END IF
      END IF

      IF l_arr_curr = l_arr_count THEN
         IF  NOT fgl_lastkey() = fgl_keyval("UP")
         AND NOT fgl_lastkey() = fgl_keyval("LEFT")
         AND NOT fgl_lastkey() = fgl_keyval("ACCEPT") THEN
            CALL log0030_mensagem("Não há mais itens para esta direção.","excl")
            NEXT FIELD seleciona
         END IF
      END IF

    ON KEY(control-w, f1)
      CALL sup376_help()

  END INPUT

  IF int_flag THEN
     CLOSE WINDOW w_sup3760l
     RETURN
  ELSE
     FOR l_ind = 1 TO 500
        IF ma_nf_erro[l_ind].seleciona = "S" THEN
           CALL sup3760_insert_sup_par_ar(l_arr_count)
           EXIT FOR
        END IF
     END FOR

     CLOSE WINDOW w_sup3760l
  END IF

  FREE cq_nf_transito

END FUNCTION

#-----------------------------------------------#
 FUNCTION sup3760_insert_sup_par_ar(l_arr_count)
#-----------------------------------------------#

  DEFINE l_arr_count      SMALLINT,
         l_ind            SMALLINT

  FOR l_ind = 1 TO l_arr_count
     IF ma_nf_erro[l_ind].seleciona = "S" THEN
        WHENEVER ERROR CONTINUE
          INSERT INTO sup_par_ar(empresa,
                                 aviso_recebto,
                                 seq_aviso_recebto,
                                 parametro,
                                 par_ind_especial,
                                 parametro_texto,
                                 parametro_val,
                                 parametro_dat)
          VALUES (p_cod_empresa,
                  ma_aviso_rec[l_ind].num_aviso_rec,
                  ma_aviso_rec[l_ind].num_seq,
                  "aprova_erro",
                  " ", p_user, " ", TODAY)
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql('INSERT','SUP_PAR_AR')
        END IF

        WHENEVER ERROR CONTINUE
          DELETE FROM nf_sup_erro
           WHERE nf_sup_erro.empresa            = p_cod_empresa
             AND nf_sup_erro.num_aviso_rec      = ma_aviso_rec[l_ind].num_aviso_rec
             AND nf_sup_erro.num_seq            = ma_aviso_rec[l_ind].num_seq
             AND nf_sup_erro.des_pendencia_item = 'Data de validade não permite o recebimento do item'
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           CALL log003_err_sql('DELETE','NF_SUP_ERRO')
        END IF
     END IF
  END FOR

END FUNCTION

#----------------------------------------------------#
 FUNCTION sup3760_verifica_aprovacao_erro(l_arr_curr)
#----------------------------------------------------#

  DEFINE l_arr_curr SMALLINT

  WHENEVER ERROR CONTINUE
    SELECT sup_par_ar.parametro_dat,
           sup_par_ar.parametro_texto
      INTO m_data, m_user
      FROM sup_par_ar
     WHERE sup_par_ar.empresa           = p_cod_empresa
       AND sup_par_ar.aviso_recebto     = ma_aviso_rec[l_arr_curr].num_aviso_rec
       AND sup_par_ar.seq_aviso_recebto = ma_aviso_rec[l_arr_curr].num_seq
       AND sup_par_ar.parametro         = "aprova_erro"
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     RETURN FALSE
  ELSE
     RETURN TRUE
  END IF

END FUNCTION
#FIM OS490902

# INÍCIO O.S 450083
#-------------------------------------------------#
 FUNCTION sup3760_exclui_atualiza_prim_nf_deposit()
#-------------------------------------------------#
  DEFINE l_num_aviso_rec LIKE nf_sup.num_aviso_rec,
         l_altera_cod_nf SMALLINT

  # Verifica se existem outras notas fiscais para o depositante.
  # Se houver, irá  alterar  a tabela  wms_valid_prim_nf_deposit
  # para o número da primeira nota encontrada para o depositante.

  LET l_altera_cod_nf = FALSE

  WHENEVER ERROR CONTINUE
  DECLARE cq_nf_sup CURSOR FOR
  SELECT num_aviso_rec
    FROM nf_sup
   WHERE cod_empresa    = p_nf_sup.cod_empresa
     AND cod_fornecedor = p_dados_tela.cod_fornecedor
     AND num_aviso_rec <> p_nf_sup.num_aviso_rec
  WHENEVER ERROR STOP

  IF sqlca.sqlcode <> 0 THEN
     MESSAGE ""
     CALL log003_err_sql("DECLARE SQL","CQ_NF_SUP")
     RETURN FALSE
  END IF

  WHENEVER ERROR CONTINUE
  FOREACH cq_nf_sup INTO l_num_aviso_rec

     IF sqlca.sqlcode <> 0 THEN
        MESSAGE ""
        CALL log003_err_sql("FOREACH SQL","CQ_NF_SUP")
        RETURN FALSE
     END IF

     WHENEVER ERROR CONTINUE
     UPDATE wms_valid_prim_nf_deposit
        SET aviso_recebto = l_num_aviso_rec
      WHERE empresa       = p_nf_sup.cod_empresa
        AND deposit       = p_dados_tela.cod_fornecedor
        AND aviso_recebto = p_nf_sup.num_aviso_rec  # NF que será excluida.
     WHENEVER ERROR STOP

     IF sqlca.sqlcode <> 0 THEN
        MESSAGE ""
        CALL log003_err_sql("UPDATE","WMS_VALID_PRIM_NF_DEPOSIT")
        RETURN FALSE
     END IF

     LET l_altera_cod_nf = TRUE

     EXIT FOREACH

  END FOREACH
  WHENEVER ERROR STOP

  FREE cq_nf_sup
  # Se nota que está sendo excluída é a única do depositante,
  # excluir o registro da tabela wms_valid_prim_nf_deposit.
  IF l_altera_cod_nf = FALSE THEN
     IF wmsm131_wms_valid_prim_nf_deposit_leitura(p_nf_sup.cod_empresa,
                                                  p_dados_tela.cod_fornecedor,
                                                 TRUE,1) THEN
        IF NOT wmst131_wms_valid_prim_nf_deposit_exclui(p_nf_sup.cod_empresa,
                                                        p_dados_tela.cod_fornecedor,
                                                        FALSE,FALSE,0) THEN
           RETURN FALSE
        END IF
     ELSE
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION
# FIM O.S 450083
#----------------------------------------------------#
 FUNCTION sup3760_busca_val_icms_dev_ret(l_val_liquido_item,l_num_seq) #542889
#----------------------------------------------------#
  DEFINE l_val_icms_dev_ret LIKE ar_subst_tribut.val_icms_dev_ret,
         l_val_liquido_item LIKE aviso_rec.val_liquido_item,
         l_num_seq          LIKE aviso_rec.num_seq

  WHENEVER ERROR CONTINUE
    SELECT ar_subst_tribut.val_icms_dev_ret
      INTO l_val_icms_dev_ret
      FROM ar_subst_tribut
     WHERE ar_subst_tribut.cod_empresa   = p_cod_empresa
       AND ar_subst_tribut.num_aviso_rec = p_dados_tela.num_aviso_rec
       AND ar_subst_tribut.num_seq       = l_num_seq
       AND ar_subst_tribut.ies_tipo_icms = 'R'
  WHENEVER ERROR STOP
  IF sqlca.sqlcode = 0 THEN
     LET l_val_liquido_item = (l_val_liquido_item + l_val_icms_dev_ret)
  END IF

  RETURN l_val_liquido_item

 END FUNCTION


# OS 547161 COLUMBIA
#------------------------------------------#
 FUNCTION sup3760_insere_nf_regular_fiscal()
#------------------------------------------#

  WHENEVER ERROR CONTINUE
  INSERT INTO sup_par_ar (empresa,
                          aviso_recebto,
                          seq_aviso_recebto,
                          parametro,
                          par_ind_especial,
                          parametro_texto,
                          parametro_val,
                          parametro_dat)
                          VALUES (p_cod_empresa,
                                  p_nf_sup.num_aviso_rec,
                                  0,
                                  "nf_regular_fiscal",
                                  m_utiliz_regulariz_fiscal,
                                  NULL,
                                  NULL,
                                  NULL)
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("INCLUSAO","SUP_PAR_AR - WMS")
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#------------------------------------------#
 FUNCTION sup3760_controle_wms(l_funcao)
#------------------------------------------#
 DEFINE l_status              SMALLINT,
        l_altera_tipo_deposit SMALLINT,
        l_tipo                CHAR(1),
        l_contrato            LIKE wms_contrato.contrato,
        l_funcao              CHAR(30),
        l_deposit         LIKE fornecedor.cod_fornecedor,
        l_cgc           LIKE empresa.num_cgc,
        l_ins_estadual  LIKE empresa.ins_estadual,
        l_msg           CHAR(50)

   #--------------------------#
   # Alteração WMS OS: 450083 #
   #--------------------------#
   # Passo 9                  #

   IF m_wms_instal = "S" THEN

      LET m_alterou_tipo_modif   = FALSE
      IF l_funcao = "MODIFICACAO"  AND
         m_segmto_utilizacao = "O" THEN
         # Se o tipo de documento for alterado de Definitivo ou Normal para
         # Provisório deverá ser solicitado o código do depositante e na efe-
         # tivação da modificação deve-se incluir um registro da tabela AR_DEPOS.
         IF m_tipo_documento_old = "D" OR
            m_tipo_documento_old = "N" THEN
            IF m_tipo_documento  = "P" THEN
               LET m_alterou_tipo_modif  = TRUE
            END IF
         END IF
      END IF

      IF l_funcao = "INCLUSAO" OR m_alterou_tipo_modif  THEN
         LET m_wms_depositante = p_dados_tela.cod_fornecedor
         IF p_dados_tela.ies_nf_aguard_nfe <> "B" THEN
            LET l_deposit = NULL
            IF  m_segmento = "I" THEN
                WHENEVER ERROR CONTINUE
                SELECT empresa.num_cgc,
                       empresa.ins_estadual
                  INTO l_cgc,
                       l_ins_estadual
                  FROM empresa
                 WHERE empresa.cod_empresa = p_cod_empresa
                WHENEVER ERROR STOP
                IF  sqlca.sqlcode = 0 THEN
                    # Verifica se existe um depositante que seja a própria empresa
                    WHENEVER ERROR CONTINUE
                    SELECT fornecedor.cod_fornecedor
                      INTO l_deposit
                      FROM fornecedor
                     WHERE fornecedor.num_cgc_cpf = l_cgc
                       AND fornecedor.ins_estadual = l_ins_estadual
                    WHENEVER ERROR STOP
                    IF sqlca.sqlcode <> 0 THEN
                       LET l_deposit = NULL
                    END IF
                    LET m_wms_depositante = l_deposit
                END IF
            END IF
            IF  ( m_segmento = "O" AND p_dados_tela.ies_nf_aguard_nfe = "A" ) OR (m_segmento = "I" AND l_deposit IS NULL ) THEN # OS 561019
                CALL sup3760_wms_depositante() RETURNING l_tipo, l_status
                # Passo 11      #
                IF l_status THEN
                   IF l_tipo IS NOT NULL THEN
                      LET p_dados_tela.ies_nf_aguard_nfe = l_tipo
                      LET l_altera_tipo_deposit = FALSE
                      LET p_dados_tela.cod_fornecedor = m_wms_depositante
                      DISPLAY BY NAME p_dados_tela.*
                      DISPLAY sup3760_raz_social_fornecedor(m_wms_depositante) TO raz_social
                   ELSE
                      LET l_altera_tipo_deposit = TRUE
                   END IF
                ELSE
                   RETURN FALSE
                END IF
            END IF
         ELSE
            IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
               CALL wmst15_retorna_contrato_ativo_deposit(p_cod_empresa,
                                                          p_dados_tela.cod_fornecedor,
                                                          TODAY,
                                                          0) RETURNING l_contrato, l_status
               IF l_contrato = "0" THEN
                  CALL log0030_processa_mensagem("Depositante não possui contrato ativo.","exclamation",0)
                  RETURN FALSE
               END IF
            END IF
         END IF
#        # Passo 13 #
#        IF p_dados_tela.ies_nf_aguard_nfe = "B" THEN
#           IF NOT wms6133_verifica_dados_primeira_nf(p_cod_empresa,
#                                                     p_dados_tela.num_aviso_rec,
#                                                     p_dados_tela.cod_fornecedor) THEN
#              RETURN FALSE
#           END IF
#        END IF
      END IF
   END IF

   # Chamado 729881 - WMS
   IF find4GLFunction('wmsy18_vincula_q04') THEN
      IF m_wms_instal = "S"    AND
         l_funcao = "INCLUSAO" THEN
         LET m_wms_gravou_q04 = FALSE
         IF p_dados_tela.ies_especie_nf = 'NFD' THEN
            CALL wmsy18_vincula_q04(p_cod_empresa, p_dados_tela.num_aviso_rec) RETURNING m_wms_q04
            IF m_wms_q04 IS NOT NULL AND m_wms_q04 <> 0 THEN
               LET m_wms_gravou_q04 = TRUE
            END IF
         END IF
      END IF
   END IF

   #--------------------------#
   # Alteração WMS OS: 450083 #
   #--------------------------#
   # Passo 17                 #
   IF m_wms_instal = 'S' THEN
      IF m_utiliza_codf_deposit = 'S' THEN
         IF sup376_insere_array_wms(l_funcao) = TRUE THEN
            IF sup376_insere_totais(l_funcao) = TRUE THEN
               RETURN TRUE
            ELSE
               RETURN FALSE
            END IF
         ELSE
            RETURN FALSE
         END IF
      ELSE
         IF sup376_insere_array(l_funcao) = TRUE THEN
            IF sup376_insere_totais(l_funcao) = TRUE THEN
               RETURN TRUE
            ELSE
               RETURN FALSE
            END IF
         ELSE
            RETURN FALSE
         END IF
      END IF

   END IF
   #---------------#

  END FUNCTION

#-------------------------------------------------------#
 FUNCTION sup3760_busca_preco_sup_par_oc(l_num_oc)
#-------------------------------------------------------#

 DEFINE l_num_oc        LIKE ordem_sup.num_oc,
        l_num_cotacao   LIKE cotacao_preco.num_cotacao

 WHENEVER ERROR CONTINUE
 SELECT num_cotacao
   INTO l_num_cotacao
   FROM ordem_sup
  WHERE cod_empresa = p_cod_empresa
    AND num_oc      = l_num_oc
    AND ies_versao_atual = "S"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
    CALL log003_err_sql("SELECT","ORDEM_SUP(2)")
 END IF

 IF l_num_cotacao IS NULL THEN
    LET l_num_cotacao = 0
 END IF

 INITIALIZE m_pre_unit_oc TO NULL
 WHENEVER ERROR CONTINUE
 SELECT parametro_num
   INTO m_pre_unit_oc
   FROM sup_par_oc
  WHERE empresa       = p_cod_empresa
    AND ordem_compra  = l_num_oc
    AND parametro     = "preco_oito_decimais"
    AND seq_parametro = l_num_cotacao
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
    CALL log003_err_sql("SELECT","SUP_PAR_OC")
 END IF

 END FUNCTION

#--------------------------------------------#
 FUNCTION sup3760_recalculo_pre_liquido(l_ind,l_fat_conver_unid)
#--------------------------------------------#
  DEFINE l_ind       SMALLINT
  DEFINE l_liquido   LIKE sup_par_oc.parametro_num,
         l_pre_unit  LIKE sup_par_oc.parametro_num,
         l_qtd_solic LIKE ordem_sup.qtd_solic
  DEFINE l_val_aux   LIKE sup_par_oc.parametro_num

  DEFINE l_val_desc_acrescimos LIKE sup_par_des_acr.parametro_numerico,
         l_num_versao_cot      LIKE cotacao_preco.num_versao,
         lr_desc_acrescimos    RECORD LIKE desc_acrescimos.*,
         l_fat_conver_unid     LIKE ordem_sup.fat_conver_unid

  INITIALIZE m_pre_unit_oc TO NULL

  WHENEVER ERROR CONTINUE
  SELECT o.num_versao_cot
    INTO l_num_versao_cot
    FROM cotacao_preco c, ordem_sup_cot o
   WHERE c.cod_empresa    = p_cod_empresa
     AND c.cod_fornecedor = p_ordem_sup.cod_fornecedor
     AND c.num_cotacao    = p_ordem_sup.num_cotacao
     AND c.cod_item       = p_ordem_sup.cod_item
     AND o.cod_empresa    = c.cod_empresa
     AND o.num_oc         = p_ordem_sup.num_oc
     AND o.num_versao_oc  = p_ordem_sup.num_versao
     AND o.num_cotacao    = c.num_cotacao
     AND o.num_versao_cot = c.num_versao
     AND o.cod_fornecedor = c.cod_fornecedor
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("SELECT","COTACAO_PRECO")
  END IF

  WHENEVER ERROR CONTINUE
  DECLARE cq_rec_desc CURSOR FOR
   SELECT cod_empresa     ,
          cod_fornecedor  ,
          num_cotacao     ,
          num_versao      ,
          cod_item        ,
          num_sequencia   ,
          val_desc_acres  ,
          ies_desc_acres_1,
          ies_desc_acres_2,
          ies_desc_acres_3,
          ies_desc_acres_4,
          ies_desc_acres_5,
          txt_desc_acres
     FROM desc_acrescimos
    WHERE cod_empresa    = p_cod_empresa
      AND cod_fornecedor = p_ordem_sup.cod_fornecedor
      AND num_cotacao    = p_ordem_sup.num_cotacao
      AND num_versao     = l_num_versao_cot
      AND cod_item       = p_ordem_sup.cod_item
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("DECLARE CURSOR","CQ_REC_DESC")
  END IF

  WHENEVER ERROR CONTINUE
  OPEN cq_rec_desc
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("OPEN CURSOR","CQ_REC_DESC")
  END IF

  WHENEVER ERROR CONTINUE
  FETCH cq_rec_desc INTO lr_desc_acrescimos.*
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("FETCH CURSOR","CQ_REC_DESC")
  END IF

  LET l_liquido   = p_array[l_ind].pre_unit_nf     / l_fat_conver_unid
  LET l_pre_unit  =  p_array[l_ind].pre_unit_nf    / l_fat_conver_unid
  LET l_qtd_solic = p_ordem_sup.qtd_solic

  WHILE sqlca.sqlcode = 0
     CALL sup3760_busca_preco_sup_par_des_acr(lr_desc_acrescimos.cod_empresa    ,
                                              lr_desc_acrescimos.cod_fornecedor ,
                                              lr_desc_acrescimos.num_cotacao    ,
                                              lr_desc_acrescimos.num_versao     ,
                                              lr_desc_acrescimos.cod_item       ,
                                              lr_desc_acrescimos.num_sequencia) RETURNING l_val_desc_acrescimos

     IF l_val_desc_acrescimos IS NULL THEN
        LET l_val_desc_acrescimos = lr_desc_acrescimos.val_desc_acres
     END IF

     IF lr_desc_acrescimos.ies_desc_acres_5 <> "5" AND #ISS
        lr_desc_acrescimos.ies_desc_acres_5 <> "7" THEN #Acrescimo valor de venda
        IF lr_desc_acrescimos.ies_desc_acres_3 = "2" THEN #Sobre o novo preco
#-lteracao conforme O.S. 150619 ---------#
           IF lr_desc_acrescimos.ies_desc_acres_5 = "6" THEN #Bonificacao
              IF lr_desc_acrescimos.ies_desc_acres_1 = "2" THEN #Percentual
                 IF lr_desc_acrescimos.ies_desc_acres_2 = "1" THEN #Acrescimo
                    LET l_liquido = l_liquido + (l_liquido -
                                   (l_liquido /
                                  ((l_val_desc_acrescimos / 100 ) + 1)))
                 ELSE #Desconto
                    LET l_liquido = #l_liquido -
                                  ( l_liquido /
                                  ((l_val_desc_acrescimos / 100 ) + 1))
                 END IF
              ELSE #Valor absoluto
                 IF lr_desc_acrescimos.ies_desc_acres_2 = "1" THEN #Acrescimo
                    LET l_liquido = l_liquido +
                                    l_val_desc_acrescimos
                 ELSE #Desconto
                    LET l_liquido = l_liquido -
                                    l_val_desc_acrescimos
                 END IF
              END IF
           ELSE
#----------------------------------------#
              IF  lr_desc_acrescimos.ies_desc_acres_5 = "3" #frete
              AND lr_desc_acrescimos.ies_desc_acres_1 = "1" THEN #valor absoluto

                 LET l_val_aux = l_val_desc_acrescimos
                 IF l_qtd_solic <> 0 THEN
                    LET l_val_aux = l_val_aux / l_qtd_solic
                 END IF
                 LET l_liquido = l_liquido + l_val_aux
              ELSE
                 IF lr_desc_acrescimos.ies_desc_acres_1 = "2" THEN #Percentual
                    IF lr_desc_acrescimos.ies_desc_acres_2 = "1" THEN #Acrescimo
                       LET l_liquido = l_liquido +
                                     ( l_liquido * l_val_desc_acrescimos / 100 )
                    ELSE #Desconto
                       LET l_liquido = l_liquido -
                                     ( l_liquido * l_val_desc_acrescimos / 100 )
                    END IF
                 ELSE #Valor absoluto
                    IF lr_desc_acrescimos.ies_desc_acres_2 = "1" THEN #Acrescimo
                       LET l_liquido = l_liquido + l_val_desc_acrescimos
                    ELSE #Desconto
                       LET l_liquido = l_liquido - l_val_desc_acrescimos
                    END IF
                 END IF
              END IF
           END IF
        ELSE #Sobre o preco base
#-lteracao conforme O.S. 150619 ---------#
           IF lr_desc_acrescimos.ies_desc_acres_5 = "6" THEN #Bonificacao
              IF lr_desc_acrescimos.ies_desc_acres_1 = "2" THEN #Percentual
                 IF lr_desc_acrescimos.ies_desc_acres_2 = "1" THEN #Acrescimo
                    LET l_liquido = l_liquido + (l_pre_unit -
                                   (l_pre_unit /
                                  ((l_val_desc_acrescimos / 100 ) + 1)))
                 ELSE #Desconto
                    LET l_liquido = l_liquido - (l_pre_unit -
                                   (l_pre_unit /
                                  ((l_val_desc_acrescimos / 100 ) + 1)))
                 END IF
              ELSE #Valor Absoluto
                 IF lr_desc_acrescimos.ies_desc_acres_2 = "1" THEN #Acrescimo
                    LET l_liquido = l_liquido +
                                    l_val_desc_acrescimos
                 ELSE #Desconto
                    LET l_liquido = l_liquido -
                                    l_val_desc_acrescimos
                 END IF
              END IF
           ELSE
#----------------------------------------#
              IF  lr_desc_acrescimos.ies_desc_acres_5 = "3" #frete
              AND lr_desc_acrescimos.ies_desc_acres_1 = "1" THEN #valor absoluto

                 LET l_val_aux = l_val_desc_acrescimos
                 IF l_qtd_solic <> 0 THEN
                    LET l_val_aux = l_val_aux / l_qtd_solic
                 END IF
                 LET l_liquido = l_liquido + l_val_aux
              ELSE
                 IF lr_desc_acrescimos.ies_desc_acres_1 = "2" THEN #Percentual
                    IF lr_desc_acrescimos.ies_desc_acres_2 = "1" THEN #Acrescimo
                       LET l_liquido = l_liquido + ( l_pre_unit *
                                       l_val_desc_acrescimos / 100 )
                    ELSE #Desconto
                       LET l_liquido = l_liquido - ( l_pre_unit *
                                       l_val_desc_acrescimos / 100 )
                    END IF
                 ELSE #Valor absoluto
                    IF lr_desc_acrescimos.ies_desc_acres_2 = "1" THEN #Acrescimo
                       LET l_liquido = l_liquido + l_val_desc_acrescimos
                    ELSE #Desconto
                       LET l_liquido = l_liquido - l_val_desc_acrescimos
                    END IF
                 END IF
              END IF
           END IF
        END IF
     END IF

     WHENEVER ERROR CONTINUE
     FETCH cq_rec_desc INTO lr_desc_acrescimos.*
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
        CALL log003_err_sql("FETCH CURSOR","CQ_REC_DESC")
     END IF
  END WHILE

  LET m_pre_unit_oc = l_liquido * l_fat_conver_unid

  LET p_array[l_ind].pre_unit_nf = m_pre_unit_oc

 END FUNCTION

#-------------------------------------------------------#
 FUNCTION sup3760_busca_preco_sup_par_des_acr(l_cod_empresa    ,
                                              l_cod_fornecedor ,
                                              l_num_cotacao    ,
                                              l_num_versao     ,
                                              l_cod_item       ,
                                              l_seq)
#-------------------------------------------------------#

 DEFINE l_seq    SMALLINT,
        l_val_desc_acrescimos DECIMAL(25,10) # LIKE sup_par_des_acr.parametro_numerico

 DEFINE l_cod_empresa            LIKE desc_acrescimos.cod_empresa   ,
        l_cod_fornecedor         LIKE desc_acrescimos.cod_fornecedor,
        l_num_cotacao            LIKE desc_acrescimos.num_cotacao   ,
        l_num_versao             LIKE desc_acrescimos.num_versao    ,
        l_cod_item               LIKE desc_acrescimos.cod_item

 INITIALIZE l_val_desc_acrescimos TO NULL
 WHENEVER ERROR CONTINUE
 SELECT parametro_numerico
   INTO l_val_desc_acrescimos
   FROM sup_par_des_acr
  WHERE empresa            = l_cod_empresa
    AND fornecedor         = l_cod_fornecedor
    AND cotacao            = l_num_cotacao
    AND versao_cotacao     = l_num_versao
    AND item               = l_cod_item
    AND seq_desconto_acres = l_seq
    AND parametro          = "preco_oito_decimais"
    AND seq_parametro      = 1
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
    CALL log003_err_sql("SELECT","SUP_PAR_DES_ACR")
 END IF

 RETURN l_val_desc_acrescimos

 END FUNCTION

#----------------------------------------------------------#
 FUNCTION sup3760_verifica_cadastro_sup1785(l_funcao,
                                            l_cod_fisc_ant) #O.S. 550997
#----------------------------------------------------------#
 DEFINE l_funcao            CHAR(15),
        l_cod_fisc_ant      LIKE aviso_rec.cod_fiscal_item,
        l_msg               CHAR(200),
        l_status            SMALLINT,
        l_ies_tip_entr_ant  LIKE cod_fiscal_sup.ies_tip_entrada

 LET l_ies_tip_entr_ant = " "
 IF l_cod_fisc_ant IS NOT NULL AND ##Verificar se CFOP anterior caracterizava uma devolução.
    l_cod_fisc_ant <> p_dados_tela.cod_operacao THEN
    CALL sup0686_retorna_tipo_entrada(l_cod_fisc_ant,
                                      p_dados_tela.cod_fiscal_compl)
                                     RETURNING l_status,
                                               l_ies_tip_entr_ant

 END IF

 IF (p_ies_tip_entrada = "5" OR p_dados_tela.ies_especie_nf = "NFD" OR
     l_ies_tip_entr_ant = "5") THEN

    IF sup1786_existe_cadastro_sup1785(p_cod_empresa) THEN

       IF l_funcao = "INCLUSAO" OR
          NOT sup1786_devolucao_total(p_cod_empresa,
                                      p_dados_tela.num_aviso_rec, 0,
                                      p_dados_tela.ser_nf) THEN
          IF NOT sup1786_cfop_cadastrado_devolucao_sup1785(p_cod_empresa,
                                                           p_dados_tela.cod_operacao) AND
             m_validou_cfop = FALSE THEN
             LET l_msg = "CFOP não cadastrado como devolução no SUP1785. Continuar com a "
             IF l_funcao = "INCLUSAO" THEN
                LET l_msg = l_msg CLIPPED, " inclusão?"
             ELSE
                LET l_msg = l_msg CLIPPED, " modificação?"
             END IF

             LET m_validou_cfop = TRUE

             IF NOT log0040_confirm(12,15,l_msg) THEN
                RETURN FALSE
             END IF
          END IF
       ELSE
          IF l_cod_fisc_ant <> p_dados_tela.cod_operacao THEN
             IF NOT sup1786_verifica_de_para_cfop_sup1785(p_cod_empresa,
                                                          p_dados_tela.num_aviso_rec,
                                                          p_dados_tela.cod_operacao,
                                                          0,0) THEN
                RETURN FALSE
             END IF
          END IF
       END IF
    END IF
 END IF

 RETURN TRUE

 END FUNCTION

#---------------------------------------------------------------------------#
 FUNCTION sup3760_valida_alteracao_data_entrada_antes_corte()
#---------------------------------------------------------------------------#

  IF NOT supr6_integracao_batch(p_cod_empresa) THEN
     IF supr6_data_posterior_data_corte_logix_10(p_cod_empresa,  p_dados_tela.dat_entrada_nf) = TRUE THEN
        RETURN TRUE
     ELSE
        IF supr6_data_posterior_data_corte_logix_10(p_cod_empresa,  m_dat_entrada_ant) = false AND
           supr6_data_posterior_data_corte_logix_10(p_cod_empresa,  p_dados_tela.dat_entrada_nf) = FALSE THEN
           RETURN TRUE
        END IF
        CALL log0030_mensagem("Não é possível alterar data de entrada para antes da data de corte (CON4110).","exclamation")
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#---------------------------------------------------------------------------#
 FUNCTION sup3760_valida_alteracao_data_entrada_depois_corte()
#---------------------------------------------------------------------------#

  IF NOT supr6_integracao_batch(p_cod_empresa) THEN
     IF supr6_data_posterior_data_corte_logix_10(p_cod_empresa, m_dat_entrada_ant) = FALSE
     AND supr6_data_posterior_data_corte_logix_10(p_cod_empresa, p_dados_tela.dat_entrada_nf) = TRUE THEN
        CALL log0030_mensagem("Não é possível alterar data de entrada para depois da data de corte (CON4110).","exclamation")
        RETURN FALSE
     ELSE
        RETURN TRUE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#-----------------------------------------#
 FUNCTION sup3760_isProcesso_importacao()
#-----------------------------------------#
 DEFINE l_cont     SMALLINT

	WHENEVER ERROR CONTINUE
	SELECT COUNT(*)
	  INTO l_cont
	  FROM sup_par_ar
	 WHERE empresa           = p_cod_empresa
	   AND aviso_recebto     = p_dados_tela.num_aviso_rec
	   AND parametro         = "nfc_processo_imp"
	   AND parametro_val > 0
	WHENEVER ERROR STOP
	IF sqlca.sqlcode <> 0 THEN
	   IF sqlca.sqlcode <> 100 THEN
	      CALL log003_err_sql("SELECT","SUP_PAR_AR(2)")
	   END IF
	   RETURN FALSE
	END IF

	IF l_cont > 0 THEN
	   RETURN TRUE
	ELSE
	   RETURN FALSE
	END IF

 END FUNCTION

#----------------------------------------------------#
 FUNCTION sup3760_limpa_ar_despesa_compl_imp()
#----------------------------------------------------#

  IF sup3760_isProcesso_importacao() THEN
     WHENEVER ERROR CONTINUE
      UPDATE imp_desp_proc_item
          SET aviso_recebto     = NULL,
              sequencia_recebto = NULL
        WHERE empresa           = p_cod_empresa
          AND  aviso_recebto    = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("UPDATE","IMP_DESP_PROC_ITEM")
        RETURN FALSE
     END IF

     WHENEVER ERROR CONTINUE
     UPDATE despesa_processo
        SET num_aviso_rec  = NULL
      WHERE cod_empresa    = p_cod_empresa
        AND num_aviso_rec  = p_dados_tela.num_aviso_rec
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 THEN
        CALL log003_err_sql("UPDATE","DESPESA_PROCESSO")
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION


# 562142
#----------------------------------------------------#
 FUNCTION sup3760_atualiza_tabela_dados_antigo()
#----------------------------------------------------#

  WHENEVER ERROR CONTINUE
  UPDATE nf_sup
     SET ser_nf            = mr_dados_tela_ant.ser_nf,
         ssr_nf            = mr_dados_tela_ant.ssr_nf,
         ies_nf_aguard_nfe = mr_dados_tela_ant.ies_nf_aguard_nfe ,
         cod_operacao      = mr_dados_tela_ant.cod_operacao      ,
         dat_emis_nf       = mr_dados_tela_ant.dat_emis_nf       ,
         dat_entrada_nf    = mr_dados_tela_ant.dat_entrada_nf    ,
         cnd_pgto_nf       = mr_dados_tela_ant.cnd_pgto_nf       ,
         cod_mod_embar     = mr_dados_tela_ant.cod_mod_embar
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("UPDATE","NF_SUP")
     RETURN
  END IF

  WHENEVER ERROR CONTINUE
  UPDATE aviso_rec_compl
     SET cod_fiscal_compl = mr_dados_tela_ant.cod_fiscal_compl,
         cod_operacao     = mr_dados_tela_ant.cod_operac_estoq
   WHERE cod_empresa      = p_cod_empresa
     AND num_aviso_rec    = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql("UPDATE","AVISO_REC_COMPL")
     RETURN
  END IF

 END FUNCTION

#-------------------------------------#
 FUNCTION sup3760_backup_dados_tela()
#-------------------------------------#

  LET mr_dados_tela_ant.ser_nf            = p_dados_tela.ser_nf
  LET mr_dados_tela_ant.ssr_nf            = p_dados_tela.ssr_nf
  LET mr_dados_tela_ant.ies_nf_aguard_nfe = p_dados_tela.ies_nf_aguard_nfe
  LET mr_dados_tela_ant.cod_operac_estoq  = p_dados_tela.cod_operac_estoq
  LET mr_dados_tela_ant.cod_operacao      = p_dados_tela.cod_operacao
  LET mr_dados_tela_ant.cod_fiscal_compl  = p_dados_tela.cod_fiscal_compl
  LET mr_dados_tela_ant.dat_emis_nf       = p_dados_tela.dat_emis_nf
  LET mr_dados_tela_ant.dat_entrada_nf    = p_dados_tela.dat_entrada_nf
  LET mr_dados_tela_ant.cnd_pgto_nf       = p_dados_tela.cnd_pgto_nf
  LET mr_dados_tela_ant.cod_mod_embar     = p_dados_tela.cod_mod_embar
  LET mr_dados_tela_ant.num_nf            = p_dados_tela.num_nf
  LET mr_dados_tela_ant.ies_especie_nf    = p_dados_tela.ies_especie_nf

 END FUNCTION

#----------------------------------------------------#
 FUNCTION sup3760_existe_nota_debito_automatica() # 523038
#----------------------------------------------------#

  IF NOT log0150_verifica_se_tabela_existe("sup_cart_corr_aut") THEN
     RETURN FALSE
  END IF

  WHENEVER ERROR CONTINUE
  SELECT num_nota_debito
    FROM deb_fornec
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_dados_tela.num_aviso_rec
      AND EXISTS( SELECT UNIQUE aviso_recebto
                   FROM sup_cart_corr_aut
                  WHERE empresa       = p_cod_empresa
                    AND aviso_recebto = p_dados_tela.num_aviso_rec)

  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 THEN
     IF sqlca.sqlcode <> 100 THEN
        CALL log003_err_sql("SELECT","DEB_FORNEC")
     END IF
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION
#----------------------------------------------------#
 FUNCTION sup3760_nfe_transito_ja_impressa(l_cod_empresa,
                                           l_num_aviso_rec,
                                           l_ies_nf_aguard_nfe,
                                           l_cod_operacao,
                                           l_data_entrada)
#----------------------------------------------------#

  DEFINE l_cod_empresa              LIKE empresa.cod_empresa,
         l_num_aviso_rec            LIKE aviso_rec.num_aviso_rec,
         l_ies_nf_aguard_nfe        LIKE nf_sup.ies_nf_aguard_nfe,
         l_ies_especie_nf           LIKE nf_sup.ies_especie_nf,
         l_ies_nfe_emit             LIKE nfe_sup_compl.ies_nfe_emit,
         l_cod_operacao             LIKE nf_sup.cod_operacao,
         l_data_entrada             DATE

  WHENEVER ERROR CONTINUE
  SELECT ies_nfe_emit
    INTO l_ies_nfe_emit
    FROM nfe_sup_compl
   WHERE cod_empresa   = l_cod_empresa
     AND num_aviso_rec = l_num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("SELECT","NFE_SUP_COMPL")
     RETURN FALSE
  END IF

  IF l_ies_nfe_emit = "N" THEN
     WHENEVER ERROR CONTINUE
       SELECT par_ind_especial
         FROM sup_par_ar
        WHERE empresa           = l_cod_empresa
          AND aviso_recebto     = l_num_aviso_rec
          AND seq_aviso_recebto = 0
          AND parametro         = 'num_nf_atualizado'
     WHENEVER ERROR STOP
     IF sqlca.sqlcode = 0 THEN
        LET l_ies_nfe_emit = "S"
     END IF
  END IF

  IF l_ies_nf_aguard_nfe = "7" #AND l_cod_operacao[1,1] = "7"
  AND l_ies_nfe_emit = "S" THEN
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#----------------------------------------------------------------------------#
 FUNCTION sup3760_consiste_nota_fiscal_transito(l_ies_nf_aguard_nfe,
                                                l_cod_operacao)
#----------------------------------------------------------------------------#

  DEFINE l_ies_nf_aguard_nfe        LIKE nf_sup.ies_nf_aguard_nfe,
         l_cod_operacao           LIKE nf_sup.cod_operacao

  IF l_ies_nf_aguard_nfe = "7" #AND l_cod_operacao[1,1] = "7"
  THEN
     RETURN TRUE
  END IF

  RETURN FALSE

 END FUNCTION

#---------------------------------------------#
 FUNCTION sup3760_ies_utiliza_nfe(l_fornecedor)
#---------------------------------------------#
  DEFINE  l_fornecedor        LIKE fornecedor.cod_fornecedor,
          l_ies_utiliza_nfe   CHAR(01)

 INITIALIZE l_ies_utiliza_nfe TO NULL
 WHENEVER ERROR CONTINUE
 SELECT parametro_booleano
   INTO l_ies_utiliza_nfe
   FROM sup_par_fornecedor
  WHERE empresa    = 'SE'
    AND fornecedor = l_fornecedor
    AND parametro  = "ies_utiliza_NFe"
 WHENEVER ERROR STOP

 IF sqlca.sqlcode <> 0 THEN
    LET l_ies_utiliza_nfe = "N"
 END IF

 IF l_ies_utiliza_nfe IS NULL THEN
    LET l_ies_utiliza_nfe = "N"
 END IF

 RETURN l_ies_utiliza_nfe
 END FUNCTION

#------------------------------------------------------#
 FUNCTION sup3760_verifica_permissao_setor_aplicacao()
#------------------------------------------------------#
 DEFINE l_cod_item          LIKE item.cod_item

 WHENEVER ERROR CONTINUE
 DECLARE cl_ar CURSOR FOR
  SELECT UNIQUE cod_item
    FROM aviso_rec
   WHERE cod_empresa   = p_dados_tela.cod_empresa
     AND num_aviso_rec = p_dados_tela.num_aviso_rec
 WHENEVER ERROR STOP

 IF SQLCA.SQLCODE <> 0 THEN
    CALL log003_err_sql("DECLARE","CL_AR")
    RETURN FALSE
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cl_ar INTO l_cod_item
 WHENEVER ERROR STOP

    IF SQLCA.SQLCODE <> 0 THEN
       CALL log003_err_sql("FOREACH","CL_AR")
       RETURN FALSE
    END IF

    IF find4GLFunction('supy152_verifica_permissao_setor_aplicacao') THEN
       IF NOT supy152_verifica_permissao_setor_aplicacao(l_cod_item) THEN
          RETURN FALSE
       END IF
    END IF

 END FOREACH
 FREE cl_ar

 RETURN TRUE

 END FUNCTION
#----------------------------------------------------#
 FUNCTION sup3760_verif_ar_relac_nf_saida() #727998
#----------------------------------------------------#
  IF find4GLFunction('supy148_verif_ar_relac_nf_saida') THEN
     IF supy148_verif_ar_relac_nf_saida(p_dados_tela.num_nf,
                                        p_dados_tela.ser_nf,
                                        0,
                                        0,
                                        0,
                                        0,
                                        p_dados_tela.num_aviso_rec,
                                        "SUP3760") = FALSE THEN
        RETURN FALSE
     END IF
  END IF

  RETURN TRUE

 END FUNCTION

#--------------------------------------#
FUNCTION sup3760_busca_mod_emb_oc()
#--------------------------------------#
 DEFINE l_mod_embarque LIKE ordem_sup.cod_mod_embar

 WHENEVER ERROR CONTINUE
 DECLARE cq_mod_embar CURSOR FOR
  SELECT ordem_sup.cod_mod_embar
    FROM ordem_sup, proc_item
   WHERE ordem_sup.cod_empresa      = p_cod_empresa
     AND ordem_sup.num_oc           = proc_item.num_oc
     AND ordem_sup.ies_versao_atual = 'S'
     AND ordem_sup.cod_empresa      = proc_item.cod_empresa
     AND proc_item.num_processo     = p_processo_imp.num_processo
     AND proc_item.num_versao       = p_processo_imp.num_versao
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("DECLARE","CQ_ORDENS")
 END IF

 WHENEVER ERROR CONTINUE
 FOREACH cq_mod_embar INTO l_mod_embarque
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("FOREACH","CQ_MOD_EMBAR")
 END IF

    EXIT FOREACH

 END FOREACH
 WHENEVER ERROR CONTINUE
 FREE cq_mod_embar
 WHENEVER ERROR STOP

 RETURN l_mod_embarque

END FUNCTION

#---------------------------------------#
FUNCTION sup3760_valida_frete_cif_nf()
#---------------------------------------#
 DEFINE l_frete      SMALLINT,
        l_num_conhec LIKE frete_sup.num_conhec



 WHENEVER ERROR CONTINUE
 DECLARE cq_frete_cif CURSOR FOR
 SELECT num_conhec
   FROM ar_frete_cesta
  WHERE cod_empresa = p_cod_empresa
    AND num_aviso_rec = p_dados_tela.num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("CQ_FRETE_CIF","AR_FRETE_CESTA")
 END IF

 LET l_frete = FALSE

 WHENEVER ERROR CONTINUE
 FOREACH cq_frete_cif INTO l_num_conhec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("FOREACH","CQ_FRETE_CIF")
 END IF

    LET l_frete = TRUE

 END FOREACH

 IF l_frete = TRUE THEN
    RETURN TRUE
 ELSE
    RETURN FALSE
 END IF
 WHENEVER ERROR CONTINUE
 FREE cq_frete_cif
 WHENEVER ERROR STOP


END FUNCTION

#-----------------------------------#
 FUNCTION sup3760_informa_num_nfe()
#-----------------------------------#
  DEFINE l_num_nfe_aux    CHAR(09)

   CALL log130_procura_caminho("sup3760y") RETURNING comando3
    OPEN WINDOW w_sup3760y AT 7,2 WITH FORM comando3
    ATTRIBUTE(FORM LINE 1)
    CURRENT WINDOW IS w_sup3760y

  DISPLAY BY NAME p_dados_tela.ser_nf
  DISPLAY BY NAME p_dados_tela.ssr_nf
  DISPLAY BY NAME p_dados_tela.ies_especie_nf
  DISPLAY BY NAME p_dados_tela.cod_operac_estoq
  DISPLAY BY NAME p_dados_tela.cod_emp_benef
  DISPLAY BY NAME p_dados_tela.cod_operacao
  DISPLAY BY NAME p_dados_tela.cod_fiscal_compl
  DISPLAY BY NAME p_dados_tela.dat_emis_nf
  DISPLAY BY NAME p_dados_tela.dat_entrada_nf
  DISPLAY BY NAME p_dados_tela.cnd_pgto_nf
  DISPLAY BY NAME p_dados_tela.cod_mod_embar
  DISPLAY BY NAME p_dados_tela.ies_impostos
 CALL sup376_verifica_cnd_pgto() RETURNING p_status
 CALL sup376_verifica_mod_embar() RETURNING p_status


  INPUT m_num_nf_eletronica WITHOUT DEFAULTS FROM num_nfe

    AFTER FIELD num_nfe
       CALL sup3760_botao_zoom("OFF",3,68)
       IF m_num_nf_eletronica IS  NULL  THEN
          ERROR "Informe o numero da Nota."
          NEXT FIELD num_nfe
       ELSE
          IF m_num_nf_eletronica > 999999999 THEN
             ERROR "Nr.da Nota Fiscal invalido. Nao pode ser maior que 999999"
             NEXT FIELD num_nfe
          END IF
          IF p_dados_tela.ies_nf_aguard_nfe <> "6" AND
             m_num_nf_eletronica = 0 THEN
             ERROR "Nr.da Nota Fiscal invalido. Nao pode ser 0"
             NEXT FIELD num_nfe
          END IF
       END IF

      ON KEY (control-w, f1)
         #lds IF NOT LOG_logix_versao5() THEN
         #lds CONTINUE CONSTRUCT
         #lds END IF
        CALL sup376_help()
    ON KEY (control-z, f4)
       CALL sup3760_popup_nfe()

  END INPUT

  IF int_flag <> 0 THEN
     RETURN FALSE
     CLOSE WINDOW w_sup3760y
  END IF

  LET l_num_nfe_aux = m_num_nf_eletronica

  CASE
    WHEN LENGTH(l_num_nfe_aux) < = 7
       LET p_dados_tela.num_nf = m_num_nf_eletronica
    WHEN LENGTH(l_num_nfe_aux) = 8
       LET p_dados_tela.num_nf = l_num_nfe_aux[2,8]
    WHEN LENGTH(l_num_nfe_aux) = 9
       LET p_dados_tela.num_nf = l_num_nfe_aux[3,9]
  END CASE

  CLOSE WINDOW w_sup3760y
  CURRENT WINDOW IS w_sup3760
  DISPLAY BY NAME p_dados_tela.num_nf

  RETURN TRUE

 END FUNCTION

#-----------------------------------#
 FUNCTION sup3760_grava_num_nfe()
#-----------------------------------#

  WHENEVER ERROR CONTINUE
    INSERT INTO sup_par_ar (empresa,
                            aviso_recebto,
                            seq_aviso_recebto,
                            parametro,
                            parametro_val)
                    VALUES (p_cod_empresa,
                            p_dados_tela.num_aviso_rec,
                            0,
                            'num_nf_eletronica',
                            m_num_nf_eletronica)
  WHENEVER ERROR CONTINUE
  IF sqlca.sqlcode <> 0 THEN
     CALL log003_err_sql('INSERT','SUP_PAR_AR')
     RETURN FALSE
  END IF

  RETURN TRUE

 END FUNCTION

#---------------------------------#
 FUNCTION sup3760_popup_nfe()
#---------------------------------#
 DEFINE p_num_pedido       LIKE pedido_sup.num_pedido,
        p_num_oc           LIKE ar_diverg.num_oc,
        p_num_prog_entrega LIKE ar_diverg.num_prog_entrega,
        p_cod_item         LIKE ordem_sup.cod_item,
        p_den_item         LIKE aviso_rec.den_item,
        p_cod_imp_renda    LIKE nf_sup.cod_imp_renda,
        p_cod_unid_med_nf  LIKE aviso_rec.cod_unid_med_nf

  CASE
     WHEN infield(num_nfe)
         IF p_dados_tela.cod_fornecedor IS NULL  THEN
            ERROR " O codigo do fornecedor deve ser informado "
         ELSE
            CALL sup125_popup_ordens_fornec(p_cod_empresa,p_dados_tela.cod_fornecedor)
            FOR p_ind = 1 TO 200
               IF p_array_volta[p_ind].num_pedido IS NULL THEN
                  EXIT FOR
               END IF
               LET p_num_pedido = p_array_volta[p_ind].num_pedido
               LET p_num_oc     = p_array_volta[p_ind].num_oc
               LET p_num_prog_entrega = p_array_volta[p_ind].num_prog_entrega
               LET p_cod_item = p_array_volta[p_ind].cod_item
               LET p_den_item = p_array_volta[p_ind].den_item
               LET p_cod_unid_med_nf = p_array_volta[p_ind].cod_unid_med
            END FOR
            IF p_num_pedido IS NOT NULL  THEN
               CURRENT WINDOW IS w_sup3760y
            END IF
         END IF
  END CASE

END FUNCTION

#-------------------------------------#
FUNCTION sup3760_verifica_nfm_total()
#--------------------------------------#
 DEFINE  l_num_nf            LIKE nf_sup.num_nf,
         l_ser_nf            LIKE nf_sup.ser_nf,
         l_ssr_nf            LIKE nf_sup.ssr_nf,
         l_cod_fornecedor    LIKE nf_sup.cod_fornecedor,
         l_num_aviso_rec     LIKE nf_sup.num_aviso_rec,
         l_cod_operacao      LIKE aviso_rec_compl.cod_operacao,
         l_cod_fiscal_compl  LIKE aviso_rec_compl.cod_fiscal_compl,
         l_dat_emis_nf       LIKE nf_sup.dat_emis_nf,
         l_dat_entrada_nf    LIKE nf_sup.dat_entrada_nf,
         l_cnd_pgto_nf       LIKE nf_sup.cnd_pgto_nf,
         l_cod_mod_embar     LIKE nf_sup.cod_mod_embar,
         l_cod_operac_estoq  LIKE aviso_rec.cod_operac_estoq,
         l_total_itens_nfm   LIKE aviso_rec.qtd_declarad_nf,
         l_qtd_regularizada  LIKE ar_x_nf_pend.qtd_regularizada,
         l_comando           CHAR(200),
         l_contador          SMALLINT

 #encontra nota NFM
 WHENEVER ERROR CONTINUE
 SELECT UNIQUE num_nf, ser_nf, ssr_nf, cod_fornecedor
   INTO l_num_nf, l_ser_nf, l_ssr_nf, l_cod_fornecedor
   FROM ar_x_nf_pend
  WHERE ar_x_nf_pend.cod_empresa   = p_cod_empresa
    AND ar_x_nf_pend.num_aviso_rec = p_dados_tela.num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    RETURN
 END IF

 #busca num_aviso_rec NFM
 WHENEVER ERROR CONTINUE
 SELECT num_aviso_rec, dat_emis_nf, dat_entrada_nf, cnd_pgto_nf
   INTO l_num_aviso_rec, l_dat_emis_nf, l_dat_entrada_nf, l_cnd_pgto_nf
   FROM nf_sup
  WHERE cod_empresa    = p_cod_empresa
    AND num_nf         = l_num_nf
    AND ser_nf         = l_ser_nf
    AND ssr_nf         = l_ssr_nf
    AND cod_fornecedor = l_cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("SELECT","NF_SUP")
 END IF

 #verifica total de itens da NFM
 WHENEVER ERROR CONTINUE
 SELECT SUM(qtd_declarad_nf)
   INTO l_total_itens_nfm
   FROM aviso_rec
  WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = l_num_aviso_rec
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("SELECT","AVISO_REC")
 END IF

 #verifica total de itens regularizados para esta NF
 WHENEVER ERROR CONTINUE
 SELECT SUM(ar_x_nf_pend.qtd_regularizada)
   INTO l_qtd_regularizada
   FROM ar_x_nf_pend
  WHERE ar_x_nf_pend.cod_empresa     = p_cod_empresa
    AND ar_x_nf_pend.num_nf          = l_num_nf
    AND ar_x_nf_pend.ser_nf          = l_ser_nf
    AND ar_x_nf_pend.ssr_nf          = l_ssr_nf
    AND ar_x_nf_pend.cod_fornecedor  = l_cod_fornecedor
    AND ar_x_nf_pend.num_aviso_rec   IN (SELECT num_aviso_rec
                                           FROM nf_sup
                                          WHERE nf_sup.ies_nf_aguard_nfe     <> '7')
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 THEN
    CALL log003_err_sql("SELECT","AR_X_NF_PEND")
 END IF

 IF l_qtd_regularizada >= l_total_itens_nfm THEN
    WHENEVER ERROR CONTINUE
    UPDATE nf_sup SET ies_nf_aguard_nfe = '6'
    WHERE cod_empresa = p_cod_empresa
      AND num_aviso_rec = l_num_aviso_rec
    WHENEVER ERROR STOP


    CALL log120_procura_caminho("sup0682") RETURNING l_comando
    LET l_comando = l_comando CLIPPED    ," ",
                    p_cod_empresa," ",
                    l_num_aviso_rec
    RUN l_comando RETURNING p_cancel

    # Inicio chamado 835591
    IF NOT sup3760_insere_parametro_sup1544(l_num_aviso_rec) THEN
       RETURN
    END IF
    # Fim chamado 835591

    CALL log120_procura_caminho("sup0680") RETURNING l_comando
    LET l_comando = l_comando CLIPPED," ",p_cod_empresa,
                                        " ",l_num_aviso_rec
    RUN l_comando RETURNING p_cancel

    # Inicio chamado 835591
    IF NOT sup3760_elimina_parametro_sup1544(l_num_aviso_rec) THEN
       RETURN
    END IF
    # Fim chamado 835591

    LET l_contador = 0
    WHENEVER ERROR CONTINUE
    SELECT COUNT(*)
      INTO  l_contador
      FROM  nf_sup_erro
     WHERE  empresa = p_cod_empresa
       AND  nf_sup_erro.num_aviso_rec  = l_num_aviso_rec
       AND (nf_sup_erro.ies_origem_erro <> "4" AND
            nf_sup_erro.ies_origem_erro <> "5")
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("SELECT","NF_SUP_ERRO")
       RETURN
    END IF

    IF l_contador > 0  THEN
       WHENEVER ERROR CONTINUE
       UPDATE nf_sup SET nf_sup.ies_nf_com_erro = "S"
        WHERE nf_sup.cod_empresa   = p_cod_empresa
          AND nf_sup.num_aviso_rec = l_num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("UPDATE","NF_SUP")
          RETURN
       END IF
    END IF

    WHENEVER ERROR CONTINUE
    SELECT cod_operacao,
           cod_fiscal_compl
      INTO l_cod_operacao,
           l_cod_fiscal_compl
      FROM aviso_rec_compl
     WHERE aviso_rec_compl.cod_empresa   = p_cod_empresa
       AND aviso_rec_compl.num_aviso_rec = l_num_aviso_rec
    WHENEVER ERROR CONTINUE

    WHENEVER ERROR CONTINUE
    SELECT cod_operac_estoq
      INTO l_cod_operac_estoq
      FROM aviso_rec
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = l_num_aviso_rec
       AND num_seq       = 1
    WHENEVER ERROR STOP

    IF sup3760_passa_parametro('MODIFICACAO',
                               p_cod_empresa,
                               l_num_aviso_rec,
                               l_cod_operacao,     #p_dados_tela.cod_operacao,
                               l_cod_fiscal_compl, #p_dados_tela.cod_fiscal_compl,
                               l_dat_emis_nf,      #p_dados_tela.dat_emis_nf,
                               l_dat_entrada_nf,   #p_dados_tela.dat_entrada_nf,
                               l_cnd_pgto_nf,      #p_dados_tela.cnd_pgto_nf,
                               l_cod_mod_embar,    #p_dados_tela.cod_mod_embar,
                               '6',
                               'N',
                               ' ',
                               l_cod_operac_estoq, #p_dados_tela.cod_operac_estoq,
                               l_cod_fornecedor,
                               l_ser_nf,
                               l_ssr_nf,
                               'NFM') THEN
       CALL log120_procura_caminho("sup3771") RETURNING comando3
       RUN comando3 RETURNING p_cancel
       CURRENT WINDOW IS w_sup37601
       LET m_executou_sup3771 = TRUE
    END IF
 END IF

END FUNCTION

#------------------------------------#
FUNCTION sup3760_verifica_nf_cap()
#------------------------------------#

 WHENEVER ERROR CONTINUE
 SELECT cod_empresa
   FROM audit_sup_cre
  WHERE cod_empresa   = p_cod_empresa
    AND num_aviso_rec = p_dados_tela.num_aviso_rec
    AND txt_processo  = "Nota fiscal em trânsito. Optado por não gerar abatimento"
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 100 THEN
    RETURN FALSE
 ELSE
    RETURN TRUE
 END IF

END FUNCTION


#-----------------------------------------------#
FUNCTION sup3760_busca_mod_embar_sem_frete()
#-----------------------------------------------#
DEFINE l_cod_mod_embar LIKE modo_embarque.cod_mod_embar,
       l_den_mod_embar LIKE modo_embarque.den_mod_embar

 WHENEVER ERROR CONTINUE
  SELECT cod_mod_embar, den_mod_embar
    INTO l_cod_mod_embar, l_den_mod_embar
    FROM modo_embarque
   WHERE cod_mod_embar = m_mod_embarque_nfm_importacao
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND
    sqlca.sqlcode <> 100 THEN
    CALL log003_err_sql("SELECT","CQ_MOD_EMBARQUE")
    RETURN FALSE
 ELSE
    IF sqlca.sqlcode = 100 THEN
       INITIALIZE l_cod_mod_embar TO NULL
       LET l_den_mod_embar = ' '
    END IF
 END IF

 RETURN l_cod_mod_embar, l_den_mod_embar


END FUNCTION



#---------------------------------------------#
FUNCTION sup3760_carrega_dados_importacao()
#---------------------------------------------#
DEFINE l_peso_bruto     LIKE nfe_sup_compl.peso_bruto,
       l_peso_liquido   LIKE nfe_sup_compl.peso_liquido,
       l_cod_embal_srf  LIKE embalagem.cod_embal,
       l_cod_embal_vdp  LIKE embalagem.cod_embal,
       l_cod_transp_nac LIKE proc_imp_compl.cod_transp_nac,
       l_volume         CHAR(05),
       l_num_di         LIKE processo_imp.num_di,
       l_raz_social     LIKE fornecedor.raz_social

 WHENEVER ERROR CONTINUE
 SELECT peso_bruto,     #nfe_sup_compl.peso_bruto
        #peso_liquido,   #nfe_sup_compl.peso_liquido
        cod_embal_srf,  #IF NOT sup7540_atualiza_sup_par_ar("cod_embalagem_nf",m_cod_embalagem,"TEXT") THEN
        cod_transp_nac, #p_aviso_rec_compl.cod_transpor
        qtd_volum_embal #nfe_sup_compl.qtd_volumes
   INTO l_peso_bruto,
        #l_peso_liquido,
        l_cod_embal_srf,
        l_cod_transp_nac,
        l_volume
   FROM proc_imp_compl
  WHERE cod_empresa  = p_processo_imp.cod_empresa
    AND num_processo = p_processo_imp.num_processo
    AND num_versao   = p_processo_imp.num_versao
 WHENEVER ERROR STOP
 IF sqlca.sqlcode = 0 THEN
    WHENEVER ERROR CONTINUE
    SELECT SUM(proc_item.val_tot_pes_it)
      INTO l_peso_liquido
      FROM proc_item
     WHERE proc_item.cod_empresa  = p_cod_empresa
       AND proc_item.num_processo = p_processo_imp.num_processo
       AND proc_item.num_versao   = p_processo_imp.num_versao
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       CALL log003_err_sql("SELECT","PROC_ITEM")
    END IF

    WHENEVER ERROR CONTINUE
    SELECT cod_empresa
      FROM nfe_sup_compl
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       WHENEVER ERROR CONTINUE
       UPDATE nfe_sup_compl SET peso_bruto    = l_peso_bruto,
                                peso_liquido  = l_peso_liquido,
                                volume        = l_volume
        WHERE cod_empresa   = p_cod_empresa
          AND num_aviso_rec = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("UPDATE","NFE_SUP_COMP")
       END IF
    ELSE
       WHENEVER ERROR CONTINUE
       INSERT INTO nfe_sup_compl(cod_empresa       ,
                                 num_aviso_rec     ,
                                 den_embal         ,
                                 qtd_volumes       ,
                                 peso_bruto        ,
                                 peso_liquido      ,
                                 ies_proc_nfs      ,
                                 num_proc_imp_nfs  ,
                                 texto_obs1        ,
                                 texto_obs2        ,
                                 texto_compl1      ,
                                 texto_compl2      ,
                                 ies_nfe_emit)
                          VALUES (p_cod_empresa,
                                  p_dados_tela.num_aviso_rec,
                                  NULL,
                                  l_volume,
                                  l_peso_bruto,
                                  l_peso_liquido,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  'N')
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INSERT","nfe_sup_compl")
       END IF
    END IF

    WHENEVER ERROR CONTINUE
    SELECT cod_empresa
      FROM aviso_rec_compl
     WHERE cod_empresa   = p_cod_empresa
       AND num_aviso_rec = p_dados_tela.num_aviso_rec
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       WHENEVER ERROR CONTINUE
       SELECT raz_social
         INTO l_raz_social
         FROM fornecedor
        WHERE cod_fornecedor = l_cod_transp_nac
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           LET l_raz_social = ' '
        END IF

       WHENEVER ERROR CONTINUE
       UPDATE aviso_rec_compl SET cod_transpor = l_cod_transp_nac,
                                  num_di       = p_processo_imp.num_di

        WHERE cod_empresa   = p_cod_empresa
          AND num_aviso_rec = p_dados_tela.num_aviso_rec
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("UPDATE","AVISO_REC_COMPL")
       END IF
    ELSE
       WHENEVER ERROR CONTINUE
       SELECT raz_social
         INTO l_raz_social
         FROM fornecedor
        WHERE cod_fornecedor = l_cod_transp_nac
        WHENEVER ERROR STOP
        IF sqlca.sqlcode <> 0 THEN
           LET l_raz_social = ' '
        END IF

       WHENEVER ERROR CONTINUE
       INSERT INTO aviso_rec_compl(cod_empresa      ,
                                   num_aviso_rec    ,
                                   cod_transpor     ,
                                   den_transpor     ,
                                   num_placa_veic   ,
                                   num_di           ,
                                   ies_incl_import  ,
                                   num_lote_pat     ,
                                   cod_operacao     ,
                                   cod_empresa_orig ,
                                   cod_moeda_forn   ,
                                   num_embarque     ,
                                   ies_situacao     ,
                                   nom_usuario      ,
                                   dat_proces       ,
                                   hor_operac       ,
                                   cod_fiscal_compl)
                           VALUES (p_cod_empresa,
                                   p_dados_tela.num_aviso_rec,
                                   l_cod_transp_nac,
                                   l_raz_social,
                                   NULL,
                                   p_processo_imp.num_di,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   NULL,
                                   0)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INSERT","AVISO_REC_COMPL")
       END IF
    END IF
    #busca embalagem do vdp
    WHENEVER ERROR CONTINUE
    SELECT cod_embal
      INTO l_cod_embal_vdp
      FROM embalagem_srf
     WHERE cod_embal_srf = l_cod_embal_srf
    WHENEVER ERROR STOP
    IF sqlca.sqlcode <> 0 THEN
       LET l_cod_embal_vdp = ' '
    END IF

    WHENEVER ERROR CONTINUE
    SELECT empresa
      FROM sup_par_ar
     WHERE empresa           = p_cod_empresa
       AND aviso_recebto     = p_dados_tela.num_aviso_rec
       AND seq_aviso_recebto = 0
       AND parametro         = 'cod_embalagem_nf'
    WHENEVER ERROR STOP
    IF sqlca.sqlcode = 0 THEN
       WHENEVER ERROR CONTINUE
       UPDATE sup_par_ar SET parametro_texto = l_cod_embal_srf
       WHERE empresa           = p_cod_empresa
         AND aviso_recebto     = p_dados_tela.num_aviso_rec
         AND seq_aviso_recebto = 0
         AND parametro         = 'cod_embalagem_nf'
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("UPDATE","SUP_PAR_AR")
       END IF
    ELSE
       WHENEVER ERROR CONTINUE
       INSERT INTO sup_par_ar(empresa          ,
                              aviso_recebto    ,
                              seq_aviso_recebto,
                              parametro        ,
                              par_ind_especial ,
                              parametro_texto  ,
                              parametro_val    ,
                              parametro_dat)
                       VALUES (p_cod_empresa,
                               p_dados_tela.num_aviso_rec,
                               0,
                               'cod_embalagem_nf',
                               NULL,
                               l_cod_embal_vdp,
                               NULL,
                               NULL)
       WHENEVER ERROR STOP
       IF sqlca.sqlcode <> 0 THEN
          CALL log003_err_sql("INSERT","SUP_PAR_AR")
       END IF
    END IF
 END IF


END FUNCTION

#--------------------------------------#
 FUNCTION sup3760_verifica_tipo(l_tipo)
#--------------------------------------#
  DEFINE l_tipo  CHAR(01)

  IF l_tipo <> p_dados_tela.ies_nf_aguard_nfe AND
     p_dados_tela.ies_especie_nf = "NFR" THEN
     IF NOT sup3760_verifica_fornec_depos(p_dados_tela.cod_fornecedor) THEN
        IF l_tipo = "A" THEN
           CALL log0030_mensagem('Fornecedor/CFOP de NFR tipo A com origem fornecedor.','info')
           IF p_dados_tela.ies_nf_aguard_nfe = 'T' THEN
              IF log0040_confirm(0,0, "Deseja alterar tipo da nota para A ?") THEN
                 LET p_dados_tela.ies_nf_aguard_nfe = "A"
              END IF
           ELSE
              IF log0040_confirm(0,0, "Deseja alterar tipo da nota para T ?") THEN
                 LET p_dados_tela.ies_nf_aguard_nfe = "T"
              ELSE
                 LET p_dados_tela.ies_nf_aguard_nfe = "A"
              END IF
           END IF
           DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
        END IF
     END IF
     IF l_tipo = "B" THEN
        CALL log0030_mensagem('Fornecedor/CFOP de NFR tipo B com origem depositante.','info')
        #OS558302
        IF p_dados_tela.ies_nf_aguard_nfe = 'T' THEN
           IF log0040_confirm(0,0, "Deseja alterar tipo da nota para B ?") THEN
              LET p_dados_tela.ies_nf_aguard_nfe = "B"
           END IF
        ELSE
           IF log0040_confirm(0,0, "Deseja alterar tipo da nota para T ?") THEN
              LET p_dados_tela.ies_nf_aguard_nfe = "T"
           ELSE
              LET p_dados_tela.ies_nf_aguard_nfe = "B"
           END IF
        END IF
        DISPLAY BY NAME p_dados_tela.ies_nf_aguard_nfe
     END IF
  END IF

END FUNCTION


#-------------------------------------------------------------#
 FUNCTION sup3760_verifica_cadastro_triangulacao_depositante()
#-------------------------------------------------------------#
  DEFINE l_cod_fiscal          LIKE cod_fiscal_sup.cod_fiscal,
         l_count               SMALLINT

  IF p_dados_tela.ies_especie_nf    = "NFR" AND
     p_dados_tela.ies_nf_aguard_nfe = "A" THEN
     CALL sup3760_verifica_sup_fornec_tri_ter() RETURNING l_count
     IF l_count > 0 THEN
        LET l_cod_fiscal = p_dados_tela.cod_operacao[3,5]
        WHENEVER ERROR CONTINUE
        SELECT fornec_depositante
          FROM sup_fornec_tri_ter
         WHERE empresa         = p_cod_empresa
           AND fornecedor      = p_dados_tela.cod_fornecedor
           AND cod_fisc_fornec = l_cod_fiscal
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 100 THEN
           CALL log0030_mensagem('Fornecedor/CFOP não cadastrado no programa de triangulação (SUP1648).','exclamation')
           RETURN 0
        END IF
     END IF
     IF NOT sup3760_verifica_necessita_pc(p_dados_tela.cod_fornecedor,
                                          p_dados_tela.cod_operacao,
                                          "A") THEN
        CALL log0030_mensagem("Fornecedor não permite entrada sem pedido de compra","info")
        RETURN 2
     END IF
  END IF

  IF p_dados_tela.ies_especie_nf    = "NFR" AND
     p_dados_tela.ies_nf_aguard_nfe = "B" THEN
     CALL sup3760_verifica_sup_fornec_tri_ter() RETURNING l_count
     IF l_count > 0 THEN
        LET l_cod_fiscal = p_dados_tela.cod_operacao[3,5]
        WHENEVER ERROR CONTINUE
        SELECT fornec_depositante
          FROM sup_fornec_tri_ter
         WHERE empresa            = p_cod_empresa
           AND fornec_depositante = p_dados_tela.cod_fornecedor
           AND cod_fisc_depos     = l_cod_fiscal
        WHENEVER ERROR STOP
        IF sqlca.sqlcode = 100 THEN
           CALL log0030_mensagem('Fornecedor/CFOP não cadastrado no programa de triangulação como depositante (SUP1648).','exclamation')
           RETURN 0
        END IF
     END IF
  END IF
  RETURN 1

END FUNCTION


#----------------------------------------------#
 FUNCTION sup3760_verifica_sup_fornec_tri_ter()
#----------------------------------------------#
  DEFINE l_count     SMALLINT

  LET l_count = 0
  IF log0150_verifica_se_tabela_existe("sup_fornec_tri_ter") THEN
     WHENEVER ERROR CONTINUE
     SELECT COUNT(*)
       INTO l_count
       FROM sup_fornec_tri_ter
      WHERE empresa = p_cod_empresa
     WHENEVER ERROR STOP
     IF sqlca.sqlcode <> 0 OR l_count IS NULL THEN
        LET l_count = 0
     END IF
  END IF
  RETURN l_count

END FUNCTION

#----------------------------------------------------#
 FUNCTION sup3760_cancela_nf_venda_ponto_a_ponto()
#----------------------------------------------------#

   IF NOT obf3760_nota_venda_ponto_a_ponto(p_cod_empresa, p_dados_tela.num_aviso_rec) THEN
      RETURN TRUE
   END IF


   WHENEVER ERROR CONTINUE
   UPDATE nf_mestre_ent
      SET ies_situacao = "C"
    WHERE cod_empresa  = p_cod_empresa
      AND num_nff      = p_dados_tela.num_nf
   WHENEVER ERROR STOP
   IF sqlca.sqlcode <> 0 THEN
      CALL log003_err_sql("SELECT","NF_MESTRE_ENT")
      RETURN FALSE
   END IF

   RETURN TRUE

END FUNCTION


#----------------------------------------#
FUNCTION sup3760_busca_numero_proc_imp()
#----------------------------------------#
DEFINE  l_num_processo    LIKE aviso_rec_proc_imp.num_processo

  WHENEVER ERROR CONTINUE
  INITIALIZE l_num_processo TO NULL
  SELECT UNIQUE(num_processo)
    INTO l_num_processo
    FROM processo_imp
   WHERE cod_empresa   = p_cod_empresa
     AND num_aviso_rec = p_dados_tela.num_aviso_rec
  WHENEVER ERROR STOP
  IF sqlca.sqlcode <> 0 AND sqlca.sqlcode <> 100 THEN
     CALL log003_err_sql("LEITURA","AVISO_REC_PROC_IMP")
  END IF

  RETURN l_num_processo
 END FUNCTION

#-----------------------------------------------------------------------------------#
 FUNCTION sup3760_verifica_permissao_troca_tipo_docum_wms(l_empresa,l_num_aviso_rec)
#-----------------------------------------------------------------------------------#
 DEFINE l_empresa       LIKE aviso_rec.cod_empresa,
        l_num_aviso_rec LIKE aviso_rec.num_aviso_rec

 IF find4GLFunction('wms6135_verifica_permissao_troca_tipo_docum_wms') THEN
    IF NOT wms6135_verifica_permissao_troca_tipo_docum_wms(l_empresa,
                                                           l_num_aviso_rec) THEN
       RETURN FALSE
    END IF
 END IF

 RETURN TRUE

 END FUNCTION

#-----------------------------#
FUNCTION sup3760_nota_existe()  #809554
#-----------------------------#

 WHENEVER ERROR CONTINUE
 SELECT 1
   FROM nf_sup
  WHERE nf_sup.cod_empresa     = p_cod_empresa
    AND nf_sup.num_nf          = p_dados_tela.num_nf
    #AND nf_sup.ies_especie_nf  = p_dados_tela.ies_especie_nf  #A56550
    AND nf_sup.ser_nf          = p_dados_tela.ser_nf
    AND nf_sup.ssr_nf          = p_dados_tela.ssr_nf
    AND nf_sup.cod_fornecedor  = p_dados_tela.cod_fornecedor
 WHENEVER ERROR STOP
 IF sqlca.sqlcode <> 0 AND
    sqlca.sqlcode <> 100 AND
    sqlca.sqlcode <> -284 THEN  #A56550
    CALL log003_err_sql("SELECT","nf_sup")
 ELSE
    IF sqlca.sqlcode = 0 OR
       sqlca.sqlcode = -284 THEN #A56550
       RETURN TRUE
    END IF
 END IF

 RETURN FALSE

END FUNCTION

 # Inicio chamado 835.591
#------------------------------------------------------------#
 FUNCTION sup3760_insere_parametro_sup1544(l_num_aviso_rec)
#------------------------------------------------------------#
 DEFINE lr_sup_par_ar                 RECORD
                                         empresa            LIKE sup_par_ar.empresa,
                                         aviso_recebto      LIKE sup_par_ar.aviso_recebto,
                                         seq_aviso_recebto  LIKE sup_par_ar.seq_aviso_recebto,
                                         parametro          LIKE sup_par_ar.parametro,
                                         par_ind_especial   LIKE sup_par_ar.par_ind_especial,
                                         parametro_texto    LIKE sup_par_ar.parametro_texto,
                                         parametro_val      LIKE sup_par_ar.parametro_val,
                                         parametro_dat      LIKE sup_par_ar.parametro_dat
                                      END RECORD

 DEFINE l_num_aviso_rec               LIKE aviso_rec.num_aviso_rec


 IF log_existe_EPL("supy78_verifica_cliente_78") THEN
    IF supy78_verifica_cliente_78() THEN
       LET lr_sup_par_ar.empresa           = p_cod_empresa
       LET lr_sup_par_ar.aviso_recebto     = l_num_aviso_rec
       LET lr_sup_par_ar.seq_aviso_recebto = 1
       LET lr_sup_par_ar.parametro         = 'impressao_sup1544'
       LET lr_sup_par_ar.par_ind_especial  = 'S'
       LET lr_sup_par_ar.parametro_texto   = NULL
       LET lr_sup_par_ar.parametro_val     = NULL
       LET lr_sup_par_ar.parametro_dat     = NULL

       WHENEVER ERROR CONTINUE
        INSERT INTO sup_par_ar (empresa,
                                aviso_recebto,
                                seq_aviso_recebto,
                                parametro,
                                par_ind_especial,
                                parametro_texto,
                                parametro_val,
                                parametro_dat)
                        VALUES (lr_sup_par_ar.empresa,
                                lr_sup_par_ar.aviso_recebto,
                                lr_sup_par_ar.seq_aviso_recebto,
                                lr_sup_par_ar.parametro,
                                lr_sup_par_ar.par_ind_especial,
                                lr_sup_par_ar.parametro_texto,
                                lr_sup_par_ar.parametro_val,
                                lr_sup_par_ar.parametro_dat)
       WHENEVER ERROR STOP

       IF SQLCA.SQLCODE <> 0 THEN
          CALL log003_err_sql("INSERT","SUP_PAR_AR")
          RETURN FALSE
       END IF
    END IF
 END IF


 RETURN TRUE

 END FUNCTION

#------------------------------------------------------------#
 FUNCTION sup3760_elimina_parametro_sup1544(l_num_aviso_rec)
#------------------------------------------------------------#
 DEFINE l_num_aviso_rec               LIKE aviso_rec.num_aviso_rec

 IF log_existe_EPL("supy78_verifica_cliente_78") THEN
    IF supy78_verifica_cliente_78() THEN
       WHENEVER ERROR CONTINUE
        DELETE FROM sup_par_ar
         WHERE empresa = p_cod_empresa
           AND aviso_recebto     = l_num_aviso_rec
           AND seq_aviso_recebto = 1
           AND parametro         = "impressao_sup1544"
       WHENEVER ERROR STOP

       IF SQLCA.SQLCODE <> 0 THEN
          CALL log003_err_sql("DELETE","SUP_PAR_AR")
          RETURN FALSE
       END IF
    END IF
 END IF

 RETURN TRUE

 END FUNCTION
 # Fim chamado 835.591

#-------------------------------#
FUNCTION sup3760_version_info()
#-------------------------------#

RETURN '$Archive: /logix10R2/suprimentos/suprimentos/programas/sup3760.4gl $|$Revision: 88 $|$Date: 21/03/11 15:19 $|$Modtime: 17/03/11 18:18 $' #Informações do controle de versão do SourceSafe - Não remover esta linha (FRAMEWORK)
END FUNCTION